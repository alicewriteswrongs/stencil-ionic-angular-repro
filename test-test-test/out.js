"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __decorateClass = (decorators, target, key, kind) => {
    var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
    for (var i = decorators.length - 1, decorator; i >= 0; i--)
      if (decorator = decorators[i])
        result = (kind ? decorator(target, key, result) : decorator(result)) || result;
    if (kind && result)
      __defProp(target, key, result);
    return result;
  };

  // node_modules/@angular/core/fesm2022/primitives/signals.mjs
  function defaultEquals(a, b) {
    return Object.is(a, b);
  }
  function setActiveConsumer(consumer) {
    const prev = activeConsumer;
    activeConsumer = consumer;
    return prev;
  }
  function getActiveConsumer() {
    return activeConsumer;
  }
  function isInNotificationPhase() {
    return inNotificationPhase;
  }
  function producerAccessed(node) {
    if (inNotificationPhase) {
      throw new Error(typeof ngDevMode !== "undefined" && ngDevMode ? `Assertion error: signal read during notification phase` : "");
    }
    if (activeConsumer === null) {
      return;
    }
    activeConsumer.consumerOnSignalRead(node);
    const idx = activeConsumer.nextProducerIndex++;
    assertConsumerNode(activeConsumer);
    if (idx < activeConsumer.producerNode.length && activeConsumer.producerNode[idx] !== node) {
      if (consumerIsLive(activeConsumer)) {
        const staleProducer = activeConsumer.producerNode[idx];
        producerRemoveLiveConsumerAtIndex(staleProducer, activeConsumer.producerIndexOfThis[idx]);
      }
    }
    if (activeConsumer.producerNode[idx] !== node) {
      activeConsumer.producerNode[idx] = node;
      activeConsumer.producerIndexOfThis[idx] = consumerIsLive(activeConsumer) ? producerAddLiveConsumer(node, activeConsumer, idx) : 0;
    }
    activeConsumer.producerLastReadVersion[idx] = node.version;
  }
  function producerIncrementEpoch() {
    epoch++;
  }
  function producerUpdateValueVersion(node) {
    if (consumerIsLive(node) && !node.dirty) {
      return;
    }
    if (!node.dirty && node.lastCleanEpoch === epoch) {
      return;
    }
    if (!node.producerMustRecompute(node) && !consumerPollProducersForChange(node)) {
      node.dirty = false;
      node.lastCleanEpoch = epoch;
      return;
    }
    node.producerRecomputeValue(node);
    node.dirty = false;
    node.lastCleanEpoch = epoch;
  }
  function producerNotifyConsumers(node) {
    if (node.liveConsumerNode === void 0) {
      return;
    }
    const prev = inNotificationPhase;
    inNotificationPhase = true;
    try {
      for (const consumer of node.liveConsumerNode) {
        if (!consumer.dirty) {
          consumerMarkDirty(consumer);
        }
      }
    } finally {
      inNotificationPhase = prev;
    }
  }
  function producerUpdatesAllowed() {
    return activeConsumer?.consumerAllowSignalWrites !== false;
  }
  function consumerMarkDirty(node) {
    node.dirty = true;
    producerNotifyConsumers(node);
    node.consumerMarkedDirty?.(node);
  }
  function consumerBeforeComputation(node) {
    node && (node.nextProducerIndex = 0);
    return setActiveConsumer(node);
  }
  function consumerAfterComputation(node, prevConsumer) {
    setActiveConsumer(prevConsumer);
    if (!node || node.producerNode === void 0 || node.producerIndexOfThis === void 0 || node.producerLastReadVersion === void 0) {
      return;
    }
    if (consumerIsLive(node)) {
      for (let i = node.nextProducerIndex; i < node.producerNode.length; i++) {
        producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);
      }
    }
    while (node.producerNode.length > node.nextProducerIndex) {
      node.producerNode.pop();
      node.producerLastReadVersion.pop();
      node.producerIndexOfThis.pop();
    }
  }
  function consumerPollProducersForChange(node) {
    assertConsumerNode(node);
    for (let i = 0; i < node.producerNode.length; i++) {
      const producer = node.producerNode[i];
      const seenVersion = node.producerLastReadVersion[i];
      if (seenVersion !== producer.version) {
        return true;
      }
      producerUpdateValueVersion(producer);
      if (seenVersion !== producer.version) {
        return true;
      }
    }
    return false;
  }
  function consumerDestroy(node) {
    assertConsumerNode(node);
    if (consumerIsLive(node)) {
      for (let i = 0; i < node.producerNode.length; i++) {
        producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);
      }
    }
    node.producerNode.length = node.producerLastReadVersion.length = node.producerIndexOfThis.length = 0;
    if (node.liveConsumerNode) {
      node.liveConsumerNode.length = node.liveConsumerIndexOfThis.length = 0;
    }
  }
  function producerAddLiveConsumer(node, consumer, indexOfThis) {
    assertProducerNode(node);
    assertConsumerNode(node);
    if (node.liveConsumerNode.length === 0) {
      for (let i = 0; i < node.producerNode.length; i++) {
        node.producerIndexOfThis[i] = producerAddLiveConsumer(node.producerNode[i], node, i);
      }
    }
    node.liveConsumerIndexOfThis.push(indexOfThis);
    return node.liveConsumerNode.push(consumer) - 1;
  }
  function producerRemoveLiveConsumerAtIndex(node, idx) {
    assertProducerNode(node);
    assertConsumerNode(node);
    if (typeof ngDevMode !== "undefined" && ngDevMode && idx >= node.liveConsumerNode.length) {
      throw new Error(`Assertion error: active consumer index ${idx} is out of bounds of ${node.liveConsumerNode.length} consumers)`);
    }
    if (node.liveConsumerNode.length === 1) {
      for (let i = 0; i < node.producerNode.length; i++) {
        producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);
      }
    }
    const lastIdx = node.liveConsumerNode.length - 1;
    node.liveConsumerNode[idx] = node.liveConsumerNode[lastIdx];
    node.liveConsumerIndexOfThis[idx] = node.liveConsumerIndexOfThis[lastIdx];
    node.liveConsumerNode.length--;
    node.liveConsumerIndexOfThis.length--;
    if (idx < node.liveConsumerNode.length) {
      const idxProducer = node.liveConsumerIndexOfThis[idx];
      const consumer = node.liveConsumerNode[idx];
      assertConsumerNode(consumer);
      consumer.producerIndexOfThis[idxProducer] = idx;
    }
  }
  function consumerIsLive(node) {
    return node.consumerIsAlwaysLive || (node?.liveConsumerNode?.length ?? 0) > 0;
  }
  function assertConsumerNode(node) {
    node.producerNode ??= [];
    node.producerIndexOfThis ??= [];
    node.producerLastReadVersion ??= [];
  }
  function assertProducerNode(node) {
    node.liveConsumerNode ??= [];
    node.liveConsumerIndexOfThis ??= [];
  }
  function createComputed(computation) {
    const node = Object.create(COMPUTED_NODE);
    node.computation = computation;
    const computed2 = () => {
      producerUpdateValueVersion(node);
      producerAccessed(node);
      if (node.value === ERRORED) {
        throw node.error;
      }
      return node.value;
    };
    computed2[SIGNAL] = node;
    return computed2;
  }
  function defaultThrowError() {
    throw new Error();
  }
  function throwInvalidWriteToSignalError() {
    throwInvalidWriteToSignalErrorFn();
  }
  function setThrowInvalidWriteToSignalError(fn2) {
    throwInvalidWriteToSignalErrorFn = fn2;
  }
  function createSignal(initialValue) {
    const node = Object.create(SIGNAL_NODE);
    node.value = initialValue;
    const getter = () => {
      producerAccessed(node);
      return node.value;
    };
    getter[SIGNAL] = node;
    return getter;
  }
  function signalSetFn(node, newValue) {
    if (!producerUpdatesAllowed()) {
      throwInvalidWriteToSignalError();
    }
    if (!node.equal(node.value, newValue)) {
      node.value = newValue;
      signalValueChanged(node);
    }
  }
  function signalUpdateFn(node, updater) {
    if (!producerUpdatesAllowed()) {
      throwInvalidWriteToSignalError();
    }
    signalSetFn(node, updater(node.value));
  }
  function signalValueChanged(node) {
    node.version++;
    producerIncrementEpoch();
    producerNotifyConsumers(node);
    postSignalSetFn?.();
  }
  function createWatch(fn2, schedule, allowSignalWrites) {
    const node = Object.create(WATCH_NODE);
    if (allowSignalWrites) {
      node.consumerAllowSignalWrites = true;
    }
    node.fn = fn2;
    node.schedule = schedule;
    const registerOnCleanup = (cleanupFn) => {
      node.cleanupFn = cleanupFn;
    };
    function isWatchNodeDestroyed(node2) {
      return node2.fn === null && node2.schedule === null;
    }
    function destroyWatchNode(node2) {
      if (!isWatchNodeDestroyed(node2)) {
        consumerDestroy(node2);
        node2.cleanupFn();
        node2.fn = null;
        node2.schedule = null;
        node2.cleanupFn = NOOP_CLEANUP_FN;
      }
    }
    const run = () => {
      if (node.fn === null) {
        return;
      }
      if (isInNotificationPhase()) {
        throw new Error(`Schedulers cannot synchronously execute watches while scheduling.`);
      }
      node.dirty = false;
      if (node.hasRun && !consumerPollProducersForChange(node)) {
        return;
      }
      node.hasRun = true;
      const prevConsumer = consumerBeforeComputation(node);
      try {
        node.cleanupFn();
        node.cleanupFn = NOOP_CLEANUP_FN;
        node.fn(registerOnCleanup);
      } finally {
        consumerAfterComputation(node, prevConsumer);
      }
    };
    node.ref = {
      notify: () => consumerMarkDirty(node),
      run,
      cleanup: () => node.cleanupFn(),
      destroy: () => destroyWatchNode(node),
      [SIGNAL]: node
    };
    return node.ref;
  }
  var activeConsumer, inNotificationPhase, epoch, SIGNAL, REACTIVE_NODE, UNSET, COMPUTING, ERRORED, COMPUTED_NODE, throwInvalidWriteToSignalErrorFn, postSignalSetFn, SIGNAL_NODE, NOOP_CLEANUP_FN, WATCH_NODE;
  var init_signals = __esm({
    "node_modules/@angular/core/fesm2022/primitives/signals.mjs"() {
      activeConsumer = null;
      inNotificationPhase = false;
      epoch = 1;
      SIGNAL = /* @__PURE__ */ Symbol("SIGNAL");
      REACTIVE_NODE = {
        version: 0,
        lastCleanEpoch: 0,
        dirty: false,
        producerNode: void 0,
        producerLastReadVersion: void 0,
        producerIndexOfThis: void 0,
        nextProducerIndex: 0,
        liveConsumerNode: void 0,
        liveConsumerIndexOfThis: void 0,
        consumerAllowSignalWrites: false,
        consumerIsAlwaysLive: false,
        producerMustRecompute: () => false,
        producerRecomputeValue: () => {
        },
        consumerMarkedDirty: () => {
        },
        consumerOnSignalRead: () => {
        }
      };
      UNSET = /* @__PURE__ */ Symbol("UNSET");
      COMPUTING = /* @__PURE__ */ Symbol("COMPUTING");
      ERRORED = /* @__PURE__ */ Symbol("ERRORED");
      COMPUTED_NODE = /* @__PURE__ */ (() => {
        return {
          ...REACTIVE_NODE,
          value: UNSET,
          dirty: true,
          error: null,
          equal: defaultEquals,
          producerMustRecompute(node) {
            return node.value === UNSET || node.value === COMPUTING;
          },
          producerRecomputeValue(node) {
            if (node.value === COMPUTING) {
              throw new Error("Detected cycle in computations.");
            }
            const oldValue = node.value;
            node.value = COMPUTING;
            const prevConsumer = consumerBeforeComputation(node);
            let newValue;
            try {
              newValue = node.computation();
            } catch (err2) {
              newValue = ERRORED;
              node.error = err2;
            } finally {
              consumerAfterComputation(node, prevConsumer);
            }
            if (oldValue !== UNSET && oldValue !== ERRORED && newValue !== ERRORED && node.equal(oldValue, newValue)) {
              node.value = oldValue;
              return;
            }
            node.value = newValue;
            node.version++;
          }
        };
      })();
      throwInvalidWriteToSignalErrorFn = defaultThrowError;
      postSignalSetFn = null;
      SIGNAL_NODE = /* @__PURE__ */ (() => {
        return {
          ...REACTIVE_NODE,
          equal: defaultEquals,
          value: void 0
        };
      })();
      NOOP_CLEANUP_FN = () => {
      };
      WATCH_NODE = /* @__PURE__ */ (() => {
        return {
          ...REACTIVE_NODE,
          consumerIsAlwaysLive: true,
          consumerAllowSignalWrites: false,
          consumerMarkedDirty: (node) => {
            if (node.schedule !== null) {
              node.schedule(node.ref);
            }
          },
          hasRun: false,
          cleanupFn: NOOP_CLEANUP_FN
        };
      })();
    }
  });

  // node_modules/tslib/tslib.es6.mjs
  function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }
  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n) {
      return function(v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f)
        throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _)
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
            return t;
          if (y = 0, t)
            op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2])
                _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e2) {
          op = [6, e2];
          y = 0;
        } finally {
          f = t = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m)
      return o;
    var i = m.call(o), r, ar = [], e2;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
        ar.push(r.value);
    } catch (error2) {
      e2 = { error: error2 };
    } finally {
      try {
        if (r && !r.done && (m = i["return"]))
          m.call(i);
      } finally {
        if (e2)
          throw e2.error;
      }
    }
    return ar;
  }
  function __spreadArray(to, from2, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l = from2.length, ar; i < l; i++) {
        if (ar || !(i in from2)) {
          if (!ar)
            ar = Array.prototype.slice.call(from2, 0, i);
          ar[i] = from2[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from2));
  }
  function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function verb(n) {
      if (g[n])
        i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e2) {
        settle(q[0][3], e2);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if (f(v), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  }
  function __asyncValues(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v2) {
        resolve({ value: v2, done: d });
      }, reject);
    }
  }
  var extendStatics, __assign;
  var init_tslib_es6 = __esm({
    "node_modules/tslib/tslib.es6.mjs"() {
      extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isFunction.js
  function isFunction(value) {
    return typeof value === "function";
  }
  var init_isFunction = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isFunction.js"() {
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
  function createErrorClass(createImpl) {
    var _super = function(instance) {
      Error.call(instance);
      instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
  }
  var init_createErrorClass = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js"() {
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
  var UnsubscriptionError;
  var init_UnsubscriptionError = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js"() {
      init_createErrorClass();
      UnsubscriptionError = createErrorClass(function(_super) {
        return function UnsubscriptionErrorImpl(errors) {
          _super(this);
          this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err2, i) {
            return i + 1 + ") " + err2.toString();
          }).join("\n  ") : "";
          this.name = "UnsubscriptionError";
          this.errors = errors;
        };
      });
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
  function arrRemove(arr, item) {
    if (arr) {
      var index = arr.indexOf(item);
      0 <= index && arr.splice(index, 1);
    }
  }
  var init_arrRemove = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/arrRemove.js"() {
    }
  });

  // node_modules/rxjs/dist/esm5/internal/Subscription.js
  function isSubscription(value) {
    return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
  }
  function execFinalizer(finalizer) {
    if (isFunction(finalizer)) {
      finalizer();
    } else {
      finalizer.unsubscribe();
    }
  }
  var Subscription, EMPTY_SUBSCRIPTION;
  var init_Subscription = __esm({
    "node_modules/rxjs/dist/esm5/internal/Subscription.js"() {
      init_tslib_es6();
      init_isFunction();
      init_UnsubscriptionError();
      init_arrRemove();
      Subscription = function() {
        function Subscription2(initialTeardown) {
          this.initialTeardown = initialTeardown;
          this.closed = false;
          this._parentage = null;
          this._finalizers = null;
        }
        Subscription2.prototype.unsubscribe = function() {
          var e_1, _a2, e_2, _b2;
          var errors;
          if (!this.closed) {
            this.closed = true;
            var _parentage = this._parentage;
            if (_parentage) {
              this._parentage = null;
              if (Array.isArray(_parentage)) {
                try {
                  for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                    var parent_1 = _parentage_1_1.value;
                    parent_1.remove(this);
                  }
                } catch (e_1_1) {
                  e_1 = { error: e_1_1 };
                } finally {
                  try {
                    if (_parentage_1_1 && !_parentage_1_1.done && (_a2 = _parentage_1.return))
                      _a2.call(_parentage_1);
                  } finally {
                    if (e_1)
                      throw e_1.error;
                  }
                }
              } else {
                _parentage.remove(this);
              }
            }
            var initialFinalizer = this.initialTeardown;
            if (isFunction(initialFinalizer)) {
              try {
                initialFinalizer();
              } catch (e2) {
                errors = e2 instanceof UnsubscriptionError ? e2.errors : [e2];
              }
            }
            var _finalizers = this._finalizers;
            if (_finalizers) {
              this._finalizers = null;
              try {
                for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                  var finalizer = _finalizers_1_1.value;
                  try {
                    execFinalizer(finalizer);
                  } catch (err2) {
                    errors = errors !== null && errors !== void 0 ? errors : [];
                    if (err2 instanceof UnsubscriptionError) {
                      errors = __spreadArray(__spreadArray([], __read(errors)), __read(err2.errors));
                    } else {
                      errors.push(err2);
                    }
                  }
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (_finalizers_1_1 && !_finalizers_1_1.done && (_b2 = _finalizers_1.return))
                    _b2.call(_finalizers_1);
                } finally {
                  if (e_2)
                    throw e_2.error;
                }
              }
            }
            if (errors) {
              throw new UnsubscriptionError(errors);
            }
          }
        };
        Subscription2.prototype.add = function(teardown) {
          var _a2;
          if (teardown && teardown !== this) {
            if (this.closed) {
              execFinalizer(teardown);
            } else {
              if (teardown instanceof Subscription2) {
                if (teardown.closed || teardown._hasParent(this)) {
                  return;
                }
                teardown._addParent(this);
              }
              (this._finalizers = (_a2 = this._finalizers) !== null && _a2 !== void 0 ? _a2 : []).push(teardown);
            }
          }
        };
        Subscription2.prototype._hasParent = function(parent) {
          var _parentage = this._parentage;
          return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
        };
        Subscription2.prototype._addParent = function(parent) {
          var _parentage = this._parentage;
          this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
        };
        Subscription2.prototype._removeParent = function(parent) {
          var _parentage = this._parentage;
          if (_parentage === parent) {
            this._parentage = null;
          } else if (Array.isArray(_parentage)) {
            arrRemove(_parentage, parent);
          }
        };
        Subscription2.prototype.remove = function(teardown) {
          var _finalizers = this._finalizers;
          _finalizers && arrRemove(_finalizers, teardown);
          if (teardown instanceof Subscription2) {
            teardown._removeParent(this);
          }
        };
        Subscription2.EMPTY = function() {
          var empty = new Subscription2();
          empty.closed = true;
          return empty;
        }();
        return Subscription2;
      }();
      EMPTY_SUBSCRIPTION = Subscription.EMPTY;
    }
  });

  // node_modules/rxjs/dist/esm5/internal/config.js
  var config;
  var init_config = __esm({
    "node_modules/rxjs/dist/esm5/internal/config.js"() {
      config = {
        onUnhandledError: null,
        onStoppedNotification: null,
        Promise: void 0,
        useDeprecatedSynchronousErrorHandling: false,
        useDeprecatedNextContext: false
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
  var timeoutProvider;
  var init_timeoutProvider = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js"() {
      init_tslib_es6();
      timeoutProvider = {
        setTimeout: function(handler, timeout) {
          var args = [];
          for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
          }
          var delegate = timeoutProvider.delegate;
          if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
            return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
          }
          return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
        },
        clearTimeout: function(handle) {
          var delegate = timeoutProvider.delegate;
          return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
        },
        delegate: void 0
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
  function reportUnhandledError(err2) {
    timeoutProvider.setTimeout(function() {
      var onUnhandledError = config.onUnhandledError;
      if (onUnhandledError) {
        onUnhandledError(err2);
      } else {
        throw err2;
      }
    });
  }
  var init_reportUnhandledError = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js"() {
      init_config();
      init_timeoutProvider();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/noop.js
  function noop() {
  }
  var init_noop = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/noop.js"() {
    }
  });

  // node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
  function errorNotification(error2) {
    return createNotification("E", void 0, error2);
  }
  function nextNotification(value) {
    return createNotification("N", value, void 0);
  }
  function createNotification(kind, value, error2) {
    return {
      kind,
      value,
      error: error2
    };
  }
  var COMPLETE_NOTIFICATION;
  var init_NotificationFactories = __esm({
    "node_modules/rxjs/dist/esm5/internal/NotificationFactories.js"() {
      COMPLETE_NOTIFICATION = function() {
        return createNotification("C", void 0, void 0);
      }();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/errorContext.js
  function errorContext(cb) {
    if (config.useDeprecatedSynchronousErrorHandling) {
      var isRoot = !context;
      if (isRoot) {
        context = { errorThrown: false, error: null };
      }
      cb();
      if (isRoot) {
        var _a2 = context, errorThrown = _a2.errorThrown, error2 = _a2.error;
        context = null;
        if (errorThrown) {
          throw error2;
        }
      }
    } else {
      cb();
    }
  }
  function captureError(err2) {
    if (config.useDeprecatedSynchronousErrorHandling && context) {
      context.errorThrown = true;
      context.error = err2;
    }
  }
  var context;
  var init_errorContext = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/errorContext.js"() {
      init_config();
      context = null;
    }
  });

  // node_modules/rxjs/dist/esm5/internal/Subscriber.js
  function bind(fn2, thisArg) {
    return _bind.call(fn2, thisArg);
  }
  function handleUnhandledError(error2) {
    if (config.useDeprecatedSynchronousErrorHandling) {
      captureError(error2);
    } else {
      reportUnhandledError(error2);
    }
  }
  function defaultErrorHandler(err2) {
    throw err2;
  }
  function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = config.onStoppedNotification;
    onStoppedNotification && timeoutProvider.setTimeout(function() {
      return onStoppedNotification(notification, subscriber);
    });
  }
  var Subscriber, _bind, ConsumerObserver, SafeSubscriber, EMPTY_OBSERVER;
  var init_Subscriber = __esm({
    "node_modules/rxjs/dist/esm5/internal/Subscriber.js"() {
      init_tslib_es6();
      init_isFunction();
      init_Subscription();
      init_config();
      init_reportUnhandledError();
      init_noop();
      init_NotificationFactories();
      init_timeoutProvider();
      init_errorContext();
      Subscriber = function(_super) {
        __extends(Subscriber2, _super);
        function Subscriber2(destination) {
          var _this = _super.call(this) || this;
          _this.isStopped = false;
          if (destination) {
            _this.destination = destination;
            if (isSubscription(destination)) {
              destination.add(_this);
            }
          } else {
            _this.destination = EMPTY_OBSERVER;
          }
          return _this;
        }
        Subscriber2.create = function(next, error2, complete) {
          return new SafeSubscriber(next, error2, complete);
        };
        Subscriber2.prototype.next = function(value) {
          if (this.isStopped) {
            handleStoppedNotification(nextNotification(value), this);
          } else {
            this._next(value);
          }
        };
        Subscriber2.prototype.error = function(err2) {
          if (this.isStopped) {
            handleStoppedNotification(errorNotification(err2), this);
          } else {
            this.isStopped = true;
            this._error(err2);
          }
        };
        Subscriber2.prototype.complete = function() {
          if (this.isStopped) {
            handleStoppedNotification(COMPLETE_NOTIFICATION, this);
          } else {
            this.isStopped = true;
            this._complete();
          }
        };
        Subscriber2.prototype.unsubscribe = function() {
          if (!this.closed) {
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
            this.destination = null;
          }
        };
        Subscriber2.prototype._next = function(value) {
          this.destination.next(value);
        };
        Subscriber2.prototype._error = function(err2) {
          try {
            this.destination.error(err2);
          } finally {
            this.unsubscribe();
          }
        };
        Subscriber2.prototype._complete = function() {
          try {
            this.destination.complete();
          } finally {
            this.unsubscribe();
          }
        };
        return Subscriber2;
      }(Subscription);
      _bind = Function.prototype.bind;
      ConsumerObserver = function() {
        function ConsumerObserver2(partialObserver) {
          this.partialObserver = partialObserver;
        }
        ConsumerObserver2.prototype.next = function(value) {
          var partialObserver = this.partialObserver;
          if (partialObserver.next) {
            try {
              partialObserver.next(value);
            } catch (error2) {
              handleUnhandledError(error2);
            }
          }
        };
        ConsumerObserver2.prototype.error = function(err2) {
          var partialObserver = this.partialObserver;
          if (partialObserver.error) {
            try {
              partialObserver.error(err2);
            } catch (error2) {
              handleUnhandledError(error2);
            }
          } else {
            handleUnhandledError(err2);
          }
        };
        ConsumerObserver2.prototype.complete = function() {
          var partialObserver = this.partialObserver;
          if (partialObserver.complete) {
            try {
              partialObserver.complete();
            } catch (error2) {
              handleUnhandledError(error2);
            }
          }
        };
        return ConsumerObserver2;
      }();
      SafeSubscriber = function(_super) {
        __extends(SafeSubscriber2, _super);
        function SafeSubscriber2(observerOrNext, error2, complete) {
          var _this = _super.call(this) || this;
          var partialObserver;
          if (isFunction(observerOrNext) || !observerOrNext) {
            partialObserver = {
              next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
              error: error2 !== null && error2 !== void 0 ? error2 : void 0,
              complete: complete !== null && complete !== void 0 ? complete : void 0
            };
          } else {
            var context_1;
            if (_this && config.useDeprecatedNextContext) {
              context_1 = Object.create(observerOrNext);
              context_1.unsubscribe = function() {
                return _this.unsubscribe();
              };
              partialObserver = {
                next: observerOrNext.next && bind(observerOrNext.next, context_1),
                error: observerOrNext.error && bind(observerOrNext.error, context_1),
                complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
              };
            } else {
              partialObserver = observerOrNext;
            }
          }
          _this.destination = new ConsumerObserver(partialObserver);
          return _this;
        }
        return SafeSubscriber2;
      }(Subscriber);
      EMPTY_OBSERVER = {
        closed: true,
        next: noop,
        error: defaultErrorHandler,
        complete: noop
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/symbol/observable.js
  var observable;
  var init_observable = __esm({
    "node_modules/rxjs/dist/esm5/internal/symbol/observable.js"() {
      observable = function() {
        return typeof Symbol === "function" && Symbol.observable || "@@observable";
      }();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/identity.js
  function identity(x) {
    return x;
  }
  var init_identity = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/identity.js"() {
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/pipe.js
  function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
  }
  function pipeFromArray(fns) {
    if (fns.length === 0) {
      return identity;
    }
    if (fns.length === 1) {
      return fns[0];
    }
    return function piped(input2) {
      return fns.reduce(function(prev, fn2) {
        return fn2(prev);
      }, input2);
    };
  }
  var init_pipe = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/pipe.js"() {
      init_identity();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/Observable.js
  function getPromiseCtor(promiseCtor) {
    var _a2;
    return (_a2 = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a2 !== void 0 ? _a2 : Promise;
  }
  function isObserver(value) {
    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
  }
  function isSubscriber(value) {
    return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
  }
  var Observable;
  var init_Observable = __esm({
    "node_modules/rxjs/dist/esm5/internal/Observable.js"() {
      init_Subscriber();
      init_Subscription();
      init_observable();
      init_pipe();
      init_config();
      init_isFunction();
      init_errorContext();
      Observable = function() {
        function Observable2(subscribe) {
          if (subscribe) {
            this._subscribe = subscribe;
          }
        }
        Observable2.prototype.lift = function(operator) {
          var observable2 = new Observable2();
          observable2.source = this;
          observable2.operator = operator;
          return observable2;
        };
        Observable2.prototype.subscribe = function(observerOrNext, error2, complete) {
          var _this = this;
          var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error2, complete);
          errorContext(function() {
            var _a2 = _this, operator = _a2.operator, source = _a2.source;
            subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
          });
          return subscriber;
        };
        Observable2.prototype._trySubscribe = function(sink) {
          try {
            return this._subscribe(sink);
          } catch (err2) {
            sink.error(err2);
          }
        };
        Observable2.prototype.forEach = function(next, promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function(resolve, reject) {
            var subscriber = new SafeSubscriber({
              next: function(value) {
                try {
                  next(value);
                } catch (err2) {
                  reject(err2);
                  subscriber.unsubscribe();
                }
              },
              error: reject,
              complete: resolve
            });
            _this.subscribe(subscriber);
          });
        };
        Observable2.prototype._subscribe = function(subscriber) {
          var _a2;
          return (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber);
        };
        Observable2.prototype[observable] = function() {
          return this;
        };
        Observable2.prototype.pipe = function() {
          var operations = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
          }
          return pipeFromArray(operations)(this);
        };
        Observable2.prototype.toPromise = function(promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function(resolve, reject) {
            var value;
            _this.subscribe(function(x) {
              return value = x;
            }, function(err2) {
              return reject(err2);
            }, function() {
              return resolve(value);
            });
          });
        };
        Observable2.create = function(subscribe) {
          return new Observable2(subscribe);
        };
        return Observable2;
      }();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/lift.js
  function hasLift(source) {
    return isFunction(source === null || source === void 0 ? void 0 : source.lift);
  }
  function operate(init) {
    return function(source) {
      if (hasLift(source)) {
        return source.lift(function(liftedSource) {
          try {
            return init(liftedSource, this);
          } catch (err2) {
            this.error(err2);
          }
        });
      }
      throw new TypeError("Unable to lift unknown Observable type");
    };
  }
  var init_lift = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/lift.js"() {
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
  function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
  }
  var OperatorSubscriber;
  var init_OperatorSubscriber = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"() {
      init_tslib_es6();
      init_Subscriber();
      OperatorSubscriber = function(_super) {
        __extends(OperatorSubscriber2, _super);
        function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
          var _this = _super.call(this, destination) || this;
          _this.onFinalize = onFinalize;
          _this.shouldUnsubscribe = shouldUnsubscribe;
          _this._next = onNext ? function(value) {
            try {
              onNext(value);
            } catch (err2) {
              destination.error(err2);
            }
          } : _super.prototype._next;
          _this._error = onError ? function(err2) {
            try {
              onError(err2);
            } catch (err3) {
              destination.error(err3);
            } finally {
              this.unsubscribe();
            }
          } : _super.prototype._error;
          _this._complete = onComplete ? function() {
            try {
              onComplete();
            } catch (err2) {
              destination.error(err2);
            } finally {
              this.unsubscribe();
            }
          } : _super.prototype._complete;
          return _this;
        }
        OperatorSubscriber2.prototype.unsubscribe = function() {
          var _a2;
          if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
            var closed_1 = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed_1 && ((_a2 = this.onFinalize) === null || _a2 === void 0 ? void 0 : _a2.call(this));
          }
        };
        return OperatorSubscriber2;
      }(Subscriber);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/refCount.js
  function refCount() {
    return operate(function(source, subscriber) {
      var connection = null;
      source._refCount++;
      var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
        if (!source || source._refCount <= 0 || 0 < --source._refCount) {
          connection = null;
          return;
        }
        var sharedConnection = source._connection;
        var conn = connection;
        connection = null;
        if (sharedConnection && (!conn || sharedConnection === conn)) {
          sharedConnection.unsubscribe();
        }
        subscriber.unsubscribe();
      });
      source.subscribe(refCounter);
      if (!refCounter.closed) {
        connection = source.connect();
      }
    });
  }
  var init_refCount = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/refCount.js"() {
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
  var ConnectableObservable;
  var init_ConnectableObservable = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js"() {
      init_tslib_es6();
      init_Observable();
      init_Subscription();
      init_refCount();
      init_OperatorSubscriber();
      init_lift();
      ConnectableObservable = function(_super) {
        __extends(ConnectableObservable2, _super);
        function ConnectableObservable2(source, subjectFactory) {
          var _this = _super.call(this) || this;
          _this.source = source;
          _this.subjectFactory = subjectFactory;
          _this._subject = null;
          _this._refCount = 0;
          _this._connection = null;
          if (hasLift(source)) {
            _this.lift = source.lift;
          }
          return _this;
        }
        ConnectableObservable2.prototype._subscribe = function(subscriber) {
          return this.getSubject().subscribe(subscriber);
        };
        ConnectableObservable2.prototype.getSubject = function() {
          var subject = this._subject;
          if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
          }
          return this._subject;
        };
        ConnectableObservable2.prototype._teardown = function() {
          this._refCount = 0;
          var _connection = this._connection;
          this._subject = this._connection = null;
          _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
        };
        ConnectableObservable2.prototype.connect = function() {
          var _this = this;
          var connection = this._connection;
          if (!connection) {
            connection = this._connection = new Subscription();
            var subject_1 = this.getSubject();
            connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
              _this._teardown();
              subject_1.complete();
            }, function(err2) {
              _this._teardown();
              subject_1.error(err2);
            }, function() {
              return _this._teardown();
            })));
            if (connection.closed) {
              this._connection = null;
              connection = Subscription.EMPTY;
            }
          }
          return connection;
        };
        ConnectableObservable2.prototype.refCount = function() {
          return refCount()(this);
        };
        return ConnectableObservable2;
      }(Observable);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
  var ObjectUnsubscribedError;
  var init_ObjectUnsubscribedError = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js"() {
      init_createErrorClass();
      ObjectUnsubscribedError = createErrorClass(function(_super) {
        return function ObjectUnsubscribedErrorImpl() {
          _super(this);
          this.name = "ObjectUnsubscribedError";
          this.message = "object unsubscribed";
        };
      });
    }
  });

  // node_modules/rxjs/dist/esm5/internal/Subject.js
  var Subject, AnonymousSubject;
  var init_Subject = __esm({
    "node_modules/rxjs/dist/esm5/internal/Subject.js"() {
      init_tslib_es6();
      init_Observable();
      init_Subscription();
      init_ObjectUnsubscribedError();
      init_arrRemove();
      init_errorContext();
      Subject = function(_super) {
        __extends(Subject2, _super);
        function Subject2() {
          var _this = _super.call(this) || this;
          _this.closed = false;
          _this.currentObservers = null;
          _this.observers = [];
          _this.isStopped = false;
          _this.hasError = false;
          _this.thrownError = null;
          return _this;
        }
        Subject2.prototype.lift = function(operator) {
          var subject = new AnonymousSubject(this, this);
          subject.operator = operator;
          return subject;
        };
        Subject2.prototype._throwIfClosed = function() {
          if (this.closed) {
            throw new ObjectUnsubscribedError();
          }
        };
        Subject2.prototype.next = function(value) {
          var _this = this;
          errorContext(function() {
            var e_1, _a2;
            _this._throwIfClosed();
            if (!_this.isStopped) {
              if (!_this.currentObservers) {
                _this.currentObservers = Array.from(_this.observers);
              }
              try {
                for (var _b2 = __values(_this.currentObservers), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
                  var observer = _c2.value;
                  observer.next(value);
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (_c2 && !_c2.done && (_a2 = _b2.return))
                    _a2.call(_b2);
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
            }
          });
        };
        Subject2.prototype.error = function(err2) {
          var _this = this;
          errorContext(function() {
            _this._throwIfClosed();
            if (!_this.isStopped) {
              _this.hasError = _this.isStopped = true;
              _this.thrownError = err2;
              var observers = _this.observers;
              while (observers.length) {
                observers.shift().error(err2);
              }
            }
          });
        };
        Subject2.prototype.complete = function() {
          var _this = this;
          errorContext(function() {
            _this._throwIfClosed();
            if (!_this.isStopped) {
              _this.isStopped = true;
              var observers = _this.observers;
              while (observers.length) {
                observers.shift().complete();
              }
            }
          });
        };
        Subject2.prototype.unsubscribe = function() {
          this.isStopped = this.closed = true;
          this.observers = this.currentObservers = null;
        };
        Object.defineProperty(Subject2.prototype, "observed", {
          get: function() {
            var _a2;
            return ((_a2 = this.observers) === null || _a2 === void 0 ? void 0 : _a2.length) > 0;
          },
          enumerable: false,
          configurable: true
        });
        Subject2.prototype._trySubscribe = function(subscriber) {
          this._throwIfClosed();
          return _super.prototype._trySubscribe.call(this, subscriber);
        };
        Subject2.prototype._subscribe = function(subscriber) {
          this._throwIfClosed();
          this._checkFinalizedStatuses(subscriber);
          return this._innerSubscribe(subscriber);
        };
        Subject2.prototype._innerSubscribe = function(subscriber) {
          var _this = this;
          var _a2 = this, hasError = _a2.hasError, isStopped = _a2.isStopped, observers = _a2.observers;
          if (hasError || isStopped) {
            return EMPTY_SUBSCRIPTION;
          }
          this.currentObservers = null;
          observers.push(subscriber);
          return new Subscription(function() {
            _this.currentObservers = null;
            arrRemove(observers, subscriber);
          });
        };
        Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
          var _a2 = this, hasError = _a2.hasError, thrownError = _a2.thrownError, isStopped = _a2.isStopped;
          if (hasError) {
            subscriber.error(thrownError);
          } else if (isStopped) {
            subscriber.complete();
          }
        };
        Subject2.prototype.asObservable = function() {
          var observable2 = new Observable();
          observable2.source = this;
          return observable2;
        };
        Subject2.create = function(destination, source) {
          return new AnonymousSubject(destination, source);
        };
        return Subject2;
      }(Observable);
      AnonymousSubject = function(_super) {
        __extends(AnonymousSubject2, _super);
        function AnonymousSubject2(destination, source) {
          var _this = _super.call(this) || this;
          _this.destination = destination;
          _this.source = source;
          return _this;
        }
        AnonymousSubject2.prototype.next = function(value) {
          var _a2, _b2;
          (_b2 = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.next) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, value);
        };
        AnonymousSubject2.prototype.error = function(err2) {
          var _a2, _b2;
          (_b2 = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.error) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, err2);
        };
        AnonymousSubject2.prototype.complete = function() {
          var _a2, _b2;
          (_b2 = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.complete) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
        };
        AnonymousSubject2.prototype._subscribe = function(subscriber) {
          var _a2, _b2;
          return (_b2 = (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber)) !== null && _b2 !== void 0 ? _b2 : EMPTY_SUBSCRIPTION;
        };
        return AnonymousSubject2;
      }(Subject);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js
  var BehaviorSubject;
  var init_BehaviorSubject = __esm({
    "node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js"() {
      init_tslib_es6();
      init_Subject();
      BehaviorSubject = function(_super) {
        __extends(BehaviorSubject2, _super);
        function BehaviorSubject2(_value) {
          var _this = _super.call(this) || this;
          _this._value = _value;
          return _this;
        }
        Object.defineProperty(BehaviorSubject2.prototype, "value", {
          get: function() {
            return this.getValue();
          },
          enumerable: false,
          configurable: true
        });
        BehaviorSubject2.prototype._subscribe = function(subscriber) {
          var subscription = _super.prototype._subscribe.call(this, subscriber);
          !subscription.closed && subscriber.next(this._value);
          return subscription;
        };
        BehaviorSubject2.prototype.getValue = function() {
          var _a2 = this, hasError = _a2.hasError, thrownError = _a2.thrownError, _value = _a2._value;
          if (hasError) {
            throw thrownError;
          }
          this._throwIfClosed();
          return _value;
        };
        BehaviorSubject2.prototype.next = function(value) {
          _super.prototype.next.call(this, this._value = value);
        };
        return BehaviorSubject2;
      }(Subject);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/empty.js
  var EMPTY;
  var init_empty = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/empty.js"() {
      init_Observable();
      EMPTY = new Observable(function(subscriber) {
        return subscriber.complete();
      });
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
  function isScheduler(value) {
    return value && isFunction(value.schedule);
  }
  var init_isScheduler = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isScheduler.js"() {
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/args.js
  function last(arr) {
    return arr[arr.length - 1];
  }
  function popResultSelector(args) {
    return isFunction(last(args)) ? args.pop() : void 0;
  }
  function popScheduler(args) {
    return isScheduler(last(args)) ? args.pop() : void 0;
  }
  var init_args = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/args.js"() {
      init_isFunction();
      init_isScheduler();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
  var isArrayLike;
  var init_isArrayLike = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js"() {
      isArrayLike = function(x) {
        return x && typeof x.length === "number" && typeof x !== "function";
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isPromise.js
  function isPromise(value) {
    return isFunction(value === null || value === void 0 ? void 0 : value.then);
  }
  var init_isPromise = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isPromise.js"() {
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
  function isInteropObservable(input2) {
    return isFunction(input2[observable]);
  }
  var init_isInteropObservable = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js"() {
      init_observable();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
  function isAsyncIterable(obj) {
    return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
  }
  var init_isAsyncIterable = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js"() {
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
  function createInvalidObservableTypeError(input2) {
    return new TypeError("You provided " + (input2 !== null && typeof input2 === "object" ? "an invalid object" : "'" + input2 + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
  }
  var init_throwUnobservableError = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js"() {
    }
  });

  // node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
  function getSymbolIterator() {
    if (typeof Symbol !== "function" || !Symbol.iterator) {
      return "@@iterator";
    }
    return Symbol.iterator;
  }
  var iterator;
  var init_iterator = __esm({
    "node_modules/rxjs/dist/esm5/internal/symbol/iterator.js"() {
      iterator = getSymbolIterator();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isIterable.js
  function isIterable(input2) {
    return isFunction(input2 === null || input2 === void 0 ? void 0 : input2[iterator]);
  }
  var init_isIterable = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isIterable.js"() {
      init_iterator();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
  function readableStreamLikeToAsyncGenerator(readableStream) {
    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
      var reader, _a2, value, done;
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            reader = readableStream.getReader();
            _b2.label = 1;
          case 1:
            _b2.trys.push([1, , 9, 10]);
            _b2.label = 2;
          case 2:
            if (false)
              return [3, 8];
            return [4, __await(reader.read())];
          case 3:
            _a2 = _b2.sent(), value = _a2.value, done = _a2.done;
            if (!done)
              return [3, 5];
            return [4, __await(void 0)];
          case 4:
            return [2, _b2.sent()];
          case 5:
            return [4, __await(value)];
          case 6:
            return [4, _b2.sent()];
          case 7:
            _b2.sent();
            return [3, 2];
          case 8:
            return [3, 10];
          case 9:
            reader.releaseLock();
            return [7];
          case 10:
            return [2];
        }
      });
    });
  }
  function isReadableStreamLike(obj) {
    return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
  }
  var init_isReadableStreamLike = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js"() {
      init_tslib_es6();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
  function innerFrom(input2) {
    if (input2 instanceof Observable) {
      return input2;
    }
    if (input2 != null) {
      if (isInteropObservable(input2)) {
        return fromInteropObservable(input2);
      }
      if (isArrayLike(input2)) {
        return fromArrayLike(input2);
      }
      if (isPromise(input2)) {
        return fromPromise(input2);
      }
      if (isAsyncIterable(input2)) {
        return fromAsyncIterable(input2);
      }
      if (isIterable(input2)) {
        return fromIterable(input2);
      }
      if (isReadableStreamLike(input2)) {
        return fromReadableStreamLike(input2);
      }
    }
    throw createInvalidObservableTypeError(input2);
  }
  function fromInteropObservable(obj) {
    return new Observable(function(subscriber) {
      var obs = obj[observable]();
      if (isFunction(obs.subscribe)) {
        return obs.subscribe(subscriber);
      }
      throw new TypeError("Provided object does not correctly implement Symbol.observable");
    });
  }
  function fromArrayLike(array) {
    return new Observable(function(subscriber) {
      for (var i = 0; i < array.length && !subscriber.closed; i++) {
        subscriber.next(array[i]);
      }
      subscriber.complete();
    });
  }
  function fromPromise(promise) {
    return new Observable(function(subscriber) {
      promise.then(function(value) {
        if (!subscriber.closed) {
          subscriber.next(value);
          subscriber.complete();
        }
      }, function(err2) {
        return subscriber.error(err2);
      }).then(null, reportUnhandledError);
    });
  }
  function fromIterable(iterable) {
    return new Observable(function(subscriber) {
      var e_1, _a2;
      try {
        for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
          var value = iterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (iterable_1_1 && !iterable_1_1.done && (_a2 = iterable_1.return))
            _a2.call(iterable_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      subscriber.complete();
    });
  }
  function fromAsyncIterable(asyncIterable) {
    return new Observable(function(subscriber) {
      process(asyncIterable, subscriber).catch(function(err2) {
        return subscriber.error(err2);
      });
    });
  }
  function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
  }
  function process(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a2;
    return __awaiter(this, void 0, void 0, function() {
      var value, e_2_1;
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            _b2.trys.push([0, 5, 6, 11]);
            asyncIterable_1 = __asyncValues(asyncIterable);
            _b2.label = 1;
          case 1:
            return [4, asyncIterable_1.next()];
          case 2:
            if (!(asyncIterable_1_1 = _b2.sent(), !asyncIterable_1_1.done))
              return [3, 4];
            value = asyncIterable_1_1.value;
            subscriber.next(value);
            if (subscriber.closed) {
              return [2];
            }
            _b2.label = 3;
          case 3:
            return [3, 1];
          case 4:
            return [3, 11];
          case 5:
            e_2_1 = _b2.sent();
            e_2 = { error: e_2_1 };
            return [3, 11];
          case 6:
            _b2.trys.push([6, , 9, 10]);
            if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a2 = asyncIterable_1.return)))
              return [3, 8];
            return [4, _a2.call(asyncIterable_1)];
          case 7:
            _b2.sent();
            _b2.label = 8;
          case 8:
            return [3, 10];
          case 9:
            if (e_2)
              throw e_2.error;
            return [7];
          case 10:
            return [7];
          case 11:
            subscriber.complete();
            return [2];
        }
      });
    });
  }
  var init_innerFrom = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js"() {
      init_tslib_es6();
      init_isArrayLike();
      init_isPromise();
      init_Observable();
      init_isInteropObservable();
      init_isAsyncIterable();
      init_throwUnobservableError();
      init_isIterable();
      init_isReadableStreamLike();
      init_isFunction();
      init_reportUnhandledError();
      init_observable();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
  function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
    if (delay === void 0) {
      delay = 0;
    }
    if (repeat === void 0) {
      repeat = false;
    }
    var scheduleSubscription = scheduler.schedule(function() {
      work();
      if (repeat) {
        parentSubscription.add(this.schedule(null, delay));
      } else {
        this.unsubscribe();
      }
    }, delay);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) {
      return scheduleSubscription;
    }
  }
  var init_executeSchedule = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js"() {
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
  function observeOn(scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return operate(function(source, subscriber) {
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        return executeSchedule(subscriber, scheduler, function() {
          return subscriber.next(value);
        }, delay);
      }, function() {
        return executeSchedule(subscriber, scheduler, function() {
          return subscriber.complete();
        }, delay);
      }, function(err2) {
        return executeSchedule(subscriber, scheduler, function() {
          return subscriber.error(err2);
        }, delay);
      }));
    });
  }
  var init_observeOn = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/observeOn.js"() {
      init_executeSchedule();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
  function subscribeOn(scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return operate(function(source, subscriber) {
      subscriber.add(scheduler.schedule(function() {
        return source.subscribe(subscriber);
      }, delay));
    });
  }
  var init_subscribeOn = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js"() {
      init_lift();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
  function scheduleObservable(input2, scheduler) {
    return innerFrom(input2).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }
  var init_scheduleObservable = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js"() {
      init_innerFrom();
      init_observeOn();
      init_subscribeOn();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
  function schedulePromise(input2, scheduler) {
    return innerFrom(input2).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }
  var init_schedulePromise = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js"() {
      init_innerFrom();
      init_observeOn();
      init_subscribeOn();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
  function scheduleArray(input2, scheduler) {
    return new Observable(function(subscriber) {
      var i = 0;
      return scheduler.schedule(function() {
        if (i === input2.length) {
          subscriber.complete();
        } else {
          subscriber.next(input2[i++]);
          if (!subscriber.closed) {
            this.schedule();
          }
        }
      });
    });
  }
  var init_scheduleArray = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js"() {
      init_Observable();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
  function scheduleIterable(input2, scheduler) {
    return new Observable(function(subscriber) {
      var iterator2;
      executeSchedule(subscriber, scheduler, function() {
        iterator2 = input2[iterator]();
        executeSchedule(subscriber, scheduler, function() {
          var _a2;
          var value;
          var done;
          try {
            _a2 = iterator2.next(), value = _a2.value, done = _a2.done;
          } catch (err2) {
            subscriber.error(err2);
            return;
          }
          if (done) {
            subscriber.complete();
          } else {
            subscriber.next(value);
          }
        }, 0, true);
      });
      return function() {
        return isFunction(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
      };
    });
  }
  var init_scheduleIterable = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js"() {
      init_Observable();
      init_iterator();
      init_isFunction();
      init_executeSchedule();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
  function scheduleAsyncIterable(input2, scheduler) {
    if (!input2) {
      throw new Error("Iterable cannot be null");
    }
    return new Observable(function(subscriber) {
      executeSchedule(subscriber, scheduler, function() {
        var iterator2 = input2[Symbol.asyncIterator]();
        executeSchedule(subscriber, scheduler, function() {
          iterator2.next().then(function(result) {
            if (result.done) {
              subscriber.complete();
            } else {
              subscriber.next(result.value);
            }
          });
        }, 0, true);
      });
    });
  }
  var init_scheduleAsyncIterable = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js"() {
      init_Observable();
      init_executeSchedule();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
  function scheduleReadableStreamLike(input2, scheduler) {
    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input2), scheduler);
  }
  var init_scheduleReadableStreamLike = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js"() {
      init_scheduleAsyncIterable();
      init_isReadableStreamLike();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
  function scheduled(input2, scheduler) {
    if (input2 != null) {
      if (isInteropObservable(input2)) {
        return scheduleObservable(input2, scheduler);
      }
      if (isArrayLike(input2)) {
        return scheduleArray(input2, scheduler);
      }
      if (isPromise(input2)) {
        return schedulePromise(input2, scheduler);
      }
      if (isAsyncIterable(input2)) {
        return scheduleAsyncIterable(input2, scheduler);
      }
      if (isIterable(input2)) {
        return scheduleIterable(input2, scheduler);
      }
      if (isReadableStreamLike(input2)) {
        return scheduleReadableStreamLike(input2, scheduler);
      }
    }
    throw createInvalidObservableTypeError(input2);
  }
  var init_scheduled = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js"() {
      init_scheduleObservable();
      init_schedulePromise();
      init_scheduleArray();
      init_scheduleIterable();
      init_scheduleAsyncIterable();
      init_isInteropObservable();
      init_isPromise();
      init_isArrayLike();
      init_isIterable();
      init_isAsyncIterable();
      init_throwUnobservableError();
      init_isReadableStreamLike();
      init_scheduleReadableStreamLike();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/from.js
  function from(input2, scheduler) {
    return scheduler ? scheduled(input2, scheduler) : innerFrom(input2);
  }
  var init_from = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/from.js"() {
      init_scheduled();
      init_innerFrom();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/of.js
  function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    return from(args, scheduler);
  }
  var init_of = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/of.js"() {
      init_args();
      init_from();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/throwError.js
  function throwError(errorOrErrorFactory, scheduler) {
    var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function() {
      return errorOrErrorFactory;
    };
    var init = function(subscriber) {
      return subscriber.error(errorFactory());
    };
    return new Observable(scheduler ? function(subscriber) {
      return scheduler.schedule(init, 0, subscriber);
    } : init);
  }
  var init_throwError = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/throwError.js"() {
      init_Observable();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isObservable.js
  function isObservable(obj) {
    return !!obj && (obj instanceof Observable || isFunction(obj.lift) && isFunction(obj.subscribe));
  }
  var init_isObservable = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isObservable.js"() {
      init_Observable();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
  var EmptyError;
  var init_EmptyError = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/EmptyError.js"() {
      init_createErrorClass();
      EmptyError = createErrorClass(function(_super) {
        return function EmptyErrorImpl() {
          _super(this);
          this.name = "EmptyError";
          this.message = "no elements in sequence";
        };
      });
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/map.js
  function map(project, thisArg) {
    return operate(function(source, subscriber) {
      var index = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        subscriber.next(project.call(thisArg, value, index++));
      }));
    });
  }
  var init_map = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/map.js"() {
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
  function callOrApply(fn2, args) {
    return isArray(args) ? fn2.apply(void 0, __spreadArray([], __read(args))) : fn2(args);
  }
  function mapOneOrManyArgs(fn2) {
    return map(function(args) {
      return callOrApply(fn2, args);
    });
  }
  var isArray;
  var init_mapOneOrManyArgs = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js"() {
      init_tslib_es6();
      init_map();
      isArray = Array.isArray;
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
  function argsArgArrayOrObject(args) {
    if (args.length === 1) {
      var first_1 = args[0];
      if (isArray2(first_1)) {
        return { args: first_1, keys: null };
      }
      if (isPOJO(first_1)) {
        var keys = getKeys(first_1);
        return {
          args: keys.map(function(key) {
            return first_1[key];
          }),
          keys
        };
      }
    }
    return { args, keys: null };
  }
  function isPOJO(obj) {
    return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
  }
  var isArray2, getPrototypeOf, objectProto, getKeys;
  var init_argsArgArrayOrObject = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js"() {
      isArray2 = Array.isArray;
      getPrototypeOf = Object.getPrototypeOf;
      objectProto = Object.prototype;
      getKeys = Object.keys;
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/createObject.js
  function createObject(keys, values) {
    return keys.reduce(function(result, key, i) {
      return result[key] = values[i], result;
    }, {});
  }
  var init_createObject = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/createObject.js"() {
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js
  function combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    var resultSelector = popResultSelector(args);
    var _a2 = argsArgArrayOrObject(args), observables = _a2.args, keys = _a2.keys;
    if (observables.length === 0) {
      return from([], scheduler);
    }
    var result = new Observable(combineLatestInit(observables, scheduler, keys ? function(values) {
      return createObject(keys, values);
    } : identity));
    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
  }
  function combineLatestInit(observables, scheduler, valueTransform) {
    if (valueTransform === void 0) {
      valueTransform = identity;
    }
    return function(subscriber) {
      maybeSchedule(scheduler, function() {
        var length = observables.length;
        var values = new Array(length);
        var active = length;
        var remainingFirstValues = length;
        var _loop_1 = function(i2) {
          maybeSchedule(scheduler, function() {
            var source = from(observables[i2], scheduler);
            var hasFirstValue = false;
            source.subscribe(createOperatorSubscriber(subscriber, function(value) {
              values[i2] = value;
              if (!hasFirstValue) {
                hasFirstValue = true;
                remainingFirstValues--;
              }
              if (!remainingFirstValues) {
                subscriber.next(valueTransform(values.slice()));
              }
            }, function() {
              if (!--active) {
                subscriber.complete();
              }
            }));
          }, subscriber);
        };
        for (var i = 0; i < length; i++) {
          _loop_1(i);
        }
      }, subscriber);
    };
  }
  function maybeSchedule(scheduler, execute, subscription) {
    if (scheduler) {
      executeSchedule(subscription, scheduler, execute);
    } else {
      execute();
    }
  }
  var init_combineLatest = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js"() {
      init_Observable();
      init_argsArgArrayOrObject();
      init_from();
      init_identity();
      init_mapOneOrManyArgs();
      init_args();
      init_createObject();
      init_OperatorSubscriber();
      init_executeSchedule();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js
  function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
    var buffer = [];
    var active = 0;
    var index = 0;
    var isComplete = false;
    var checkComplete = function() {
      if (isComplete && !buffer.length && !active) {
        subscriber.complete();
      }
    };
    var outerNext = function(value) {
      return active < concurrent ? doInnerSub(value) : buffer.push(value);
    };
    var doInnerSub = function(value) {
      expand && subscriber.next(value);
      active++;
      var innerComplete = false;
      innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function(innerValue) {
        onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
        if (expand) {
          outerNext(innerValue);
        } else {
          subscriber.next(innerValue);
        }
      }, function() {
        innerComplete = true;
      }, void 0, function() {
        if (innerComplete) {
          try {
            active--;
            var _loop_1 = function() {
              var bufferedValue = buffer.shift();
              if (innerSubScheduler) {
                executeSchedule(subscriber, innerSubScheduler, function() {
                  return doInnerSub(bufferedValue);
                });
              } else {
                doInnerSub(bufferedValue);
              }
            };
            while (buffer.length && active < concurrent) {
              _loop_1();
            }
            checkComplete();
          } catch (err2) {
            subscriber.error(err2);
          }
        }
      }));
    };
    source.subscribe(createOperatorSubscriber(subscriber, outerNext, function() {
      isComplete = true;
      checkComplete();
    }));
    return function() {
      additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
    };
  }
  var init_mergeInternals = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js"() {
      init_innerFrom();
      init_executeSchedule();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
  function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
      concurrent = Infinity;
    }
    if (isFunction(resultSelector)) {
      return mergeMap(function(a, i) {
        return map(function(b, ii) {
          return resultSelector(a, b, i, ii);
        })(innerFrom(project(a, i)));
      }, concurrent);
    } else if (typeof resultSelector === "number") {
      concurrent = resultSelector;
    }
    return operate(function(source, subscriber) {
      return mergeInternals(source, subscriber, project, concurrent);
    });
  }
  var init_mergeMap = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js"() {
      init_map();
      init_innerFrom();
      init_lift();
      init_mergeInternals();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
  function mergeAll(concurrent) {
    if (concurrent === void 0) {
      concurrent = Infinity;
    }
    return mergeMap(identity, concurrent);
  }
  var init_mergeAll = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js"() {
      init_mergeMap();
      init_identity();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/concatAll.js
  function concatAll() {
    return mergeAll(1);
  }
  var init_concatAll = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/concatAll.js"() {
      init_mergeAll();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/concat.js
  function concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return concatAll()(from(args, popScheduler(args)));
  }
  var init_concat = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/concat.js"() {
      init_concatAll();
      init_args();
      init_from();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/defer.js
  function defer(observableFactory) {
    return new Observable(function(subscriber) {
      innerFrom(observableFactory()).subscribe(subscriber);
    });
  }
  var init_defer = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/defer.js"() {
      init_Observable();
      init_innerFrom();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js
  function forkJoin() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var resultSelector = popResultSelector(args);
    var _a2 = argsArgArrayOrObject(args), sources = _a2.args, keys = _a2.keys;
    var result = new Observable(function(subscriber) {
      var length = sources.length;
      if (!length) {
        subscriber.complete();
        return;
      }
      var values = new Array(length);
      var remainingCompletions = length;
      var remainingEmissions = length;
      var _loop_1 = function(sourceIndex2) {
        var hasValue = false;
        innerFrom(sources[sourceIndex2]).subscribe(createOperatorSubscriber(subscriber, function(value) {
          if (!hasValue) {
            hasValue = true;
            remainingEmissions--;
          }
          values[sourceIndex2] = value;
        }, function() {
          return remainingCompletions--;
        }, void 0, function() {
          if (!remainingCompletions || !hasValue) {
            if (!remainingEmissions) {
              subscriber.next(keys ? createObject(keys, values) : values);
            }
            subscriber.complete();
          }
        }));
      };
      for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {
        _loop_1(sourceIndex);
      }
    });
    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
  }
  var init_forkJoin = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js"() {
      init_Observable();
      init_argsArgArrayOrObject();
      init_innerFrom();
      init_args();
      init_OperatorSubscriber();
      init_mapOneOrManyArgs();
      init_createObject();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js
  function fromEvent(target, eventName, options, resultSelector) {
    if (isFunction(options)) {
      resultSelector = options;
      options = void 0;
    }
    if (resultSelector) {
      return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));
    }
    var _a2 = __read(isEventTarget(target) ? eventTargetMethods.map(function(methodName) {
      return function(handler) {
        return target[methodName](eventName, handler, options);
      };
    }) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [], 2), add = _a2[0], remove2 = _a2[1];
    if (!add) {
      if (isArrayLike(target)) {
        return mergeMap(function(subTarget) {
          return fromEvent(subTarget, eventName, options);
        })(innerFrom(target));
      }
    }
    if (!add) {
      throw new TypeError("Invalid event target");
    }
    return new Observable(function(subscriber) {
      var handler = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return subscriber.next(1 < args.length ? args : args[0]);
      };
      add(handler);
      return function() {
        return remove2(handler);
      };
    });
  }
  function toCommonHandlerRegistry(target, eventName) {
    return function(methodName) {
      return function(handler) {
        return target[methodName](eventName, handler);
      };
    };
  }
  function isNodeStyleEventEmitter(target) {
    return isFunction(target.addListener) && isFunction(target.removeListener);
  }
  function isJQueryStyleEventEmitter(target) {
    return isFunction(target.on) && isFunction(target.off);
  }
  function isEventTarget(target) {
    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);
  }
  var nodeEventEmitterMethods, eventTargetMethods, jqueryMethods;
  var init_fromEvent = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js"() {
      init_tslib_es6();
      init_innerFrom();
      init_Observable();
      init_mergeMap();
      init_isArrayLike();
      init_isFunction();
      init_mapOneOrManyArgs();
      nodeEventEmitterMethods = ["addListener", "removeListener"];
      eventTargetMethods = ["addEventListener", "removeEventListener"];
      jqueryMethods = ["on", "off"];
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/filter.js
  function filter(predicate, thisArg) {
    return operate(function(source, subscriber) {
      var index = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        return predicate.call(thisArg, value, index++) && subscriber.next(value);
      }));
    });
  }
  var init_filter = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/filter.js"() {
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/types.js
  var init_types = __esm({
    "node_modules/rxjs/dist/esm5/internal/types.js"() {
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/catchError.js
  function catchError(selector) {
    return operate(function(source, subscriber) {
      var innerSub = null;
      var syncUnsub = false;
      var handledResult;
      innerSub = source.subscribe(createOperatorSubscriber(subscriber, void 0, void 0, function(err2) {
        handledResult = innerFrom(selector(err2, catchError(selector)(source)));
        if (innerSub) {
          innerSub.unsubscribe();
          innerSub = null;
          handledResult.subscribe(subscriber);
        } else {
          syncUnsub = true;
        }
      }));
      if (syncUnsub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      }
    });
  }
  var init_catchError = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/catchError.js"() {
      init_innerFrom();
      init_OperatorSubscriber();
      init_lift();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js
  function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
    return function(source, subscriber) {
      var hasState = hasSeed;
      var state = seed;
      var index = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        var i = index++;
        state = hasState ? accumulator(state, value, i) : (hasState = true, value);
        emitOnNext && subscriber.next(state);
      }, emitBeforeComplete && function() {
        hasState && subscriber.next(state);
        subscriber.complete();
      }));
    };
  }
  var init_scanInternals = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js"() {
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/concatMap.js
  function concatMap(project, resultSelector) {
    return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);
  }
  var init_concatMap = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/concatMap.js"() {
      init_mergeMap();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js
  function defaultIfEmpty(defaultValue) {
    return operate(function(source, subscriber) {
      var hasValue = false;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        hasValue = true;
        subscriber.next(value);
      }, function() {
        if (!hasValue) {
          subscriber.next(defaultValue);
        }
        subscriber.complete();
      }));
    });
  }
  var init_defaultIfEmpty = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js"() {
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/take.js
  function take(count) {
    return count <= 0 ? function() {
      return EMPTY;
    } : operate(function(source, subscriber) {
      var seen = 0;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        if (++seen <= count) {
          subscriber.next(value);
          if (count <= seen) {
            subscriber.complete();
          }
        }
      }));
    });
  }
  var init_take = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/take.js"() {
      init_empty();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/mapTo.js
  function mapTo(value) {
    return map(function() {
      return value;
    });
  }
  var init_mapTo = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/mapTo.js"() {
      init_map();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js
  function distinctUntilChanged(comparator, keySelector) {
    if (keySelector === void 0) {
      keySelector = identity;
    }
    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
    return operate(function(source, subscriber) {
      var previousKey;
      var first2 = true;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        var currentKey = keySelector(value);
        if (first2 || !comparator(previousKey, currentKey)) {
          first2 = false;
          previousKey = currentKey;
          subscriber.next(value);
        }
      }));
    });
  }
  function defaultCompare(a, b) {
    return a === b;
  }
  var init_distinctUntilChanged = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js"() {
      init_identity();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js
  function throwIfEmpty(errorFactory) {
    if (errorFactory === void 0) {
      errorFactory = defaultErrorFactory;
    }
    return operate(function(source, subscriber) {
      var hasValue = false;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        hasValue = true;
        subscriber.next(value);
      }, function() {
        return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
      }));
    });
  }
  function defaultErrorFactory() {
    return new EmptyError();
  }
  var init_throwIfEmpty = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js"() {
      init_EmptyError();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/finalize.js
  function finalize(callback) {
    return operate(function(source, subscriber) {
      try {
        source.subscribe(subscriber);
      } finally {
        subscriber.add(callback);
      }
    });
  }
  var init_finalize = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/finalize.js"() {
      init_lift();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/first.js
  function first(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function(source) {
      return source.pipe(predicate ? filter(function(v, i) {
        return predicate(v, i, source);
      }) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function() {
        return new EmptyError();
      }));
    };
  }
  var init_first = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/first.js"() {
      init_EmptyError();
      init_filter();
      init_take();
      init_defaultIfEmpty();
      init_throwIfEmpty();
      init_identity();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/takeLast.js
  function takeLast(count) {
    return count <= 0 ? function() {
      return EMPTY;
    } : operate(function(source, subscriber) {
      var buffer = [];
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        buffer.push(value);
        count < buffer.length && buffer.shift();
      }, function() {
        var e_1, _a2;
        try {
          for (var buffer_1 = __values(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {
            var value = buffer_1_1.value;
            subscriber.next(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (buffer_1_1 && !buffer_1_1.done && (_a2 = buffer_1.return))
              _a2.call(buffer_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        subscriber.complete();
      }, void 0, function() {
        buffer = null;
      }));
    });
  }
  var init_takeLast = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/takeLast.js"() {
      init_tslib_es6();
      init_empty();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/last.js
  function last2(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function(source) {
      return source.pipe(predicate ? filter(function(v, i) {
        return predicate(v, i, source);
      }) : identity, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function() {
        return new EmptyError();
      }));
    };
  }
  var init_last = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/last.js"() {
      init_EmptyError();
      init_filter();
      init_takeLast();
      init_throwIfEmpty();
      init_defaultIfEmpty();
      init_identity();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/scan.js
  function scan(accumulator, seed) {
    return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));
  }
  var init_scan = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/scan.js"() {
      init_lift();
      init_scanInternals();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/startWith.js
  function startWith() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }
    var scheduler = popScheduler(values);
    return operate(function(source, subscriber) {
      (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
    });
  }
  var init_startWith = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/startWith.js"() {
      init_concat();
      init_args();
      init_lift();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/switchMap.js
  function switchMap(project, resultSelector) {
    return operate(function(source, subscriber) {
      var innerSubscriber = null;
      var index = 0;
      var isComplete = false;
      var checkComplete = function() {
        return isComplete && !innerSubscriber && subscriber.complete();
      };
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
        var innerIndex = 0;
        var outerIndex = index++;
        innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, function(innerValue) {
          return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
        }, function() {
          innerSubscriber = null;
          checkComplete();
        }));
      }, function() {
        isComplete = true;
        checkComplete();
      }));
    });
  }
  var init_switchMap = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/switchMap.js"() {
      init_innerFrom();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js
  function takeUntil(notifier) {
    return operate(function(source, subscriber) {
      innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, function() {
        return subscriber.complete();
      }, noop));
      !subscriber.closed && source.subscribe(subscriber);
    });
  }
  var init_takeUntil = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js"() {
      init_lift();
      init_OperatorSubscriber();
      init_innerFrom();
      init_noop();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/tap.js
  function tap(observerOrNext, error2, complete) {
    var tapObserver = isFunction(observerOrNext) || error2 || complete ? { next: observerOrNext, error: error2, complete } : observerOrNext;
    return tapObserver ? operate(function(source, subscriber) {
      var _a2;
      (_a2 = tapObserver.subscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      var isUnsub = true;
      source.subscribe(createOperatorSubscriber(subscriber, function(value) {
        var _a3;
        (_a3 = tapObserver.next) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver, value);
        subscriber.next(value);
      }, function() {
        var _a3;
        isUnsub = false;
        (_a3 = tapObserver.complete) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver);
        subscriber.complete();
      }, function(err2) {
        var _a3;
        isUnsub = false;
        (_a3 = tapObserver.error) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver, err2);
        subscriber.error(err2);
      }, function() {
        var _a3, _b2;
        if (isUnsub) {
          (_a3 = tapObserver.unsubscribe) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver);
        }
        (_b2 = tapObserver.finalize) === null || _b2 === void 0 ? void 0 : _b2.call(tapObserver);
      }));
    }) : identity;
  }
  var init_tap = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/tap.js"() {
      init_isFunction();
      init_lift();
      init_OperatorSubscriber();
      init_identity();
    }
  });

  // node_modules/rxjs/dist/esm5/index.js
  var init_esm5 = __esm({
    "node_modules/rxjs/dist/esm5/index.js"() {
      init_ConnectableObservable();
      init_Subject();
      init_BehaviorSubject();
      init_Subscription();
      init_pipe();
      init_isObservable();
      init_EmptyError();
      init_combineLatest();
      init_concat();
      init_defer();
      init_forkJoin();
      init_from();
      init_fromEvent();
      init_of();
      init_throwError();
      init_empty();
      init_types();
    }
  });

  // node_modules/rxjs/dist/esm5/operators/index.js
  var init_operators = __esm({
    "node_modules/rxjs/dist/esm5/operators/index.js"() {
      init_catchError();
      init_concatMap();
      init_defaultIfEmpty();
      init_distinctUntilChanged();
      init_filter();
      init_finalize();
      init_first();
      init_last();
      init_map();
      init_mapTo();
      init_mergeAll();
      init_mergeMap();
      init_refCount();
      init_scan();
      init_startWith();
      init_switchMap();
      init_take();
      init_takeLast();
      init_takeUntil();
      init_tap();
    }
  });

  // node_modules/@angular/core/fesm2022/core.mjs
  var core_exports = {};
  __export(core_exports, {
    ANIMATION_MODULE_TYPE: () => ANIMATION_MODULE_TYPE,
    APP_BOOTSTRAP_LISTENER: () => APP_BOOTSTRAP_LISTENER,
    APP_ID: () => APP_ID,
    APP_INITIALIZER: () => APP_INITIALIZER,
    AfterRenderPhase: () => AfterRenderPhase,
    ApplicationInitStatus: () => ApplicationInitStatus,
    ApplicationModule: () => ApplicationModule,
    ApplicationRef: () => ApplicationRef,
    Attribute: () => Attribute,
    COMPILER_OPTIONS: () => COMPILER_OPTIONS,
    CSP_NONCE: () => CSP_NONCE,
    CUSTOM_ELEMENTS_SCHEMA: () => CUSTOM_ELEMENTS_SCHEMA,
    ChangeDetectionStrategy: () => ChangeDetectionStrategy,
    ChangeDetectorRef: () => ChangeDetectorRef,
    Compiler: () => Compiler,
    CompilerFactory: () => CompilerFactory,
    Component: () => Component,
    ComponentFactory: () => ComponentFactory$1,
    ComponentFactoryResolver: () => ComponentFactoryResolver$1,
    ComponentRef: () => ComponentRef$1,
    ContentChild: () => ContentChild,
    ContentChildren: () => ContentChildren,
    DEFAULT_CURRENCY_CODE: () => DEFAULT_CURRENCY_CODE,
    DebugElement: () => DebugElement,
    DebugEventListener: () => DebugEventListener,
    DebugNode: () => DebugNode,
    DefaultIterableDiffer: () => DefaultIterableDiffer,
    DestroyRef: () => DestroyRef,
    Directive: () => Directive,
    ENVIRONMENT_INITIALIZER: () => ENVIRONMENT_INITIALIZER,
    ElementRef: () => ElementRef,
    EmbeddedViewRef: () => EmbeddedViewRef,
    EnvironmentInjector: () => EnvironmentInjector,
    ErrorHandler: () => ErrorHandler,
    EventEmitter: () => EventEmitter,
    Host: () => Host,
    HostAttributeToken: () => HostAttributeToken,
    HostBinding: () => HostBinding,
    HostListener: () => HostListener,
    INJECTOR: () => INJECTOR$1,
    Inject: () => Inject,
    InjectFlags: () => InjectFlags,
    Injectable: () => Injectable,
    InjectionToken: () => InjectionToken,
    Injector: () => Injector,
    Input: () => Input,
    IterableDiffers: () => IterableDiffers,
    KeyValueDiffers: () => KeyValueDiffers,
    LOCALE_ID: () => LOCALE_ID,
    MissingTranslationStrategy: () => MissingTranslationStrategy,
    ModuleWithComponentFactories: () => ModuleWithComponentFactories,
    NO_ERRORS_SCHEMA: () => NO_ERRORS_SCHEMA,
    NgModule: () => NgModule,
    NgModuleFactory: () => NgModuleFactory$1,
    NgModuleRef: () => NgModuleRef$1,
    NgProbeToken: () => NgProbeToken,
    NgZone: () => NgZone,
    Optional: () => Optional,
    Output: () => Output,
    OutputEmitterRef: () => OutputEmitterRef,
    PACKAGE_ROOT_URL: () => PACKAGE_ROOT_URL,
    PLATFORM_ID: () => PLATFORM_ID,
    PLATFORM_INITIALIZER: () => PLATFORM_INITIALIZER,
    Pipe: () => Pipe,
    PlatformRef: () => PlatformRef,
    Query: () => Query,
    QueryList: () => QueryList,
    Renderer2: () => Renderer2,
    RendererFactory2: () => RendererFactory2,
    RendererStyleFlags2: () => RendererStyleFlags2,
    Sanitizer: () => Sanitizer,
    SecurityContext: () => SecurityContext,
    Self: () => Self,
    SimpleChange: () => SimpleChange,
    SkipSelf: () => SkipSelf,
    TRANSLATIONS: () => TRANSLATIONS,
    TRANSLATIONS_FORMAT: () => TRANSLATIONS_FORMAT,
    TemplateRef: () => TemplateRef,
    Testability: () => Testability,
    TestabilityRegistry: () => TestabilityRegistry,
    TransferState: () => TransferState,
    Type: () => Type,
    VERSION: () => VERSION,
    Version: () => Version,
    ViewChild: () => ViewChild,
    ViewChildren: () => ViewChildren,
    ViewContainerRef: () => ViewContainerRef,
    ViewEncapsulation: () => ViewEncapsulation$1,
    ViewRef: () => ViewRef,
    afterNextRender: () => afterNextRender,
    afterRender: () => afterRender,
    asNativeElements: () => asNativeElements,
    assertInInjectionContext: () => assertInInjectionContext,
    assertNotInReactiveContext: () => assertNotInReactiveContext,
    assertPlatform: () => assertPlatform,
    booleanAttribute: () => booleanAttribute,
    computed: () => computed,
    contentChild: () => contentChild,
    contentChildren: () => contentChildren,
    createComponent: () => createComponent,
    createEnvironmentInjector: () => createEnvironmentInjector,
    createNgModule: () => createNgModule,
    createNgModuleRef: () => createNgModuleRef,
    createPlatform: () => createPlatform,
    createPlatformFactory: () => createPlatformFactory,
    defineInjectable: () => defineInjectable,
    destroyPlatform: () => destroyPlatform,
    effect: () => effect,
    enableProdMode: () => enableProdMode,
    forwardRef: () => forwardRef,
    getDebugNode: () => getDebugNode,
    getModuleFactory: () => getModuleFactory,
    getNgModuleById: () => getNgModuleById,
    getPlatform: () => getPlatform,
    importProvidersFrom: () => importProvidersFrom,
    inject: () => inject,
    input: () => input,
    isDevMode: () => isDevMode,
    isSignal: () => isSignal,
    isStandalone: () => isStandalone,
    makeEnvironmentProviders: () => makeEnvironmentProviders,
    makeStateKey: () => makeStateKey,
    mergeApplicationConfig: () => mergeApplicationConfig,
    model: () => model,
    numberAttribute: () => numberAttribute,
    output: () => output,
    platformCore: () => platformCore,
    provideZoneChangeDetection: () => provideZoneChangeDetection,
    reflectComponentType: () => reflectComponentType,
    resolveForwardRef: () => resolveForwardRef,
    runInInjectionContext: () => runInInjectionContext,
    setTestabilityGetter: () => setTestabilityGetter,
    signal: () => signal,
    untracked: () => untracked,
    viewChild: () => viewChild,
    viewChildren: () => viewChildren,
    \u0275ALLOW_MULTIPLE_PLATFORMS: () => ALLOW_MULTIPLE_PLATFORMS,
    \u0275AfterRenderEventManager: () => AfterRenderEventManager,
    \u0275CONTAINER_HEADER_OFFSET: () => CONTAINER_HEADER_OFFSET,
    \u0275ChangeDetectionScheduler: () => ChangeDetectionScheduler,
    \u0275ComponentFactory: () => ComponentFactory$1,
    \u0275Console: () => Console,
    \u0275DEFAULT_LOCALE_ID: () => DEFAULT_LOCALE_ID,
    \u0275DEFER_BLOCK_CONFIG: () => DEFER_BLOCK_CONFIG,
    \u0275DEFER_BLOCK_DEPENDENCY_INTERCEPTOR: () => DEFER_BLOCK_DEPENDENCY_INTERCEPTOR,
    \u0275DeferBlockBehavior: () => DeferBlockBehavior,
    \u0275DeferBlockState: () => DeferBlockState,
    \u0275EffectScheduler: () => EffectScheduler,
    \u0275IMAGE_CONFIG: () => IMAGE_CONFIG,
    \u0275IMAGE_CONFIG_DEFAULTS: () => IMAGE_CONFIG_DEFAULTS,
    \u0275INJECTOR_SCOPE: () => INJECTOR_SCOPE,
    \u0275INPUT_SIGNAL_BRAND_WRITE_TYPE: () => \u0275INPUT_SIGNAL_BRAND_WRITE_TYPE,
    \u0275IS_HYDRATION_DOM_REUSE_ENABLED: () => IS_HYDRATION_DOM_REUSE_ENABLED,
    \u0275LContext: () => LContext,
    \u0275LifecycleHooksFeature: () => LifecycleHooksFeature,
    \u0275LocaleDataIndex: () => LocaleDataIndex,
    \u0275NG_COMP_DEF: () => NG_COMP_DEF,
    \u0275NG_DIR_DEF: () => NG_DIR_DEF,
    \u0275NG_ELEMENT_ID: () => NG_ELEMENT_ID,
    \u0275NG_INJ_DEF: () => NG_INJ_DEF,
    \u0275NG_MOD_DEF: () => NG_MOD_DEF,
    \u0275NG_PIPE_DEF: () => NG_PIPE_DEF,
    \u0275NG_PROV_DEF: () => NG_PROV_DEF,
    \u0275NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR: () => NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR,
    \u0275NO_CHANGE: () => NO_CHANGE,
    \u0275NgModuleFactory: () => NgModuleFactory,
    \u0275NoopNgZone: () => NoopNgZone,
    \u0275PendingTasks: () => PendingTasks,
    \u0275ReflectionCapabilities: () => ReflectionCapabilities,
    \u0275Render3ComponentFactory: () => ComponentFactory,
    \u0275Render3ComponentRef: () => ComponentRef,
    \u0275Render3NgModuleRef: () => NgModuleRef,
    \u0275RuntimeError: () => RuntimeError,
    \u0275SSR_CONTENT_INTEGRITY_MARKER: () => SSR_CONTENT_INTEGRITY_MARKER,
    \u0275TESTABILITY: () => TESTABILITY,
    \u0275TESTABILITY_GETTER: () => TESTABILITY_GETTER,
    \u0275USE_RUNTIME_DEPS_TRACKER_FOR_JIT: () => USE_RUNTIME_DEPS_TRACKER_FOR_JIT,
    \u0275ViewRef: () => ViewRef$1,
    \u0275XSS_SECURITY_URL: () => XSS_SECURITY_URL,
    \u0275_sanitizeHtml: () => _sanitizeHtml,
    \u0275_sanitizeUrl: () => _sanitizeUrl,
    \u0275allowSanitizationBypassAndThrow: () => allowSanitizationBypassAndThrow,
    \u0275annotateForHydration: () => annotateForHydration,
    \u0275bypassSanitizationTrustHtml: () => bypassSanitizationTrustHtml,
    \u0275bypassSanitizationTrustResourceUrl: () => bypassSanitizationTrustResourceUrl,
    \u0275bypassSanitizationTrustScript: () => bypassSanitizationTrustScript,
    \u0275bypassSanitizationTrustStyle: () => bypassSanitizationTrustStyle,
    \u0275bypassSanitizationTrustUrl: () => bypassSanitizationTrustUrl,
    \u0275clearResolutionOfComponentResourcesQueue: () => clearResolutionOfComponentResourcesQueue,
    \u0275compileComponent: () => compileComponent,
    \u0275compileDirective: () => compileDirective,
    \u0275compileNgModule: () => compileNgModule,
    \u0275compileNgModuleDefs: () => compileNgModuleDefs,
    \u0275compileNgModuleFactory: () => compileNgModuleFactory,
    \u0275compilePipe: () => compilePipe,
    \u0275convertToBitFlags: () => convertToBitFlags,
    \u0275createInjector: () => createInjector,
    \u0275defaultIterableDiffers: () => defaultIterableDiffers,
    \u0275defaultKeyValueDiffers: () => defaultKeyValueDiffers,
    \u0275depsTracker: () => depsTracker,
    \u0275detectChangesInViewIfRequired: () => detectChangesInViewIfRequired,
    \u0275devModeEqual: () => devModeEqual,
    \u0275findLocaleData: () => findLocaleData,
    \u0275flushModuleScopingQueueAsMuchAsPossible: () => flushModuleScopingQueueAsMuchAsPossible,
    \u0275formatRuntimeError: () => formatRuntimeError,
    \u0275generateStandaloneInDeclarationsError: () => generateStandaloneInDeclarationsError,
    \u0275getAsyncClassMetadataFn: () => getAsyncClassMetadataFn,
    \u0275getDebugNode: () => getDebugNode,
    \u0275getDeferBlocks: () => getDeferBlocks,
    \u0275getDirectives: () => getDirectives,
    \u0275getEnsureDirtyViewsAreAlwaysReachable: () => getEnsureDirtyViewsAreAlwaysReachable,
    \u0275getHostElement: () => getHostElement,
    \u0275getInjectableDef: () => getInjectableDef,
    \u0275getLContext: () => getLContext,
    \u0275getLocaleCurrencyCode: () => getLocaleCurrencyCode,
    \u0275getLocalePluralCase: () => getLocalePluralCase,
    \u0275getOutputDestroyRef: () => getOutputDestroyRef,
    \u0275getSanitizationBypassType: () => getSanitizationBypassType,
    \u0275getUnknownElementStrictMode: () => \u0275getUnknownElementStrictMode,
    \u0275getUnknownPropertyStrictMode: () => \u0275getUnknownPropertyStrictMode,
    \u0275global: () => _global,
    \u0275injectChangeDetectorRef: () => injectChangeDetectorRef,
    \u0275internalAfterNextRender: () => internalAfterNextRender,
    \u0275internalCreateApplication: () => internalCreateApplication,
    \u0275isBoundToModule: () => isBoundToModule,
    \u0275isComponentDefPendingResolution: () => isComponentDefPendingResolution,
    \u0275isEnvironmentProviders: () => isEnvironmentProviders,
    \u0275isInjectable: () => isInjectable,
    \u0275isNgModule: () => isNgModule,
    \u0275isPromise: () => isPromise2,
    \u0275isSubscribable: () => isSubscribable,
    \u0275noSideEffects: () => noSideEffects,
    \u0275patchComponentDefWithScope: () => patchComponentDefWithScope,
    \u0275performanceMarkFeature: () => performanceMarkFeature,
    \u0275provideZonelessChangeDetection: () => provideZonelessChangeDetection,
    \u0275queueStateUpdate: () => queueStateUpdate,
    \u0275readHydrationInfo: () => readHydrationInfo,
    \u0275registerLocaleData: () => registerLocaleData,
    \u0275renderDeferBlockState: () => renderDeferBlockState,
    \u0275resetCompiledComponents: () => resetCompiledComponents,
    \u0275resetJitOptions: () => resetJitOptions,
    \u0275resolveComponentResources: () => resolveComponentResources,
    \u0275restoreComponentResolutionQueue: () => restoreComponentResolutionQueue,
    \u0275setAllowDuplicateNgModuleIdsForTest: () => setAllowDuplicateNgModuleIdsForTest,
    \u0275setAlternateWeakRefImpl: () => setAlternateWeakRefImpl,
    \u0275setClassDebugInfo: () => \u0275setClassDebugInfo,
    \u0275setClassMetadata: () => setClassMetadata,
    \u0275setClassMetadataAsync: () => setClassMetadataAsync,
    \u0275setCurrentInjector: () => setCurrentInjector,
    \u0275setDocument: () => setDocument,
    \u0275setEnsureDirtyViewsAreAlwaysReachable: () => setEnsureDirtyViewsAreAlwaysReachable,
    \u0275setInjectorProfilerContext: () => setInjectorProfilerContext,
    \u0275setLocaleId: () => setLocaleId,
    \u0275setUnknownElementStrictMode: () => \u0275setUnknownElementStrictMode,
    \u0275setUnknownPropertyStrictMode: () => \u0275setUnknownPropertyStrictMode,
    \u0275store: () => store,
    \u0275stringify: () => stringify,
    \u0275transitiveScopesFor: () => transitiveScopesFor,
    \u0275triggerResourceLoading: () => triggerResourceLoading,
    \u0275truncateMiddle: () => truncateMiddle,
    \u0275unregisterLocaleData: () => unregisterAllLocaleData,
    \u0275unwrapSafeValue: () => unwrapSafeValue,
    \u0275unwrapWritableSignal: () => \u0275unwrapWritableSignal,
    \u0275whenStable: () => whenStable,
    \u0275withDomHydration: () => withDomHydration,
    \u0275withI18nHydration: () => withI18nHydration,
    \u0275\u0275CopyDefinitionFeature: () => \u0275\u0275CopyDefinitionFeature,
    \u0275\u0275FactoryTarget: () => FactoryTarget,
    \u0275\u0275HostDirectivesFeature: () => \u0275\u0275HostDirectivesFeature,
    \u0275\u0275InheritDefinitionFeature: () => \u0275\u0275InheritDefinitionFeature,
    \u0275\u0275InputFlags: () => InputFlags,
    \u0275\u0275InputTransformsFeature: () => \u0275\u0275InputTransformsFeature,
    \u0275\u0275NgOnChangesFeature: () => \u0275\u0275NgOnChangesFeature,
    \u0275\u0275ProvidersFeature: () => \u0275\u0275ProvidersFeature,
    \u0275\u0275StandaloneFeature: () => \u0275\u0275StandaloneFeature,
    \u0275\u0275advance: () => \u0275\u0275advance,
    \u0275\u0275attribute: () => \u0275\u0275attribute,
    \u0275\u0275attributeInterpolate1: () => \u0275\u0275attributeInterpolate1,
    \u0275\u0275attributeInterpolate2: () => \u0275\u0275attributeInterpolate2,
    \u0275\u0275attributeInterpolate3: () => \u0275\u0275attributeInterpolate3,
    \u0275\u0275attributeInterpolate4: () => \u0275\u0275attributeInterpolate4,
    \u0275\u0275attributeInterpolate5: () => \u0275\u0275attributeInterpolate5,
    \u0275\u0275attributeInterpolate6: () => \u0275\u0275attributeInterpolate6,
    \u0275\u0275attributeInterpolate7: () => \u0275\u0275attributeInterpolate7,
    \u0275\u0275attributeInterpolate8: () => \u0275\u0275attributeInterpolate8,
    \u0275\u0275attributeInterpolateV: () => \u0275\u0275attributeInterpolateV,
    \u0275\u0275classMap: () => \u0275\u0275classMap,
    \u0275\u0275classMapInterpolate1: () => \u0275\u0275classMapInterpolate1,
    \u0275\u0275classMapInterpolate2: () => \u0275\u0275classMapInterpolate2,
    \u0275\u0275classMapInterpolate3: () => \u0275\u0275classMapInterpolate3,
    \u0275\u0275classMapInterpolate4: () => \u0275\u0275classMapInterpolate4,
    \u0275\u0275classMapInterpolate5: () => \u0275\u0275classMapInterpolate5,
    \u0275\u0275classMapInterpolate6: () => \u0275\u0275classMapInterpolate6,
    \u0275\u0275classMapInterpolate7: () => \u0275\u0275classMapInterpolate7,
    \u0275\u0275classMapInterpolate8: () => \u0275\u0275classMapInterpolate8,
    \u0275\u0275classMapInterpolateV: () => \u0275\u0275classMapInterpolateV,
    \u0275\u0275classProp: () => \u0275\u0275classProp,
    \u0275\u0275componentInstance: () => \u0275\u0275componentInstance,
    \u0275\u0275conditional: () => \u0275\u0275conditional,
    \u0275\u0275contentQuery: () => \u0275\u0275contentQuery,
    \u0275\u0275contentQuerySignal: () => \u0275\u0275contentQuerySignal,
    \u0275\u0275defer: () => \u0275\u0275defer,
    \u0275\u0275deferEnableTimerScheduling: () => \u0275\u0275deferEnableTimerScheduling,
    \u0275\u0275deferOnHover: () => \u0275\u0275deferOnHover,
    \u0275\u0275deferOnIdle: () => \u0275\u0275deferOnIdle,
    \u0275\u0275deferOnImmediate: () => \u0275\u0275deferOnImmediate,
    \u0275\u0275deferOnInteraction: () => \u0275\u0275deferOnInteraction,
    \u0275\u0275deferOnTimer: () => \u0275\u0275deferOnTimer,
    \u0275\u0275deferOnViewport: () => \u0275\u0275deferOnViewport,
    \u0275\u0275deferPrefetchOnHover: () => \u0275\u0275deferPrefetchOnHover,
    \u0275\u0275deferPrefetchOnIdle: () => \u0275\u0275deferPrefetchOnIdle,
    \u0275\u0275deferPrefetchOnImmediate: () => \u0275\u0275deferPrefetchOnImmediate,
    \u0275\u0275deferPrefetchOnInteraction: () => \u0275\u0275deferPrefetchOnInteraction,
    \u0275\u0275deferPrefetchOnTimer: () => \u0275\u0275deferPrefetchOnTimer,
    \u0275\u0275deferPrefetchOnViewport: () => \u0275\u0275deferPrefetchOnViewport,
    \u0275\u0275deferPrefetchWhen: () => \u0275\u0275deferPrefetchWhen,
    \u0275\u0275deferWhen: () => \u0275\u0275deferWhen,
    \u0275\u0275defineComponent: () => \u0275\u0275defineComponent,
    \u0275\u0275defineDirective: () => \u0275\u0275defineDirective,
    \u0275\u0275defineInjectable: () => \u0275\u0275defineInjectable,
    \u0275\u0275defineInjector: () => \u0275\u0275defineInjector,
    \u0275\u0275defineNgModule: () => \u0275\u0275defineNgModule,
    \u0275\u0275definePipe: () => \u0275\u0275definePipe,
    \u0275\u0275directiveInject: () => \u0275\u0275directiveInject,
    \u0275\u0275disableBindings: () => \u0275\u0275disableBindings,
    \u0275\u0275element: () => \u0275\u0275element,
    \u0275\u0275elementContainer: () => \u0275\u0275elementContainer,
    \u0275\u0275elementContainerEnd: () => \u0275\u0275elementContainerEnd,
    \u0275\u0275elementContainerStart: () => \u0275\u0275elementContainerStart,
    \u0275\u0275elementEnd: () => \u0275\u0275elementEnd,
    \u0275\u0275elementStart: () => \u0275\u0275elementStart,
    \u0275\u0275enableBindings: () => \u0275\u0275enableBindings,
    \u0275\u0275getComponentDepsFactory: () => \u0275\u0275getComponentDepsFactory,
    \u0275\u0275getCurrentView: () => \u0275\u0275getCurrentView,
    \u0275\u0275getInheritedFactory: () => \u0275\u0275getInheritedFactory,
    \u0275\u0275hostProperty: () => \u0275\u0275hostProperty,
    \u0275\u0275i18n: () => \u0275\u0275i18n,
    \u0275\u0275i18nApply: () => \u0275\u0275i18nApply,
    \u0275\u0275i18nAttributes: () => \u0275\u0275i18nAttributes,
    \u0275\u0275i18nEnd: () => \u0275\u0275i18nEnd,
    \u0275\u0275i18nExp: () => \u0275\u0275i18nExp,
    \u0275\u0275i18nPostprocess: () => \u0275\u0275i18nPostprocess,
    \u0275\u0275i18nStart: () => \u0275\u0275i18nStart,
    \u0275\u0275inject: () => \u0275\u0275inject,
    \u0275\u0275injectAttribute: () => \u0275\u0275injectAttribute,
    \u0275\u0275invalidFactory: () => \u0275\u0275invalidFactory,
    \u0275\u0275invalidFactoryDep: () => \u0275\u0275invalidFactoryDep,
    \u0275\u0275listener: () => \u0275\u0275listener,
    \u0275\u0275loadQuery: () => \u0275\u0275loadQuery,
    \u0275\u0275namespaceHTML: () => \u0275\u0275namespaceHTML,
    \u0275\u0275namespaceMathML: () => \u0275\u0275namespaceMathML,
    \u0275\u0275namespaceSVG: () => \u0275\u0275namespaceSVG,
    \u0275\u0275nextContext: () => \u0275\u0275nextContext,
    \u0275\u0275ngDeclareClassMetadata: () => \u0275\u0275ngDeclareClassMetadata,
    \u0275\u0275ngDeclareComponent: () => \u0275\u0275ngDeclareComponent,
    \u0275\u0275ngDeclareDirective: () => \u0275\u0275ngDeclareDirective,
    \u0275\u0275ngDeclareFactory: () => \u0275\u0275ngDeclareFactory,
    \u0275\u0275ngDeclareInjectable: () => \u0275\u0275ngDeclareInjectable,
    \u0275\u0275ngDeclareInjector: () => \u0275\u0275ngDeclareInjector,
    \u0275\u0275ngDeclareNgModule: () => \u0275\u0275ngDeclareNgModule,
    \u0275\u0275ngDeclarePipe: () => \u0275\u0275ngDeclarePipe,
    \u0275\u0275pipe: () => \u0275\u0275pipe,
    \u0275\u0275pipeBind1: () => \u0275\u0275pipeBind1,
    \u0275\u0275pipeBind2: () => \u0275\u0275pipeBind2,
    \u0275\u0275pipeBind3: () => \u0275\u0275pipeBind3,
    \u0275\u0275pipeBind4: () => \u0275\u0275pipeBind4,
    \u0275\u0275pipeBindV: () => \u0275\u0275pipeBindV,
    \u0275\u0275projection: () => \u0275\u0275projection,
    \u0275\u0275projectionDef: () => \u0275\u0275projectionDef,
    \u0275\u0275property: () => \u0275\u0275property,
    \u0275\u0275propertyInterpolate: () => \u0275\u0275propertyInterpolate,
    \u0275\u0275propertyInterpolate1: () => \u0275\u0275propertyInterpolate1,
    \u0275\u0275propertyInterpolate2: () => \u0275\u0275propertyInterpolate2,
    \u0275\u0275propertyInterpolate3: () => \u0275\u0275propertyInterpolate3,
    \u0275\u0275propertyInterpolate4: () => \u0275\u0275propertyInterpolate4,
    \u0275\u0275propertyInterpolate5: () => \u0275\u0275propertyInterpolate5,
    \u0275\u0275propertyInterpolate6: () => \u0275\u0275propertyInterpolate6,
    \u0275\u0275propertyInterpolate7: () => \u0275\u0275propertyInterpolate7,
    \u0275\u0275propertyInterpolate8: () => \u0275\u0275propertyInterpolate8,
    \u0275\u0275propertyInterpolateV: () => \u0275\u0275propertyInterpolateV,
    \u0275\u0275pureFunction0: () => \u0275\u0275pureFunction0,
    \u0275\u0275pureFunction1: () => \u0275\u0275pureFunction1,
    \u0275\u0275pureFunction2: () => \u0275\u0275pureFunction2,
    \u0275\u0275pureFunction3: () => \u0275\u0275pureFunction3,
    \u0275\u0275pureFunction4: () => \u0275\u0275pureFunction4,
    \u0275\u0275pureFunction5: () => \u0275\u0275pureFunction5,
    \u0275\u0275pureFunction6: () => \u0275\u0275pureFunction6,
    \u0275\u0275pureFunction7: () => \u0275\u0275pureFunction7,
    \u0275\u0275pureFunction8: () => \u0275\u0275pureFunction8,
    \u0275\u0275pureFunctionV: () => \u0275\u0275pureFunctionV,
    \u0275\u0275queryAdvance: () => \u0275\u0275queryAdvance,
    \u0275\u0275queryRefresh: () => \u0275\u0275queryRefresh,
    \u0275\u0275reference: () => \u0275\u0275reference,
    \u0275\u0275registerNgModuleType: () => registerNgModuleType,
    \u0275\u0275repeater: () => \u0275\u0275repeater,
    \u0275\u0275repeaterCreate: () => \u0275\u0275repeaterCreate,
    \u0275\u0275repeaterTrackByIdentity: () => \u0275\u0275repeaterTrackByIdentity,
    \u0275\u0275repeaterTrackByIndex: () => \u0275\u0275repeaterTrackByIndex,
    \u0275\u0275resetView: () => \u0275\u0275resetView,
    \u0275\u0275resolveBody: () => \u0275\u0275resolveBody,
    \u0275\u0275resolveDocument: () => \u0275\u0275resolveDocument,
    \u0275\u0275resolveWindow: () => \u0275\u0275resolveWindow,
    \u0275\u0275restoreView: () => \u0275\u0275restoreView,
    \u0275\u0275sanitizeHtml: () => \u0275\u0275sanitizeHtml,
    \u0275\u0275sanitizeResourceUrl: () => \u0275\u0275sanitizeResourceUrl,
    \u0275\u0275sanitizeScript: () => \u0275\u0275sanitizeScript,
    \u0275\u0275sanitizeStyle: () => \u0275\u0275sanitizeStyle,
    \u0275\u0275sanitizeUrl: () => \u0275\u0275sanitizeUrl,
    \u0275\u0275sanitizeUrlOrResourceUrl: () => \u0275\u0275sanitizeUrlOrResourceUrl,
    \u0275\u0275setComponentScope: () => \u0275\u0275setComponentScope,
    \u0275\u0275setNgModuleScope: () => \u0275\u0275setNgModuleScope,
    \u0275\u0275styleMap: () => \u0275\u0275styleMap,
    \u0275\u0275styleMapInterpolate1: () => \u0275\u0275styleMapInterpolate1,
    \u0275\u0275styleMapInterpolate2: () => \u0275\u0275styleMapInterpolate2,
    \u0275\u0275styleMapInterpolate3: () => \u0275\u0275styleMapInterpolate3,
    \u0275\u0275styleMapInterpolate4: () => \u0275\u0275styleMapInterpolate4,
    \u0275\u0275styleMapInterpolate5: () => \u0275\u0275styleMapInterpolate5,
    \u0275\u0275styleMapInterpolate6: () => \u0275\u0275styleMapInterpolate6,
    \u0275\u0275styleMapInterpolate7: () => \u0275\u0275styleMapInterpolate7,
    \u0275\u0275styleMapInterpolate8: () => \u0275\u0275styleMapInterpolate8,
    \u0275\u0275styleMapInterpolateV: () => \u0275\u0275styleMapInterpolateV,
    \u0275\u0275styleProp: () => \u0275\u0275styleProp,
    \u0275\u0275stylePropInterpolate1: () => \u0275\u0275stylePropInterpolate1,
    \u0275\u0275stylePropInterpolate2: () => \u0275\u0275stylePropInterpolate2,
    \u0275\u0275stylePropInterpolate3: () => \u0275\u0275stylePropInterpolate3,
    \u0275\u0275stylePropInterpolate4: () => \u0275\u0275stylePropInterpolate4,
    \u0275\u0275stylePropInterpolate5: () => \u0275\u0275stylePropInterpolate5,
    \u0275\u0275stylePropInterpolate6: () => \u0275\u0275stylePropInterpolate6,
    \u0275\u0275stylePropInterpolate7: () => \u0275\u0275stylePropInterpolate7,
    \u0275\u0275stylePropInterpolate8: () => \u0275\u0275stylePropInterpolate8,
    \u0275\u0275stylePropInterpolateV: () => \u0275\u0275stylePropInterpolateV,
    \u0275\u0275syntheticHostListener: () => \u0275\u0275syntheticHostListener,
    \u0275\u0275syntheticHostProperty: () => \u0275\u0275syntheticHostProperty,
    \u0275\u0275template: () => \u0275\u0275template,
    \u0275\u0275templateRefExtractor: () => \u0275\u0275templateRefExtractor,
    \u0275\u0275text: () => \u0275\u0275text,
    \u0275\u0275textInterpolate: () => \u0275\u0275textInterpolate,
    \u0275\u0275textInterpolate1: () => \u0275\u0275textInterpolate1,
    \u0275\u0275textInterpolate2: () => \u0275\u0275textInterpolate2,
    \u0275\u0275textInterpolate3: () => \u0275\u0275textInterpolate3,
    \u0275\u0275textInterpolate4: () => \u0275\u0275textInterpolate4,
    \u0275\u0275textInterpolate5: () => \u0275\u0275textInterpolate5,
    \u0275\u0275textInterpolate6: () => \u0275\u0275textInterpolate6,
    \u0275\u0275textInterpolate7: () => \u0275\u0275textInterpolate7,
    \u0275\u0275textInterpolate8: () => \u0275\u0275textInterpolate8,
    \u0275\u0275textInterpolateV: () => \u0275\u0275textInterpolateV,
    \u0275\u0275trustConstantHtml: () => \u0275\u0275trustConstantHtml,
    \u0275\u0275trustConstantResourceUrl: () => \u0275\u0275trustConstantResourceUrl,
    \u0275\u0275twoWayBindingSet: () => \u0275\u0275twoWayBindingSet,
    \u0275\u0275twoWayListener: () => \u0275\u0275twoWayListener,
    \u0275\u0275twoWayProperty: () => \u0275\u0275twoWayProperty,
    \u0275\u0275validateIframeAttribute: () => \u0275\u0275validateIframeAttribute,
    \u0275\u0275viewQuery: () => \u0275\u0275viewQuery,
    \u0275\u0275viewQuerySignal: () => \u0275\u0275viewQuerySignal
  });
  function formatRuntimeError(code, message) {
    const fullCode = `NG0${Math.abs(code)}`;
    let errorMessage = `${fullCode}${message ? ": " + message : ""}`;
    if (ngDevMode && code < 0) {
      const addPeriodSeparator = !errorMessage.match(/[.,;!?\n]$/);
      const separator = addPeriodSeparator ? "." : "";
      errorMessage = `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;
    }
    return errorMessage;
  }
  function createInputSignal(initialValue, options) {
    const node = Object.create(INPUT_SIGNAL_NODE);
    node.value = initialValue;
    node.transformFn = options?.transform;
    function inputValueFn() {
      producerAccessed(node);
      if (node.value === REQUIRED_UNSET_VALUE) {
        throw new RuntimeError(-950, ngDevMode && "Input is required but no value is available yet.");
      }
      return node.value;
    }
    inputValueFn[SIGNAL] = node;
    if (ngDevMode) {
      inputValueFn.toString = () => `[Input Signal: ${inputValueFn()}]`;
    }
    return inputValueFn;
  }
  function noSideEffects(fn2) {
    return { toString: fn2 }.toString();
  }
  function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {
    return noSideEffects(() => {
      const metaCtor = makeMetadataCtor(props);
      function DecoratorFactory(...args) {
        if (this instanceof DecoratorFactory) {
          metaCtor.call(this, ...args);
          return this;
        }
        const annotationInstance = new DecoratorFactory(...args);
        return function TypeDecorator(cls) {
          if (typeFn)
            typeFn(cls, ...args);
          const annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];
          annotations.push(annotationInstance);
          if (additionalProcessing)
            additionalProcessing(cls);
          return cls;
        };
      }
      if (parentClass) {
        DecoratorFactory.prototype = Object.create(parentClass.prototype);
      }
      DecoratorFactory.prototype.ngMetadataName = name;
      DecoratorFactory.annotationCls = DecoratorFactory;
      return DecoratorFactory;
    });
  }
  function makeMetadataCtor(props) {
    return function ctor(...args) {
      if (props) {
        const values = props(...args);
        for (const propName in values) {
          this[propName] = values[propName];
        }
      }
    };
  }
  function makeParamDecorator(name, props, parentClass) {
    return noSideEffects(() => {
      const metaCtor = makeMetadataCtor(props);
      function ParamDecoratorFactory(...args) {
        if (this instanceof ParamDecoratorFactory) {
          metaCtor.apply(this, args);
          return this;
        }
        const annotationInstance = new ParamDecoratorFactory(...args);
        ParamDecorator.annotation = annotationInstance;
        return ParamDecorator;
        function ParamDecorator(cls, unusedKey, index) {
          const parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];
          while (parameters.length <= index) {
            parameters.push(null);
          }
          (parameters[index] = parameters[index] || []).push(annotationInstance);
          return cls;
        }
      }
      if (parentClass) {
        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
      }
      ParamDecoratorFactory.prototype.ngMetadataName = name;
      ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
      return ParamDecoratorFactory;
    });
  }
  function makePropDecorator(name, props, parentClass, additionalProcessing) {
    return noSideEffects(() => {
      const metaCtor = makeMetadataCtor(props);
      function PropDecoratorFactory(...args) {
        if (this instanceof PropDecoratorFactory) {
          metaCtor.apply(this, args);
          return this;
        }
        const decoratorInstance = new PropDecoratorFactory(...args);
        function PropDecorator(target, name2) {
          if (target === void 0) {
            throw new Error("Standard Angular field decorators are not supported in JIT mode.");
          }
          const constructor = target.constructor;
          const meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];
          meta[name2] = meta.hasOwnProperty(name2) && meta[name2] || [];
          meta[name2].unshift(decoratorInstance);
          if (additionalProcessing)
            additionalProcessing(target, name2, ...args);
        }
        return PropDecorator;
      }
      if (parentClass) {
        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
      }
      PropDecoratorFactory.prototype.ngMetadataName = name;
      PropDecoratorFactory.annotationCls = PropDecoratorFactory;
      return PropDecoratorFactory;
    });
  }
  function ngDevModeResetPerfCounters() {
    const locationString = typeof location !== "undefined" ? location.toString() : "";
    const newCounters = {
      namedConstructors: locationString.indexOf("ngDevMode=namedConstructors") != -1,
      firstCreatePass: 0,
      tNode: 0,
      tView: 0,
      rendererCreateTextNode: 0,
      rendererSetText: 0,
      rendererCreateElement: 0,
      rendererAddEventListener: 0,
      rendererSetAttribute: 0,
      rendererRemoveAttribute: 0,
      rendererSetProperty: 0,
      rendererSetClassName: 0,
      rendererAddClass: 0,
      rendererRemoveClass: 0,
      rendererSetStyle: 0,
      rendererRemoveStyle: 0,
      rendererDestroy: 0,
      rendererDestroyNode: 0,
      rendererMoveNode: 0,
      rendererRemoveNode: 0,
      rendererAppendChild: 0,
      rendererInsertBefore: 0,
      rendererCreateComment: 0,
      hydratedNodes: 0,
      hydratedComponents: 0,
      dehydratedViewsRemoved: 0,
      dehydratedViewsCleanupRuns: 0,
      componentsSkippedHydration: 0
    };
    const allowNgDevModeTrue = locationString.indexOf("ngDevMode=false") === -1;
    if (!allowNgDevModeTrue) {
      _global["ngDevMode"] = false;
    } else {
      if (typeof _global["ngDevMode"] !== "object") {
        _global["ngDevMode"] = {};
      }
      Object.assign(_global["ngDevMode"], newCounters);
    }
    return newCounters;
  }
  function initNgDevMode() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (typeof ngDevMode !== "object" || Object.keys(ngDevMode).length === 0) {
        ngDevModeResetPerfCounters();
      }
      return typeof ngDevMode !== "undefined" && !!ngDevMode;
    }
    return false;
  }
  function getClosureSafeProperty(objWithPropertyToExtract) {
    for (let key in objWithPropertyToExtract) {
      if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
        return key;
      }
    }
    throw Error("Could not find renamed property on target object.");
  }
  function fillProperties(target, source) {
    for (const key in source) {
      if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
        target[key] = source[key];
      }
    }
  }
  function stringify(token) {
    if (typeof token === "string") {
      return token;
    }
    if (Array.isArray(token)) {
      return "[" + token.map(stringify).join(", ") + "]";
    }
    if (token == null) {
      return "" + token;
    }
    if (token.overriddenName) {
      return `${token.overriddenName}`;
    }
    if (token.name) {
      return `${token.name}`;
    }
    const res = token.toString();
    if (res == null) {
      return "" + res;
    }
    const newLineIndex = res.indexOf("\n");
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function concatStringsWithSpace(before, after) {
    return before == null || before === "" ? after === null ? "" : after : after == null || after === "" ? before : before + " " + after;
  }
  function truncateMiddle(str, maxLength = 100) {
    if (!str || maxLength < 1 || str.length <= maxLength)
      return str;
    if (maxLength == 1)
      return str.substring(0, 1) + "...";
    const halfLimit = Math.round(maxLength / 2);
    return str.substring(0, halfLimit) + "..." + str.substring(str.length - halfLimit);
  }
  function forwardRef(forwardRefFn) {
    forwardRefFn.__forward_ref__ = forwardRef;
    forwardRefFn.toString = function() {
      return stringify(this());
    };
    return forwardRefFn;
  }
  function resolveForwardRef(type) {
    return isForwardRef(type) ? type() : type;
  }
  function isForwardRef(fn2) {
    return typeof fn2 === "function" && fn2.hasOwnProperty(__forward_ref__) && fn2.__forward_ref__ === forwardRef;
  }
  function assertNumber(actual, msg) {
    if (!(typeof actual === "number")) {
      throwError2(msg, typeof actual, "number", "===");
    }
  }
  function assertNumberInRange(actual, minInclusive, maxInclusive) {
    assertNumber(actual, "Expected a number");
    assertLessThanOrEqual(actual, maxInclusive, "Expected number to be less than or equal to");
    assertGreaterThanOrEqual(actual, minInclusive, "Expected number to be greater than or equal to");
  }
  function assertString(actual, msg) {
    if (!(typeof actual === "string")) {
      throwError2(msg, actual === null ? "null" : typeof actual, "string", "===");
    }
  }
  function assertFunction(actual, msg) {
    if (!(typeof actual === "function")) {
      throwError2(msg, actual === null ? "null" : typeof actual, "function", "===");
    }
  }
  function assertEqual(actual, expected, msg) {
    if (!(actual == expected)) {
      throwError2(msg, actual, expected, "==");
    }
  }
  function assertNotEqual(actual, expected, msg) {
    if (!(actual != expected)) {
      throwError2(msg, actual, expected, "!=");
    }
  }
  function assertSame(actual, expected, msg) {
    if (!(actual === expected)) {
      throwError2(msg, actual, expected, "===");
    }
  }
  function assertNotSame(actual, expected, msg) {
    if (!(actual !== expected)) {
      throwError2(msg, actual, expected, "!==");
    }
  }
  function assertLessThan(actual, expected, msg) {
    if (!(actual < expected)) {
      throwError2(msg, actual, expected, "<");
    }
  }
  function assertLessThanOrEqual(actual, expected, msg) {
    if (!(actual <= expected)) {
      throwError2(msg, actual, expected, "<=");
    }
  }
  function assertGreaterThan(actual, expected, msg) {
    if (!(actual > expected)) {
      throwError2(msg, actual, expected, ">");
    }
  }
  function assertGreaterThanOrEqual(actual, expected, msg) {
    if (!(actual >= expected)) {
      throwError2(msg, actual, expected, ">=");
    }
  }
  function assertDefined(actual, msg) {
    if (actual == null) {
      throwError2(msg, actual, null, "!=");
    }
  }
  function throwError2(msg, actual, expected, comparison) {
    throw new Error(`ASSERTION ERROR: ${msg}` + (comparison == null ? "" : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));
  }
  function assertDomNode(node) {
    if (!(node instanceof Node)) {
      throwError2(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);
    }
  }
  function assertElement(node) {
    if (!(node instanceof Element)) {
      throwError2(`The provided value must be an element but got ${stringify(node)}`);
    }
  }
  function assertIndexInRange(arr, index) {
    assertDefined(arr, "Array must be defined.");
    const maxLen = arr.length;
    if (index < 0 || index >= maxLen) {
      throwError2(`Index expected to be less than ${maxLen} but got ${index}`);
    }
  }
  function assertOneOf(value, ...validValues) {
    if (validValues.indexOf(value) !== -1)
      return true;
    throwError2(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);
  }
  function assertNotReactive(fn2) {
    if (getActiveConsumer() !== null) {
      throwError2(`${fn2}() should never be called in a reactive context.`);
    }
  }
  function \u0275\u0275defineInjectable(opts) {
    return {
      token: opts.token,
      providedIn: opts.providedIn || null,
      factory: opts.factory,
      value: void 0
    };
  }
  function \u0275\u0275defineInjector(options) {
    return { providers: options.providers || [], imports: options.imports || [] };
  }
  function getInjectableDef(type) {
    return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);
  }
  function isInjectable(type) {
    return getInjectableDef(type) !== null;
  }
  function getOwnDefinition(type, field) {
    return type.hasOwnProperty(field) ? type[field] : null;
  }
  function getInheritedInjectableDef(type) {
    const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);
    if (def) {
      ngDevMode && console.warn(`DEPRECATED: DI is instantiating a token "${type.name}" that inherits its @Injectable decorator but does not provide one itself.
This will become an error in a future version of Angular. Please add @Injectable() to the "${type.name}" class.`);
      return def;
    } else {
      return null;
    }
  }
  function getInjectorDef(type) {
    return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ? type[NG_INJ_DEF] : null;
  }
  function getInjectorProfilerContext() {
    !ngDevMode && throwError2("getInjectorProfilerContext should never be called in production mode");
    return _injectorProfilerContext;
  }
  function setInjectorProfilerContext(context2) {
    !ngDevMode && throwError2("setInjectorProfilerContext should never be called in production mode");
    const previous = _injectorProfilerContext;
    _injectorProfilerContext = context2;
    return previous;
  }
  function injectorProfiler(event) {
    !ngDevMode && throwError2("Injector profiler should never be called in production mode");
    if (injectorProfilerCallback != null) {
      injectorProfilerCallback(event);
    }
  }
  function emitProviderConfiguredEvent(eventProvider, isViewProvider = false) {
    !ngDevMode && throwError2("Injector profiler should never be called in production mode");
    let token;
    if (typeof eventProvider === "function") {
      token = eventProvider;
    } else if (eventProvider instanceof InjectionToken) {
      token = eventProvider;
    } else {
      token = resolveForwardRef(eventProvider.provide);
    }
    let provider = eventProvider;
    if (eventProvider instanceof InjectionToken) {
      provider = eventProvider.\u0275prov || eventProvider;
    }
    injectorProfiler({
      type: 2,
      context: getInjectorProfilerContext(),
      providerRecord: { token, provider, isViewProvider }
    });
  }
  function emitInstanceCreatedByInjectorEvent(instance) {
    !ngDevMode && throwError2("Injector profiler should never be called in production mode");
    injectorProfiler({
      type: 1,
      context: getInjectorProfilerContext(),
      instance: { value: instance }
    });
  }
  function emitInjectEvent(token, value, flags) {
    !ngDevMode && throwError2("Injector profiler should never be called in production mode");
    injectorProfiler({
      type: 0,
      context: getInjectorProfilerContext(),
      service: { token, value, flags }
    });
  }
  function runInInjectorProfilerContext(injector, token, callback) {
    !ngDevMode && throwError2("runInInjectorProfilerContext should never be called in production mode");
    const prevInjectContext = setInjectorProfilerContext({ injector, token });
    try {
      callback();
    } finally {
      setInjectorProfilerContext(prevInjectContext);
    }
  }
  function isEnvironmentProviders(value) {
    return value && !!value.\u0275providers;
  }
  function renderStringify(value) {
    if (typeof value === "string")
      return value;
    if (value == null)
      return "";
    return String(value);
  }
  function stringifyForError(value) {
    if (typeof value === "function")
      return value.name || value.toString();
    if (typeof value === "object" && value != null && typeof value.type === "function") {
      return value.type.name || value.type.toString();
    }
    return renderStringify(value);
  }
  function debugStringifyTypeForError(type) {
    let componentDef = type[NG_COMP_DEF] || null;
    if (componentDef !== null && componentDef.debugInfo) {
      return stringifyTypeFromDebugInfo(componentDef.debugInfo);
    }
    return stringifyForError(type);
  }
  function stringifyTypeFromDebugInfo(debugInfo) {
    if (!debugInfo.filePath || !debugInfo.lineNumber) {
      return debugInfo.className;
    } else {
      return `${debugInfo.className} (at ${debugInfo.filePath}:${debugInfo.lineNumber})`;
    }
  }
  function throwCyclicDependencyError(token, path) {
    const depPath = path ? `. Dependency path: ${path.join(" > ")} > ${token}` : "";
    throw new RuntimeError(-200, ngDevMode ? `Circular dependency in DI detected for ${token}${depPath}` : token);
  }
  function throwMixedMultiProviderError() {
    throw new Error(`Cannot mix multi providers and regular providers`);
  }
  function throwInvalidProviderError(ngModuleType, providers, provider) {
    if (ngModuleType && providers) {
      const providerDetail = providers.map((v) => v == provider ? "?" + provider + "?" : "...");
      throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(", ")}]`);
    } else if (isEnvironmentProviders(provider)) {
      if (provider.\u0275fromNgModule) {
        throw new RuntimeError(207, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);
      } else {
        throw new RuntimeError(207, `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);
      }
    } else {
      throw new Error("Invalid provider");
    }
  }
  function throwProviderNotFoundError(token, injectorName) {
    const errorMessage = ngDevMode && `No provider for ${stringifyForError(token)} found${injectorName ? ` in ${injectorName}` : ""}`;
    throw new RuntimeError(-201, errorMessage);
  }
  function getInjectImplementation() {
    return _injectImplementation;
  }
  function setInjectImplementation(impl) {
    const previous = _injectImplementation;
    _injectImplementation = impl;
    return previous;
  }
  function injectRootLimpMode(token, notFoundValue, flags) {
    const injectableDef = getInjectableDef(token);
    if (injectableDef && injectableDef.providedIn == "root") {
      return injectableDef.value === void 0 ? injectableDef.value = injectableDef.factory() : injectableDef.value;
    }
    if (flags & InjectFlags.Optional)
      return null;
    if (notFoundValue !== void 0)
      return notFoundValue;
    throwProviderNotFoundError(token, "Injector");
  }
  function assertInjectImplementationNotEqual(fn2) {
    ngDevMode && assertNotEqual(_injectImplementation, fn2, "Calling \u0275\u0275inject would cause infinite recursion");
  }
  function getCurrentInjector() {
    return _currentInjector;
  }
  function setCurrentInjector(injector) {
    const former = _currentInjector;
    _currentInjector = injector;
    return former;
  }
  function injectInjectorOnly(token, flags = InjectFlags.Default) {
    if (_currentInjector === void 0) {
      throw new RuntimeError(-203, ngDevMode && `inject() must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \`runInInjectionContext\`.`);
    } else if (_currentInjector === null) {
      return injectRootLimpMode(token, void 0, flags);
    } else {
      const value = _currentInjector.get(token, flags & InjectFlags.Optional ? null : void 0, flags);
      ngDevMode && emitInjectEvent(token, value, flags);
      return value;
    }
  }
  function \u0275\u0275inject(token, flags = InjectFlags.Default) {
    return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);
  }
  function \u0275\u0275invalidFactoryDep(index) {
    throw new RuntimeError(202, ngDevMode && `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.
This can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.

Please check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);
  }
  function inject(token, flags = InjectFlags.Default) {
    return \u0275\u0275inject(token, convertToBitFlags(flags));
  }
  function convertToBitFlags(flags) {
    if (typeof flags === "undefined" || typeof flags === "number") {
      return flags;
    }
    return 0 | // comment to force a line break in the formatter
    (flags.optional && 8) | (flags.host && 1) | (flags.self && 2) | (flags.skipSelf && 4);
  }
  function injectArgs(types) {
    const args = [];
    for (let i = 0; i < types.length; i++) {
      const arg = resolveForwardRef(types[i]);
      if (Array.isArray(arg)) {
        if (arg.length === 0) {
          throw new RuntimeError(900, ngDevMode && "Arguments array must have arguments.");
        }
        let type = void 0;
        let flags = InjectFlags.Default;
        for (let j = 0; j < arg.length; j++) {
          const meta = arg[j];
          const flag = getInjectFlag(meta);
          if (typeof flag === "number") {
            if (flag === -1) {
              type = meta.token;
            } else {
              flags |= flag;
            }
          } else {
            type = meta;
          }
        }
        args.push(\u0275\u0275inject(type, flags));
      } else {
        args.push(\u0275\u0275inject(arg));
      }
    }
    return args;
  }
  function attachInjectFlag(decorator, flag) {
    decorator[DI_DECORATOR_FLAG] = flag;
    decorator.prototype[DI_DECORATOR_FLAG] = flag;
    return decorator;
  }
  function getInjectFlag(token) {
    return token[DI_DECORATOR_FLAG];
  }
  function catchInjectorError(e2, token, injectorErrorName, source) {
    const tokenPath = e2[NG_TEMP_TOKEN_PATH];
    if (token[SOURCE]) {
      tokenPath.unshift(token[SOURCE]);
    }
    e2.message = formatError("\n" + e2.message, tokenPath, injectorErrorName, source);
    e2[NG_TOKEN_PATH] = tokenPath;
    e2[NG_TEMP_TOKEN_PATH] = null;
    throw e2;
  }
  function formatError(text2, obj, injectorErrorName, source = null) {
    text2 = text2 && text2.charAt(0) === "\n" && text2.charAt(1) == NO_NEW_LINE ? text2.slice(2) : text2;
    let context2 = stringify(obj);
    if (Array.isArray(obj)) {
      context2 = obj.map(stringify).join(" -> ");
    } else if (typeof obj === "object") {
      let parts = [];
      for (let key in obj) {
        if (obj.hasOwnProperty(key)) {
          let value = obj[key];
          parts.push(key + ":" + (typeof value === "string" ? JSON.stringify(value) : stringify(value)));
        }
      }
      context2 = `{${parts.join(", ")}}`;
    }
    return `${injectorErrorName}${source ? "(" + source + ")" : ""}[${context2}]: ${text2.replace(NEW_LINE, "\n  ")}`;
  }
  function getFactoryDef(type, throwNotFound) {
    const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);
    if (!hasFactoryDef && throwNotFound === true && ngDevMode) {
      throw new Error(`Type ${stringify(type)} does not have '\u0275fac' property.`);
    }
    return hasFactoryDef ? type[NG_FACTORY_DEF] : null;
  }
  function arrayEquals(a, b, identityAccessor) {
    if (a.length !== b.length)
      return false;
    for (let i = 0; i < a.length; i++) {
      let valueA = a[i];
      let valueB = b[i];
      if (identityAccessor) {
        valueA = identityAccessor(valueA);
        valueB = identityAccessor(valueB);
      }
      if (valueB !== valueA) {
        return false;
      }
    }
    return true;
  }
  function flatten(list) {
    return list.flat(Number.POSITIVE_INFINITY);
  }
  function deepForEach(input2, fn2) {
    input2.forEach((value) => Array.isArray(value) ? deepForEach(value, fn2) : fn2(value));
  }
  function addToArray(arr, index, value) {
    if (index >= arr.length) {
      arr.push(value);
    } else {
      arr.splice(index, 0, value);
    }
  }
  function removeFromArray(arr, index) {
    if (index >= arr.length - 1) {
      return arr.pop();
    } else {
      return arr.splice(index, 1)[0];
    }
  }
  function newArray(size, value) {
    const list = [];
    for (let i = 0; i < size; i++) {
      list.push(value);
    }
    return list;
  }
  function arraySplice(array, index, count) {
    const length = array.length - count;
    while (index < length) {
      array[index] = array[index + count];
      index++;
    }
    while (count--) {
      array.pop();
    }
  }
  function arrayInsert2(array, index, value1, value2) {
    ngDevMode && assertLessThanOrEqual(index, array.length, "Can't insert past array end.");
    let end = array.length;
    if (end == index) {
      array.push(value1, value2);
    } else if (end === 1) {
      array.push(value2, array[0]);
      array[0] = value1;
    } else {
      end--;
      array.push(array[end - 1], array[end]);
      while (end > index) {
        const previousEnd = end - 2;
        array[end] = array[previousEnd];
        end--;
      }
      array[index] = value1;
      array[index + 1] = value2;
    }
  }
  function keyValueArraySet(keyValueArray, key, value) {
    let index = keyValueArrayIndexOf(keyValueArray, key);
    if (index >= 0) {
      keyValueArray[index | 1] = value;
    } else {
      index = ~index;
      arrayInsert2(keyValueArray, index, key, value);
    }
    return index;
  }
  function keyValueArrayGet(keyValueArray, key) {
    const index = keyValueArrayIndexOf(keyValueArray, key);
    if (index >= 0) {
      return keyValueArray[index | 1];
    }
    return void 0;
  }
  function keyValueArrayIndexOf(keyValueArray, key) {
    return _arrayIndexOfSorted(keyValueArray, key, 1);
  }
  function _arrayIndexOfSorted(array, value, shift) {
    ngDevMode && assertEqual(Array.isArray(array), true, "Expecting an array");
    let start = 0;
    let end = array.length >> shift;
    while (end !== start) {
      const middle = start + (end - start >> 1);
      const current = array[middle << shift];
      if (value === current) {
        return middle << shift;
      } else if (current > value) {
        end = middle;
      } else {
        start = middle + 1;
      }
    }
    return ~(end << shift);
  }
  function classIndexOf(className, classToSearch, startingIndex) {
    ngDevMode && assertNotEqual(classToSearch, "", 'can not look for "" string.');
    let end = className.length;
    while (true) {
      const foundIndex = className.indexOf(classToSearch, startingIndex);
      if (foundIndex === -1)
        return foundIndex;
      if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32) {
        const length = classToSearch.length;
        if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32) {
          return foundIndex;
        }
      }
      startingIndex = foundIndex + 1;
    }
  }
  function setUpAttributes(renderer, native, attrs) {
    let i = 0;
    while (i < attrs.length) {
      const value = attrs[i];
      if (typeof value === "number") {
        if (value !== 0) {
          break;
        }
        i++;
        const namespaceURI = attrs[i++];
        const attrName = attrs[i++];
        const attrVal = attrs[i++];
        ngDevMode && ngDevMode.rendererSetAttribute++;
        renderer.setAttribute(native, attrName, attrVal, namespaceURI);
      } else {
        const attrName = value;
        const attrVal = attrs[++i];
        ngDevMode && ngDevMode.rendererSetAttribute++;
        if (isAnimationProp(attrName)) {
          renderer.setProperty(native, attrName, attrVal);
        } else {
          renderer.setAttribute(native, attrName, attrVal);
        }
        i++;
      }
    }
    return i;
  }
  function isNameOnlyAttributeMarker(marker) {
    return marker === 3 || marker === 4 || marker === 6;
  }
  function isAnimationProp(name) {
    return name.charCodeAt(0) === 64;
  }
  function mergeHostAttrs(dst, src) {
    if (src === null || src.length === 0) {
    } else if (dst === null || dst.length === 0) {
      dst = src.slice();
    } else {
      let srcMarker = -1;
      for (let i = 0; i < src.length; i++) {
        const item = src[i];
        if (typeof item === "number") {
          srcMarker = item;
        } else {
          if (srcMarker === 0) {
          } else if (srcMarker === -1 || srcMarker === 2) {
            mergeHostAttribute(dst, srcMarker, item, null, src[++i]);
          } else {
            mergeHostAttribute(dst, srcMarker, item, null, null);
          }
        }
      }
    }
    return dst;
  }
  function mergeHostAttribute(dst, marker, key1, key2, value) {
    let i = 0;
    let markerInsertPosition = dst.length;
    if (marker === -1) {
      markerInsertPosition = -1;
    } else {
      while (i < dst.length) {
        const dstValue = dst[i++];
        if (typeof dstValue === "number") {
          if (dstValue === marker) {
            markerInsertPosition = -1;
            break;
          } else if (dstValue > marker) {
            markerInsertPosition = i - 1;
            break;
          }
        }
      }
    }
    while (i < dst.length) {
      const item = dst[i];
      if (typeof item === "number") {
        break;
      } else if (item === key1) {
        if (key2 === null) {
          if (value !== null) {
            dst[i + 1] = value;
          }
          return;
        } else if (key2 === dst[i + 1]) {
          dst[i + 2] = value;
          return;
        }
      }
      i++;
      if (key2 !== null)
        i++;
      if (value !== null)
        i++;
    }
    if (markerInsertPosition !== -1) {
      dst.splice(markerInsertPosition, 0, marker);
      i = markerInsertPosition + 1;
    }
    dst.splice(i++, 0, key1);
    if (key2 !== null) {
      dst.splice(i++, 0, key2);
    }
    if (value !== null) {
      dst.splice(i++, 0, value);
    }
  }
  function isCssClassMatching(tNode, attrs, cssClassToMatch, isProjectionMode) {
    ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), "Class name expected to be lowercase.");
    let i = 0;
    if (isProjectionMode) {
      for (; i < attrs.length && typeof attrs[i] === "string"; i += 2) {
        if (attrs[i] === "class" && classIndexOf(attrs[i + 1].toLowerCase(), cssClassToMatch, 0) !== -1) {
          return true;
        }
      }
    } else if (isInlineTemplate(tNode)) {
      return false;
    }
    i = attrs.indexOf(1, i);
    if (i > -1) {
      let item;
      while (++i < attrs.length && typeof (item = attrs[i]) === "string") {
        if (item.toLowerCase() === cssClassToMatch) {
          return true;
        }
      }
    }
    return false;
  }
  function isInlineTemplate(tNode) {
    return tNode.type === 4 && tNode.value !== NG_TEMPLATE_SELECTOR;
  }
  function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {
    const tagNameToCompare = tNode.type === 4 && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;
    return currentSelector === tagNameToCompare;
  }
  function isNodeMatchingSelector(tNode, selector, isProjectionMode) {
    ngDevMode && assertDefined(selector[0], "Selector should have a tag name");
    let mode = 4;
    const nodeAttrs = tNode.attrs;
    const nameOnlyMarkerIdx = nodeAttrs !== null ? getNameOnlyMarkerIndex(nodeAttrs) : 0;
    let skipToNextSelector = false;
    for (let i = 0; i < selector.length; i++) {
      const current = selector[i];
      if (typeof current === "number") {
        if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {
          return false;
        }
        if (skipToNextSelector && isPositive(current))
          continue;
        skipToNextSelector = false;
        mode = current | mode & 1;
        continue;
      }
      if (skipToNextSelector)
        continue;
      if (mode & 4) {
        mode = 2 | mode & 1;
        if (current !== "" && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === "" && selector.length === 1) {
          if (isPositive(mode))
            return false;
          skipToNextSelector = true;
        }
      } else if (mode & 8) {
        if (nodeAttrs === null || !isCssClassMatching(tNode, nodeAttrs, current, isProjectionMode)) {
          if (isPositive(mode))
            return false;
          skipToNextSelector = true;
        }
      } else {
        const selectorAttrValue = selector[++i];
        const attrIndexInNode = findAttrIndexInNode(current, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);
        if (attrIndexInNode === -1) {
          if (isPositive(mode))
            return false;
          skipToNextSelector = true;
          continue;
        }
        if (selectorAttrValue !== "") {
          let nodeAttrValue;
          if (attrIndexInNode > nameOnlyMarkerIdx) {
            nodeAttrValue = "";
          } else {
            ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0, "We do not match directives on namespaced attributes");
            nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();
          }
          if (mode & 2 && selectorAttrValue !== nodeAttrValue) {
            if (isPositive(mode))
              return false;
            skipToNextSelector = true;
          }
        }
      }
    }
    return isPositive(mode) || skipToNextSelector;
  }
  function isPositive(mode) {
    return (mode & 1) === 0;
  }
  function findAttrIndexInNode(name, attrs, isInlineTemplate2, isProjectionMode) {
    if (attrs === null)
      return -1;
    let i = 0;
    if (isProjectionMode || !isInlineTemplate2) {
      let bindingsMode = false;
      while (i < attrs.length) {
        const maybeAttrName = attrs[i];
        if (maybeAttrName === name) {
          return i;
        } else if (maybeAttrName === 3 || maybeAttrName === 6) {
          bindingsMode = true;
        } else if (maybeAttrName === 1 || maybeAttrName === 2) {
          let value = attrs[++i];
          while (typeof value === "string") {
            value = attrs[++i];
          }
          continue;
        } else if (maybeAttrName === 4) {
          break;
        } else if (maybeAttrName === 0) {
          i += 4;
          continue;
        }
        i += bindingsMode ? 1 : 2;
      }
      return -1;
    } else {
      return matchTemplateAttribute(attrs, name);
    }
  }
  function isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {
    for (let i = 0; i < selector.length; i++) {
      if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {
        return true;
      }
    }
    return false;
  }
  function getProjectAsAttrValue(tNode) {
    const nodeAttrs = tNode.attrs;
    if (nodeAttrs != null) {
      const ngProjectAsAttrIdx = nodeAttrs.indexOf(
        5
        /* AttributeMarker.ProjectAs */
      );
      if ((ngProjectAsAttrIdx & 1) === 0) {
        return nodeAttrs[ngProjectAsAttrIdx + 1];
      }
    }
    return null;
  }
  function getNameOnlyMarkerIndex(nodeAttrs) {
    for (let i = 0; i < nodeAttrs.length; i++) {
      const nodeAttr = nodeAttrs[i];
      if (isNameOnlyAttributeMarker(nodeAttr)) {
        return i;
      }
    }
    return nodeAttrs.length;
  }
  function matchTemplateAttribute(attrs, name) {
    let i = attrs.indexOf(
      4
      /* AttributeMarker.Template */
    );
    if (i > -1) {
      i++;
      while (i < attrs.length) {
        const attr = attrs[i];
        if (typeof attr === "number")
          return -1;
        if (attr === name)
          return i;
        i++;
      }
    }
    return -1;
  }
  function isSelectorInSelectorList(selector, list) {
    selectorListLoop:
      for (let i = 0; i < list.length; i++) {
        const currentSelectorInList = list[i];
        if (selector.length !== currentSelectorInList.length) {
          continue;
        }
        for (let j = 0; j < selector.length; j++) {
          if (selector[j] !== currentSelectorInList[j]) {
            continue selectorListLoop;
          }
        }
        return true;
      }
    return false;
  }
  function maybeWrapInNotSelector(isNegativeMode, chunk) {
    return isNegativeMode ? ":not(" + chunk.trim() + ")" : chunk;
  }
  function stringifyCSSSelector(selector) {
    let result = selector[0];
    let i = 1;
    let mode = 2;
    let currentChunk = "";
    let isNegativeMode = false;
    while (i < selector.length) {
      let valueOrMarker = selector[i];
      if (typeof valueOrMarker === "string") {
        if (mode & 2) {
          const attrValue = selector[++i];
          currentChunk += "[" + valueOrMarker + (attrValue.length > 0 ? '="' + attrValue + '"' : "") + "]";
        } else if (mode & 8) {
          currentChunk += "." + valueOrMarker;
        } else if (mode & 4) {
          currentChunk += " " + valueOrMarker;
        }
      } else {
        if (currentChunk !== "" && !isPositive(valueOrMarker)) {
          result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
          currentChunk = "";
        }
        mode = valueOrMarker;
        isNegativeMode = isNegativeMode || !isPositive(mode);
      }
      i++;
    }
    if (currentChunk !== "") {
      result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
    }
    return result;
  }
  function stringifyCSSSelectorList(selectorList) {
    return selectorList.map(stringifyCSSSelector).join(",");
  }
  function extractAttrsAndClassesFromSelector(selector) {
    const attrs = [];
    const classes = [];
    let i = 1;
    let mode = 2;
    while (i < selector.length) {
      let valueOrMarker = selector[i];
      if (typeof valueOrMarker === "string") {
        if (mode === 2) {
          if (valueOrMarker !== "") {
            attrs.push(valueOrMarker, selector[++i]);
          }
        } else if (mode === 8) {
          classes.push(valueOrMarker);
        }
      } else {
        if (!isPositive(mode))
          break;
        mode = valueOrMarker;
      }
      i++;
    }
    return { attrs, classes };
  }
  function \u0275\u0275defineComponent(componentDefinition) {
    return noSideEffects(() => {
      (typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode();
      const baseDef = getNgDirectiveDef(componentDefinition);
      const def = {
        ...baseDef,
        decls: componentDefinition.decls,
        vars: componentDefinition.vars,
        template: componentDefinition.template,
        consts: componentDefinition.consts || null,
        ngContentSelectors: componentDefinition.ngContentSelectors,
        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,
        directiveDefs: null,
        // assigned in noSideEffects
        pipeDefs: null,
        // assigned in noSideEffects
        dependencies: baseDef.standalone && componentDefinition.dependencies || null,
        getStandaloneInjector: null,
        signals: componentDefinition.signals ?? false,
        data: componentDefinition.data || {},
        encapsulation: componentDefinition.encapsulation || ViewEncapsulation$1.Emulated,
        styles: componentDefinition.styles || EMPTY_ARRAY,
        _: null,
        schemas: componentDefinition.schemas || null,
        tView: null,
        id: ""
      };
      initFeatures(def);
      const dependencies = componentDefinition.dependencies;
      def.directiveDefs = extractDefListOrFactory(
        dependencies,
        /* pipeDef */
        false
      );
      def.pipeDefs = extractDefListOrFactory(
        dependencies,
        /* pipeDef */
        true
      );
      def.id = getComponentId(def);
      return def;
    });
  }
  function extractDirectiveDef(type) {
    return getComponentDef(type) || getDirectiveDef(type);
  }
  function nonNull(value) {
    return value !== null;
  }
  function \u0275\u0275defineNgModule(def) {
    return noSideEffects(() => {
      const res = {
        type: def.type,
        bootstrap: def.bootstrap || EMPTY_ARRAY,
        declarations: def.declarations || EMPTY_ARRAY,
        imports: def.imports || EMPTY_ARRAY,
        exports: def.exports || EMPTY_ARRAY,
        transitiveCompileScopes: null,
        schemas: def.schemas || null,
        id: def.id || null
      };
      return res;
    });
  }
  function parseAndConvertBindingsForDefinition(obj, declaredInputs) {
    if (obj == null)
      return EMPTY_OBJ;
    const newLookup = {};
    for (const minifiedKey in obj) {
      if (obj.hasOwnProperty(minifiedKey)) {
        const value = obj[minifiedKey];
        let publicName;
        let declaredName;
        let inputFlags = InputFlags.None;
        if (Array.isArray(value)) {
          inputFlags = value[0];
          publicName = value[1];
          declaredName = value[2] ?? publicName;
        } else {
          publicName = value;
          declaredName = value;
        }
        if (declaredInputs) {
          newLookup[publicName] = inputFlags !== InputFlags.None ? [minifiedKey, inputFlags] : minifiedKey;
          declaredInputs[publicName] = declaredName;
        } else {
          newLookup[publicName] = minifiedKey;
        }
      }
    }
    return newLookup;
  }
  function \u0275\u0275defineDirective(directiveDefinition) {
    return noSideEffects(() => {
      const def = getNgDirectiveDef(directiveDefinition);
      initFeatures(def);
      return def;
    });
  }
  function \u0275\u0275definePipe(pipeDef) {
    return {
      type: pipeDef.type,
      name: pipeDef.name,
      factory: null,
      pure: pipeDef.pure !== false,
      standalone: pipeDef.standalone === true,
      onDestroy: pipeDef.type.prototype.ngOnDestroy || null
    };
  }
  function getComponentDef(type) {
    return type[NG_COMP_DEF] || null;
  }
  function getDirectiveDef(type) {
    return type[NG_DIR_DEF] || null;
  }
  function getPipeDef$1(type) {
    return type[NG_PIPE_DEF] || null;
  }
  function isStandalone(type) {
    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);
    return def !== null ? def.standalone : false;
  }
  function getNgModuleDef(type, throwNotFound) {
    const ngModuleDef = type[NG_MOD_DEF] || null;
    if (!ngModuleDef && throwNotFound === true) {
      throw new Error(`Type ${stringify(type)} does not have '\u0275mod' property.`);
    }
    return ngModuleDef;
  }
  function getNgDirectiveDef(directiveDefinition) {
    const declaredInputs = {};
    return {
      type: directiveDefinition.type,
      providersResolver: null,
      factory: null,
      hostBindings: directiveDefinition.hostBindings || null,
      hostVars: directiveDefinition.hostVars || 0,
      hostAttrs: directiveDefinition.hostAttrs || null,
      contentQueries: directiveDefinition.contentQueries || null,
      declaredInputs,
      inputTransforms: null,
      inputConfig: directiveDefinition.inputs || EMPTY_OBJ,
      exportAs: directiveDefinition.exportAs || null,
      standalone: directiveDefinition.standalone === true,
      signals: directiveDefinition.signals === true,
      selectors: directiveDefinition.selectors || EMPTY_ARRAY,
      viewQuery: directiveDefinition.viewQuery || null,
      features: directiveDefinition.features || null,
      setInput: null,
      findHostDirectiveDefs: null,
      hostDirectives: null,
      inputs: parseAndConvertBindingsForDefinition(directiveDefinition.inputs, declaredInputs),
      outputs: parseAndConvertBindingsForDefinition(directiveDefinition.outputs),
      debugInfo: null
    };
  }
  function initFeatures(definition) {
    definition.features?.forEach((fn2) => fn2(definition));
  }
  function extractDefListOrFactory(dependencies, pipeDef) {
    if (!dependencies) {
      return null;
    }
    const defExtractor = pipeDef ? getPipeDef$1 : extractDirectiveDef;
    return () => (typeof dependencies === "function" ? dependencies() : dependencies).map((dep) => defExtractor(dep)).filter(nonNull);
  }
  function getComponentId(componentDef) {
    let hash = 0;
    const hashSelectors = [
      componentDef.selectors,
      componentDef.ngContentSelectors,
      componentDef.hostVars,
      componentDef.hostAttrs,
      componentDef.consts,
      componentDef.vars,
      componentDef.decls,
      componentDef.encapsulation,
      componentDef.standalone,
      componentDef.signals,
      componentDef.exportAs,
      JSON.stringify(componentDef.inputs),
      JSON.stringify(componentDef.outputs),
      // We cannot use 'componentDef.type.name' as the name of the symbol will change and will not
      // match in the server and browser bundles.
      Object.getOwnPropertyNames(componentDef.type.prototype),
      !!componentDef.contentQueries,
      !!componentDef.viewQuery
    ].join("|");
    for (const char of hashSelectors) {
      hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;
    }
    hash += 2147483647 + 1;
    const compId = "c" + hash;
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (GENERATED_COMP_IDS.has(compId)) {
        const previousCompDefType = GENERATED_COMP_IDS.get(compId);
        if (previousCompDefType !== componentDef.type) {
          console.warn(formatRuntimeError(-912, `Component ID generation collision detected. Components '${previousCompDefType.name}' and '${componentDef.type.name}' with selector '${stringifyCSSSelectorList(componentDef.selectors)}' generated the same component ID. To fix this, you can change the selector of one of those components or add an extra host attribute to force a different ID.`));
        }
      } else {
        GENERATED_COMP_IDS.set(compId, componentDef.type);
      }
    }
    return compId;
  }
  function makeEnvironmentProviders(providers) {
    return {
      \u0275providers: providers
    };
  }
  function importProvidersFrom(...sources) {
    return {
      \u0275providers: internalImportProvidersFrom(true, sources),
      \u0275fromNgModule: true
    };
  }
  function internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {
    const providersOut = [];
    const dedup = /* @__PURE__ */ new Set();
    let injectorTypesWithProviders;
    const collectProviders = (provider) => {
      providersOut.push(provider);
    };
    deepForEach(sources, (source) => {
      if ((typeof ngDevMode === "undefined" || ngDevMode) && checkForStandaloneCmp) {
        const cmpDef = getComponentDef(source);
        if (cmpDef?.standalone) {
          throw new RuntimeError(800, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component "${stringifyForError(source)}"`);
        }
      }
      const internalSource = source;
      if (walkProviderTree(internalSource, collectProviders, [], dedup)) {
        injectorTypesWithProviders ||= [];
        injectorTypesWithProviders.push(internalSource);
      }
    });
    if (injectorTypesWithProviders !== void 0) {
      processInjectorTypesWithProviders(injectorTypesWithProviders, collectProviders);
    }
    return providersOut;
  }
  function processInjectorTypesWithProviders(typesWithProviders, visitor) {
    for (let i = 0; i < typesWithProviders.length; i++) {
      const { ngModule, providers } = typesWithProviders[i];
      deepForEachProvider(providers, (provider) => {
        ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);
        visitor(provider, ngModule);
      });
    }
  }
  function walkProviderTree(container, visitor, parents, dedup) {
    container = resolveForwardRef(container);
    if (!container)
      return false;
    let defType = null;
    let injDef = getInjectorDef(container);
    const cmpDef = !injDef && getComponentDef(container);
    if (!injDef && !cmpDef) {
      const ngModule = container.ngModule;
      injDef = getInjectorDef(ngModule);
      if (injDef) {
        defType = ngModule;
      } else {
        return false;
      }
    } else if (cmpDef && !cmpDef.standalone) {
      return false;
    } else {
      defType = container;
    }
    if (ngDevMode && parents.indexOf(defType) !== -1) {
      const defName = stringify(defType);
      const path = parents.map(stringify);
      throwCyclicDependencyError(defName, path);
    }
    const isDuplicate = dedup.has(defType);
    if (cmpDef) {
      if (isDuplicate) {
        return false;
      }
      dedup.add(defType);
      if (cmpDef.dependencies) {
        const deps = typeof cmpDef.dependencies === "function" ? cmpDef.dependencies() : cmpDef.dependencies;
        for (const dep of deps) {
          walkProviderTree(dep, visitor, parents, dedup);
        }
      }
    } else if (injDef) {
      if (injDef.imports != null && !isDuplicate) {
        ngDevMode && parents.push(defType);
        dedup.add(defType);
        let importTypesWithProviders;
        try {
          deepForEach(injDef.imports, (imported) => {
            if (walkProviderTree(imported, visitor, parents, dedup)) {
              importTypesWithProviders ||= [];
              importTypesWithProviders.push(imported);
            }
          });
        } finally {
          ngDevMode && parents.pop();
        }
        if (importTypesWithProviders !== void 0) {
          processInjectorTypesWithProviders(importTypesWithProviders, visitor);
        }
      }
      if (!isDuplicate) {
        const factory = getFactoryDef(defType) || (() => new defType());
        visitor({ provide: defType, useFactory: factory, deps: EMPTY_ARRAY }, defType);
        visitor({ provide: INJECTOR_DEF_TYPES, useValue: defType, multi: true }, defType);
        visitor({ provide: ENVIRONMENT_INITIALIZER, useValue: () => \u0275\u0275inject(defType), multi: true }, defType);
      }
      const defProviders = injDef.providers;
      if (defProviders != null && !isDuplicate) {
        const injectorType = container;
        deepForEachProvider(defProviders, (provider) => {
          ngDevMode && validateProvider(provider, defProviders, injectorType);
          visitor(provider, injectorType);
        });
      }
    } else {
      return false;
    }
    return defType !== container && container.providers !== void 0;
  }
  function validateProvider(provider, providers, containerType) {
    if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) || isExistingProvider(provider)) {
      return;
    }
    const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));
    if (!classRef) {
      throwInvalidProviderError(containerType, providers, provider);
    }
  }
  function deepForEachProvider(providers, fn2) {
    for (let provider of providers) {
      if (isEnvironmentProviders(provider)) {
        provider = provider.\u0275providers;
      }
      if (Array.isArray(provider)) {
        deepForEachProvider(provider, fn2);
      } else {
        fn2(provider);
      }
    }
  }
  function isValueProvider(value) {
    return value !== null && typeof value == "object" && USE_VALUE$1 in value;
  }
  function isExistingProvider(value) {
    return !!(value && value.useExisting);
  }
  function isFactoryProvider(value) {
    return !!(value && value.useFactory);
  }
  function isTypeProvider(value) {
    return typeof value === "function";
  }
  function isClassProvider(value) {
    return !!value.useClass;
  }
  function getNullInjector() {
    if (NULL_INJECTOR === void 0) {
      NULL_INJECTOR = new NullInjector();
    }
    return NULL_INJECTOR;
  }
  function injectableDefOrInjectorDefFactory(token) {
    const injectableDef = getInjectableDef(token);
    const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);
    if (factory !== null) {
      return factory;
    }
    if (token instanceof InjectionToken) {
      throw new RuntimeError(204, ngDevMode && `Token ${stringify(token)} is missing a \u0275prov definition.`);
    }
    if (token instanceof Function) {
      return getUndecoratedInjectableFactory(token);
    }
    throw new RuntimeError(204, ngDevMode && "unreachable");
  }
  function getUndecoratedInjectableFactory(token) {
    const paramLength = token.length;
    if (paramLength > 0) {
      throw new RuntimeError(204, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${newArray(paramLength, "?").join(", ")}).`);
    }
    const inheritedInjectableDef = getInheritedInjectableDef(token);
    if (inheritedInjectableDef !== null) {
      return () => inheritedInjectableDef.factory(token);
    } else {
      return () => new token();
    }
  }
  function providerToRecord(provider) {
    if (isValueProvider(provider)) {
      return makeRecord(void 0, provider.useValue);
    } else {
      const factory = providerToFactory(provider);
      return makeRecord(factory, NOT_YET);
    }
  }
  function providerToFactory(provider, ngModuleType, providers) {
    let factory = void 0;
    if (ngDevMode && isEnvironmentProviders(provider)) {
      throwInvalidProviderError(void 0, providers, provider);
    }
    if (isTypeProvider(provider)) {
      const unwrappedProvider = resolveForwardRef(provider);
      return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);
    } else {
      if (isValueProvider(provider)) {
        factory = () => resolveForwardRef(provider.useValue);
      } else if (isFactoryProvider(provider)) {
        factory = () => provider.useFactory(...injectArgs(provider.deps || []));
      } else if (isExistingProvider(provider)) {
        factory = () => \u0275\u0275inject(resolveForwardRef(provider.useExisting));
      } else {
        const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));
        if (ngDevMode && !classRef) {
          throwInvalidProviderError(ngModuleType, providers, provider);
        }
        if (hasDeps(provider)) {
          factory = () => new classRef(...injectArgs(provider.deps));
        } else {
          return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);
        }
      }
    }
    return factory;
  }
  function makeRecord(factory, value, multi = false) {
    return {
      factory,
      value,
      multi: multi ? [] : void 0
    };
  }
  function hasDeps(value) {
    return !!value.deps;
  }
  function hasOnDestroy(value) {
    return value !== null && typeof value === "object" && typeof value.ngOnDestroy === "function";
  }
  function couldBeInjectableType(value) {
    return typeof value === "function" || typeof value === "object" && value instanceof InjectionToken;
  }
  function forEachSingleProvider(providers, fn2) {
    for (const provider of providers) {
      if (Array.isArray(provider)) {
        forEachSingleProvider(provider, fn2);
      } else if (provider && isEnvironmentProviders(provider)) {
        forEachSingleProvider(provider.\u0275providers, fn2);
      } else {
        fn2(provider);
      }
    }
  }
  function runInInjectionContext(injector, fn2) {
    if (injector instanceof R3Injector) {
      injector.assertNotDestroyed();
    }
    let prevInjectorProfilerContext;
    if (ngDevMode) {
      prevInjectorProfilerContext = setInjectorProfilerContext({ injector, token: null });
    }
    const prevInjector = setCurrentInjector(injector);
    const previousInjectImplementation = setInjectImplementation(void 0);
    try {
      return fn2();
    } finally {
      setCurrentInjector(prevInjector);
      ngDevMode && setInjectorProfilerContext(prevInjectorProfilerContext);
      setInjectImplementation(previousInjectImplementation);
    }
  }
  function isInInjectionContext() {
    return getInjectImplementation() !== void 0 || getCurrentInjector() != null;
  }
  function assertInInjectionContext(debugFn) {
    if (!isInInjectionContext()) {
      throw new RuntimeError(-203, ngDevMode && debugFn.name + "() can only be used within an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`");
    }
  }
  function getCompilerFacade(request) {
    const globalNg = _global["ng"];
    if (globalNg && globalNg.\u0275compilerFacade) {
      return globalNg.\u0275compilerFacade;
    }
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      console.error(`JIT compilation failed for ${request.kind}`, request.type);
      let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.

`;
      if (request.usage === 1) {
        message += `The ${request.kind} is part of a library that has been partially compiled.
`;
        message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.
`;
        message += "\n";
        message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.
`;
      } else {
        message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.
`;
      }
      message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',
`;
      message += `or manually provide the compiler with 'import "@angular/compiler";' before bootstrapping.`;
      throw new Error(message);
    } else {
      throw new Error("JIT compiler unavailable");
    }
  }
  function isType(v) {
    return typeof v === "function";
  }
  function isDelegateCtor(typeStr) {
    return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);
  }
  function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    if (!decoratorInvocations) {
      return [];
    }
    return decoratorInvocations.map((decoratorInvocation) => {
      const decoratorType = decoratorInvocation.type;
      const annotationCls = decoratorType.annotationCls;
      const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
      return new annotationCls(...annotationArgs);
    });
  }
  function getParentCtor(ctor) {
    const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
    const parentCtor = parentProto ? parentProto.constructor : null;
    return parentCtor || Object;
  }
  function isLView(value) {
    return Array.isArray(value) && typeof value[TYPE] === "object";
  }
  function isLContainer(value) {
    return Array.isArray(value) && value[TYPE] === true;
  }
  function isContentQueryHost(tNode) {
    return (tNode.flags & 4) !== 0;
  }
  function isComponentHost(tNode) {
    return tNode.componentOffset > -1;
  }
  function isDirectiveHost(tNode) {
    return (tNode.flags & 1) === 1;
  }
  function isComponentDef(def) {
    return !!def.template;
  }
  function isRootView(target) {
    return (target[FLAGS] & 512) !== 0;
  }
  function isProjectionTNode(tNode) {
    return (tNode.type & 16) === 16;
  }
  function hasI18n(lView) {
    return (lView[FLAGS] & 32) === 32;
  }
  function isDestroyed(lView) {
    return (lView[FLAGS] & 256) === 256;
  }
  function assertTNodeForLView(tNode, lView) {
    assertTNodeForTView(tNode, lView[TVIEW]);
  }
  function assertTNodeForTView(tNode, tView) {
    assertTNode(tNode);
    const tData = tView.data;
    for (let i = HEADER_OFFSET; i < tData.length; i++) {
      if (tData[i] === tNode) {
        return;
      }
    }
    throwError2("This TNode does not belong to this TView.");
  }
  function assertTNode(tNode) {
    assertDefined(tNode, "TNode must be defined");
    if (!(tNode && typeof tNode === "object" && tNode.hasOwnProperty("directiveStylingLast"))) {
      throwError2("Not of type TNode, got: " + tNode);
    }
  }
  function assertTIcu(tIcu) {
    assertDefined(tIcu, "Expected TIcu to be defined");
    if (!(typeof tIcu.currentCaseLViewIndex === "number")) {
      throwError2("Object is not of TIcu type.");
    }
  }
  function assertComponentType(actual, msg = "Type passed in is not ComponentType, it does not have '\u0275cmp' property.") {
    if (!getComponentDef(actual)) {
      throwError2(msg);
    }
  }
  function assertNgModuleType(actual, msg = "Type passed in is not NgModuleType, it does not have '\u0275mod' property.") {
    if (!getNgModuleDef(actual)) {
      throwError2(msg);
    }
  }
  function assertHasParent(tNode) {
    assertDefined(tNode, "currentTNode should exist!");
    assertDefined(tNode.parent, "currentTNode should have a parent");
  }
  function assertLContainer(value) {
    assertDefined(value, "LContainer must be defined");
    assertEqual(isLContainer(value), true, "Expecting LContainer");
  }
  function assertLViewOrUndefined(value) {
    value && assertEqual(isLView(value), true, "Expecting LView or undefined or null");
  }
  function assertLView(value) {
    assertDefined(value, "LView must be defined");
    assertEqual(isLView(value), true, "Expecting LView");
  }
  function assertFirstCreatePass(tView, errMessage) {
    assertEqual(tView.firstCreatePass, true, errMessage || "Should only be called in first create pass.");
  }
  function assertFirstUpdatePass(tView, errMessage) {
    assertEqual(tView.firstUpdatePass, true, errMessage || "Should only be called in first update pass.");
  }
  function assertDirectiveDef(obj) {
    if (obj.type === void 0 || obj.selectors == void 0 || obj.inputs === void 0) {
      throwError2(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);
    }
  }
  function assertIndexInDeclRange(tView, index) {
    assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);
  }
  function assertIndexInExpandoRange(lView, index) {
    const tView = lView[1];
    assertBetween(tView.expandoStartIndex, lView.length, index);
  }
  function assertBetween(lower, upper, index) {
    if (!(lower <= index && index < upper)) {
      throwError2(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);
    }
  }
  function assertProjectionSlots(lView, errMessage) {
    assertDefined(lView[DECLARATION_COMPONENT_VIEW], "Component views should exist.");
    assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage || "Components with projection nodes (<ng-content>) must have projection slots defined.");
  }
  function assertParentView(lView, errMessage) {
    assertDefined(lView, errMessage || "Component views should always have a parent view (component's host view)");
  }
  function assertNoDuplicateDirectives(directives) {
    if (directives.length < 2) {
      return;
    }
    const seenDirectives = /* @__PURE__ */ new Set();
    for (const current of directives) {
      if (seenDirectives.has(current)) {
        throw new RuntimeError(309, `Directive ${current.type.name} matches multiple times on the same element. Directives can only match an element once.`);
      }
      seenDirectives.add(current);
    }
  }
  function assertNodeInjector(lView, injectorIndex) {
    assertIndexInExpandoRange(lView, injectorIndex);
    assertIndexInExpandoRange(
      lView,
      injectorIndex + 8
      /* NodeInjectorOffset.PARENT */
    );
    assertNumber(lView[injectorIndex + 0], "injectorIndex should point to a bloom filter");
    assertNumber(lView[injectorIndex + 1], "injectorIndex should point to a bloom filter");
    assertNumber(lView[injectorIndex + 2], "injectorIndex should point to a bloom filter");
    assertNumber(lView[injectorIndex + 3], "injectorIndex should point to a bloom filter");
    assertNumber(lView[injectorIndex + 4], "injectorIndex should point to a bloom filter");
    assertNumber(lView[injectorIndex + 5], "injectorIndex should point to a bloom filter");
    assertNumber(lView[injectorIndex + 6], "injectorIndex should point to a bloom filter");
    assertNumber(lView[injectorIndex + 7], "injectorIndex should point to a bloom filter");
    assertNumber(lView[
      injectorIndex + 8
      /* NodeInjectorOffset.PARENT */
    ], "injectorIndex should point to parent injector");
  }
  function applyValueToInputField(instance, inputSignalNode, privateName, value) {
    if (inputSignalNode !== null) {
      inputSignalNode.applyValueToInputSignal(inputSignalNode, value);
    } else {
      instance[privateName] = value;
    }
  }
  function \u0275\u0275NgOnChangesFeature() {
    return NgOnChangesFeatureImpl;
  }
  function NgOnChangesFeatureImpl(definition) {
    if (definition.type.prototype.ngOnChanges) {
      definition.setInput = ngOnChangesSetInput;
    }
    return rememberChangeHistoryAndInvokeOnChangesHook;
  }
  function rememberChangeHistoryAndInvokeOnChangesHook() {
    const simpleChangesStore = getSimpleChangesStore(this);
    const current = simpleChangesStore?.current;
    if (current) {
      const previous = simpleChangesStore.previous;
      if (previous === EMPTY_OBJ) {
        simpleChangesStore.previous = current;
      } else {
        for (let key in current) {
          previous[key] = current[key];
        }
      }
      simpleChangesStore.current = null;
      this.ngOnChanges(current);
    }
  }
  function ngOnChangesSetInput(instance, inputSignalNode, value, publicName, privateName) {
    const declaredName = this.declaredInputs[publicName];
    ngDevMode && assertString(declaredName, "Name of input in ngOnChanges has to be a string");
    const simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });
    const current = simpleChangesStore.current || (simpleChangesStore.current = {});
    const previous = simpleChangesStore.previous;
    const previousChange = previous[declaredName];
    current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);
    applyValueToInputField(instance, inputSignalNode, privateName, value);
  }
  function getSimpleChangesStore(instance) {
    return instance[SIMPLE_CHANGES_STORE] || null;
  }
  function setSimpleChangesStore(instance, store2) {
    return instance[SIMPLE_CHANGES_STORE] = store2;
  }
  function getEnsureDirtyViewsAreAlwaysReachable() {
    return _ensureDirtyViewsAreAlwaysReachable;
  }
  function setEnsureDirtyViewsAreAlwaysReachable(v) {
    _ensureDirtyViewsAreAlwaysReachable = v;
  }
  function unwrapRNode(value) {
    while (Array.isArray(value)) {
      value = value[HOST];
    }
    return value;
  }
  function unwrapLView(value) {
    while (Array.isArray(value)) {
      if (typeof value[TYPE] === "object")
        return value;
      value = value[HOST];
    }
    return null;
  }
  function getNativeByIndex(index, lView) {
    ngDevMode && assertIndexInRange(lView, index);
    ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, "Expected to be past HEADER_OFFSET");
    return unwrapRNode(lView[index]);
  }
  function getNativeByTNode(tNode, lView) {
    ngDevMode && assertTNodeForLView(tNode, lView);
    ngDevMode && assertIndexInRange(lView, tNode.index);
    const node = unwrapRNode(lView[tNode.index]);
    return node;
  }
  function getNativeByTNodeOrNull(tNode, lView) {
    const index = tNode === null ? -1 : tNode.index;
    if (index !== -1) {
      ngDevMode && assertTNodeForLView(tNode, lView);
      const node = unwrapRNode(lView[index]);
      return node;
    }
    return null;
  }
  function getTNode(tView, index) {
    ngDevMode && assertGreaterThan(index, -1, "wrong index for TNode");
    ngDevMode && assertLessThan(index, tView.data.length, "wrong index for TNode");
    const tNode = tView.data[index];
    ngDevMode && tNode !== null && assertTNode(tNode);
    return tNode;
  }
  function load(view, index) {
    ngDevMode && assertIndexInRange(view, index);
    return view[index];
  }
  function getComponentLViewByIndex(nodeIndex, hostView) {
    ngDevMode && assertIndexInRange(hostView, nodeIndex);
    const slotValue = hostView[nodeIndex];
    const lView = isLView(slotValue) ? slotValue : slotValue[HOST];
    return lView;
  }
  function isCreationMode(view) {
    return (view[FLAGS] & 4) === 4;
  }
  function viewAttachedToChangeDetector(view) {
    return (view[FLAGS] & 128) === 128;
  }
  function viewAttachedToContainer(view) {
    return isLContainer(view[PARENT]);
  }
  function getConstant(consts, index) {
    if (index === null || index === void 0)
      return null;
    ngDevMode && assertIndexInRange(consts, index);
    return consts[index];
  }
  function resetPreOrderHookFlags(lView) {
    lView[PREORDER_HOOK_FLAGS] = 0;
  }
  function markViewForRefresh(lView) {
    if (lView[FLAGS] & 1024) {
      return;
    }
    lView[FLAGS] |= 1024;
    if (viewAttachedToChangeDetector(lView)) {
      markAncestorsForTraversal(lView);
    }
  }
  function walkUpViews(nestingLevel, currentView) {
    while (nestingLevel > 0) {
      ngDevMode && assertDefined(currentView[DECLARATION_VIEW], "Declaration view should be defined if nesting level is greater than 0.");
      currentView = currentView[DECLARATION_VIEW];
      nestingLevel--;
    }
    return currentView;
  }
  function requiresRefreshOrTraversal(lView) {
    return !!(lView[FLAGS] & (1024 | 8192) || lView[REACTIVE_TEMPLATE_CONSUMER]?.dirty);
  }
  function updateAncestorTraversalFlagsOnAttach(lView) {
    lView[ENVIRONMENT].changeDetectionScheduler?.notify(
      1
      /* NotificationType.AfterRenderHooks */
    );
    if (requiresRefreshOrTraversal(lView)) {
      markAncestorsForTraversal(lView);
    } else if (lView[FLAGS] & 64) {
      if (getEnsureDirtyViewsAreAlwaysReachable()) {
        lView[FLAGS] |= 1024;
        markAncestorsForTraversal(lView);
      } else {
        lView[ENVIRONMENT].changeDetectionScheduler?.notify();
      }
    }
  }
  function markAncestorsForTraversal(lView) {
    lView[ENVIRONMENT].changeDetectionScheduler?.notify();
    let parent = getLViewParent(lView);
    while (parent !== null) {
      if (parent[FLAGS] & 8192) {
        break;
      }
      parent[FLAGS] |= 8192;
      if (!viewAttachedToChangeDetector(parent)) {
        break;
      }
      parent = getLViewParent(parent);
    }
  }
  function storeLViewOnDestroy(lView, onDestroyCallback) {
    if ((lView[FLAGS] & 256) === 256) {
      throw new RuntimeError(911, ngDevMode && "View has already been destroyed.");
    }
    if (lView[ON_DESTROY_HOOKS] === null) {
      lView[ON_DESTROY_HOOKS] = [];
    }
    lView[ON_DESTROY_HOOKS].push(onDestroyCallback);
  }
  function removeLViewOnDestroy(lView, onDestroyCallback) {
    if (lView[ON_DESTROY_HOOKS] === null)
      return;
    const destroyCBIdx = lView[ON_DESTROY_HOOKS].indexOf(onDestroyCallback);
    if (destroyCBIdx !== -1) {
      lView[ON_DESTROY_HOOKS].splice(destroyCBIdx, 1);
    }
  }
  function getLViewParent(lView) {
    ngDevMode && assertLView(lView);
    const parent = lView[PARENT];
    return isLContainer(parent) ? parent[PARENT] : parent;
  }
  function getElementDepthCount() {
    return instructionState.lFrame.elementDepthCount;
  }
  function increaseElementDepthCount() {
    instructionState.lFrame.elementDepthCount++;
  }
  function decreaseElementDepthCount() {
    instructionState.lFrame.elementDepthCount--;
  }
  function getBindingsEnabled() {
    return instructionState.bindingsEnabled;
  }
  function isInSkipHydrationBlock$1() {
    return instructionState.skipHydrationRootTNode !== null;
  }
  function isSkipHydrationRootTNode(tNode) {
    return instructionState.skipHydrationRootTNode === tNode;
  }
  function \u0275\u0275enableBindings() {
    instructionState.bindingsEnabled = true;
  }
  function enterSkipHydrationBlock(tNode) {
    instructionState.skipHydrationRootTNode = tNode;
  }
  function \u0275\u0275disableBindings() {
    instructionState.bindingsEnabled = false;
  }
  function leaveSkipHydrationBlock() {
    instructionState.skipHydrationRootTNode = null;
  }
  function getLView() {
    return instructionState.lFrame.lView;
  }
  function getTView() {
    return instructionState.lFrame.tView;
  }
  function \u0275\u0275restoreView(viewToRestore) {
    instructionState.lFrame.contextLView = viewToRestore;
    return viewToRestore[CONTEXT];
  }
  function \u0275\u0275resetView(value) {
    instructionState.lFrame.contextLView = null;
    return value;
  }
  function getCurrentTNode() {
    let currentTNode = getCurrentTNodePlaceholderOk();
    while (currentTNode !== null && currentTNode.type === 64) {
      currentTNode = currentTNode.parent;
    }
    return currentTNode;
  }
  function getCurrentTNodePlaceholderOk() {
    return instructionState.lFrame.currentTNode;
  }
  function getCurrentParentTNode() {
    const lFrame = instructionState.lFrame;
    const currentTNode = lFrame.currentTNode;
    return lFrame.isParent ? currentTNode : currentTNode.parent;
  }
  function setCurrentTNode(tNode, isParent) {
    ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);
    const lFrame = instructionState.lFrame;
    lFrame.currentTNode = tNode;
    lFrame.isParent = isParent;
  }
  function isCurrentTNodeParent() {
    return instructionState.lFrame.isParent;
  }
  function setCurrentTNodeAsNotParent() {
    instructionState.lFrame.isParent = false;
  }
  function getContextLView() {
    const contextLView = instructionState.lFrame.contextLView;
    ngDevMode && assertDefined(contextLView, "contextLView must be defined.");
    return contextLView;
  }
  function isInCheckNoChangesMode() {
    !ngDevMode && throwError2("Must never be called in production mode");
    return _isInCheckNoChangesMode;
  }
  function setIsInCheckNoChangesMode(mode) {
    !ngDevMode && throwError2("Must never be called in production mode");
    _isInCheckNoChangesMode = mode;
  }
  function getBindingRoot() {
    const lFrame = instructionState.lFrame;
    let index = lFrame.bindingRootIndex;
    if (index === -1) {
      index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;
    }
    return index;
  }
  function getBindingIndex() {
    return instructionState.lFrame.bindingIndex;
  }
  function setBindingIndex(value) {
    return instructionState.lFrame.bindingIndex = value;
  }
  function nextBindingIndex() {
    return instructionState.lFrame.bindingIndex++;
  }
  function incrementBindingIndex(count) {
    const lFrame = instructionState.lFrame;
    const index = lFrame.bindingIndex;
    lFrame.bindingIndex = lFrame.bindingIndex + count;
    return index;
  }
  function isInI18nBlock() {
    return instructionState.lFrame.inI18n;
  }
  function setInI18nBlock(isInI18nBlock2) {
    instructionState.lFrame.inI18n = isInI18nBlock2;
  }
  function setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {
    const lFrame = instructionState.lFrame;
    lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;
    setCurrentDirectiveIndex(currentDirectiveIndex);
  }
  function getCurrentDirectiveIndex() {
    return instructionState.lFrame.currentDirectiveIndex;
  }
  function setCurrentDirectiveIndex(currentDirectiveIndex) {
    instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;
  }
  function getCurrentDirectiveDef(tData) {
    const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;
    return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];
  }
  function getCurrentQueryIndex() {
    return instructionState.lFrame.currentQueryIndex;
  }
  function setCurrentQueryIndex(value) {
    instructionState.lFrame.currentQueryIndex = value;
  }
  function getDeclarationTNode(lView) {
    const tView = lView[TVIEW];
    if (tView.type === 2) {
      ngDevMode && assertDefined(tView.declTNode, "Embedded TNodes should have declaration parents.");
      return tView.declTNode;
    }
    if (tView.type === 1) {
      return lView[T_HOST];
    }
    return null;
  }
  function enterDI(lView, tNode, flags) {
    ngDevMode && assertLViewOrUndefined(lView);
    if (flags & InjectFlags.SkipSelf) {
      ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);
      let parentTNode = tNode;
      let parentLView = lView;
      while (true) {
        ngDevMode && assertDefined(parentTNode, "Parent TNode should be defined");
        parentTNode = parentTNode.parent;
        if (parentTNode === null && !(flags & InjectFlags.Host)) {
          parentTNode = getDeclarationTNode(parentLView);
          if (parentTNode === null)
            break;
          ngDevMode && assertDefined(parentLView, "Parent LView should be defined");
          parentLView = parentLView[DECLARATION_VIEW];
          if (parentTNode.type & (2 | 8)) {
            break;
          }
        } else {
          break;
        }
      }
      if (parentTNode === null) {
        return false;
      } else {
        tNode = parentTNode;
        lView = parentLView;
      }
    }
    ngDevMode && assertTNodeForLView(tNode, lView);
    const lFrame = instructionState.lFrame = allocLFrame();
    lFrame.currentTNode = tNode;
    lFrame.lView = lView;
    return true;
  }
  function enterView(newView) {
    ngDevMode && assertNotEqual(newView[0], newView[1], "????");
    ngDevMode && assertLViewOrUndefined(newView);
    const newLFrame = allocLFrame();
    if (ngDevMode) {
      assertEqual(newLFrame.isParent, true, "Expected clean LFrame");
      assertEqual(newLFrame.lView, null, "Expected clean LFrame");
      assertEqual(newLFrame.tView, null, "Expected clean LFrame");
      assertEqual(newLFrame.selectedIndex, -1, "Expected clean LFrame");
      assertEqual(newLFrame.elementDepthCount, 0, "Expected clean LFrame");
      assertEqual(newLFrame.currentDirectiveIndex, -1, "Expected clean LFrame");
      assertEqual(newLFrame.currentNamespace, null, "Expected clean LFrame");
      assertEqual(newLFrame.bindingRootIndex, -1, "Expected clean LFrame");
      assertEqual(newLFrame.currentQueryIndex, 0, "Expected clean LFrame");
    }
    const tView = newView[TVIEW];
    instructionState.lFrame = newLFrame;
    ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);
    newLFrame.currentTNode = tView.firstChild;
    newLFrame.lView = newView;
    newLFrame.tView = tView;
    newLFrame.contextLView = newView;
    newLFrame.bindingIndex = tView.bindingStartIndex;
    newLFrame.inI18n = false;
  }
  function allocLFrame() {
    const currentLFrame = instructionState.lFrame;
    const childLFrame = currentLFrame === null ? null : currentLFrame.child;
    const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;
    return newLFrame;
  }
  function createLFrame(parent) {
    const lFrame = {
      currentTNode: null,
      isParent: true,
      lView: null,
      tView: null,
      selectedIndex: -1,
      contextLView: null,
      elementDepthCount: 0,
      currentNamespace: null,
      currentDirectiveIndex: -1,
      bindingRootIndex: -1,
      bindingIndex: -1,
      currentQueryIndex: 0,
      parent,
      child: null,
      inI18n: false
    };
    parent !== null && (parent.child = lFrame);
    return lFrame;
  }
  function leaveViewLight() {
    const oldLFrame = instructionState.lFrame;
    instructionState.lFrame = oldLFrame.parent;
    oldLFrame.currentTNode = null;
    oldLFrame.lView = null;
    return oldLFrame;
  }
  function leaveView() {
    const oldLFrame = leaveViewLight();
    oldLFrame.isParent = true;
    oldLFrame.tView = null;
    oldLFrame.selectedIndex = -1;
    oldLFrame.contextLView = null;
    oldLFrame.elementDepthCount = 0;
    oldLFrame.currentDirectiveIndex = -1;
    oldLFrame.currentNamespace = null;
    oldLFrame.bindingRootIndex = -1;
    oldLFrame.bindingIndex = -1;
    oldLFrame.currentQueryIndex = 0;
  }
  function nextContextImpl(level) {
    const contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);
    return contextLView[CONTEXT];
  }
  function getSelectedIndex() {
    return instructionState.lFrame.selectedIndex;
  }
  function setSelectedIndex(index) {
    ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, "Index must be past HEADER_OFFSET (or -1).");
    ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, "Can't set index passed end of LView");
    instructionState.lFrame.selectedIndex = index;
  }
  function getSelectedTNode() {
    const lFrame = instructionState.lFrame;
    return getTNode(lFrame.tView, lFrame.selectedIndex);
  }
  function \u0275\u0275namespaceSVG() {
    instructionState.lFrame.currentNamespace = SVG_NAMESPACE;
  }
  function \u0275\u0275namespaceMathML() {
    instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;
  }
  function \u0275\u0275namespaceHTML() {
    namespaceHTMLInternal();
  }
  function namespaceHTMLInternal() {
    instructionState.lFrame.currentNamespace = null;
  }
  function getNamespace$1() {
    return instructionState.lFrame.currentNamespace;
  }
  function wasLastNodeCreated() {
    return _wasLastNodeCreated;
  }
  function lastNodeWasCreated(flag) {
    _wasLastNodeCreated = flag;
  }
  function registerPreOrderHooks(directiveIndex, directiveDef, tView) {
    ngDevMode && assertFirstCreatePass(tView);
    const { ngOnChanges, ngOnInit, ngDoCheck } = directiveDef.type.prototype;
    if (ngOnChanges) {
      const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);
      (tView.preOrderHooks ??= []).push(directiveIndex, wrappedOnChanges);
      (tView.preOrderCheckHooks ??= []).push(directiveIndex, wrappedOnChanges);
    }
    if (ngOnInit) {
      (tView.preOrderHooks ??= []).push(0 - directiveIndex, ngOnInit);
    }
    if (ngDoCheck) {
      (tView.preOrderHooks ??= []).push(directiveIndex, ngDoCheck);
      (tView.preOrderCheckHooks ??= []).push(directiveIndex, ngDoCheck);
    }
  }
  function registerPostOrderHooks(tView, tNode) {
    ngDevMode && assertFirstCreatePass(tView);
    for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {
      const directiveDef = tView.data[i];
      ngDevMode && assertDefined(directiveDef, "Expecting DirectiveDef");
      const lifecycleHooks = directiveDef.type.prototype;
      const { ngAfterContentInit, ngAfterContentChecked, ngAfterViewInit, ngAfterViewChecked, ngOnDestroy } = lifecycleHooks;
      if (ngAfterContentInit) {
        (tView.contentHooks ??= []).push(-i, ngAfterContentInit);
      }
      if (ngAfterContentChecked) {
        (tView.contentHooks ??= []).push(i, ngAfterContentChecked);
        (tView.contentCheckHooks ??= []).push(i, ngAfterContentChecked);
      }
      if (ngAfterViewInit) {
        (tView.viewHooks ??= []).push(-i, ngAfterViewInit);
      }
      if (ngAfterViewChecked) {
        (tView.viewHooks ??= []).push(i, ngAfterViewChecked);
        (tView.viewCheckHooks ??= []).push(i, ngAfterViewChecked);
      }
      if (ngOnDestroy != null) {
        (tView.destroyHooks ??= []).push(i, ngOnDestroy);
      }
    }
  }
  function executeCheckHooks(lView, hooks, nodeIndex) {
    callHooks(lView, hooks, 3, nodeIndex);
  }
  function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {
    ngDevMode && assertNotEqual(initPhase, 3, "Init pre-order hooks should not be called more than once");
    if ((lView[FLAGS] & 3) === initPhase) {
      callHooks(lView, hooks, initPhase, nodeIndex);
    }
  }
  function incrementInitPhaseFlags(lView, initPhase) {
    ngDevMode && assertNotEqual(initPhase, 3, "Init hooks phase should not be incremented after all init hooks have been run.");
    let flags = lView[FLAGS];
    if ((flags & 3) === initPhase) {
      flags &= 16383;
      flags += 1;
      lView[FLAGS] = flags;
    }
  }
  function callHooks(currentView, arr, initPhase, currentNodeIndex) {
    ngDevMode && assertEqual(isInCheckNoChangesMode(), false, "Hooks should never be run when in check no changes mode.");
    const startIndex = currentNodeIndex !== void 0 ? currentView[PREORDER_HOOK_FLAGS] & 65535 : 0;
    const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;
    const max = arr.length - 1;
    let lastNodeIndexFound = 0;
    for (let i = startIndex; i < max; i++) {
      const hook = arr[i + 1];
      if (typeof hook === "number") {
        lastNodeIndexFound = arr[i];
        if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {
          break;
        }
      } else {
        const isInitHook = arr[i] < 0;
        if (isInitHook) {
          currentView[PREORDER_HOOK_FLAGS] += 65536;
        }
        if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {
          callHook(currentView, initPhase, arr, i);
          currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760) + i + 2;
        }
        i++;
      }
    }
  }
  function callHookInternal(directive, hook) {
    profiler(4, directive, hook);
    const prevConsumer = setActiveConsumer(null);
    try {
      hook.call(directive);
    } finally {
      setActiveConsumer(prevConsumer);
      profiler(5, directive, hook);
    }
  }
  function callHook(currentView, initPhase, arr, i) {
    const isInitHook = arr[i] < 0;
    const hook = arr[i + 1];
    const directiveIndex = isInitHook ? -arr[i] : arr[i];
    const directive = currentView[directiveIndex];
    if (isInitHook) {
      const indexWithintInitPhase = currentView[FLAGS] >> 14;
      if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16 && (currentView[FLAGS] & 3) === initPhase) {
        currentView[FLAGS] += 16384;
        callHookInternal(directive, hook);
      }
    } else {
      callHookInternal(directive, hook);
    }
  }
  function isFactory(obj) {
    return obj instanceof NodeInjectorFactory;
  }
  function toTNodeTypeAsString(tNodeType) {
    let text2 = "";
    tNodeType & 1 && (text2 += "|Text");
    tNodeType & 2 && (text2 += "|Element");
    tNodeType & 4 && (text2 += "|Container");
    tNodeType & 8 && (text2 += "|ElementContainer");
    tNodeType & 16 && (text2 += "|Projection");
    tNodeType & 32 && (text2 += "|IcuContainer");
    tNodeType & 64 && (text2 += "|Placeholder");
    return text2.length > 0 ? text2.substring(1) : text2;
  }
  function isTNodeShape(value) {
    return value != null && typeof value === "object" && (value.insertBeforeIndex === null || typeof value.insertBeforeIndex === "number" || Array.isArray(value.insertBeforeIndex));
  }
  function hasClassInput(tNode) {
    return (tNode.flags & 8) !== 0;
  }
  function hasStyleInput(tNode) {
    return (tNode.flags & 16) !== 0;
  }
  function assertTNodeType(tNode, expectedTypes, message) {
    assertDefined(tNode, "should be called with a TNode");
    if ((tNode.type & expectedTypes) === 0) {
      throwError2(message || `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);
    }
  }
  function assertPureTNodeType(type) {
    if (!(type === 2 || //
    type === 1 || //
    type === 4 || //
    type === 8 || //
    type === 32 || //
    type === 16 || //
    type === 64)) {
      throwError2(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);
    }
  }
  function hasParentInjector(parentLocation) {
    return parentLocation !== NO_PARENT_INJECTOR;
  }
  function getParentInjectorIndex(parentLocation) {
    if (ngDevMode) {
      assertNumber(parentLocation, "Number expected");
      assertNotEqual(parentLocation, -1, "Not a valid state.");
      const parentInjectorIndex = parentLocation & 32767;
      assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, "Parent injector must be pointing past HEADER_OFFSET.");
    }
    return parentLocation & 32767;
  }
  function getParentInjectorViewOffset(parentLocation) {
    return parentLocation >> 16;
  }
  function getParentInjectorView(location2, startView) {
    let viewOffset = getParentInjectorViewOffset(location2);
    let parentView = startView;
    while (viewOffset > 0) {
      parentView = parentView[DECLARATION_VIEW];
      viewOffset--;
    }
    return parentView;
  }
  function setIncludeViewProviders(v) {
    const oldValue = includeViewProviders;
    includeViewProviders = v;
    return oldValue;
  }
  function bloomAdd(injectorIndex, tView, type) {
    ngDevMode && assertEqual(tView.firstCreatePass, true, "expected firstCreatePass to be true");
    let id;
    if (typeof type === "string") {
      id = type.charCodeAt(0) || 0;
    } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {
      id = type[NG_ELEMENT_ID];
    }
    if (id == null) {
      id = type[NG_ELEMENT_ID] = nextNgElementId++;
    }
    const bloomHash = id & BLOOM_MASK;
    const mask = 1 << bloomHash;
    tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;
  }
  function getOrCreateNodeInjectorForNode(tNode, lView) {
    const existingInjectorIndex = getInjectorIndex(tNode, lView);
    if (existingInjectorIndex !== -1) {
      return existingInjectorIndex;
    }
    const tView = lView[TVIEW];
    if (tView.firstCreatePass) {
      tNode.injectorIndex = lView.length;
      insertBloom(tView.data, tNode);
      insertBloom(lView, null);
      insertBloom(tView.blueprint, null);
    }
    const parentLoc = getParentInjectorLocation(tNode, lView);
    const injectorIndex = tNode.injectorIndex;
    if (hasParentInjector(parentLoc)) {
      const parentIndex = getParentInjectorIndex(parentLoc);
      const parentLView = getParentInjectorView(parentLoc, lView);
      const parentData = parentLView[TVIEW].data;
      for (let i = 0; i < 8; i++) {
        lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];
      }
    }
    lView[
      injectorIndex + 8
      /* NodeInjectorOffset.PARENT */
    ] = parentLoc;
    return injectorIndex;
  }
  function insertBloom(arr, footer) {
    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);
  }
  function getInjectorIndex(tNode, lView) {
    if (tNode.injectorIndex === -1 || // If the injector index is the same as its parent's injector index, then the index has been
    // copied down from the parent node. No injector has been created yet on this node.
    tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex || // After the first template pass, the injector index might exist but the parent values
    // might not have been calculated yet for this instance
    lView[
      tNode.injectorIndex + 8
      /* NodeInjectorOffset.PARENT */
    ] === null) {
      return -1;
    } else {
      ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);
      return tNode.injectorIndex;
    }
  }
  function getParentInjectorLocation(tNode, lView) {
    if (tNode.parent && tNode.parent.injectorIndex !== -1) {
      return tNode.parent.injectorIndex;
    }
    let declarationViewOffset = 0;
    let parentTNode = null;
    let lViewCursor = lView;
    while (lViewCursor !== null) {
      parentTNode = getTNodeFromLView(lViewCursor);
      if (parentTNode === null) {
        return NO_PARENT_INJECTOR;
      }
      ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);
      declarationViewOffset++;
      lViewCursor = lViewCursor[DECLARATION_VIEW];
      if (parentTNode.injectorIndex !== -1) {
        return parentTNode.injectorIndex | declarationViewOffset << 16;
      }
    }
    return NO_PARENT_INJECTOR;
  }
  function diPublicInInjector(injectorIndex, tView, token) {
    bloomAdd(injectorIndex, tView, token);
  }
  function injectAttributeImpl(tNode, attrNameToInject) {
    ngDevMode && assertTNodeType(
      tNode,
      12 | 3
      /* TNodeType.AnyRNode */
    );
    ngDevMode && assertDefined(tNode, "expecting tNode");
    if (attrNameToInject === "class") {
      return tNode.classes;
    }
    if (attrNameToInject === "style") {
      return tNode.styles;
    }
    const attrs = tNode.attrs;
    if (attrs) {
      const attrsLength = attrs.length;
      let i = 0;
      while (i < attrsLength) {
        const value = attrs[i];
        if (isNameOnlyAttributeMarker(value))
          break;
        if (value === 0) {
          i = i + 2;
        } else if (typeof value === "number") {
          i++;
          while (i < attrsLength && typeof attrs[i] === "string") {
            i++;
          }
        } else if (value === attrNameToInject) {
          return attrs[i + 1];
        } else {
          i = i + 2;
        }
      }
    }
    return null;
  }
  function notFoundValueOrThrow(notFoundValue, token, flags) {
    if (flags & InjectFlags.Optional || notFoundValue !== void 0) {
      return notFoundValue;
    } else {
      throwProviderNotFoundError(token, "NodeInjector");
    }
  }
  function lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {
    if (flags & InjectFlags.Optional && notFoundValue === void 0) {
      notFoundValue = null;
    }
    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {
      const moduleInjector = lView[INJECTOR];
      const previousInjectImplementation = setInjectImplementation(void 0);
      try {
        if (moduleInjector) {
          return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);
        } else {
          return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);
        }
      } finally {
        setInjectImplementation(previousInjectImplementation);
      }
    }
    return notFoundValueOrThrow(notFoundValue, token, flags);
  }
  function getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {
    if (tNode !== null) {
      if (lView[FLAGS] & 2048 && // The token must be present on the current node injector when the `Self`
      // flag is set, so the lookup on embedded view injector(s) can be skipped.
      !(flags & InjectFlags.Self)) {
        const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);
        if (embeddedInjectorValue !== NOT_FOUND) {
          return embeddedInjectorValue;
        }
      }
      const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);
      if (value !== NOT_FOUND) {
        return value;
      }
    }
    return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
  }
  function lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {
    const bloomHash = bloomHashBitOrFactory(token);
    if (typeof bloomHash === "function") {
      if (!enterDI(lView, tNode, flags)) {
        return flags & InjectFlags.Host ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
      }
      try {
        let value;
        if (ngDevMode) {
          runInInjectorProfilerContext(new NodeInjector(getCurrentTNode(), getLView()), token, () => {
            value = bloomHash(flags);
            if (value != null) {
              emitInstanceCreatedByInjectorEvent(value);
            }
          });
        } else {
          value = bloomHash(flags);
        }
        if (value == null && !(flags & InjectFlags.Optional)) {
          throwProviderNotFoundError(token);
        } else {
          return value;
        }
      } finally {
        leaveDI();
      }
    } else if (typeof bloomHash === "number") {
      let previousTView = null;
      let injectorIndex = getInjectorIndex(tNode, lView);
      let parentLocation = NO_PARENT_INJECTOR;
      let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;
      if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {
        parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[
          injectorIndex + 8
          /* NodeInjectorOffset.PARENT */
        ];
        if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {
          injectorIndex = -1;
        } else {
          previousTView = lView[TVIEW];
          injectorIndex = getParentInjectorIndex(parentLocation);
          lView = getParentInjectorView(parentLocation, lView);
        }
      }
      while (injectorIndex !== -1) {
        ngDevMode && assertNodeInjector(lView, injectorIndex);
        const tView = lView[TVIEW];
        ngDevMode && assertTNodeForLView(tView.data[
          injectorIndex + 8
          /* NodeInjectorOffset.TNODE */
        ], lView);
        if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {
          const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);
          if (instance !== NOT_FOUND) {
            return instance;
          }
        }
        parentLocation = lView[
          injectorIndex + 8
          /* NodeInjectorOffset.PARENT */
        ];
        if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[
          injectorIndex + 8
          /* NodeInjectorOffset.TNODE */
        ] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {
          previousTView = tView;
          injectorIndex = getParentInjectorIndex(parentLocation);
          lView = getParentInjectorView(parentLocation, lView);
        } else {
          injectorIndex = -1;
        }
      }
    }
    return notFoundValue;
  }
  function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {
    const currentTView = lView[TVIEW];
    const tNode = currentTView.data[
      injectorIndex + 8
      /* NodeInjectorOffset.TNODE */
    ];
    const canAccessViewProviders = previousTView == null ? (
      // 1) This is the first invocation `previousTView == null` which means that we are at the
      // `TNode` of where injector is starting to look. In such a case the only time we are allowed
      // to look into the ViewProviders is if:
      // - we are on a component
      // - AND the injector set `includeViewProviders` to true (implying that the token can see
      // ViewProviders because it is the Component or a Service which itself was declared in
      // ViewProviders)
      isComponentHost(tNode) && includeViewProviders
    ) : (
      // 2) `previousTView != null` which means that we are now walking across the parent nodes.
      // In such a case we are only allowed to look into the ViewProviders if:
      // - We just crossed from child View to Parent View `previousTView != currentTView`
      // - AND the parent TNode is an Element.
      // This means that we just came from the Component's View and therefore are allowed to see
      // into the ViewProviders.
      previousTView != currentTView && (tNode.type & 3) !== 0
    );
    const isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;
    const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);
    if (injectableIdx !== null) {
      return getNodeInjectable(lView, currentTView, injectableIdx, tNode);
    } else {
      return NOT_FOUND;
    }
  }
  function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {
    const nodeProviderIndexes = tNode.providerIndexes;
    const tInjectables = tView.data;
    const injectablesStart = nodeProviderIndexes & 1048575;
    const directivesStart = tNode.directiveStart;
    const directiveEnd = tNode.directiveEnd;
    const cptViewProvidersCount = nodeProviderIndexes >> 20;
    const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;
    const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;
    for (let i = startingIndex; i < endIndex; i++) {
      const providerTokenOrDef = tInjectables[i];
      if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {
        return i;
      }
    }
    if (isHostSpecialCase) {
      const dirDef = tInjectables[directivesStart];
      if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {
        return directivesStart;
      }
    }
    return null;
  }
  function getNodeInjectable(lView, tView, index, tNode) {
    let value = lView[index];
    const tData = tView.data;
    if (isFactory(value)) {
      const factory = value;
      if (factory.resolving) {
        throwCyclicDependencyError(stringifyForError(tData[index]));
      }
      const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);
      factory.resolving = true;
      let prevInjectContext;
      if (ngDevMode) {
        const token = tData[index].type || tData[index];
        const injector = new NodeInjector(tNode, lView);
        prevInjectContext = setInjectorProfilerContext({ injector, token });
      }
      const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;
      const success = enterDI(lView, tNode, InjectFlags.Default);
      ngDevMode && assertEqual(success, true, "Because flags do not contain `SkipSelf' we expect this to always succeed.");
      try {
        value = lView[index] = factory.factory(void 0, tData, lView, tNode);
        ngDevMode && emitInstanceCreatedByInjectorEvent(value);
        if (tView.firstCreatePass && index >= tNode.directiveStart) {
          ngDevMode && assertDirectiveDef(tData[index]);
          registerPreOrderHooks(index, tData[index], tView);
        }
      } finally {
        ngDevMode && setInjectorProfilerContext(prevInjectContext);
        previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);
        setIncludeViewProviders(previousIncludeViewProviders);
        factory.resolving = false;
        leaveDI();
      }
    }
    return value;
  }
  function bloomHashBitOrFactory(token) {
    ngDevMode && assertDefined(token, "token must be defined");
    if (typeof token === "string") {
      return token.charCodeAt(0) || 0;
    }
    const tokenId = (
      // First check with `hasOwnProperty` so we don't get an inherited ID.
      token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : void 0
    );
    if (typeof tokenId === "number") {
      if (tokenId >= 0) {
        return tokenId & BLOOM_MASK;
      } else {
        ngDevMode && assertEqual(tokenId, -1, "Expecting to get Special Injector Id");
        return createNodeInjector;
      }
    } else {
      return tokenId;
    }
  }
  function bloomHasToken(bloomHash, injectorIndex, injectorView) {
    const mask = 1 << bloomHash;
    const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];
    return !!(value & mask);
  }
  function shouldSearchParent(flags, isFirstHostTNode) {
    return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);
  }
  function getNodeInjectorLView(nodeInjector) {
    return nodeInjector._lView;
  }
  function getNodeInjectorTNode(nodeInjector) {
    return nodeInjector._tNode;
  }
  function createNodeInjector() {
    return new NodeInjector(getCurrentTNode(), getLView());
  }
  function \u0275\u0275getInheritedFactory(type) {
    return noSideEffects(() => {
      const ownConstructor = type.prototype.constructor;
      const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);
      const objectPrototype = Object.prototype;
      let parent = Object.getPrototypeOf(type.prototype).constructor;
      while (parent && parent !== objectPrototype) {
        const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);
        if (factory && factory !== ownFactory) {
          return factory;
        }
        parent = Object.getPrototypeOf(parent);
      }
      return (t) => new t();
    });
  }
  function getFactoryOf(type) {
    if (isForwardRef(type)) {
      return () => {
        const factory = getFactoryOf(resolveForwardRef(type));
        return factory && factory();
      };
    }
    return getFactoryDef(type);
  }
  function lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {
    let currentTNode = tNode;
    let currentLView = lView;
    while (currentTNode !== null && currentLView !== null && currentLView[FLAGS] & 2048 && !(currentLView[FLAGS] & 512)) {
      ngDevMode && assertTNodeForLView(currentTNode, currentLView);
      const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | InjectFlags.Self, NOT_FOUND);
      if (nodeInjectorValue !== NOT_FOUND) {
        return nodeInjectorValue;
      }
      let parentTNode = currentTNode.parent;
      if (!parentTNode) {
        const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];
        if (embeddedViewInjector) {
          const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND, flags);
          if (embeddedViewInjectorValue !== NOT_FOUND) {
            return embeddedViewInjectorValue;
          }
        }
        parentTNode = getTNodeFromLView(currentLView);
        currentLView = currentLView[DECLARATION_VIEW];
      }
      currentTNode = parentTNode;
    }
    return notFoundValue;
  }
  function getTNodeFromLView(lView) {
    const tView = lView[TVIEW];
    const tViewType = tView.type;
    if (tViewType === 2) {
      ngDevMode && assertDefined(tView.declTNode, "Embedded TNodes should have declaration parents.");
      return tView.declTNode;
    } else if (tViewType === 1) {
      return lView[T_HOST];
    }
    return null;
  }
  function \u0275\u0275injectAttribute(attrNameToInject) {
    return injectAttributeImpl(getCurrentTNode(), attrNameToInject);
  }
  function getReflect() {
    return _reflect = _reflect || new ReflectionCapabilities();
  }
  function reflectDependencies(type) {
    return convertDependencies(getReflect().parameters(type));
  }
  function convertDependencies(deps) {
    return deps.map((dep) => reflectDependency(dep));
  }
  function reflectDependency(dep) {
    const meta = {
      token: null,
      attribute: null,
      host: false,
      optional: false,
      self: false,
      skipSelf: false
    };
    if (Array.isArray(dep) && dep.length > 0) {
      for (let j = 0; j < dep.length; j++) {
        const param = dep[j];
        if (param === void 0) {
          continue;
        }
        const proto = Object.getPrototypeOf(param);
        if (param instanceof Optional || proto.ngMetadataName === "Optional") {
          meta.optional = true;
        } else if (param instanceof SkipSelf || proto.ngMetadataName === "SkipSelf") {
          meta.skipSelf = true;
        } else if (param instanceof Self || proto.ngMetadataName === "Self") {
          meta.self = true;
        } else if (param instanceof Host || proto.ngMetadataName === "Host") {
          meta.host = true;
        } else if (param instanceof Inject) {
          meta.token = param.token;
        } else if (param instanceof Attribute) {
          if (param.attributeName === void 0) {
            throw new RuntimeError(204, ngDevMode && `Attribute name must be defined.`);
          }
          meta.attribute = param.attributeName;
        } else {
          meta.token = param;
        }
      }
    } else if (dep === void 0 || Array.isArray(dep) && dep.length === 0) {
      meta.token = null;
    } else {
      meta.token = dep;
    }
    return meta;
  }
  function compileInjectable(type, meta) {
    let ngInjectableDef = null;
    let ngFactoryDef = null;
    if (!type.hasOwnProperty(NG_PROV_DEF)) {
      Object.defineProperty(type, NG_PROV_DEF, {
        get: () => {
          if (ngInjectableDef === null) {
            const compiler = getCompilerFacade({ usage: 0, kind: "injectable", type });
            ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/\u0275prov.js`, getInjectableMetadata(type, meta));
          }
          return ngInjectableDef;
        }
      });
    }
    if (!type.hasOwnProperty(NG_FACTORY_DEF)) {
      Object.defineProperty(type, NG_FACTORY_DEF, {
        get: () => {
          if (ngFactoryDef === null) {
            const compiler = getCompilerFacade({ usage: 0, kind: "injectable", type });
            ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/\u0275fac.js`, {
              name: type.name,
              type,
              typeArgumentCount: 0,
              // In JIT mode types are not available nor used.
              deps: reflectDependencies(type),
              target: compiler.FactoryTarget.Injectable
            });
          }
          return ngFactoryDef;
        },
        // Leave this configurable so that the factories from directives or pipes can take precedence.
        configurable: true
      });
    }
  }
  function isUseClassProvider(meta) {
    return meta.useClass !== void 0;
  }
  function isUseValueProvider(meta) {
    return USE_VALUE in meta;
  }
  function isUseFactoryProvider(meta) {
    return meta.useFactory !== void 0;
  }
  function isUseExistingProvider(meta) {
    return meta.useExisting !== void 0;
  }
  function getInjectableMetadata(type, srcMeta) {
    const meta = srcMeta || { providedIn: null };
    const compilerMeta = {
      name: type.name,
      type,
      typeArgumentCount: 0,
      providedIn: meta.providedIn
    };
    if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== void 0) {
      compilerMeta.deps = convertDependencies(meta.deps);
    }
    if (isUseClassProvider(meta)) {
      compilerMeta.useClass = meta.useClass;
    } else if (isUseValueProvider(meta)) {
      compilerMeta.useValue = meta.useValue;
    } else if (isUseFactoryProvider(meta)) {
      compilerMeta.useFactory = meta.useFactory;
    } else if (isUseExistingProvider(meta)) {
      compilerMeta.useExisting = meta.useExisting;
    }
    return compilerMeta;
  }
  function createInjector(defType, parent = null, additionalProviders = null, name) {
    const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);
    injector.resolveInjectorInitializers();
    return injector;
  }
  function createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = /* @__PURE__ */ new Set()) {
    const providers = [
      additionalProviders || EMPTY_ARRAY,
      importProvidersFrom(defType)
    ];
    name = name || (typeof defType === "object" ? void 0 : stringify(defType));
    return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);
  }
  function getOriginalError(error2) {
    return error2[ERROR_ORIGINAL_ERROR];
  }
  function injectDestroyRef() {
    return new NodeInjectorDestroyRef(getLView());
  }
  function getOutputDestroyRef(ref) {
    return ref.destroyRef;
  }
  function output(opts) {
    ngDevMode && assertInInjectionContext(output);
    return new OutputEmitterRef();
  }
  function inputFunction(initialValue, opts) {
    ngDevMode && assertInInjectionContext(input);
    return createInputSignal(initialValue, opts);
  }
  function inputRequiredFunction(opts) {
    ngDevMode && assertInInjectionContext(input);
    return createInputSignal(REQUIRED_UNSET_VALUE, opts);
  }
  function injectElementRef() {
    return createElementRef(getCurrentTNode(), getLView());
  }
  function createElementRef(tNode, lView) {
    return new ElementRef(getNativeByTNode(tNode, lView));
  }
  function unwrapElementRef(value) {
    return value instanceof ElementRef ? value.nativeElement : value;
  }
  function _wrapInTimeout(fn2) {
    return (value) => {
      setTimeout(fn2, void 0, value);
    };
  }
  function symbolIterator() {
    return this._results[Symbol.iterator]();
  }
  function hasSkipHydrationAttrOnTNode(tNode) {
    const attrs = tNode.mergedAttrs;
    if (attrs === null)
      return false;
    for (let i = 0; i < attrs.length; i += 2) {
      const value = attrs[i];
      if (typeof value === "number")
        return false;
      if (typeof value === "string" && value.toLowerCase() === SKIP_HYDRATION_ATTR_NAME_LOWER_CASE) {
        return true;
      }
    }
    return false;
  }
  function hasSkipHydrationAttrOnRElement(rNode) {
    return rNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME);
  }
  function hasInSkipHydrationBlockFlag(tNode) {
    return (tNode.flags & 128) === 128;
  }
  function isInSkipHydrationBlock(tNode) {
    if (hasInSkipHydrationBlockFlag(tNode)) {
      return true;
    }
    let currentTNode = tNode.parent;
    while (currentTNode) {
      if (hasInSkipHydrationBlockFlag(tNode) || hasSkipHydrationAttrOnTNode(currentTNode)) {
        return true;
      }
      currentTNode = currentTNode.parent;
    }
    return false;
  }
  function getUniqueLViewId() {
    return uniqueIdCounter++;
  }
  function registerLView(lView) {
    ngDevMode && assertNumber(lView[ID], "LView must have an ID in order to be registered");
    TRACKED_LVIEWS.set(lView[ID], lView);
  }
  function getLViewById(id) {
    ngDevMode && assertNumber(id, "ID used for LView lookup must be a number");
    return TRACKED_LVIEWS.get(id) || null;
  }
  function unregisterLView(lView) {
    ngDevMode && assertNumber(lView[ID], "Cannot stop tracking an LView that does not have an ID");
    TRACKED_LVIEWS.delete(lView[ID]);
  }
  function getLContext(target) {
    let mpValue = readPatchedData(target);
    if (mpValue) {
      if (isLView(mpValue)) {
        const lView = mpValue;
        let nodeIndex;
        let component = void 0;
        let directives = void 0;
        if (isComponentInstance(target)) {
          nodeIndex = findViaComponent(lView, target);
          if (nodeIndex == -1) {
            throw new Error("The provided component was not found in the application");
          }
          component = target;
        } else if (isDirectiveInstance(target)) {
          nodeIndex = findViaDirective(lView, target);
          if (nodeIndex == -1) {
            throw new Error("The provided directive was not found in the application");
          }
          directives = getDirectivesAtNodeIndex(nodeIndex, lView);
        } else {
          nodeIndex = findViaNativeElement(lView, target);
          if (nodeIndex == -1) {
            return null;
          }
        }
        const native = unwrapRNode(lView[nodeIndex]);
        const existingCtx = readPatchedData(native);
        const context2 = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native);
        if (component && context2.component === void 0) {
          context2.component = component;
          attachPatchData(context2.component, context2);
        }
        if (directives && context2.directives === void 0) {
          context2.directives = directives;
          for (let i = 0; i < directives.length; i++) {
            attachPatchData(directives[i], context2);
          }
        }
        attachPatchData(context2.native, context2);
        mpValue = context2;
      }
    } else {
      const rElement = target;
      ngDevMode && assertDomNode(rElement);
      let parent = rElement;
      while (parent = parent.parentNode) {
        const parentContext = readPatchedData(parent);
        if (parentContext) {
          const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;
          if (!lView) {
            return null;
          }
          const index = findViaNativeElement(lView, rElement);
          if (index >= 0) {
            const native = unwrapRNode(lView[index]);
            const context2 = createLContext(lView, index, native);
            attachPatchData(native, context2);
            mpValue = context2;
            break;
          }
        }
      }
    }
    return mpValue || null;
  }
  function createLContext(lView, nodeIndex, native) {
    return new LContext(lView[ID], nodeIndex, native);
  }
  function getComponentViewByInstance(componentInstance) {
    let patchedData = readPatchedData(componentInstance);
    let lView;
    if (isLView(patchedData)) {
      const contextLView = patchedData;
      const nodeIndex = findViaComponent(contextLView, componentInstance);
      lView = getComponentLViewByIndex(nodeIndex, contextLView);
      const context2 = createLContext(contextLView, nodeIndex, lView[HOST]);
      context2.component = componentInstance;
      attachPatchData(componentInstance, context2);
      attachPatchData(context2.native, context2);
    } else {
      const context2 = patchedData;
      const contextLView = context2.lView;
      ngDevMode && assertLView(contextLView);
      lView = getComponentLViewByIndex(context2.nodeIndex, contextLView);
    }
    return lView;
  }
  function attachPatchData(target, data) {
    ngDevMode && assertDefined(target, "Target expected");
    if (isLView(data)) {
      target[MONKEY_PATCH_KEY_NAME] = data[ID];
      registerLView(data);
    } else {
      target[MONKEY_PATCH_KEY_NAME] = data;
    }
  }
  function readPatchedData(target) {
    ngDevMode && assertDefined(target, "Target expected");
    const data = target[MONKEY_PATCH_KEY_NAME];
    return typeof data === "number" ? getLViewById(data) : data || null;
  }
  function readPatchedLView(target) {
    const value = readPatchedData(target);
    if (value) {
      return isLView(value) ? value : value.lView;
    }
    return null;
  }
  function isComponentInstance(instance) {
    return instance && instance.constructor && instance.constructor.\u0275cmp;
  }
  function isDirectiveInstance(instance) {
    return instance && instance.constructor && instance.constructor.\u0275dir;
  }
  function findViaNativeElement(lView, target) {
    const tView = lView[TVIEW];
    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
      if (unwrapRNode(lView[i]) === target) {
        return i;
      }
    }
    return -1;
  }
  function traverseNextElement(tNode) {
    if (tNode.child) {
      return tNode.child;
    } else if (tNode.next) {
      return tNode.next;
    } else {
      while (tNode.parent && !tNode.parent.next) {
        tNode = tNode.parent;
      }
      return tNode.parent && tNode.parent.next;
    }
  }
  function findViaComponent(lView, componentInstance) {
    const componentIndices = lView[TVIEW].components;
    if (componentIndices) {
      for (let i = 0; i < componentIndices.length; i++) {
        const elementComponentIndex = componentIndices[i];
        const componentView = getComponentLViewByIndex(elementComponentIndex, lView);
        if (componentView[CONTEXT] === componentInstance) {
          return elementComponentIndex;
        }
      }
    } else {
      const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);
      const rootComponent = rootComponentView[CONTEXT];
      if (rootComponent === componentInstance) {
        return HEADER_OFFSET;
      }
    }
    return -1;
  }
  function findViaDirective(lView, directiveInstance) {
    let tNode = lView[TVIEW].firstChild;
    while (tNode) {
      const directiveIndexStart = tNode.directiveStart;
      const directiveIndexEnd = tNode.directiveEnd;
      for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {
        if (lView[i] === directiveInstance) {
          return tNode.index;
        }
      }
      tNode = traverseNextElement(tNode);
    }
    return -1;
  }
  function getDirectivesAtNodeIndex(nodeIndex, lView) {
    const tNode = lView[TVIEW].data[nodeIndex];
    if (tNode.directiveStart === 0)
      return EMPTY_ARRAY;
    const results = [];
    for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {
      const directiveInstance = lView[i];
      if (!isComponentInstance(directiveInstance)) {
        results.push(directiveInstance);
      }
    }
    return results;
  }
  function getComponentAtNodeIndex(nodeIndex, lView) {
    const tNode = lView[TVIEW].data[nodeIndex];
    const { directiveStart, componentOffset } = tNode;
    return componentOffset > -1 ? lView[directiveStart + componentOffset] : null;
  }
  function discoverLocalRefs(lView, nodeIndex) {
    const tNode = lView[TVIEW].data[nodeIndex];
    if (tNode && tNode.localNames) {
      const result = {};
      let localIndex = tNode.index + 1;
      for (let i = 0; i < tNode.localNames.length; i += 2) {
        result[tNode.localNames[i]] = lView[localIndex];
        localIndex++;
      }
      return result;
    }
    return null;
  }
  function getRootView(componentOrLView) {
    ngDevMode && assertDefined(componentOrLView, "component");
    let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);
    while (lView && !(lView[FLAGS] & 512)) {
      lView = getLViewParent(lView);
    }
    ngDevMode && assertLView(lView);
    return lView;
  }
  function getRootContext(viewOrComponent) {
    const rootView = getRootView(viewOrComponent);
    ngDevMode && assertDefined(rootView[CONTEXT], "Root view has no context. Perhaps it is disconnected?");
    return rootView[CONTEXT];
  }
  function getFirstLContainer(lView) {
    return getNearestLContainer(lView[CHILD_HEAD]);
  }
  function getNextLContainer(container) {
    return getNearestLContainer(container[NEXT]);
  }
  function getNearestLContainer(viewOrContainer) {
    while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {
      viewOrContainer = viewOrContainer[NEXT];
    }
    return viewOrContainer;
  }
  function getComponent$1(element2) {
    ngDevMode && assertDomElement(element2);
    const context2 = getLContext(element2);
    if (context2 === null)
      return null;
    if (context2.component === void 0) {
      const lView = context2.lView;
      if (lView === null) {
        return null;
      }
      context2.component = getComponentAtNodeIndex(context2.nodeIndex, lView);
    }
    return context2.component;
  }
  function getContext(element2) {
    assertDomElement(element2);
    const context2 = getLContext(element2);
    const lView = context2 ? context2.lView : null;
    return lView === null ? null : lView[CONTEXT];
  }
  function getOwningComponent(elementOrDir) {
    const context2 = getLContext(elementOrDir);
    let lView = context2 ? context2.lView : null;
    if (lView === null)
      return null;
    let parent;
    while (lView[TVIEW].type === 2 && (parent = getLViewParent(lView))) {
      lView = parent;
    }
    return lView[FLAGS] & 512 ? null : lView[CONTEXT];
  }
  function getRootComponents(elementOrDir) {
    const lView = readPatchedLView(elementOrDir);
    return lView !== null ? [getRootContext(lView)] : [];
  }
  function getInjector(elementOrDir) {
    const context2 = getLContext(elementOrDir);
    const lView = context2 ? context2.lView : null;
    if (lView === null)
      return Injector.NULL;
    const tNode = lView[TVIEW].data[context2.nodeIndex];
    return new NodeInjector(tNode, lView);
  }
  function getInjectionTokens(element2) {
    const context2 = getLContext(element2);
    const lView = context2 ? context2.lView : null;
    if (lView === null)
      return [];
    const tView = lView[TVIEW];
    const tNode = tView.data[context2.nodeIndex];
    const providerTokens = [];
    const startIndex = tNode.providerIndexes & 1048575;
    const endIndex = tNode.directiveEnd;
    for (let i = startIndex; i < endIndex; i++) {
      let value = tView.data[i];
      if (isDirectiveDefHack(value)) {
        value = value.type;
      }
      providerTokens.push(value);
    }
    return providerTokens;
  }
  function getDirectives(node) {
    if (node instanceof Text) {
      return [];
    }
    const context2 = getLContext(node);
    const lView = context2 ? context2.lView : null;
    if (lView === null) {
      return [];
    }
    const tView = lView[TVIEW];
    const nodeIndex = context2.nodeIndex;
    if (!tView?.data[nodeIndex]) {
      return [];
    }
    if (context2.directives === void 0) {
      context2.directives = getDirectivesAtNodeIndex(nodeIndex, lView);
    }
    return context2.directives === null ? [] : [...context2.directives];
  }
  function getDirectiveMetadata$1(directiveOrComponentInstance) {
    const { constructor } = directiveOrComponentInstance;
    if (!constructor) {
      throw new Error("Unable to find the instance constructor");
    }
    const componentDef = getComponentDef(constructor);
    if (componentDef) {
      const inputs = extractInputDebugMetadata(componentDef.inputs);
      return {
        inputs,
        outputs: componentDef.outputs,
        encapsulation: componentDef.encapsulation,
        changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush : ChangeDetectionStrategy.Default
      };
    }
    const directiveDef = getDirectiveDef(constructor);
    if (directiveDef) {
      const inputs = extractInputDebugMetadata(directiveDef.inputs);
      return { inputs, outputs: directiveDef.outputs };
    }
    return null;
  }
  function getLocalRefs(target) {
    const context2 = getLContext(target);
    if (context2 === null)
      return {};
    if (context2.localRefs === void 0) {
      const lView = context2.lView;
      if (lView === null) {
        return {};
      }
      context2.localRefs = discoverLocalRefs(lView, context2.nodeIndex);
    }
    return context2.localRefs || {};
  }
  function getHostElement(componentOrDirective) {
    return getLContext(componentOrDirective).native;
  }
  function getListeners(element2) {
    ngDevMode && assertDomElement(element2);
    const lContext = getLContext(element2);
    const lView = lContext === null ? null : lContext.lView;
    if (lView === null)
      return [];
    const tView = lView[TVIEW];
    const lCleanup = lView[CLEANUP];
    const tCleanup = tView.cleanup;
    const listeners = [];
    if (tCleanup && lCleanup) {
      for (let i = 0; i < tCleanup.length; ) {
        const firstParam = tCleanup[i++];
        const secondParam = tCleanup[i++];
        if (typeof firstParam === "string") {
          const name = firstParam;
          const listenerElement = unwrapRNode(lView[secondParam]);
          const callback = lCleanup[tCleanup[i++]];
          const useCaptureOrIndx = tCleanup[i++];
          const type = typeof useCaptureOrIndx === "boolean" || useCaptureOrIndx >= 0 ? "dom" : "output";
          const useCapture = typeof useCaptureOrIndx === "boolean" ? useCaptureOrIndx : false;
          if (element2 == listenerElement) {
            listeners.push({ element: element2, name, callback, useCapture, type });
          }
        }
      }
    }
    listeners.sort(sortListeners);
    return listeners;
  }
  function sortListeners(a, b) {
    if (a.name == b.name)
      return 0;
    return a.name < b.name ? -1 : 1;
  }
  function isDirectiveDefHack(obj) {
    return obj.type !== void 0 && obj.declaredInputs !== void 0 && obj.findHostDirectiveDefs !== void 0;
  }
  function assertDomElement(value) {
    if (typeof Element !== "undefined" && !(value instanceof Element)) {
      throw new Error("Expecting instance of DOM Element");
    }
  }
  function extractInputDebugMetadata(inputs) {
    const res = {};
    for (const key in inputs) {
      if (!inputs.hasOwnProperty(key)) {
        continue;
      }
      const value = inputs[key];
      if (value === void 0) {
        continue;
      }
      let minifiedName;
      if (Array.isArray(value)) {
        minifiedName = value[0];
      } else {
        minifiedName = value;
      }
      res[key] = minifiedName;
    }
    return res;
  }
  function setDocument(document2) {
    DOCUMENT = document2;
  }
  function getDocument() {
    if (DOCUMENT !== void 0) {
      return DOCUMENT;
    } else if (typeof document !== "undefined") {
      return document;
    }
    throw new RuntimeError(210, (typeof ngDevMode === "undefined" || ngDevMode) && `The document object is not available in this context. Make sure the DOCUMENT injection token is provided.`);
  }
  function makeStateKey(key) {
    return key;
  }
  function initTransferState() {
    const transferState = new TransferState();
    if (inject(PLATFORM_ID) === "browser") {
      transferState.store = retrieveTransferredState(getDocument(), inject(APP_ID));
    }
    return transferState;
  }
  function retrieveTransferredState(doc3, appId) {
    const script = doc3.getElementById(appId + "-state");
    if (script?.textContent) {
      try {
        return JSON.parse(script.textContent);
      } catch (e2) {
        console.warn("Exception while restoring TransferState for app " + appId, e2);
      }
    }
    return {};
  }
  function retrieveHydrationInfoImpl(rNode, injector, isRootView2 = false) {
    let nghAttrValue = rNode.getAttribute(NGH_ATTR_NAME);
    if (nghAttrValue == null)
      return null;
    const [componentViewNgh, rootViewNgh] = nghAttrValue.split("|");
    nghAttrValue = isRootView2 ? rootViewNgh : componentViewNgh;
    if (!nghAttrValue)
      return null;
    const rootNgh = rootViewNgh ? `|${rootViewNgh}` : "";
    const remainingNgh = isRootView2 ? componentViewNgh : rootNgh;
    let data = {};
    if (nghAttrValue !== "") {
      const transferState = injector.get(TransferState, null, { optional: true });
      if (transferState !== null) {
        const nghData = transferState.get(NGH_DATA_KEY, []);
        data = nghData[Number(nghAttrValue)];
        ngDevMode && assertDefined(data, "Unable to retrieve hydration info from the TransferState.");
      }
    }
    const dehydratedView = {
      data,
      firstChild: rNode.firstChild ?? null
    };
    if (isRootView2) {
      dehydratedView.firstChild = rNode;
      setSegmentHead(dehydratedView, 0, rNode.nextSibling);
    }
    if (remainingNgh) {
      rNode.setAttribute(NGH_ATTR_NAME, remainingNgh);
    } else {
      rNode.removeAttribute(NGH_ATTR_NAME);
    }
    ngDevMode && markRNodeAsClaimedByHydration(
      rNode,
      /* checkIfAlreadyClaimed */
      false
    );
    ngDevMode && ngDevMode.hydratedComponents++;
    return dehydratedView;
  }
  function enableRetrieveHydrationInfoImpl() {
    _retrieveHydrationInfoImpl = retrieveHydrationInfoImpl;
  }
  function retrieveHydrationInfo(rNode, injector, isRootView2 = false) {
    return _retrieveHydrationInfoImpl(rNode, injector, isRootView2);
  }
  function getLNodeForHydration(viewRef) {
    let lView = viewRef._lView;
    const tView = lView[TVIEW];
    if (tView.type === 2) {
      return null;
    }
    if (isRootView(lView)) {
      lView = lView[HEADER_OFFSET];
    }
    return lView;
  }
  function getTextNodeContent(node) {
    return node.textContent?.replace(/\s/gm, "");
  }
  function processTextNodeMarkersBeforeHydration(node) {
    const doc3 = getDocument();
    const commentNodesIterator = doc3.createNodeIterator(node, NodeFilter.SHOW_COMMENT, {
      acceptNode(node2) {
        const content = getTextNodeContent(node2);
        const isTextNodeMarker = content === "ngetn" || content === "ngtns";
        return isTextNodeMarker ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
      }
    });
    let currentNode;
    const nodes = [];
    while (currentNode = commentNodesIterator.nextNode()) {
      nodes.push(currentNode);
    }
    for (const node2 of nodes) {
      if (node2.textContent === "ngetn") {
        node2.replaceWith(doc3.createTextNode(""));
      } else {
        node2.remove();
      }
    }
  }
  function patchHydrationInfo(node, info) {
    node[HYDRATION_INFO_KEY] = info;
  }
  function readHydrationInfo(node) {
    return node[HYDRATION_INFO_KEY] ?? null;
  }
  function markRNodeAsClaimedByHydration(node, checkIfAlreadyClaimed = true) {
    if (!ngDevMode) {
      throw new Error("Calling `markRNodeAsClaimedByHydration` in prod mode is not supported and likely a mistake.");
    }
    if (checkIfAlreadyClaimed && isRNodeClaimedForHydration(node)) {
      throw new Error("Trying to claim a node, which was claimed already.");
    }
    patchHydrationInfo(node, { status: HydrationStatus.Hydrated });
    ngDevMode.hydratedNodes++;
  }
  function markRNodeAsSkippedByHydration(node) {
    if (!ngDevMode) {
      throw new Error("Calling `markRNodeAsSkippedByHydration` in prod mode is not supported and likely a mistake.");
    }
    patchHydrationInfo(node, { status: HydrationStatus.Skipped });
    ngDevMode.componentsSkippedHydration++;
  }
  function markRNodeAsHavingHydrationMismatch(node, expectedNodeDetails = null, actualNodeDetails = null) {
    if (!ngDevMode) {
      throw new Error("Calling `markRNodeAsMismatchedByHydration` in prod mode is not supported and likely a mistake.");
    }
    while (node && !getComponent$1(node)) {
      node = node?.parentNode;
    }
    if (node) {
      patchHydrationInfo(node, {
        status: HydrationStatus.Mismatched,
        expectedNodeDetails,
        actualNodeDetails
      });
    }
  }
  function isRNodeClaimedForHydration(node) {
    return readHydrationInfo(node)?.status === HydrationStatus.Hydrated;
  }
  function setSegmentHead(hydrationInfo, index, node) {
    hydrationInfo.segmentHeads ??= {};
    hydrationInfo.segmentHeads[index] = node;
  }
  function getSegmentHead(hydrationInfo, index) {
    return hydrationInfo.segmentHeads?.[index] ?? null;
  }
  function getNgContainerSize(hydrationInfo, index) {
    const data = hydrationInfo.data;
    let size = data[ELEMENT_CONTAINERS]?.[index] ?? null;
    if (size === null && data[CONTAINERS]?.[index]) {
      size = calcSerializedContainerSize(hydrationInfo, index);
    }
    return size;
  }
  function getSerializedContainerViews(hydrationInfo, index) {
    return hydrationInfo.data[CONTAINERS]?.[index] ?? null;
  }
  function calcSerializedContainerSize(hydrationInfo, index) {
    const views = getSerializedContainerViews(hydrationInfo, index) ?? [];
    let numNodes = 0;
    for (let view of views) {
      numNodes += view[NUM_ROOT_NODES] * (view[MULTIPLIER] ?? 1);
    }
    return numNodes;
  }
  function isDisconnectedNode$1(hydrationInfo, index) {
    if (typeof hydrationInfo.disconnectedNodes === "undefined") {
      const nodeIds = hydrationInfo.data[DISCONNECTED_NODES];
      hydrationInfo.disconnectedNodes = nodeIds ? new Set(nodeIds) : null;
    }
    return !!hydrationInfo.disconnectedNodes?.has(index);
  }
  function getPolicy$1() {
    if (policy$1 === void 0) {
      policy$1 = null;
      if (_global.trustedTypes) {
        try {
          policy$1 = _global.trustedTypes.createPolicy("angular", {
            createHTML: (s) => s,
            createScript: (s) => s,
            createScriptURL: (s) => s
          });
        } catch {
        }
      }
    }
    return policy$1;
  }
  function trustedHTMLFromString(html) {
    return getPolicy$1()?.createHTML(html) || html;
  }
  function trustedScriptURLFromString(url) {
    return getPolicy$1()?.createScriptURL(url) || url;
  }
  function getPolicy() {
    if (policy === void 0) {
      policy = null;
      if (_global.trustedTypes) {
        try {
          policy = _global.trustedTypes.createPolicy("angular#unsafe-bypass", {
            createHTML: (s) => s,
            createScript: (s) => s,
            createScriptURL: (s) => s
          });
        } catch {
        }
      }
    }
    return policy;
  }
  function trustedHTMLFromStringBypass(html) {
    return getPolicy()?.createHTML(html) || html;
  }
  function trustedScriptFromStringBypass(script) {
    return getPolicy()?.createScript(script) || script;
  }
  function trustedScriptURLFromStringBypass(url) {
    return getPolicy()?.createScriptURL(url) || url;
  }
  function unwrapSafeValue(value) {
    return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;
  }
  function allowSanitizationBypassAndThrow(value, type) {
    const actualType = getSanitizationBypassType(value);
    if (actualType != null && actualType !== type) {
      if (actualType === "ResourceURL" && type === "URL")
        return true;
      throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);
    }
    return actualType === type;
  }
  function getSanitizationBypassType(value) {
    return value instanceof SafeValueImpl && value.getTypeName() || null;
  }
  function bypassSanitizationTrustHtml(trustedHtml) {
    return new SafeHtmlImpl(trustedHtml);
  }
  function bypassSanitizationTrustStyle(trustedStyle) {
    return new SafeStyleImpl(trustedStyle);
  }
  function bypassSanitizationTrustScript(trustedScript) {
    return new SafeScriptImpl(trustedScript);
  }
  function bypassSanitizationTrustUrl(trustedUrl) {
    return new SafeUrlImpl(trustedUrl);
  }
  function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
    return new SafeResourceUrlImpl(trustedResourceUrl);
  }
  function getInertBodyHelper(defaultDoc) {
    const inertDocumentHelper = new InertDocumentHelper(defaultDoc);
    return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;
  }
  function isDOMParserAvailable() {
    try {
      return !!new window.DOMParser().parseFromString(trustedHTMLFromString(""), "text/html");
    } catch {
      return false;
    }
  }
  function _sanitizeUrl(url) {
    url = String(url);
    if (url.match(SAFE_URL_PATTERN))
      return url;
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);
    }
    return "unsafe:" + url;
  }
  function tagSet(tags) {
    const res = {};
    for (const t of tags.split(","))
      res[t] = true;
    return res;
  }
  function merge(...sets) {
    const res = {};
    for (const s of sets) {
      for (const v in s) {
        if (s.hasOwnProperty(v))
          res[v] = true;
      }
    }
    return res;
  }
  function isClobberedElement(parentNode, childNode) {
    return (parentNode.compareDocumentPosition(childNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) !== Node.DOCUMENT_POSITION_CONTAINED_BY;
  }
  function getNextSibling(node) {
    const nextSibling = node.nextSibling;
    if (nextSibling && node !== nextSibling.previousSibling) {
      throw clobberedElementError(nextSibling);
    }
    return nextSibling;
  }
  function getFirstChild(node) {
    const firstChild = node.firstChild;
    if (firstChild && isClobberedElement(node, firstChild)) {
      throw clobberedElementError(firstChild);
    }
    return firstChild;
  }
  function getNodeName(node) {
    const nodeName = node.nodeName;
    return typeof nodeName === "string" ? nodeName : "FORM";
  }
  function clobberedElementError(node) {
    return new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);
  }
  function encodeEntities(value) {
    return value.replace(/&/g, "&amp;").replace(SURROGATE_PAIR_REGEXP, function(match2) {
      const hi = match2.charCodeAt(0);
      const low = match2.charCodeAt(1);
      return "&#" + ((hi - 55296) * 1024 + (low - 56320) + 65536) + ";";
    }).replace(NON_ALPHANUMERIC_REGEXP, function(match2) {
      return "&#" + match2.charCodeAt(0) + ";";
    }).replace(/</g, "&lt;").replace(/>/g, "&gt;");
  }
  function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
    let inertBodyElement = null;
    try {
      inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);
      let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : "";
      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
      let mXSSAttempts = 5;
      let parsedHtml = unsafeHtml;
      do {
        if (mXSSAttempts === 0) {
          throw new Error("Failed to sanitize html because the input is unstable");
        }
        mXSSAttempts--;
        unsafeHtml = parsedHtml;
        parsedHtml = inertBodyElement.innerHTML;
        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
      } while (unsafeHtml !== parsedHtml);
      const sanitizer = new SanitizingHtmlSerializer();
      const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);
      if ((typeof ngDevMode === "undefined" || ngDevMode) && sanitizer.sanitizedSomething) {
        console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);
      }
      return trustedHTMLFromString(safeHtml);
    } finally {
      if (inertBodyElement) {
        const parent = getTemplateContent(inertBodyElement) || inertBodyElement;
        while (parent.firstChild) {
          parent.removeChild(parent.firstChild);
        }
      }
    }
  }
  function getTemplateContent(el) {
    return "content" in el && isTemplateElement(el) ? el.content : null;
  }
  function isTemplateElement(el) {
    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === "TEMPLATE";
  }
  function \u0275\u0275sanitizeHtml(unsafeHtml) {
    const sanitizer = getSanitizer();
    if (sanitizer) {
      return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || "");
    }
    if (allowSanitizationBypassAndThrow(
      unsafeHtml,
      "HTML"
      /* BypassType.Html */
    )) {
      return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));
    }
    return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));
  }
  function \u0275\u0275sanitizeStyle(unsafeStyle) {
    const sanitizer = getSanitizer();
    if (sanitizer) {
      return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || "";
    }
    if (allowSanitizationBypassAndThrow(
      unsafeStyle,
      "Style"
      /* BypassType.Style */
    )) {
      return unwrapSafeValue(unsafeStyle);
    }
    return renderStringify(unsafeStyle);
  }
  function \u0275\u0275sanitizeUrl(unsafeUrl) {
    const sanitizer = getSanitizer();
    if (sanitizer) {
      return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || "";
    }
    if (allowSanitizationBypassAndThrow(
      unsafeUrl,
      "URL"
      /* BypassType.Url */
    )) {
      return unwrapSafeValue(unsafeUrl);
    }
    return _sanitizeUrl(renderStringify(unsafeUrl));
  }
  function \u0275\u0275sanitizeResourceUrl(unsafeResourceUrl) {
    const sanitizer = getSanitizer();
    if (sanitizer) {
      return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || "");
    }
    if (allowSanitizationBypassAndThrow(
      unsafeResourceUrl,
      "ResourceURL"
      /* BypassType.ResourceUrl */
    )) {
      return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));
    }
    throw new RuntimeError(904, ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);
  }
  function \u0275\u0275sanitizeScript(unsafeScript) {
    const sanitizer = getSanitizer();
    if (sanitizer) {
      return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || "");
    }
    if (allowSanitizationBypassAndThrow(
      unsafeScript,
      "Script"
      /* BypassType.Script */
    )) {
      return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));
    }
    throw new RuntimeError(905, ngDevMode && "unsafe value used in a script context");
  }
  function \u0275\u0275trustConstantHtml(html) {
    if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {
      throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join("?")}`);
    }
    return trustedHTMLFromString(html[0]);
  }
  function \u0275\u0275trustConstantResourceUrl(url) {
    if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {
      throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join("?")}`);
    }
    return trustedScriptURLFromString(url[0]);
  }
  function getUrlSanitizer(tag, prop) {
    if (prop === "src" && (tag === "embed" || tag === "frame" || tag === "iframe" || tag === "media" || tag === "script") || prop === "href" && (tag === "base" || tag === "link")) {
      return \u0275\u0275sanitizeResourceUrl;
    }
    return \u0275\u0275sanitizeUrl;
  }
  function \u0275\u0275sanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {
    return getUrlSanitizer(tag, prop)(unsafeUrl);
  }
  function validateAgainstEventProperties(name) {
    if (name.toLowerCase().startsWith("on")) {
      const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...
If '${name}' is a directive input, make sure the directive is imported by the current module.`;
      throw new RuntimeError(306, errorMessage);
    }
  }
  function validateAgainstEventAttributes(name) {
    if (name.toLowerCase().startsWith("on")) {
      const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...`;
      throw new RuntimeError(306, errorMessage);
    }
  }
  function getSanitizer() {
    const lView = getLView();
    return lView && lView[ENVIRONMENT].sanitizer;
  }
  function escapeCommentText(value) {
    return value.replace(COMMENT_DISALLOWED, (text2) => text2.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));
  }
  function normalizeDebugBindingName(name) {
    name = camelCaseToDashCase(name.replace(/[$@]/g, "_"));
    return `ng-reflect-${name}`;
  }
  function camelCaseToDashCase(input2) {
    return input2.replace(CAMEL_CASE_REGEXP, (...m) => "-" + m[1].toLowerCase());
  }
  function normalizeDebugBindingValue(value) {
    try {
      return value != null ? value.toString().slice(0, 30) : value;
    } catch (e2) {
      return "[ERROR] Exception while trying to serialize the value";
    }
  }
  function \u0275setUnknownElementStrictMode(shouldThrow) {
    shouldThrowErrorOnUnknownElement = shouldThrow;
  }
  function \u0275getUnknownElementStrictMode() {
    return shouldThrowErrorOnUnknownElement;
  }
  function \u0275setUnknownPropertyStrictMode(shouldThrow) {
    shouldThrowErrorOnUnknownProperty = shouldThrow;
  }
  function \u0275getUnknownPropertyStrictMode() {
    return shouldThrowErrorOnUnknownProperty;
  }
  function validateElementIsKnown(element2, lView, tagName, schemas, hasDirectives) {
    if (schemas === null)
      return;
    if (!hasDirectives && tagName !== null) {
      const isUnknown = (
        // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because
        // Domino doesn't expose HTMLUnknownElement globally.
        typeof HTMLUnknownElement !== "undefined" && HTMLUnknownElement && element2 instanceof HTMLUnknownElement || typeof customElements !== "undefined" && tagName.indexOf("-") > -1 && !customElements.get(tagName)
      );
      if (isUnknown && !matchingSchemas(schemas, tagName)) {
        const isHostStandalone = isHostComponentStandalone(lView);
        const templateLocation = getTemplateLocationDetails(lView);
        const schemas2 = `'${isHostStandalone ? "@Component" : "@NgModule"}.schemas'`;
        let message = `'${tagName}' is not a known element${templateLocation}:
`;
        message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? "included in the '@Component.imports' of this component" : "a part of an @NgModule where this component is declared"}.
`;
        if (tagName && tagName.indexOf("-") > -1) {
          message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas2} of this component to suppress this message.`;
        } else {
          message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas2} of this component.`;
        }
        if (shouldThrowErrorOnUnknownElement) {
          throw new RuntimeError(304, message);
        } else {
          console.error(formatRuntimeError(304, message));
        }
      }
    }
  }
  function isPropertyValid(element2, propName, tagName, schemas) {
    if (schemas === null)
      return true;
    if (matchingSchemas(schemas, tagName) || propName in element2 || isAnimationProp(propName)) {
      return true;
    }
    return typeof Node === "undefined" || Node === null || !(element2 instanceof Node);
  }
  function handleUnknownPropertyError(propName, tagName, nodeType, lView) {
    if (!tagName && nodeType === 4) {
      tagName = "ng-template";
    }
    const isHostStandalone = isHostComponentStandalone(lView);
    const templateLocation = getTemplateLocationDetails(lView);
    let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;
    const schemas = `'${isHostStandalone ? "@Component" : "@NgModule"}.schemas'`;
    const importLocation = isHostStandalone ? "included in the '@Component.imports' of this component" : "a part of an @NgModule where this component is declared";
    if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {
      const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);
      message += `
If the '${propName}' is an Angular control flow directive, please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;
    } else {
      message += `
1. If '${tagName}' is an Angular component and it has the '${propName}' input, then verify that it is ${importLocation}.`;
      if (tagName && tagName.indexOf("-") > -1) {
        message += `
2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;
        message += `
3. To allow any property add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;
      } else {
        message += `
2. To allow any property add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;
      }
    }
    reportUnknownPropertyError(message);
  }
  function reportUnknownPropertyError(message) {
    if (shouldThrowErrorOnUnknownProperty) {
      throw new RuntimeError(303, message);
    } else {
      console.error(formatRuntimeError(303, message));
    }
  }
  function getDeclarationComponentDef(lView) {
    !ngDevMode && throwError2("Must never be called in production mode");
    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
    const context2 = declarationLView[CONTEXT];
    if (!context2)
      return null;
    return context2.constructor ? getComponentDef(context2.constructor) : null;
  }
  function isHostComponentStandalone(lView) {
    !ngDevMode && throwError2("Must never be called in production mode");
    const componentDef = getDeclarationComponentDef(lView);
    return !!componentDef?.standalone;
  }
  function getTemplateLocationDetails(lView) {
    !ngDevMode && throwError2("Must never be called in production mode");
    const hostComponentDef = getDeclarationComponentDef(lView);
    const componentClassName = hostComponentDef?.type?.name;
    return componentClassName ? ` (used in the '${componentClassName}' component template)` : "";
  }
  function matchingSchemas(schemas, tagName) {
    if (schemas !== null) {
      for (let i = 0; i < schemas.length; i++) {
        const schema = schemas[i];
        if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf("-") > -1) {
          return true;
        }
      }
    }
    return false;
  }
  function \u0275\u0275resolveWindow(element2) {
    return element2.ownerDocument.defaultView;
  }
  function \u0275\u0275resolveDocument(element2) {
    return element2.ownerDocument;
  }
  function \u0275\u0275resolveBody(element2) {
    return element2.ownerDocument.body;
  }
  function maybeUnwrapFn(value) {
    if (value instanceof Function) {
      return value();
    } else {
      return value;
    }
  }
  function isPlatformBrowser(injector) {
    return (injector ?? inject(Injector)).get(PLATFORM_ID) === "browser";
  }
  function assertStandaloneComponentType(type) {
    assertComponentDef(type);
    const componentDef = getComponentDef(type);
    if (!componentDef.standalone) {
      throw new RuntimeError(907, `The ${stringifyForError(type)} component is not marked as standalone, but Angular expects to have a standalone component here. Please make sure the ${stringifyForError(type)} component has the \`standalone: true\` flag in the decorator.`);
    }
  }
  function assertComponentDef(type) {
    if (!getComponentDef(type)) {
      throw new RuntimeError(906, `The ${stringifyForError(type)} is not an Angular component, make sure it has the \`@Component\` decorator.`);
    }
  }
  function throwMultipleComponentError(tNode, first2, second) {
    throw new RuntimeError(-300, `Multiple components match node with tagname ${tNode.value}: ${stringifyForError(first2)} and ${stringifyForError(second)}`);
  }
  function throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName, lView) {
    const hostComponentDef = getDeclarationComponentDef(lView);
    const componentClassName = hostComponentDef?.type?.name;
    const field = propName ? ` for '${propName}'` : "";
    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${formatValue(oldValue)}'. Current value: '${formatValue(currValue)}'.${componentClassName ? ` Expression location: ${componentClassName} component` : ""}`;
    if (creationMode) {
      msg += ` It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook?`;
    }
    throw new RuntimeError(-100, msg);
  }
  function formatValue(value) {
    let strValue = String(value);
    try {
      if (Array.isArray(value) || strValue === "[object Object]") {
        strValue = JSON.stringify(value);
      }
    } catch (error2) {
    }
    return strValue.length > VALUE_STRING_LENGTH_LIMIT ? strValue.substring(0, VALUE_STRING_LENGTH_LIMIT) + "\u2026" : strValue;
  }
  function constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {
    const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);
    let oldValue = prefix, newValue = prefix;
    for (let i = 0; i < chunks.length; i++) {
      const slotIdx = rootIndex + i;
      oldValue += `${lView[slotIdx]}${chunks[i]}`;
      newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;
    }
    return { propName, oldValue, newValue };
  }
  function getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {
    const tData = lView[TVIEW].data;
    const metadata = tData[bindingIndex];
    if (typeof metadata === "string") {
      if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {
        return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);
      }
      return { propName: metadata, oldValue, newValue };
    }
    if (metadata === null) {
      let idx = bindingIndex - 1;
      while (typeof tData[idx] !== "string" && tData[idx + 1] === null) {
        idx--;
      }
      const meta = tData[idx];
      if (typeof meta === "string") {
        const matches2 = meta.match(new RegExp(INTERPOLATION_DELIMITER, "g"));
        if (matches2 && matches2.length - 1 > bindingIndex - idx) {
          return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);
        }
      }
    }
    return { propName: void 0, oldValue, newValue };
  }
  function icuContainerIterate(tIcuContainerNode, lView) {
    return _icuContainerIterate(tIcuContainerNode, lView);
  }
  function ensureIcuContainerVisitorLoaded(loader) {
    if (_icuContainerIterate === void 0) {
      _icuContainerIterate = loader();
    }
  }
  function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {
    if (lNodeToHandle != null) {
      let lContainer;
      let isComponent2 = false;
      if (isLContainer(lNodeToHandle)) {
        lContainer = lNodeToHandle;
      } else if (isLView(lNodeToHandle)) {
        isComponent2 = true;
        ngDevMode && assertDefined(lNodeToHandle[HOST], "HOST must be defined for a component LView");
        lNodeToHandle = lNodeToHandle[HOST];
      }
      const rNode = unwrapRNode(lNodeToHandle);
      if (action === 0 && parent !== null) {
        if (beforeNode == null) {
          nativeAppendChild(renderer, parent, rNode);
        } else {
          nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
        }
      } else if (action === 1 && parent !== null) {
        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
      } else if (action === 2) {
        nativeRemoveNode(renderer, rNode, isComponent2);
      } else if (action === 3) {
        ngDevMode && ngDevMode.rendererDestroyNode++;
        renderer.destroyNode(rNode);
      }
      if (lContainer != null) {
        applyContainer(renderer, action, lContainer, parent, beforeNode);
      }
    }
  }
  function createTextNode(renderer, value) {
    ngDevMode && ngDevMode.rendererCreateTextNode++;
    ngDevMode && ngDevMode.rendererSetText++;
    return renderer.createText(value);
  }
  function updateTextNode(renderer, rNode, value) {
    ngDevMode && ngDevMode.rendererSetText++;
    renderer.setValue(rNode, value);
  }
  function createCommentNode(renderer, value) {
    ngDevMode && ngDevMode.rendererCreateComment++;
    return renderer.createComment(escapeCommentText(value));
  }
  function createElementNode(renderer, name, namespace) {
    ngDevMode && ngDevMode.rendererCreateElement++;
    return renderer.createElement(name, namespace);
  }
  function removeViewFromDOM(tView, lView) {
    detachViewFromDOM(tView, lView);
    lView[HOST] = null;
    lView[T_HOST] = null;
  }
  function addViewToDOM(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {
    lView[HOST] = parentNativeNode;
    lView[T_HOST] = parentTNode;
    applyView(tView, lView, renderer, 1, parentNativeNode, beforeNode);
  }
  function detachViewFromDOM(tView, lView) {
    lView[ENVIRONMENT].changeDetectionScheduler?.notify(
      1
      /* NotificationType.AfterRenderHooks */
    );
    applyView(tView, lView, lView[RENDERER], 2, null, null);
  }
  function destroyViewTree(rootView) {
    let lViewOrLContainer = rootView[CHILD_HEAD];
    if (!lViewOrLContainer) {
      return cleanUpView(rootView[TVIEW], rootView);
    }
    while (lViewOrLContainer) {
      let next = null;
      if (isLView(lViewOrLContainer)) {
        next = lViewOrLContainer[CHILD_HEAD];
      } else {
        ngDevMode && assertLContainer(lViewOrLContainer);
        const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];
        if (firstView)
          next = firstView;
      }
      if (!next) {
        while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {
          if (isLView(lViewOrLContainer)) {
            cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
          }
          lViewOrLContainer = lViewOrLContainer[PARENT];
        }
        if (lViewOrLContainer === null)
          lViewOrLContainer = rootView;
        if (isLView(lViewOrLContainer)) {
          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
        }
        next = lViewOrLContainer && lViewOrLContainer[NEXT];
      }
      lViewOrLContainer = next;
    }
  }
  function insertView(tView, lView, lContainer, index) {
    ngDevMode && assertLView(lView);
    ngDevMode && assertLContainer(lContainer);
    const indexInContainer = CONTAINER_HEADER_OFFSET + index;
    const containerLength = lContainer.length;
    if (index > 0) {
      lContainer[indexInContainer - 1][NEXT] = lView;
    }
    if (index < containerLength - CONTAINER_HEADER_OFFSET) {
      lView[NEXT] = lContainer[indexInContainer];
      addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);
    } else {
      lContainer.push(lView);
      lView[NEXT] = null;
    }
    lView[PARENT] = lContainer;
    const declarationLContainer = lView[DECLARATION_LCONTAINER];
    if (declarationLContainer !== null && lContainer !== declarationLContainer) {
      trackMovedView(declarationLContainer, lView);
    }
    const lQueries = lView[QUERIES];
    if (lQueries !== null) {
      lQueries.insertView(tView);
    }
    updateAncestorTraversalFlagsOnAttach(lView);
    lView[FLAGS] |= 128;
  }
  function trackMovedView(declarationContainer, lView) {
    ngDevMode && assertDefined(lView, "LView required");
    ngDevMode && assertLContainer(declarationContainer);
    const movedViews = declarationContainer[MOVED_VIEWS];
    const insertedLContainer = lView[PARENT];
    ngDevMode && assertLContainer(insertedLContainer);
    const insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];
    ngDevMode && assertDefined(insertedComponentLView, "Missing insertedComponentLView");
    const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];
    ngDevMode && assertDefined(declaredComponentLView, "Missing declaredComponentLView");
    if (declaredComponentLView !== insertedComponentLView) {
      declarationContainer[FLAGS] |= LContainerFlags.HasTransplantedViews;
    }
    if (movedViews === null) {
      declarationContainer[MOVED_VIEWS] = [lView];
    } else {
      movedViews.push(lView);
    }
  }
  function detachMovedView(declarationContainer, lView) {
    ngDevMode && assertLContainer(declarationContainer);
    ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], "A projected view should belong to a non-empty projected views collection");
    const movedViews = declarationContainer[MOVED_VIEWS];
    const declarationViewIndex = movedViews.indexOf(lView);
    ngDevMode && assertLContainer(lView[PARENT]);
    movedViews.splice(declarationViewIndex, 1);
  }
  function detachView(lContainer, removeIndex) {
    if (lContainer.length <= CONTAINER_HEADER_OFFSET)
      return;
    const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;
    const viewToDetach = lContainer[indexInContainer];
    if (viewToDetach) {
      const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];
      if (declarationLContainer !== null && declarationLContainer !== lContainer) {
        detachMovedView(declarationLContainer, viewToDetach);
      }
      if (removeIndex > 0) {
        lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];
      }
      const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);
      removeViewFromDOM(viewToDetach[TVIEW], viewToDetach);
      const lQueries = removedLView[QUERIES];
      if (lQueries !== null) {
        lQueries.detachView(removedLView[TVIEW]);
      }
      viewToDetach[PARENT] = null;
      viewToDetach[NEXT] = null;
      viewToDetach[FLAGS] &= ~128;
    }
    return viewToDetach;
  }
  function destroyLView(tView, lView) {
    if (!(lView[FLAGS] & 256)) {
      const renderer = lView[RENDERER];
      if (renderer.destroyNode) {
        applyView(tView, lView, renderer, 3, null, null);
      }
      destroyViewTree(lView);
    }
  }
  function cleanUpView(tView, lView) {
    if (lView[FLAGS] & 256) {
      return;
    }
    const prevConsumer = setActiveConsumer(null);
    try {
      lView[FLAGS] &= ~128;
      lView[FLAGS] |= 256;
      lView[REACTIVE_TEMPLATE_CONSUMER] && consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);
      executeOnDestroys(tView, lView);
      processCleanups(tView, lView);
      if (lView[TVIEW].type === 1) {
        ngDevMode && ngDevMode.rendererDestroy++;
        lView[RENDERER].destroy();
      }
      const declarationContainer = lView[DECLARATION_LCONTAINER];
      if (declarationContainer !== null && isLContainer(lView[PARENT])) {
        if (declarationContainer !== lView[PARENT]) {
          detachMovedView(declarationContainer, lView);
        }
        const lQueries = lView[QUERIES];
        if (lQueries !== null) {
          lQueries.detachView(tView);
        }
      }
      unregisterLView(lView);
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
  function processCleanups(tView, lView) {
    ngDevMode && assertNotReactive(processCleanups.name);
    const tCleanup = tView.cleanup;
    const lCleanup = lView[CLEANUP];
    if (tCleanup !== null) {
      for (let i = 0; i < tCleanup.length - 1; i += 2) {
        if (typeof tCleanup[i] === "string") {
          const targetIdx = tCleanup[i + 3];
          ngDevMode && assertNumber(targetIdx, "cleanup target must be a number");
          if (targetIdx >= 0) {
            lCleanup[targetIdx]();
          } else {
            lCleanup[-targetIdx].unsubscribe();
          }
          i += 2;
        } else {
          const context2 = lCleanup[tCleanup[i + 1]];
          tCleanup[i].call(context2);
        }
      }
    }
    if (lCleanup !== null) {
      lView[CLEANUP] = null;
    }
    const destroyHooks = lView[ON_DESTROY_HOOKS];
    if (destroyHooks !== null) {
      lView[ON_DESTROY_HOOKS] = null;
      for (let i = 0; i < destroyHooks.length; i++) {
        const destroyHooksFn = destroyHooks[i];
        ngDevMode && assertFunction(destroyHooksFn, "Expecting destroy hook to be a function.");
        destroyHooksFn();
      }
    }
  }
  function executeOnDestroys(tView, lView) {
    ngDevMode && assertNotReactive(executeOnDestroys.name);
    let destroyHooks;
    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
      for (let i = 0; i < destroyHooks.length; i += 2) {
        const context2 = lView[destroyHooks[i]];
        if (!(context2 instanceof NodeInjectorFactory)) {
          const toCall = destroyHooks[i + 1];
          if (Array.isArray(toCall)) {
            for (let j = 0; j < toCall.length; j += 2) {
              const callContext = context2[toCall[j]];
              const hook = toCall[j + 1];
              profiler(4, callContext, hook);
              try {
                hook.call(callContext);
              } finally {
                profiler(5, callContext, hook);
              }
            }
          } else {
            profiler(4, context2, toCall);
            try {
              toCall.call(context2);
            } finally {
              profiler(5, context2, toCall);
            }
          }
        }
      }
    }
  }
  function getParentRElement(tView, tNode, lView) {
    return getClosestRElement(tView, tNode.parent, lView);
  }
  function getClosestRElement(tView, tNode, lView) {
    let parentTNode = tNode;
    while (parentTNode !== null && parentTNode.type & (8 | 32)) {
      tNode = parentTNode;
      parentTNode = tNode.parent;
    }
    if (parentTNode === null) {
      return lView[HOST];
    } else {
      ngDevMode && assertTNodeType(
        parentTNode,
        3 | 4
        /* TNodeType.Container */
      );
      const { componentOffset } = parentTNode;
      if (componentOffset > -1) {
        ngDevMode && assertTNodeForLView(parentTNode, lView);
        const { encapsulation } = tView.data[parentTNode.directiveStart + componentOffset];
        if (encapsulation === ViewEncapsulation$1.None || encapsulation === ViewEncapsulation$1.Emulated) {
          return null;
        }
      }
      return getNativeByTNode(parentTNode, lView);
    }
  }
  function nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {
    ngDevMode && ngDevMode.rendererInsertBefore++;
    renderer.insertBefore(parent, child, beforeNode, isMove);
  }
  function nativeAppendChild(renderer, parent, child) {
    ngDevMode && ngDevMode.rendererAppendChild++;
    ngDevMode && assertDefined(parent, "parent node must be defined");
    renderer.appendChild(parent, child);
  }
  function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {
    if (beforeNode !== null) {
      nativeInsertBefore(renderer, parent, child, beforeNode, isMove);
    } else {
      nativeAppendChild(renderer, parent, child);
    }
  }
  function nativeRemoveChild(renderer, parent, child, isHostElement) {
    renderer.removeChild(parent, child, isHostElement);
  }
  function nativeParentNode(renderer, node) {
    return renderer.parentNode(node);
  }
  function nativeNextSibling(renderer, node) {
    return renderer.nextSibling(node);
  }
  function getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {
    return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);
  }
  function getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {
    if (parentTNode.type & (8 | 32)) {
      return getNativeByTNode(parentTNode, lView);
    }
    return null;
  }
  function setI18nHandling(getInsertInFrontOfRNodeWithI18n2, processI18nInsertBefore2) {
    _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n2;
    _processI18nInsertBefore = processI18nInsertBefore2;
  }
  function appendChild(tView, lView, childRNode, childTNode) {
    const parentRNode = getParentRElement(tView, childTNode, lView);
    const renderer = lView[RENDERER];
    const parentTNode = childTNode.parent || lView[T_HOST];
    const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);
    if (parentRNode != null) {
      if (Array.isArray(childRNode)) {
        for (let i = 0; i < childRNode.length; i++) {
          nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);
        }
      } else {
        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);
      }
    }
    _processI18nInsertBefore !== void 0 && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);
  }
  function getFirstNativeNode(lView, tNode) {
    if (tNode !== null) {
      ngDevMode && assertTNodeType(
        tNode,
        3 | 12 | 32 | 16
        /* TNodeType.Projection */
      );
      const tNodeType = tNode.type;
      if (tNodeType & 3) {
        return getNativeByTNode(tNode, lView);
      } else if (tNodeType & 4) {
        return getBeforeNodeForView(-1, lView[tNode.index]);
      } else if (tNodeType & 8) {
        const elIcuContainerChild = tNode.child;
        if (elIcuContainerChild !== null) {
          return getFirstNativeNode(lView, elIcuContainerChild);
        } else {
          const rNodeOrLContainer = lView[tNode.index];
          if (isLContainer(rNodeOrLContainer)) {
            return getBeforeNodeForView(-1, rNodeOrLContainer);
          } else {
            return unwrapRNode(rNodeOrLContainer);
          }
        }
      } else if (tNodeType & 32) {
        let nextRNode = icuContainerIterate(tNode, lView);
        let rNode = nextRNode();
        return rNode || unwrapRNode(lView[tNode.index]);
      } else {
        const projectionNodes = getProjectionNodes(lView, tNode);
        if (projectionNodes !== null) {
          if (Array.isArray(projectionNodes)) {
            return projectionNodes[0];
          }
          const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
          ngDevMode && assertParentView(parentView);
          return getFirstNativeNode(parentView, projectionNodes);
        } else {
          return getFirstNativeNode(lView, tNode.next);
        }
      }
    }
    return null;
  }
  function getProjectionNodes(lView, tNode) {
    if (tNode !== null) {
      const componentView = lView[DECLARATION_COMPONENT_VIEW];
      const componentHost = componentView[T_HOST];
      const slotIdx = tNode.projection;
      ngDevMode && assertProjectionSlots(lView);
      return componentHost.projection[slotIdx];
    }
    return null;
  }
  function getBeforeNodeForView(viewIndexInContainer, lContainer) {
    const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;
    if (nextViewIndex < lContainer.length) {
      const lView = lContainer[nextViewIndex];
      const firstTNodeOfView = lView[TVIEW].firstChild;
      if (firstTNodeOfView !== null) {
        return getFirstNativeNode(lView, firstTNodeOfView);
      }
    }
    return lContainer[NATIVE];
  }
  function nativeRemoveNode(renderer, rNode, isHostElement) {
    ngDevMode && ngDevMode.rendererRemoveNode++;
    const nativeParent = nativeParentNode(renderer, rNode);
    if (nativeParent) {
      nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);
    }
  }
  function clearElementContents(rElement) {
    rElement.textContent = "";
  }
  function applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {
    while (tNode != null) {
      ngDevMode && assertTNodeForLView(tNode, lView);
      ngDevMode && assertTNodeType(
        tNode,
        3 | 12 | 16 | 32
        /* TNodeType.Icu */
      );
      const rawSlotValue = lView[tNode.index];
      const tNodeType = tNode.type;
      if (isProjection) {
        if (action === 0) {
          rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);
          tNode.flags |= 2;
        }
      }
      if ((tNode.flags & 32) !== 32) {
        if (tNodeType & 8) {
          applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);
          applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
        } else if (tNodeType & 32) {
          const nextRNode = icuContainerIterate(tNode, lView);
          let rNode;
          while (rNode = nextRNode()) {
            applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
          }
          applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
        } else if (tNodeType & 16) {
          applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);
        } else {
          ngDevMode && assertTNodeType(
            tNode,
            3 | 4
            /* TNodeType.Container */
          );
          applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
        }
      }
      tNode = isProjection ? tNode.projectionNext : tNode.next;
    }
  }
  function applyView(tView, lView, renderer, action, parentRElement, beforeNode) {
    applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);
  }
  function applyProjection(tView, lView, tProjectionNode) {
    const renderer = lView[RENDERER];
    const parentRNode = getParentRElement(tView, tProjectionNode, lView);
    const parentTNode = tProjectionNode.parent || lView[T_HOST];
    let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);
    applyProjectionRecursive(renderer, 0, lView, tProjectionNode, parentRNode, beforeNode);
  }
  function applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {
    const componentLView = lView[DECLARATION_COMPONENT_VIEW];
    const componentNode = componentLView[T_HOST];
    ngDevMode && assertEqual(typeof tProjectionNode.projection, "number", "expecting projection index");
    const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];
    if (Array.isArray(nodeToProjectOrRNodes)) {
      for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {
        const rNode = nodeToProjectOrRNodes[i];
        applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
      }
    } else {
      let nodeToProject = nodeToProjectOrRNodes;
      const projectedComponentLView = componentLView[PARENT];
      if (hasInSkipHydrationBlockFlag(tProjectionNode)) {
        nodeToProject.flags |= 128;
      }
      applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);
    }
  }
  function applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {
    ngDevMode && assertLContainer(lContainer);
    const anchor = lContainer[NATIVE];
    const native = unwrapRNode(lContainer);
    if (anchor !== native) {
      applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);
    }
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
      const lView = lContainer[i];
      applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);
    }
  }
  function applyStyling(renderer, isClassBased, rNode, prop, value) {
    if (isClassBased) {
      if (!value) {
        ngDevMode && ngDevMode.rendererRemoveClass++;
        renderer.removeClass(rNode, prop);
      } else {
        ngDevMode && ngDevMode.rendererAddClass++;
        renderer.addClass(rNode, prop);
      }
    } else {
      let flags = prop.indexOf("-") === -1 ? void 0 : RendererStyleFlags2.DashCase;
      if (value == null) {
        ngDevMode && ngDevMode.rendererRemoveStyle++;
        renderer.removeStyle(rNode, prop, flags);
      } else {
        const isImportant = typeof value === "string" ? value.endsWith("!important") : false;
        if (isImportant) {
          value = value.slice(0, -10);
          flags |= RendererStyleFlags2.Important;
        }
        ngDevMode && ngDevMode.rendererSetStyle++;
        renderer.setStyle(rNode, prop, value, flags);
      }
    }
  }
  function writeDirectStyle(renderer, element2, newValue) {
    ngDevMode && assertString(newValue, "'newValue' should be a string");
    renderer.setAttribute(element2, "style", newValue);
    ngDevMode && ngDevMode.rendererSetStyle++;
  }
  function writeDirectClass(renderer, element2, newValue) {
    ngDevMode && assertString(newValue, "'newValue' should be a string");
    if (newValue === "") {
      renderer.removeAttribute(element2, "class");
    } else {
      renderer.setAttribute(element2, "class", newValue);
    }
    ngDevMode && ngDevMode.rendererSetClassName++;
  }
  function setupStaticAttributes(renderer, element2, tNode) {
    const { mergedAttrs, classes, styles: styles2 } = tNode;
    if (mergedAttrs !== null) {
      setUpAttributes(renderer, element2, mergedAttrs);
    }
    if (classes !== null) {
      writeDirectClass(renderer, element2, classes);
    }
    if (styles2 !== null) {
      writeDirectStyle(renderer, element2, styles2);
    }
  }
  function \u0275\u0275advance(delta = 1) {
    ngDevMode && assertGreaterThan(delta, 0, "Can only advance forward");
    selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());
  }
  function selectIndexInternal(tView, lView, index, checkNoChangesMode) {
    ngDevMode && assertIndexInDeclRange(lView[TVIEW], index);
    if (!checkNoChangesMode) {
      const hooksInitPhaseCompleted = (lView[FLAGS] & 3) === 3;
      if (hooksInitPhaseCompleted) {
        const preOrderCheckHooks = tView.preOrderCheckHooks;
        if (preOrderCheckHooks !== null) {
          executeCheckHooks(lView, preOrderCheckHooks, index);
        }
      } else {
        const preOrderHooks = tView.preOrderHooks;
        if (preOrderHooks !== null) {
          executeInitAndCheckHooks(lView, preOrderHooks, 0, index);
        }
      }
    }
    setSelectedIndex(index);
  }
  function \u0275\u0275directiveInject(token, flags = InjectFlags.Default) {
    const lView = getLView();
    if (lView === null) {
      ngDevMode && assertInjectImplementationNotEqual(\u0275\u0275directiveInject);
      return \u0275\u0275inject(token, flags);
    }
    const tNode = getCurrentTNode();
    const value = getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);
    ngDevMode && emitInjectEvent(token, value, flags);
    return value;
  }
  function \u0275\u0275invalidFactory() {
    const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : "invalid";
    throw new Error(msg);
  }
  function writeToDirectiveInput(def, instance, publicName, privateName, flags, value) {
    const prevConsumer = setActiveConsumer(null);
    try {
      let inputSignalNode = null;
      if ((flags & InputFlags.SignalBased) !== 0) {
        const field = instance[privateName];
        inputSignalNode = field[SIGNAL];
      }
      if (inputSignalNode !== null && inputSignalNode.transformFn !== void 0) {
        value = inputSignalNode.transformFn(value);
      }
      if ((flags & InputFlags.HasDecoratorInputTransform) !== 0) {
        value = def.inputTransforms[privateName].call(instance, value);
      }
      if (def.setInput !== null) {
        def.setInput(instance, inputSignalNode, value, publicName, privateName);
      } else {
        applyValueToInputField(instance, inputSignalNode, privateName, value);
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
  function processHostBindingOpCodes(tView, lView) {
    const hostBindingOpCodes = tView.hostBindingOpCodes;
    if (hostBindingOpCodes === null)
      return;
    try {
      for (let i = 0; i < hostBindingOpCodes.length; i++) {
        const opCode = hostBindingOpCodes[i];
        if (opCode < 0) {
          setSelectedIndex(~opCode);
        } else {
          const directiveIdx = opCode;
          const bindingRootIndx = hostBindingOpCodes[++i];
          const hostBindingFn = hostBindingOpCodes[++i];
          setBindingRootForHostBindings(bindingRootIndx, directiveIdx);
          const context2 = lView[directiveIdx];
          hostBindingFn(2, context2);
        }
      }
    } finally {
      setSelectedIndex(-1);
    }
  }
  function createLView(parentLView, tView, context2, flags, host, tHostNode, environment2, renderer, injector, embeddedViewInjector, hydrationInfo) {
    const lView = tView.blueprint.slice();
    lView[HOST] = host;
    lView[FLAGS] = flags | 4 | 128 | 8 | 64;
    if (embeddedViewInjector !== null || parentLView && parentLView[FLAGS] & 2048) {
      lView[FLAGS] |= 2048;
    }
    resetPreOrderHookFlags(lView);
    ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);
    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;
    lView[CONTEXT] = context2;
    lView[ENVIRONMENT] = environment2 || parentLView && parentLView[ENVIRONMENT];
    ngDevMode && assertDefined(lView[ENVIRONMENT], "LViewEnvironment is required");
    lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];
    ngDevMode && assertDefined(lView[RENDERER], "Renderer is required");
    lView[INJECTOR] = injector || parentLView && parentLView[INJECTOR] || null;
    lView[T_HOST] = tHostNode;
    lView[ID] = getUniqueLViewId();
    lView[HYDRATION] = hydrationInfo;
    lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;
    ngDevMode && assertEqual(tView.type == 2 ? parentLView !== null : true, true, "Embedded views must have parentLView");
    lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2 ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;
    return lView;
  }
  function getOrCreateTNode(tView, index, type, name, attrs) {
    ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
    // `view_engine_compatibility` for additional context.
    assertGreaterThanOrEqual(index, HEADER_OFFSET, "TNodes can't be in the LView header.");
    ngDevMode && assertPureTNodeType(type);
    let tNode = tView.data[index];
    if (tNode === null) {
      tNode = createTNodeAtIndex(tView, index, type, name, attrs);
      if (isInI18nBlock()) {
        tNode.flags |= 32;
      }
    } else if (tNode.type & 64) {
      tNode.type = type;
      tNode.value = name;
      tNode.attrs = attrs;
      const parent = getCurrentParentTNode();
      tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;
      ngDevMode && assertTNodeForTView(tNode, tView);
      ngDevMode && assertEqual(index, tNode.index, "Expecting same index");
    }
    setCurrentTNode(tNode, true);
    return tNode;
  }
  function createTNodeAtIndex(tView, index, type, name, attrs) {
    const currentTNode = getCurrentTNodePlaceholderOk();
    const isParent = isCurrentTNodeParent();
    const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;
    const tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs);
    if (tView.firstChild === null) {
      tView.firstChild = tNode;
    }
    if (currentTNode !== null) {
      if (isParent) {
        if (currentTNode.child == null && tNode.parent !== null) {
          currentTNode.child = tNode;
        }
      } else {
        if (currentTNode.next === null) {
          currentTNode.next = tNode;
          tNode.prev = currentTNode;
        }
      }
    }
    return tNode;
  }
  function allocExpando(tView, lView, numSlotsToAlloc, initialValue) {
    if (numSlotsToAlloc === 0)
      return -1;
    if (ngDevMode) {
      assertFirstCreatePass(tView);
      assertSame(tView, lView[TVIEW], "`LView` must be associated with `TView`!");
      assertEqual(tView.data.length, lView.length, "Expecting LView to be same size as TView");
      assertEqual(tView.data.length, tView.blueprint.length, "Expecting Blueprint to be same size as TView");
      assertFirstUpdatePass(tView);
    }
    const allocIdx = lView.length;
    for (let i = 0; i < numSlotsToAlloc; i++) {
      lView.push(initialValue);
      tView.blueprint.push(initialValue);
      tView.data.push(null);
    }
    return allocIdx;
  }
  function executeTemplate(tView, lView, templateFn, rf, context2) {
    const prevSelectedIndex = getSelectedIndex();
    const isUpdatePhase = rf & 2;
    try {
      setSelectedIndex(-1);
      if (isUpdatePhase && lView.length > HEADER_OFFSET) {
        selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());
      }
      const preHookType = isUpdatePhase ? 2 : 0;
      profiler(preHookType, context2);
      templateFn(rf, context2);
    } finally {
      setSelectedIndex(prevSelectedIndex);
      const postHookType = isUpdatePhase ? 3 : 1;
      profiler(postHookType, context2);
    }
  }
  function executeContentQueries(tView, tNode, lView) {
    if (isContentQueryHost(tNode)) {
      const prevConsumer = setActiveConsumer(null);
      try {
        const start = tNode.directiveStart;
        const end = tNode.directiveEnd;
        for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {
          const def = tView.data[directiveIndex];
          if (def.contentQueries) {
            const directiveInstance = lView[directiveIndex];
            ngDevMode && assertDefined(directiveIndex, "Incorrect reference to a directive defining a content query");
            def.contentQueries(1, directiveInstance, directiveIndex);
          }
        }
      } finally {
        setActiveConsumer(prevConsumer);
      }
    }
  }
  function createDirectivesInstances(tView, lView, tNode) {
    if (!getBindingsEnabled())
      return;
    instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));
    if ((tNode.flags & 64) === 64) {
      invokeDirectivesHostBindings(tView, lView, tNode);
    }
  }
  function saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {
    const localNames = tNode.localNames;
    if (localNames !== null) {
      let localIndex = tNode.index + 1;
      for (let i = 0; i < localNames.length; i += 2) {
        const index = localNames[i + 1];
        const value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];
        viewData[localIndex++] = value;
      }
    }
  }
  function getOrCreateComponentTView(def) {
    const tView = def.tView;
    if (tView === null || tView.incompleteFirstPass) {
      const declTNode = null;
      return def.tView = createTView(1, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts, def.id);
    }
    return tView;
  }
  function createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory, ssrId) {
    ngDevMode && ngDevMode.tView++;
    const bindingStartIndex = HEADER_OFFSET + decls;
    const initialViewLength = bindingStartIndex + vars;
    const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);
    const consts = typeof constsOrFactory === "function" ? constsOrFactory() : constsOrFactory;
    const tView = blueprint[TVIEW] = {
      type,
      blueprint,
      template: templateFn,
      queries: null,
      viewQuery,
      declTNode,
      data: blueprint.slice().fill(null, bindingStartIndex),
      bindingStartIndex,
      expandoStartIndex: initialViewLength,
      hostBindingOpCodes: null,
      firstCreatePass: true,
      firstUpdatePass: true,
      staticViewQueries: false,
      staticContentQueries: false,
      preOrderHooks: null,
      preOrderCheckHooks: null,
      contentHooks: null,
      contentCheckHooks: null,
      viewHooks: null,
      viewCheckHooks: null,
      destroyHooks: null,
      cleanup: null,
      contentQueries: null,
      components: null,
      directiveRegistry: typeof directives === "function" ? directives() : directives,
      pipeRegistry: typeof pipes === "function" ? pipes() : pipes,
      firstChild: null,
      schemas,
      consts,
      incompleteFirstPass: false,
      ssrId
    };
    if (ngDevMode) {
      Object.seal(tView);
    }
    return tView;
  }
  function createViewBlueprint(bindingStartIndex, initialViewLength) {
    const blueprint = [];
    for (let i = 0; i < initialViewLength; i++) {
      blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);
    }
    return blueprint;
  }
  function locateHostElement(renderer, elementOrSelector, encapsulation, injector) {
    const preserveHostContent = injector.get(PRESERVE_HOST_CONTENT, PRESERVE_HOST_CONTENT_DEFAULT);
    const preserveContent = preserveHostContent || encapsulation === ViewEncapsulation$1.ShadowDom;
    const rootElement = renderer.selectRootElement(elementOrSelector, preserveContent);
    applyRootElementTransform(rootElement);
    return rootElement;
  }
  function applyRootElementTransform(rootElement) {
    _applyRootElementTransformImpl(rootElement);
  }
  function applyRootElementTransformImpl(rootElement) {
    if (hasSkipHydrationAttrOnRElement(rootElement)) {
      clearElementContents(rootElement);
    } else {
      processTextNodeMarkersBeforeHydration(rootElement);
    }
  }
  function enableApplyRootElementTransformImpl() {
    _applyRootElementTransformImpl = applyRootElementTransformImpl;
  }
  function storeCleanupWithContext(tView, lView, context2, cleanupFn) {
    const lCleanup = getOrCreateLViewCleanup(lView);
    ngDevMode && assertDefined(context2, "Cleanup context is mandatory when registering framework-level destroy hooks");
    lCleanup.push(context2);
    if (tView.firstCreatePass) {
      getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);
    } else {
      if (ngDevMode) {
        Object.freeze(getOrCreateTViewCleanup(tView));
      }
    }
  }
  function createTNode(tView, tParent, type, index, value, attrs) {
    ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
    // `view_engine_compatibility` for additional context.
    assertGreaterThanOrEqual(index, HEADER_OFFSET, "TNodes can't be in the LView header.");
    ngDevMode && assertNotSame(attrs, void 0, "'undefined' is not valid value for 'attrs'");
    ngDevMode && ngDevMode.tNode++;
    ngDevMode && tParent && assertTNodeForTView(tParent, tView);
    let injectorIndex = tParent ? tParent.injectorIndex : -1;
    let flags = 0;
    if (isInSkipHydrationBlock$1()) {
      flags |= 128;
    }
    const tNode = {
      type,
      index,
      insertBeforeIndex: null,
      injectorIndex,
      directiveStart: -1,
      directiveEnd: -1,
      directiveStylingLast: -1,
      componentOffset: -1,
      propertyBindings: null,
      flags,
      providerIndexes: 0,
      value,
      attrs,
      mergedAttrs: null,
      localNames: null,
      initialInputs: void 0,
      inputs: null,
      outputs: null,
      tView: null,
      next: null,
      prev: null,
      projectionNext: null,
      child: null,
      parent: tParent,
      projection: null,
      styles: null,
      stylesWithoutHost: null,
      residualStyles: void 0,
      classes: null,
      classesWithoutHost: null,
      residualClasses: void 0,
      classBindings: 0,
      styleBindings: 0
    };
    if (ngDevMode) {
      Object.seal(tNode);
    }
    return tNode;
  }
  function captureNodeBindings(mode, aliasMap, directiveIndex, bindingsResult, hostDirectiveAliasMap) {
    for (let publicName in aliasMap) {
      if (!aliasMap.hasOwnProperty(publicName)) {
        continue;
      }
      const value = aliasMap[publicName];
      if (value === void 0) {
        continue;
      }
      bindingsResult ??= {};
      let internalName;
      let inputFlags = InputFlags.None;
      if (Array.isArray(value)) {
        internalName = value[0];
        inputFlags = value[1];
      } else {
        internalName = value;
      }
      let finalPublicName = publicName;
      if (hostDirectiveAliasMap !== null) {
        if (!hostDirectiveAliasMap.hasOwnProperty(publicName)) {
          continue;
        }
        finalPublicName = hostDirectiveAliasMap[publicName];
      }
      if (mode === 0) {
        addPropertyBinding(bindingsResult, directiveIndex, finalPublicName, internalName, inputFlags);
      } else {
        addPropertyBinding(bindingsResult, directiveIndex, finalPublicName, internalName);
      }
    }
    return bindingsResult;
  }
  function addPropertyBinding(bindings, directiveIndex, publicName, internalName, inputFlags) {
    let values;
    if (bindings.hasOwnProperty(publicName)) {
      (values = bindings[publicName]).push(directiveIndex, internalName);
    } else {
      values = bindings[publicName] = [directiveIndex, internalName];
    }
    if (inputFlags !== void 0) {
      values.push(inputFlags);
    }
  }
  function initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefinitionMap) {
    ngDevMode && assertFirstCreatePass(tView);
    const start = tNode.directiveStart;
    const end = tNode.directiveEnd;
    const tViewData = tView.data;
    const tNodeAttrs = tNode.attrs;
    const inputsFromAttrs = [];
    let inputsStore = null;
    let outputsStore = null;
    for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {
      const directiveDef = tViewData[directiveIndex];
      const aliasData = hostDirectiveDefinitionMap ? hostDirectiveDefinitionMap.get(directiveDef) : null;
      const aliasedInputs = aliasData ? aliasData.inputs : null;
      const aliasedOutputs = aliasData ? aliasData.outputs : null;
      inputsStore = captureNodeBindings(0, directiveDef.inputs, directiveIndex, inputsStore, aliasedInputs);
      outputsStore = captureNodeBindings(1, directiveDef.outputs, directiveIndex, outputsStore, aliasedOutputs);
      const initialInputs = inputsStore !== null && tNodeAttrs !== null && !isInlineTemplate(tNode) ? generateInitialInputs(inputsStore, directiveIndex, tNodeAttrs) : null;
      inputsFromAttrs.push(initialInputs);
    }
    if (inputsStore !== null) {
      if (inputsStore.hasOwnProperty("class")) {
        tNode.flags |= 8;
      }
      if (inputsStore.hasOwnProperty("style")) {
        tNode.flags |= 16;
      }
    }
    tNode.initialInputs = inputsFromAttrs;
    tNode.inputs = inputsStore;
    tNode.outputs = outputsStore;
  }
  function mapPropName(name) {
    if (name === "class")
      return "className";
    if (name === "for")
      return "htmlFor";
    if (name === "formaction")
      return "formAction";
    if (name === "innerHtml")
      return "innerHTML";
    if (name === "readonly")
      return "readOnly";
    if (name === "tabindex")
      return "tabIndex";
    return name;
  }
  function elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {
    ngDevMode && assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
    const element2 = getNativeByTNode(tNode, lView);
    let inputData = tNode.inputs;
    let dataValue;
    if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {
      setInputsForProperty(tView, lView, dataValue, propName, value);
      if (isComponentHost(tNode))
        markDirtyIfOnPush(lView, tNode.index);
      if (ngDevMode) {
        setNgReflectProperties(lView, element2, tNode.type, dataValue, value);
      }
    } else if (tNode.type & 3) {
      propName = mapPropName(propName);
      if (ngDevMode) {
        validateAgainstEventProperties(propName);
        if (!isPropertyValid(element2, propName, tNode.value, tView.schemas)) {
          handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);
        }
        ngDevMode.rendererSetProperty++;
      }
      value = sanitizer != null ? sanitizer(value, tNode.value || "", propName) : value;
      renderer.setProperty(element2, propName, value);
    } else if (tNode.type & 12) {
      if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {
        handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);
      }
    }
  }
  function markDirtyIfOnPush(lView, viewIndex) {
    ngDevMode && assertLView(lView);
    const childComponentLView = getComponentLViewByIndex(viewIndex, lView);
    if (!(childComponentLView[FLAGS] & 16)) {
      childComponentLView[FLAGS] |= 64;
    }
  }
  function setNgReflectProperty(lView, element2, type, attrName, value) {
    const renderer = lView[RENDERER];
    attrName = normalizeDebugBindingName(attrName);
    const debugValue = normalizeDebugBindingValue(value);
    if (type & 3) {
      if (value == null) {
        renderer.removeAttribute(element2, attrName);
      } else {
        renderer.setAttribute(element2, attrName, debugValue);
      }
    } else {
      const textContent = escapeCommentText(`bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`);
      renderer.setValue(element2, textContent);
    }
  }
  function setNgReflectProperties(lView, element2, type, dataValue, value) {
    if (type & (3 | 4)) {
      for (let i = 0; i < dataValue.length; i += 3) {
        setNgReflectProperty(lView, element2, type, dataValue[i + 1], value);
      }
    }
  }
  function resolveDirectives(tView, lView, tNode, localRefs) {
    ngDevMode && assertFirstCreatePass(tView);
    if (getBindingsEnabled()) {
      const exportsMap = localRefs === null ? null : { "": -1 };
      const matchResult = findDirectiveDefMatches(tView, tNode);
      let directiveDefs;
      let hostDirectiveDefs;
      if (matchResult === null) {
        directiveDefs = hostDirectiveDefs = null;
      } else {
        [directiveDefs, hostDirectiveDefs] = matchResult;
      }
      if (directiveDefs !== null) {
        initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs);
      }
      if (exportsMap)
        cacheMatchingLocalNames(tNode, localRefs, exportsMap);
    }
    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
  }
  function initializeDirectives(tView, lView, tNode, directives, exportsMap, hostDirectiveDefs) {
    ngDevMode && assertFirstCreatePass(tView);
    for (let i = 0; i < directives.length; i++) {
      diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, directives[i].type);
    }
    initTNodeFlags(tNode, tView.data.length, directives.length);
    for (let i = 0; i < directives.length; i++) {
      const def = directives[i];
      if (def.providersResolver)
        def.providersResolver(def);
    }
    let preOrderHooksFound = false;
    let preOrderCheckHooksFound = false;
    let directiveIdx = allocExpando(tView, lView, directives.length, null);
    ngDevMode && assertSame(directiveIdx, tNode.directiveStart, "TNode.directiveStart should point to just allocated space");
    for (let i = 0; i < directives.length; i++) {
      const def = directives[i];
      tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);
      configureViewWithDirective(tView, tNode, lView, directiveIdx, def);
      saveNameToExportMap(directiveIdx, def, exportsMap);
      if (def.contentQueries !== null)
        tNode.flags |= 4;
      if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0)
        tNode.flags |= 64;
      const lifeCycleHooks = def.type.prototype;
      if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {
        (tView.preOrderHooks ??= []).push(tNode.index);
        preOrderHooksFound = true;
      }
      if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {
        (tView.preOrderCheckHooks ??= []).push(tNode.index);
        preOrderCheckHooksFound = true;
      }
      directiveIdx++;
    }
    initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);
  }
  function registerHostBindingOpCodes(tView, tNode, directiveIdx, directiveVarsIdx, def) {
    ngDevMode && assertFirstCreatePass(tView);
    const hostBindings = def.hostBindings;
    if (hostBindings) {
      let hostBindingOpCodes = tView.hostBindingOpCodes;
      if (hostBindingOpCodes === null) {
        hostBindingOpCodes = tView.hostBindingOpCodes = [];
      }
      const elementIndx = ~tNode.index;
      if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {
        hostBindingOpCodes.push(elementIndx);
      }
      hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);
    }
  }
  function lastSelectedElementIdx(hostBindingOpCodes) {
    let i = hostBindingOpCodes.length;
    while (i > 0) {
      const value = hostBindingOpCodes[--i];
      if (typeof value === "number" && value < 0) {
        return value;
      }
    }
    return 0;
  }
  function instantiateAllDirectives(tView, lView, tNode, native) {
    const start = tNode.directiveStart;
    const end = tNode.directiveEnd;
    if (isComponentHost(tNode)) {
      ngDevMode && assertTNodeType(
        tNode,
        3
        /* TNodeType.AnyRNode */
      );
      addComponentLogic(lView, tNode, tView.data[start + tNode.componentOffset]);
    }
    if (!tView.firstCreatePass) {
      getOrCreateNodeInjectorForNode(tNode, lView);
    }
    attachPatchData(native, lView);
    const initialInputs = tNode.initialInputs;
    for (let i = start; i < end; i++) {
      const def = tView.data[i];
      const directive = getNodeInjectable(lView, tView, i, tNode);
      attachPatchData(directive, lView);
      if (initialInputs !== null) {
        setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);
      }
      if (isComponentDef(def)) {
        const componentView = getComponentLViewByIndex(tNode.index, lView);
        componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);
      }
    }
  }
  function invokeDirectivesHostBindings(tView, lView, tNode) {
    const start = tNode.directiveStart;
    const end = tNode.directiveEnd;
    const elementIndex = tNode.index;
    const currentDirectiveIndex = getCurrentDirectiveIndex();
    try {
      setSelectedIndex(elementIndex);
      for (let dirIndex = start; dirIndex < end; dirIndex++) {
        const def = tView.data[dirIndex];
        const directive = lView[dirIndex];
        setCurrentDirectiveIndex(dirIndex);
        if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {
          invokeHostBindingsInCreationMode(def, directive);
        }
      }
    } finally {
      setSelectedIndex(-1);
      setCurrentDirectiveIndex(currentDirectiveIndex);
    }
  }
  function invokeHostBindingsInCreationMode(def, directive) {
    if (def.hostBindings !== null) {
      def.hostBindings(1, directive);
    }
  }
  function findDirectiveDefMatches(tView, tNode) {
    ngDevMode && assertFirstCreatePass(tView);
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12
      /* TNodeType.AnyContainer */
    );
    const registry = tView.directiveRegistry;
    let matches2 = null;
    let hostDirectiveDefs = null;
    if (registry) {
      for (let i = 0; i < registry.length; i++) {
        const def = registry[i];
        if (isNodeMatchingSelectorList(
          tNode,
          def.selectors,
          /* isProjectionMode */
          false
        )) {
          matches2 || (matches2 = []);
          if (isComponentDef(def)) {
            if (ngDevMode) {
              assertTNodeType(tNode, 2, `"${tNode.value}" tags cannot be used as component hosts. Please use a different tag to activate the ${stringify(def.type)} component.`);
              if (isComponentHost(tNode)) {
                throwMultipleComponentError(tNode, matches2.find(isComponentDef).type, def.type);
              }
            }
            if (def.findHostDirectiveDefs !== null) {
              const hostDirectiveMatches = [];
              hostDirectiveDefs = hostDirectiveDefs || /* @__PURE__ */ new Map();
              def.findHostDirectiveDefs(def, hostDirectiveMatches, hostDirectiveDefs);
              matches2.unshift(...hostDirectiveMatches, def);
              const componentOffset = hostDirectiveMatches.length;
              markAsComponentHost(tView, tNode, componentOffset);
            } else {
              matches2.unshift(def);
              markAsComponentHost(tView, tNode, 0);
            }
          } else {
            hostDirectiveDefs = hostDirectiveDefs || /* @__PURE__ */ new Map();
            def.findHostDirectiveDefs?.(def, matches2, hostDirectiveDefs);
            matches2.push(def);
          }
        }
      }
    }
    ngDevMode && matches2 !== null && assertNoDuplicateDirectives(matches2);
    return matches2 === null ? null : [matches2, hostDirectiveDefs];
  }
  function markAsComponentHost(tView, hostTNode, componentOffset) {
    ngDevMode && assertFirstCreatePass(tView);
    ngDevMode && assertGreaterThan(componentOffset, -1, "componentOffset must be great than -1");
    hostTNode.componentOffset = componentOffset;
    (tView.components ??= []).push(hostTNode.index);
  }
  function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {
    if (localRefs) {
      const localNames = tNode.localNames = [];
      for (let i = 0; i < localRefs.length; i += 2) {
        const index = exportsMap[localRefs[i + 1]];
        if (index == null)
          throw new RuntimeError(-301, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);
        localNames.push(localRefs[i], index);
      }
    }
  }
  function saveNameToExportMap(directiveIdx, def, exportsMap) {
    if (exportsMap) {
      if (def.exportAs) {
        for (let i = 0; i < def.exportAs.length; i++) {
          exportsMap[def.exportAs[i]] = directiveIdx;
        }
      }
      if (isComponentDef(def))
        exportsMap[""] = directiveIdx;
    }
  }
  function initTNodeFlags(tNode, index, numberOfDirectives) {
    ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, "Reached the max number of directives");
    tNode.flags |= 1;
    tNode.directiveStart = index;
    tNode.directiveEnd = index + numberOfDirectives;
    tNode.providerIndexes = index;
  }
  function configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {
    ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, "Must be in Expando section");
    tView.data[directiveIndex] = def;
    const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));
    const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), \u0275\u0275directiveInject);
    tView.blueprint[directiveIndex] = nodeInjectorFactory;
    lView[directiveIndex] = nodeInjectorFactory;
    registerHostBindingOpCodes(tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);
  }
  function addComponentLogic(lView, hostTNode, def) {
    const native = getNativeByTNode(hostTNode, lView);
    const tView = getOrCreateComponentTView(def);
    const rendererFactory = lView[ENVIRONMENT].rendererFactory;
    let lViewFlags = 16;
    if (def.signals) {
      lViewFlags = 4096;
    } else if (def.onPush) {
      lViewFlags = 64;
    }
    const componentView = addToViewTree(lView, createLView(lView, tView, null, lViewFlags, native, hostTNode, null, rendererFactory.createRenderer(native, def), null, null, null));
    lView[hostTNode.index] = componentView;
  }
  function elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {
    if (ngDevMode) {
      assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
      validateAgainstEventAttributes(name);
      assertTNodeType(tNode, 2, `Attempted to set attribute \`${name}\` on a container node. Host bindings are not valid on ng-container or ng-template.`);
    }
    const element2 = getNativeByTNode(tNode, lView);
    setElementAttribute(lView[RENDERER], element2, namespace, tNode.value, name, value, sanitizer);
  }
  function setElementAttribute(renderer, element2, namespace, tagName, name, value, sanitizer) {
    if (value == null) {
      ngDevMode && ngDevMode.rendererRemoveAttribute++;
      renderer.removeAttribute(element2, name, namespace);
    } else {
      ngDevMode && ngDevMode.rendererSetAttribute++;
      const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || "", name);
      renderer.setAttribute(element2, name, strValue, namespace);
    }
  }
  function setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {
    const initialInputs = initialInputData[directiveIndex];
    if (initialInputs !== null) {
      for (let i = 0; i < initialInputs.length; ) {
        const publicName = initialInputs[i++];
        const privateName = initialInputs[i++];
        const flags = initialInputs[i++];
        const value = initialInputs[i++];
        writeToDirectiveInput(def, instance, publicName, privateName, flags, value);
        if (ngDevMode) {
          const nativeElement = getNativeByTNode(tNode, lView);
          setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);
        }
      }
    }
  }
  function generateInitialInputs(inputs, directiveIndex, attrs) {
    let inputsToStore = null;
    let i = 0;
    while (i < attrs.length) {
      const attrName = attrs[i];
      if (attrName === 0) {
        i += 4;
        continue;
      } else if (attrName === 5) {
        i += 2;
        continue;
      }
      if (typeof attrName === "number")
        break;
      if (inputs.hasOwnProperty(attrName)) {
        if (inputsToStore === null)
          inputsToStore = [];
        const inputConfig = inputs[attrName];
        for (let j = 0; j < inputConfig.length; j += 3) {
          if (inputConfig[j] === directiveIndex) {
            inputsToStore.push(attrName, inputConfig[j + 1], inputConfig[j + 2], attrs[i + 1]);
            break;
          }
        }
      }
      i += 2;
    }
    return inputsToStore;
  }
  function createLContainer(hostNative, currentView, native, tNode) {
    ngDevMode && assertLView(currentView);
    const lContainer = [
      hostNative,
      // host native
      true,
      // Boolean `true` in this position signifies that this is an `LContainer`
      0,
      // flags
      currentView,
      // parent
      null,
      // next
      tNode,
      // t_host
      null,
      // dehydrated views
      native,
      // native,
      null,
      // view refs
      null
      // moved views
    ];
    ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, "Should allocate correct number of slots for LContainer header.");
    return lContainer;
  }
  function refreshContentQueries(tView, lView) {
    const contentQueries = tView.contentQueries;
    if (contentQueries !== null) {
      const prevConsumer = setActiveConsumer(null);
      try {
        for (let i = 0; i < contentQueries.length; i += 2) {
          const queryStartIdx = contentQueries[i];
          const directiveDefIdx = contentQueries[i + 1];
          if (directiveDefIdx !== -1) {
            const directiveDef = tView.data[directiveDefIdx];
            ngDevMode && assertDefined(directiveDef, "DirectiveDef not found.");
            ngDevMode && assertDefined(directiveDef.contentQueries, "contentQueries function should be defined");
            setCurrentQueryIndex(queryStartIdx);
            directiveDef.contentQueries(2, lView[directiveDefIdx], directiveDefIdx);
          }
        }
      } finally {
        setActiveConsumer(prevConsumer);
      }
    }
  }
  function addToViewTree(lView, lViewOrLContainer) {
    if (lView[CHILD_HEAD]) {
      lView[CHILD_TAIL][NEXT] = lViewOrLContainer;
    } else {
      lView[CHILD_HEAD] = lViewOrLContainer;
    }
    lView[CHILD_TAIL] = lViewOrLContainer;
    return lViewOrLContainer;
  }
  function executeViewQueryFn(flags, viewQueryFn, component) {
    ngDevMode && assertDefined(viewQueryFn, "View queries function to execute must be defined.");
    setCurrentQueryIndex(0);
    const prevConsumer = setActiveConsumer(null);
    try {
      viewQueryFn(flags, component);
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
  function storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {
    if (tData[bindingIndex] === null) {
      if (tNode.inputs == null || !tNode.inputs[propertyName]) {
        const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);
        propBindingIdxs.push(bindingIndex);
        let bindingMetadata = propertyName;
        if (interpolationParts.length > 0) {
          bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);
        }
        tData[bindingIndex] = bindingMetadata;
      }
    }
  }
  function getOrCreateLViewCleanup(view) {
    return view[CLEANUP] || (view[CLEANUP] = []);
  }
  function getOrCreateTViewCleanup(tView) {
    return tView.cleanup || (tView.cleanup = []);
  }
  function loadComponentRenderer(currentDef, tNode, lView) {
    if (currentDef === null || isComponentDef(currentDef)) {
      lView = unwrapLView(lView[tNode.index]);
    }
    return lView[RENDERER];
  }
  function handleError(lView, error2) {
    const injector = lView[INJECTOR];
    const errorHandler2 = injector ? injector.get(ErrorHandler, null) : null;
    errorHandler2 && errorHandler2.handleError(error2);
  }
  function setInputsForProperty(tView, lView, inputs, publicName, value) {
    for (let i = 0; i < inputs.length; ) {
      const index = inputs[i++];
      const privateName = inputs[i++];
      const flags = inputs[i++];
      const instance = lView[index];
      ngDevMode && assertIndexInRange(lView, index);
      const def = tView.data[index];
      writeToDirectiveInput(def, instance, publicName, privateName, flags, value);
    }
  }
  function textBindingInternal(lView, index, value) {
    ngDevMode && assertString(value, "Value should be a string");
    ngDevMode && assertNotSame(value, NO_CHANGE, "value should not be NO_CHANGE");
    ngDevMode && assertIndexInRange(lView, index);
    const element2 = getNativeByIndex(index, lView);
    ngDevMode && assertDefined(element2, "native element should exist");
    updateTextNode(lView[RENDERER], element2, value);
  }
  function renderComponent(hostLView, componentHostIdx) {
    ngDevMode && assertEqual(isCreationMode(hostLView), true, "Should be run in creation mode");
    const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
    const componentTView = componentView[TVIEW];
    syncViewWithBlueprint(componentTView, componentView);
    const hostRNode = componentView[HOST];
    if (hostRNode !== null && componentView[HYDRATION] === null) {
      componentView[HYDRATION] = retrieveHydrationInfo(hostRNode, componentView[INJECTOR]);
    }
    renderView(componentTView, componentView, componentView[CONTEXT]);
  }
  function syncViewWithBlueprint(tView, lView) {
    for (let i = lView.length; i < tView.blueprint.length; i++) {
      lView.push(tView.blueprint[i]);
    }
  }
  function renderView(tView, lView, context2) {
    ngDevMode && assertEqual(isCreationMode(lView), true, "Should be run in creation mode");
    ngDevMode && assertNotReactive(renderView.name);
    enterView(lView);
    try {
      const viewQuery = tView.viewQuery;
      if (viewQuery !== null) {
        executeViewQueryFn(1, viewQuery, context2);
      }
      const templateFn = tView.template;
      if (templateFn !== null) {
        executeTemplate(tView, lView, templateFn, 1, context2);
      }
      if (tView.firstCreatePass) {
        tView.firstCreatePass = false;
      }
      lView[QUERIES]?.finishViewCreation(tView);
      if (tView.staticContentQueries) {
        refreshContentQueries(tView, lView);
      }
      if (tView.staticViewQueries) {
        executeViewQueryFn(2, tView.viewQuery, context2);
      }
      const components = tView.components;
      if (components !== null) {
        renderChildComponents(lView, components);
      }
    } catch (error2) {
      if (tView.firstCreatePass) {
        tView.incompleteFirstPass = true;
        tView.firstCreatePass = false;
      }
      throw error2;
    } finally {
      lView[FLAGS] &= ~4;
      leaveView();
    }
  }
  function renderChildComponents(hostLView, components) {
    for (let i = 0; i < components.length; i++) {
      renderComponent(hostLView, components[i]);
    }
  }
  function createAndRenderEmbeddedLView(declarationLView, templateTNode, context2, options) {
    const prevConsumer = setActiveConsumer(null);
    try {
      const embeddedTView = templateTNode.tView;
      ngDevMode && assertDefined(embeddedTView, "TView must be defined for a template node.");
      ngDevMode && assertTNodeForLView(templateTNode, declarationLView);
      const isSignalView = declarationLView[FLAGS] & 4096;
      const viewFlags = isSignalView ? 4096 : 16;
      const embeddedLView = createLView(declarationLView, embeddedTView, context2, viewFlags, null, templateTNode, null, null, options?.injector ?? null, options?.embeddedViewInjector ?? null, options?.dehydratedView ?? null);
      const declarationLContainer = declarationLView[templateTNode.index];
      ngDevMode && assertLContainer(declarationLContainer);
      embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;
      const declarationViewLQueries = declarationLView[QUERIES];
      if (declarationViewLQueries !== null) {
        embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);
      }
      renderView(embeddedTView, embeddedLView, context2);
      return embeddedLView;
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
  function getLViewFromLContainer(lContainer, index) {
    const adjustedIndex = CONTAINER_HEADER_OFFSET + index;
    if (adjustedIndex < lContainer.length) {
      const lView = lContainer[adjustedIndex];
      ngDevMode && assertLView(lView);
      return lView;
    }
    return void 0;
  }
  function shouldAddViewToDom(tNode, dehydratedView) {
    return !dehydratedView || dehydratedView.firstChild === null || hasInSkipHydrationBlockFlag(tNode);
  }
  function addLViewToLContainer(lContainer, lView, index, addToDOM = true) {
    const tView = lView[TVIEW];
    insertView(tView, lView, lContainer, index);
    if (addToDOM) {
      const beforeNode = getBeforeNodeForView(index, lContainer);
      const renderer = lView[RENDERER];
      const parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);
      if (parentRNode !== null) {
        addViewToDOM(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);
      }
    }
    const hydrationInfo = lView[HYDRATION];
    if (hydrationInfo !== null && hydrationInfo.firstChild !== null) {
      hydrationInfo.firstChild = null;
    }
  }
  function removeLViewFromLContainer(lContainer, index) {
    const lView = detachView(lContainer, index);
    if (lView !== void 0) {
      destroyLView(lView[TVIEW], lView);
    }
    return lView;
  }
  function collectNativeNodes(tView, lView, tNode, result, isProjection = false) {
    while (tNode !== null) {
      ngDevMode && assertTNodeType(
        tNode,
        3 | 12 | 16 | 32
        /* TNodeType.Icu */
      );
      const lNode = lView[tNode.index];
      if (lNode !== null) {
        result.push(unwrapRNode(lNode));
      }
      if (isLContainer(lNode)) {
        collectNativeNodesInLContainer(lNode, result);
      }
      const tNodeType = tNode.type;
      if (tNodeType & 8) {
        collectNativeNodes(tView, lView, tNode.child, result);
      } else if (tNodeType & 32) {
        const nextRNode = icuContainerIterate(tNode, lView);
        let rNode;
        while (rNode = nextRNode()) {
          result.push(rNode);
        }
      } else if (tNodeType & 16) {
        const nodesInSlot = getProjectionNodes(lView, tNode);
        if (Array.isArray(nodesInSlot)) {
          result.push(...nodesInSlot);
        } else {
          const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
          ngDevMode && assertParentView(parentView);
          collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);
        }
      }
      tNode = isProjection ? tNode.projectionNext : tNode.next;
    }
    return result;
  }
  function collectNativeNodesInLContainer(lContainer, result) {
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
      const lViewInAContainer = lContainer[i];
      const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;
      if (lViewFirstChildTNode !== null) {
        collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);
      }
    }
    if (lContainer[NATIVE] !== lContainer[HOST]) {
      result.push(lContainer[NATIVE]);
    }
  }
  function getOrBorrowReactiveLViewConsumer(lView) {
    return lView[REACTIVE_TEMPLATE_CONSUMER] ?? borrowReactiveLViewConsumer(lView);
  }
  function borrowReactiveLViewConsumer(lView) {
    const consumer = freeConsumers.pop() ?? Object.create(REACTIVE_LVIEW_CONSUMER_NODE);
    consumer.lView = lView;
    return consumer;
  }
  function maybeReturnReactiveLViewConsumer(consumer) {
    if (consumer.lView[REACTIVE_TEMPLATE_CONSUMER] === consumer) {
      return;
    }
    consumer.lView = null;
    freeConsumers.push(consumer);
  }
  function detectChangesInternal(lView, notifyErrorHandler = true, mode = 0) {
    const environment2 = lView[ENVIRONMENT];
    const rendererFactory = environment2.rendererFactory;
    const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();
    if (!checkNoChangesMode) {
      rendererFactory.begin?.();
    }
    try {
      detectChangesInViewWhileDirty(lView, mode);
    } catch (error2) {
      if (notifyErrorHandler) {
        handleError(lView, error2);
      }
      throw error2;
    } finally {
      if (!checkNoChangesMode) {
        rendererFactory.end?.();
        environment2.inlineEffectRunner?.flush();
      }
    }
  }
  function detectChangesInViewWhileDirty(lView, mode) {
    detectChangesInView$1(lView, mode);
    let retries = 0;
    while (requiresRefreshOrTraversal(lView)) {
      if (retries === MAXIMUM_REFRESH_RERUNS) {
        throw new RuntimeError(103, ngDevMode && "Infinite change detection while trying to refresh views. There may be components which each cause the other to require a refresh, causing an infinite loop.");
      }
      retries++;
      detectChangesInView$1(
        lView,
        1
        /* ChangeDetectionMode.Targeted */
      );
    }
  }
  function checkNoChangesInternal(lView, notifyErrorHandler = true) {
    setIsInCheckNoChangesMode(true);
    try {
      detectChangesInternal(lView, notifyErrorHandler);
    } finally {
      setIsInCheckNoChangesMode(false);
    }
  }
  function refreshView(tView, lView, templateFn, context2) {
    ngDevMode && assertEqual(isCreationMode(lView), false, "Should be run in update mode");
    const flags = lView[FLAGS];
    if ((flags & 256) === 256)
      return;
    const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();
    !isInCheckNoChangesPass && lView[ENVIRONMENT].inlineEffectRunner?.flush();
    enterView(lView);
    let prevConsumer = null;
    let currentConsumer = null;
    if (!isInCheckNoChangesPass && viewShouldHaveReactiveConsumer(tView)) {
      currentConsumer = getOrBorrowReactiveLViewConsumer(lView);
      prevConsumer = consumerBeforeComputation(currentConsumer);
    }
    try {
      resetPreOrderHookFlags(lView);
      setBindingIndex(tView.bindingStartIndex);
      if (templateFn !== null) {
        executeTemplate(tView, lView, templateFn, 2, context2);
      }
      const hooksInitPhaseCompleted = (flags & 3) === 3;
      if (!isInCheckNoChangesPass) {
        if (hooksInitPhaseCompleted) {
          const preOrderCheckHooks = tView.preOrderCheckHooks;
          if (preOrderCheckHooks !== null) {
            executeCheckHooks(lView, preOrderCheckHooks, null);
          }
        } else {
          const preOrderHooks = tView.preOrderHooks;
          if (preOrderHooks !== null) {
            executeInitAndCheckHooks(lView, preOrderHooks, 0, null);
          }
          incrementInitPhaseFlags(
            lView,
            0
            /* InitPhaseState.OnInitHooksToBeRun */
          );
        }
      }
      markTransplantedViewsForRefresh(lView);
      detectChangesInEmbeddedViews(
        lView,
        0
        /* ChangeDetectionMode.Global */
      );
      if (tView.contentQueries !== null) {
        refreshContentQueries(tView, lView);
      }
      if (!isInCheckNoChangesPass) {
        if (hooksInitPhaseCompleted) {
          const contentCheckHooks = tView.contentCheckHooks;
          if (contentCheckHooks !== null) {
            executeCheckHooks(lView, contentCheckHooks);
          }
        } else {
          const contentHooks = tView.contentHooks;
          if (contentHooks !== null) {
            executeInitAndCheckHooks(
              lView,
              contentHooks,
              1
              /* InitPhaseState.AfterContentInitHooksToBeRun */
            );
          }
          incrementInitPhaseFlags(
            lView,
            1
            /* InitPhaseState.AfterContentInitHooksToBeRun */
          );
        }
      }
      processHostBindingOpCodes(tView, lView);
      const components = tView.components;
      if (components !== null) {
        detectChangesInChildComponents(
          lView,
          components,
          0
          /* ChangeDetectionMode.Global */
        );
      }
      const viewQuery = tView.viewQuery;
      if (viewQuery !== null) {
        executeViewQueryFn(2, viewQuery, context2);
      }
      if (!isInCheckNoChangesPass) {
        if (hooksInitPhaseCompleted) {
          const viewCheckHooks = tView.viewCheckHooks;
          if (viewCheckHooks !== null) {
            executeCheckHooks(lView, viewCheckHooks);
          }
        } else {
          const viewHooks = tView.viewHooks;
          if (viewHooks !== null) {
            executeInitAndCheckHooks(
              lView,
              viewHooks,
              2
              /* InitPhaseState.AfterViewInitHooksToBeRun */
            );
          }
          incrementInitPhaseFlags(
            lView,
            2
            /* InitPhaseState.AfterViewInitHooksToBeRun */
          );
        }
      }
      if (tView.firstUpdatePass === true) {
        tView.firstUpdatePass = false;
      }
      if (lView[EFFECTS_TO_SCHEDULE]) {
        for (const notifyEffect of lView[EFFECTS_TO_SCHEDULE]) {
          notifyEffect();
        }
        lView[EFFECTS_TO_SCHEDULE] = null;
      }
      if (!isInCheckNoChangesPass) {
        lView[FLAGS] &= ~(64 | 8);
      }
    } catch (e2) {
      markAncestorsForTraversal(lView);
      throw e2;
    } finally {
      if (currentConsumer !== null) {
        consumerAfterComputation(currentConsumer, prevConsumer);
        maybeReturnReactiveLViewConsumer(currentConsumer);
      }
      leaveView();
    }
  }
  function viewShouldHaveReactiveConsumer(tView) {
    return tView.type !== 2;
  }
  function detectChangesInEmbeddedViews(lView, mode) {
    for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
      for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
        const embeddedLView = lContainer[i];
        detectChangesInViewIfAttached(embeddedLView, mode);
      }
    }
  }
  function markTransplantedViewsForRefresh(lView) {
    for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
      if (!(lContainer[FLAGS] & LContainerFlags.HasTransplantedViews))
        continue;
      const movedViews = lContainer[MOVED_VIEWS];
      ngDevMode && assertDefined(movedViews, "Transplanted View flags set but missing MOVED_VIEWS");
      for (let i = 0; i < movedViews.length; i++) {
        const movedLView = movedViews[i];
        const insertionLContainer = movedLView[PARENT];
        ngDevMode && assertLContainer(insertionLContainer);
        markViewForRefresh(movedLView);
      }
    }
  }
  function detectChangesInComponent(hostLView, componentHostIdx, mode) {
    ngDevMode && assertEqual(isCreationMode(hostLView), false, "Should be run in update mode");
    const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
    detectChangesInViewIfAttached(componentView, mode);
  }
  function detectChangesInViewIfAttached(lView, mode) {
    if (!viewAttachedToChangeDetector(lView)) {
      return;
    }
    detectChangesInView$1(lView, mode);
  }
  function detectChangesInView$1(lView, mode) {
    const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();
    const tView = lView[TVIEW];
    const flags = lView[FLAGS];
    const consumer = lView[REACTIVE_TEMPLATE_CONSUMER];
    let shouldRefreshView = !!(mode === 0 && flags & 16);
    shouldRefreshView ||= !!(flags & 64 && mode === 0 && !isInCheckNoChangesPass);
    shouldRefreshView ||= !!(flags & 1024);
    shouldRefreshView ||= !!(consumer?.dirty && consumerPollProducersForChange(consumer));
    if (consumer) {
      consumer.dirty = false;
    }
    lView[FLAGS] &= ~(8192 | 1024);
    if (shouldRefreshView) {
      refreshView(tView, lView, tView.template, lView[CONTEXT]);
    } else if (flags & 8192) {
      detectChangesInEmbeddedViews(
        lView,
        1
        /* ChangeDetectionMode.Targeted */
      );
      const components = tView.components;
      if (components !== null) {
        detectChangesInChildComponents(
          lView,
          components,
          1
          /* ChangeDetectionMode.Targeted */
        );
      }
    }
  }
  function detectChangesInChildComponents(hostLView, components, mode) {
    for (let i = 0; i < components.length; i++) {
      detectChangesInComponent(hostLView, components[i], mode);
    }
  }
  function markViewDirty(lView) {
    lView[ENVIRONMENT].changeDetectionScheduler?.notify();
    while (lView) {
      lView[FLAGS] |= 64;
      const parent = getLViewParent(lView);
      if (isRootView(lView) && !parent) {
        return lView;
      }
      lView = parent;
    }
    return null;
  }
  function injectTemplateRef() {
    return createTemplateRef(getCurrentTNode(), getLView());
  }
  function createTemplateRef(hostTNode, hostLView) {
    if (hostTNode.type & 4) {
      ngDevMode && assertDefined(hostTNode.tView, "TView must be allocated");
      return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));
    }
    return null;
  }
  function getFriendlyStringFromTNodeType(tNodeType) {
    switch (tNodeType) {
      case 4:
        return "view container";
      case 2:
        return "element";
      case 8:
        return "ng-container";
      case 32:
        return "icu";
      case 64:
        return "i18n";
      case 16:
        return "projection";
      case 1:
        return "text";
      default:
        return "<unknown>";
    }
  }
  function validateMatchingNode(node, nodeType, tagName, lView, tNode, isViewContainerAnchor = false) {
    if (!node || (node.nodeType !== nodeType || node.nodeType === Node.ELEMENT_NODE && node.tagName.toLowerCase() !== tagName?.toLowerCase())) {
      const expectedNode = shortRNodeDescription(nodeType, tagName, null);
      let header = `During hydration Angular expected ${expectedNode} but `;
      const hostComponentDef = getDeclarationComponentDef(lView);
      const componentClassName = hostComponentDef?.type?.name;
      const expectedDom = describeExpectedDom(lView, tNode, isViewContainerAnchor);
      const expected = `Angular expected this DOM:

${expectedDom}

`;
      let actual = "";
      const componentHostElement = unwrapRNode(lView[HOST]);
      if (!node) {
        header += `the node was not found.

`;
        markRNodeAsHavingHydrationMismatch(componentHostElement, expectedDom);
      } else {
        const actualNode = shortRNodeDescription(node.nodeType, node.tagName ?? null, node.textContent ?? null);
        header += `found ${actualNode}.

`;
        const actualDom = describeDomFromNode(node);
        actual = `Actual DOM is:

${actualDom}

`;
        markRNodeAsHavingHydrationMismatch(componentHostElement, expectedDom, actualDom);
      }
      const footer = getHydrationErrorFooter(componentClassName);
      const message = header + expected + actual + getHydrationAttributeNote() + footer;
      throw new RuntimeError(-500, message);
    }
  }
  function validateSiblingNodeExists(node) {
    validateNodeExists(node);
    if (!node.nextSibling) {
      const header = "During hydration Angular expected more sibling nodes to be present.\n\n";
      const actual = `Actual DOM is:

${describeDomFromNode(node)}

`;
      const footer = getHydrationErrorFooter();
      const message = header + actual + footer;
      markRNodeAsHavingHydrationMismatch(node, "", actual);
      throw new RuntimeError(-501, message);
    }
  }
  function validateNodeExists(node, lView = null, tNode = null) {
    if (!node) {
      const header = "During hydration, Angular expected an element to be present at this location.\n\n";
      let expected = "";
      let footer = "";
      if (lView !== null && tNode !== null) {
        expected = describeExpectedDom(lView, tNode, false);
        footer = getHydrationErrorFooter();
        markRNodeAsHavingHydrationMismatch(unwrapRNode(lView[HOST]), expected, "");
      }
      throw new RuntimeError(-502, `${header}${expected}

${footer}`);
    }
  }
  function nodeNotFoundError(lView, tNode) {
    const header = "During serialization, Angular was unable to find an element in the DOM:\n\n";
    const expected = `${describeExpectedDom(lView, tNode, false)}

`;
    const footer = getHydrationErrorFooter();
    throw new RuntimeError(-502, header + expected + footer);
  }
  function nodeNotFoundAtPathError(host, path) {
    const header = `During hydration Angular was unable to locate a node using the "${path}" path, starting from the ${describeRNode(host)} node.

`;
    const footer = getHydrationErrorFooter();
    markRNodeAsHavingHydrationMismatch(host);
    throw new RuntimeError(-502, header + footer);
  }
  function unsupportedProjectionOfDomNodes(rNode) {
    const header = "During serialization, Angular detected DOM nodes that were created outside of Angular context and provided as projectable nodes (likely via `ViewContainerRef.createComponent` or `createComponent` APIs). Hydration is not supported for such cases, consider refactoring the code to avoid this pattern or using `ngSkipHydration` on the host element of the component.\n\n";
    const actual = `${describeDomFromNode(rNode)}

`;
    const message = header + actual + getHydrationAttributeNote();
    return new RuntimeError(-503, message);
  }
  function invalidSkipHydrationHost(rNode) {
    const header = "The `ngSkipHydration` flag is applied on a node that doesn't act as a component host. Hydration can be skipped only on per-component basis.\n\n";
    const actual = `${describeDomFromNode(rNode)}

`;
    const footer = "Please move the `ngSkipHydration` attribute to the component host element.\n\n";
    const message = header + actual + footer;
    return new RuntimeError(-504, message);
  }
  function stringifyTNodeAttrs(tNode) {
    const results = [];
    if (tNode.attrs) {
      for (let i = 0; i < tNode.attrs.length; ) {
        const attrName = tNode.attrs[i++];
        if (typeof attrName == "number") {
          break;
        }
        const attrValue = tNode.attrs[i++];
        results.push(`${attrName}="${shorten(attrValue)}"`);
      }
    }
    return results.join(" ");
  }
  function stringifyRNodeAttrs(rNode) {
    const results = [];
    for (let i = 0; i < rNode.attributes.length; i++) {
      const attr = rNode.attributes[i];
      if (internalAttrs.has(attr.name))
        continue;
      results.push(`${attr.name}="${shorten(attr.value)}"`);
    }
    return results.join(" ");
  }
  function describeTNode(tNode, innerContent = "\u2026") {
    switch (tNode.type) {
      case 1:
        const content = tNode.value ? `(${tNode.value})` : "";
        return `#text${content}`;
      case 2:
        const attrs = stringifyTNodeAttrs(tNode);
        const tag = tNode.value.toLowerCase();
        return `<${tag}${attrs ? " " + attrs : ""}>${innerContent}</${tag}>`;
      case 8:
        return "<!-- ng-container -->";
      case 4:
        return "<!-- container -->";
      default:
        const typeAsString = getFriendlyStringFromTNodeType(tNode.type);
        return `#node(${typeAsString})`;
    }
  }
  function describeRNode(rNode, innerContent = "\u2026") {
    const node = rNode;
    switch (node.nodeType) {
      case Node.ELEMENT_NODE:
        const tag = node.tagName.toLowerCase();
        const attrs = stringifyRNodeAttrs(node);
        return `<${tag}${attrs ? " " + attrs : ""}>${innerContent}</${tag}>`;
      case Node.TEXT_NODE:
        const content = node.textContent ? shorten(node.textContent) : "";
        return `#text${content ? `(${content})` : ""}`;
      case Node.COMMENT_NODE:
        return `<!-- ${shorten(node.textContent ?? "")} -->`;
      default:
        return `#node(${node.nodeType})`;
    }
  }
  function describeExpectedDom(lView, tNode, isViewContainerAnchor) {
    const spacer = "  ";
    let content = "";
    if (tNode.prev) {
      content += spacer + "\u2026\n";
      content += spacer + describeTNode(tNode.prev) + "\n";
    } else if (tNode.type && tNode.type & 12) {
      content += spacer + "\u2026\n";
    }
    if (isViewContainerAnchor) {
      content += spacer + describeTNode(tNode) + "\n";
      content += spacer + `<!-- container -->  ${AT_THIS_LOCATION}
`;
    } else {
      content += spacer + describeTNode(tNode) + `  ${AT_THIS_LOCATION}
`;
    }
    content += spacer + "\u2026\n";
    const parentRNode = tNode.type ? getParentRElement(lView[TVIEW], tNode, lView) : null;
    if (parentRNode) {
      content = describeRNode(parentRNode, "\n" + content);
    }
    return content;
  }
  function describeDomFromNode(node) {
    const spacer = "  ";
    let content = "";
    const currentNode = node;
    if (currentNode.previousSibling) {
      content += spacer + "\u2026\n";
      content += spacer + describeRNode(currentNode.previousSibling) + "\n";
    }
    content += spacer + describeRNode(currentNode) + `  ${AT_THIS_LOCATION}
`;
    if (node.nextSibling) {
      content += spacer + "\u2026\n";
    }
    if (node.parentNode) {
      content = describeRNode(currentNode.parentNode, "\n" + content);
    }
    return content;
  }
  function shortRNodeDescription(nodeType, tagName, textContent) {
    switch (nodeType) {
      case Node.ELEMENT_NODE:
        return `<${tagName.toLowerCase()}>`;
      case Node.TEXT_NODE:
        const content = textContent ? ` (with the "${shorten(textContent)}" content)` : "";
        return `a text node${content}`;
      case Node.COMMENT_NODE:
        return "a comment node";
      default:
        return `#node(nodeType=${nodeType})`;
    }
  }
  function getHydrationErrorFooter(componentClassName) {
    const componentInfo = componentClassName ? `the "${componentClassName}"` : "corresponding";
    return `To fix this problem:
  * check ${componentInfo} component for hydration-related issues
  * check to see if your template has valid HTML structure
  * or skip hydration by adding the \`ngSkipHydration\` attribute to its host node in a template

`;
  }
  function getHydrationAttributeNote() {
    return "Note: attributes are only displayed to better represent the DOM but have no effect on hydration mismatches.\n\n";
  }
  function stripNewlines(input2) {
    return input2.replace(/\s+/gm, "");
  }
  function shorten(input2, maxLength = 50) {
    if (!input2) {
      return "";
    }
    input2 = stripNewlines(input2);
    return input2.length > maxLength ? `${input2.substring(0, maxLength - 1)}\u2026` : input2;
  }
  function removeDehydratedViews(lContainer) {
    const views = lContainer[DEHYDRATED_VIEWS] ?? [];
    const parentLView = lContainer[PARENT];
    const renderer = parentLView[RENDERER];
    for (const view of views) {
      removeDehydratedView(view, renderer);
      ngDevMode && ngDevMode.dehydratedViewsRemoved++;
    }
    lContainer[DEHYDRATED_VIEWS] = EMPTY_ARRAY;
  }
  function removeDehydratedView(dehydratedView, renderer) {
    let nodesRemoved = 0;
    let currentRNode = dehydratedView.firstChild;
    if (currentRNode) {
      const numNodes = dehydratedView.data[NUM_ROOT_NODES];
      while (nodesRemoved < numNodes) {
        ngDevMode && validateSiblingNodeExists(currentRNode);
        const nextSibling = currentRNode.nextSibling;
        nativeRemoveNode(renderer, currentRNode, false);
        currentRNode = nextSibling;
        nodesRemoved++;
      }
    }
  }
  function cleanupLContainer(lContainer) {
    removeDehydratedViews(lContainer);
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
      cleanupLView(lContainer[i]);
    }
  }
  function cleanupDehydratedI18nNodes(lView) {
    const i18nNodes = lView[HYDRATION]?.i18nNodes;
    if (i18nNodes) {
      const renderer = lView[RENDERER];
      for (const node of i18nNodes.values()) {
        nativeRemoveNode(renderer, node, false);
      }
      lView[HYDRATION].i18nNodes = void 0;
    }
  }
  function cleanupLView(lView) {
    cleanupDehydratedI18nNodes(lView);
    const tView = lView[TVIEW];
    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
      if (isLContainer(lView[i])) {
        const lContainer = lView[i];
        cleanupLContainer(lContainer);
      } else if (isLView(lView[i])) {
        cleanupLView(lView[i]);
      }
    }
  }
  function cleanupDehydratedViews(appRef) {
    const viewRefs = appRef._views;
    for (const viewRef of viewRefs) {
      const lNode = getLNodeForHydration(viewRef);
      if (lNode !== null && lNode[HOST] !== null) {
        if (isLView(lNode)) {
          cleanupLView(lNode);
        } else {
          const componentLView = lNode[HOST];
          cleanupLView(componentLView);
          cleanupLContainer(lNode);
        }
        ngDevMode && ngDevMode.dehydratedViewsCleanupRuns++;
      }
    }
  }
  function compressNodeLocation(referenceNode2, path) {
    const result = [referenceNode2];
    for (const segment of path) {
      const lastIdx = result.length - 1;
      if (lastIdx > 0 && result[lastIdx - 1] === segment) {
        const value = result[lastIdx] || 1;
        result[lastIdx] = value + 1;
      } else {
        result.push(segment, "");
      }
    }
    return result.join("");
  }
  function decompressNodeLocation(path) {
    const matches2 = path.match(REF_EXTRACTOR_REGEXP);
    const [_, refNodeId, refNodeName, rest] = matches2;
    const ref = refNodeId ? parseInt(refNodeId, 10) : refNodeName;
    const steps = [];
    for (const [_2, step, count] of rest.matchAll(/(f|n)(\d*)/g)) {
      const repeat = parseInt(count, 10) || 1;
      steps.push(step, repeat);
    }
    return [ref, ...steps];
  }
  function isFirstElementInNgContainer(tNode) {
    return !tNode.prev && tNode.parent?.type === 8;
  }
  function getNoOffsetIndex(tNode) {
    return tNode.index - HEADER_OFFSET;
  }
  function isDisconnectedNode(tNode, lView) {
    return !(tNode.type & 16) && !!lView[tNode.index] && !unwrapRNode(lView[tNode.index])?.isConnected;
  }
  function locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex) {
    const i18nNodes = hydrationInfo.i18nNodes;
    if (i18nNodes) {
      const native = i18nNodes.get(noOffsetIndex);
      if (native) {
        i18nNodes.delete(noOffsetIndex);
      }
      return native;
    }
    return null;
  }
  function locateNextRNode(hydrationInfo, tView, lView, tNode) {
    const noOffsetIndex = getNoOffsetIndex(tNode);
    let native = locateI18nRNodeByIndex(hydrationInfo, noOffsetIndex);
    if (!native) {
      const nodes = hydrationInfo.data[NODES];
      if (nodes?.[noOffsetIndex]) {
        native = locateRNodeByPath(nodes[noOffsetIndex], lView);
      } else if (tView.firstChild === tNode) {
        native = hydrationInfo.firstChild;
      } else {
        const previousTNodeParent = tNode.prev === null;
        const previousTNode = tNode.prev ?? tNode.parent;
        ngDevMode && assertDefined(previousTNode, "Unexpected state: current TNode does not have a connection to the previous node or a parent node.");
        if (isFirstElementInNgContainer(tNode)) {
          const noOffsetParentIndex = getNoOffsetIndex(tNode.parent);
          native = getSegmentHead(hydrationInfo, noOffsetParentIndex);
        } else {
          let previousRElement = getNativeByTNode(previousTNode, lView);
          if (previousTNodeParent) {
            native = previousRElement.firstChild;
          } else {
            const noOffsetPrevSiblingIndex = getNoOffsetIndex(previousTNode);
            const segmentHead = getSegmentHead(hydrationInfo, noOffsetPrevSiblingIndex);
            if (previousTNode.type === 2 && segmentHead) {
              const numRootNodesToSkip = calcSerializedContainerSize(hydrationInfo, noOffsetPrevSiblingIndex);
              const nodesToSkip = numRootNodesToSkip + 1;
              native = siblingAfter(nodesToSkip, segmentHead);
            } else {
              native = previousRElement.nextSibling;
            }
          }
        }
      }
    }
    return native;
  }
  function siblingAfter(skip, from2) {
    let currentNode = from2;
    for (let i = 0; i < skip; i++) {
      ngDevMode && validateSiblingNodeExists(currentNode);
      currentNode = currentNode.nextSibling;
    }
    return currentNode;
  }
  function stringifyNavigationInstructions(instructions) {
    const container = [];
    for (let i = 0; i < instructions.length; i += 2) {
      const step = instructions[i];
      const repeat = instructions[i + 1];
      for (let r = 0; r < repeat; r++) {
        container.push(step === NodeNavigationStep.FirstChild ? "firstChild" : "nextSibling");
      }
    }
    return container.join(".");
  }
  function navigateToNode(from2, instructions) {
    let node = from2;
    for (let i = 0; i < instructions.length; i += 2) {
      const step = instructions[i];
      const repeat = instructions[i + 1];
      for (let r = 0; r < repeat; r++) {
        if (ngDevMode && !node) {
          throw nodeNotFoundAtPathError(from2, stringifyNavigationInstructions(instructions));
        }
        switch (step) {
          case NodeNavigationStep.FirstChild:
            node = node.firstChild;
            break;
          case NodeNavigationStep.NextSibling:
            node = node.nextSibling;
            break;
        }
      }
    }
    if (ngDevMode && !node) {
      throw nodeNotFoundAtPathError(from2, stringifyNavigationInstructions(instructions));
    }
    return node;
  }
  function locateRNodeByPath(path, lView) {
    const [referenceNode2, ...navigationInstructions] = decompressNodeLocation(path);
    let ref;
    if (referenceNode2 === REFERENCE_NODE_HOST) {
      ref = lView[DECLARATION_COMPONENT_VIEW][HOST];
    } else if (referenceNode2 === REFERENCE_NODE_BODY) {
      ref = \u0275\u0275resolveBody(lView[DECLARATION_COMPONENT_VIEW][HOST]);
    } else {
      const parentElementId = Number(referenceNode2);
      ref = unwrapRNode(lView[parentElementId + HEADER_OFFSET]);
    }
    return navigateToNode(ref, navigationInstructions);
  }
  function navigateBetween(start, finish) {
    if (start === finish) {
      return [];
    } else if (start.parentElement == null || finish.parentElement == null) {
      return null;
    } else if (start.parentElement === finish.parentElement) {
      return navigateBetweenSiblings(start, finish);
    } else {
      const parent = finish.parentElement;
      const parentPath = navigateBetween(start, parent);
      const childPath = navigateBetween(parent.firstChild, finish);
      if (!parentPath || !childPath)
        return null;
      return [
        // First navigate to `finish`'s parent
        ...parentPath,
        // Then to its first child.
        NodeNavigationStep.FirstChild,
        // And finally from that node to `finish` (maybe a no-op if we're already there).
        ...childPath
      ];
    }
  }
  function navigateBetweenSiblings(start, finish) {
    const nav = [];
    let node = null;
    for (node = start; node != null && node !== finish; node = node.nextSibling) {
      nav.push(NodeNavigationStep.NextSibling);
    }
    return node == null ? null : nav;
  }
  function calcPathBetween(from2, to, fromNodeName) {
    const path = navigateBetween(from2, to);
    return path === null ? null : compressNodeLocation(fromNodeName, path);
  }
  function calcPathForNode(tNode, lView) {
    let parentTNode = tNode.parent;
    let parentIndex;
    let parentRNode;
    let referenceNodeName;
    while (parentTNode !== null && isDisconnectedNode(parentTNode, lView)) {
      parentTNode = parentTNode.parent;
    }
    if (parentTNode === null || !(parentTNode.type & 3)) {
      parentIndex = referenceNodeName = REFERENCE_NODE_HOST;
      parentRNode = lView[DECLARATION_COMPONENT_VIEW][HOST];
    } else {
      parentIndex = parentTNode.index;
      parentRNode = unwrapRNode(lView[parentIndex]);
      referenceNodeName = renderStringify(parentIndex - HEADER_OFFSET);
    }
    let rNode = unwrapRNode(lView[tNode.index]);
    if (tNode.type & 12) {
      const firstRNode = getFirstNativeNode(lView, tNode);
      if (firstRNode) {
        rNode = firstRNode;
      }
    }
    let path = calcPathBetween(parentRNode, rNode, referenceNodeName);
    if (path === null && parentRNode !== rNode) {
      const body = parentRNode.ownerDocument.body;
      path = calcPathBetween(body, rNode, REFERENCE_NODE_BODY);
      if (path === null) {
        throw nodeNotFoundError(lView, tNode);
      }
    }
    return path;
  }
  function locateDehydratedViewsInContainer(currentRNode, serializedViews) {
    const dehydratedViews = [];
    for (const serializedView of serializedViews) {
      for (let i = 0; i < (serializedView[MULTIPLIER] ?? 1); i++) {
        const view = {
          data: serializedView,
          firstChild: null
        };
        if (serializedView[NUM_ROOT_NODES] > 0) {
          view.firstChild = currentRNode;
          currentRNode = siblingAfter(serializedView[NUM_ROOT_NODES], currentRNode);
        }
        dehydratedViews.push(view);
      }
    }
    return [currentRNode, dehydratedViews];
  }
  function findMatchingDehydratedViewImpl(lContainer, template2) {
    const views = lContainer[DEHYDRATED_VIEWS];
    if (!template2 || views === null || views.length === 0) {
      return null;
    }
    const view = views[0];
    if (view.data[TEMPLATE_ID] === template2) {
      return views.shift();
    } else {
      removeDehydratedViews(lContainer);
      return null;
    }
  }
  function enableFindMatchingDehydratedViewImpl() {
    _findMatchingDehydratedViewImpl = findMatchingDehydratedViewImpl;
  }
  function findMatchingDehydratedView(lContainer, template2) {
    return _findMatchingDehydratedViewImpl(lContainer, template2);
  }
  function noComponentFactoryError(component) {
    const error2 = Error(`No component factory found for ${stringify(component)}.`);
    error2[ERROR_COMPONENT] = component;
    return error2;
  }
  function injectRenderer2() {
    const lView = getLView();
    const tNode = getCurrentTNode();
    const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);
    return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];
  }
  function assertNotInReactiveContext(debugFn, extraContext) {
    if (getActiveConsumer() !== null) {
      throw new RuntimeError(-602, ngDevMode && `${debugFn.name}() cannot be called from within a reactive context.${extraContext ? ` ${extraContext}` : ""}`);
    }
  }
  function performanceMarkFeature(feature) {
    if (markedFeatures.has(feature)) {
      return;
    }
    markedFeatures.add(feature);
    performance?.mark?.("mark_feature_usage", { detail: { feature } });
  }
  function noop2(...args) {
  }
  function getNativeRequestAnimationFrame() {
    const isBrowser = typeof _global["requestAnimationFrame"] === "function";
    let nativeRequestAnimationFrame = _global[isBrowser ? "requestAnimationFrame" : "setTimeout"];
    let nativeCancelAnimationFrame = _global[isBrowser ? "cancelAnimationFrame" : "clearTimeout"];
    if (typeof Zone !== "undefined" && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {
      const unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__("OriginalDelegate")];
      if (unpatchedRequestAnimationFrame) {
        nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;
      }
      const unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__("OriginalDelegate")];
      if (unpatchedCancelAnimationFrame) {
        nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;
      }
    }
    return { nativeRequestAnimationFrame, nativeCancelAnimationFrame };
  }
  function checkStable(zone) {
    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
      try {
        zone._nesting++;
        zone.onMicrotaskEmpty.emit(null);
      } finally {
        zone._nesting--;
        if (!zone.hasPendingMicrotasks) {
          try {
            zone.runOutsideAngular(() => zone.onStable.emit(null));
          } finally {
            zone.isStable = true;
          }
        }
      }
    }
  }
  function delayChangeDetectionForEvents(zone) {
    if (zone.isCheckStableRunning || zone.lastRequestAnimationFrameId !== -1) {
      return;
    }
    zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global, () => {
      if (!zone.fakeTopEventTask) {
        zone.fakeTopEventTask = Zone.root.scheduleEventTask("fakeTopEventTask", () => {
          zone.lastRequestAnimationFrameId = -1;
          updateMicroTaskStatus(zone);
          zone.isCheckStableRunning = true;
          checkStable(zone);
          zone.isCheckStableRunning = false;
        }, void 0, () => {
        }, () => {
        });
      }
      zone.fakeTopEventTask.invoke();
    });
    updateMicroTaskStatus(zone);
  }
  function forkInnerZoneWithAngularBehavior(zone) {
    const delayChangeDetectionForEventsDelegate = () => {
      delayChangeDetectionForEvents(zone);
    };
    zone._inner = zone._inner.fork({
      name: "angular",
      properties: { "isAngularZone": true },
      onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {
        if (shouldBeIgnoredByZone(applyArgs)) {
          return delegate.invokeTask(target, task, applyThis, applyArgs);
        }
        try {
          onEnter(zone);
          return delegate.invokeTask(target, task, applyThis, applyArgs);
        } finally {
          if (zone.shouldCoalesceEventChangeDetection && task.type === "eventTask" || zone.shouldCoalesceRunChangeDetection) {
            delayChangeDetectionForEventsDelegate();
          }
          onLeave(zone);
        }
      },
      onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {
        try {
          onEnter(zone);
          return delegate.invoke(target, callback, applyThis, applyArgs, source);
        } finally {
          if (zone.shouldCoalesceRunChangeDetection) {
            delayChangeDetectionForEventsDelegate();
          }
          onLeave(zone);
        }
      },
      onHasTask: (delegate, current, target, hasTaskState) => {
        delegate.hasTask(target, hasTaskState);
        if (current === target) {
          if (hasTaskState.change == "microTask") {
            zone._hasPendingMicrotasks = hasTaskState.microTask;
            updateMicroTaskStatus(zone);
            checkStable(zone);
          } else if (hasTaskState.change == "macroTask") {
            zone.hasPendingMacrotasks = hasTaskState.macroTask;
          }
        }
      },
      onHandleError: (delegate, current, target, error2) => {
        delegate.handleError(target, error2);
        zone.runOutsideAngular(() => zone.onError.emit(error2));
        return false;
      }
    });
  }
  function updateMicroTaskStatus(zone) {
    if (zone._hasPendingMicrotasks || (zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) && zone.lastRequestAnimationFrameId !== -1) {
      zone.hasPendingMicrotasks = true;
    } else {
      zone.hasPendingMicrotasks = false;
    }
  }
  function onEnter(zone) {
    zone._nesting++;
    if (zone.isStable) {
      zone.isStable = false;
      zone.onUnstable.emit(null);
    }
  }
  function onLeave(zone) {
    zone._nesting--;
    checkStable(zone);
  }
  function shouldBeIgnoredByZone(applyArgs) {
    if (!Array.isArray(applyArgs)) {
      return false;
    }
    if (applyArgs.length !== 1) {
      return false;
    }
    return applyArgs[0].data?.["__ignore_ng_zone__"] === true;
  }
  function getNgZone(ngZoneToUse = "zone.js", options) {
    if (ngZoneToUse === "noop") {
      return new NoopNgZone();
    }
    if (ngZoneToUse === "zone.js") {
      return new NgZone(options);
    }
    return ngZoneToUse;
  }
  function internalAfterNextRender(callback, options) {
    const injector = options?.injector ?? inject(Injector);
    if (!options?.runOnServer && !isPlatformBrowser(injector))
      return;
    const afterRenderEventManager = injector.get(AfterRenderEventManager);
    afterRenderEventManager.internalCallbacks.push(callback);
  }
  function afterRender(callback, options) {
    ngDevMode && assertNotInReactiveContext(afterRender, "Call `afterRender` outside of a reactive context. For example, schedule the render callback inside the component constructor`.");
    !options && assertInInjectionContext(afterRender);
    const injector = options?.injector ?? inject(Injector);
    if (!isPlatformBrowser(injector)) {
      return NOOP_AFTER_RENDER_REF;
    }
    performanceMarkFeature("NgAfterRender");
    const afterRenderEventManager = injector.get(AfterRenderEventManager);
    const callbackHandler = afterRenderEventManager.handler ??= new AfterRenderCallbackHandlerImpl();
    const phase = options?.phase ?? AfterRenderPhase.MixedReadWrite;
    const destroy = () => {
      callbackHandler.unregister(instance);
      unregisterFn();
    };
    const unregisterFn = injector.get(DestroyRef).onDestroy(destroy);
    const instance = runInInjectionContext(injector, () => new AfterRenderCallback(phase, callback));
    callbackHandler.register(instance);
    return { destroy };
  }
  function afterNextRender(callback, options) {
    !options && assertInInjectionContext(afterNextRender);
    const injector = options?.injector ?? inject(Injector);
    if (!isPlatformBrowser(injector)) {
      return NOOP_AFTER_RENDER_REF;
    }
    performanceMarkFeature("NgAfterNextRender");
    const afterRenderEventManager = injector.get(AfterRenderEventManager);
    const callbackHandler = afterRenderEventManager.handler ??= new AfterRenderCallbackHandlerImpl();
    const phase = options?.phase ?? AfterRenderPhase.MixedReadWrite;
    const destroy = () => {
      callbackHandler.unregister(instance);
      unregisterFn();
    };
    const unregisterFn = injector.get(DestroyRef).onDestroy(destroy);
    const instance = runInInjectionContext(injector, () => new AfterRenderCallback(phase, () => {
      destroy();
      callback();
    }));
    callbackHandler.register(instance);
    return { destroy };
  }
  function isModuleWithProviders(value) {
    return value.ngModule !== void 0;
  }
  function isNgModule(value) {
    return !!getNgModuleDef(value);
  }
  function isPipe(value) {
    return !!getPipeDef$1(value);
  }
  function isDirective(value) {
    return !!getDirectiveDef(value);
  }
  function isComponent(value) {
    return !!getComponentDef(value);
  }
  function getDependencyTypeForError(type) {
    if (getComponentDef(type))
      return "component";
    if (getDirectiveDef(type))
      return "directive";
    if (getPipeDef$1(type))
      return "pipe";
    return "type";
  }
  function verifyStandaloneImport(depType, importingType) {
    if (isForwardRef(depType)) {
      depType = resolveForwardRef(depType);
      if (!depType) {
        throw new Error(`Expected forwardRef function, imported from "${stringifyForError(importingType)}", to return a standalone entity or NgModule but got "${stringifyForError(depType) || depType}".`);
      }
    }
    if (getNgModuleDef(depType) == null) {
      const def = getComponentDef(depType) || getDirectiveDef(depType) || getPipeDef$1(depType);
      if (def != null) {
        if (!def.standalone) {
          throw new Error(`The "${stringifyForError(depType)}" ${getDependencyTypeForError(depType)}, imported from "${stringifyForError(importingType)}", is not standalone. Did you forget to add the standalone: true flag?`);
        }
      } else {
        if (isModuleWithProviders(depType)) {
          throw new Error(`A module with providers was imported from "${stringifyForError(importingType)}". Modules with providers are not supported in standalone components imports.`);
        } else {
          throw new Error(`The "${stringifyForError(depType)}" type, imported from "${stringifyForError(importingType)}", must be a standalone component / directive / pipe or an NgModule. Did you forget to add the required @Component / @Directive / @Pipe or @NgModule annotation?`);
        }
      }
    }
  }
  function addSet(sourceSet, targetSet) {
    for (const m of sourceSet) {
      targetSet.add(m);
    }
  }
  function computeStaticStyling(tNode, attrs, writeToHost) {
    ngDevMode && assertFirstCreatePass(getTView(), "Expecting to be called in first template pass only");
    let styles2 = writeToHost ? tNode.styles : null;
    let classes = writeToHost ? tNode.classes : null;
    let mode = 0;
    if (attrs !== null) {
      for (let i = 0; i < attrs.length; i++) {
        const value = attrs[i];
        if (typeof value === "number") {
          mode = value;
        } else if (mode == 1) {
          classes = concatStringsWithSpace(classes, value);
        } else if (mode == 2) {
          const style = value;
          const styleValue = attrs[++i];
          styles2 = concatStringsWithSpace(styles2, style + ": " + styleValue + ";");
        }
      }
    }
    writeToHost ? tNode.styles = styles2 : tNode.stylesWithoutHost = styles2;
    writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;
  }
  function toRefArray(map3) {
    const array = [];
    for (const publicName in map3) {
      if (!map3.hasOwnProperty(publicName)) {
        continue;
      }
      const value = map3[publicName];
      if (value === void 0) {
        continue;
      }
      array.push({
        propName: Array.isArray(value) ? value[0] : value,
        templateName: publicName
      });
    }
    return array;
  }
  function getNamespace(elementName) {
    const name = elementName.toLowerCase();
    return name === "svg" ? SVG_NAMESPACE : name === "math" ? MATH_ML_NAMESPACE : null;
  }
  function createRootComponentTNode(lView, rNode) {
    const tView = lView[TVIEW];
    const index = HEADER_OFFSET;
    ngDevMode && assertIndexInRange(lView, index);
    lView[index] = rNode;
    return getOrCreateTNode(tView, index, 2, "#host", null);
  }
  function createRootComponentView(tNode, hostRNode, rootComponentDef, rootDirectives, rootView, environment2, hostRenderer) {
    const tView = rootView[TVIEW];
    applyRootComponentStyling(rootDirectives, tNode, hostRNode, hostRenderer);
    let hydrationInfo = null;
    if (hostRNode !== null) {
      hydrationInfo = retrieveHydrationInfo(hostRNode, rootView[INJECTOR]);
    }
    const viewRenderer = environment2.rendererFactory.createRenderer(hostRNode, rootComponentDef);
    let lViewFlags = 16;
    if (rootComponentDef.signals) {
      lViewFlags = 4096;
    } else if (rootComponentDef.onPush) {
      lViewFlags = 64;
    }
    const componentView = createLView(rootView, getOrCreateComponentTView(rootComponentDef), null, lViewFlags, rootView[tNode.index], tNode, environment2, viewRenderer, null, null, hydrationInfo);
    if (tView.firstCreatePass) {
      markAsComponentHost(tView, tNode, rootDirectives.length - 1);
    }
    addToViewTree(rootView, componentView);
    return rootView[tNode.index] = componentView;
  }
  function applyRootComponentStyling(rootDirectives, tNode, rNode, hostRenderer) {
    for (const def of rootDirectives) {
      tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);
    }
    if (tNode.mergedAttrs !== null) {
      computeStaticStyling(tNode, tNode.mergedAttrs, true);
      if (rNode !== null) {
        setupStaticAttributes(hostRenderer, rNode, tNode);
      }
    }
  }
  function createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, hostFeatures) {
    const rootTNode = getCurrentTNode();
    ngDevMode && assertDefined(rootTNode, "tNode should have been already created");
    const tView = rootLView[TVIEW];
    const native = getNativeByTNode(rootTNode, rootLView);
    initializeDirectives(tView, rootLView, rootTNode, rootDirectives, null, hostDirectiveDefs);
    for (let i = 0; i < rootDirectives.length; i++) {
      const directiveIndex = rootTNode.directiveStart + i;
      const directiveInstance = getNodeInjectable(rootLView, tView, directiveIndex, rootTNode);
      attachPatchData(directiveInstance, rootLView);
    }
    invokeDirectivesHostBindings(tView, rootLView, rootTNode);
    if (native) {
      attachPatchData(native, rootLView);
    }
    ngDevMode && assertGreaterThan(rootTNode.componentOffset, -1, "componentOffset must be great than -1");
    const component = getNodeInjectable(rootLView, tView, rootTNode.directiveStart + rootTNode.componentOffset, rootTNode);
    componentView[CONTEXT] = rootLView[CONTEXT] = component;
    if (hostFeatures !== null) {
      for (const feature of hostFeatures) {
        feature(component, rootComponentDef);
      }
    }
    executeContentQueries(tView, rootTNode, rootLView);
    return component;
  }
  function setRootNodeAttributes(hostRenderer, componentDef, hostRNode, rootSelectorOrNode) {
    if (rootSelectorOrNode) {
      setUpAttributes(hostRenderer, hostRNode, ["ng-version", "17.3.5"]);
    } else {
      const { attrs, classes } = extractAttrsAndClassesFromSelector(componentDef.selectors[0]);
      if (attrs) {
        setUpAttributes(hostRenderer, hostRNode, attrs);
      }
      if (classes && classes.length > 0) {
        writeDirectClass(hostRenderer, hostRNode, classes.join(" "));
      }
    }
  }
  function projectNodes(tNode, ngContentSelectors, projectableNodes) {
    const projection2 = tNode.projection = [];
    for (let i = 0; i < ngContentSelectors.length; i++) {
      const nodesforSlot = projectableNodes[i];
      projection2.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);
    }
  }
  function LifecycleHooksFeature() {
    const tNode = getCurrentTNode();
    ngDevMode && assertDefined(tNode, "TNode is required");
    registerPostOrderHooks(getLView()[TVIEW], tNode);
  }
  function injectViewContainerRef() {
    const previousTNode = getCurrentTNode();
    return createContainerRef(previousTNode, getLView());
  }
  function getViewRefs(lContainer) {
    return lContainer[VIEW_REFS];
  }
  function getOrCreateViewRefs(lContainer) {
    return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);
  }
  function createContainerRef(hostTNode, hostLView) {
    ngDevMode && assertTNodeType(
      hostTNode,
      12 | 3
      /* TNodeType.AnyRNode */
    );
    let lContainer;
    const slotValue = hostLView[hostTNode.index];
    if (isLContainer(slotValue)) {
      lContainer = slotValue;
    } else {
      lContainer = createLContainer(slotValue, hostLView, null, hostTNode);
      hostLView[hostTNode.index] = lContainer;
      addToViewTree(hostLView, lContainer);
    }
    _locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue);
    return new R3ViewContainerRef(lContainer, hostTNode, hostLView);
  }
  function insertAnchorNode(hostLView, hostTNode) {
    const renderer = hostLView[RENDERER];
    ngDevMode && ngDevMode.rendererCreateComment++;
    const commentNode = renderer.createComment(ngDevMode ? "container" : "");
    const hostNative = getNativeByTNode(hostTNode, hostLView);
    const parentOfHostNative = nativeParentNode(renderer, hostNative);
    nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);
    return commentNode;
  }
  function populateDehydratedViewsInLContainer(lContainer, tNode, hostLView) {
    return _populateDehydratedViewsInLContainer(lContainer, tNode, hostLView);
  }
  function createAnchorNode(lContainer, hostLView, hostTNode, slotValue) {
    if (lContainer[NATIVE])
      return;
    let commentNode;
    if (hostTNode.type & 8) {
      commentNode = unwrapRNode(slotValue);
    } else {
      commentNode = insertAnchorNode(hostLView, hostTNode);
    }
    lContainer[NATIVE] = commentNode;
  }
  function populateDehydratedViewsInLContainerImpl(lContainer, tNode, hostLView) {
    if (lContainer[NATIVE] && lContainer[DEHYDRATED_VIEWS]) {
      return true;
    }
    const hydrationInfo = hostLView[HYDRATION];
    const noOffsetIndex = tNode.index - HEADER_OFFSET;
    const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock(tNode) || isDisconnectedNode$1(hydrationInfo, noOffsetIndex);
    if (isNodeCreationMode) {
      return false;
    }
    const currentRNode = getSegmentHead(hydrationInfo, noOffsetIndex);
    const serializedViews = hydrationInfo.data[CONTAINERS]?.[noOffsetIndex];
    ngDevMode && assertDefined(serializedViews, "Unexpected state: no hydration info available for a given TNode, which represents a view container.");
    const [commentNode, dehydratedViews] = locateDehydratedViewsInContainer(currentRNode, serializedViews);
    if (ngDevMode) {
      validateMatchingNode(commentNode, Node.COMMENT_NODE, null, hostLView, tNode, true);
      markRNodeAsClaimedByHydration(commentNode, false);
    }
    lContainer[NATIVE] = commentNode;
    lContainer[DEHYDRATED_VIEWS] = dehydratedViews;
    return true;
  }
  function locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue) {
    if (!_populateDehydratedViewsInLContainer(lContainer, hostTNode, hostLView)) {
      createAnchorNode(lContainer, hostLView, hostTNode, slotValue);
    }
  }
  function enableLocateOrCreateContainerRefImpl() {
    _locateOrCreateAnchorNode = locateOrCreateAnchorNode;
    _populateDehydratedViewsInLContainer = populateDehydratedViewsInLContainerImpl;
  }
  function getIdxOfMatchingSelector(tNode, selector) {
    const localNames = tNode.localNames;
    if (localNames !== null) {
      for (let i = 0; i < localNames.length; i += 2) {
        if (localNames[i] === selector) {
          return localNames[i + 1];
        }
      }
    }
    return null;
  }
  function createResultByTNodeType(tNode, currentView) {
    if (tNode.type & (3 | 8)) {
      return createElementRef(tNode, currentView);
    } else if (tNode.type & 4) {
      return createTemplateRef(tNode, currentView);
    }
    return null;
  }
  function createResultForNode(lView, tNode, matchingIdx, read) {
    if (matchingIdx === -1) {
      return createResultByTNodeType(tNode, lView);
    } else if (matchingIdx === -2) {
      return createSpecialToken(lView, tNode, read);
    } else {
      return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);
    }
  }
  function createSpecialToken(lView, tNode, read) {
    if (read === ElementRef) {
      return createElementRef(tNode, lView);
    } else if (read === TemplateRef) {
      return createTemplateRef(tNode, lView);
    } else if (read === ViewContainerRef) {
      ngDevMode && assertTNodeType(
        tNode,
        3 | 12
        /* TNodeType.AnyContainer */
      );
      return createContainerRef(tNode, lView);
    } else {
      ngDevMode && throwError2(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);
    }
  }
  function materializeViewResults(tView, lView, tQuery, queryIndex) {
    const lQuery = lView[QUERIES].queries[queryIndex];
    if (lQuery.matches === null) {
      const tViewData = tView.data;
      const tQueryMatches = tQuery.matches;
      const result = [];
      for (let i = 0; tQueryMatches !== null && i < tQueryMatches.length; i += 2) {
        const matchedNodeIdx = tQueryMatches[i];
        if (matchedNodeIdx < 0) {
          result.push(null);
        } else {
          ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);
          const tNode = tViewData[matchedNodeIdx];
          result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));
        }
      }
      lQuery.matches = result;
    }
    return lQuery.matches;
  }
  function collectQueryResults(tView, lView, queryIndex, result) {
    const tQuery = tView.queries.getByIndex(queryIndex);
    const tQueryMatches = tQuery.matches;
    if (tQueryMatches !== null) {
      const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);
      for (let i = 0; i < tQueryMatches.length; i += 2) {
        const tNodeIdx = tQueryMatches[i];
        if (tNodeIdx > 0) {
          result.push(lViewResults[i / 2]);
        } else {
          const childQueryIndex = tQueryMatches[i + 1];
          const declarationLContainer = lView[-tNodeIdx];
          ngDevMode && assertLContainer(declarationLContainer);
          for (let i2 = CONTAINER_HEADER_OFFSET; i2 < declarationLContainer.length; i2++) {
            const embeddedLView = declarationLContainer[i2];
            if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {
              collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
            }
          }
          if (declarationLContainer[MOVED_VIEWS] !== null) {
            const embeddedLViews = declarationLContainer[MOVED_VIEWS];
            for (let i2 = 0; i2 < embeddedLViews.length; i2++) {
              const embeddedLView = embeddedLViews[i2];
              collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
            }
          }
        }
      }
    }
    return result;
  }
  function loadQueryInternal(lView, queryIndex) {
    ngDevMode && assertDefined(lView[QUERIES], "LQueries should be defined when trying to load a query");
    ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);
    return lView[QUERIES].queries[queryIndex].queryList;
  }
  function createLQuery(tView, lView, flags) {
    const queryList = new QueryList(
      (flags & 4) === 4
      /* QueryFlags.emitDistinctChangesOnly */
    );
    storeCleanupWithContext(tView, lView, queryList, queryList.destroy);
    const lQueries = (lView[QUERIES] ??= new LQueries_()).queries;
    return lQueries.push(new LQuery_(queryList)) - 1;
  }
  function createViewQuery(predicate, flags, read) {
    ngDevMode && assertNumber(flags, "Expecting flags");
    const tView = getTView();
    if (tView.firstCreatePass) {
      createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);
      if ((flags & 2) === 2) {
        tView.staticViewQueries = true;
      }
    }
    return createLQuery(tView, getLView(), flags);
  }
  function createContentQuery(directiveIndex, predicate, flags, read) {
    ngDevMode && assertNumber(flags, "Expecting flags");
    const tView = getTView();
    if (tView.firstCreatePass) {
      const tNode = getCurrentTNode();
      createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);
      saveContentQueryAndDirectiveIndex(tView, directiveIndex);
      if ((flags & 2) === 2) {
        tView.staticContentQueries = true;
      }
    }
    return createLQuery(tView, getLView(), flags);
  }
  function splitQueryMultiSelectors(locator) {
    return locator.split(",").map((s) => s.trim());
  }
  function createTQuery(tView, metadata, nodeIndex) {
    if (tView.queries === null)
      tView.queries = new TQueries_();
    tView.queries.track(new TQuery_(metadata, nodeIndex));
  }
  function saveContentQueryAndDirectiveIndex(tView, directiveIndex) {
    const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);
    const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;
    if (directiveIndex !== lastSavedDirectiveIndex) {
      tViewContentQueries.push(tView.queries.length - 1, directiveIndex);
    }
  }
  function getTQuery(tView, index) {
    ngDevMode && assertDefined(tView.queries, "TQueries must be defined to retrieve a TQuery");
    return tView.queries.getByIndex(index);
  }
  function getQueryResults(lView, queryIndex) {
    const tView = lView[TVIEW];
    const tQuery = getTQuery(tView, queryIndex);
    return tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);
  }
  function isSignal(value) {
    return typeof value === "function" && value[SIGNAL] !== void 0;
  }
  function \u0275unwrapWritableSignal(value) {
    return null;
  }
  function signal(initialValue, options) {
    performanceMarkFeature("NgSignals");
    const signalFn = createSignal(initialValue);
    const node = signalFn[SIGNAL];
    if (options?.equal) {
      node.equal = options.equal;
    }
    signalFn.set = (newValue) => signalSetFn(node, newValue);
    signalFn.update = (updateFn) => signalUpdateFn(node, updateFn);
    signalFn.asReadonly = signalAsReadonlyFn.bind(signalFn);
    if (ngDevMode) {
      signalFn.toString = () => `[Signal: ${signalFn()}]`;
    }
    return signalFn;
  }
  function signalAsReadonlyFn() {
    const node = this[SIGNAL];
    if (node.readonlyFn === void 0) {
      const readonlyFn = () => this();
      readonlyFn[SIGNAL] = node;
      node.readonlyFn = readonlyFn;
    }
    return node.readonlyFn;
  }
  function isWritableSignal(value) {
    return isSignal(value) && typeof value.set === "function";
  }
  function createQuerySignalFn(firstOnly, required) {
    let node;
    const signalFn = createComputed(() => {
      node._dirtyCounter();
      const value = refreshSignalQuery(node, firstOnly);
      if (required && value === void 0) {
        throw new RuntimeError(-951, ngDevMode && "Child query result is required but no value is available.");
      }
      return value;
    });
    node = signalFn[SIGNAL];
    node._dirtyCounter = signal(0);
    node._flatValue = void 0;
    if (ngDevMode) {
      signalFn.toString = () => `[Query Signal]`;
    }
    return signalFn;
  }
  function createSingleResultOptionalQuerySignalFn() {
    return createQuerySignalFn(
      /* firstOnly */
      true,
      /* required */
      false
    );
  }
  function createSingleResultRequiredQuerySignalFn() {
    return createQuerySignalFn(
      /* firstOnly */
      true,
      /* required */
      true
    );
  }
  function createMultiResultQuerySignalFn() {
    return createQuerySignalFn(
      /* firstOnly */
      false,
      /* required */
      false
    );
  }
  function bindQueryToSignal(target, queryIndex) {
    const node = target[SIGNAL];
    node._lView = getLView();
    node._queryIndex = queryIndex;
    node._queryList = loadQueryInternal(node._lView, queryIndex);
    node._queryList.onDirty(() => node._dirtyCounter.update((v) => v + 1));
  }
  function refreshSignalQuery(node, firstOnly) {
    const lView = node._lView;
    const queryIndex = node._queryIndex;
    if (lView === void 0 || queryIndex === void 0 || lView[FLAGS] & 4) {
      return firstOnly ? void 0 : EMPTY_ARRAY;
    }
    const queryList = loadQueryInternal(lView, queryIndex);
    const results = getQueryResults(lView, queryIndex);
    queryList.reset(results, unwrapElementRef);
    if (firstOnly) {
      return queryList.first;
    } else {
      const resultChanged = queryList._changesDetected;
      if (resultChanged || node._flatValue === void 0) {
        return node._flatValue = queryList.toArray();
      }
      return node._flatValue;
    }
  }
  function viewChildFn(locator, opts) {
    ngDevMode && assertInInjectionContext(viewChild);
    return createSingleResultOptionalQuerySignalFn();
  }
  function viewChildRequiredFn(locator, opts) {
    ngDevMode && assertInInjectionContext(viewChild);
    return createSingleResultRequiredQuerySignalFn();
  }
  function viewChildren(locator, opts) {
    ngDevMode && assertInInjectionContext(viewChildren);
    return createMultiResultQuerySignalFn();
  }
  function contentChildFn(locator, opts) {
    ngDevMode && assertInInjectionContext(contentChild);
    return createSingleResultOptionalQuerySignalFn();
  }
  function contentChildRequiredFn(locator, opts) {
    ngDevMode && assertInInjectionContext(contentChildren);
    return createSingleResultRequiredQuerySignalFn();
  }
  function contentChildren(locator, opts) {
    return createMultiResultQuerySignalFn();
  }
  function createModelSignal(initialValue) {
    const node = Object.create(INPUT_SIGNAL_NODE);
    const emitterRef = new OutputEmitterRef();
    node.value = initialValue;
    function getter() {
      producerAccessed(node);
      assertModelSet(node.value);
      return node.value;
    }
    getter[SIGNAL] = node;
    getter.asReadonly = signalAsReadonlyFn.bind(getter);
    getter.set = (newValue) => {
      if (!node.equal(node.value, newValue)) {
        signalSetFn(node, newValue);
        emitterRef.emit(newValue);
      }
    };
    getter.update = (updateFn) => {
      assertModelSet(node.value);
      getter.set(updateFn(node.value));
    };
    getter.subscribe = emitterRef.subscribe.bind(emitterRef);
    getter.destroyRef = emitterRef.destroyRef;
    if (ngDevMode) {
      getter.toString = () => `[Model Signal: ${getter()}]`;
    }
    return getter;
  }
  function assertModelSet(value) {
    if (value === REQUIRED_UNSET_VALUE) {
      throw new RuntimeError(-952, ngDevMode && "Model is required but no value is available yet.");
    }
  }
  function modelFunction(initialValue) {
    ngDevMode && assertInInjectionContext(model);
    return createModelSignal(initialValue);
  }
  function modelRequiredFunction() {
    ngDevMode && assertInInjectionContext(model);
    return createModelSignal(REQUIRED_UNSET_VALUE);
  }
  function resolveComponentResources(resourceResolver) {
    const componentResolved = [];
    const urlMap = /* @__PURE__ */ new Map();
    function cachedResourceResolve(url) {
      let promise = urlMap.get(url);
      if (!promise) {
        const resp = resourceResolver(url);
        urlMap.set(url, promise = resp.then(unwrapResponse));
      }
      return promise;
    }
    componentResourceResolutionQueue.forEach((component, type) => {
      const promises = [];
      if (component.templateUrl) {
        promises.push(cachedResourceResolve(component.templateUrl).then((template2) => {
          component.template = template2;
        }));
      }
      const styles2 = typeof component.styles === "string" ? [component.styles] : component.styles || [];
      component.styles = styles2;
      if (component.styleUrl && component.styleUrls?.length) {
        throw new Error("@Component cannot define both `styleUrl` and `styleUrls`. Use `styleUrl` if the component has one stylesheet, or `styleUrls` if it has multiple");
      } else if (component.styleUrls?.length) {
        const styleOffset = component.styles.length;
        const styleUrls = component.styleUrls;
        component.styleUrls.forEach((styleUrl, index) => {
          styles2.push("");
          promises.push(cachedResourceResolve(styleUrl).then((style) => {
            styles2[styleOffset + index] = style;
            styleUrls.splice(styleUrls.indexOf(styleUrl), 1);
            if (styleUrls.length == 0) {
              component.styleUrls = void 0;
            }
          }));
        });
      } else if (component.styleUrl) {
        promises.push(cachedResourceResolve(component.styleUrl).then((style) => {
          styles2.push(style);
          component.styleUrl = void 0;
        }));
      }
      const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));
      componentResolved.push(fullyResolved);
    });
    clearResolutionOfComponentResourcesQueue();
    return Promise.all(componentResolved).then(() => void 0);
  }
  function maybeQueueResolutionOfComponentResources(type, metadata) {
    if (componentNeedsResolution(metadata)) {
      componentResourceResolutionQueue.set(type, metadata);
      componentDefPendingResolution.add(type);
    }
  }
  function isComponentDefPendingResolution(type) {
    return componentDefPendingResolution.has(type);
  }
  function componentNeedsResolution(component) {
    return !!(component.templateUrl && !component.hasOwnProperty("template") || component.styleUrls && component.styleUrls.length || component.styleUrl);
  }
  function clearResolutionOfComponentResourcesQueue() {
    const old = componentResourceResolutionQueue;
    componentResourceResolutionQueue = /* @__PURE__ */ new Map();
    return old;
  }
  function restoreComponentResolutionQueue(queue) {
    componentDefPendingResolution.clear();
    queue.forEach((_, type) => componentDefPendingResolution.add(type));
    componentResourceResolutionQueue = queue;
  }
  function isComponentResourceResolutionQueueEmpty() {
    return componentResourceResolutionQueue.size === 0;
  }
  function unwrapResponse(response) {
    return typeof response == "string" ? response : response.text();
  }
  function componentDefResolved(type) {
    componentDefPendingResolution.delete(type);
  }
  function assertSameOrNotExisting(id, type, incoming) {
    if (type && type !== incoming && checkForDuplicateNgModules) {
      throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);
    }
  }
  function registerNgModuleType(ngModuleType, id) {
    const existing = modules.get(id) || null;
    assertSameOrNotExisting(id, existing, ngModuleType);
    modules.set(id, ngModuleType);
  }
  function getRegisteredNgModuleType(id) {
    return modules.get(id);
  }
  function setAllowDuplicateNgModuleIdsForTest(allowDuplicates) {
    checkForDuplicateNgModules = !allowDuplicates;
  }
  function \u0275\u0275validateIframeAttribute(attrValue, tagName, attrName) {
    const lView = getLView();
    const tNode = getSelectedTNode();
    const element2 = getNativeByTNode(tNode, lView);
    if (tNode.type === 2 && tagName.toLowerCase() === "iframe") {
      const iframe = element2;
      iframe.src = "";
      iframe.srcdoc = trustedHTMLFromString("");
      nativeRemoveNode(lView[RENDERER], iframe);
      const errorMessage = ngDevMode && `Angular has detected that the \`${attrName}\` was applied as a binding to an <iframe>${getTemplateLocationDetails(lView)}. For security reasons, the \`${attrName}\` can be set on an <iframe> as a static attribute only. 
To fix this, switch the \`${attrName}\` binding to a static attribute in a template or in host bindings section.`;
      throw new RuntimeError(-910, errorMessage);
    }
    return attrValue;
  }
  function getSuperType(type) {
    return Object.getPrototypeOf(type.prototype).constructor;
  }
  function \u0275\u0275InheritDefinitionFeature(definition) {
    let superType = getSuperType(definition.type);
    let shouldInheritFields = true;
    const inheritanceChain = [definition];
    while (superType) {
      let superDef = void 0;
      if (isComponentDef(definition)) {
        superDef = superType.\u0275cmp || superType.\u0275dir;
      } else {
        if (superType.\u0275cmp) {
          throw new RuntimeError(903, ngDevMode && `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);
        }
        superDef = superType.\u0275dir;
      }
      if (superDef) {
        if (shouldInheritFields) {
          inheritanceChain.push(superDef);
          const writeableDef = definition;
          writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);
          writeableDef.inputTransforms = maybeUnwrapEmpty(definition.inputTransforms);
          writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);
          writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);
          const superHostBindings = superDef.hostBindings;
          superHostBindings && inheritHostBindings(definition, superHostBindings);
          const superViewQuery = superDef.viewQuery;
          const superContentQueries = superDef.contentQueries;
          superViewQuery && inheritViewQuery(definition, superViewQuery);
          superContentQueries && inheritContentQueries(definition, superContentQueries);
          mergeInputsWithTransforms(definition, superDef);
          fillProperties(definition.outputs, superDef.outputs);
          if (isComponentDef(superDef) && superDef.data.animation) {
            const defData = definition.data;
            defData.animation = (defData.animation || []).concat(superDef.data.animation);
          }
        }
        const features = superDef.features;
        if (features) {
          for (let i = 0; i < features.length; i++) {
            const feature = features[i];
            if (feature && feature.ngInherit) {
              feature(definition);
            }
            if (feature === \u0275\u0275InheritDefinitionFeature) {
              shouldInheritFields = false;
            }
          }
        }
      }
      superType = Object.getPrototypeOf(superType);
    }
    mergeHostAttrsAcrossInheritance(inheritanceChain);
  }
  function mergeInputsWithTransforms(target, source) {
    for (const key in source.inputs) {
      if (!source.inputs.hasOwnProperty(key)) {
        continue;
      }
      if (target.inputs.hasOwnProperty(key)) {
        continue;
      }
      const value = source.inputs[key];
      if (value === void 0) {
        continue;
      }
      target.inputs[key] = value;
      target.declaredInputs[key] = source.declaredInputs[key];
      if (source.inputTransforms !== null) {
        const minifiedName = Array.isArray(value) ? value[0] : value;
        if (!source.inputTransforms.hasOwnProperty(minifiedName)) {
          continue;
        }
        target.inputTransforms ??= {};
        target.inputTransforms[minifiedName] = source.inputTransforms[minifiedName];
      }
    }
  }
  function mergeHostAttrsAcrossInheritance(inheritanceChain) {
    let hostVars = 0;
    let hostAttrs = null;
    for (let i = inheritanceChain.length - 1; i >= 0; i--) {
      const def = inheritanceChain[i];
      def.hostVars = hostVars += def.hostVars;
      def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));
    }
  }
  function maybeUnwrapEmpty(value) {
    if (value === EMPTY_OBJ) {
      return {};
    } else if (value === EMPTY_ARRAY) {
      return [];
    } else {
      return value;
    }
  }
  function inheritViewQuery(definition, superViewQuery) {
    const prevViewQuery = definition.viewQuery;
    if (prevViewQuery) {
      definition.viewQuery = (rf, ctx) => {
        superViewQuery(rf, ctx);
        prevViewQuery(rf, ctx);
      };
    } else {
      definition.viewQuery = superViewQuery;
    }
  }
  function inheritContentQueries(definition, superContentQueries) {
    const prevContentQueries = definition.contentQueries;
    if (prevContentQueries) {
      definition.contentQueries = (rf, ctx, directiveIndex) => {
        superContentQueries(rf, ctx, directiveIndex);
        prevContentQueries(rf, ctx, directiveIndex);
      };
    } else {
      definition.contentQueries = superContentQueries;
    }
  }
  function inheritHostBindings(definition, superHostBindings) {
    const prevHostBindings = definition.hostBindings;
    if (prevHostBindings) {
      definition.hostBindings = (rf, ctx) => {
        superHostBindings(rf, ctx);
        prevHostBindings(rf, ctx);
      };
    } else {
      definition.hostBindings = superHostBindings;
    }
  }
  function \u0275\u0275CopyDefinitionFeature(definition) {
    let superType = getSuperType(definition.type);
    let superDef = void 0;
    if (isComponentDef(definition)) {
      superDef = superType.\u0275cmp;
    } else {
      superDef = superType.\u0275dir;
    }
    const defAny = definition;
    for (const field of COPY_DIRECTIVE_FIELDS) {
      defAny[field] = superDef[field];
    }
    if (isComponentDef(superDef)) {
      for (const field of COPY_COMPONENT_FIELDS) {
        defAny[field] = superDef[field];
      }
    }
  }
  function \u0275\u0275HostDirectivesFeature(rawHostDirectives) {
    const feature = (definition) => {
      const resolved = (Array.isArray(rawHostDirectives) ? rawHostDirectives : rawHostDirectives()).map((dir) => {
        return typeof dir === "function" ? { directive: resolveForwardRef(dir), inputs: EMPTY_OBJ, outputs: EMPTY_OBJ } : {
          directive: resolveForwardRef(dir.directive),
          inputs: bindingArrayToMap(dir.inputs),
          outputs: bindingArrayToMap(dir.outputs)
        };
      });
      if (definition.hostDirectives === null) {
        definition.findHostDirectiveDefs = findHostDirectiveDefs;
        definition.hostDirectives = resolved;
      } else {
        definition.hostDirectives.unshift(...resolved);
      }
    };
    feature.ngInherit = true;
    return feature;
  }
  function findHostDirectiveDefs(currentDef, matchedDefs, hostDirectiveDefs) {
    if (currentDef.hostDirectives !== null) {
      for (const hostDirectiveConfig of currentDef.hostDirectives) {
        const hostDirectiveDef = getDirectiveDef(hostDirectiveConfig.directive);
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          validateHostDirective(hostDirectiveConfig, hostDirectiveDef);
        }
        patchDeclaredInputs(hostDirectiveDef.declaredInputs, hostDirectiveConfig.inputs);
        findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);
        hostDirectiveDefs.set(hostDirectiveDef, hostDirectiveConfig);
        matchedDefs.push(hostDirectiveDef);
      }
    }
  }
  function bindingArrayToMap(bindings) {
    if (bindings === void 0 || bindings.length === 0) {
      return EMPTY_OBJ;
    }
    const result = {};
    for (let i = 0; i < bindings.length; i += 2) {
      result[bindings[i]] = bindings[i + 1];
    }
    return result;
  }
  function patchDeclaredInputs(declaredInputs, exposedInputs) {
    for (const publicName in exposedInputs) {
      if (exposedInputs.hasOwnProperty(publicName)) {
        const remappedPublicName = exposedInputs[publicName];
        const privateName = declaredInputs[publicName];
        if ((typeof ngDevMode === "undefined" || ngDevMode) && declaredInputs.hasOwnProperty(remappedPublicName)) {
          assertEqual(declaredInputs[remappedPublicName], declaredInputs[publicName], `Conflicting host directive input alias ${publicName}.`);
        }
        declaredInputs[remappedPublicName] = privateName;
      }
    }
  }
  function validateHostDirective(hostDirectiveConfig, directiveDef) {
    const type = hostDirectiveConfig.directive;
    if (directiveDef === null) {
      if (getComponentDef(type) !== null) {
        throw new RuntimeError(310, `Host directive ${type.name} cannot be a component.`);
      }
      throw new RuntimeError(307, `Could not resolve metadata for host directive ${type.name}. Make sure that the ${type.name} class is annotated with an @Directive decorator.`);
    }
    if (!directiveDef.standalone) {
      throw new RuntimeError(308, `Host directive ${directiveDef.type.name} must be standalone.`);
    }
    validateMappings("input", directiveDef, hostDirectiveConfig.inputs);
    validateMappings("output", directiveDef, hostDirectiveConfig.outputs);
  }
  function validateMappings(bindingType, def, hostDirectiveBindings) {
    const className = def.type.name;
    const bindings = bindingType === "input" ? def.inputs : def.outputs;
    for (const publicName in hostDirectiveBindings) {
      if (hostDirectiveBindings.hasOwnProperty(publicName)) {
        if (!bindings.hasOwnProperty(publicName)) {
          throw new RuntimeError(311, `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`);
        }
        const remappedPublicName = hostDirectiveBindings[publicName];
        if (bindings.hasOwnProperty(remappedPublicName) && remappedPublicName !== publicName) {
          throw new RuntimeError(312, `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`);
        }
      }
    }
  }
  function \u0275\u0275InputTransformsFeature(definition) {
    const inputs = definition.inputConfig;
    const inputTransforms = {};
    for (const minifiedKey in inputs) {
      if (inputs.hasOwnProperty(minifiedKey)) {
        const value = inputs[minifiedKey];
        if (Array.isArray(value) && value[3]) {
          inputTransforms[minifiedKey] = value[3];
        }
      }
    }
    definition.inputTransforms = inputTransforms;
  }
  function createNgModule(ngModule, parentInjector) {
    return new NgModuleRef(ngModule, parentInjector ?? null, []);
  }
  function createNgModuleRefWithProviders(moduleType, parentInjector, additionalProviders) {
    return new NgModuleRef(moduleType, parentInjector, additionalProviders);
  }
  function createEnvironmentInjector(providers, parent, debugName = null) {
    const adapter = new EnvironmentNgModuleRefAdapter({ providers, parent, debugName, runEnvironmentInitializers: true });
    return adapter.injector;
  }
  function getAsyncClassMetadataFn(type) {
    const componentClass = type;
    return componentClass[ASYNC_COMPONENT_METADATA_FN] ?? null;
  }
  function setClassMetadataAsync(type, dependencyLoaderFn, metadataSetterFn) {
    const componentClass = type;
    componentClass[ASYNC_COMPONENT_METADATA_FN] = () => Promise.all(dependencyLoaderFn()).then((dependencies) => {
      metadataSetterFn(...dependencies);
      componentClass[ASYNC_COMPONENT_METADATA_FN] = null;
      return dependencies;
    });
    return componentClass[ASYNC_COMPONENT_METADATA_FN];
  }
  function setClassMetadata(type, decorators, ctorParameters, propDecorators) {
    return noSideEffects(() => {
      const clazz = type;
      if (decorators !== null) {
        if (clazz.hasOwnProperty("decorators") && clazz.decorators !== void 0) {
          clazz.decorators.push(...decorators);
        } else {
          clazz.decorators = decorators;
        }
      }
      if (ctorParameters !== null) {
        clazz.ctorParameters = ctorParameters;
      }
      if (propDecorators !== null) {
        if (clazz.hasOwnProperty("propDecorators") && clazz.propDecorators !== void 0) {
          clazz.propDecorators = { ...clazz.propDecorators, ...propDecorators };
        } else {
          clazz.propDecorators = propDecorators;
        }
      }
    });
  }
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return Array.isArray(obj) || !(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
    Symbol.iterator in obj;
  }
  function areIterablesEqual(a, b, comparator) {
    const iterator1 = a[Symbol.iterator]();
    const iterator2 = b[Symbol.iterator]();
    while (true) {
      const item1 = iterator1.next();
      const item2 = iterator2.next();
      if (item1.done && item2.done)
        return true;
      if (item1.done || item2.done)
        return false;
      if (!comparator(item1.value, item2.value))
        return false;
    }
  }
  function iterateListLike(obj, fn2) {
    if (Array.isArray(obj)) {
      for (let i = 0; i < obj.length; i++) {
        fn2(obj[i]);
      }
    } else {
      const iterator2 = obj[Symbol.iterator]();
      let item;
      while (!(item = iterator2.next()).done) {
        fn2(item.value);
      }
    }
  }
  function isJsObject(o) {
    return o !== null && (typeof o === "function" || typeof o === "object");
  }
  function devModeEqual(a, b) {
    const isListLikeIterableA = isListLikeIterable(a);
    const isListLikeIterableB = isListLikeIterable(b);
    if (isListLikeIterableA && isListLikeIterableB) {
      return areIterablesEqual(a, b, devModeEqual);
    } else {
      const isAObject = a && (typeof a === "object" || typeof a === "function");
      const isBObject = b && (typeof b === "object" || typeof b === "function");
      if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
        return true;
      } else {
        return Object.is(a, b);
      }
    }
  }
  function updateBinding(lView, bindingIndex, value) {
    return lView[bindingIndex] = value;
  }
  function getBinding(lView, bindingIndex) {
    ngDevMode && assertIndexInRange(lView, bindingIndex);
    ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, "Stored value should never be NO_CHANGE.");
    return lView[bindingIndex];
  }
  function bindingUpdated(lView, bindingIndex, value) {
    ngDevMode && assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
    ngDevMode && assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);
    const oldValue = lView[bindingIndex];
    if (Object.is(oldValue, value)) {
      return false;
    } else {
      if (ngDevMode && isInCheckNoChangesMode()) {
        const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : void 0;
        if (!devModeEqual(oldValueToCompare, value)) {
          const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);
          throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName, lView);
        }
        return false;
      }
      lView[bindingIndex] = value;
      return true;
    }
  }
  function bindingUpdated2(lView, bindingIndex, exp1, exp2) {
    const different = bindingUpdated(lView, bindingIndex, exp1);
    return bindingUpdated(lView, bindingIndex + 1, exp2) || different;
  }
  function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {
    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
    return bindingUpdated(lView, bindingIndex + 2, exp3) || different;
  }
  function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {
    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
    return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;
  }
  function isDetachedByI18n(tNode) {
    return (tNode.flags & 32) === 32;
  }
  function templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {
    ngDevMode && assertFirstCreatePass(tView);
    ngDevMode && ngDevMode.firstCreatePass++;
    const tViewConsts = tView.consts;
    const tNode = getOrCreateTNode(tView, index, 4, tagName || null, getConstant(tViewConsts, attrsIndex));
    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
    registerPostOrderHooks(tView, tNode);
    const embeddedTView = tNode.tView = createTView(
      2,
      tNode,
      templateFn,
      decls,
      vars,
      tView.directiveRegistry,
      tView.pipeRegistry,
      null,
      tView.schemas,
      tViewConsts,
      null
      /* ssrId */
    );
    if (tView.queries !== null) {
      tView.queries.template(tView, tNode);
      embeddedTView.queries = tView.queries.embeddedTView(tNode);
    }
    return tNode;
  }
  function \u0275\u0275template(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
    const lView = getLView();
    const tView = getTView();
    const adjustedIndex = index + HEADER_OFFSET;
    const tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
    setCurrentTNode(tNode, false);
    const comment = _locateOrCreateContainerAnchor(tView, lView, tNode, index);
    if (wasLastNodeCreated()) {
      appendChild(tView, lView, comment, tNode);
    }
    attachPatchData(comment, lView);
    const lContainer = createLContainer(comment, lView, comment, tNode);
    lView[adjustedIndex] = lContainer;
    addToViewTree(lView, lContainer);
    populateDehydratedViewsInLContainer(lContainer, tNode, lView);
    if (isDirectiveHost(tNode)) {
      createDirectivesInstances(tView, lView, tNode);
    }
    if (localRefsIndex != null) {
      saveResolvedLocalsInData(lView, tNode, localRefExtractor);
    }
    return \u0275\u0275template;
  }
  function createContainerAnchorImpl(tView, lView, tNode, index) {
    lastNodeWasCreated(true);
    return lView[RENDERER].createComment(ngDevMode ? "container" : "");
  }
  function locateOrCreateContainerAnchorImpl(tView, lView, tNode, index) {
    const hydrationInfo = lView[HYDRATION];
    const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDetachedByI18n(tNode) || isDisconnectedNode$1(hydrationInfo, index);
    lastNodeWasCreated(isNodeCreationMode);
    if (isNodeCreationMode) {
      return createContainerAnchorImpl(tView, lView, tNode, index);
    }
    const ssrId = hydrationInfo.data[TEMPLATES]?.[index] ?? null;
    if (ssrId !== null && tNode.tView !== null) {
      if (tNode.tView.ssrId === null) {
        tNode.tView.ssrId = ssrId;
      } else {
        ngDevMode && assertEqual(tNode.tView.ssrId, ssrId, "Unexpected value of the `ssrId` for this TView");
      }
    }
    const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);
    ngDevMode && validateNodeExists(currentRNode, lView, tNode);
    setSegmentHead(hydrationInfo, index, currentRNode);
    const viewContainerSize = calcSerializedContainerSize(hydrationInfo, index);
    const comment = siblingAfter(viewContainerSize, currentRNode);
    if (ngDevMode) {
      validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);
      markRNodeAsClaimedByHydration(comment);
    }
    return comment;
  }
  function enableLocateOrCreateContainerAnchorImpl() {
    _locateOrCreateContainerAnchor = locateOrCreateContainerAnchorImpl;
  }
  function storeTriggerCleanupFn(type, lDetails, cleanupFn) {
    const key = type === 1 ? PREFETCH_TRIGGER_CLEANUP_FNS : TRIGGER_CLEANUP_FNS;
    if (lDetails[key] === null) {
      lDetails[key] = [];
    }
    lDetails[key].push(cleanupFn);
  }
  function invokeTriggerCleanupFns(type, lDetails) {
    const key = type === 1 ? PREFETCH_TRIGGER_CLEANUP_FNS : TRIGGER_CLEANUP_FNS;
    const cleanupFns = lDetails[key];
    if (cleanupFns !== null) {
      for (const cleanupFn of cleanupFns) {
        cleanupFn();
      }
      lDetails[key] = null;
    }
  }
  function invokeAllTriggerCleanupFns(lDetails) {
    invokeTriggerCleanupFns(1, lDetails);
    invokeTriggerCleanupFns(0, lDetails);
  }
  function getDeferBlockDataIndex(deferBlockIndex) {
    return deferBlockIndex + 1;
  }
  function getLDeferBlockDetails(lView, tNode) {
    const tView = lView[TVIEW];
    const slotIndex = getDeferBlockDataIndex(tNode.index);
    ngDevMode && assertIndexInDeclRange(tView, slotIndex);
    return lView[slotIndex];
  }
  function setLDeferBlockDetails(lView, deferBlockIndex, lDetails) {
    const tView = lView[TVIEW];
    const slotIndex = getDeferBlockDataIndex(deferBlockIndex);
    ngDevMode && assertIndexInDeclRange(tView, slotIndex);
    lView[slotIndex] = lDetails;
  }
  function getTDeferBlockDetails(tView, tNode) {
    const slotIndex = getDeferBlockDataIndex(tNode.index);
    ngDevMode && assertIndexInDeclRange(tView, slotIndex);
    return tView.data[slotIndex];
  }
  function setTDeferBlockDetails(tView, deferBlockIndex, deferBlockConfig) {
    const slotIndex = getDeferBlockDataIndex(deferBlockIndex);
    ngDevMode && assertIndexInDeclRange(tView, slotIndex);
    tView.data[slotIndex] = deferBlockConfig;
  }
  function getTemplateIndexForState(newState, hostLView, tNode) {
    const tView = hostLView[TVIEW];
    const tDetails = getTDeferBlockDetails(tView, tNode);
    switch (newState) {
      case DeferBlockState.Complete:
        return tDetails.primaryTmplIndex;
      case DeferBlockState.Loading:
        return tDetails.loadingTmplIndex;
      case DeferBlockState.Error:
        return tDetails.errorTmplIndex;
      case DeferBlockState.Placeholder:
        return tDetails.placeholderTmplIndex;
      default:
        ngDevMode && throwError2(`Unexpected defer block state: ${newState}`);
        return null;
    }
  }
  function getMinimumDurationForState(tDetails, currentState) {
    if (currentState === DeferBlockState.Placeholder) {
      return tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null;
    } else if (currentState === DeferBlockState.Loading) {
      return tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null;
    }
    return null;
  }
  function getLoadingBlockAfter(tDetails) {
    return tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null;
  }
  function addDepsToRegistry(currentDeps, newDeps) {
    if (!currentDeps || currentDeps.length === 0) {
      return newDeps;
    }
    const currentDepSet = new Set(currentDeps);
    for (const dep of newDeps) {
      currentDepSet.add(dep);
    }
    return currentDeps.length === currentDepSet.size ? currentDeps : Array.from(currentDepSet);
  }
  function getPrimaryBlockTNode(tView, tDetails) {
    const adjustedIndex = tDetails.primaryTmplIndex + HEADER_OFFSET;
    return getTNode(tView, adjustedIndex);
  }
  function assertDeferredDependenciesLoaded(tDetails) {
    assertEqual(tDetails.loadingState, DeferDependenciesLoadingState.COMPLETE, "Expecting all deferred dependencies to be loaded.");
  }
  function isTDeferBlockDetails(value) {
    return value !== null && typeof value === "object" && typeof value.primaryTmplIndex === "number";
  }
  function onInteraction(trigger, callback) {
    let entry = interactionTriggers.get(trigger);
    if (!entry) {
      entry = new DeferEventEntry();
      interactionTriggers.set(trigger, entry);
      for (const name of interactionEventNames) {
        trigger.addEventListener(name, entry.listener, eventListenerOptions);
      }
    }
    entry.callbacks.add(callback);
    return () => {
      const { callbacks, listener: listener2 } = entry;
      callbacks.delete(callback);
      if (callbacks.size === 0) {
        interactionTriggers.delete(trigger);
        for (const name of interactionEventNames) {
          trigger.removeEventListener(name, listener2, eventListenerOptions);
        }
      }
    };
  }
  function onHover(trigger, callback) {
    let entry = hoverTriggers.get(trigger);
    if (!entry) {
      entry = new DeferEventEntry();
      hoverTriggers.set(trigger, entry);
      for (const name of hoverEventNames) {
        trigger.addEventListener(name, entry.listener, eventListenerOptions);
      }
    }
    entry.callbacks.add(callback);
    return () => {
      const { callbacks, listener: listener2 } = entry;
      callbacks.delete(callback);
      if (callbacks.size === 0) {
        for (const name of hoverEventNames) {
          trigger.removeEventListener(name, listener2, eventListenerOptions);
        }
        hoverTriggers.delete(trigger);
      }
    };
  }
  function onViewport(trigger, callback, injector) {
    const ngZone = injector.get(NgZone);
    let entry = viewportTriggers.get(trigger);
    intersectionObserver = intersectionObserver || ngZone.runOutsideAngular(() => {
      return new IntersectionObserver((entries) => {
        for (const current of entries) {
          if (current.isIntersecting && viewportTriggers.has(current.target)) {
            ngZone.run(viewportTriggers.get(current.target).listener);
          }
        }
      });
    });
    if (!entry) {
      entry = new DeferEventEntry();
      ngZone.runOutsideAngular(() => intersectionObserver.observe(trigger));
      viewportTriggers.set(trigger, entry);
      observedViewportElements++;
    }
    entry.callbacks.add(callback);
    return () => {
      if (!viewportTriggers.has(trigger)) {
        return;
      }
      entry.callbacks.delete(callback);
      if (entry.callbacks.size === 0) {
        intersectionObserver?.unobserve(trigger);
        viewportTriggers.delete(trigger);
        observedViewportElements--;
      }
      if (observedViewportElements === 0) {
        intersectionObserver?.disconnect();
        intersectionObserver = null;
      }
    };
  }
  function getTriggerLView(deferredHostLView, deferredTNode, walkUpTimes) {
    if (walkUpTimes == null) {
      return deferredHostLView;
    }
    if (walkUpTimes >= 0) {
      return walkUpViews(walkUpTimes, deferredHostLView);
    }
    const deferredContainer = deferredHostLView[deferredTNode.index];
    ngDevMode && assertLContainer(deferredContainer);
    const triggerLView = deferredContainer[CONTAINER_HEADER_OFFSET] ?? null;
    if (ngDevMode && triggerLView !== null) {
      const lDetails = getLDeferBlockDetails(deferredHostLView, deferredTNode);
      const renderedState = lDetails[DEFER_BLOCK_STATE];
      assertEqual(renderedState, DeferBlockState.Placeholder, "Expected a placeholder to be rendered in this defer block.");
      assertLView(triggerLView);
    }
    return triggerLView;
  }
  function getTriggerElement(triggerLView, triggerIndex) {
    const element2 = getNativeByIndex(HEADER_OFFSET + triggerIndex, triggerLView);
    ngDevMode && assertElement(element2);
    return element2;
  }
  function registerDomTrigger(initialLView, tNode, triggerIndex, walkUpTimes, registerFn, callback, type) {
    const injector = initialLView[INJECTOR];
    function pollDomTrigger() {
      if (isDestroyed(initialLView)) {
        return;
      }
      const lDetails = getLDeferBlockDetails(initialLView, tNode);
      const renderedState = lDetails[DEFER_BLOCK_STATE];
      if (renderedState !== DeferBlockInternalState.Initial && renderedState !== DeferBlockState.Placeholder) {
        return;
      }
      const triggerLView = getTriggerLView(initialLView, tNode, walkUpTimes);
      if (!triggerLView) {
        internalAfterNextRender(pollDomTrigger, { injector });
        return;
      }
      if (isDestroyed(triggerLView)) {
        return;
      }
      const element2 = getTriggerElement(triggerLView, triggerIndex);
      const cleanup2 = registerFn(element2, () => {
        if (initialLView !== triggerLView) {
          removeLViewOnDestroy(triggerLView, cleanup2);
        }
        callback();
      }, injector);
      if (initialLView !== triggerLView) {
        storeLViewOnDestroy(triggerLView, cleanup2);
      }
      storeTriggerCleanupFn(type, lDetails, cleanup2);
    }
    internalAfterNextRender(pollDomTrigger, { injector });
  }
  function onIdle(callback, lView) {
    const injector = lView[INJECTOR];
    const scheduler = injector.get(IdleScheduler);
    const cleanupFn = () => scheduler.remove(callback);
    scheduler.add(callback);
    return cleanupFn;
  }
  function onTimer(delay) {
    return (callback, lView) => scheduleTimerTrigger(delay, callback, lView);
  }
  function scheduleTimerTrigger(delay, callback, lView) {
    const injector = lView[INJECTOR];
    const scheduler = injector.get(TimerScheduler);
    const cleanupFn = () => scheduler.remove(callback);
    scheduler.add(delay, callback);
    return cleanupFn;
  }
  function shouldTriggerDeferBlock(injector) {
    const config4 = injector.get(DEFER_BLOCK_CONFIG, null, { optional: true });
    if (config4?.behavior === DeferBlockBehavior.Manual) {
      return false;
    }
    return isPlatformBrowser(injector);
  }
  function \u0275\u0275deferEnableTimerScheduling(tView, tDetails, placeholderConfigIndex, loadingConfigIndex) {
    const tViewConsts = tView.consts;
    if (placeholderConfigIndex != null) {
      tDetails.placeholderBlockConfig = getConstant(tViewConsts, placeholderConfigIndex);
    }
    if (loadingConfigIndex != null) {
      tDetails.loadingBlockConfig = getConstant(tViewConsts, loadingConfigIndex);
    }
    if (applyDeferBlockStateWithSchedulingImpl === null) {
      applyDeferBlockStateWithSchedulingImpl = applyDeferBlockStateWithScheduling;
    }
  }
  function \u0275\u0275defer(index, primaryTmplIndex, dependencyResolverFn, loadingTmplIndex, placeholderTmplIndex, errorTmplIndex, loadingConfigIndex, placeholderConfigIndex, enableTimerScheduling) {
    const lView = getLView();
    const tView = getTView();
    const adjustedIndex = index + HEADER_OFFSET;
    \u0275\u0275template(index, null, 0, 0);
    if (tView.firstCreatePass) {
      performanceMarkFeature("NgDefer");
      const tDetails = {
        primaryTmplIndex,
        loadingTmplIndex: loadingTmplIndex ?? null,
        placeholderTmplIndex: placeholderTmplIndex ?? null,
        errorTmplIndex: errorTmplIndex ?? null,
        placeholderBlockConfig: null,
        loadingBlockConfig: null,
        dependencyResolverFn: dependencyResolverFn ?? null,
        loadingState: DeferDependenciesLoadingState.NOT_STARTED,
        loadingPromise: null,
        providers: null
      };
      enableTimerScheduling?.(tView, tDetails, placeholderConfigIndex, loadingConfigIndex);
      setTDeferBlockDetails(tView, adjustedIndex, tDetails);
    }
    const tNode = getCurrentTNode();
    const lContainer = lView[adjustedIndex];
    populateDehydratedViewsInLContainer(lContainer, tNode, lView);
    const lDetails = [
      null,
      // NEXT_DEFER_BLOCK_STATE
      DeferBlockInternalState.Initial,
      // DEFER_BLOCK_STATE
      null,
      // STATE_IS_FROZEN_UNTIL
      null,
      // LOADING_AFTER_CLEANUP_FN
      null,
      // TRIGGER_CLEANUP_FNS
      null
      // PREFETCH_TRIGGER_CLEANUP_FNS
    ];
    setLDeferBlockDetails(lView, adjustedIndex, lDetails);
    const cleanupTriggersFn = () => invokeAllTriggerCleanupFns(lDetails);
    storeTriggerCleanupFn(0, lDetails, () => removeLViewOnDestroy(lView, cleanupTriggersFn));
    storeLViewOnDestroy(lView, cleanupTriggersFn);
  }
  function \u0275\u0275deferWhen(rawValue) {
    const lView = getLView();
    const bindingIndex = nextBindingIndex();
    if (bindingUpdated(lView, bindingIndex, rawValue)) {
      const prevConsumer = setActiveConsumer(null);
      try {
        const value = Boolean(rawValue);
        const tNode = getSelectedTNode();
        const lDetails = getLDeferBlockDetails(lView, tNode);
        const renderedState = lDetails[DEFER_BLOCK_STATE];
        if (value === false && renderedState === DeferBlockInternalState.Initial) {
          renderPlaceholder(lView, tNode);
        } else if (value === true && (renderedState === DeferBlockInternalState.Initial || renderedState === DeferBlockState.Placeholder)) {
          triggerDeferBlock(lView, tNode);
        }
      } finally {
        setActiveConsumer(prevConsumer);
      }
    }
  }
  function \u0275\u0275deferPrefetchWhen(rawValue) {
    const lView = getLView();
    const bindingIndex = nextBindingIndex();
    if (bindingUpdated(lView, bindingIndex, rawValue)) {
      const prevConsumer = setActiveConsumer(null);
      try {
        const value = Boolean(rawValue);
        const tView = lView[TVIEW];
        const tNode = getSelectedTNode();
        const tDetails = getTDeferBlockDetails(tView, tNode);
        if (value === true && tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
          triggerPrefetching(tDetails, lView, tNode);
        }
      } finally {
        setActiveConsumer(prevConsumer);
      }
    }
  }
  function \u0275\u0275deferOnIdle() {
    scheduleDelayedTrigger(onIdle);
  }
  function \u0275\u0275deferPrefetchOnIdle() {
    scheduleDelayedPrefetching(onIdle);
  }
  function \u0275\u0275deferOnImmediate() {
    const lView = getLView();
    const tNode = getCurrentTNode();
    const tView = lView[TVIEW];
    const injector = lView[INJECTOR];
    const tDetails = getTDeferBlockDetails(tView, tNode);
    if (!shouldTriggerDeferBlock(injector) || tDetails.loadingTmplIndex === null) {
      renderPlaceholder(lView, tNode);
    }
    triggerDeferBlock(lView, tNode);
  }
  function \u0275\u0275deferPrefetchOnImmediate() {
    const lView = getLView();
    const tNode = getCurrentTNode();
    const tView = lView[TVIEW];
    const tDetails = getTDeferBlockDetails(tView, tNode);
    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
      triggerResourceLoading(tDetails, lView, tNode);
    }
  }
  function \u0275\u0275deferOnTimer(delay) {
    scheduleDelayedTrigger(onTimer(delay));
  }
  function \u0275\u0275deferPrefetchOnTimer(delay) {
    scheduleDelayedPrefetching(onTimer(delay));
  }
  function \u0275\u0275deferOnHover(triggerIndex, walkUpTimes) {
    const lView = getLView();
    const tNode = getCurrentTNode();
    renderPlaceholder(lView, tNode);
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onHover,
      () => triggerDeferBlock(lView, tNode),
      0
      /* TriggerType.Regular */
    );
  }
  function \u0275\u0275deferPrefetchOnHover(triggerIndex, walkUpTimes) {
    const lView = getLView();
    const tNode = getCurrentTNode();
    const tView = lView[TVIEW];
    const tDetails = getTDeferBlockDetails(tView, tNode);
    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
      registerDomTrigger(
        lView,
        tNode,
        triggerIndex,
        walkUpTimes,
        onHover,
        () => triggerPrefetching(tDetails, lView, tNode),
        1
        /* TriggerType.Prefetch */
      );
    }
  }
  function \u0275\u0275deferOnInteraction(triggerIndex, walkUpTimes) {
    const lView = getLView();
    const tNode = getCurrentTNode();
    renderPlaceholder(lView, tNode);
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onInteraction,
      () => triggerDeferBlock(lView, tNode),
      0
      /* TriggerType.Regular */
    );
  }
  function \u0275\u0275deferPrefetchOnInteraction(triggerIndex, walkUpTimes) {
    const lView = getLView();
    const tNode = getCurrentTNode();
    const tView = lView[TVIEW];
    const tDetails = getTDeferBlockDetails(tView, tNode);
    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
      registerDomTrigger(
        lView,
        tNode,
        triggerIndex,
        walkUpTimes,
        onInteraction,
        () => triggerPrefetching(tDetails, lView, tNode),
        1
        /* TriggerType.Prefetch */
      );
    }
  }
  function \u0275\u0275deferOnViewport(triggerIndex, walkUpTimes) {
    const lView = getLView();
    const tNode = getCurrentTNode();
    renderPlaceholder(lView, tNode);
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onViewport,
      () => triggerDeferBlock(lView, tNode),
      0
      /* TriggerType.Regular */
    );
  }
  function \u0275\u0275deferPrefetchOnViewport(triggerIndex, walkUpTimes) {
    const lView = getLView();
    const tNode = getCurrentTNode();
    const tView = lView[TVIEW];
    const tDetails = getTDeferBlockDetails(tView, tNode);
    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
      registerDomTrigger(
        lView,
        tNode,
        triggerIndex,
        walkUpTimes,
        onViewport,
        () => triggerPrefetching(tDetails, lView, tNode),
        1
        /* TriggerType.Prefetch */
      );
    }
  }
  function scheduleDelayedTrigger(scheduleFn) {
    const lView = getLView();
    const tNode = getCurrentTNode();
    renderPlaceholder(lView, tNode);
    const cleanupFn = scheduleFn(() => triggerDeferBlock(lView, tNode), lView);
    const lDetails = getLDeferBlockDetails(lView, tNode);
    storeTriggerCleanupFn(0, lDetails, cleanupFn);
  }
  function scheduleDelayedPrefetching(scheduleFn) {
    const lView = getLView();
    const tNode = getCurrentTNode();
    const tView = lView[TVIEW];
    const tDetails = getTDeferBlockDetails(tView, tNode);
    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
      const lDetails = getLDeferBlockDetails(lView, tNode);
      const prefetch = () => triggerPrefetching(tDetails, lView, tNode);
      const cleanupFn = scheduleFn(prefetch, lView);
      storeTriggerCleanupFn(1, lDetails, cleanupFn);
    }
  }
  function renderDeferBlockState(newState, tNode, lContainer, skipTimerScheduling = false) {
    const hostLView = lContainer[PARENT];
    const hostTView = hostLView[TVIEW];
    if (isDestroyed(hostLView))
      return;
    ngDevMode && assertTNodeForLView(tNode, hostLView);
    const lDetails = getLDeferBlockDetails(hostLView, tNode);
    ngDevMode && assertDefined(lDetails, "Expected a defer block state defined");
    const currentState = lDetails[DEFER_BLOCK_STATE];
    if (isValidStateChange(currentState, newState) && isValidStateChange(lDetails[NEXT_DEFER_BLOCK_STATE] ?? -1, newState)) {
      const tDetails = getTDeferBlockDetails(hostTView, tNode);
      const needsScheduling = !skipTimerScheduling && (getLoadingBlockAfter(tDetails) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Loading) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Placeholder));
      if (ngDevMode && needsScheduling) {
        assertDefined(applyDeferBlockStateWithSchedulingImpl, "Expected scheduling function to be defined");
      }
      const applyStateFn = needsScheduling ? applyDeferBlockStateWithSchedulingImpl : applyDeferBlockState;
      try {
        applyStateFn(newState, lDetails, lContainer, tNode, hostLView);
      } catch (error2) {
        handleError(hostLView, error2);
      }
    }
  }
  function isRouterOutletInjector(currentInjector) {
    return currentInjector instanceof ChainedInjector && currentInjector.injector.__ngOutletInjector;
  }
  function applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView) {
    const stateTmplIndex = getTemplateIndexForState(newState, hostLView, tNode);
    if (stateTmplIndex !== null) {
      lDetails[DEFER_BLOCK_STATE] = newState;
      const hostTView = hostLView[TVIEW];
      const adjustedIndex = stateTmplIndex + HEADER_OFFSET;
      const activeBlockTNode = getTNode(hostTView, adjustedIndex);
      const viewIndex = 0;
      removeLViewFromLContainer(lContainer, viewIndex);
      let injector;
      if (newState === DeferBlockState.Complete) {
        const tDetails = getTDeferBlockDetails(hostTView, tNode);
        const providers = tDetails.providers;
        if (providers && providers.length > 0) {
          const parentInjector = hostLView[INJECTOR];
          const parentEnvInjector = isRouterOutletInjector(parentInjector) ? parentInjector : parentInjector.get(EnvironmentInjector);
          injector = parentEnvInjector.get(CachedInjectorService).getOrCreateInjector(tDetails, parentEnvInjector, providers, ngDevMode ? "DeferBlock Injector" : "");
        }
      }
      const dehydratedView = findMatchingDehydratedView(lContainer, activeBlockTNode.tView.ssrId);
      const embeddedLView = createAndRenderEmbeddedLView(hostLView, activeBlockTNode, null, { dehydratedView, injector });
      addLViewToLContainer(lContainer, embeddedLView, viewIndex, shouldAddViewToDom(activeBlockTNode, dehydratedView));
      markViewDirty(embeddedLView);
    }
  }
  function applyDeferBlockStateWithScheduling(newState, lDetails, lContainer, tNode, hostLView) {
    const now2 = Date.now();
    const hostTView = hostLView[TVIEW];
    const tDetails = getTDeferBlockDetails(hostTView, tNode);
    if (lDetails[STATE_IS_FROZEN_UNTIL] === null || lDetails[STATE_IS_FROZEN_UNTIL] <= now2) {
      lDetails[STATE_IS_FROZEN_UNTIL] = null;
      const loadingAfter = getLoadingBlockAfter(tDetails);
      const inLoadingAfterPhase = lDetails[LOADING_AFTER_CLEANUP_FN] !== null;
      if (newState === DeferBlockState.Loading && loadingAfter !== null && !inLoadingAfterPhase) {
        lDetails[NEXT_DEFER_BLOCK_STATE] = newState;
        const cleanupFn = scheduleDeferBlockUpdate(loadingAfter, lDetails, tNode, lContainer, hostLView);
        lDetails[LOADING_AFTER_CLEANUP_FN] = cleanupFn;
      } else {
        if (newState > DeferBlockState.Loading && inLoadingAfterPhase) {
          lDetails[LOADING_AFTER_CLEANUP_FN]();
          lDetails[LOADING_AFTER_CLEANUP_FN] = null;
          lDetails[NEXT_DEFER_BLOCK_STATE] = null;
        }
        applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView);
        const duration = getMinimumDurationForState(tDetails, newState);
        if (duration !== null) {
          lDetails[STATE_IS_FROZEN_UNTIL] = now2 + duration;
          scheduleDeferBlockUpdate(duration, lDetails, tNode, lContainer, hostLView);
        }
      }
    } else {
      lDetails[NEXT_DEFER_BLOCK_STATE] = newState;
    }
  }
  function scheduleDeferBlockUpdate(timeout, lDetails, tNode, lContainer, hostLView) {
    const callback = () => {
      const nextState = lDetails[NEXT_DEFER_BLOCK_STATE];
      lDetails[STATE_IS_FROZEN_UNTIL] = null;
      lDetails[NEXT_DEFER_BLOCK_STATE] = null;
      if (nextState !== null) {
        renderDeferBlockState(nextState, tNode, lContainer);
      }
    };
    return scheduleTimerTrigger(timeout, callback, hostLView);
  }
  function isValidStateChange(currentState, newState) {
    return currentState < newState;
  }
  function triggerPrefetching(tDetails, lView, tNode) {
    if (lView[INJECTOR] && shouldTriggerDeferBlock(lView[INJECTOR])) {
      triggerResourceLoading(tDetails, lView, tNode);
    }
  }
  function triggerResourceLoading(tDetails, lView, tNode) {
    const injector = lView[INJECTOR];
    const tView = lView[TVIEW];
    if (tDetails.loadingState !== DeferDependenciesLoadingState.NOT_STARTED) {
      return;
    }
    const lDetails = getLDeferBlockDetails(lView, tNode);
    const primaryBlockTNode = getPrimaryBlockTNode(tView, tDetails);
    tDetails.loadingState = DeferDependenciesLoadingState.IN_PROGRESS;
    invokeTriggerCleanupFns(1, lDetails);
    let dependenciesFn = tDetails.dependencyResolverFn;
    if (ngDevMode) {
      const deferDependencyInterceptor = injector.get(DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, null, { optional: true });
      if (deferDependencyInterceptor) {
        dependenciesFn = deferDependencyInterceptor.intercept(dependenciesFn);
      }
    }
    const pendingTasks = injector.get(PendingTasks);
    const taskId = pendingTasks.add();
    if (!dependenciesFn) {
      tDetails.loadingPromise = Promise.resolve().then(() => {
        tDetails.loadingPromise = null;
        tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;
        pendingTasks.remove(taskId);
      });
      return;
    }
    tDetails.loadingPromise = Promise.allSettled(dependenciesFn()).then((results) => {
      let failed = false;
      const directiveDefs = [];
      const pipeDefs = [];
      for (const result of results) {
        if (result.status === "fulfilled") {
          const dependency = result.value;
          const directiveDef = getComponentDef(dependency) || getDirectiveDef(dependency);
          if (directiveDef) {
            directiveDefs.push(directiveDef);
          } else {
            const pipeDef = getPipeDef$1(dependency);
            if (pipeDef) {
              pipeDefs.push(pipeDef);
            }
          }
        } else {
          failed = true;
          break;
        }
      }
      tDetails.loadingPromise = null;
      pendingTasks.remove(taskId);
      if (failed) {
        tDetails.loadingState = DeferDependenciesLoadingState.FAILED;
        if (tDetails.errorTmplIndex === null) {
          const templateLocation = getTemplateLocationDetails(lView);
          const error2 = new RuntimeError(750, ngDevMode && `Loading dependencies for \`@defer\` block failed, but no \`@error\` block was configured${templateLocation}. Consider using the \`@error\` block to render an error state.`);
          handleError(lView, error2);
        }
      } else {
        tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;
        const primaryBlockTView = primaryBlockTNode.tView;
        if (directiveDefs.length > 0) {
          primaryBlockTView.directiveRegistry = addDepsToRegistry(primaryBlockTView.directiveRegistry, directiveDefs);
          const directiveTypes = directiveDefs.map((def) => def.type);
          const providers = internalImportProvidersFrom(false, ...directiveTypes);
          tDetails.providers = providers;
        }
        if (pipeDefs.length > 0) {
          primaryBlockTView.pipeRegistry = addDepsToRegistry(primaryBlockTView.pipeRegistry, pipeDefs);
        }
      }
    });
  }
  function renderPlaceholder(lView, tNode) {
    const lContainer = lView[tNode.index];
    ngDevMode && assertLContainer(lContainer);
    renderDeferBlockState(DeferBlockState.Placeholder, tNode, lContainer);
  }
  function renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer) {
    ngDevMode && assertDefined(tDetails.loadingPromise, "Expected loading Promise to exist on this defer block");
    tDetails.loadingPromise.then(() => {
      if (tDetails.loadingState === DeferDependenciesLoadingState.COMPLETE) {
        ngDevMode && assertDeferredDependenciesLoaded(tDetails);
        renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);
      } else if (tDetails.loadingState === DeferDependenciesLoadingState.FAILED) {
        renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);
      }
    });
  }
  function triggerDeferBlock(lView, tNode) {
    const tView = lView[TVIEW];
    const lContainer = lView[tNode.index];
    const injector = lView[INJECTOR];
    ngDevMode && assertLContainer(lContainer);
    if (!shouldTriggerDeferBlock(injector))
      return;
    const lDetails = getLDeferBlockDetails(lView, tNode);
    const tDetails = getTDeferBlockDetails(tView, tNode);
    invokeAllTriggerCleanupFns(lDetails);
    switch (tDetails.loadingState) {
      case DeferDependenciesLoadingState.NOT_STARTED:
        renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);
        triggerResourceLoading(tDetails, lView, tNode);
        if (tDetails.loadingState === DeferDependenciesLoadingState.IN_PROGRESS) {
          renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);
        }
        break;
      case DeferDependenciesLoadingState.IN_PROGRESS:
        renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);
        renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);
        break;
      case DeferDependenciesLoadingState.COMPLETE:
        ngDevMode && assertDeferredDependenciesLoaded(tDetails);
        renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);
        break;
      case DeferDependenciesLoadingState.FAILED:
        renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);
        break;
      default:
        if (ngDevMode) {
          throwError2("Unknown defer block state");
        }
    }
  }
  function \u0275\u0275attribute(name, value, sanitizer, namespace) {
    const lView = getLView();
    const bindingIndex = nextBindingIndex();
    if (bindingUpdated(lView, bindingIndex, value)) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);
      ngDevMode && storePropertyBindingMetadata(tView.data, tNode, "attr." + name, bindingIndex);
    }
    return \u0275\u0275attribute;
  }
  function interpolationV(lView, values) {
    ngDevMode && assertLessThan(2, values.length, "should have at least 3 values");
    ngDevMode && assertEqual(values.length % 2, 1, "should have an odd number of values");
    let isBindingUpdated = false;
    let bindingIndex = getBindingIndex();
    for (let i = 1; i < values.length; i += 2) {
      isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;
    }
    setBindingIndex(bindingIndex);
    if (!isBindingUpdated) {
      return NO_CHANGE;
    }
    let content = values[0];
    for (let i = 1; i < values.length; i += 2) {
      content += renderStringify(values[i]) + values[i + 1];
    }
    return content;
  }
  function interpolation1(lView, prefix, v0, suffix) {
    const different = bindingUpdated(lView, nextBindingIndex(), v0);
    return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;
  }
  function interpolation2(lView, prefix, v0, i0, v1, suffix) {
    const bindingIndex = getBindingIndex();
    const different = bindingUpdated2(lView, bindingIndex, v0, v1);
    incrementBindingIndex(2);
    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;
  }
  function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {
    const bindingIndex = getBindingIndex();
    const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);
    incrementBindingIndex(3);
    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;
  }
  function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
    const bindingIndex = getBindingIndex();
    const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
    incrementBindingIndex(4);
    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;
  }
  function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
    const bindingIndex = getBindingIndex();
    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
    different = bindingUpdated(lView, bindingIndex + 4, v4) || different;
    incrementBindingIndex(5);
    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;
  }
  function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
    const bindingIndex = getBindingIndex();
    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
    different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;
    incrementBindingIndex(6);
    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;
  }
  function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
    const bindingIndex = getBindingIndex();
    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
    different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;
    incrementBindingIndex(7);
    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;
  }
  function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
    const bindingIndex = getBindingIndex();
    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
    different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;
    incrementBindingIndex(8);
    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;
  }
  function \u0275\u0275attributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {
    const lView = getLView();
    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tNode = getSelectedTNode();
      elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
      ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 1, prefix, suffix);
    }
    return \u0275\u0275attributeInterpolate1;
  }
  function \u0275\u0275attributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {
    const lView = getLView();
    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tNode = getSelectedTNode();
      elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
      ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 2, prefix, i0, suffix);
    }
    return \u0275\u0275attributeInterpolate2;
  }
  function \u0275\u0275attributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {
    const lView = getLView();
    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tNode = getSelectedTNode();
      elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
      ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);
    }
    return \u0275\u0275attributeInterpolate3;
  }
  function \u0275\u0275attributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {
    const lView = getLView();
    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tNode = getSelectedTNode();
      elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
      ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
    }
    return \u0275\u0275attributeInterpolate4;
  }
  function \u0275\u0275attributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {
    const lView = getLView();
    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tNode = getSelectedTNode();
      elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
      ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
    }
    return \u0275\u0275attributeInterpolate5;
  }
  function \u0275\u0275attributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {
    const lView = getLView();
    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tNode = getSelectedTNode();
      elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
      ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
    }
    return \u0275\u0275attributeInterpolate6;
  }
  function \u0275\u0275attributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {
    const lView = getLView();
    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tNode = getSelectedTNode();
      elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
      ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
    }
    return \u0275\u0275attributeInterpolate7;
  }
  function \u0275\u0275attributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {
    const lView = getLView();
    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tNode = getSelectedTNode();
      elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
      ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
    }
    return \u0275\u0275attributeInterpolate8;
  }
  function \u0275\u0275attributeInterpolateV(attrName, values, sanitizer, namespace) {
    const lView = getLView();
    const interpolated = interpolationV(lView, values);
    if (interpolated !== NO_CHANGE) {
      const tNode = getSelectedTNode();
      elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);
      if (ngDevMode) {
        const interpolationInBetween = [values[0]];
        for (let i = 2; i < values.length; i += 2) {
          interpolationInBetween.push(values[i]);
        }
        storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
      }
    }
    return \u0275\u0275attributeInterpolateV;
  }
  function toTStylingRange(prev, next) {
    ngDevMode && assertNumberInRange(
      prev,
      0,
      32767
      /* StylingRange.UNSIGNED_MASK */
    );
    ngDevMode && assertNumberInRange(
      next,
      0,
      32767
      /* StylingRange.UNSIGNED_MASK */
    );
    return prev << 17 | next << 2;
  }
  function getTStylingRangePrev(tStylingRange) {
    ngDevMode && assertNumber(tStylingRange, "expected number");
    return tStylingRange >> 17 & 32767;
  }
  function getTStylingRangePrevDuplicate(tStylingRange) {
    ngDevMode && assertNumber(tStylingRange, "expected number");
    return (tStylingRange & 2) == 2;
  }
  function setTStylingRangePrev(tStylingRange, previous) {
    ngDevMode && assertNumber(tStylingRange, "expected number");
    ngDevMode && assertNumberInRange(
      previous,
      0,
      32767
      /* StylingRange.UNSIGNED_MASK */
    );
    return tStylingRange & ~4294836224 | previous << 17;
  }
  function setTStylingRangePrevDuplicate(tStylingRange) {
    ngDevMode && assertNumber(tStylingRange, "expected number");
    return tStylingRange | 2;
  }
  function getTStylingRangeNext(tStylingRange) {
    ngDevMode && assertNumber(tStylingRange, "expected number");
    return (tStylingRange & 131068) >> 2;
  }
  function setTStylingRangeNext(tStylingRange, next) {
    ngDevMode && assertNumber(tStylingRange, "expected number");
    ngDevMode && assertNumberInRange(
      next,
      0,
      32767
      /* StylingRange.UNSIGNED_MASK */
    );
    return tStylingRange & ~131068 | //
    next << 2;
  }
  function getTStylingRangeNextDuplicate(tStylingRange) {
    ngDevMode && assertNumber(tStylingRange, "expected number");
    return (tStylingRange & 1) === 1;
  }
  function setTStylingRangeNextDuplicate(tStylingRange) {
    ngDevMode && assertNumber(tStylingRange, "expected number");
    return tStylingRange | 1;
  }
  function insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding2, isClassBinding) {
    ngDevMode && assertFirstUpdatePass(getTView());
    let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;
    let tmplHead = getTStylingRangePrev(tBindings);
    let tmplTail = getTStylingRangeNext(tBindings);
    tData[index] = tStylingKeyWithStatic;
    let isKeyDuplicateOfStatic = false;
    let tStylingKey;
    if (Array.isArray(tStylingKeyWithStatic)) {
      const staticKeyValueArray = tStylingKeyWithStatic;
      tStylingKey = staticKeyValueArray[1];
      if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {
        isKeyDuplicateOfStatic = true;
      }
    } else {
      tStylingKey = tStylingKeyWithStatic;
    }
    if (isHostBinding2) {
      const hasTemplateBindings = tmplTail !== 0;
      if (hasTemplateBindings) {
        const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);
        tData[index + 1] = toTStylingRange(previousNode, tmplHead);
        if (previousNode !== 0) {
          tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);
        }
        tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);
      } else {
        tData[index + 1] = toTStylingRange(tmplHead, 0);
        if (tmplHead !== 0) {
          tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);
        }
        tmplHead = index;
      }
    } else {
      tData[index + 1] = toTStylingRange(tmplTail, 0);
      ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, "Adding template bindings after hostBindings is not allowed.");
      if (tmplHead === 0) {
        tmplHead = index;
      } else {
        tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);
      }
      tmplTail = index;
    }
    if (isKeyDuplicateOfStatic) {
      tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);
    }
    markDuplicates(tData, tStylingKey, index, true);
    markDuplicates(tData, tStylingKey, index, false);
    markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);
    tBindings = toTStylingRange(tmplHead, tmplTail);
    if (isClassBinding) {
      tNode.classBindings = tBindings;
    } else {
      tNode.styleBindings = tBindings;
    }
  }
  function markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {
    const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;
    if (residual != null && typeof tStylingKey == "string" && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {
      tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);
    }
  }
  function markDuplicates(tData, tStylingKey, index, isPrevDir) {
    const tStylingAtIndex = tData[index + 1];
    const isMap = tStylingKey === null;
    let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);
    let foundDuplicate = false;
    while (cursor !== 0 && (foundDuplicate === false || isMap)) {
      ngDevMode && assertIndexInRange(tData, cursor);
      const tStylingValueAtCursor = tData[cursor];
      const tStyleRangeAtCursor = tData[cursor + 1];
      if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {
        foundDuplicate = true;
        tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);
      }
      cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);
    }
    if (foundDuplicate) {
      tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);
    }
  }
  function isStylingMatch(tStylingKeyCursor, tStylingKey) {
    ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, "Expected that 'tStylingKey' has been unwrapped");
    if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that
    // location so we must assume that we have a match.
    tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it
    // contains a match.
    (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey) {
      return true;
    } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === "string") {
      return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0;
    }
    return false;
  }
  function getLastParsedKey(text2) {
    return text2.substring(parserState.key, parserState.keyEnd);
  }
  function getLastParsedValue(text2) {
    return text2.substring(parserState.value, parserState.valueEnd);
  }
  function parseClassName(text2) {
    resetParserState(text2);
    return parseClassNameNext(text2, consumeWhitespace(text2, 0, parserState.textEnd));
  }
  function parseClassNameNext(text2, index) {
    const end = parserState.textEnd;
    if (end === index) {
      return -1;
    }
    index = parserState.keyEnd = consumeClassToken(text2, parserState.key = index, end);
    return consumeWhitespace(text2, index, end);
  }
  function parseStyle(text2) {
    resetParserState(text2);
    return parseStyleNext(text2, consumeWhitespace(text2, 0, parserState.textEnd));
  }
  function parseStyleNext(text2, startIndex) {
    const end = parserState.textEnd;
    let index = parserState.key = consumeWhitespace(text2, startIndex, end);
    if (end === index) {
      return -1;
    }
    index = parserState.keyEnd = consumeStyleKey(text2, index, end);
    index = consumeSeparator(
      text2,
      index,
      end,
      58
      /* CharCode.COLON */
    );
    index = parserState.value = consumeWhitespace(text2, index, end);
    index = parserState.valueEnd = consumeStyleValue(text2, index, end);
    return consumeSeparator(
      text2,
      index,
      end,
      59
      /* CharCode.SEMI_COLON */
    );
  }
  function resetParserState(text2) {
    parserState.key = 0;
    parserState.keyEnd = 0;
    parserState.value = 0;
    parserState.valueEnd = 0;
    parserState.textEnd = text2.length;
  }
  function consumeWhitespace(text2, startIndex, endIndex) {
    while (startIndex < endIndex && text2.charCodeAt(startIndex) <= 32) {
      startIndex++;
    }
    return startIndex;
  }
  function consumeClassToken(text2, startIndex, endIndex) {
    while (startIndex < endIndex && text2.charCodeAt(startIndex) > 32) {
      startIndex++;
    }
    return startIndex;
  }
  function consumeStyleKey(text2, startIndex, endIndex) {
    let ch;
    while (startIndex < endIndex && ((ch = text2.charCodeAt(startIndex)) === 45 || ch === 95 || (ch & -33) >= 65 && (ch & -33) <= 90 || ch >= 48 && ch <= 57)) {
      startIndex++;
    }
    return startIndex;
  }
  function consumeSeparator(text2, startIndex, endIndex, separator) {
    startIndex = consumeWhitespace(text2, startIndex, endIndex);
    if (startIndex < endIndex) {
      if (ngDevMode && text2.charCodeAt(startIndex) !== separator) {
        malformedStyleError(text2, String.fromCharCode(separator), startIndex);
      }
      startIndex++;
    }
    return startIndex;
  }
  function consumeStyleValue(text2, startIndex, endIndex) {
    let ch1 = -1;
    let ch2 = -1;
    let ch3 = -1;
    let i = startIndex;
    let lastChIndex = i;
    while (i < endIndex) {
      const ch = text2.charCodeAt(i++);
      if (ch === 59) {
        return lastChIndex;
      } else if (ch === 34 || ch === 39) {
        lastChIndex = i = consumeQuotedText(text2, ch, i, endIndex);
      } else if (startIndex === i - 4 && // We have seen only 4 characters so far "URL(" (Ignore "foo_URL()")
      ch3 === 85 && ch2 === 82 && ch1 === 76 && ch === 40) {
        lastChIndex = i = consumeQuotedText(text2, 41, i, endIndex);
      } else if (ch > 32) {
        lastChIndex = i;
      }
      ch3 = ch2;
      ch2 = ch1;
      ch1 = ch & -33;
    }
    return lastChIndex;
  }
  function consumeQuotedText(text2, quoteCharCode, startIndex, endIndex) {
    let ch1 = -1;
    let index = startIndex;
    while (index < endIndex) {
      const ch = text2.charCodeAt(index++);
      if (ch == quoteCharCode && ch1 !== 92) {
        return index;
      }
      if (ch == 92 && ch1 === 92) {
        ch1 = 0;
      } else {
        ch1 = ch;
      }
    }
    throw ngDevMode ? malformedStyleError(text2, String.fromCharCode(quoteCharCode), endIndex) : new Error();
  }
  function malformedStyleError(text2, expecting, index) {
    ngDevMode && assertEqual(typeof text2 === "string", true, "String expected here");
    throw throwError2(`Malformed style at location ${index} in string '` + text2.substring(0, index) + "[>>" + text2.substring(index, index + 1) + "<<]" + text2.slice(index + 1) + `'. Expecting '${expecting}'.`);
  }
  function \u0275\u0275property(propName, value, sanitizer) {
    const lView = getLView();
    const bindingIndex = nextBindingIndex();
    if (bindingUpdated(lView, bindingIndex, value)) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
      ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
    }
    return \u0275\u0275property;
  }
  function setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {
    const inputs = tNode.inputs;
    const property2 = isClassBased ? "class" : "style";
    setInputsForProperty(tView, lView, inputs[property2], property2, value);
  }
  function \u0275\u0275styleProp(prop, value, suffix) {
    checkStylingProperty(prop, value, suffix, false);
    return \u0275\u0275styleProp;
  }
  function \u0275\u0275classProp(className, value) {
    checkStylingProperty(className, value, null, true);
    return \u0275\u0275classProp;
  }
  function \u0275\u0275styleMap(styles2) {
    checkStylingMap(styleKeyValueArraySet, styleStringParser, styles2, false);
  }
  function styleStringParser(keyValueArray, text2) {
    for (let i = parseStyle(text2); i >= 0; i = parseStyleNext(text2, i)) {
      styleKeyValueArraySet(keyValueArray, getLastParsedKey(text2), getLastParsedValue(text2));
    }
  }
  function \u0275\u0275classMap(classes) {
    checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);
  }
  function classStringParser(keyValueArray, text2) {
    for (let i = parseClassName(text2); i >= 0; i = parseClassNameNext(text2, i)) {
      keyValueArraySet(keyValueArray, getLastParsedKey(text2), true);
    }
  }
  function checkStylingProperty(prop, value, suffix, isClassBased) {
    const lView = getLView();
    const tView = getTView();
    const bindingIndex = incrementBindingIndex(2);
    if (tView.firstUpdatePass) {
      stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);
    }
    if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
      const tNode = tView.data[getSelectedIndex()];
      updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);
    }
  }
  function checkStylingMap(keyValueArraySet2, stringParser, value, isClassBased) {
    const tView = getTView();
    const bindingIndex = incrementBindingIndex(2);
    if (tView.firstUpdatePass) {
      stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);
    }
    const lView = getLView();
    if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
      const tNode = tView.data[getSelectedIndex()];
      if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {
        if (ngDevMode) {
          const tStylingKey = tView.data[bindingIndex];
          assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, "Styling linked list shadow input should be marked as 'false'");
        }
        let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;
        ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(";"), true, "Expecting static portion to end with ';'");
        if (staticPrefix !== null) {
          value = concatStringsWithSpace(staticPrefix, value ? value : "");
        }
        setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);
      } else {
        updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet2, stringParser, value), isClassBased, bindingIndex);
      }
    }
  }
  function isInHostBindings(tView, bindingIndex) {
    return bindingIndex >= tView.expandoStartIndex;
  }
  function stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {
    ngDevMode && assertFirstUpdatePass(tView);
    const tData = tView.data;
    if (tData[bindingIndex + 1] === null) {
      const tNode = tData[getSelectedIndex()];
      ngDevMode && assertDefined(tNode, "TNode expected");
      const isHostBindings = isInHostBindings(tView, bindingIndex);
      if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {
        tStylingKey = false;
      }
      tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);
      insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);
    }
  }
  function wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {
    const hostDirectiveDef = getCurrentDirectiveDef(tData);
    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
    if (hostDirectiveDef === null) {
      const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;
      if (isFirstStylingInstructionInTemplate) {
        stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);
        stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);
        residual = null;
      }
    } else {
      const directiveStylingLast = tNode.directiveStylingLast;
      const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;
      if (isFirstStylingInstructionInHostBinding) {
        stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);
        if (residual === null) {
          let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);
          if (templateStylingKey !== void 0 && Array.isArray(templateStylingKey)) {
            templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1], isClassBased);
            templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);
            setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);
          }
        } else {
          residual = collectResidual(tData, tNode, isClassBased);
        }
      }
    }
    if (residual !== void 0) {
      isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;
    }
    return stylingKey;
  }
  function getTemplateHeadTStylingKey(tData, tNode, isClassBased) {
    const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
    if (getTStylingRangeNext(bindings) === 0) {
      return void 0;
    }
    return tData[getTStylingRangePrev(bindings)];
  }
  function setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {
    const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
    ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, "Expecting to have at least one template styling binding.");
    tData[getTStylingRangePrev(bindings)] = tStylingKey;
  }
  function collectResidual(tData, tNode, isClassBased) {
    let residual = void 0;
    const directiveEnd = tNode.directiveEnd;
    ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, "By the time this function gets called at least one hostBindings-node styling instruction must have executed.");
    for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {
      const attrs = tData[i].hostAttrs;
      residual = collectStylingFromTAttrs(residual, attrs, isClassBased);
    }
    return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);
  }
  function collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {
    let currentDirective = null;
    const directiveEnd = tNode.directiveEnd;
    let directiveStylingLast = tNode.directiveStylingLast;
    if (directiveStylingLast === -1) {
      directiveStylingLast = tNode.directiveStart;
    } else {
      directiveStylingLast++;
    }
    while (directiveStylingLast < directiveEnd) {
      currentDirective = tData[directiveStylingLast];
      ngDevMode && assertDefined(currentDirective, "expected to be defined");
      stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);
      if (currentDirective === hostDirectiveDef)
        break;
      directiveStylingLast++;
    }
    if (hostDirectiveDef !== null) {
      tNode.directiveStylingLast = directiveStylingLast;
    }
    return stylingKey;
  }
  function collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {
    const desiredMarker = isClassBased ? 1 : 2;
    let currentMarker = -1;
    if (attrs !== null) {
      for (let i = 0; i < attrs.length; i++) {
        const item = attrs[i];
        if (typeof item === "number") {
          currentMarker = item;
        } else {
          if (currentMarker === desiredMarker) {
            if (!Array.isArray(stylingKey)) {
              stylingKey = stylingKey === void 0 ? [] : ["", stylingKey];
            }
            keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);
          }
        }
      }
    }
    return stylingKey === void 0 ? null : stylingKey;
  }
  function toStylingKeyValueArray(keyValueArraySet2, stringParser, value) {
    if (value == null || value === "")
      return EMPTY_ARRAY;
    const styleKeyValueArray = [];
    const unwrappedValue = unwrapSafeValue(value);
    if (Array.isArray(unwrappedValue)) {
      for (let i = 0; i < unwrappedValue.length; i++) {
        keyValueArraySet2(styleKeyValueArray, unwrappedValue[i], true);
      }
    } else if (typeof unwrappedValue === "object") {
      for (const key in unwrappedValue) {
        if (unwrappedValue.hasOwnProperty(key)) {
          keyValueArraySet2(styleKeyValueArray, key, unwrappedValue[key]);
        }
      }
    } else if (typeof unwrappedValue === "string") {
      stringParser(styleKeyValueArray, unwrappedValue);
    } else {
      ngDevMode && throwError2("Unsupported styling type " + typeof unwrappedValue + ": " + unwrappedValue);
    }
    return styleKeyValueArray;
  }
  function styleKeyValueArraySet(keyValueArray, key, value) {
    keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));
  }
  function classKeyValueArraySet(keyValueArray, key, value) {
    const stringKey = String(key);
    if (stringKey !== "" && !stringKey.includes(" ")) {
      keyValueArraySet(keyValueArray, stringKey, value);
    }
  }
  function updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {
    if (oldKeyValueArray === NO_CHANGE) {
      oldKeyValueArray = EMPTY_ARRAY;
    }
    let oldIndex = 0;
    let newIndex = 0;
    let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;
    let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;
    while (oldKey !== null || newKey !== null) {
      ngDevMode && assertLessThan(oldIndex, 999, "Are we stuck in infinite loop?");
      ngDevMode && assertLessThan(newIndex, 999, "Are we stuck in infinite loop?");
      const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : void 0;
      const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : void 0;
      let setKey = null;
      let setValue2 = void 0;
      if (oldKey === newKey) {
        oldIndex += 2;
        newIndex += 2;
        if (oldValue !== newValue) {
          setKey = newKey;
          setValue2 = newValue;
        }
      } else if (newKey === null || oldKey !== null && oldKey < newKey) {
        oldIndex += 2;
        setKey = oldKey;
      } else {
        ngDevMode && assertDefined(newKey, "Expecting to have a valid key");
        newIndex += 2;
        setKey = newKey;
        setValue2 = newValue;
      }
      if (setKey !== null) {
        updateStyling(tView, tNode, lView, renderer, setKey, setValue2, isClassBased, bindingIndex);
      }
      oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;
      newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;
    }
  }
  function updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {
    if (!(tNode.type & 3)) {
      return;
    }
    const tData = tView.data;
    const tRange = tData[bindingIndex + 1];
    const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : void 0;
    if (!isStylingValuePresent(higherPriorityValue)) {
      if (!isStylingValuePresent(value)) {
        if (getTStylingRangePrevDuplicate(tRange)) {
          value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);
        }
      }
      const rNode = getNativeByIndex(getSelectedIndex(), lView);
      applyStyling(renderer, isClassBased, rNode, prop, value);
    }
  }
  function findStylingValue(tData, tNode, lView, prop, index, isClassBased) {
    const isPrevDirection = tNode === null;
    let value = void 0;
    while (index > 0) {
      const rawKey = tData[index];
      const containsStatics = Array.isArray(rawKey);
      const key = containsStatics ? rawKey[1] : rawKey;
      const isStylingMap = key === null;
      let valueAtLViewIndex = lView[index + 1];
      if (valueAtLViewIndex === NO_CHANGE) {
        valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : void 0;
      }
      let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : void 0;
      if (containsStatics && !isStylingValuePresent(currentValue)) {
        currentValue = keyValueArrayGet(rawKey, prop);
      }
      if (isStylingValuePresent(currentValue)) {
        value = currentValue;
        if (isPrevDirection) {
          return value;
        }
      }
      const tRange = tData[index + 1];
      index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);
    }
    if (tNode !== null) {
      let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
      if (residual != null) {
        value = keyValueArrayGet(residual, prop);
      }
    }
    return value;
  }
  function isStylingValuePresent(value) {
    return value !== void 0;
  }
  function normalizeSuffix(value, suffix) {
    if (value == null || value === "") {
    } else if (typeof suffix === "string") {
      value = value + suffix;
    } else if (typeof value === "object") {
      value = stringify(unwrapSafeValue(value));
    }
    return value;
  }
  function hasStylingInputShadow(tNode, isClassBased) {
    return (tNode.flags & (isClassBased ? 8 : 16)) !== 0;
  }
  function \u0275\u0275classMapInterpolate1(prefix, v0, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  function \u0275\u0275classMapInterpolate2(prefix, v0, i0, v1, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  function \u0275\u0275classMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  function \u0275\u0275classMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  function \u0275\u0275classMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  function \u0275\u0275classMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  function \u0275\u0275classMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  function \u0275\u0275classMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  function \u0275\u0275classMapInterpolateV(values) {
    const lView = getLView();
    const interpolatedValue = interpolationV(lView, values);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
  }
  function \u0275\u0275componentInstance() {
    const instance = getLView()[DECLARATION_COMPONENT_VIEW][CONTEXT];
    ngDevMode && assertDefined(instance, "Expected component instance to be defined");
    return instance;
  }
  function valuesMatching(liveIdx, liveValue, newIdx, newValue, trackBy) {
    if (liveIdx === newIdx && Object.is(liveValue, newValue)) {
      return 1;
    } else if (Object.is(trackBy(liveIdx, liveValue), trackBy(newIdx, newValue))) {
      return -1;
    }
    return 0;
  }
  function reconcile(liveCollection, newCollection, trackByFn) {
    let detachedItems = void 0;
    let liveKeysInTheFuture = void 0;
    let liveStartIdx = 0;
    let liveEndIdx = liveCollection.length - 1;
    if (Array.isArray(newCollection)) {
      let newEndIdx = newCollection.length - 1;
      while (liveStartIdx <= liveEndIdx && liveStartIdx <= newEndIdx) {
        const liveStartValue = liveCollection.at(liveStartIdx);
        const newStartValue = newCollection[liveStartIdx];
        const isStartMatching = valuesMatching(liveStartIdx, liveStartValue, liveStartIdx, newStartValue, trackByFn);
        if (isStartMatching !== 0) {
          if (isStartMatching < 0) {
            liveCollection.updateValue(liveStartIdx, newStartValue);
          }
          liveStartIdx++;
          continue;
        }
        const liveEndValue = liveCollection.at(liveEndIdx);
        const newEndValue = newCollection[newEndIdx];
        const isEndMatching = valuesMatching(liveEndIdx, liveEndValue, newEndIdx, newEndValue, trackByFn);
        if (isEndMatching !== 0) {
          if (isEndMatching < 0) {
            liveCollection.updateValue(liveEndIdx, newEndValue);
          }
          liveEndIdx--;
          newEndIdx--;
          continue;
        }
        const liveStartKey = trackByFn(liveStartIdx, liveStartValue);
        const liveEndKey = trackByFn(liveEndIdx, liveEndValue);
        const newStartKey = trackByFn(liveStartIdx, newStartValue);
        if (Object.is(newStartKey, liveEndKey)) {
          const newEndKey = trackByFn(newEndIdx, newEndValue);
          if (Object.is(newEndKey, liveStartKey)) {
            liveCollection.swap(liveStartIdx, liveEndIdx);
            liveCollection.updateValue(liveEndIdx, newEndValue);
            newEndIdx--;
            liveEndIdx--;
          } else {
            liveCollection.move(liveEndIdx, liveStartIdx);
          }
          liveCollection.updateValue(liveStartIdx, newStartValue);
          liveStartIdx++;
          continue;
        }
        detachedItems ??= new UniqueValueMultiKeyMap();
        liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);
        if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newStartKey)) {
          liveCollection.updateValue(liveStartIdx, newStartValue);
          liveStartIdx++;
          liveEndIdx++;
        } else if (!liveKeysInTheFuture.has(newStartKey)) {
          const newItem = liveCollection.create(liveStartIdx, newCollection[liveStartIdx]);
          liveCollection.attach(liveStartIdx, newItem);
          liveStartIdx++;
          liveEndIdx++;
        } else {
          detachedItems.set(liveStartKey, liveCollection.detach(liveStartIdx));
          liveEndIdx--;
        }
      }
      while (liveStartIdx <= newEndIdx) {
        createOrAttach(liveCollection, detachedItems, trackByFn, liveStartIdx, newCollection[liveStartIdx]);
        liveStartIdx++;
      }
    } else if (newCollection != null) {
      const newCollectionIterator = newCollection[Symbol.iterator]();
      let newIterationResult = newCollectionIterator.next();
      while (!newIterationResult.done && liveStartIdx <= liveEndIdx) {
        const liveValue = liveCollection.at(liveStartIdx);
        const newValue = newIterationResult.value;
        const isStartMatching = valuesMatching(liveStartIdx, liveValue, liveStartIdx, newValue, trackByFn);
        if (isStartMatching !== 0) {
          if (isStartMatching < 0) {
            liveCollection.updateValue(liveStartIdx, newValue);
          }
          liveStartIdx++;
          newIterationResult = newCollectionIterator.next();
        } else {
          detachedItems ??= new UniqueValueMultiKeyMap();
          liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);
          const newKey = trackByFn(liveStartIdx, newValue);
          if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newKey)) {
            liveCollection.updateValue(liveStartIdx, newValue);
            liveStartIdx++;
            liveEndIdx++;
            newIterationResult = newCollectionIterator.next();
          } else if (!liveKeysInTheFuture.has(newKey)) {
            liveCollection.attach(liveStartIdx, liveCollection.create(liveStartIdx, newValue));
            liveStartIdx++;
            liveEndIdx++;
            newIterationResult = newCollectionIterator.next();
          } else {
            const liveKey = trackByFn(liveStartIdx, liveValue);
            detachedItems.set(liveKey, liveCollection.detach(liveStartIdx));
            liveEndIdx--;
          }
        }
      }
      while (!newIterationResult.done) {
        createOrAttach(liveCollection, detachedItems, trackByFn, liveCollection.length, newIterationResult.value);
        newIterationResult = newCollectionIterator.next();
      }
    }
    while (liveStartIdx <= liveEndIdx) {
      liveCollection.destroy(liveCollection.detach(liveEndIdx--));
    }
    detachedItems?.forEach((item) => {
      liveCollection.destroy(item);
    });
  }
  function attachPreviouslyDetached(prevCollection, detachedItems, index, key) {
    if (detachedItems !== void 0 && detachedItems.has(key)) {
      prevCollection.attach(index, detachedItems.get(key));
      detachedItems.delete(key);
      return true;
    }
    return false;
  }
  function createOrAttach(liveCollection, detachedItems, trackByFn, index, value) {
    if (!attachPreviouslyDetached(liveCollection, detachedItems, index, trackByFn(index, value))) {
      const newItem = liveCollection.create(index, value);
      liveCollection.attach(index, newItem);
    } else {
      liveCollection.updateValue(index, value);
    }
  }
  function initLiveItemsInTheFuture(liveCollection, start, end, trackByFn) {
    const keys = /* @__PURE__ */ new Set();
    for (let i = start; i <= end; i++) {
      keys.add(trackByFn(i, liveCollection.at(i)));
    }
    return keys;
  }
  function \u0275\u0275conditional(containerIndex, matchingTemplateIndex, value) {
    performanceMarkFeature("NgControlFlow");
    const hostLView = getLView();
    const bindingIndex = nextBindingIndex();
    const lContainer = getLContainer(hostLView, HEADER_OFFSET + containerIndex);
    const viewInContainerIdx = 0;
    if (bindingUpdated(hostLView, bindingIndex, matchingTemplateIndex)) {
      const prevConsumer = setActiveConsumer(null);
      try {
        removeLViewFromLContainer(lContainer, viewInContainerIdx);
        if (matchingTemplateIndex !== -1) {
          const templateTNode = getExistingTNode(hostLView[TVIEW], HEADER_OFFSET + matchingTemplateIndex);
          const dehydratedView = findMatchingDehydratedView(lContainer, templateTNode.tView.ssrId);
          const embeddedLView = createAndRenderEmbeddedLView(hostLView, templateTNode, value, { dehydratedView });
          addLViewToLContainer(lContainer, embeddedLView, viewInContainerIdx, shouldAddViewToDom(templateTNode, dehydratedView));
        }
      } finally {
        setActiveConsumer(prevConsumer);
      }
    } else {
      const lView = getLViewFromLContainer(lContainer, viewInContainerIdx);
      if (lView !== void 0) {
        lView[CONTEXT] = value;
      }
    }
  }
  function \u0275\u0275repeaterTrackByIndex(index) {
    return index;
  }
  function \u0275\u0275repeaterTrackByIdentity(_, value) {
    return value;
  }
  function \u0275\u0275repeaterCreate(index, templateFn, decls, vars, tagName, attrsIndex, trackByFn, trackByUsesComponentInstance, emptyTemplateFn, emptyDecls, emptyVars, emptyTagName, emptyAttrsIndex) {
    performanceMarkFeature("NgControlFlow");
    ngDevMode && assertFunction(trackByFn, `A track expression must be a function, was ${typeof trackByFn} instead.`);
    const hasEmptyBlock = emptyTemplateFn !== void 0;
    const hostLView = getLView();
    const boundTrackBy = trackByUsesComponentInstance ? (
      // We only want to bind when necessary, because it produces a
      // new function. For pure functions it's not necessary.
      trackByFn.bind(hostLView[DECLARATION_COMPONENT_VIEW][CONTEXT])
    ) : trackByFn;
    const metadata = new RepeaterMetadata(hasEmptyBlock, boundTrackBy);
    hostLView[HEADER_OFFSET + index] = metadata;
    \u0275\u0275template(index + 1, templateFn, decls, vars, tagName, attrsIndex);
    if (hasEmptyBlock) {
      ngDevMode && assertDefined(emptyDecls, "Missing number of declarations for the empty repeater block.");
      ngDevMode && assertDefined(emptyVars, "Missing number of bindings for the empty repeater block.");
      \u0275\u0275template(index + 2, emptyTemplateFn, emptyDecls, emptyVars, emptyTagName, emptyAttrsIndex);
    }
  }
  function \u0275\u0275repeater(collection) {
    const prevConsumer = setActiveConsumer(null);
    const metadataSlotIdx = getSelectedIndex();
    try {
      const hostLView = getLView();
      const hostTView = hostLView[TVIEW];
      const metadata = hostLView[metadataSlotIdx];
      if (metadata.liveCollection === void 0) {
        const containerIndex = metadataSlotIdx + 1;
        const lContainer = getLContainer(hostLView, containerIndex);
        const itemTemplateTNode = getExistingTNode(hostTView, containerIndex);
        metadata.liveCollection = new LiveCollectionLContainerImpl(lContainer, hostLView, itemTemplateTNode);
      } else {
        metadata.liveCollection.reset();
      }
      const liveCollection = metadata.liveCollection;
      reconcile(liveCollection, collection, metadata.trackByFn);
      liveCollection.updateIndexes();
      if (metadata.hasEmptyBlock) {
        const bindingIndex = nextBindingIndex();
        const isCollectionEmpty = liveCollection.length === 0;
        if (bindingUpdated(hostLView, bindingIndex, isCollectionEmpty)) {
          const emptyTemplateIndex = metadataSlotIdx + 2;
          const lContainerForEmpty = getLContainer(hostLView, emptyTemplateIndex);
          if (isCollectionEmpty) {
            const emptyTemplateTNode = getExistingTNode(hostTView, emptyTemplateIndex);
            const dehydratedView = findMatchingDehydratedView(lContainerForEmpty, emptyTemplateTNode.tView.ssrId);
            const embeddedLView = createAndRenderEmbeddedLView(hostLView, emptyTemplateTNode, void 0, { dehydratedView });
            addLViewToLContainer(lContainerForEmpty, embeddedLView, 0, shouldAddViewToDom(emptyTemplateTNode, dehydratedView));
          } else {
            removeLViewFromLContainer(lContainerForEmpty, 0);
          }
        }
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
  function getLContainer(lView, index) {
    const lContainer = lView[index];
    ngDevMode && assertLContainer(lContainer);
    return lContainer;
  }
  function detachExistingView(lContainer, index) {
    const existingLView = detachView(lContainer, index);
    ngDevMode && assertLView(existingLView);
    return existingLView;
  }
  function getExistingLViewFromLContainer(lContainer, index) {
    const existingLView = getLViewFromLContainer(lContainer, index);
    ngDevMode && assertLView(existingLView);
    return existingLView;
  }
  function getExistingTNode(tView, index) {
    const tNode = getTNode(tView, index);
    ngDevMode && assertTNode(tNode);
    return tNode;
  }
  function elementStartFirstCreatePass(index, tView, lView, name, attrsIndex, localRefsIndex) {
    ngDevMode && assertFirstCreatePass(tView);
    ngDevMode && ngDevMode.firstCreatePass++;
    const tViewConsts = tView.consts;
    const attrs = getConstant(tViewConsts, attrsIndex);
    const tNode = getOrCreateTNode(tView, index, 2, name, attrs);
    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
    if (tNode.attrs !== null) {
      computeStaticStyling(tNode, tNode.attrs, false);
    }
    if (tNode.mergedAttrs !== null) {
      computeStaticStyling(tNode, tNode.mergedAttrs, true);
    }
    if (tView.queries !== null) {
      tView.queries.elementStart(tView, tNode);
    }
    return tNode;
  }
  function \u0275\u0275elementStart(index, name, attrsIndex, localRefsIndex) {
    const lView = getLView();
    const tView = getTView();
    const adjustedIndex = HEADER_OFFSET + index;
    ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, "elements should be created before any bindings");
    ngDevMode && assertIndexInRange(lView, adjustedIndex);
    const renderer = lView[RENDERER];
    const tNode = tView.firstCreatePass ? elementStartFirstCreatePass(adjustedIndex, tView, lView, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
    const native = _locateOrCreateElementNode(tView, lView, tNode, renderer, name, index);
    lView[adjustedIndex] = native;
    const hasDirectives = isDirectiveHost(tNode);
    if (ngDevMode && tView.firstCreatePass) {
      validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);
    }
    setCurrentTNode(tNode, true);
    setupStaticAttributes(renderer, native, tNode);
    if (!isDetachedByI18n(tNode) && wasLastNodeCreated()) {
      appendChild(tView, lView, native, tNode);
    }
    if (getElementDepthCount() === 0) {
      attachPatchData(native, lView);
    }
    increaseElementDepthCount();
    if (hasDirectives) {
      createDirectivesInstances(tView, lView, tNode);
      executeContentQueries(tView, tNode, lView);
    }
    if (localRefsIndex !== null) {
      saveResolvedLocalsInData(lView, tNode);
    }
    return \u0275\u0275elementStart;
  }
  function \u0275\u0275elementEnd() {
    let currentTNode = getCurrentTNode();
    ngDevMode && assertDefined(currentTNode, "No parent node to close.");
    if (isCurrentTNodeParent()) {
      setCurrentTNodeAsNotParent();
    } else {
      ngDevMode && assertHasParent(getCurrentTNode());
      currentTNode = currentTNode.parent;
      setCurrentTNode(currentTNode, false);
    }
    const tNode = currentTNode;
    ngDevMode && assertTNodeType(
      tNode,
      3
      /* TNodeType.AnyRNode */
    );
    if (isSkipHydrationRootTNode(tNode)) {
      leaveSkipHydrationBlock();
    }
    decreaseElementDepthCount();
    const tView = getTView();
    if (tView.firstCreatePass) {
      registerPostOrderHooks(tView, currentTNode);
      if (isContentQueryHost(currentTNode)) {
        tView.queries.elementEnd(currentTNode);
      }
    }
    if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {
      setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);
    }
    if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {
      setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);
    }
    return \u0275\u0275elementEnd;
  }
  function \u0275\u0275element(index, name, attrsIndex, localRefsIndex) {
    \u0275\u0275elementStart(index, name, attrsIndex, localRefsIndex);
    \u0275\u0275elementEnd();
    return \u0275\u0275element;
  }
  function locateOrCreateElementNodeImpl(tView, lView, tNode, renderer, name, index) {
    const hydrationInfo = lView[HYDRATION];
    const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDetachedByI18n(tNode) || isDisconnectedNode$1(hydrationInfo, index);
    lastNodeWasCreated(isNodeCreationMode);
    if (isNodeCreationMode) {
      return createElementNode(renderer, name, getNamespace$1());
    }
    const native = locateNextRNode(hydrationInfo, tView, lView, tNode);
    ngDevMode && validateMatchingNode(native, Node.ELEMENT_NODE, name, lView, tNode);
    ngDevMode && markRNodeAsClaimedByHydration(native);
    if (getSerializedContainerViews(hydrationInfo, index)) {
      ngDevMode && validateNodeExists(native.nextSibling, lView, tNode);
      setSegmentHead(hydrationInfo, index, native.nextSibling);
    }
    if (hydrationInfo && (hasSkipHydrationAttrOnTNode(tNode) || hasSkipHydrationAttrOnRElement(native))) {
      if (isComponentHost(tNode)) {
        enterSkipHydrationBlock(tNode);
        clearElementContents(native);
        ngDevMode && markRNodeAsSkippedByHydration(native);
      } else if (ngDevMode) {
        throw invalidSkipHydrationHost(native);
      }
    }
    return native;
  }
  function enableLocateOrCreateElementNodeImpl() {
    _locateOrCreateElementNode = locateOrCreateElementNodeImpl;
  }
  function elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {
    ngDevMode && ngDevMode.firstCreatePass++;
    const tViewConsts = tView.consts;
    const attrs = getConstant(tViewConsts, attrsIndex);
    const tNode = getOrCreateTNode(tView, index, 8, "ng-container", attrs);
    if (attrs !== null) {
      computeStaticStyling(tNode, attrs, true);
    }
    const localRefs = getConstant(tViewConsts, localRefsIndex);
    resolveDirectives(tView, lView, tNode, localRefs);
    if (tView.queries !== null) {
      tView.queries.elementStart(tView, tNode);
    }
    return tNode;
  }
  function \u0275\u0275elementContainerStart(index, attrsIndex, localRefsIndex) {
    const lView = getLView();
    const tView = getTView();
    const adjustedIndex = index + HEADER_OFFSET;
    ngDevMode && assertIndexInRange(lView, adjustedIndex);
    ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, "element containers should be created before any bindings");
    const tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
    setCurrentTNode(tNode, true);
    const comment = _locateOrCreateElementContainerNode(tView, lView, tNode, index);
    lView[adjustedIndex] = comment;
    if (wasLastNodeCreated()) {
      appendChild(tView, lView, comment, tNode);
    }
    attachPatchData(comment, lView);
    if (isDirectiveHost(tNode)) {
      createDirectivesInstances(tView, lView, tNode);
      executeContentQueries(tView, tNode, lView);
    }
    if (localRefsIndex != null) {
      saveResolvedLocalsInData(lView, tNode);
    }
    return \u0275\u0275elementContainerStart;
  }
  function \u0275\u0275elementContainerEnd() {
    let currentTNode = getCurrentTNode();
    const tView = getTView();
    if (isCurrentTNodeParent()) {
      setCurrentTNodeAsNotParent();
    } else {
      ngDevMode && assertHasParent(currentTNode);
      currentTNode = currentTNode.parent;
      setCurrentTNode(currentTNode, false);
    }
    ngDevMode && assertTNodeType(
      currentTNode,
      8
      /* TNodeType.ElementContainer */
    );
    if (tView.firstCreatePass) {
      registerPostOrderHooks(tView, currentTNode);
      if (isContentQueryHost(currentTNode)) {
        tView.queries.elementEnd(currentTNode);
      }
    }
    return \u0275\u0275elementContainerEnd;
  }
  function \u0275\u0275elementContainer(index, attrsIndex, localRefsIndex) {
    \u0275\u0275elementContainerStart(index, attrsIndex, localRefsIndex);
    \u0275\u0275elementContainerEnd();
    return \u0275\u0275elementContainer;
  }
  function locateOrCreateElementContainerNode(tView, lView, tNode, index) {
    let comment;
    const hydrationInfo = lView[HYDRATION];
    const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDetachedByI18n(tNode);
    lastNodeWasCreated(isNodeCreationMode);
    if (isNodeCreationMode) {
      return createCommentNode(lView[RENDERER], ngDevMode ? "ng-container" : "");
    }
    const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode);
    ngDevMode && validateNodeExists(currentRNode, lView, tNode);
    const ngContainerSize = getNgContainerSize(hydrationInfo, index);
    ngDevMode && assertNumber(ngContainerSize, "Unexpected state: hydrating an <ng-container>, but no hydration info is available.");
    setSegmentHead(hydrationInfo, index, currentRNode);
    comment = siblingAfter(ngContainerSize, currentRNode);
    if (ngDevMode) {
      validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);
      markRNodeAsClaimedByHydration(comment);
    }
    return comment;
  }
  function enableLocateOrCreateElementContainerNodeImpl() {
    _locateOrCreateElementContainerNode = locateOrCreateElementContainerNode;
  }
  function \u0275\u0275getCurrentView() {
    return getLView();
  }
  function \u0275\u0275hostProperty(propName, value, sanitizer) {
    const lView = getLView();
    const bindingIndex = nextBindingIndex();
    if (bindingUpdated(lView, bindingIndex, value)) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);
      ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
    }
    return \u0275\u0275hostProperty;
  }
  function \u0275\u0275syntheticHostProperty(propName, value, sanitizer) {
    const lView = getLView();
    const bindingIndex = nextBindingIndex();
    if (bindingUpdated(lView, bindingIndex, value)) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      const currentDef = getCurrentDirectiveDef(tView.data);
      const renderer = loadComponentRenderer(currentDef, tNode, lView);
      elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);
      ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
    }
    return \u0275\u0275syntheticHostProperty;
  }
  function plural(val) {
    const n = val, i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\.?/, "").length;
    if (i === 1 && v === 0)
      return 1;
    return 5;
  }
  function registerLocaleData(data, localeId, extraData) {
    if (typeof localeId !== "string") {
      extraData = localeId;
      localeId = data[LocaleDataIndex.LocaleId];
    }
    localeId = localeId.toLowerCase().replace(/_/g, "-");
    LOCALE_DATA[localeId] = data;
    if (extraData) {
      LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;
    }
  }
  function findLocaleData(locale) {
    const normalizedLocale = normalizeLocale(locale);
    let match2 = getLocaleData(normalizedLocale);
    if (match2) {
      return match2;
    }
    const parentLocale = normalizedLocale.split("-")[0];
    match2 = getLocaleData(parentLocale);
    if (match2) {
      return match2;
    }
    if (parentLocale === "en") {
      return localeEn;
    }
    throw new RuntimeError(701, ngDevMode && `Missing locale data for the locale "${locale}".`);
  }
  function getLocaleCurrencyCode(locale) {
    const data = findLocaleData(locale);
    return data[LocaleDataIndex.CurrencyCode] || null;
  }
  function getLocalePluralCase(locale) {
    const data = findLocaleData(locale);
    return data[LocaleDataIndex.PluralCase];
  }
  function getLocaleData(normalizedLocale) {
    if (!(normalizedLocale in LOCALE_DATA)) {
      LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];
    }
    return LOCALE_DATA[normalizedLocale];
  }
  function unregisterAllLocaleData() {
    LOCALE_DATA = {};
  }
  function normalizeLocale(locale) {
    return locale.toLowerCase().replace(/_/g, "-");
  }
  function getPluralCase(value, locale) {
    const plural2 = getLocalePluralCase(locale)(parseInt(value, 10));
    const result = pluralMapping[plural2];
    return result !== void 0 ? result : "other";
  }
  function setLocaleId(localeId) {
    ngDevMode && assertDefined(localeId, `Expected localeId to be defined`);
    if (typeof localeId === "string") {
      LOCALE_ID$1 = localeId.toLowerCase().replace(/_/g, "-");
    }
  }
  function getLocaleId() {
    return LOCALE_ID$1;
  }
  function getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {
    const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;
    const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;
    if (insertBeforeIndex === null) {
      return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);
    } else {
      ngDevMode && assertIndexInRange(lView, insertBeforeIndex);
      return unwrapRNode(lView[insertBeforeIndex]);
    }
  }
  function processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {
    const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;
    if (Array.isArray(tNodeInsertBeforeIndex)) {
      ngDevMode && assertDomNode(childRNode);
      let i18nParent = childRNode;
      let anchorRNode = null;
      if (!(childTNode.type & 3)) {
        anchorRNode = i18nParent;
        i18nParent = parentRElement;
      }
      if (i18nParent !== null && childTNode.componentOffset === -1) {
        for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {
          const i18nChild = lView[tNodeInsertBeforeIndex[i]];
          nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);
        }
      }
    }
  }
  function addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {
    ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, "We expect that insertBeforeIndex is not set");
    previousTNodes.push(newTNode);
    if (previousTNodes.length > 1) {
      for (let i = previousTNodes.length - 2; i >= 0; i--) {
        const existingTNode = previousTNodes[i];
        if (!isI18nText(existingTNode)) {
          if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {
            setInsertBeforeIndex(existingTNode, newTNode.index);
          }
        }
      }
    }
  }
  function isI18nText(tNode) {
    return !(tNode.type & 64);
  }
  function isNewTNodeCreatedBefore(existingTNode, newTNode) {
    return isI18nText(newTNode) || existingTNode.index > newTNode.index;
  }
  function getInsertBeforeIndex(tNode) {
    const index = tNode.insertBeforeIndex;
    return Array.isArray(index) ? index[0] : index;
  }
  function setInsertBeforeIndex(tNode, value) {
    const index = tNode.insertBeforeIndex;
    if (Array.isArray(index)) {
      index[0] = value;
    } else {
      setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
      tNode.insertBeforeIndex = value;
    }
  }
  function getTIcu(tView, index) {
    const value = tView.data[index];
    if (value === null || typeof value === "string")
      return null;
    if (ngDevMode && !(value.hasOwnProperty("tView") || value.hasOwnProperty("currentCaseLViewIndex"))) {
      throwError2("We expect to get 'null'|'TIcu'|'TIcuContainer', but got: " + value);
    }
    const tIcu = value.hasOwnProperty("currentCaseLViewIndex") ? value : value.value;
    ngDevMode && assertTIcu(tIcu);
    return tIcu;
  }
  function setTIcu(tView, index, tIcu) {
    const tNode = tView.data[index];
    ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty("tView"), true, "We expect to get 'null'|'TIcuContainer'");
    if (tNode === null) {
      tView.data[index] = tIcu;
    } else {
      ngDevMode && assertTNodeType(
        tNode,
        32
        /* TNodeType.Icu */
      );
      tNode.value = tIcu;
    }
  }
  function setTNodeInsertBeforeIndex(tNode, index) {
    ngDevMode && assertTNode(tNode);
    let insertBeforeIndex = tNode.insertBeforeIndex;
    if (insertBeforeIndex === null) {
      setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
      insertBeforeIndex = tNode.insertBeforeIndex = [null, index];
    } else {
      assertEqual(Array.isArray(insertBeforeIndex), true, "Expecting array here");
      insertBeforeIndex.push(index);
    }
  }
  function createTNodePlaceholder(tView, previousTNodes, index) {
    const tNode = createTNodeAtIndex(tView, index, 64, null, null);
    addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);
    return tNode;
  }
  function getCurrentICUCaseIndex(tIcu, lView) {
    const currentCase = lView[tIcu.currentCaseLViewIndex];
    return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;
  }
  function getParentFromIcuCreateOpCode(mergedCode) {
    return mergedCode >>> 17;
  }
  function getRefFromIcuCreateOpCode(mergedCode) {
    return (mergedCode & 131070) >>> 1;
  }
  function getInstructionFromIcuCreateOpCode(mergedCode) {
    return mergedCode & 1;
  }
  function icuCreateOpCode(opCode, parentIdx, refIdx) {
    ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, "Missing parent index");
    ngDevMode && assertGreaterThan(refIdx, 0, "Missing ref index");
    return opCode | parentIdx << 17 | refIdx << 1;
  }
  function setMaskBit(hasChange) {
    if (hasChange) {
      changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);
    }
    changeMaskCounter++;
  }
  function applyI18n(tView, lView, index) {
    if (changeMaskCounter > 0) {
      ngDevMode && assertDefined(tView, `tView should be defined`);
      const tI18n = tView.data[index];
      const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;
      const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;
      applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);
    }
    changeMask = 0;
    changeMaskCounter = 0;
  }
  function createNodeWithoutHydration(lView, textOrName, nodeType) {
    const renderer = lView[RENDERER];
    switch (nodeType) {
      case Node.COMMENT_NODE:
        return createCommentNode(renderer, textOrName);
      case Node.TEXT_NODE:
        return createTextNode(renderer, textOrName);
      case Node.ELEMENT_NODE:
        return createElementNode(renderer, textOrName, null);
    }
  }
  function locateOrCreateNodeImpl(lView, index, textOrName, nodeType) {
    lastNodeWasCreated(true);
    return createNodeWithoutHydration(lView, textOrName, nodeType);
  }
  function enableLocateOrCreateI18nNodeImpl() {
    _locateOrCreateNode = locateOrCreateNodeImpl;
  }
  function applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {
    const renderer = lView[RENDERER];
    for (let i = 0; i < createOpCodes.length; i++) {
      const opCode = createOpCodes[i++];
      const text2 = createOpCodes[i];
      const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
      const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
      const index = opCode >>> I18nCreateOpCode.SHIFT;
      let rNode = lView[index];
      let lastNodeWasCreated2 = false;
      if (rNode === null) {
        rNode = lView[index] = _locateOrCreateNode(lView, index, text2, isComment ? Node.COMMENT_NODE : Node.TEXT_NODE);
        lastNodeWasCreated2 = wasLastNodeCreated();
      }
      if (appendNow && parentRNode !== null && lastNodeWasCreated2) {
        nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);
      }
    }
  }
  function applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {
    ngDevMode && assertDomNode(anchorRNode);
    const renderer = lView[RENDERER];
    let rootIdx = null;
    let rootRNode;
    for (let i = 0; i < mutableOpCodes.length; i++) {
      const opCode = mutableOpCodes[i];
      if (typeof opCode == "string") {
        const textNodeIndex = mutableOpCodes[++i];
        if (lView[textNodeIndex] === null) {
          ngDevMode && ngDevMode.rendererCreateTextNode++;
          ngDevMode && assertIndexInRange(lView, textNodeIndex);
          lView[textNodeIndex] = _locateOrCreateNode(lView, textNodeIndex, opCode, Node.TEXT_NODE);
        }
      } else if (typeof opCode == "number") {
        switch (opCode & 1) {
          case 0:
            const parentIdx = getParentFromIcuCreateOpCode(opCode);
            if (rootIdx === null) {
              rootIdx = parentIdx;
              rootRNode = nativeParentNode(renderer, anchorRNode);
            }
            let insertInFrontOf;
            let parentRNode;
            if (parentIdx === rootIdx) {
              insertInFrontOf = anchorRNode;
              parentRNode = rootRNode;
            } else {
              insertInFrontOf = null;
              parentRNode = unwrapRNode(lView[parentIdx]);
            }
            if (parentRNode !== null) {
              ngDevMode && assertDomNode(parentRNode);
              const refIdx = getRefFromIcuCreateOpCode(opCode);
              ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, "Missing ref");
              const child = lView[refIdx];
              ngDevMode && assertDomNode(child);
              nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);
              const tIcu = getTIcu(tView, refIdx);
              if (tIcu !== null && typeof tIcu === "object") {
                ngDevMode && assertTIcu(tIcu);
                const caseIndex = getCurrentICUCaseIndex(tIcu, lView);
                if (caseIndex !== null) {
                  applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);
                }
              }
            }
            break;
          case 1:
            const elementNodeIndex = opCode >>> 1;
            const attrName = mutableOpCodes[++i];
            const attrValue = mutableOpCodes[++i];
            setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);
            break;
          default:
            if (ngDevMode) {
              throw new RuntimeError(700, `Unable to determine the type of mutate operation for "${opCode}"`);
            }
        }
      } else {
        switch (opCode) {
          case ICU_MARKER:
            const commentValue = mutableOpCodes[++i];
            const commentNodeIndex = mutableOpCodes[++i];
            if (lView[commentNodeIndex] === null) {
              ngDevMode && assertEqual(typeof commentValue, "string", `Expected "${commentValue}" to be a comment node value`);
              ngDevMode && ngDevMode.rendererCreateComment++;
              ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);
              const commentRNode = lView[commentNodeIndex] = _locateOrCreateNode(lView, commentNodeIndex, commentValue, Node.COMMENT_NODE);
              attachPatchData(commentRNode, lView);
            }
            break;
          case ELEMENT_MARKER:
            const tagName = mutableOpCodes[++i];
            const elementNodeIndex = mutableOpCodes[++i];
            if (lView[elementNodeIndex] === null) {
              ngDevMode && assertEqual(typeof tagName, "string", `Expected "${tagName}" to be an element node tag name`);
              ngDevMode && ngDevMode.rendererCreateElement++;
              ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);
              const elementRNode = lView[elementNodeIndex] = _locateOrCreateNode(lView, elementNodeIndex, tagName, Node.ELEMENT_NODE);
              attachPatchData(elementRNode, lView);
            }
            break;
          default:
            ngDevMode && throwError2(`Unable to determine the type of mutate operation for "${opCode}"`);
        }
      }
    }
  }
  function applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask2) {
    for (let i = 0; i < updateOpCodes.length; i++) {
      const checkBit = updateOpCodes[i];
      const skipCodes = updateOpCodes[++i];
      if (checkBit & changeMask2) {
        let value = "";
        for (let j = i + 1; j <= i + skipCodes; j++) {
          const opCode = updateOpCodes[j];
          if (typeof opCode == "string") {
            value += opCode;
          } else if (typeof opCode == "number") {
            if (opCode < 0) {
              value += renderStringify(lView[bindingsStartIndex - opCode]);
            } else {
              const nodeIndex = opCode >>> 2;
              switch (opCode & 3) {
                case 1:
                  const propName = updateOpCodes[++j];
                  const sanitizeFn = updateOpCodes[++j];
                  const tNodeOrTagName = tView.data[nodeIndex];
                  ngDevMode && assertDefined(tNodeOrTagName, "Experting TNode or string");
                  if (typeof tNodeOrTagName === "string") {
                    setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);
                  } else {
                    elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);
                  }
                  break;
                case 0:
                  const rText = lView[nodeIndex];
                  rText !== null && updateTextNode(lView[RENDERER], rText, value);
                  break;
                case 2:
                  applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);
                  break;
                case 3:
                  applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);
                  break;
              }
            }
          }
        }
      } else {
        const opCode = updateOpCodes[i + 1];
        if (opCode > 0 && (opCode & 3) === 3) {
          const nodeIndex = opCode >>> 2;
          const tIcu = getTIcu(tView, nodeIndex);
          const currentIndex = lView[tIcu.currentCaseLViewIndex];
          if (currentIndex < 0) {
            applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);
          }
        }
      }
      i += skipCodes;
    }
  }
  function applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {
    ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);
    let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];
    if (activeCaseIndex !== null) {
      let mask = changeMask;
      if (activeCaseIndex < 0) {
        activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;
        mask = -1;
      }
      applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);
    }
  }
  function applyIcuSwitchCase(tView, tIcu, lView, value) {
    const caseIndex = getCaseIndex(tIcu, value);
    let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);
    if (activeCaseIndex !== caseIndex) {
      applyIcuSwitchCaseRemove(tView, tIcu, lView);
      lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;
      if (caseIndex !== null) {
        const anchorRNode = lView[tIcu.anchorIdx];
        if (anchorRNode) {
          ngDevMode && assertDomNode(anchorRNode);
          applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);
        }
      }
    }
  }
  function applyIcuSwitchCaseRemove(tView, tIcu, lView) {
    let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);
    if (activeCaseIndex !== null) {
      const removeCodes = tIcu.remove[activeCaseIndex];
      for (let i = 0; i < removeCodes.length; i++) {
        const nodeOrIcuIndex = removeCodes[i];
        if (nodeOrIcuIndex > 0) {
          const rNode = getNativeByIndex(nodeOrIcuIndex, lView);
          rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);
        } else {
          applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);
        }
      }
    }
  }
  function getCaseIndex(icuExpression, bindingValue) {
    let index = icuExpression.cases.indexOf(bindingValue);
    if (index === -1) {
      switch (icuExpression.type) {
        case 1: {
          const resolvedCase = getPluralCase(bindingValue, getLocaleId());
          index = icuExpression.cases.indexOf(resolvedCase);
          if (index === -1 && resolvedCase !== "other") {
            index = icuExpression.cases.indexOf("other");
          }
          break;
        }
        case 0: {
          index = icuExpression.cases.indexOf("other");
          break;
        }
      }
    }
    return index === -1 ? null : index;
  }
  function loadIcuContainerVisitor() {
    const _stack = [];
    let _index = -1;
    let _lView;
    let _removes;
    function icuContainerIteratorStart(tIcuContainerNode, lView) {
      _lView = lView;
      while (_stack.length)
        _stack.pop();
      ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);
      enterIcu(tIcuContainerNode.value, lView);
      return icuContainerIteratorNext;
    }
    function enterIcu(tIcu, lView) {
      _index = 0;
      const currentCase = getCurrentICUCaseIndex(tIcu, lView);
      if (currentCase !== null) {
        ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);
        _removes = tIcu.remove[currentCase];
      } else {
        _removes = EMPTY_ARRAY;
      }
    }
    function icuContainerIteratorNext() {
      if (_index < _removes.length) {
        const removeOpCode = _removes[_index++];
        ngDevMode && assertNumber(removeOpCode, "Expecting OpCode number");
        if (removeOpCode > 0) {
          const rNode = _lView[removeOpCode];
          ngDevMode && assertDomNode(rNode);
          return rNode;
        } else {
          _stack.push(_index, _removes);
          const tIcuIndex = ~removeOpCode;
          const tIcu = _lView[TVIEW].data[tIcuIndex];
          ngDevMode && assertTIcu(tIcu);
          enterIcu(tIcu, _lView);
          return icuContainerIteratorNext();
        }
      } else {
        if (_stack.length === 0) {
          return null;
        } else {
          _removes = _stack.pop();
          _index = _stack.pop();
          return icuContainerIteratorNext();
        }
      }
    }
    return icuContainerIteratorStart;
  }
  function i18nCreateOpCodesToString(opcodes) {
    const createOpCodes = opcodes || (Array.isArray(this) ? this : []);
    let lines = [];
    for (let i = 0; i < createOpCodes.length; i++) {
      const opCode = createOpCodes[i++];
      const text2 = createOpCodes[i];
      const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
      const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
      const index = opCode >>> I18nCreateOpCode.SHIFT;
      lines.push(`lView[${index}] = document.${isComment ? "createComment" : "createText"}(${JSON.stringify(text2)});`);
      if (appendNow) {
        lines.push(`parent.appendChild(lView[${index}]);`);
      }
    }
    return lines;
  }
  function i18nUpdateOpCodesToString(opcodes) {
    const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
    let lines = [];
    function consumeOpCode(value) {
      const ref = value >>> 2;
      const opCode = value & 3;
      switch (opCode) {
        case 0:
          return `(lView[${ref}] as Text).textContent = $$$`;
        case 1:
          const attrName = parser.consumeString();
          const sanitizationFn = parser.consumeFunction();
          const value2 = sanitizationFn ? `(${sanitizationFn})($$$)` : "$$$";
          return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value2})`;
        case 2:
          return `icuSwitchCase(${ref}, $$$)`;
        case 3:
          return `icuUpdateCase(${ref})`;
      }
      throw new Error("unexpected OpCode");
    }
    while (parser.hasMore()) {
      let mask = parser.consumeNumber();
      let size = parser.consumeNumber();
      const end = parser.i + size;
      const statements = [];
      let statement = "";
      while (parser.i < end) {
        let value = parser.consumeNumberOrString();
        if (typeof value === "string") {
          statement += value;
        } else if (value < 0) {
          statement += "${lView[i" + value + "]}";
        } else {
          const opCodeText = consumeOpCode(value);
          statements.push(opCodeText.replace("$$$", "`" + statement + "`") + ";");
          statement = "";
        }
      }
      lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(" ")} }`);
    }
    return lines;
  }
  function icuCreateOpCodesToString(opcodes) {
    const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
    let lines = [];
    function consumeOpCode(opCode) {
      const parent = getParentFromIcuCreateOpCode(opCode);
      const ref = getRefFromIcuCreateOpCode(opCode);
      switch (getInstructionFromIcuCreateOpCode(opCode)) {
        case 0:
          return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;
        case 1:
          return `(lView[${ref}] as Element).setAttribute("${parser.consumeString()}", "${parser.consumeString()}")`;
      }
      throw new Error("Unexpected OpCode: " + getInstructionFromIcuCreateOpCode(opCode));
    }
    let lastRef = -1;
    while (parser.hasMore()) {
      let value = parser.consumeNumberStringOrMarker();
      if (value === ICU_MARKER) {
        const text2 = parser.consumeString();
        lastRef = parser.consumeNumber();
        lines.push(`lView[${lastRef}] = document.createComment("${text2}")`);
      } else if (value === ELEMENT_MARKER) {
        const text2 = parser.consumeString();
        lastRef = parser.consumeNumber();
        lines.push(`lView[${lastRef}] = document.createElement("${text2}")`);
      } else if (typeof value === "string") {
        lastRef = parser.consumeNumber();
        lines.push(`lView[${lastRef}] = document.createTextNode("${value}")`);
      } else if (typeof value === "number") {
        const line = consumeOpCode(value);
        line && lines.push(line);
      } else {
        throw new Error("Unexpected value");
      }
    }
    return lines;
  }
  function i18nRemoveOpCodesToString(opcodes) {
    const removeCodes = opcodes || (Array.isArray(this) ? this : []);
    let lines = [];
    for (let i = 0; i < removeCodes.length; i++) {
      const nodeOrIcuIndex = removeCodes[i];
      if (nodeOrIcuIndex > 0) {
        lines.push(`remove(lView[${nodeOrIcuIndex}])`);
      } else {
        lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);
      }
    }
    return lines;
  }
  function replaceNgsp(value) {
    return value.replace(NGSP_UNICODE_REGEXP, " ");
  }
  function attachDebugGetter(obj, debugGetter) {
    if (ngDevMode) {
      Object.defineProperty(obj, "debug", { get: debugGetter, enumerable: false });
    } else {
      throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");
    }
  }
  function i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {
    const rootTNode = getCurrentParentTNode();
    const createOpCodes = [];
    const updateOpCodes = [];
    const existingTNodeStack = [[]];
    const astStack = [[]];
    if (ngDevMode) {
      attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);
      attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
    }
    message = getTranslationForTemplate(message, subTemplateIndex);
    const msgParts = replaceNgsp(message).split(PH_REGEXP);
    for (let i = 0; i < msgParts.length; i++) {
      let value = msgParts[i];
      if ((i & 1) === 0) {
        const parts = i18nParseTextIntoPartsAndICU(value);
        for (let j = 0; j < parts.length; j++) {
          let part = parts[j];
          if ((j & 1) === 0) {
            const text2 = part;
            ngDevMode && assertString(text2, "Parsed ICU part should be string");
            if (text2 !== "") {
              i18nStartFirstCreatePassProcessTextNode(astStack[0], tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text2);
            }
          } else {
            const icuExpression = part;
            if (typeof icuExpression !== "object") {
              throw new Error(`Unable to parse ICU expression in "${message}" message.`);
            }
            const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : "", true);
            const icuNodeIndex = icuContainerTNode.index;
            ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, "Index must be in absolute LView offset");
            icuStart(astStack[0], tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);
          }
        }
      } else {
        const isClosing = value.charCodeAt(0) === 47;
        const type = value.charCodeAt(isClosing ? 1 : 0);
        ngDevMode && assertOneOf(
          type,
          42,
          35
          /* CharCode.HASH */
        );
        const index2 = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));
        if (isClosing) {
          existingTNodeStack.shift();
          astStack.shift();
          setCurrentTNode(getCurrentParentTNode(), false);
        } else {
          const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index2);
          existingTNodeStack.unshift([]);
          setCurrentTNode(tNode, true);
          const placeholderNode = {
            kind: 2,
            index: index2,
            children: [],
            type: type === 35 ? 0 : 1
          };
          astStack[0].push(placeholderNode);
          astStack.unshift(placeholderNode.children);
        }
      }
    }
    tView.data[index] = {
      create: createOpCodes,
      update: updateOpCodes,
      ast: astStack[0]
    };
  }
  function createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text2, isICU) {
    const i18nNodeIdx = allocExpando(tView, lView, 1, null);
    let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;
    let parentTNode = getCurrentParentTNode();
    if (rootTNode === parentTNode) {
      parentTNode = null;
    }
    if (parentTNode === null) {
      opCode |= I18nCreateOpCode.APPEND_EAGERLY;
    }
    if (isICU) {
      opCode |= I18nCreateOpCode.COMMENT;
      ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);
    }
    createOpCodes.push(opCode, text2 === null ? "" : text2);
    const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 : 1, text2 === null ? ngDevMode ? "{{?}}" : "" : text2, null);
    addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);
    const tNodeIdx = tNode.index;
    setCurrentTNode(
      tNode,
      false
      /* Text nodes are self closing */
    );
    if (parentTNode !== null && rootTNode !== parentTNode) {
      setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);
    }
    return tNode;
  }
  function i18nStartFirstCreatePassProcessTextNode(ast, tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text2) {
    const hasBinding = text2.match(BINDING_REGEXP);
    const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text2, false);
    const index = tNode.index;
    if (hasBinding) {
      generateBindingUpdateOpCodes(updateOpCodes, text2, index, null, 0, null);
    }
    ast.push({ kind: 0, index });
  }
  function i18nAttributesFirstPass(tView, index, values) {
    const previousElement = getCurrentTNode();
    const previousElementIndex = previousElement.index;
    const updateOpCodes = [];
    if (ngDevMode) {
      attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
    }
    if (tView.firstCreatePass && tView.data[index] === null) {
      for (let i = 0; i < values.length; i += 2) {
        const attrName = values[i];
        const message = values[i + 1];
        if (message !== "") {
          if (ICU_REGEXP.test(message)) {
            throw new Error(`ICU expressions are not supported in attributes. Message: "${message}".`);
          }
          generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);
        }
      }
      tView.data[index] = updateOpCodes;
    }
  }
  function generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {
    ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, "Index must be in absolute LView offset");
    const maskIndex = updateOpCodes.length;
    const sizeIndex = maskIndex + 1;
    updateOpCodes.push(null, null);
    const startIndex = maskIndex + 2;
    if (ngDevMode) {
      attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
    }
    const textParts = str.split(BINDING_REGEXP);
    let mask = 0;
    for (let j = 0; j < textParts.length; j++) {
      const textValue = textParts[j];
      if (j & 1) {
        const bindingIndex = bindingStart + parseInt(textValue, 10);
        updateOpCodes.push(-1 - bindingIndex);
        mask = mask | toMaskBit(bindingIndex);
      } else if (textValue !== "") {
        updateOpCodes.push(textValue);
      }
    }
    updateOpCodes.push(destinationNode << 2 | (attrName ? 1 : 0));
    if (attrName) {
      updateOpCodes.push(attrName, sanitizeFn);
    }
    updateOpCodes[maskIndex] = mask;
    updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;
    return mask;
  }
  function countBindings(opCodes) {
    let count = 0;
    for (let i = 0; i < opCodes.length; i++) {
      const opCode = opCodes[i];
      if (typeof opCode === "number" && opCode < 0) {
        count++;
      }
    }
    return count;
  }
  function toMaskBit(bindingIndex) {
    return 1 << Math.min(bindingIndex, 31);
  }
  function isRootTemplateMessage(subTemplateIndex) {
    return subTemplateIndex === -1;
  }
  function removeInnerTemplateTranslation(message) {
    let match2;
    let res = "";
    let index = 0;
    let inTemplate = false;
    let tagMatched;
    while ((match2 = SUBTEMPLATE_REGEXP.exec(message)) !== null) {
      if (!inTemplate) {
        res += message.substring(index, match2.index + match2[0].length);
        tagMatched = match2[1];
        inTemplate = true;
      } else {
        if (match2[0] === `${MARKER}/*${tagMatched}${MARKER}`) {
          index = match2.index;
          inTemplate = false;
        }
      }
    }
    ngDevMode && assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation "${message}"`);
    res += message.slice(index);
    return res;
  }
  function getTranslationForTemplate(message, subTemplateIndex) {
    if (isRootTemplateMessage(subTemplateIndex)) {
      return removeInnerTemplateTranslation(message);
    } else {
      const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;
      const end = message.search(new RegExp(`${MARKER}\\/\\*\\d+:${subTemplateIndex}${MARKER}`));
      return removeInnerTemplateTranslation(message.substring(start, end));
    }
  }
  function icuStart(ast, tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {
    ngDevMode && assertDefined(icuExpression, "ICU expression must be defined");
    let bindingMask = 0;
    const tIcu = {
      type: icuExpression.type,
      currentCaseLViewIndex: allocExpando(tView, lView, 1, null),
      anchorIdx,
      cases: [],
      create: [],
      remove: [],
      update: []
    };
    addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);
    setTIcu(tView, anchorIdx, tIcu);
    const values = icuExpression.values;
    const cases = [];
    for (let i = 0; i < values.length; i++) {
      const valueArr = values[i];
      const nestedIcus = [];
      for (let j = 0; j < valueArr.length; j++) {
        const value = valueArr[j];
        if (typeof value !== "string") {
          const icuIndex = nestedIcus.push(value) - 1;
          valueArr[j] = `<!--\uFFFD${icuIndex}\uFFFD-->`;
        }
      }
      const caseAst = [];
      cases.push(caseAst);
      bindingMask = parseIcuCase(caseAst, tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(""), nestedIcus) | bindingMask;
    }
    if (bindingMask) {
      addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);
    }
    ast.push({
      kind: 3,
      index: anchorIdx,
      cases,
      currentCaseLViewIndex: tIcu.currentCaseLViewIndex
    });
  }
  function parseICUBlock(pattern) {
    const cases = [];
    const values = [];
    let icuType = 1;
    let mainBinding = 0;
    pattern = pattern.replace(ICU_BLOCK_REGEXP, function(str, binding, type) {
      if (type === "select") {
        icuType = 0;
      } else {
        icuType = 1;
      }
      mainBinding = parseInt(binding.slice(1), 10);
      return "";
    });
    const parts = i18nParseTextIntoPartsAndICU(pattern);
    for (let pos = 0; pos < parts.length; ) {
      let key = parts[pos++].trim();
      if (icuType === 1) {
        key = key.replace(/\s*(?:=)?(\w+)\s*/, "$1");
      }
      if (key.length) {
        cases.push(key);
      }
      const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);
      if (cases.length > values.length) {
        values.push(blocks);
      }
    }
    return { type: icuType, mainBinding, cases, values };
  }
  function i18nParseTextIntoPartsAndICU(pattern) {
    if (!pattern) {
      return [];
    }
    let prevPos = 0;
    const braceStack = [];
    const results = [];
    const braces = /[{}]/g;
    braces.lastIndex = 0;
    let match2;
    while (match2 = braces.exec(pattern)) {
      const pos = match2.index;
      if (match2[0] == "}") {
        braceStack.pop();
        if (braceStack.length == 0) {
          const block = pattern.substring(prevPos, pos);
          if (ICU_BLOCK_REGEXP.test(block)) {
            results.push(parseICUBlock(block));
          } else {
            results.push(block);
          }
          prevPos = pos + 1;
        }
      } else {
        if (braceStack.length == 0) {
          const substring2 = pattern.substring(prevPos, pos);
          results.push(substring2);
          prevPos = pos + 1;
        }
        braceStack.push("{");
      }
    }
    const substring = pattern.substring(prevPos);
    results.push(substring);
    return results;
  }
  function parseIcuCase(ast, tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {
    const create = [];
    const remove2 = [];
    const update = [];
    if (ngDevMode) {
      attachDebugGetter(create, icuCreateOpCodesToString);
      attachDebugGetter(remove2, i18nRemoveOpCodesToString);
      attachDebugGetter(update, i18nUpdateOpCodesToString);
    }
    tIcu.cases.push(caseName);
    tIcu.create.push(create);
    tIcu.remove.push(remove2);
    tIcu.update.push(update);
    const inertBodyHelper2 = getInertBodyHelper(getDocument());
    const inertBodyElement = inertBodyHelper2.getInertBodyElement(unsafeCaseHtml);
    ngDevMode && assertDefined(inertBodyElement, "Unable to generate inert body element");
    const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;
    if (inertRootNode) {
      return walkIcuTree(ast, tView, tIcu, lView, updateOpCodes, create, remove2, update, inertRootNode, parentIdx, nestedIcus, 0);
    } else {
      return 0;
    }
  }
  function walkIcuTree(ast, tView, tIcu, lView, sharedUpdateOpCodes, create, remove2, update, parentNode, parentIdx, nestedIcus, depth) {
    let bindingMask = 0;
    let currentNode = parentNode.firstChild;
    while (currentNode) {
      const newIndex = allocExpando(tView, lView, 1, null);
      switch (currentNode.nodeType) {
        case Node.ELEMENT_NODE:
          const element2 = currentNode;
          const tagName = element2.tagName.toLowerCase();
          if (VALID_ELEMENTS.hasOwnProperty(tagName)) {
            addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);
            tView.data[newIndex] = tagName;
            const elAttrs = element2.attributes;
            for (let i = 0; i < elAttrs.length; i++) {
              const attr = elAttrs.item(i);
              const lowerAttrName = attr.name.toLowerCase();
              const hasBinding2 = !!attr.value.match(BINDING_REGEXP);
              if (hasBinding2) {
                if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {
                  if (URI_ATTRS[lowerAttrName]) {
                    generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);
                  } else {
                    generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);
                  }
                } else {
                  ngDevMode && console.warn(`WARNING: ignoring unsafe attribute value ${lowerAttrName} on element ${tagName} (see ${XSS_SECURITY_URL})`);
                }
              } else {
                addCreateAttribute(create, newIndex, attr);
              }
            }
            const elementNode = {
              kind: 1,
              index: newIndex,
              children: []
            };
            ast.push(elementNode);
            bindingMask = walkIcuTree(elementNode.children, tView, tIcu, lView, sharedUpdateOpCodes, create, remove2, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;
            addRemoveNode(remove2, newIndex, depth);
          }
          break;
        case Node.TEXT_NODE:
          const value = currentNode.textContent || "";
          const hasBinding = value.match(BINDING_REGEXP);
          addCreateNodeAndAppend(create, null, hasBinding ? "" : value, parentIdx, newIndex);
          addRemoveNode(remove2, newIndex, depth);
          if (hasBinding) {
            bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;
          }
          ast.push({
            kind: 0,
            index: newIndex
          });
          break;
        case Node.COMMENT_NODE:
          const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || "");
          if (isNestedIcu) {
            const nestedIcuIndex = parseInt(isNestedIcu[1], 10);
            const icuExpression = nestedIcus[nestedIcuIndex];
            addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : "", parentIdx, newIndex);
            icuStart(ast, tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);
            addRemoveNestedIcu(remove2, newIndex, depth);
          }
          break;
      }
      currentNode = currentNode.nextSibling;
    }
    return bindingMask;
  }
  function addRemoveNode(remove2, index, depth) {
    if (depth === 0) {
      remove2.push(index);
    }
  }
  function addRemoveNestedIcu(remove2, index, depth) {
    if (depth === 0) {
      remove2.push(~index);
      remove2.push(index);
    }
  }
  function addUpdateIcuSwitch(update, icuExpression, index) {
    update.push(
      toMaskBit(icuExpression.mainBinding),
      2,
      -1 - icuExpression.mainBinding,
      index << 2 | 2
      /* I18nUpdateOpCode.IcuSwitch */
    );
  }
  function addUpdateIcuUpdate(update, bindingMask, index) {
    update.push(
      bindingMask,
      1,
      index << 2 | 3
      /* I18nUpdateOpCode.IcuUpdate */
    );
  }
  function addCreateNodeAndAppend(create, marker, text2, appendToParentIdx, createAtIdx) {
    if (marker !== null) {
      create.push(marker);
    }
    create.push(text2, createAtIdx, icuCreateOpCode(0, appendToParentIdx, createAtIdx));
  }
  function addCreateAttribute(create, newIndex, attr) {
    create.push(newIndex << 1 | 1, attr.name, attr.value);
  }
  function i18nPostprocess(message, replacements = {}) {
    let result = message;
    if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {
      const matches2 = {};
      const templateIdsStack = [ROOT_TEMPLATE_ID];
      result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {
        const content = phs || tmpl;
        const placeholders = matches2[content] || [];
        if (!placeholders.length) {
          content.split("|").forEach((placeholder2) => {
            const match2 = placeholder2.match(PP_TEMPLATE_ID_REGEXP);
            const templateId2 = match2 ? parseInt(match2[1], 10) : ROOT_TEMPLATE_ID;
            const isCloseTemplateTag2 = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder2);
            placeholders.push([templateId2, isCloseTemplateTag2, placeholder2]);
          });
          matches2[content] = placeholders;
        }
        if (!placeholders.length) {
          throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);
        }
        const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];
        let idx = 0;
        for (let i = 0; i < placeholders.length; i++) {
          if (placeholders[i][0] === currentTemplateId) {
            idx = i;
            break;
          }
        }
        const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];
        if (isCloseTemplateTag) {
          templateIdsStack.pop();
        } else if (currentTemplateId !== templateId) {
          templateIdsStack.push(templateId);
        }
        placeholders.splice(idx, 1);
        return placeholder;
      });
    }
    if (!Object.keys(replacements).length) {
      return result;
    }
    result = result.replace(PP_ICU_VARS_REGEXP, (match2, start, key, _type, _idx, end) => {
      return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match2;
    });
    result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match2, key) => {
      return replacements.hasOwnProperty(key) ? replacements[key] : match2;
    });
    result = result.replace(PP_ICUS_REGEXP, (match2, key) => {
      if (replacements.hasOwnProperty(key)) {
        const list = replacements[key];
        if (!list.length) {
          throw new Error(`i18n postprocess: unmatched ICU - ${match2} with key: ${key}`);
        }
        return list.shift();
      }
      return match2;
    });
    return result;
  }
  function \u0275\u0275i18nStart(index, messageIndex, subTemplateIndex = -1) {
    const tView = getTView();
    const lView = getLView();
    const adjustedIndex = HEADER_OFFSET + index;
    ngDevMode && assertDefined(tView, `tView should be defined`);
    const message = getConstant(tView.consts, messageIndex);
    const parentTNode = getCurrentParentTNode();
    if (tView.firstCreatePass) {
      i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);
    }
    if (tView.type === 2) {
      const componentLView = lView[DECLARATION_COMPONENT_VIEW];
      componentLView[FLAGS] |= 32;
    } else {
      lView[FLAGS] |= 32;
    }
    const tI18n = tView.data[adjustedIndex];
    const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;
    const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);
    const insertInFrontOf = parentTNode && parentTNode.type & 8 ? lView[parentTNode.index] : null;
    applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);
    setInI18nBlock(true);
  }
  function \u0275\u0275i18nEnd() {
    setInI18nBlock(false);
  }
  function \u0275\u0275i18n(index, messageIndex, subTemplateIndex) {
    \u0275\u0275i18nStart(index, messageIndex, subTemplateIndex);
    \u0275\u0275i18nEnd();
  }
  function \u0275\u0275i18nAttributes(index, attrsIndex) {
    const tView = getTView();
    ngDevMode && assertDefined(tView, `tView should be defined`);
    const attrs = getConstant(tView.consts, attrsIndex);
    i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);
  }
  function \u0275\u0275i18nExp(value) {
    const lView = getLView();
    setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));
    return \u0275\u0275i18nExp;
  }
  function \u0275\u0275i18nApply(index) {
    applyI18n(getTView(), getLView(), index + HEADER_OFFSET);
  }
  function \u0275\u0275i18nPostprocess(message, replacements = {}) {
    return i18nPostprocess(message, replacements);
  }
  function \u0275\u0275listener(eventName, listenerFn, useCapture, eventTargetResolver) {
    const lView = getLView();
    const tView = getTView();
    const tNode = getCurrentTNode();
    listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);
    return \u0275\u0275listener;
  }
  function \u0275\u0275syntheticHostListener(eventName, listenerFn) {
    const tNode = getCurrentTNode();
    const lView = getLView();
    const tView = getTView();
    const currentDef = getCurrentDirectiveDef(tView.data);
    const renderer = loadComponentRenderer(currentDef, tNode, lView);
    listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);
    return \u0275\u0275syntheticHostListener;
  }
  function findExistingListener(tView, lView, eventName, tNodeIdx) {
    const tCleanup = tView.cleanup;
    if (tCleanup != null) {
      for (let i = 0; i < tCleanup.length - 1; i += 2) {
        const cleanupEventName = tCleanup[i];
        if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {
          const lCleanup = lView[CLEANUP];
          const listenerIdxInLCleanup = tCleanup[i + 2];
          return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;
        }
        if (typeof cleanupEventName === "string") {
          i += 2;
        }
      }
    }
    return null;
  }
  function listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, eventTargetResolver) {
    const isTNodeDirectiveHost = isDirectiveHost(tNode);
    const firstCreatePass = tView.firstCreatePass;
    const tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);
    const context2 = lView[CONTEXT];
    const lCleanup = getOrCreateLViewCleanup(lView);
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12
      /* TNodeType.AnyContainer */
    );
    let processOutputs = true;
    if (tNode.type & 3 || eventTargetResolver) {
      const native = getNativeByTNode(tNode, lView);
      const target = eventTargetResolver ? eventTargetResolver(native) : native;
      const lCleanupIndex = lCleanup.length;
      const idxOrTargetGetter = eventTargetResolver ? (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])) : tNode.index;
      let existingListener = null;
      if (!eventTargetResolver && isTNodeDirectiveHost) {
        existingListener = findExistingListener(tView, lView, eventName, tNode.index);
      }
      if (existingListener !== null) {
        const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;
        lastListenerFn.__ngNextListenerFn__ = listenerFn;
        existingListener.__ngLastListenerFn__ = listenerFn;
        processOutputs = false;
      } else {
        listenerFn = wrapListener(
          tNode,
          lView,
          context2,
          listenerFn,
          false
          /** preventDefault */
        );
        const cleanupFn = renderer.listen(target, eventName, listenerFn);
        ngDevMode && ngDevMode.rendererAddEventListener++;
        lCleanup.push(listenerFn, cleanupFn);
        tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);
      }
    } else {
      listenerFn = wrapListener(
        tNode,
        lView,
        context2,
        listenerFn,
        false
        /** preventDefault */
      );
    }
    const outputs = tNode.outputs;
    let props;
    if (processOutputs && outputs !== null && (props = outputs[eventName])) {
      const propsLength = props.length;
      if (propsLength) {
        for (let i = 0; i < propsLength; i += 2) {
          const index = props[i];
          ngDevMode && assertIndexInRange(lView, index);
          const minifiedName = props[i + 1];
          const directiveInstance = lView[index];
          const output2 = directiveInstance[minifiedName];
          if (ngDevMode && !isOutputSubscribable(output2)) {
            throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);
          }
          const subscription = output2.subscribe(listenerFn);
          const idx = lCleanup.length;
          lCleanup.push(listenerFn, subscription);
          tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));
        }
      }
    }
  }
  function executeListenerWithErrorHandling(lView, context2, listenerFn, e2) {
    const prevConsumer = setActiveConsumer(null);
    try {
      profiler(6, context2, listenerFn);
      return listenerFn(e2) !== false;
    } catch (error2) {
      handleError(lView, error2);
      return false;
    } finally {
      profiler(7, context2, listenerFn);
      setActiveConsumer(prevConsumer);
    }
  }
  function wrapListener(tNode, lView, context2, listenerFn, wrapWithPreventDefault) {
    return function wrapListenerIn_markDirtyAndPreventDefault(e2) {
      if (e2 === Function) {
        return listenerFn;
      }
      const startView = tNode.componentOffset > -1 ? getComponentLViewByIndex(tNode.index, lView) : lView;
      markViewDirty(startView);
      let result = executeListenerWithErrorHandling(lView, context2, listenerFn, e2);
      let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;
      while (nextListenerFn) {
        result = executeListenerWithErrorHandling(lView, context2, nextListenerFn, e2) && result;
        nextListenerFn = nextListenerFn.__ngNextListenerFn__;
      }
      if (wrapWithPreventDefault && result === false) {
        e2.preventDefault();
      }
      return result;
    };
  }
  function isOutputSubscribable(value) {
    return value != null && typeof value.subscribe === "function";
  }
  function \u0275\u0275nextContext(level = 1) {
    return nextContextImpl(level);
  }
  function matchingProjectionSlotIndex(tNode, projectionSlots) {
    let wildcardNgContentIndex = null;
    const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);
    for (let i = 0; i < projectionSlots.length; i++) {
      const slotValue = projectionSlots[i];
      if (slotValue === "*") {
        wildcardNgContentIndex = i;
        continue;
      }
      if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(
        tNode,
        slotValue,
        /* isProjectionMode */
        true
      ) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {
        return i;
      }
    }
    return wildcardNgContentIndex;
  }
  function \u0275\u0275projectionDef(projectionSlots) {
    const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];
    if (!componentNode.projection) {
      const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;
      const projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);
      const tails = projectionHeads.slice();
      let componentChild = componentNode.child;
      while (componentChild !== null) {
        const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;
        if (slotIndex !== null) {
          if (tails[slotIndex]) {
            tails[slotIndex].projectionNext = componentChild;
          } else {
            projectionHeads[slotIndex] = componentChild;
          }
          tails[slotIndex] = componentChild;
        }
        componentChild = componentChild.next;
      }
    }
  }
  function \u0275\u0275projection(nodeIndex, selectorIndex = 0, attrs) {
    const lView = getLView();
    const tView = getTView();
    const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16, null, attrs || null);
    if (tProjectionNode.projection === null)
      tProjectionNode.projection = selectorIndex;
    setCurrentTNodeAsNotParent();
    const hydrationInfo = lView[HYDRATION];
    const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1();
    if (isNodeCreationMode && (tProjectionNode.flags & 32) !== 32) {
      applyProjection(tView, lView, tProjectionNode);
    }
  }
  function \u0275\u0275propertyInterpolate(propName, v0, sanitizer) {
    \u0275\u0275propertyInterpolate1(propName, "", v0, "", sanitizer);
    return \u0275\u0275propertyInterpolate;
  }
  function \u0275\u0275propertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {
    const lView = getLView();
    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
      ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);
    }
    return \u0275\u0275propertyInterpolate1;
  }
  function \u0275\u0275propertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {
    const lView = getLView();
    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
      ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);
    }
    return \u0275\u0275propertyInterpolate2;
  }
  function \u0275\u0275propertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {
    const lView = getLView();
    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
      ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);
    }
    return \u0275\u0275propertyInterpolate3;
  }
  function \u0275\u0275propertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {
    const lView = getLView();
    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
      ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
    }
    return \u0275\u0275propertyInterpolate4;
  }
  function \u0275\u0275propertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {
    const lView = getLView();
    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
      ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
    }
    return \u0275\u0275propertyInterpolate5;
  }
  function \u0275\u0275propertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {
    const lView = getLView();
    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
      ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
    }
    return \u0275\u0275propertyInterpolate6;
  }
  function \u0275\u0275propertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {
    const lView = getLView();
    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
      ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
    }
    return \u0275\u0275propertyInterpolate7;
  }
  function \u0275\u0275propertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {
    const lView = getLView();
    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
    if (interpolatedValue !== NO_CHANGE) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
      ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
    }
    return \u0275\u0275propertyInterpolate8;
  }
  function \u0275\u0275propertyInterpolateV(propName, values, sanitizer) {
    const lView = getLView();
    const interpolatedValue = interpolationV(lView, values);
    if (interpolatedValue !== NO_CHANGE) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
      if (ngDevMode) {
        const interpolationInBetween = [values[0]];
        for (let i = 2; i < values.length; i += 2) {
          interpolationInBetween.push(values[i]);
        }
        storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
      }
    }
    return \u0275\u0275propertyInterpolateV;
  }
  function \u0275\u0275contentQuery(directiveIndex, predicate, flags, read) {
    createContentQuery(directiveIndex, predicate, flags, read);
  }
  function \u0275\u0275viewQuery(predicate, flags, read) {
    createViewQuery(predicate, flags, read);
  }
  function \u0275\u0275queryRefresh(queryList) {
    const lView = getLView();
    const tView = getTView();
    const queryIndex = getCurrentQueryIndex();
    setCurrentQueryIndex(queryIndex + 1);
    const tQuery = getTQuery(tView, queryIndex);
    if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2) === 2)) {
      if (tQuery.matches === null) {
        queryList.reset([]);
      } else {
        const result = getQueryResults(lView, queryIndex);
        queryList.reset(result, unwrapElementRef);
        queryList.notifyOnChanges();
      }
      return true;
    }
    return false;
  }
  function \u0275\u0275loadQuery() {
    return loadQueryInternal(getLView(), getCurrentQueryIndex());
  }
  function \u0275\u0275contentQuerySignal(directiveIndex, target, predicate, flags, read) {
    bindQueryToSignal(target, createContentQuery(directiveIndex, predicate, flags, read));
  }
  function \u0275\u0275viewQuerySignal(target, predicate, flags, read) {
    bindQueryToSignal(target, createViewQuery(predicate, flags, read));
  }
  function \u0275\u0275queryAdvance(indexOffset = 1) {
    setCurrentQueryIndex(getCurrentQueryIndex() + indexOffset);
  }
  function store(tView, lView, index, value) {
    if (index >= tView.data.length) {
      tView.data[index] = null;
      tView.blueprint[index] = null;
    }
    lView[index] = value;
  }
  function \u0275\u0275reference(index) {
    const contextLView = getContextLView();
    return load(contextLView, HEADER_OFFSET + index);
  }
  function \u0275\u0275styleMapInterpolate1(prefix, v0, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
    \u0275\u0275styleMap(interpolatedValue);
  }
  function \u0275\u0275styleMapInterpolate2(prefix, v0, i0, v1, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
    \u0275\u0275styleMap(interpolatedValue);
  }
  function \u0275\u0275styleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
    \u0275\u0275styleMap(interpolatedValue);
  }
  function \u0275\u0275styleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
    \u0275\u0275styleMap(interpolatedValue);
  }
  function \u0275\u0275styleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
    \u0275\u0275styleMap(interpolatedValue);
  }
  function \u0275\u0275styleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
    \u0275\u0275styleMap(interpolatedValue);
  }
  function \u0275\u0275styleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
    \u0275\u0275styleMap(interpolatedValue);
  }
  function \u0275\u0275styleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
    const lView = getLView();
    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
    \u0275\u0275styleMap(interpolatedValue);
  }
  function \u0275\u0275styleMapInterpolateV(values) {
    const lView = getLView();
    const interpolatedValue = interpolationV(lView, values);
    \u0275\u0275styleMap(interpolatedValue);
  }
  function \u0275\u0275stylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {
    const lView = getLView();
    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return \u0275\u0275stylePropInterpolate1;
  }
  function \u0275\u0275stylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {
    const lView = getLView();
    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return \u0275\u0275stylePropInterpolate2;
  }
  function \u0275\u0275stylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {
    const lView = getLView();
    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return \u0275\u0275stylePropInterpolate3;
  }
  function \u0275\u0275stylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {
    const lView = getLView();
    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return \u0275\u0275stylePropInterpolate4;
  }
  function \u0275\u0275stylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {
    const lView = getLView();
    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return \u0275\u0275stylePropInterpolate5;
  }
  function \u0275\u0275stylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {
    const lView = getLView();
    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return \u0275\u0275stylePropInterpolate6;
  }
  function \u0275\u0275stylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {
    const lView = getLView();
    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return \u0275\u0275stylePropInterpolate7;
  }
  function \u0275\u0275stylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {
    const lView = getLView();
    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return \u0275\u0275stylePropInterpolate8;
  }
  function \u0275\u0275stylePropInterpolateV(prop, values, valueSuffix) {
    const lView = getLView();
    const interpolatedValue = interpolationV(lView, values);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return \u0275\u0275stylePropInterpolateV;
  }
  function \u0275\u0275text(index, value = "") {
    const lView = getLView();
    const tView = getTView();
    const adjustedIndex = index + HEADER_OFFSET;
    ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, "text nodes should be created before any bindings");
    ngDevMode && assertIndexInRange(lView, adjustedIndex);
    const tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1, value, null) : tView.data[adjustedIndex];
    const textNative = _locateOrCreateTextNode(tView, lView, tNode, value, index);
    lView[adjustedIndex] = textNative;
    if (wasLastNodeCreated()) {
      appendChild(tView, lView, textNative, tNode);
    }
    setCurrentTNode(tNode, false);
  }
  function locateOrCreateTextNodeImpl(tView, lView, tNode, value, index) {
    const hydrationInfo = lView[HYDRATION];
    const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1() || isDetachedByI18n(tNode) || isDisconnectedNode$1(hydrationInfo, index);
    lastNodeWasCreated(isNodeCreationMode);
    if (isNodeCreationMode) {
      return createTextNode(lView[RENDERER], value);
    }
    const textNative = locateNextRNode(hydrationInfo, tView, lView, tNode);
    ngDevMode && validateMatchingNode(textNative, Node.TEXT_NODE, null, lView, tNode);
    ngDevMode && markRNodeAsClaimedByHydration(textNative);
    return textNative;
  }
  function enableLocateOrCreateTextNodeImpl() {
    _locateOrCreateTextNode = locateOrCreateTextNodeImpl;
  }
  function \u0275\u0275textInterpolate(v0) {
    \u0275\u0275textInterpolate1("", v0, "");
    return \u0275\u0275textInterpolate;
  }
  function \u0275\u0275textInterpolate1(prefix, v0, suffix) {
    const lView = getLView();
    const interpolated = interpolation1(lView, prefix, v0, suffix);
    if (interpolated !== NO_CHANGE) {
      textBindingInternal(lView, getSelectedIndex(), interpolated);
    }
    return \u0275\u0275textInterpolate1;
  }
  function \u0275\u0275textInterpolate2(prefix, v0, i0, v1, suffix) {
    const lView = getLView();
    const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);
    if (interpolated !== NO_CHANGE) {
      textBindingInternal(lView, getSelectedIndex(), interpolated);
    }
    return \u0275\u0275textInterpolate2;
  }
  function \u0275\u0275textInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
    const lView = getLView();
    const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
    if (interpolated !== NO_CHANGE) {
      textBindingInternal(lView, getSelectedIndex(), interpolated);
    }
    return \u0275\u0275textInterpolate3;
  }
  function \u0275\u0275textInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
    const lView = getLView();
    const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
    if (interpolated !== NO_CHANGE) {
      textBindingInternal(lView, getSelectedIndex(), interpolated);
    }
    return \u0275\u0275textInterpolate4;
  }
  function \u0275\u0275textInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
    const lView = getLView();
    const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
    if (interpolated !== NO_CHANGE) {
      textBindingInternal(lView, getSelectedIndex(), interpolated);
    }
    return \u0275\u0275textInterpolate5;
  }
  function \u0275\u0275textInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
    const lView = getLView();
    const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
    if (interpolated !== NO_CHANGE) {
      textBindingInternal(lView, getSelectedIndex(), interpolated);
    }
    return \u0275\u0275textInterpolate6;
  }
  function \u0275\u0275textInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
    const lView = getLView();
    const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
    if (interpolated !== NO_CHANGE) {
      textBindingInternal(lView, getSelectedIndex(), interpolated);
    }
    return \u0275\u0275textInterpolate7;
  }
  function \u0275\u0275textInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
    const lView = getLView();
    const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
    if (interpolated !== NO_CHANGE) {
      textBindingInternal(lView, getSelectedIndex(), interpolated);
    }
    return \u0275\u0275textInterpolate8;
  }
  function \u0275\u0275textInterpolateV(values) {
    const lView = getLView();
    const interpolated = interpolationV(lView, values);
    if (interpolated !== NO_CHANGE) {
      textBindingInternal(lView, getSelectedIndex(), interpolated);
    }
    return \u0275\u0275textInterpolateV;
  }
  function \u0275\u0275twoWayProperty(propName, value, sanitizer) {
    if (isWritableSignal(value)) {
      value = value();
    }
    const lView = getLView();
    const bindingIndex = nextBindingIndex();
    if (bindingUpdated(lView, bindingIndex, value)) {
      const tView = getTView();
      const tNode = getSelectedTNode();
      elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
      ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
    }
    return \u0275\u0275twoWayProperty;
  }
  function \u0275\u0275twoWayBindingSet(target, value) {
    const canWrite = isWritableSignal(target);
    canWrite && target.set(value);
    return canWrite;
  }
  function \u0275\u0275twoWayListener(eventName, listenerFn) {
    const lView = getLView();
    const tView = getTView();
    const tNode = getCurrentTNode();
    listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn);
    return \u0275\u0275twoWayListener;
  }
  function providersResolver(def, providers, viewProviders) {
    const tView = getTView();
    if (tView.firstCreatePass) {
      const isComponent2 = isComponentDef(def);
      resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent2, true);
      resolveProvider(providers, tView.data, tView.blueprint, isComponent2, false);
    }
  }
  function resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent2, isViewProvider) {
    provider = resolveForwardRef(provider);
    if (Array.isArray(provider)) {
      for (let i = 0; i < provider.length; i++) {
        resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent2, isViewProvider);
      }
    } else {
      const tView = getTView();
      const lView = getLView();
      const tNode = getCurrentTNode();
      let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);
      const providerFactory = providerToFactory(provider);
      if (ngDevMode) {
        const injector = new NodeInjector(tNode, lView);
        runInInjectorProfilerContext(injector, token, () => {
          emitProviderConfiguredEvent(provider, isViewProvider);
        });
      }
      const beginIndex = tNode.providerIndexes & 1048575;
      const endIndex = tNode.directiveStart;
      const cptViewProvidersCount = tNode.providerIndexes >> 20;
      if (isTypeProvider(provider) || !provider.multi) {
        const factory = new NodeInjectorFactory(providerFactory, isViewProvider, \u0275\u0275directiveInject);
        const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);
        if (existingFactoryIndex === -1) {
          diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
          registerDestroyHooksIfSupported(tView, provider, tInjectables.length);
          tInjectables.push(token);
          tNode.directiveStart++;
          tNode.directiveEnd++;
          if (isViewProvider) {
            tNode.providerIndexes += 1048576;
          }
          lInjectablesBlueprint.push(factory);
          lView.push(factory);
        } else {
          lInjectablesBlueprint[existingFactoryIndex] = factory;
          lView[existingFactoryIndex] = factory;
        }
      } else {
        const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);
        const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);
        const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];
        const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];
        if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {
          diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
          const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent2, providerFactory);
          if (!isViewProvider && doesViewProvidersFactoryExist) {
            lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;
          }
          registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);
          tInjectables.push(token);
          tNode.directiveStart++;
          tNode.directiveEnd++;
          if (isViewProvider) {
            tNode.providerIndexes += 1048576;
          }
          lInjectablesBlueprint.push(factory);
          lView.push(factory);
        } else {
          const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent2);
          registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);
        }
        if (!isViewProvider && isComponent2 && doesViewProvidersFactoryExist) {
          lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;
        }
      }
    }
  }
  function registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {
    const providerIsTypeProvider = isTypeProvider(provider);
    const providerIsClassProvider = isClassProvider(provider);
    if (providerIsTypeProvider || providerIsClassProvider) {
      const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;
      const prototype = classToken.prototype;
      const ngOnDestroy = prototype.ngOnDestroy;
      if (ngOnDestroy) {
        const hooks = tView.destroyHooks || (tView.destroyHooks = []);
        if (!providerIsTypeProvider && provider.multi) {
          ngDevMode && assertDefined(indexInFactory, "indexInFactory when registering multi factory destroy hook");
          const existingCallbacksIndex = hooks.indexOf(contextIndex);
          if (existingCallbacksIndex === -1) {
            hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);
          } else {
            hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);
          }
        } else {
          hooks.push(contextIndex, ngOnDestroy);
        }
      }
    }
  }
  function multiFactoryAdd(multiFactory2, factory, isComponentProvider) {
    if (isComponentProvider) {
      multiFactory2.componentProviders++;
    }
    return multiFactory2.multi.push(factory) - 1;
  }
  function indexOf(item, arr, begin, end) {
    for (let i = begin; i < end; i++) {
      if (arr[i] === item)
        return i;
    }
    return -1;
  }
  function multiProvidersFactoryResolver(_, tData, lData, tNode) {
    return multiResolve(this.multi, []);
  }
  function multiViewProvidersFactoryResolver(_, tData, lView, tNode) {
    const factories = this.multi;
    let result;
    if (this.providerFactory) {
      const componentCount = this.providerFactory.componentProviders;
      const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);
      result = multiProviders.slice(0, componentCount);
      multiResolve(factories, result);
      for (let i = componentCount; i < multiProviders.length; i++) {
        result.push(multiProviders[i]);
      }
    } else {
      result = [];
      multiResolve(factories, result);
    }
    return result;
  }
  function multiResolve(factories, result) {
    for (let i = 0; i < factories.length; i++) {
      const factory = factories[i];
      result.push(factory());
    }
    return result;
  }
  function multiFactory(factoryFn, index, isViewProvider, isComponent2, f) {
    const factory = new NodeInjectorFactory(factoryFn, isViewProvider, \u0275\u0275directiveInject);
    factory.multi = [];
    factory.index = index;
    factory.componentProviders = 0;
    multiFactoryAdd(factory, f, isComponent2 && !isViewProvider);
    return factory;
  }
  function \u0275\u0275ProvidersFeature(providers, viewProviders = []) {
    return (definition) => {
      definition.providersResolver = (def, processProvidersFn) => {
        return providersResolver(
          def,
          //
          processProvidersFn ? processProvidersFn(providers) : providers,
          //
          viewProviders
        );
      };
    };
  }
  function \u0275\u0275StandaloneFeature(definition) {
    performanceMarkFeature("NgStandalone");
    definition.getStandaloneInjector = (parentInjector) => {
      return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(definition);
    };
  }
  function \u0275\u0275setComponentScope(type, directives, pipes) {
    const def = type.\u0275cmp;
    def.directiveDefs = extractDefListOrFactory(
      directives,
      /* pipeDef */
      false
    );
    def.pipeDefs = extractDefListOrFactory(
      pipes,
      /* pipeDef */
      true
    );
  }
  function \u0275\u0275setNgModuleScope(type, scope) {
    return noSideEffects(() => {
      const ngModuleDef = getNgModuleDef(type, true);
      ngModuleDef.declarations = convertToTypeArray(scope.declarations || EMPTY_ARRAY);
      ngModuleDef.imports = convertToTypeArray(scope.imports || EMPTY_ARRAY);
      ngModuleDef.exports = convertToTypeArray(scope.exports || EMPTY_ARRAY);
      if (scope.bootstrap) {
        ngModuleDef.bootstrap = convertToTypeArray(scope.bootstrap);
      }
      depsTracker.registerNgModule(type, scope);
    });
  }
  function convertToTypeArray(values) {
    if (typeof values === "function") {
      return values;
    }
    const flattenValues = flatten(values);
    if (flattenValues.some(isForwardRef)) {
      return () => flattenValues.map(resolveForwardRef).map(maybeUnwrapModuleWithProviders);
    } else {
      return flattenValues.map(maybeUnwrapModuleWithProviders);
    }
  }
  function maybeUnwrapModuleWithProviders(value) {
    return isModuleWithProviders(value) ? value.ngModule : value;
  }
  function \u0275\u0275pureFunction0(slotOffset, pureFn, thisArg) {
    const bindingIndex = getBindingRoot() + slotOffset;
    const lView = getLView();
    return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);
  }
  function \u0275\u0275pureFunction1(slotOffset, pureFn, exp, thisArg) {
    return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);
  }
  function \u0275\u0275pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {
    return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);
  }
  function \u0275\u0275pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
    return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);
  }
  function \u0275\u0275pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
    return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);
  }
  function \u0275\u0275pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {
    const bindingIndex = getBindingRoot() + slotOffset;
    const lView = getLView();
    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
    return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);
  }
  function \u0275\u0275pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {
    const bindingIndex = getBindingRoot() + slotOffset;
    const lView = getLView();
    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
    return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);
  }
  function \u0275\u0275pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {
    const bindingIndex = getBindingRoot() + slotOffset;
    const lView = getLView();
    let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
    return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);
  }
  function \u0275\u0275pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {
    const bindingIndex = getBindingRoot() + slotOffset;
    const lView = getLView();
    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
    return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);
  }
  function \u0275\u0275pureFunctionV(slotOffset, pureFn, exps, thisArg) {
    return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);
  }
  function getPureFunctionReturnValue(lView, returnValueIndex) {
    ngDevMode && assertIndexInRange(lView, returnValueIndex);
    const lastReturnValue = lView[returnValueIndex];
    return lastReturnValue === NO_CHANGE ? void 0 : lastReturnValue;
  }
  function pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {
    const bindingIndex = bindingRoot + slotOffset;
    return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);
  }
  function pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {
    const bindingIndex = bindingRoot + slotOffset;
    return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);
  }
  function pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
    const bindingIndex = bindingRoot + slotOffset;
    return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);
  }
  function pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
    const bindingIndex = bindingRoot + slotOffset;
    return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);
  }
  function pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {
    let bindingIndex = bindingRoot + slotOffset;
    let different = false;
    for (let i = 0; i < exps.length; i++) {
      bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);
    }
    return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);
  }
  function \u0275\u0275pipe(index, pipeName) {
    const tView = getTView();
    let pipeDef;
    const adjustedIndex = index + HEADER_OFFSET;
    if (tView.firstCreatePass) {
      pipeDef = getPipeDef(pipeName, tView.pipeRegistry);
      tView.data[adjustedIndex] = pipeDef;
      if (pipeDef.onDestroy) {
        (tView.destroyHooks ??= []).push(adjustedIndex, pipeDef.onDestroy);
      }
    } else {
      pipeDef = tView.data[adjustedIndex];
    }
    const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));
    let previousInjectorProfilerContext;
    if (ngDevMode) {
      previousInjectorProfilerContext = setInjectorProfilerContext({
        injector: new NodeInjector(getCurrentTNode(), getLView()),
        token: pipeDef.type
      });
    }
    const previousInjectImplementation = setInjectImplementation(\u0275\u0275directiveInject);
    try {
      const previousIncludeViewProviders = setIncludeViewProviders(false);
      const pipeInstance = pipeFactory();
      setIncludeViewProviders(previousIncludeViewProviders);
      store(tView, getLView(), adjustedIndex, pipeInstance);
      return pipeInstance;
    } finally {
      setInjectImplementation(previousInjectImplementation);
      ngDevMode && setInjectorProfilerContext(previousInjectorProfilerContext);
    }
  }
  function getPipeDef(name, registry) {
    if (registry) {
      if (ngDevMode) {
        const pipes = registry.filter((pipe3) => pipe3.name === name);
        if (pipes.length > 1) {
          console.warn(formatRuntimeError(313, getMultipleMatchingPipesMessage(name)));
        }
      }
      for (let i = registry.length - 1; i >= 0; i--) {
        const pipeDef = registry[i];
        if (name === pipeDef.name) {
          return pipeDef;
        }
      }
    }
    if (ngDevMode) {
      throw new RuntimeError(-302, getPipeNotFoundErrorMessage(name));
    }
    return;
  }
  function getMultipleMatchingPipesMessage(name) {
    const lView = getLView();
    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
    const context2 = declarationLView[CONTEXT];
    const hostIsStandalone = isHostComponentStandalone(lView);
    const componentInfoMessage = context2 ? ` in the '${context2.constructor.name}' component` : "";
    const verifyMessage = `check ${hostIsStandalone ? "'@Component.imports' of this component" : "the imports of this module"}`;
    const errorMessage = `Multiple pipes match the name \`${name}\`${componentInfoMessage}. ${verifyMessage}`;
    return errorMessage;
  }
  function getPipeNotFoundErrorMessage(name) {
    const lView = getLView();
    const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
    const context2 = declarationLView[CONTEXT];
    const hostIsStandalone = isHostComponentStandalone(lView);
    const componentInfoMessage = context2 ? ` in the '${context2.constructor.name}' component` : "";
    const verifyMessage = `Verify that it is ${hostIsStandalone ? "included in the '@Component.imports' of this component" : "declared or imported in this module"}`;
    const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;
    return errorMessage;
  }
  function \u0275\u0275pipeBind1(index, offset, v1) {
    const adjustedIndex = index + HEADER_OFFSET;
    const lView = getLView();
    const pipeInstance = load(lView, adjustedIndex);
    return isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), offset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1);
  }
  function \u0275\u0275pipeBind2(index, slotOffset, v1, v2) {
    const adjustedIndex = index + HEADER_OFFSET;
    const lView = getLView();
    const pipeInstance = load(lView, adjustedIndex);
    return isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2);
  }
  function \u0275\u0275pipeBind3(index, slotOffset, v1, v2, v3) {
    const adjustedIndex = index + HEADER_OFFSET;
    const lView = getLView();
    const pipeInstance = load(lView, adjustedIndex);
    return isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3);
  }
  function \u0275\u0275pipeBind4(index, slotOffset, v1, v2, v3, v4) {
    const adjustedIndex = index + HEADER_OFFSET;
    const lView = getLView();
    const pipeInstance = load(lView, adjustedIndex);
    return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4);
  }
  function \u0275\u0275pipeBindV(index, slotOffset, values) {
    const adjustedIndex = index + HEADER_OFFSET;
    const lView = getLView();
    const pipeInstance = load(lView, adjustedIndex);
    return isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values);
  }
  function isPure(lView, index) {
    return lView[TVIEW].data[index].pure;
  }
  function \u0275\u0275templateRefExtractor(tNode, lView) {
    return createTemplateRef(tNode, lView);
  }
  function \u0275\u0275getComponentDepsFactory(type, rawImports) {
    return () => {
      try {
        return depsTracker.getComponentDependencies(type, rawImports).dependencies;
      } catch (e2) {
        console.error(`Computing dependencies in local compilation mode for the component "${type.name}" failed with the exception:`, e2);
        throw e2;
      }
    };
  }
  function \u0275setClassDebugInfo(type, debugInfo) {
    const def = getComponentDef(type);
    if (def !== null) {
      def.debugInfo = debugInfo;
    }
  }
  function setJitOptions(options) {
    if (jitOptions !== null) {
      if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {
        ngDevMode && console.error("Provided value for `defaultEncapsulation` can not be changed once it has been set.");
        return;
      }
      if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {
        ngDevMode && console.error("Provided value for `preserveWhitespaces` can not be changed once it has been set.");
        return;
      }
    }
    jitOptions = options;
  }
  function getJitOptions() {
    return jitOptions;
  }
  function resetJitOptions() {
    jitOptions = null;
  }
  function patchModuleCompilation() {
  }
  function enqueueModuleForDelayedScoping(moduleType, ngModule) {
    moduleQueue.push({ moduleType, ngModule });
  }
  function flushModuleScopingQueueAsMuchAsPossible() {
    if (!flushingModuleQueue) {
      flushingModuleQueue = true;
      try {
        for (let i = moduleQueue.length - 1; i >= 0; i--) {
          const { moduleType, ngModule } = moduleQueue[i];
          if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {
            moduleQueue.splice(i, 1);
            setScopeOnDeclaredComponents(moduleType, ngModule);
          }
        }
      } finally {
        flushingModuleQueue = false;
      }
    }
  }
  function isResolvedDeclaration(declaration) {
    if (Array.isArray(declaration)) {
      return declaration.every(isResolvedDeclaration);
    }
    return !!resolveForwardRef(declaration);
  }
  function compileNgModule(moduleType, ngModule = {}) {
    patchModuleCompilation();
    compileNgModuleDefs(moduleType, ngModule);
    if (ngModule.id !== void 0) {
      registerNgModuleType(moduleType, ngModule.id);
    }
    enqueueModuleForDelayedScoping(moduleType, ngModule);
  }
  function compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {
    ngDevMode && assertDefined(moduleType, "Required value moduleType");
    ngDevMode && assertDefined(ngModule, "Required value ngModule");
    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
    let ngModuleDef = null;
    Object.defineProperty(moduleType, NG_MOD_DEF, {
      configurable: true,
      get: () => {
        if (ngModuleDef === null) {
          if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {
            throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);
          }
          const compiler = getCompilerFacade({ usage: 0, kind: "NgModule", type: moduleType });
          ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/\u0275mod.js`, {
            type: moduleType,
            bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),
            declarations: declarations.map(resolveForwardRef),
            imports: flatten(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
            exports: flatten(ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
            schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,
            id: ngModule.id || null
          });
          if (!ngModuleDef.schemas) {
            ngModuleDef.schemas = [];
          }
        }
        return ngModuleDef;
      }
    });
    let ngFactoryDef = null;
    Object.defineProperty(moduleType, NG_FACTORY_DEF, {
      get: () => {
        if (ngFactoryDef === null) {
          const compiler = getCompilerFacade({ usage: 0, kind: "NgModule", type: moduleType });
          ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/\u0275fac.js`, {
            name: moduleType.name,
            type: moduleType,
            deps: reflectDependencies(moduleType),
            target: compiler.FactoryTarget.NgModule,
            typeArgumentCount: 0
          });
        }
        return ngFactoryDef;
      },
      // Make the property configurable in dev mode to allow overriding in tests
      configurable: !!ngDevMode
    });
    let ngInjectorDef = null;
    Object.defineProperty(moduleType, NG_INJ_DEF, {
      get: () => {
        if (ngInjectorDef === null) {
          ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);
          const meta = {
            name: moduleType.name,
            type: moduleType,
            providers: ngModule.providers || EMPTY_ARRAY,
            imports: [
              (ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef),
              (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef)
            ]
          };
          const compiler = getCompilerFacade({ usage: 0, kind: "NgModule", type: moduleType });
          ngInjectorDef = compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/\u0275inj.js`, meta);
        }
        return ngInjectorDef;
      },
      // Make the property configurable in dev mode to allow overriding in tests
      configurable: !!ngDevMode
    });
  }
  function generateStandaloneInDeclarationsError(type, location2) {
    const prefix = `Unexpected "${stringifyForError(type)}" found in the "declarations" array of the`;
    const suffix = `"${stringifyForError(type)}" is marked as standalone and can't be declared in any NgModule - did you intend to import it instead (by adding it to the "imports" array)?`;
    return `${prefix} ${location2}, ${suffix}`;
  }
  function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {
    if (verifiedNgModule.get(moduleType))
      return;
    if (isStandalone(moduleType))
      return;
    verifiedNgModule.set(moduleType, true);
    moduleType = resolveForwardRef(moduleType);
    let ngModuleDef;
    if (importingModule) {
      ngModuleDef = getNgModuleDef(moduleType);
      if (!ngModuleDef) {
        throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
      }
    } else {
      ngModuleDef = getNgModuleDef(moduleType, true);
    }
    const errors = [];
    const declarations = maybeUnwrapFn(ngModuleDef.declarations);
    const imports = maybeUnwrapFn(ngModuleDef.imports);
    flatten(imports).map(unwrapModuleWithProvidersImports).forEach((modOrStandaloneCmpt) => {
      verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);
      verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);
    });
    const exports = maybeUnwrapFn(ngModuleDef.exports);
    declarations.forEach(verifyDeclarationsHaveDefinitions);
    declarations.forEach(verifyDirectivesHaveSelector);
    declarations.forEach((declarationType) => verifyNotStandalone(declarationType, moduleType));
    const combinedDeclarations = [
      ...declarations.map(resolveForwardRef),
      ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef)
    ];
    exports.forEach(verifyExportsAreDeclaredOrReExported);
    declarations.forEach((decl) => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));
    const ngModule = getAnnotation(moduleType, "NgModule");
    if (ngModule) {
      ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach((mod) => {
        verifySemanticsOfNgModuleImport(mod, moduleType);
        verifySemanticsOfNgModuleDef(mod, false, moduleType);
      });
      ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);
      ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);
    }
    if (errors.length) {
      throw new Error(errors.join("\n"));
    }
    function verifyDeclarationsHaveDefinitions(type) {
      type = resolveForwardRef(type);
      const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);
      if (!def) {
        errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);
      }
    }
    function verifyDirectivesHaveSelector(type) {
      type = resolveForwardRef(type);
      const def = getDirectiveDef(type);
      if (!getComponentDef(type) && def && def.selectors.length == 0) {
        errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);
      }
    }
    function verifyNotStandalone(type, moduleType2) {
      type = resolveForwardRef(type);
      const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);
      if (def?.standalone) {
        const location2 = `"${stringifyForError(moduleType2)}" NgModule`;
        errors.push(generateStandaloneInDeclarationsError(type, location2));
      }
    }
    function verifyExportsAreDeclaredOrReExported(type) {
      type = resolveForwardRef(type);
      const kind = getComponentDef(type) && "component" || getDirectiveDef(type) && "directive" || getPipeDef$1(type) && "pipe";
      if (kind) {
        if (combinedDeclarations.lastIndexOf(type) === -1) {
          errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);
        }
      }
    }
    function verifyDeclarationIsUnique(type, suppressErrors) {
      type = resolveForwardRef(type);
      const existingModule = ownerNgModule.get(type);
      if (existingModule && existingModule !== moduleType) {
        if (!suppressErrors) {
          const modules2 = [existingModule, moduleType].map(stringifyForError).sort();
          errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules2[0]} and ${modules2[1]}! Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules2[0]} and ${modules2[1]}. You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules2[0]} and ${modules2[1]}.`);
        }
      } else {
        ownerNgModule.set(type, moduleType);
      }
    }
    function verifyComponentIsPartOfNgModule(type) {
      type = resolveForwardRef(type);
      const existingModule = ownerNgModule.get(type);
      if (!existingModule && !isStandalone(type)) {
        errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);
      }
    }
    function verifyCorrectBootstrapType(type) {
      type = resolveForwardRef(type);
      if (!getComponentDef(type)) {
        errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);
      }
      if (isStandalone(type)) {
        errors.push(`The \`${stringifyForError(type)}\` class is a standalone component, which can not be used in the \`@NgModule.bootstrap\` array. Use the \`bootstrapApplication\` function for bootstrap instead.`);
      }
    }
    function verifySemanticsOfNgModuleImport(type, importingModule2) {
      type = resolveForwardRef(type);
      const directiveDef = getComponentDef(type) || getDirectiveDef(type);
      if (directiveDef !== null && !directiveDef.standalone) {
        throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule2.name}'. Please add an @NgModule annotation.`);
      }
      const pipeDef = getPipeDef$1(type);
      if (pipeDef !== null && !pipeDef.standalone) {
        throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule2.name}'. Please add an @NgModule annotation.`);
      }
    }
  }
  function unwrapModuleWithProvidersImports(typeOrWithProviders) {
    typeOrWithProviders = resolveForwardRef(typeOrWithProviders);
    return typeOrWithProviders.ngModule || typeOrWithProviders;
  }
  function getAnnotation(type, name) {
    let annotation = null;
    collect(type.__annotations__);
    collect(type.decorators);
    return annotation;
    function collect(annotations) {
      if (annotations) {
        annotations.forEach(readAnnotation);
      }
    }
    function readAnnotation(decorator) {
      if (!annotation) {
        const proto = Object.getPrototypeOf(decorator);
        if (proto.ngMetadataName == name) {
          annotation = decorator;
        } else if (decorator.type) {
          const proto2 = Object.getPrototypeOf(decorator.type);
          if (proto2.ngMetadataName == name) {
            annotation = decorator.args[0];
          }
        }
      }
    }
  }
  function resetCompiledComponents() {
    ownerNgModule = /* @__PURE__ */ new WeakMap();
    verifiedNgModule = /* @__PURE__ */ new WeakMap();
    moduleQueue.length = 0;
    GENERATED_COMP_IDS.clear();
  }
  function computeCombinedExports(type) {
    type = resolveForwardRef(type);
    const ngModuleDef = getNgModuleDef(type);
    if (ngModuleDef === null) {
      return [type];
    }
    return flatten(maybeUnwrapFn(ngModuleDef.exports).map((type2) => {
      const ngModuleDef2 = getNgModuleDef(type2);
      if (ngModuleDef2) {
        verifySemanticsOfNgModuleDef(type2, false);
        return computeCombinedExports(type2);
      } else {
        return type2;
      }
    }));
  }
  function setScopeOnDeclaredComponents(moduleType, ngModule) {
    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
    const transitiveScopes = transitiveScopesFor(moduleType);
    declarations.forEach((declaration) => {
      declaration = resolveForwardRef(declaration);
      if (declaration.hasOwnProperty(NG_COMP_DEF)) {
        const component = declaration;
        const componentDef = getComponentDef(component);
        patchComponentDefWithScope(componentDef, transitiveScopes);
      } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {
        declaration.ngSelectorScope = moduleType;
      }
    });
  }
  function patchComponentDefWithScope(componentDef, transitiveScopes) {
    componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives).map((dir) => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir)).filter((def) => !!def);
    componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map((pipe3) => getPipeDef$1(pipe3));
    componentDef.schemas = transitiveScopes.schemas;
    componentDef.tView = null;
  }
  function transitiveScopesFor(type) {
    if (isNgModule(type)) {
      if (USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {
        const scope = depsTracker.getNgModuleScope(type);
        const def = getNgModuleDef(type, true);
        return {
          schemas: def.schemas || null,
          ...scope
        };
      } else {
        return transitiveScopesForNgModule(type);
      }
    } else if (isStandalone(type)) {
      const directiveDef = getComponentDef(type) || getDirectiveDef(type);
      if (directiveDef !== null) {
        return {
          schemas: null,
          compilation: {
            directives: /* @__PURE__ */ new Set(),
            pipes: /* @__PURE__ */ new Set()
          },
          exported: {
            directives: /* @__PURE__ */ new Set([type]),
            pipes: /* @__PURE__ */ new Set()
          }
        };
      }
      const pipeDef = getPipeDef$1(type);
      if (pipeDef !== null) {
        return {
          schemas: null,
          compilation: {
            directives: /* @__PURE__ */ new Set(),
            pipes: /* @__PURE__ */ new Set()
          },
          exported: {
            directives: /* @__PURE__ */ new Set(),
            pipes: /* @__PURE__ */ new Set([type])
          }
        };
      }
    }
    throw new Error(`${type.name} does not have a module def (\u0275mod property)`);
  }
  function transitiveScopesForNgModule(moduleType) {
    const def = getNgModuleDef(moduleType, true);
    if (def.transitiveCompileScopes !== null) {
      return def.transitiveCompileScopes;
    }
    const scopes = {
      schemas: def.schemas || null,
      compilation: {
        directives: /* @__PURE__ */ new Set(),
        pipes: /* @__PURE__ */ new Set()
      },
      exported: {
        directives: /* @__PURE__ */ new Set(),
        pipes: /* @__PURE__ */ new Set()
      }
    };
    maybeUnwrapFn(def.imports).forEach((imported) => {
      const importedScope = transitiveScopesFor(imported);
      importedScope.exported.directives.forEach((entry) => scopes.compilation.directives.add(entry));
      importedScope.exported.pipes.forEach((entry) => scopes.compilation.pipes.add(entry));
    });
    maybeUnwrapFn(def.declarations).forEach((declared) => {
      const declaredWithDefs = declared;
      if (getPipeDef$1(declaredWithDefs)) {
        scopes.compilation.pipes.add(declared);
      } else {
        scopes.compilation.directives.add(declared);
      }
    });
    maybeUnwrapFn(def.exports).forEach((exported) => {
      const exportedType = exported;
      if (isNgModule(exportedType)) {
        const exportedScope = transitiveScopesFor(exportedType);
        exportedScope.exported.directives.forEach((entry) => {
          scopes.compilation.directives.add(entry);
          scopes.exported.directives.add(entry);
        });
        exportedScope.exported.pipes.forEach((entry) => {
          scopes.compilation.pipes.add(entry);
          scopes.exported.pipes.add(entry);
        });
      } else if (getPipeDef$1(exportedType)) {
        scopes.exported.pipes.add(exportedType);
      } else {
        scopes.exported.directives.add(exportedType);
      }
    });
    def.transitiveCompileScopes = scopes;
    return scopes;
  }
  function expandModuleWithProviders(value) {
    if (isModuleWithProviders(value)) {
      return value.ngModule;
    }
    return value;
  }
  function compileComponent(type, metadata) {
    (typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode();
    let ngComponentDef = null;
    maybeQueueResolutionOfComponentResources(type, metadata);
    addDirectiveFactoryDef(type, metadata);
    Object.defineProperty(type, NG_COMP_DEF, {
      get: () => {
        if (ngComponentDef === null) {
          const compiler = getCompilerFacade({ usage: 0, kind: "component", type });
          if (componentNeedsResolution(metadata)) {
            const error2 = [`Component '${type.name}' is not resolved:`];
            if (metadata.templateUrl) {
              error2.push(` - templateUrl: ${metadata.templateUrl}`);
            }
            if (metadata.styleUrls && metadata.styleUrls.length) {
              error2.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);
            }
            if (metadata.styleUrl) {
              error2.push(` - styleUrl: ${metadata.styleUrl}`);
            }
            error2.push(`Did you run and wait for 'resolveComponentResources()'?`);
            throw new Error(error2.join("\n"));
          }
          const options = getJitOptions();
          let preserveWhitespaces = metadata.preserveWhitespaces;
          if (preserveWhitespaces === void 0) {
            if (options !== null && options.preserveWhitespaces !== void 0) {
              preserveWhitespaces = options.preserveWhitespaces;
            } else {
              preserveWhitespaces = false;
            }
          }
          let encapsulation = metadata.encapsulation;
          if (encapsulation === void 0) {
            if (options !== null && options.defaultEncapsulation !== void 0) {
              encapsulation = options.defaultEncapsulation;
            } else {
              encapsulation = ViewEncapsulation$1.Emulated;
            }
          }
          const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;
          const meta = {
            ...directiveMetadata(type, metadata),
            typeSourceSpan: compiler.createParseSourceSpan("Component", type.name, templateUrl),
            template: metadata.template || "",
            preserveWhitespaces,
            styles: typeof metadata.styles === "string" ? [metadata.styles] : metadata.styles || EMPTY_ARRAY,
            animations: metadata.animations,
            // JIT components are always compiled against an empty set of `declarations`. Instead, the
            // `directiveDefs` and `pipeDefs` are updated at a later point:
            //  * for NgModule-based components, they're set when the NgModule which declares the
            //    component resolves in the module scoping queue
            //  * for standalone components, they're set just below, after `compileComponent`.
            declarations: [],
            changeDetection: metadata.changeDetection,
            encapsulation,
            interpolation: metadata.interpolation,
            viewProviders: metadata.viewProviders || null
          };
          compilationDepth++;
          try {
            if (meta.usesInheritance) {
              addDirectiveDefToUndecoratedParents(type);
            }
            ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);
            if (metadata.standalone) {
              const imports = flatten(metadata.imports || EMPTY_ARRAY);
              const { directiveDefs, pipeDefs } = getStandaloneDefFunctions(type, imports);
              ngComponentDef.directiveDefs = directiveDefs;
              ngComponentDef.pipeDefs = pipeDefs;
              ngComponentDef.dependencies = () => imports.map(resolveForwardRef);
            }
          } finally {
            compilationDepth--;
          }
          if (compilationDepth === 0) {
            flushModuleScopingQueueAsMuchAsPossible();
          }
          if (hasSelectorScope(type)) {
            const scopes = transitiveScopesFor(type.ngSelectorScope);
            patchComponentDefWithScope(ngComponentDef, scopes);
          }
          if (metadata.schemas) {
            if (metadata.standalone) {
              ngComponentDef.schemas = metadata.schemas;
            } else {
              throw new Error(`The 'schemas' was specified for the ${stringifyForError(type)} but is only valid on a component that is standalone.`);
            }
          } else if (metadata.standalone) {
            ngComponentDef.schemas = [];
          }
        }
        return ngComponentDef;
      },
      // Make the property configurable in dev mode to allow overriding in tests
      configurable: !!ngDevMode
    });
  }
  function getStandaloneDefFunctions(type, imports) {
    let cachedDirectiveDefs = null;
    let cachedPipeDefs = null;
    const directiveDefs = () => {
      if (!USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {
        if (cachedDirectiveDefs === null) {
          cachedDirectiveDefs = [getComponentDef(type)];
          const seen = /* @__PURE__ */ new Set([type]);
          for (const rawDep of imports) {
            ngDevMode && verifyStandaloneImport(rawDep, type);
            const dep = resolveForwardRef(rawDep);
            if (seen.has(dep)) {
              continue;
            }
            seen.add(dep);
            if (!!getNgModuleDef(dep)) {
              const scope = transitiveScopesFor(dep);
              for (const dir of scope.exported.directives) {
                const def = getComponentDef(dir) || getDirectiveDef(dir);
                if (def && !seen.has(dir)) {
                  seen.add(dir);
                  cachedDirectiveDefs.push(def);
                }
              }
            } else {
              const def = getComponentDef(dep) || getDirectiveDef(dep);
              if (def) {
                cachedDirectiveDefs.push(def);
              }
            }
          }
        }
        return cachedDirectiveDefs;
      } else {
        if (ngDevMode) {
          for (const rawDep of imports) {
            verifyStandaloneImport(rawDep, type);
          }
        }
        if (!isComponent(type)) {
          return [];
        }
        const scope = depsTracker.getStandaloneComponentScope(type, imports);
        return [...scope.compilation.directives].map((p) => getComponentDef(p) || getDirectiveDef(p)).filter((d) => d !== null);
      }
    };
    const pipeDefs = () => {
      if (!USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {
        if (cachedPipeDefs === null) {
          cachedPipeDefs = [];
          const seen = /* @__PURE__ */ new Set();
          for (const rawDep of imports) {
            const dep = resolveForwardRef(rawDep);
            if (seen.has(dep)) {
              continue;
            }
            seen.add(dep);
            if (!!getNgModuleDef(dep)) {
              const scope = transitiveScopesFor(dep);
              for (const pipe3 of scope.exported.pipes) {
                const def = getPipeDef$1(pipe3);
                if (def && !seen.has(pipe3)) {
                  seen.add(pipe3);
                  cachedPipeDefs.push(def);
                }
              }
            } else {
              const def = getPipeDef$1(dep);
              if (def) {
                cachedPipeDefs.push(def);
              }
            }
          }
        }
        return cachedPipeDefs;
      } else {
        if (ngDevMode) {
          for (const rawDep of imports) {
            verifyStandaloneImport(rawDep, type);
          }
        }
        if (!isComponent(type)) {
          return [];
        }
        const scope = depsTracker.getStandaloneComponentScope(type, imports);
        return [...scope.compilation.pipes].map((p) => getPipeDef$1(p)).filter((d) => d !== null);
      }
    };
    return {
      directiveDefs,
      pipeDefs
    };
  }
  function hasSelectorScope(component) {
    return component.ngSelectorScope !== void 0;
  }
  function compileDirective(type, directive) {
    let ngDirectiveDef = null;
    addDirectiveFactoryDef(type, directive || {});
    Object.defineProperty(type, NG_DIR_DEF, {
      get: () => {
        if (ngDirectiveDef === null) {
          const meta = getDirectiveMetadata(type, directive || {});
          const compiler = getCompilerFacade({ usage: 0, kind: "directive", type });
          ngDirectiveDef = compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);
        }
        return ngDirectiveDef;
      },
      // Make the property configurable in dev mode to allow overriding in tests
      configurable: !!ngDevMode
    });
  }
  function getDirectiveMetadata(type, metadata) {
    const name = type && type.name;
    const sourceMapUrl = `ng:///${name}/\u0275dir.js`;
    const compiler = getCompilerFacade({ usage: 0, kind: "directive", type });
    const facade = directiveMetadata(type, metadata);
    facade.typeSourceSpan = compiler.createParseSourceSpan("Directive", name, sourceMapUrl);
    if (facade.usesInheritance) {
      addDirectiveDefToUndecoratedParents(type);
    }
    return { metadata: facade, sourceMapUrl };
  }
  function addDirectiveFactoryDef(type, metadata) {
    let ngFactoryDef = null;
    Object.defineProperty(type, NG_FACTORY_DEF, {
      get: () => {
        if (ngFactoryDef === null) {
          const meta = getDirectiveMetadata(type, metadata);
          const compiler = getCompilerFacade({ usage: 0, kind: "directive", type });
          ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/\u0275fac.js`, {
            name: meta.metadata.name,
            type: meta.metadata.type,
            typeArgumentCount: 0,
            deps: reflectDependencies(type),
            target: compiler.FactoryTarget.Directive
          });
        }
        return ngFactoryDef;
      },
      // Make the property configurable in dev mode to allow overriding in tests
      configurable: !!ngDevMode
    });
  }
  function extendsDirectlyFromObject(type) {
    return Object.getPrototypeOf(type.prototype) === Object.prototype;
  }
  function directiveMetadata(type, metadata) {
    const reflect = getReflect();
    const propMetadata = reflect.ownPropMetadata(type);
    return {
      name: type.name,
      type,
      selector: metadata.selector !== void 0 ? metadata.selector : null,
      host: metadata.host || EMPTY_OBJ,
      propMetadata,
      inputs: metadata.inputs || EMPTY_ARRAY,
      outputs: metadata.outputs || EMPTY_ARRAY,
      queries: extractQueriesMetadata(type, propMetadata, isContentQuery),
      lifecycle: { usesOnChanges: reflect.hasLifecycleHook(type, "ngOnChanges") },
      typeSourceSpan: null,
      usesInheritance: !extendsDirectlyFromObject(type),
      exportAs: extractExportAs(metadata.exportAs),
      providers: metadata.providers || null,
      viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),
      isStandalone: !!metadata.standalone,
      isSignal: !!metadata.signals,
      hostDirectives: metadata.hostDirectives?.map((directive) => typeof directive === "function" ? { directive } : directive) || null
    };
  }
  function addDirectiveDefToUndecoratedParents(type) {
    const objPrototype = Object.prototype;
    let parent = Object.getPrototypeOf(type.prototype).constructor;
    while (parent && parent !== objPrototype) {
      if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {
        compileDirective(parent, null);
      }
      parent = Object.getPrototypeOf(parent);
    }
  }
  function convertToR3QueryPredicate(selector) {
    return typeof selector === "string" ? splitByComma(selector) : resolveForwardRef(selector);
  }
  function convertToR3QueryMetadata(propertyName, ann) {
    return {
      propertyName,
      predicate: convertToR3QueryPredicate(ann.selector),
      descendants: ann.descendants,
      first: ann.first,
      read: ann.read ? ann.read : null,
      static: !!ann.static,
      emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly,
      isSignal: !!ann.isSignal
    };
  }
  function extractQueriesMetadata(type, propMetadata, isQueryAnn) {
    const queriesMeta = [];
    for (const field in propMetadata) {
      if (propMetadata.hasOwnProperty(field)) {
        const annotations = propMetadata[field];
        annotations.forEach((ann) => {
          if (isQueryAnn(ann)) {
            if (!ann.selector) {
              throw new Error(`Can't construct a query for the property "${field}" of "${stringifyForError(type)}" since the query selector wasn't defined.`);
            }
            if (annotations.some(isInputAnnotation)) {
              throw new Error(`Cannot combine @Input decorators with query decorators`);
            }
            queriesMeta.push(convertToR3QueryMetadata(field, ann));
          }
        });
      }
    }
    return queriesMeta;
  }
  function extractExportAs(exportAs) {
    return exportAs === void 0 ? null : splitByComma(exportAs);
  }
  function isContentQuery(value) {
    const name = value.ngMetadataName;
    return name === "ContentChild" || name === "ContentChildren";
  }
  function isViewQuery(value) {
    const name = value.ngMetadataName;
    return name === "ViewChild" || name === "ViewChildren";
  }
  function isInputAnnotation(value) {
    return value.ngMetadataName === "Input";
  }
  function splitByComma(value) {
    return value.split(",").map((piece) => piece.trim());
  }
  function shouldAddAbstractDirective(type) {
    const reflect = getReflect();
    if (LIFECYCLE_HOOKS.some((hookName) => reflect.hasLifecycleHook(type, hookName))) {
      return true;
    }
    const propMetadata = reflect.propMetadata(type);
    for (const field in propMetadata) {
      const annotations = propMetadata[field];
      for (let i = 0; i < annotations.length; i++) {
        const current = annotations[i];
        const metadataName = current.ngMetadataName;
        if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === "Output" || metadataName === "HostBinding" || metadataName === "HostListener") {
          return true;
        }
      }
    }
    return false;
  }
  function compilePipe(type, meta) {
    let ngPipeDef = null;
    let ngFactoryDef = null;
    Object.defineProperty(type, NG_FACTORY_DEF, {
      get: () => {
        if (ngFactoryDef === null) {
          const metadata = getPipeMetadata(type, meta);
          const compiler = getCompilerFacade({ usage: 0, kind: "pipe", type: metadata.type });
          ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/\u0275fac.js`, {
            name: metadata.name,
            type: metadata.type,
            typeArgumentCount: 0,
            deps: reflectDependencies(type),
            target: compiler.FactoryTarget.Pipe
          });
        }
        return ngFactoryDef;
      },
      // Make the property configurable in dev mode to allow overriding in tests
      configurable: !!ngDevMode
    });
    Object.defineProperty(type, NG_PIPE_DEF, {
      get: () => {
        if (ngPipeDef === null) {
          const metadata = getPipeMetadata(type, meta);
          const compiler = getCompilerFacade({ usage: 0, kind: "pipe", type: metadata.type });
          ngPipeDef = compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/\u0275pipe.js`, metadata);
        }
        return ngPipeDef;
      },
      // Make the property configurable in dev mode to allow overriding in tests
      configurable: !!ngDevMode
    });
  }
  function getPipeMetadata(type, meta) {
    return {
      type,
      name: type.name,
      pipeName: meta.name,
      pure: meta.pure !== void 0 ? meta.pure : true,
      isStandalone: !!meta.standalone
    };
  }
  function getFrameworkDIDebugData() {
    return frameworkDIDebugData;
  }
  function setupFrameworkInjectorProfiler() {
    frameworkDIDebugData.reset();
    setInjectorProfiler((injectorProfilerEvent) => handleInjectorProfilerEvent(injectorProfilerEvent));
  }
  function handleInjectorProfilerEvent(injectorProfilerEvent) {
    const { context: context2, type } = injectorProfilerEvent;
    if (type === 0) {
      handleInjectEvent(context2, injectorProfilerEvent.service);
    } else if (type === 1) {
      handleInstanceCreatedByInjectorEvent(context2, injectorProfilerEvent.instance);
    } else if (type === 2) {
      handleProviderConfiguredEvent(context2, injectorProfilerEvent.providerRecord);
    }
  }
  function handleInjectEvent(context2, data) {
    const diResolver = getDIResolver(context2.injector);
    if (diResolver === null) {
      throwError2("An Inject event must be run within an injection context.");
    }
    const diResolverToInstantiatedToken = frameworkDIDebugData.resolverToTokenToDependencies;
    if (!diResolverToInstantiatedToken.has(diResolver)) {
      diResolverToInstantiatedToken.set(diResolver, /* @__PURE__ */ new WeakMap());
    }
    if (!canBeHeldWeakly(context2.token)) {
      return;
    }
    const instantiatedTokenToDependencies = diResolverToInstantiatedToken.get(diResolver);
    if (!instantiatedTokenToDependencies.has(context2.token)) {
      instantiatedTokenToDependencies.set(context2.token, []);
    }
    const { token, value, flags } = data;
    assertDefined(context2.token, "Injector profiler context token is undefined.");
    const dependencies = instantiatedTokenToDependencies.get(context2.token);
    assertDefined(dependencies, "Could not resolve dependencies for token.");
    if (context2.injector instanceof NodeInjector) {
      dependencies.push({ token, value, flags, injectedIn: getNodeInjectorContext(context2.injector) });
    } else {
      dependencies.push({ token, value, flags });
    }
  }
  function getNodeInjectorContext(injector) {
    if (!(injector instanceof NodeInjector)) {
      throwError2("getNodeInjectorContext must be called with a NodeInjector");
    }
    const lView = getNodeInjectorLView(injector);
    const tNode = getNodeInjectorTNode(injector);
    if (tNode === null) {
      return;
    }
    assertTNodeForLView(tNode, lView);
    return { lView, tNode };
  }
  function handleInstanceCreatedByInjectorEvent(context2, data) {
    const { value } = data;
    if (getDIResolver(context2.injector) === null) {
      throwError2("An InjectorCreatedInstance event must be run within an injection context.");
    }
    let standaloneComponent = void 0;
    if (typeof value === "object") {
      standaloneComponent = value?.constructor;
    }
    if (standaloneComponent === void 0 || !isStandaloneComponent(standaloneComponent)) {
      return;
    }
    const environmentInjector = context2.injector.get(EnvironmentInjector, null, { optional: true });
    if (environmentInjector === null) {
      return;
    }
    const { standaloneInjectorToComponent } = frameworkDIDebugData;
    if (standaloneInjectorToComponent.has(environmentInjector)) {
      return;
    }
    standaloneInjectorToComponent.set(environmentInjector, standaloneComponent);
  }
  function isStandaloneComponent(value) {
    const def = getComponentDef(value);
    return !!def?.standalone;
  }
  function handleProviderConfiguredEvent(context2, data) {
    const { resolverToProviders } = frameworkDIDebugData;
    let diResolver;
    if (context2?.injector instanceof NodeInjector) {
      diResolver = getNodeInjectorTNode(context2.injector);
    } else {
      diResolver = context2.injector;
    }
    if (diResolver === null) {
      throwError2("A ProviderConfigured event must be run within an injection context.");
    }
    if (!resolverToProviders.has(diResolver)) {
      resolverToProviders.set(diResolver, []);
    }
    resolverToProviders.get(diResolver).push(data);
  }
  function getDIResolver(injector) {
    let diResolver = null;
    if (injector === void 0) {
      return diResolver;
    }
    if (injector instanceof NodeInjector) {
      diResolver = getNodeInjectorLView(injector);
    } else {
      diResolver = injector;
    }
    return diResolver;
  }
  function canBeHeldWeakly(value) {
    return value !== null && (typeof value === "object" || typeof value === "function" || typeof value === "symbol");
  }
  function applyChanges(component) {
    ngDevMode && assertDefined(component, "component");
    markViewDirty(getComponentViewByInstance(component));
    getRootComponents(component).forEach((rootComponent) => detectChanges(rootComponent));
  }
  function detectChanges(component) {
    const view = getComponentViewByInstance(component);
    view[FLAGS] |= 1024;
    detectChangesInternal(view);
  }
  function getDependenciesFromInjectable(injector, token) {
    const instance = injector.get(token, null, { self: true, optional: true });
    if (instance === null) {
      throw new Error(`Unable to determine instance of ${token} in given injector`);
    }
    const unformattedDependencies = getDependenciesForTokenInInjector(token, injector);
    const resolutionPath = getInjectorResolutionPath(injector);
    const dependencies = unformattedDependencies.map((dep) => {
      const formattedDependency = {
        value: dep.value
      };
      const flags = dep.flags;
      formattedDependency.flags = {
        optional: (8 & flags) === 8,
        host: (1 & flags) === 1,
        self: (2 & flags) === 2,
        skipSelf: (4 & flags) === 4
      };
      for (let i = 0; i < resolutionPath.length; i++) {
        const injectorToCheck = resolutionPath[i];
        if (i === 0 && formattedDependency.flags.skipSelf) {
          continue;
        }
        if (formattedDependency.flags.host && injectorToCheck instanceof EnvironmentInjector) {
          break;
        }
        const instance2 = injectorToCheck.get(dep.token, null, { self: true, optional: true });
        if (instance2 !== null) {
          if (formattedDependency.flags.host) {
            const firstInjector = resolutionPath[0];
            const lookupFromFirstInjector = firstInjector.get(dep.token, null, { ...formattedDependency.flags, optional: true });
            if (lookupFromFirstInjector !== null) {
              formattedDependency.providedIn = injectorToCheck;
            }
            break;
          }
          formattedDependency.providedIn = injectorToCheck;
          break;
        }
        if (i === 0 && formattedDependency.flags.self) {
          break;
        }
      }
      if (dep.token)
        formattedDependency.token = dep.token;
      return formattedDependency;
    });
    return { instance, dependencies };
  }
  function getDependenciesForTokenInInjector(token, injector) {
    const { resolverToTokenToDependencies } = getFrameworkDIDebugData();
    if (!(injector instanceof NodeInjector)) {
      return resolverToTokenToDependencies.get(injector)?.get?.(token) ?? [];
    }
    const lView = getNodeInjectorLView(injector);
    const tokenDependencyMap = resolverToTokenToDependencies.get(lView);
    const dependencies = tokenDependencyMap?.get(token) ?? [];
    return dependencies.filter((dependency) => {
      const dependencyNode = dependency.injectedIn?.tNode;
      if (dependencyNode === void 0) {
        return false;
      }
      const instanceNode = getNodeInjectorTNode(injector);
      assertTNode(dependencyNode);
      assertTNode(instanceNode);
      return dependencyNode === instanceNode;
    });
  }
  function getProviderImportsContainer(injector) {
    const { standaloneInjectorToComponent } = getFrameworkDIDebugData();
    if (standaloneInjectorToComponent.has(injector)) {
      return standaloneInjectorToComponent.get(injector);
    }
    const defTypeRef = injector.get(NgModuleRef$1, null, { self: true, optional: true });
    if (defTypeRef === null) {
      return null;
    }
    if (defTypeRef.instance === null) {
      return null;
    }
    return defTypeRef.instance.constructor;
  }
  function getNodeInjectorProviders(injector) {
    const diResolver = getNodeInjectorTNode(injector);
    const { resolverToProviders } = getFrameworkDIDebugData();
    return resolverToProviders.get(diResolver) ?? [];
  }
  function getProviderImportPaths(providerImportsContainer) {
    const providerToPath = /* @__PURE__ */ new Map();
    const visitedContainers = /* @__PURE__ */ new Set();
    const visitor = walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers);
    walkProviderTree(providerImportsContainer, visitor, [], /* @__PURE__ */ new Set());
    return providerToPath;
  }
  function walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers) {
    return (provider, container) => {
      if (!providerToPath.has(provider)) {
        providerToPath.set(provider, [container]);
      }
      if (!visitedContainers.has(container)) {
        for (const prov of providerToPath.keys()) {
          const existingImportPath = providerToPath.get(prov);
          let containerDef = getInjectorDef(container);
          if (!containerDef) {
            const ngModule = container.ngModule;
            containerDef = getInjectorDef(ngModule);
          }
          if (!containerDef) {
            return;
          }
          const lastContainerAddedToPath = existingImportPath[0];
          let isNextStepInPath = false;
          deepForEach(containerDef.imports, (moduleImport) => {
            if (isNextStepInPath) {
              return;
            }
            isNextStepInPath = moduleImport.ngModule === lastContainerAddedToPath || moduleImport === lastContainerAddedToPath;
            if (isNextStepInPath) {
              providerToPath.get(prov)?.unshift(container);
            }
          });
        }
      }
      visitedContainers.add(container);
    };
  }
  function getEnvironmentInjectorProviders(injector) {
    const providerRecordsWithoutImportPaths = getFrameworkDIDebugData().resolverToProviders.get(injector) ?? [];
    if (isPlatformInjector(injector)) {
      return providerRecordsWithoutImportPaths;
    }
    const providerImportsContainer = getProviderImportsContainer(injector);
    if (providerImportsContainer === null) {
      return providerRecordsWithoutImportPaths;
    }
    const providerToPath = getProviderImportPaths(providerImportsContainer);
    const providerRecords = [];
    for (const providerRecord of providerRecordsWithoutImportPaths) {
      const provider = providerRecord.provider;
      const token = provider.provide;
      if (token === ENVIRONMENT_INITIALIZER || token === INJECTOR_DEF_TYPES) {
        continue;
      }
      let importPath = providerToPath.get(provider) ?? [];
      const def = getComponentDef(providerImportsContainer);
      const isStandaloneComponent2 = !!def?.standalone;
      if (isStandaloneComponent2) {
        importPath = [providerImportsContainer, ...importPath];
      }
      providerRecords.push({ ...providerRecord, importPath });
    }
    return providerRecords;
  }
  function isPlatformInjector(injector) {
    return injector instanceof R3Injector && injector.scopes.has("platform");
  }
  function getInjectorProviders(injector) {
    if (injector instanceof NodeInjector) {
      return getNodeInjectorProviders(injector);
    } else if (injector instanceof EnvironmentInjector) {
      return getEnvironmentInjectorProviders(injector);
    }
    throwError2("getInjectorProviders only supports NodeInjector and EnvironmentInjector");
  }
  function getInjectorMetadata(injector) {
    if (injector instanceof NodeInjector) {
      const lView = getNodeInjectorLView(injector);
      const tNode = getNodeInjectorTNode(injector);
      assertTNodeForLView(tNode, lView);
      return { type: "element", source: getNativeByTNode(tNode, lView) };
    }
    if (injector instanceof R3Injector) {
      return { type: "environment", source: injector.source ?? null };
    }
    if (injector instanceof NullInjector) {
      return { type: "null", source: null };
    }
    return null;
  }
  function getInjectorResolutionPath(injector) {
    const resolutionPath = [injector];
    getInjectorResolutionPathHelper(injector, resolutionPath);
    return resolutionPath;
  }
  function getInjectorResolutionPathHelper(injector, resolutionPath) {
    const parent = getInjectorParent(injector);
    if (parent === null) {
      if (injector instanceof NodeInjector) {
        const firstInjector = resolutionPath[0];
        if (firstInjector instanceof NodeInjector) {
          const moduleInjector = getModuleInjectorOfNodeInjector(firstInjector);
          if (moduleInjector === null) {
            throwError2("NodeInjector must have some connection to the module injector tree");
          }
          resolutionPath.push(moduleInjector);
          getInjectorResolutionPathHelper(moduleInjector, resolutionPath);
        }
        return resolutionPath;
      }
    } else {
      resolutionPath.push(parent);
      getInjectorResolutionPathHelper(parent, resolutionPath);
    }
    return resolutionPath;
  }
  function getInjectorParent(injector) {
    if (injector instanceof R3Injector) {
      return injector.parent;
    }
    let tNode;
    let lView;
    if (injector instanceof NodeInjector) {
      tNode = getNodeInjectorTNode(injector);
      lView = getNodeInjectorLView(injector);
    } else if (injector instanceof NullInjector) {
      return null;
    } else if (injector instanceof ChainedInjector) {
      return injector.parentInjector;
    } else {
      throwError2("getInjectorParent only support injectors of type R3Injector, NodeInjector, NullInjector, ChainedInjector");
    }
    const parentLocation = getParentInjectorLocation(tNode, lView);
    if (hasParentInjector(parentLocation)) {
      const parentInjectorIndex = getParentInjectorIndex(parentLocation);
      const parentLView = getParentInjectorView(parentLocation, lView);
      const parentTView = parentLView[TVIEW];
      const parentTNode = parentTView.data[
        parentInjectorIndex + 8
        /* NodeInjectorOffset.TNODE */
      ];
      return new NodeInjector(parentTNode, parentLView);
    } else {
      const chainedInjector = lView[INJECTOR];
      const injectorParent = chainedInjector.injector?.parent;
      if (injectorParent instanceof NodeInjector) {
        return injectorParent;
      }
    }
    return null;
  }
  function getModuleInjectorOfNodeInjector(injector) {
    let lView;
    if (injector instanceof NodeInjector) {
      lView = getNodeInjectorLView(injector);
    } else {
      throwError2("getModuleInjectorOfNodeInjector must be called with a NodeInjector");
    }
    const inj = lView[INJECTOR];
    const moduleInjector = inj instanceof ChainedInjector ? inj.parentInjector : inj.parent;
    if (!moduleInjector) {
      throwError2("NodeInjector must have some connection to the module injector tree");
    }
    return moduleInjector;
  }
  function publishDefaultGlobalUtils$1() {
    if (!_published) {
      _published = true;
      setupFrameworkInjectorProfiler();
      for (const [methodName, method] of Object.entries(globalUtilsFunctions)) {
        publishGlobalUtil(methodName, method);
      }
    }
  }
  function publishGlobalUtil(name, fn2) {
    if (typeof COMPILED === "undefined" || !COMPILED) {
      const w = _global;
      ngDevMode && assertDefined(fn2, "function not defined");
      w[GLOBAL_PUBLISH_EXPANDO_KEY] ??= {};
      w[GLOBAL_PUBLISH_EXPANDO_KEY][name] = fn2;
    }
  }
  function setTestabilityGetter(getter) {
    _testabilityGetter = getter;
  }
  function isPromise2(obj) {
    return !!obj && typeof obj.then === "function";
  }
  function isSubscribable(obj) {
    return !!obj && typeof obj.subscribe === "function";
  }
  function publishDefaultGlobalUtils() {
    ngDevMode && publishDefaultGlobalUtils$1();
  }
  function publishSignalConfiguration() {
    setThrowInvalidWriteToSignalError(() => {
      throw new RuntimeError(600, ngDevMode && "Writing to signals is not allowed in a `computed` or an `effect` by default. Use `allowSignalWrites` in the `CreateEffectOptions` to enable this inside effects.");
    });
  }
  function isBoundToModule(cf) {
    return cf.isBoundToModule;
  }
  function _callAndReportToErrorHandler(errorHandler2, ngZone, callback) {
    try {
      const result = callback();
      if (isPromise2(result)) {
        return result.catch((e2) => {
          ngZone.runOutsideAngular(() => errorHandler2.handleError(e2));
          throw e2;
        });
      }
      return result;
    } catch (e2) {
      ngZone.runOutsideAngular(() => errorHandler2.handleError(e2));
      throw e2;
    }
  }
  function optionsReducer(dst, objs) {
    if (Array.isArray(objs)) {
      return objs.reduce(optionsReducer, dst);
    }
    return { ...dst, ...objs };
  }
  function remove(list, el) {
    const index = list.indexOf(el);
    if (index > -1) {
      list.splice(index, 1);
    }
  }
  function whenStable(applicationRef) {
    whenStableStore ??= /* @__PURE__ */ new WeakMap();
    const cachedWhenStable = whenStableStore.get(applicationRef);
    if (cachedWhenStable) {
      return cachedWhenStable;
    }
    const whenStablePromise = applicationRef.isStable.pipe(first((isStable) => isStable)).toPromise().then(() => void 0);
    whenStableStore.set(applicationRef, whenStablePromise);
    applicationRef.onDestroy(() => whenStableStore?.delete(applicationRef));
    return whenStablePromise;
  }
  function detectChangesInViewIfRequired(lView, isFirstPass, notifyErrorHandler) {
    if (!isFirstPass && !shouldRecheckView(lView)) {
      return;
    }
    detectChangesInView(lView, notifyErrorHandler, isFirstPass);
  }
  function shouldRecheckView(view) {
    return requiresRefreshOrTraversal(view);
  }
  function detectChangesInView(lView, notifyErrorHandler, isFirstPass) {
    let mode;
    if (isFirstPass) {
      mode = 0;
      lView[FLAGS] |= 1024;
    } else if (lView[FLAGS] & 64) {
      mode = 0;
    } else {
      mode = 1;
    }
    detectChangesInternal(lView, notifyErrorHandler, mode);
  }
  function compileNgModuleFactory(injector, options, moduleType) {
    ngDevMode && assertNgModuleType(moduleType);
    const moduleFactory = new NgModuleFactory(moduleType);
    if (typeof ngJitMode !== "undefined" && !ngJitMode) {
      return Promise.resolve(moduleFactory);
    }
    const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);
    setJitOptions({
      defaultEncapsulation: _lastDefined(compilerOptions.map((opts) => opts.defaultEncapsulation)),
      preserveWhitespaces: _lastDefined(compilerOptions.map((opts) => opts.preserveWhitespaces))
    });
    if (isComponentResourceResolutionQueueEmpty()) {
      return Promise.resolve(moduleFactory);
    }
    const compilerProviders = compilerOptions.flatMap((option) => option.providers ?? []);
    if (compilerProviders.length === 0) {
      return Promise.resolve(moduleFactory);
    }
    const compiler = getCompilerFacade({
      usage: 0,
      kind: "NgModule",
      type: moduleType
    });
    const compilerInjector = Injector.create({ providers: compilerProviders });
    const resourceLoader = compilerInjector.get(compiler.ResourceLoader);
    return resolveComponentResources((url) => Promise.resolve(resourceLoader.get(url))).then(() => moduleFactory);
  }
  function _lastDefined(args) {
    for (let i = args.length - 1; i >= 0; i--) {
      if (args[i] !== void 0) {
        return args[i];
      }
    }
    return void 0;
  }
  function internalProvideZoneChangeDetection(ngZoneFactory) {
    return [
      { provide: NgZone, useFactory: ngZoneFactory },
      {
        provide: ENVIRONMENT_INITIALIZER,
        multi: true,
        useFactory: () => {
          const ngZoneChangeDetectionScheduler = inject(NgZoneChangeDetectionScheduler, { optional: true });
          if ((typeof ngDevMode === "undefined" || ngDevMode) && ngZoneChangeDetectionScheduler === null) {
            throw new RuntimeError(402, `A required Injectable was not found in the dependency injection tree. If you are bootstrapping an NgModule, make sure that the \`BrowserModule\` is imported.`);
          }
          return () => ngZoneChangeDetectionScheduler.initialize();
        }
      },
      {
        provide: ENVIRONMENT_INITIALIZER,
        multi: true,
        useFactory: () => {
          const service = inject(ZoneStablePendingTask);
          return () => {
            service.initialize();
          };
        }
      },
      { provide: INTERNAL_APPLICATION_ERROR_HANDLER, useFactory: ngZoneApplicationErrorHandlerFactory }
    ];
  }
  function ngZoneApplicationErrorHandlerFactory() {
    const zone = inject(NgZone);
    const userErrorHandler = inject(ErrorHandler);
    return (e2) => zone.runOutsideAngular(() => userErrorHandler.handleError(e2));
  }
  function provideZoneChangeDetection(options) {
    const zoneProviders = internalProvideZoneChangeDetection(() => new NgZone(getNgZoneOptions(options)));
    return makeEnvironmentProviders([
      typeof ngDevMode === "undefined" || ngDevMode ? { provide: PROVIDED_NG_ZONE, useValue: true } : [],
      zoneProviders
    ]);
  }
  function getNgZoneOptions(options) {
    return {
      enableLongStackTrace: typeof ngDevMode === "undefined" ? false : !!ngDevMode,
      shouldCoalesceEventChangeDetection: options?.eventCoalescing ?? false,
      shouldCoalesceRunChangeDetection: options?.runCoalescing ?? false
    };
  }
  function getGlobalLocale() {
    if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode && typeof goog !== "undefined" && goog.LOCALE !== "en") {
      return goog.LOCALE;
    } else {
      return typeof $localize !== "undefined" && $localize.locale || DEFAULT_LOCALE_ID;
    }
  }
  function createPlatform(injector) {
    if (_platformInjector && !_platformInjector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
      throw new RuntimeError(400, ngDevMode && "There can be only one platform. Destroy the previous one to create a new one.");
    }
    publishDefaultGlobalUtils();
    publishSignalConfiguration();
    _platformInjector = injector;
    const platform = injector.get(PlatformRef);
    runPlatformInitializers(injector);
    return platform;
  }
  function createPlatformFactory(parentPlatformFactory, name, providers = []) {
    const desc = `Platform: ${name}`;
    const marker = new InjectionToken(desc);
    return (extraProviders = []) => {
      let platform = getPlatform();
      if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
        const platformProviders = [...providers, ...extraProviders, { provide: marker, useValue: true }];
        if (parentPlatformFactory) {
          parentPlatformFactory(platformProviders);
        } else {
          createPlatform(createPlatformInjector(platformProviders, desc));
        }
      }
      return assertPlatform(marker);
    };
  }
  function createPlatformInjector(providers = [], name) {
    return Injector.create({
      name,
      providers: [
        { provide: INJECTOR_SCOPE, useValue: "platform" },
        { provide: PLATFORM_DESTROY_LISTENERS, useValue: /* @__PURE__ */ new Set([() => _platformInjector = null]) },
        ...providers
      ]
    });
  }
  function assertPlatform(requiredToken) {
    const platform = getPlatform();
    if (!platform) {
      throw new RuntimeError(401, ngDevMode && "No platform exists!");
    }
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !platform.injector.get(requiredToken, null)) {
      throw new RuntimeError(400, "A platform with a different configuration has been created. Please destroy it first.");
    }
    return platform;
  }
  function getPlatform() {
    return _platformInjector?.get(PlatformRef) ?? null;
  }
  function destroyPlatform() {
    getPlatform()?.destroy();
  }
  function createOrReusePlatformInjector(providers = []) {
    if (_platformInjector)
      return _platformInjector;
    publishDefaultGlobalUtils();
    const injector = createPlatformInjector(providers);
    _platformInjector = injector;
    publishSignalConfiguration();
    runPlatformInitializers(injector);
    return injector;
  }
  function runPlatformInitializers(injector) {
    const inits = injector.get(PLATFORM_INITIALIZER, null);
    inits?.forEach((init) => init());
  }
  function isDevMode() {
    return typeof ngDevMode === "undefined" || !!ngDevMode;
  }
  function enableProdMode() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      _global["ngDevMode"] = false;
    }
  }
  function getModuleFactory(id) {
    const type = getRegisteredNgModuleType(id);
    if (!type)
      throw noModuleError(id);
    return new NgModuleFactory(type);
  }
  function getNgModuleById(id) {
    const type = getRegisteredNgModuleType(id);
    if (!type)
      throw noModuleError(id);
    return type;
  }
  function noModuleError(id) {
    return new Error(`No module with ID ${id} loaded`);
  }
  function injectChangeDetectorRef(flags) {
    return createViewRef(
      getCurrentTNode(),
      getLView(),
      (flags & 16) === 16
      /* InternalInjectFlags.ForPipe */
    );
  }
  function createViewRef(tNode, lView, isPipe2) {
    if (isComponentHost(tNode) && !isPipe2) {
      const componentView = getComponentLViewByIndex(tNode.index, lView);
      return new ViewRef$1(componentView, componentView);
    } else if (tNode.type & (3 | 12 | 32)) {
      const hostComponentView = lView[DECLARATION_COMPONENT_VIEW];
      return new ViewRef$1(hostComponentView, lView);
    }
    return null;
  }
  function asNativeElements(debugEls) {
    return debugEls.map((el) => el.nativeElement);
  }
  function copyDomProperties(element2, properties) {
    if (element2) {
      let obj = Object.getPrototypeOf(element2);
      const NodePrototype = Node.prototype;
      while (obj !== null && obj !== NodePrototype) {
        const descriptors = Object.getOwnPropertyDescriptors(obj);
        for (let key in descriptors) {
          if (!key.startsWith("__") && !key.startsWith("on")) {
            const value = element2[key];
            if (isPrimitiveValue(value)) {
              properties[key] = value;
            }
          }
        }
        obj = Object.getPrototypeOf(obj);
      }
    }
  }
  function isPrimitiveValue(value) {
    return typeof value === "string" || typeof value === "boolean" || typeof value === "number" || value === null;
  }
  function _queryAll(parentElement, predicate, matches2, elementsOnly) {
    const context2 = getLContext(parentElement.nativeNode);
    const lView = context2 ? context2.lView : null;
    if (lView !== null) {
      const parentTNode = lView[TVIEW].data[context2.nodeIndex];
      _queryNodeChildren(parentTNode, lView, predicate, matches2, elementsOnly, parentElement.nativeNode);
    } else {
      _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches2, elementsOnly);
    }
  }
  function _queryNodeChildren(tNode, lView, predicate, matches2, elementsOnly, rootNativeNode) {
    ngDevMode && assertTNodeForLView(tNode, lView);
    const nativeNode = getNativeByTNodeOrNull(tNode, lView);
    if (tNode.type & (3 | 8)) {
      _addQueryMatch(nativeNode, predicate, matches2, elementsOnly, rootNativeNode);
      if (isComponentHost(tNode)) {
        const componentView = getComponentLViewByIndex(tNode.index, lView);
        if (componentView && componentView[TVIEW].firstChild) {
          _queryNodeChildren(componentView[TVIEW].firstChild, componentView, predicate, matches2, elementsOnly, rootNativeNode);
        }
      } else {
        if (tNode.child) {
          _queryNodeChildren(tNode.child, lView, predicate, matches2, elementsOnly, rootNativeNode);
        }
        nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches2, elementsOnly);
      }
      const nodeOrContainer = lView[tNode.index];
      if (isLContainer(nodeOrContainer)) {
        _queryNodeChildrenInContainer(nodeOrContainer, predicate, matches2, elementsOnly, rootNativeNode);
      }
    } else if (tNode.type & 4) {
      const lContainer = lView[tNode.index];
      _addQueryMatch(lContainer[NATIVE], predicate, matches2, elementsOnly, rootNativeNode);
      _queryNodeChildrenInContainer(lContainer, predicate, matches2, elementsOnly, rootNativeNode);
    } else if (tNode.type & 16) {
      const componentView = lView[DECLARATION_COMPONENT_VIEW];
      const componentHost = componentView[T_HOST];
      const head = componentHost.projection[tNode.projection];
      if (Array.isArray(head)) {
        for (let nativeNode2 of head) {
          _addQueryMatch(nativeNode2, predicate, matches2, elementsOnly, rootNativeNode);
        }
      } else if (head) {
        const nextLView = componentView[PARENT];
        const nextTNode = nextLView[TVIEW].data[head.index];
        _queryNodeChildren(nextTNode, nextLView, predicate, matches2, elementsOnly, rootNativeNode);
      }
    } else if (tNode.child) {
      _queryNodeChildren(tNode.child, lView, predicate, matches2, elementsOnly, rootNativeNode);
    }
    if (rootNativeNode !== nativeNode) {
      const nextTNode = tNode.flags & 2 ? tNode.projectionNext : tNode.next;
      if (nextTNode) {
        _queryNodeChildren(nextTNode, lView, predicate, matches2, elementsOnly, rootNativeNode);
      }
    }
  }
  function _queryNodeChildrenInContainer(lContainer, predicate, matches2, elementsOnly, rootNativeNode) {
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
      const childView = lContainer[i];
      const firstChild = childView[TVIEW].firstChild;
      if (firstChild) {
        _queryNodeChildren(firstChild, childView, predicate, matches2, elementsOnly, rootNativeNode);
      }
    }
  }
  function _addQueryMatch(nativeNode, predicate, matches2, elementsOnly, rootNativeNode) {
    if (rootNativeNode !== nativeNode) {
      const debugNode = getDebugNode(nativeNode);
      if (!debugNode) {
        return;
      }
      if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches2.indexOf(debugNode) === -1) {
        matches2.push(debugNode);
      } else if (!elementsOnly && predicate(debugNode) && matches2.indexOf(debugNode) === -1) {
        matches2.push(debugNode);
      }
    }
  }
  function _queryNativeNodeDescendants(parentNode, predicate, matches2, elementsOnly) {
    const nodes = parentNode.childNodes;
    const length = nodes.length;
    for (let i = 0; i < length; i++) {
      const node = nodes[i];
      const debugNode = getDebugNode(node);
      if (debugNode) {
        if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches2.indexOf(debugNode) === -1) {
          matches2.push(debugNode);
        } else if (!elementsOnly && predicate(debugNode) && matches2.indexOf(debugNode) === -1) {
          matches2.push(debugNode);
        }
        _queryNativeNodeDescendants(node, predicate, matches2, elementsOnly);
      }
    }
  }
  function collectPropertyBindings(properties, tNode, lView, tData) {
    let bindingIndexes = tNode.propertyBindings;
    if (bindingIndexes !== null) {
      for (let i = 0; i < bindingIndexes.length; i++) {
        const bindingIndex = bindingIndexes[i];
        const propMetadata = tData[bindingIndex];
        const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);
        const propertyName = metadataParts[0];
        if (metadataParts.length > 1) {
          let value = metadataParts[1];
          for (let j = 1; j < metadataParts.length - 1; j++) {
            value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];
          }
          properties[propertyName] = value;
        } else {
          properties[propertyName] = lView[bindingIndex];
        }
      }
    }
  }
  function getDebugNode(nativeNode) {
    if (nativeNode instanceof Node) {
      if (!nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY)) {
        nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ? new DebugElement(nativeNode) : new DebugNode(nativeNode);
      }
      return nativeNode[NG_DEBUG_PROPERTY];
    }
    return null;
  }
  function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
    const previousIndex = item.previousIndex;
    if (previousIndex === null)
      return previousIndex;
    let moveOffset = 0;
    if (moveOffsets && previousIndex < moveOffsets.length) {
      moveOffset = moveOffsets[previousIndex];
    }
    return previousIndex + addRemoveOffset + moveOffset;
  }
  function defaultIterableDiffersFactory() {
    return new IterableDiffers([new DefaultIterableDifferFactory()]);
  }
  function getTypeNameForDebugging(type) {
    return type["name"] || typeof type;
  }
  function defaultKeyValueDiffersFactory() {
    return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);
  }
  function setAlternateWeakRefImpl(impl) {
  }
  function logLazyLCPWarning(src) {
    console.warn(formatRuntimeError(-913, `An image with src ${src} is the Largest Contentful Paint (LCP) element but was given a "loading" value of "lazy", which can negatively impact application loading performance. This warning can be addressed by changing the loading value of the LCP image to "eager", or by using the NgOptimizedImage directive's prioritization utilities. For more information about addressing or disabling this warning, see https://angular.io/errors/NG0913`));
  }
  function logOversizedImageWarning(src) {
    console.warn(formatRuntimeError(-913, `An image with src ${src} has intrinsic file dimensions much larger than its rendered size. This can negatively impact application loading performance. For more information about addressing or disabling this warning, see https://angular.io/errors/NG0913`));
  }
  function internalCreateApplication(config4) {
    try {
      const { rootComponent, appProviders, platformProviders } = config4;
      if ((typeof ngDevMode === "undefined" || ngDevMode) && rootComponent !== void 0) {
        assertStandaloneComponentType(rootComponent);
      }
      const platformInjector = createOrReusePlatformInjector(platformProviders);
      const allAppProviders = [
        provideZoneChangeDetection(),
        ...appProviders || []
      ];
      const adapter = new EnvironmentNgModuleRefAdapter({
        providers: allAppProviders,
        parent: platformInjector,
        debugName: typeof ngDevMode === "undefined" || ngDevMode ? "Environment Injector" : "",
        // We skip environment initializers because we need to run them inside the NgZone, which
        // happens after we get the NgZone instance from the Injector.
        runEnvironmentInitializers: false
      });
      const envInjector = adapter.injector;
      const ngZone = envInjector.get(NgZone);
      return ngZone.run(() => {
        envInjector.resolveInjectorInitializers();
        const exceptionHandler = envInjector.get(ErrorHandler, null);
        if ((typeof ngDevMode === "undefined" || ngDevMode) && !exceptionHandler) {
          throw new RuntimeError(402, "No `ErrorHandler` found in the Dependency Injection tree.");
        }
        let onErrorSubscription;
        ngZone.runOutsideAngular(() => {
          onErrorSubscription = ngZone.onError.subscribe({
            next: (error2) => {
              exceptionHandler.handleError(error2);
            }
          });
        });
        const destroyListener = () => envInjector.destroy();
        const onPlatformDestroyListeners = platformInjector.get(PLATFORM_DESTROY_LISTENERS);
        onPlatformDestroyListeners.add(destroyListener);
        envInjector.onDestroy(() => {
          onErrorSubscription.unsubscribe();
          onPlatformDestroyListeners.delete(destroyListener);
        });
        return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {
          const initStatus = envInjector.get(ApplicationInitStatus);
          initStatus.runInitializers();
          return initStatus.donePromise.then(() => {
            const localeId = envInjector.get(LOCALE_ID, DEFAULT_LOCALE_ID);
            setLocaleId(localeId || DEFAULT_LOCALE_ID);
            const appRef = envInjector.get(ApplicationRef);
            if (rootComponent !== void 0) {
              appRef.bootstrap(rootComponent);
            }
            if (typeof ngDevMode === "undefined" || ngDevMode) {
              const imagePerformanceService = envInjector.get(ImagePerformanceWarning);
              imagePerformanceService.start();
            }
            return appRef;
          });
        });
      });
    } catch (e2) {
      return Promise.reject(e2);
    }
  }
  function provideZonelessChangeDetection() {
    return makeEnvironmentProviders([
      { provide: ChangeDetectionScheduler, useExisting: ChangeDetectionSchedulerImpl },
      { provide: NgZone, useClass: NoopNgZone }
    ]);
  }
  function getDeferBlocks(lView, deferBlocks) {
    const tView = lView[TVIEW];
    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
      if (isLContainer(lView[i])) {
        const lContainer = lView[i];
        const isLast = i === tView.bindingStartIndex - 1;
        if (!isLast) {
          const tNode = tView.data[i];
          const tDetails = getTDeferBlockDetails(tView, tNode);
          if (isTDeferBlockDetails(tDetails)) {
            deferBlocks.push({ lContainer, lView, tNode, tDetails });
            continue;
          }
        }
        for (let i2 = CONTAINER_HEADER_OFFSET; i2 < lContainer.length; i2++) {
          getDeferBlocks(lContainer[i2], deferBlocks);
        }
      } else if (isLView(lView[i])) {
        getDeferBlocks(lView[i], deferBlocks);
      }
    }
  }
  function enableHydrationRuntimeSupport() {
    if (!isHydrationSupportEnabled) {
      isHydrationSupportEnabled = true;
      enableRetrieveHydrationInfoImpl();
      enableLocateOrCreateElementNodeImpl();
      enableLocateOrCreateTextNodeImpl();
      enableLocateOrCreateElementContainerNodeImpl();
      enableLocateOrCreateContainerAnchorImpl();
      enableLocateOrCreateContainerRefImpl();
      enableFindMatchingDehydratedViewImpl();
      enableApplyRootElementTransformImpl();
      enableLocateOrCreateI18nNodeImpl();
    }
  }
  function printHydrationStats(injector) {
    const console2 = injector.get(Console);
    const message = `Angular hydrated ${ngDevMode.hydratedComponents} component(s) and ${ngDevMode.hydratedNodes} node(s), ${ngDevMode.componentsSkippedHydration} component(s) were skipped. Learn more at https://angular.io/guide/hydration.`;
    console2.log(message);
  }
  function whenStableWithTimeout(appRef, injector) {
    const whenStablePromise = whenStable(appRef);
    if (typeof ngDevMode !== "undefined" && ngDevMode) {
      const timeoutTime = APPLICATION_IS_STABLE_TIMEOUT;
      const console2 = injector.get(Console);
      const ngZone = injector.get(NgZone);
      const timeoutId = ngZone.runOutsideAngular(() => {
        return setTimeout(() => logWarningOnStableTimedout(timeoutTime, console2), timeoutTime);
      });
      whenStablePromise.finally(() => clearTimeout(timeoutId));
    }
    return whenStablePromise;
  }
  function withDomHydration() {
    return makeEnvironmentProviders([
      {
        provide: IS_HYDRATION_DOM_REUSE_ENABLED,
        useFactory: () => {
          let isEnabled = true;
          if (isPlatformBrowser()) {
            const transferState = inject(TransferState, { optional: true });
            isEnabled = !!transferState?.get(NGH_DATA_KEY, null);
            if (!isEnabled && (typeof ngDevMode !== "undefined" && ngDevMode)) {
              const console2 = inject(Console);
              const message = formatRuntimeError(-505, "Angular hydration was requested on the client, but there was no serialized information present in the server response, thus hydration was not enabled. Make sure the `provideClientHydration()` is included into the list of providers in the server part of the application configuration.");
              console2.warn(message);
            }
          }
          if (isEnabled) {
            performanceMarkFeature("NgHydration");
          }
          return isEnabled;
        }
      },
      {
        provide: ENVIRONMENT_INITIALIZER,
        useValue: () => {
          _isI18nHydrationSupportEnabled = !!inject(IS_I18N_HYDRATION_ENABLED, { optional: true });
          if (isPlatformBrowser() && inject(IS_HYDRATION_DOM_REUSE_ENABLED)) {
            verifySsrContentsIntegrity();
            enableHydrationRuntimeSupport();
          }
        },
        multi: true
      },
      {
        provide: PRESERVE_HOST_CONTENT,
        useFactory: () => {
          return isPlatformBrowser() && inject(IS_HYDRATION_DOM_REUSE_ENABLED);
        }
      },
      {
        provide: APP_BOOTSTRAP_LISTENER,
        useFactory: () => {
          if (isPlatformBrowser() && inject(IS_HYDRATION_DOM_REUSE_ENABLED)) {
            const appRef = inject(ApplicationRef);
            const injector = inject(Injector);
            return () => {
              whenStableWithTimeout(appRef, injector).then(() => {
                cleanupDehydratedViews(appRef);
                if (typeof ngDevMode !== "undefined" && ngDevMode) {
                  printHydrationStats(injector);
                }
              });
            };
          }
          return () => {
          };
        },
        multi: true
      }
    ]);
  }
  function withI18nHydration() {
    return makeEnvironmentProviders([
      {
        provide: IS_I18N_HYDRATION_ENABLED,
        useValue: true
      }
    ]);
  }
  function isI18nHydrationSupportEnabled() {
    return _isI18nHydrationSupportEnabled;
  }
  function logWarningOnStableTimedout(time, console2) {
    const message = `Angular hydration expected the ApplicationRef.isStable() to emit \`true\`, but it didn't happen within ${time}ms. Angular hydration logic depends on the application becoming stable as a signal to complete hydration process.`;
    console2.warn(formatRuntimeError(-506, message));
  }
  function verifySsrContentsIntegrity() {
    const doc3 = getDocument();
    let hydrationMarker;
    for (const node of doc3.body.childNodes) {
      if (node.nodeType === Node.COMMENT_NODE && node.textContent?.trim() === SSR_CONTENT_INTEGRITY_MARKER) {
        hydrationMarker = node;
        break;
      }
    }
    if (!hydrationMarker) {
      throw new RuntimeError(-507, typeof ngDevMode !== "undefined" && ngDevMode && "Angular hydration logic detected that HTML content of this page was modified after it was produced during server side rendering. Make sure that there are no optimizations that remove comment nodes from HTML enabled on your CDN. Angular hydration relies on HTML produced by the server, including whitespaces and comment nodes.");
    }
  }
  function getSsrId(tView) {
    if (!tView.ssrId) {
      tView.ssrId = `t${tViewSsrId++}`;
    }
    return tView.ssrId;
  }
  function calcNumRootNodes(tView, lView, tNode) {
    const rootNodes = [];
    collectNativeNodes(tView, lView, tNode, rootNodes);
    return rootNodes.length;
  }
  function calcNumRootNodesInLContainer(lContainer) {
    const rootNodes = [];
    collectNativeNodesInLContainer(lContainer, rootNodes);
    return rootNodes.length;
  }
  function annotateComponentLViewForHydration(lView, context2) {
    const hostElement = lView[HOST];
    if (hostElement && !hostElement.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {
      return annotateHostElementForHydration(hostElement, lView, context2);
    }
    return null;
  }
  function annotateLContainerForHydration(lContainer, context2) {
    const componentLView = unwrapLView(lContainer[HOST]);
    const componentLViewNghIndex = annotateComponentLViewForHydration(componentLView, context2);
    const hostElement = unwrapRNode(componentLView[HOST]);
    const rootLView = lContainer[PARENT];
    const rootLViewNghIndex = annotateHostElementForHydration(hostElement, rootLView, context2);
    const renderer = componentLView[RENDERER];
    const finalIndex = `${componentLViewNghIndex}|${rootLViewNghIndex}`;
    renderer.setAttribute(hostElement, NGH_ATTR_NAME, finalIndex);
  }
  function annotateForHydration(appRef, doc3) {
    const serializedViewCollection = new SerializedViewCollection();
    const corruptedTextNodes = /* @__PURE__ */ new Map();
    const viewRefs = appRef._views;
    for (const viewRef of viewRefs) {
      const lNode = getLNodeForHydration(viewRef);
      if (lNode !== null) {
        const context2 = {
          serializedViewCollection,
          corruptedTextNodes
        };
        if (isLContainer(lNode)) {
          annotateLContainerForHydration(lNode, context2);
        } else {
          annotateComponentLViewForHydration(lNode, context2);
        }
        insertCorruptedTextNodeMarkers(corruptedTextNodes, doc3);
      }
    }
    const serializedViews = serializedViewCollection.getAll();
    const transferState = appRef.injector.get(TransferState);
    transferState.set(NGH_DATA_KEY, serializedViews);
  }
  function serializeLContainer(lContainer, context2) {
    const views = [];
    let lastViewAsString = "";
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
      let childLView = lContainer[i];
      let template2;
      let numRootNodes;
      let serializedView;
      if (isRootView(childLView)) {
        childLView = childLView[HEADER_OFFSET];
        if (isLContainer(childLView)) {
          numRootNodes = calcNumRootNodesInLContainer(childLView) + 1;
          annotateLContainerForHydration(childLView, context2);
          const componentLView = unwrapLView(childLView[HOST]);
          serializedView = {
            [TEMPLATE_ID]: componentLView[TVIEW].ssrId,
            [NUM_ROOT_NODES]: numRootNodes
          };
        }
      }
      if (!serializedView) {
        const childTView = childLView[TVIEW];
        if (childTView.type === 1) {
          template2 = childTView.ssrId;
          numRootNodes = 1;
        } else {
          template2 = getSsrId(childTView);
          numRootNodes = calcNumRootNodes(childTView, childLView, childTView.firstChild);
        }
        serializedView = {
          [TEMPLATE_ID]: template2,
          [NUM_ROOT_NODES]: numRootNodes,
          ...serializeLView(lContainer[i], context2)
        };
      }
      const currentViewAsString = JSON.stringify(serializedView);
      if (views.length > 0 && currentViewAsString === lastViewAsString) {
        const previousView = views[views.length - 1];
        previousView[MULTIPLIER] ??= 1;
        previousView[MULTIPLIER]++;
      } else {
        lastViewAsString = currentViewAsString;
        views.push(serializedView);
      }
    }
    return views;
  }
  function appendSerializedNodePath(ngh, tNode, lView) {
    const noOffsetIndex = tNode.index - HEADER_OFFSET;
    ngh[NODES] ??= {};
    ngh[NODES][noOffsetIndex] = calcPathForNode(tNode, lView);
  }
  function appendDisconnectedNodeIndex(ngh, tNode) {
    const noOffsetIndex = tNode.index - HEADER_OFFSET;
    ngh[DISCONNECTED_NODES] ??= [];
    if (!ngh[DISCONNECTED_NODES].includes(noOffsetIndex)) {
      ngh[DISCONNECTED_NODES].push(noOffsetIndex);
    }
  }
  function serializeLView(lView, context2) {
    const ngh = {};
    const tView = lView[TVIEW];
    for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
      const tNode = tView.data[i];
      const noOffsetIndex = i - HEADER_OFFSET;
      if (!isTNodeShape(tNode)) {
        continue;
      }
      if (isDisconnectedNode(tNode, lView) && isContentProjectedNode(tNode)) {
        appendDisconnectedNodeIndex(ngh, tNode);
        continue;
      }
      if (Array.isArray(tNode.projection)) {
        for (const projectionHeadTNode of tNode.projection) {
          if (!projectionHeadTNode)
            continue;
          if (!Array.isArray(projectionHeadTNode)) {
            if (!isProjectionTNode(projectionHeadTNode) && !isInSkipHydrationBlock(projectionHeadTNode)) {
              if (isDisconnectedNode(projectionHeadTNode, lView)) {
                appendDisconnectedNodeIndex(ngh, projectionHeadTNode);
              } else {
                appendSerializedNodePath(ngh, projectionHeadTNode, lView);
              }
            }
          } else {
            throw unsupportedProjectionOfDomNodes(unwrapRNode(lView[i]));
          }
        }
      }
      conditionallyAnnotateNodePath(ngh, tNode, lView);
      if (isLContainer(lView[i])) {
        const embeddedTView = tNode.tView;
        if (embeddedTView !== null) {
          ngh[TEMPLATES] ??= {};
          ngh[TEMPLATES][noOffsetIndex] = getSsrId(embeddedTView);
        }
        const hostNode = lView[i][HOST];
        if (Array.isArray(hostNode)) {
          const targetNode = unwrapRNode(hostNode);
          if (!targetNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {
            annotateHostElementForHydration(targetNode, hostNode, context2);
          }
        }
        ngh[CONTAINERS] ??= {};
        ngh[CONTAINERS][noOffsetIndex] = serializeLContainer(lView[i], context2);
      } else if (Array.isArray(lView[i])) {
        const targetNode = unwrapRNode(lView[i][HOST]);
        if (!targetNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME)) {
          annotateHostElementForHydration(targetNode, lView[i], context2);
        }
      } else {
        if (tNode.type & 8) {
          ngh[ELEMENT_CONTAINERS] ??= {};
          ngh[ELEMENT_CONTAINERS][noOffsetIndex] = calcNumRootNodes(tView, lView, tNode.child);
        } else if (tNode.type & 16) {
          let nextTNode = tNode.next;
          while (nextTNode !== null && nextTNode.type & 16) {
            nextTNode = nextTNode.next;
          }
          if (nextTNode && !isInSkipHydrationBlock(nextTNode)) {
            appendSerializedNodePath(ngh, nextTNode, lView);
          }
        } else {
          if (tNode.type & 1) {
            const rNode = unwrapRNode(lView[i]);
            if (rNode.textContent === "") {
              context2.corruptedTextNodes.set(
                rNode,
                "ngetn"
                /* TextNodeMarker.EmptyNode */
              );
            } else if (rNode.nextSibling?.nodeType === Node.TEXT_NODE) {
              context2.corruptedTextNodes.set(
                rNode,
                "ngtns"
                /* TextNodeMarker.Separator */
              );
            }
          }
        }
      }
    }
    return ngh;
  }
  function conditionallyAnnotateNodePath(ngh, tNode, lView) {
    if (tNode.projectionNext && tNode.projectionNext !== tNode.next && !isInSkipHydrationBlock(tNode.projectionNext)) {
      appendSerializedNodePath(ngh, tNode.projectionNext, lView);
    }
    if (tNode.prev === null && tNode.parent !== null && isDisconnectedNode(tNode.parent, lView) && !isDisconnectedNode(tNode, lView)) {
      appendSerializedNodePath(ngh, tNode, lView);
    }
  }
  function componentUsesShadowDomEncapsulation(lView) {
    const instance = lView[CONTEXT];
    return instance?.constructor ? getComponentDef(instance.constructor)?.encapsulation === ViewEncapsulation$1.ShadowDom : false;
  }
  function annotateHostElementForHydration(element2, lView, context2) {
    const renderer = lView[RENDERER];
    if (hasI18n(lView) && !isI18nHydrationSupportEnabled() || componentUsesShadowDomEncapsulation(lView)) {
      renderer.setAttribute(element2, SKIP_HYDRATION_ATTR_NAME, "");
      return null;
    } else {
      const ngh = serializeLView(lView, context2);
      const index = context2.serializedViewCollection.add(ngh);
      renderer.setAttribute(element2, NGH_ATTR_NAME, index.toString());
      return index;
    }
  }
  function insertCorruptedTextNodeMarkers(corruptedTextNodes, doc3) {
    for (const [textNode, marker] of corruptedTextNodes) {
      textNode.after(doc3.createComment(marker));
    }
  }
  function isContentProjectedNode(tNode) {
    let currentTNode = tNode;
    while (currentTNode != null) {
      if (isComponentHost(currentTNode)) {
        return true;
      }
      currentTNode = currentTNode.parent;
    }
    return false;
  }
  function queueStateUpdate(callback, options) {
    !options && assertInInjectionContext(queueStateUpdate);
    const injector = options?.injector ?? inject(Injector);
    const appRef = injector.get(ApplicationRef);
    let executed = false;
    const runCallbackOnce = () => {
      if (executed || appRef.destroyed)
        return;
      executed = true;
      callback();
    };
    internalAfterNextRender(runCallbackOnce, { injector, runOnServer: true });
    queueMicrotask(runCallbackOnce);
  }
  function booleanAttribute(value) {
    return typeof value === "boolean" ? value : value != null && value !== "false";
  }
  function numberAttribute(value, fallbackValue = NaN) {
    const isNumberValue = !isNaN(parseFloat(value)) && !isNaN(Number(value));
    return isNumberValue ? Number(value) : fallbackValue;
  }
  function \u0275\u0275ngDeclareDirective(decl) {
    const compiler = getCompilerFacade({ usage: 1, kind: "directive", type: decl.type });
    return compiler.compileDirectiveDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275fac.js`, decl);
  }
  function \u0275\u0275ngDeclareClassMetadata(decl) {
    setClassMetadata(decl.type, decl.decorators, decl.ctorParameters ?? null, decl.propDecorators ?? null);
  }
  function \u0275\u0275ngDeclareComponent(decl) {
    const compiler = getCompilerFacade({ usage: 1, kind: "component", type: decl.type });
    return compiler.compileComponentDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275cmp.js`, decl);
  }
  function \u0275\u0275ngDeclareFactory(decl) {
    const compiler = getCompilerFacade({
      usage: 1,
      kind: getFactoryKind(decl.target),
      type: decl.type
    });
    return compiler.compileFactoryDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275fac.js`, decl);
  }
  function getFactoryKind(target) {
    switch (target) {
      case FactoryTarget.Directive:
        return "directive";
      case FactoryTarget.Component:
        return "component";
      case FactoryTarget.Injectable:
        return "injectable";
      case FactoryTarget.Pipe:
        return "pipe";
      case FactoryTarget.NgModule:
        return "NgModule";
    }
  }
  function \u0275\u0275ngDeclareInjectable(decl) {
    const compiler = getCompilerFacade({ usage: 1, kind: "injectable", type: decl.type });
    return compiler.compileInjectableDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275prov.js`, decl);
  }
  function \u0275\u0275ngDeclareInjector(decl) {
    const compiler = getCompilerFacade({ usage: 1, kind: "NgModule", type: decl.type });
    return compiler.compileInjectorDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275inj.js`, decl);
  }
  function \u0275\u0275ngDeclareNgModule(decl) {
    const compiler = getCompilerFacade({ usage: 1, kind: "NgModule", type: decl.type });
    return compiler.compileNgModuleDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275mod.js`, decl);
  }
  function \u0275\u0275ngDeclarePipe(decl) {
    const compiler = getCompilerFacade({ usage: 1, kind: "pipe", type: decl.type });
    return compiler.compilePipeDeclaration(angularCoreEnv, `ng:///${decl.type.name}/\u0275pipe.js`, decl);
  }
  function computed(computation, options) {
    performanceMarkFeature("NgSignals");
    const getter = createComputed(computation);
    if (options?.equal) {
      getter[SIGNAL].equal = options.equal;
    }
    if (ngDevMode) {
      getter.toString = () => `[Computed: ${getter()}]`;
    }
    return getter;
  }
  function untracked(nonReactiveReadsFn) {
    const prevConsumer = setActiveConsumer(null);
    try {
      return nonReactiveReadsFn();
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
  function effect(effectFn, options) {
    performanceMarkFeature("NgSignals");
    ngDevMode && assertNotInReactiveContext(effect, "Call `effect` outside of a reactive context. For example, schedule the effect inside the component constructor.");
    !options?.injector && assertInInjectionContext(effect);
    const injector = options?.injector ?? inject(Injector);
    const destroyRef = options?.manualCleanup !== true ? injector.get(DestroyRef) : null;
    const handle = new EffectHandle(injector.get(APP_EFFECT_SCHEDULER), effectFn, typeof Zone === "undefined" ? null : Zone.current, destroyRef, injector, options?.allowSignalWrites ?? false);
    const cdr = injector.get(ChangeDetectorRef, null, { optional: true });
    if (!cdr || !(cdr._lView[FLAGS] & 8)) {
      handle.watcher.notify();
    } else {
      (cdr._lView[EFFECTS_TO_SCHEDULE] ??= []).push(handle.watcher.notify);
    }
    return handle;
  }
  function createComponent(component, options) {
    ngDevMode && assertComponentDef(component);
    const componentDef = getComponentDef(component);
    const elementInjector = options.elementInjector || getNullInjector();
    const factory = new ComponentFactory(componentDef);
    return factory.create(elementInjector, options.projectableNodes, options.hostElement, options.environmentInjector);
  }
  function reflectComponentType(component) {
    const componentDef = getComponentDef(component);
    if (!componentDef)
      return null;
    const factory = new ComponentFactory(componentDef);
    return {
      get selector() {
        return factory.selector;
      },
      get type() {
        return factory.componentType;
      },
      get inputs() {
        return factory.inputs;
      },
      get outputs() {
        return factory.outputs;
      },
      get ngContentSelectors() {
        return factory.ngContentSelectors;
      },
      get isStandalone() {
        return componentDef.standalone;
      },
      get isSignal() {
        return componentDef.signals;
      }
    };
  }
  function mergeApplicationConfig(...configs) {
    return configs.reduce((prev, curr) => {
      return Object.assign(prev, curr, { providers: [...prev.providers, ...curr.providers] });
    }, { providers: [] });
  }
  var ERROR_DETAILS_PAGE_BASE_URL, XSS_SECURITY_URL, RuntimeError, REQUIRED_UNSET_VALUE, INPUT_SIGNAL_NODE, \u0275INPUT_SIGNAL_BRAND_WRITE_TYPE, ANNOTATIONS, PARAMETERS, PROP_METADATA, _global, __forward_ref__, defineInjectable, NG_PROV_DEF, NG_INJ_DEF, NG_INJECTABLE_DEF, NG_INJECTOR_DEF, InjectionToken, _injectorProfilerContext, injectorProfilerCallback, setInjectorProfiler, NG_COMP_DEF, NG_DIR_DEF, NG_PIPE_DEF, NG_MOD_DEF, NG_FACTORY_DEF, NG_ELEMENT_ID, NG_ENV_ID, InjectFlags, _injectImplementation, _THROW_IF_NOT_FOUND, THROW_IF_NOT_FOUND, DI_DECORATOR_FLAG, NG_TEMP_TOKEN_PATH, NG_TOKEN_PATH, NEW_LINE, NO_NEW_LINE, SOURCE, _currentInjector, Inject, Optional, Self, SkipSelf, Host, EMPTY_OBJ, EMPTY_ARRAY, ENVIRONMENT_INITIALIZER, INJECTOR$1, INJECTOR_DEF_TYPES, NullInjector, ChangeDetectionStrategy, ViewEncapsulation$1, InputFlags, NG_TEMPLATE_SELECTOR, GENERATED_COMP_IDS, USE_VALUE$1, INJECTOR_SCOPE, NOT_YET, CIRCULAR, NULL_INJECTOR, EnvironmentInjector, R3Injector, FactoryTarget, R3TemplateDependencyKind, ViewEncapsulation, angularCoreDiEnv, Type, ES5_DELEGATE_CTOR, ES2015_INHERITED_CLASS, ES2015_INHERITED_CLASS_WITH_CTOR, ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR, ReflectionCapabilities, HOST, TVIEW, FLAGS, PARENT, NEXT, T_HOST, HYDRATION, CLEANUP, CONTEXT, INJECTOR, ENVIRONMENT, RENDERER, CHILD_HEAD, CHILD_TAIL, DECLARATION_VIEW, DECLARATION_COMPONENT_VIEW, DECLARATION_LCONTAINER, PREORDER_HOOK_FLAGS, QUERIES, ID, EMBEDDED_VIEW_INJECTOR, ON_DESTROY_HOOKS, EFFECTS_TO_SCHEDULE, REACTIVE_TEMPLATE_CONSUMER, HEADER_OFFSET, TYPE, DEHYDRATED_VIEWS, NATIVE, VIEW_REFS, MOVED_VIEWS, CONTAINER_HEADER_OFFSET, LContainerFlags, SimpleChange, SIMPLE_CHANGES_STORE, profilerCallback, setProfiler, profiler, SVG_NAMESPACE, MATH_ML_NAMESPACE, _ensureDirtyViewsAreAlwaysReachable, instructionState, _isInCheckNoChangesMode, leaveDI, _wasLastNodeCreated, NO_PARENT_INJECTOR, NodeInjectorFactory, includeViewProviders, BLOOM_SIZE, BLOOM_MASK, BLOOM_BUCKET_BITS, nextNgElementId, NOT_FOUND, NodeInjector, Attribute, _reflect, USE_VALUE, Injectable, Injector, HostAttributeToken, ERROR_ORIGINAL_ERROR, ErrorHandler, INTERNAL_APPLICATION_ERROR_HANDLER, DestroyRef, NodeInjectorDestroyRef, OutputEmitterRef, input, ElementRef, EventEmitter_, EventEmitter, QueryList, SKIP_HYDRATION_ATTR_NAME, SKIP_HYDRATION_ATTR_NAME_LOWER_CASE, TRACKED_LVIEWS, uniqueIdCounter, LContext, MONKEY_PATCH_KEY_NAME, DOCUMENT, APP_ID, DEFAULT_APP_ID, PLATFORM_INITIALIZER, PLATFORM_ID, PACKAGE_ROOT_URL, ANIMATION_MODULE_TYPE, CSP_NONCE, IMAGE_CONFIG_DEFAULTS, IMAGE_CONFIG, TransferState, REFERENCE_NODE_HOST, REFERENCE_NODE_BODY, NodeNavigationStep, ELEMENT_CONTAINERS, TEMPLATES, CONTAINERS, MULTIPLIER, NUM_ROOT_NODES, TEMPLATE_ID, NODES, DISCONNECTED_NODES, TRANSFER_STATE_TOKEN_ID, NGH_DATA_KEY, NGH_ATTR_NAME, SSR_CONTENT_INTEGRITY_MARKER, _retrieveHydrationInfoImpl, HydrationStatus, HYDRATION_INFO_KEY, IS_HYDRATION_DOM_REUSE_ENABLED, PRESERVE_HOST_CONTENT_DEFAULT, PRESERVE_HOST_CONTENT, IS_I18N_HYDRATION_ENABLED, policy$1, policy, SafeValueImpl, SafeHtmlImpl, SafeStyleImpl, SafeScriptImpl, SafeUrlImpl, SafeResourceUrlImpl, DOMParserHelper, InertDocumentHelper, SAFE_URL_PATTERN, VOID_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS, OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, VALID_ELEMENTS, URI_ATTRS, HTML_ATTRS, ARIA_ATTRS, VALID_ATTRS, SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS, SanitizingHtmlSerializer, SURROGATE_PAIR_REGEXP, NON_ALPHANUMERIC_REGEXP, inertBodyHelper, SecurityContext, COMMENT_DISALLOWED, COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED, CAMEL_CASE_REGEXP, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, shouldThrowErrorOnUnknownElement, shouldThrowErrorOnUnknownProperty, KNOWN_CONTROL_FLOW_DIRECTIVES, INTERPOLATION_DELIMITER, VALUE_STRING_LENGTH_LIMIT, RendererStyleFlags2, _icuContainerIterate, _getInsertInFrontOfRNodeWithI18n, _processI18nInsertBefore, NO_CHANGE, _applyRootElementTransformImpl, freeConsumers, REACTIVE_LVIEW_CONSUMER_NODE, MAXIMUM_REFRESH_RERUNS, ViewRef$1, TemplateRef, ViewEngineTemplateRef, R3TemplateRef, AT_THIS_LOCATION, internalAttrs, REF_EXTRACTOR_REGEXP, _findMatchingDehydratedViewImpl, ChangeDetectionScheduler, ComponentRef$1, ComponentFactory$1, ERROR_COMPONENT, _NullComponentFactoryResolver, ComponentFactoryResolver$1, RendererFactory2, Renderer2, Sanitizer, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, markedFeatures, AsyncStackTaggingZoneSpec, NgZone, EMPTY_PAYLOAD, NoopNgZone, AfterRenderPhase, NOOP_AFTER_RENDER_REF, AfterRenderCallback, AfterRenderCallbackHandlerImpl, AfterRenderEventManager, USE_RUNTIME_DEPS_TRACKER_FOR_JIT, DepsTracker, depsTracker, ComponentFactoryResolver, ChainedInjector, ComponentFactory, ComponentRef, ViewContainerRef, VE_ViewContainerRef, R3ViewContainerRef, _locateOrCreateAnchorNode, _populateDehydratedViewsInLContainer, LQuery_, LQueries_, TQueryMetadata_, TQueries_, TQuery_, viewChild, contentChild, model, emitDistinctChangesOnlyDefaultValue, Query, ContentChildren, ContentChild, ViewChildren, ViewChild, componentResourceResolutionQueue, componentDefPendingResolution, modules, checkForDuplicateNgModules, COPY_DIRECTIVE_FIELDS, COPY_COMPONENT_FIELDS, NgModuleRef$1, NgModuleFactory$1, createNgModuleRef, NgModuleRef, NgModuleFactory, EnvironmentNgModuleRefAdapter, CachedInjectorService, ASYNC_COMPONENT_METADATA_FN, PendingTasks, _locateOrCreateContainerAnchor, DeferDependenciesLoadingState, MINIMUM_SLOT, LOADING_AFTER_SLOT, DeferBlockState, DeferBlockInternalState, NEXT_DEFER_BLOCK_STATE, DEFER_BLOCK_STATE, STATE_IS_FROZEN_UNTIL, LOADING_AFTER_CLEANUP_FN, TRIGGER_CLEANUP_FNS, PREFETCH_TRIGGER_CLEANUP_FNS, DeferBlockBehavior, eventListenerOptions, hoverTriggers, interactionTriggers, viewportTriggers, interactionEventNames, hoverEventNames, intersectionObserver, observedViewportElements, DeferEventEntry, _requestIdleCallback, _cancelIdleCallback, IdleScheduler, TimerScheduler, DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, DEFER_BLOCK_CONFIG, applyDeferBlockStateWithSchedulingImpl, parserState, LiveCollection, UniqueValueMultiKeyMap, RepeaterContext, RepeaterMetadata, LiveCollectionLContainerImpl, _locateOrCreateElementNode, _locateOrCreateElementContainerNode, u, localeEn, LOCALE_DATA, LocaleDataIndex, pluralMapping, DEFAULT_LOCALE_ID, USD_CURRENCY_CODE, ELEMENT_MARKER, ICU_MARKER, I18nCreateOpCode, LOCALE_ID$1, changeMask, changeMaskCounter, _locateOrCreateNode, OpCodeParser, BINDING_REGEXP, ICU_REGEXP, NESTED_ICU, ICU_BLOCK_REGEXP, MARKER, SUBTEMPLATE_REGEXP, PH_REGEXP, NGSP_UNICODE_REGEXP, ROOT_TEMPLATE_ID, PP_MULTI_VALUE_PLACEHOLDERS_REGEXP, PP_PLACEHOLDERS_REGEXP, PP_ICU_VARS_REGEXP, PP_ICU_PLACEHOLDERS_REGEXP, PP_ICUS_REGEXP, PP_CLOSE_TEMPLATE_REGEXP, PP_TEMPLATE_ID_REGEXP, _locateOrCreateTextNode, StandaloneService, angularCoreEnv, jitOptions, moduleQueue, flushingModuleQueue, ownerNgModule, verifiedNgModule, compilationDepth, LIFECYCLE_HOOKS, Directive, Component, Pipe, Input, Output, HostBinding, HostListener, NgModule, Version, VERSION, Console, DIDebugData, frameworkDIDebugData, GLOBAL_PUBLISH_EXPANDO_KEY, globalUtilsFunctions, _published, TESTABILITY, TESTABILITY_GETTER, Testability, TestabilityRegistry, _testabilityGetter, APP_INITIALIZER, ApplicationInitStatus, APP_BOOTSTRAP_LISTENER, NgProbeToken, ApplicationRef, whenStableStore, ModuleWithComponentFactories, Compiler, COMPILER_OPTIONS, CompilerFactory, NgZoneChangeDetectionScheduler, PROVIDED_NG_ZONE, ZoneStablePendingTask, LOCALE_ID, DEFAULT_CURRENCY_CODE, TRANSLATIONS, TRANSLATIONS_FORMAT, MissingTranslationStrategy, PLATFORM_DESTROY_LISTENERS, PlatformRef, _platformInjector, ALLOW_MULTIPLE_PLATFORMS, ChangeDetectorRef, ViewRef, EmbeddedViewRef, DebugEventListener, DebugNode, DebugElement, NG_DEBUG_PROPERTY, DefaultIterableDifferFactory, trackByIdentity, DefaultIterableDiffer, IterableChangeRecord_, _DuplicateItemRecordList, _DuplicateMap, DefaultKeyValueDifferFactory, DefaultKeyValueDiffer, KeyValueChangeRecord_, IterableDiffers, KeyValueDiffers, keyValDiff, iterableDiff, defaultIterableDiffers, defaultKeyValueDiffers, platformCore, ApplicationModule, SCAN_DELAY, OVERSIZED_IMAGE_TOLERANCE, ImagePerformanceWarning, ChangeDetectionSchedulerImpl, isHydrationSupportEnabled, _isI18nHydrationSupportEnabled, APPLICATION_IS_STABLE_TIMEOUT, SerializedViewCollection, tViewSsrId, APP_EFFECT_SCHEDULER, EffectScheduler, ZoneAwareEffectScheduler, EffectHandle;
  var init_core = __esm({
    "node_modules/@angular/core/fesm2022/core.mjs"() {
      init_signals();
      init_esm5();
      init_operators();
      ERROR_DETAILS_PAGE_BASE_URL = "https://angular.io/errors";
      XSS_SECURITY_URL = "https://g.co/ng/security#xss";
      RuntimeError = class extends Error {
        constructor(code, message) {
          super(formatRuntimeError(code, message));
          this.code = code;
        }
      };
      REQUIRED_UNSET_VALUE = /* @__PURE__ */ Symbol("InputSignalNode#UNSET");
      INPUT_SIGNAL_NODE = /* @__PURE__ */ (() => {
        return {
          ...SIGNAL_NODE,
          transformFn: void 0,
          applyValueToInputSignal(node, value) {
            signalSetFn(node, value);
          }
        };
      })();
      \u0275INPUT_SIGNAL_BRAND_WRITE_TYPE = /* @__PURE__ */ Symbol();
      ANNOTATIONS = "__annotations__";
      PARAMETERS = "__parameters__";
      PROP_METADATA = "__prop__metadata__";
      _global = globalThis;
      __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });
      defineInjectable = \u0275\u0275defineInjectable;
      NG_PROV_DEF = getClosureSafeProperty({ \u0275prov: getClosureSafeProperty });
      NG_INJ_DEF = getClosureSafeProperty({ \u0275inj: getClosureSafeProperty });
      NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });
      NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });
      InjectionToken = class {
        /**
         * @param _desc   Description for the token,
         *                used only for debugging purposes,
         *                it should but does not need to be unique
         * @param options Options for the token's usage, as described above
         */
        constructor(_desc, options) {
          this._desc = _desc;
          this.ngMetadataName = "InjectionToken";
          this.\u0275prov = void 0;
          if (typeof options == "number") {
            (typeof ngDevMode === "undefined" || ngDevMode) && assertLessThan(options, 0, "Only negative numbers are supported here");
            this.__NG_ELEMENT_ID__ = options;
          } else if (options !== void 0) {
            this.\u0275prov = \u0275\u0275defineInjectable({
              token: this,
              providedIn: options.providedIn || "root",
              factory: options.factory
            });
          }
        }
        /**
         * @internal
         */
        get multi() {
          return this;
        }
        toString() {
          return `InjectionToken ${this._desc}`;
        }
      };
      injectorProfilerCallback = null;
      setInjectorProfiler = (injectorProfiler2) => {
        !ngDevMode && throwError2("setInjectorProfiler should never be called in production mode");
        injectorProfilerCallback = injectorProfiler2;
      };
      NG_COMP_DEF = getClosureSafeProperty({ \u0275cmp: getClosureSafeProperty });
      NG_DIR_DEF = getClosureSafeProperty({ \u0275dir: getClosureSafeProperty });
      NG_PIPE_DEF = getClosureSafeProperty({ \u0275pipe: getClosureSafeProperty });
      NG_MOD_DEF = getClosureSafeProperty({ \u0275mod: getClosureSafeProperty });
      NG_FACTORY_DEF = getClosureSafeProperty({ \u0275fac: getClosureSafeProperty });
      NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });
      NG_ENV_ID = getClosureSafeProperty({ __NG_ENV_ID__: getClosureSafeProperty });
      (function(InjectFlags2) {
        InjectFlags2[InjectFlags2["Default"] = 0] = "Default";
        InjectFlags2[InjectFlags2["Host"] = 1] = "Host";
        InjectFlags2[InjectFlags2["Self"] = 2] = "Self";
        InjectFlags2[InjectFlags2["SkipSelf"] = 4] = "SkipSelf";
        InjectFlags2[InjectFlags2["Optional"] = 8] = "Optional";
      })(InjectFlags || (InjectFlags = {}));
      _THROW_IF_NOT_FOUND = {};
      THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
      DI_DECORATOR_FLAG = "__NG_DI_FLAG__";
      NG_TEMP_TOKEN_PATH = "ngTempTokenPath";
      NG_TOKEN_PATH = "ngTokenPath";
      NEW_LINE = /\n/gm;
      NO_NEW_LINE = "\u0275";
      SOURCE = "__source";
      _currentInjector = void 0;
      Inject = attachInjectFlag(
        // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.
        // tslint:disable-next-line: no-toplevel-property-access
        makeParamDecorator("Inject", (token) => ({ token })),
        -1
        /* DecoratorFlags.Inject */
      );
      Optional = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      attachInjectFlag(
        makeParamDecorator("Optional"),
        8
        /* InternalInjectFlags.Optional */
      );
      Self = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      attachInjectFlag(
        makeParamDecorator("Self"),
        2
        /* InternalInjectFlags.Self */
      );
      SkipSelf = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      attachInjectFlag(
        makeParamDecorator("SkipSelf"),
        4
        /* InternalInjectFlags.SkipSelf */
      );
      Host = // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
      // tslint:disable-next-line: no-toplevel-property-access
      attachInjectFlag(
        makeParamDecorator("Host"),
        1
        /* InternalInjectFlags.Host */
      );
      EMPTY_OBJ = {};
      EMPTY_ARRAY = [];
      if ((typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode()) {
        Object.freeze(EMPTY_OBJ);
        Object.freeze(EMPTY_ARRAY);
      }
      ENVIRONMENT_INITIALIZER = new InjectionToken(ngDevMode ? "ENVIRONMENT_INITIALIZER" : "");
      INJECTOR$1 = new InjectionToken(
        ngDevMode ? "INJECTOR" : "",
        // Disable tslint because this is const enum which gets inlined not top level prop access.
        // tslint:disable-next-line: no-toplevel-property-access
        -1
        /* InjectorMarkers.Injector */
      );
      INJECTOR_DEF_TYPES = new InjectionToken(ngDevMode ? "INJECTOR_DEF_TYPES" : "");
      NullInjector = class {
        get(token, notFoundValue = THROW_IF_NOT_FOUND) {
          if (notFoundValue === THROW_IF_NOT_FOUND) {
            const error2 = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);
            error2.name = "NullInjectorError";
            throw error2;
          }
          return notFoundValue;
        }
      };
      (function(ChangeDetectionStrategy3) {
        ChangeDetectionStrategy3[ChangeDetectionStrategy3["OnPush"] = 0] = "OnPush";
        ChangeDetectionStrategy3[ChangeDetectionStrategy3["Default"] = 1] = "Default";
      })(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
      (function(ViewEncapsulation3) {
        ViewEncapsulation3[ViewEncapsulation3["Emulated"] = 0] = "Emulated";
        ViewEncapsulation3[ViewEncapsulation3["None"] = 2] = "None";
        ViewEncapsulation3[ViewEncapsulation3["ShadowDom"] = 3] = "ShadowDom";
      })(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));
      (function(InputFlags3) {
        InputFlags3[InputFlags3["None"] = 0] = "None";
        InputFlags3[InputFlags3["SignalBased"] = 1] = "SignalBased";
        InputFlags3[InputFlags3["HasDecoratorInputTransform"] = 2] = "HasDecoratorInputTransform";
      })(InputFlags || (InputFlags = {}));
      NG_TEMPLATE_SELECTOR = "ng-template";
      GENERATED_COMP_IDS = /* @__PURE__ */ new Map();
      USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });
      INJECTOR_SCOPE = new InjectionToken(ngDevMode ? "Set Injector scope." : "");
      NOT_YET = {};
      CIRCULAR = {};
      NULL_INJECTOR = void 0;
      EnvironmentInjector = class {
      };
      R3Injector = class extends EnvironmentInjector {
        /**
         * Flag indicating that this injector was previously destroyed.
         */
        get destroyed() {
          return this._destroyed;
        }
        constructor(providers, parent, source, scopes) {
          super();
          this.parent = parent;
          this.source = source;
          this.scopes = scopes;
          this.records = /* @__PURE__ */ new Map();
          this._ngOnDestroyHooks = /* @__PURE__ */ new Set();
          this._onDestroyHooks = [];
          this._destroyed = false;
          forEachSingleProvider(providers, (provider) => this.processProvider(provider));
          this.records.set(INJECTOR$1, makeRecord(void 0, this));
          if (scopes.has("environment")) {
            this.records.set(EnvironmentInjector, makeRecord(void 0, this));
          }
          const record = this.records.get(INJECTOR_SCOPE);
          if (record != null && typeof record.value === "string") {
            this.scopes.add(record.value);
          }
          this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES, EMPTY_ARRAY, InjectFlags.Self));
        }
        /**
         * Destroy the injector and release references to every instance or provider associated with it.
         *
         * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
         * hook was found.
         */
        destroy() {
          this.assertNotDestroyed();
          this._destroyed = true;
          const prevConsumer = setActiveConsumer(null);
          try {
            for (const service of this._ngOnDestroyHooks) {
              service.ngOnDestroy();
            }
            const onDestroyHooks = this._onDestroyHooks;
            this._onDestroyHooks = [];
            for (const hook of onDestroyHooks) {
              hook();
            }
          } finally {
            this.records.clear();
            this._ngOnDestroyHooks.clear();
            this.injectorDefTypes.clear();
            setActiveConsumer(prevConsumer);
          }
        }
        onDestroy(callback) {
          this.assertNotDestroyed();
          this._onDestroyHooks.push(callback);
          return () => this.removeOnDestroy(callback);
        }
        runInContext(fn2) {
          this.assertNotDestroyed();
          const previousInjector = setCurrentInjector(this);
          const previousInjectImplementation = setInjectImplementation(void 0);
          let prevInjectContext;
          if (ngDevMode) {
            prevInjectContext = setInjectorProfilerContext({ injector: this, token: null });
          }
          try {
            return fn2();
          } finally {
            setCurrentInjector(previousInjector);
            setInjectImplementation(previousInjectImplementation);
            ngDevMode && setInjectorProfilerContext(prevInjectContext);
          }
        }
        get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {
          this.assertNotDestroyed();
          if (token.hasOwnProperty(NG_ENV_ID)) {
            return token[NG_ENV_ID](this);
          }
          flags = convertToBitFlags(flags);
          let prevInjectContext;
          if (ngDevMode) {
            prevInjectContext = setInjectorProfilerContext({ injector: this, token });
          }
          const previousInjector = setCurrentInjector(this);
          const previousInjectImplementation = setInjectImplementation(void 0);
          try {
            if (!(flags & InjectFlags.SkipSelf)) {
              let record = this.records.get(token);
              if (record === void 0) {
                const def = couldBeInjectableType(token) && getInjectableDef(token);
                if (def && this.injectableDefInScope(def)) {
                  if (ngDevMode) {
                    runInInjectorProfilerContext(this, token, () => {
                      emitProviderConfiguredEvent(token);
                    });
                  }
                  record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);
                } else {
                  record = null;
                }
                this.records.set(token, record);
              }
              if (record != null) {
                return this.hydrate(token, record);
              }
            }
            const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();
            notFoundValue = flags & InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;
            return nextInjector.get(token, notFoundValue);
          } catch (e2) {
            if (e2.name === "NullInjectorError") {
              const path = e2[NG_TEMP_TOKEN_PATH] = e2[NG_TEMP_TOKEN_PATH] || [];
              path.unshift(stringify(token));
              if (previousInjector) {
                throw e2;
              } else {
                return catchInjectorError(e2, token, "R3InjectorError", this.source);
              }
            } else {
              throw e2;
            }
          } finally {
            setInjectImplementation(previousInjectImplementation);
            setCurrentInjector(previousInjector);
            ngDevMode && setInjectorProfilerContext(prevInjectContext);
          }
        }
        /** @internal */
        resolveInjectorInitializers() {
          const prevConsumer = setActiveConsumer(null);
          const previousInjector = setCurrentInjector(this);
          const previousInjectImplementation = setInjectImplementation(void 0);
          let prevInjectContext;
          if (ngDevMode) {
            prevInjectContext = setInjectorProfilerContext({ injector: this, token: null });
          }
          try {
            const initializers = this.get(ENVIRONMENT_INITIALIZER, EMPTY_ARRAY, InjectFlags.Self);
            if (ngDevMode && !Array.isArray(initializers)) {
              throw new RuntimeError(-209, `Unexpected type of the \`ENVIRONMENT_INITIALIZER\` token value (expected an array, but got ${typeof initializers}). Please check that the \`ENVIRONMENT_INITIALIZER\` token is configured as a \`multi: true\` provider.`);
            }
            for (const initializer of initializers) {
              initializer();
            }
          } finally {
            setCurrentInjector(previousInjector);
            setInjectImplementation(previousInjectImplementation);
            ngDevMode && setInjectorProfilerContext(prevInjectContext);
            setActiveConsumer(prevConsumer);
          }
        }
        toString() {
          const tokens = [];
          const records = this.records;
          for (const token of records.keys()) {
            tokens.push(stringify(token));
          }
          return `R3Injector[${tokens.join(", ")}]`;
        }
        assertNotDestroyed() {
          if (this._destroyed) {
            throw new RuntimeError(205, ngDevMode && "Injector has already been destroyed.");
          }
        }
        /**
         * Process a `SingleProvider` and add it.
         */
        processProvider(provider) {
          provider = resolveForwardRef(provider);
          let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);
          const record = providerToRecord(provider);
          if (ngDevMode) {
            runInInjectorProfilerContext(this, token, () => {
              if (isValueProvider(provider)) {
                emitInstanceCreatedByInjectorEvent(provider.useValue);
              }
              emitProviderConfiguredEvent(provider);
            });
          }
          if (!isTypeProvider(provider) && provider.multi === true) {
            let multiRecord = this.records.get(token);
            if (multiRecord) {
              if (ngDevMode && multiRecord.multi === void 0) {
                throwMixedMultiProviderError();
              }
            } else {
              multiRecord = makeRecord(void 0, NOT_YET, true);
              multiRecord.factory = () => injectArgs(multiRecord.multi);
              this.records.set(token, multiRecord);
            }
            token = provider;
            multiRecord.multi.push(provider);
          } else {
            if (ngDevMode) {
              const existing = this.records.get(token);
              if (existing && existing.multi !== void 0) {
                throwMixedMultiProviderError();
              }
            }
          }
          this.records.set(token, record);
        }
        hydrate(token, record) {
          const prevConsumer = setActiveConsumer(null);
          try {
            if (ngDevMode && record.value === CIRCULAR) {
              throwCyclicDependencyError(stringify(token));
            } else if (record.value === NOT_YET) {
              record.value = CIRCULAR;
              if (ngDevMode) {
                runInInjectorProfilerContext(this, token, () => {
                  record.value = record.factory();
                  emitInstanceCreatedByInjectorEvent(record.value);
                });
              } else {
                record.value = record.factory();
              }
            }
            if (typeof record.value === "object" && record.value && hasOnDestroy(record.value)) {
              this._ngOnDestroyHooks.add(record.value);
            }
            return record.value;
          } finally {
            setActiveConsumer(prevConsumer);
          }
        }
        injectableDefInScope(def) {
          if (!def.providedIn) {
            return false;
          }
          const providedIn = resolveForwardRef(def.providedIn);
          if (typeof providedIn === "string") {
            return providedIn === "any" || this.scopes.has(providedIn);
          } else {
            return this.injectorDefTypes.has(providedIn);
          }
        }
        removeOnDestroy(callback) {
          const destroyCBIdx = this._onDestroyHooks.indexOf(callback);
          if (destroyCBIdx !== -1) {
            this._onDestroyHooks.splice(destroyCBIdx, 1);
          }
        }
      };
      (function(FactoryTarget3) {
        FactoryTarget3[FactoryTarget3["Directive"] = 0] = "Directive";
        FactoryTarget3[FactoryTarget3["Component"] = 1] = "Component";
        FactoryTarget3[FactoryTarget3["Injectable"] = 2] = "Injectable";
        FactoryTarget3[FactoryTarget3["Pipe"] = 3] = "Pipe";
        FactoryTarget3[FactoryTarget3["NgModule"] = 4] = "NgModule";
      })(FactoryTarget || (FactoryTarget = {}));
      (function(R3TemplateDependencyKind3) {
        R3TemplateDependencyKind3[R3TemplateDependencyKind3["Directive"] = 0] = "Directive";
        R3TemplateDependencyKind3[R3TemplateDependencyKind3["Pipe"] = 1] = "Pipe";
        R3TemplateDependencyKind3[R3TemplateDependencyKind3["NgModule"] = 2] = "NgModule";
      })(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));
      (function(ViewEncapsulation3) {
        ViewEncapsulation3[ViewEncapsulation3["Emulated"] = 0] = "Emulated";
        ViewEncapsulation3[ViewEncapsulation3["None"] = 2] = "None";
        ViewEncapsulation3[ViewEncapsulation3["ShadowDom"] = 3] = "ShadowDom";
      })(ViewEncapsulation || (ViewEncapsulation = {}));
      angularCoreDiEnv = {
        "\u0275\u0275defineInjectable": \u0275\u0275defineInjectable,
        "\u0275\u0275defineInjector": \u0275\u0275defineInjector,
        "\u0275\u0275inject": \u0275\u0275inject,
        "\u0275\u0275invalidFactoryDep": \u0275\u0275invalidFactoryDep,
        "resolveForwardRef": resolveForwardRef
      };
      Type = Function;
      ES5_DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\).*)\)/;
      ES2015_INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/;
      ES2015_INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/;
      ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{[^}]*super\(\.\.\.arguments\)/;
      ReflectionCapabilities = class {
        constructor(reflect) {
          this._reflect = reflect || _global["Reflect"];
        }
        factory(t) {
          return (...args) => new t(...args);
        }
        /** @internal */
        _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
          let result;
          if (typeof paramTypes === "undefined") {
            result = newArray(paramAnnotations.length);
          } else {
            result = newArray(paramTypes.length);
          }
          for (let i = 0; i < result.length; i++) {
            if (typeof paramTypes === "undefined") {
              result[i] = [];
            } else if (paramTypes[i] && paramTypes[i] != Object) {
              result[i] = [paramTypes[i]];
            } else {
              result[i] = [];
            }
            if (paramAnnotations && paramAnnotations[i] != null) {
              result[i] = result[i].concat(paramAnnotations[i]);
            }
          }
          return result;
        }
        _ownParameters(type, parentCtor) {
          const typeStr = type.toString();
          if (isDelegateCtor(typeStr)) {
            return null;
          }
          if (type.parameters && type.parameters !== parentCtor.parameters) {
            return type.parameters;
          }
          const tsickleCtorParams = type.ctorParameters;
          if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
            const ctorParameters = typeof tsickleCtorParams === "function" ? tsickleCtorParams() : tsickleCtorParams;
            const paramTypes2 = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);
            const paramAnnotations2 = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));
            return this._zipTypesAndAnnotations(paramTypes2, paramAnnotations2);
          }
          const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];
          const paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata("design:paramtypes", type);
          if (paramTypes || paramAnnotations) {
            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
          }
          return newArray(type.length);
        }
        parameters(type) {
          if (!isType(type)) {
            return [];
          }
          const parentCtor = getParentCtor(type);
          let parameters = this._ownParameters(type, parentCtor);
          if (!parameters && parentCtor !== Object) {
            parameters = this.parameters(parentCtor);
          }
          return parameters || [];
        }
        _ownAnnotations(typeOrFunc, parentCtor) {
          if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
            let annotations = typeOrFunc.annotations;
            if (typeof annotations === "function" && annotations.annotations) {
              annotations = annotations.annotations;
            }
            return annotations;
          }
          if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
          }
          if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
            return typeOrFunc[ANNOTATIONS];
          }
          return null;
        }
        annotations(typeOrFunc) {
          if (!isType(typeOrFunc)) {
            return [];
          }
          const parentCtor = getParentCtor(typeOrFunc);
          const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
          const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
          return parentAnnotations.concat(ownAnnotations);
        }
        _ownPropMetadata(typeOrFunc, parentCtor) {
          if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {
            let propMetadata = typeOrFunc.propMetadata;
            if (typeof propMetadata === "function" && propMetadata.propMetadata) {
              propMetadata = propMetadata.propMetadata;
            }
            return propMetadata;
          }
          if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {
            const propDecorators = typeOrFunc.propDecorators;
            const propMetadata = {};
            Object.keys(propDecorators).forEach((prop) => {
              propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
            });
            return propMetadata;
          }
          if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
            return typeOrFunc[PROP_METADATA];
          }
          return null;
        }
        propMetadata(typeOrFunc) {
          if (!isType(typeOrFunc)) {
            return {};
          }
          const parentCtor = getParentCtor(typeOrFunc);
          const propMetadata = {};
          if (parentCtor !== Object) {
            const parentPropMetadata = this.propMetadata(parentCtor);
            Object.keys(parentPropMetadata).forEach((propName) => {
              propMetadata[propName] = parentPropMetadata[propName];
            });
          }
          const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
          if (ownPropMetadata) {
            Object.keys(ownPropMetadata).forEach((propName) => {
              const decorators = [];
              if (propMetadata.hasOwnProperty(propName)) {
                decorators.push(...propMetadata[propName]);
              }
              decorators.push(...ownPropMetadata[propName]);
              propMetadata[propName] = decorators;
            });
          }
          return propMetadata;
        }
        ownPropMetadata(typeOrFunc) {
          if (!isType(typeOrFunc)) {
            return {};
          }
          return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};
        }
        hasLifecycleHook(type, lcProperty) {
          return type instanceof Type && lcProperty in type.prototype;
        }
      };
      HOST = 0;
      TVIEW = 1;
      FLAGS = 2;
      PARENT = 3;
      NEXT = 4;
      T_HOST = 5;
      HYDRATION = 6;
      CLEANUP = 7;
      CONTEXT = 8;
      INJECTOR = 9;
      ENVIRONMENT = 10;
      RENDERER = 11;
      CHILD_HEAD = 12;
      CHILD_TAIL = 13;
      DECLARATION_VIEW = 14;
      DECLARATION_COMPONENT_VIEW = 15;
      DECLARATION_LCONTAINER = 16;
      PREORDER_HOOK_FLAGS = 17;
      QUERIES = 18;
      ID = 19;
      EMBEDDED_VIEW_INJECTOR = 20;
      ON_DESTROY_HOOKS = 21;
      EFFECTS_TO_SCHEDULE = 22;
      REACTIVE_TEMPLATE_CONSUMER = 23;
      HEADER_OFFSET = 25;
      TYPE = 1;
      DEHYDRATED_VIEWS = 6;
      NATIVE = 7;
      VIEW_REFS = 8;
      MOVED_VIEWS = 9;
      CONTAINER_HEADER_OFFSET = 10;
      (function(LContainerFlags2) {
        LContainerFlags2[LContainerFlags2["None"] = 0] = "None";
        LContainerFlags2[LContainerFlags2["HasTransplantedViews"] = 2] = "HasTransplantedViews";
      })(LContainerFlags || (LContainerFlags = {}));
      SimpleChange = class {
        constructor(previousValue, currentValue, firstChange) {
          this.previousValue = previousValue;
          this.currentValue = currentValue;
          this.firstChange = firstChange;
        }
        /**
         * Check whether the new value is the first value assigned.
         */
        isFirstChange() {
          return this.firstChange;
        }
      };
      \u0275\u0275NgOnChangesFeature.ngInherit = true;
      SIMPLE_CHANGES_STORE = "__ngSimpleChanges__";
      profilerCallback = null;
      setProfiler = (profiler2) => {
        profilerCallback = profiler2;
      };
      profiler = function(event, instance, hookOrListener) {
        if (profilerCallback != null) {
          profilerCallback(event, instance, hookOrListener);
        }
      };
      SVG_NAMESPACE = "svg";
      MATH_ML_NAMESPACE = "math";
      _ensureDirtyViewsAreAlwaysReachable = false;
      instructionState = {
        lFrame: createLFrame(null),
        bindingsEnabled: true,
        skipHydrationRootTNode: null
      };
      _isInCheckNoChangesMode = false;
      leaveDI = leaveViewLight;
      _wasLastNodeCreated = true;
      NO_PARENT_INJECTOR = -1;
      NodeInjectorFactory = class {
        constructor(factory, isViewProvider, injectImplementation) {
          this.factory = factory;
          this.resolving = false;
          ngDevMode && assertDefined(factory, "Factory not specified");
          ngDevMode && assertEqual(typeof factory, "function", "Expected factory function.");
          this.canSeeViewProviders = isViewProvider;
          this.injectImpl = injectImplementation;
        }
      };
      includeViewProviders = true;
      BLOOM_SIZE = 256;
      BLOOM_MASK = BLOOM_SIZE - 1;
      BLOOM_BUCKET_BITS = 5;
      nextNgElementId = 0;
      NOT_FOUND = {};
      NodeInjector = class {
        constructor(_tNode, _lView) {
          this._tNode = _tNode;
          this._lView = _lView;
        }
        get(token, notFoundValue, flags) {
          return getOrCreateInjectable(this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);
        }
      };
      Attribute = makeParamDecorator("Attribute", (attributeName) => ({ attributeName, __NG_ELEMENT_ID__: () => \u0275\u0275injectAttribute(attributeName) }));
      _reflect = null;
      USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });
      Injectable = makeDecorator("Injectable", void 0, void 0, void 0, (type, meta) => compileInjectable(type, meta));
      Injector = class _Injector {
        static {
          this.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;
        }
        static {
          this.NULL = /* @__PURE__ */ new NullInjector();
        }
        static create(options, parent) {
          if (Array.isArray(options)) {
            return createInjector({ name: "" }, parent, options, "");
          } else {
            const name = options.name ?? "";
            return createInjector({ name }, options.parent, options.providers, name);
          }
        }
        static {
          this.\u0275prov = \u0275\u0275defineInjectable({
            token: _Injector,
            providedIn: "any",
            factory: () => \u0275\u0275inject(INJECTOR$1)
          });
        }
        static {
          this.__NG_ELEMENT_ID__ = -1;
        }
      };
      HostAttributeToken = class {
        constructor(attributeName) {
          this.attributeName = attributeName;
          this.__NG_ELEMENT_ID__ = () => \u0275\u0275injectAttribute(this.attributeName);
        }
        toString() {
          return `HostAttributeToken ${this.attributeName}`;
        }
      };
      ERROR_ORIGINAL_ERROR = "ngOriginalError";
      ErrorHandler = class {
        constructor() {
          this._console = console;
        }
        handleError(error2) {
          const originalError = this._findOriginalError(error2);
          this._console.error("ERROR", error2);
          if (originalError) {
            this._console.error("ORIGINAL ERROR", originalError);
          }
        }
        /** @internal */
        _findOriginalError(error2) {
          let e2 = error2 && getOriginalError(error2);
          while (e2 && getOriginalError(e2)) {
            e2 = getOriginalError(e2);
          }
          return e2 || null;
        }
      };
      INTERNAL_APPLICATION_ERROR_HANDLER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "internal error handler" : "", {
        providedIn: "root",
        factory: () => {
          const userErrorHandler = inject(ErrorHandler);
          return userErrorHandler.handleError.bind(void 0);
        }
      });
      DestroyRef = class {
        static {
          this.__NG_ELEMENT_ID__ = injectDestroyRef;
        }
        static {
          this.__NG_ENV_ID__ = (injector) => injector;
        }
      };
      NodeInjectorDestroyRef = class extends DestroyRef {
        constructor(_lView) {
          super();
          this._lView = _lView;
        }
        onDestroy(callback) {
          storeLViewOnDestroy(this._lView, callback);
          return () => removeLViewOnDestroy(this._lView, callback);
        }
      };
      OutputEmitterRef = class {
        constructor() {
          this.destroyed = false;
          this.listeners = null;
          this.errorHandler = inject(ErrorHandler, { optional: true });
          this.destroyRef = inject(DestroyRef);
          this.destroyRef.onDestroy(() => {
            this.destroyed = true;
            this.listeners = null;
          });
        }
        subscribe(callback) {
          if (this.destroyed) {
            throw new RuntimeError(953, ngDevMode && "Unexpected subscription to destroyed `OutputRef`. The owning directive/component is destroyed.");
          }
          (this.listeners ??= []).push(callback);
          return {
            unsubscribe: () => {
              const idx = this.listeners?.indexOf(callback);
              if (idx !== void 0 && idx !== -1) {
                this.listeners?.splice(idx, 1);
              }
            }
          };
        }
        /** Emits a new value to the output. */
        emit(value) {
          if (this.destroyed) {
            throw new RuntimeError(953, ngDevMode && "Unexpected emit for destroyed `OutputRef`. The owning directive/component is destroyed.");
          }
          if (this.listeners === null) {
            return;
          }
          const previousConsumer = setActiveConsumer(null);
          try {
            for (const listenerFn of this.listeners) {
              try {
                listenerFn(value);
              } catch (err2) {
                this.errorHandler?.handleError(err2);
              }
            }
          } finally {
            setActiveConsumer(previousConsumer);
          }
        }
      };
      input = (() => {
        inputFunction.required = inputRequiredFunction;
        return inputFunction;
      })();
      ElementRef = class {
        constructor(nativeElement) {
          this.nativeElement = nativeElement;
        }
        static {
          this.__NG_ELEMENT_ID__ = injectElementRef;
        }
      };
      EventEmitter_ = class extends Subject {
        constructor(isAsync = false) {
          super();
          this.destroyRef = void 0;
          this.__isAsync = isAsync;
          if (isInInjectionContext()) {
            this.destroyRef = inject(DestroyRef, { optional: true }) ?? void 0;
          }
        }
        emit(value) {
          const prevConsumer = setActiveConsumer(null);
          try {
            super.next(value);
          } finally {
            setActiveConsumer(prevConsumer);
          }
        }
        subscribe(observerOrNext, error2, complete) {
          let nextFn = observerOrNext;
          let errorFn = error2 || (() => null);
          let completeFn = complete;
          if (observerOrNext && typeof observerOrNext === "object") {
            const observer = observerOrNext;
            nextFn = observer.next?.bind(observer);
            errorFn = observer.error?.bind(observer);
            completeFn = observer.complete?.bind(observer);
          }
          if (this.__isAsync) {
            errorFn = _wrapInTimeout(errorFn);
            if (nextFn) {
              nextFn = _wrapInTimeout(nextFn);
            }
            if (completeFn) {
              completeFn = _wrapInTimeout(completeFn);
            }
          }
          const sink = super.subscribe({ next: nextFn, error: errorFn, complete: completeFn });
          if (observerOrNext instanceof Subscription) {
            observerOrNext.add(sink);
          }
          return sink;
        }
      };
      EventEmitter = EventEmitter_;
      QueryList = class _QueryList {
        static {
          Symbol.iterator;
        }
        /**
         * Returns `Observable` of `QueryList` notifying the subscriber of changes.
         */
        get changes() {
          return this._changes ??= new EventEmitter();
        }
        /**
         * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change
         *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in
         *     the same result)
         */
        constructor(_emitDistinctChangesOnly = false) {
          this._emitDistinctChangesOnly = _emitDistinctChangesOnly;
          this.dirty = true;
          this._onDirty = void 0;
          this._results = [];
          this._changesDetected = false;
          this._changes = void 0;
          this.length = 0;
          this.first = void 0;
          this.last = void 0;
          const proto = _QueryList.prototype;
          if (!proto[Symbol.iterator])
            proto[Symbol.iterator] = symbolIterator;
        }
        /**
         * Returns the QueryList entry at `index`.
         */
        get(index) {
          return this._results[index];
        }
        /**
         * See
         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
         */
        map(fn2) {
          return this._results.map(fn2);
        }
        filter(fn2) {
          return this._results.filter(fn2);
        }
        /**
         * See
         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
         */
        find(fn2) {
          return this._results.find(fn2);
        }
        /**
         * See
         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
         */
        reduce(fn2, init) {
          return this._results.reduce(fn2, init);
        }
        /**
         * See
         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
         */
        forEach(fn2) {
          this._results.forEach(fn2);
        }
        /**
         * See
         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
         */
        some(fn2) {
          return this._results.some(fn2);
        }
        /**
         * Returns a copy of the internal results list as an Array.
         */
        toArray() {
          return this._results.slice();
        }
        toString() {
          return this._results.toString();
        }
        /**
         * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that
         * on change detection, it will not notify of changes to the queries, unless a new change
         * occurs.
         *
         * @param resultsTree The query results to store
         * @param identityAccessor Optional function for extracting stable object identity from a value
         *    in the array. This function is executed for each element of the query result list while
         *    comparing current query list with the new one (provided as a first argument of the `reset`
         *    function) to detect if the lists are different. If the function is not provided, elements
         *    are compared as is (without any pre-processing).
         */
        reset(resultsTree, identityAccessor) {
          this.dirty = false;
          const newResultFlat = flatten(resultsTree);
          if (this._changesDetected = !arrayEquals(this._results, newResultFlat, identityAccessor)) {
            this._results = newResultFlat;
            this.length = newResultFlat.length;
            this.last = newResultFlat[this.length - 1];
            this.first = newResultFlat[0];
          }
        }
        /**
         * Triggers a change event by emitting on the `changes` {@link EventEmitter}.
         */
        notifyOnChanges() {
          if (this._changes !== void 0 && (this._changesDetected || !this._emitDistinctChangesOnly))
            this._changes.emit(this);
        }
        /** @internal */
        onDirty(cb) {
          this._onDirty = cb;
        }
        /** internal */
        setDirty() {
          this.dirty = true;
          this._onDirty?.();
        }
        /** internal */
        destroy() {
          if (this._changes !== void 0) {
            this._changes.complete();
            this._changes.unsubscribe();
          }
        }
      };
      SKIP_HYDRATION_ATTR_NAME = "ngSkipHydration";
      SKIP_HYDRATION_ATTR_NAME_LOWER_CASE = "ngskiphydration";
      TRACKED_LVIEWS = /* @__PURE__ */ new Map();
      uniqueIdCounter = 0;
      LContext = class {
        /** Component's parent view data. */
        get lView() {
          return getLViewById(this.lViewId);
        }
        constructor(lViewId, nodeIndex, native) {
          this.lViewId = lViewId;
          this.nodeIndex = nodeIndex;
          this.native = native;
        }
      };
      MONKEY_PATCH_KEY_NAME = "__ngContext__";
      DOCUMENT = void 0;
      APP_ID = new InjectionToken(ngDevMode ? "AppId" : "", {
        providedIn: "root",
        factory: () => DEFAULT_APP_ID
      });
      DEFAULT_APP_ID = "ng";
      PLATFORM_INITIALIZER = new InjectionToken(ngDevMode ? "Platform Initializer" : "");
      PLATFORM_ID = new InjectionToken(ngDevMode ? "Platform ID" : "", {
        providedIn: "platform",
        factory: () => "unknown"
        // set a default platform name, when none set explicitly
      });
      PACKAGE_ROOT_URL = new InjectionToken(ngDevMode ? "Application Packages Root URL" : "");
      ANIMATION_MODULE_TYPE = new InjectionToken(ngDevMode ? "AnimationModuleType" : "");
      CSP_NONCE = new InjectionToken(ngDevMode ? "CSP nonce" : "", {
        providedIn: "root",
        factory: () => {
          return getDocument().body?.querySelector("[ngCspNonce]")?.getAttribute("ngCspNonce") || null;
        }
      });
      IMAGE_CONFIG_DEFAULTS = {
        breakpoints: [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840],
        placeholderResolution: 30,
        disableImageSizeWarning: false,
        disableImageLazyLoadWarning: false
      };
      IMAGE_CONFIG = new InjectionToken(ngDevMode ? "ImageConfig" : "", { providedIn: "root", factory: () => IMAGE_CONFIG_DEFAULTS });
      TransferState = class _TransferState {
        constructor() {
          this.store = {};
          this.onSerializeCallbacks = {};
        }
        static {
          this.\u0275prov = /** @pureOrBreakMyCode */
          \u0275\u0275defineInjectable({
            token: _TransferState,
            providedIn: "root",
            factory: initTransferState
          });
        }
        /**
         * Get the value corresponding to a key. Return `defaultValue` if key is not found.
         */
        get(key, defaultValue) {
          return this.store[key] !== void 0 ? this.store[key] : defaultValue;
        }
        /**
         * Set the value corresponding to a key.
         */
        set(key, value) {
          this.store[key] = value;
        }
        /**
         * Remove a key from the store.
         */
        remove(key) {
          delete this.store[key];
        }
        /**
         * Test whether a key exists in the store.
         */
        hasKey(key) {
          return this.store.hasOwnProperty(key);
        }
        /**
         * Indicates whether the state is empty.
         */
        get isEmpty() {
          return Object.keys(this.store).length === 0;
        }
        /**
         * Register a callback to provide the value for a key when `toJson` is called.
         */
        onSerialize(key, callback) {
          this.onSerializeCallbacks[key] = callback;
        }
        /**
         * Serialize the current state of the store to JSON.
         */
        toJson() {
          for (const key in this.onSerializeCallbacks) {
            if (this.onSerializeCallbacks.hasOwnProperty(key)) {
              try {
                this.store[key] = this.onSerializeCallbacks[key]();
              } catch (e2) {
                console.warn("Exception in onSerialize callback: ", e2);
              }
            }
          }
          return JSON.stringify(this.store).replace(/</g, "\\u003C");
        }
      };
      REFERENCE_NODE_HOST = "h";
      REFERENCE_NODE_BODY = "b";
      (function(NodeNavigationStep2) {
        NodeNavigationStep2["FirstChild"] = "f";
        NodeNavigationStep2["NextSibling"] = "n";
      })(NodeNavigationStep || (NodeNavigationStep = {}));
      ELEMENT_CONTAINERS = "e";
      TEMPLATES = "t";
      CONTAINERS = "c";
      MULTIPLIER = "x";
      NUM_ROOT_NODES = "r";
      TEMPLATE_ID = "i";
      NODES = "n";
      DISCONNECTED_NODES = "d";
      TRANSFER_STATE_TOKEN_ID = "__nghData__";
      NGH_DATA_KEY = makeStateKey(TRANSFER_STATE_TOKEN_ID);
      NGH_ATTR_NAME = "ngh";
      SSR_CONTENT_INTEGRITY_MARKER = "nghm";
      _retrieveHydrationInfoImpl = () => null;
      (function(HydrationStatus2) {
        HydrationStatus2["Hydrated"] = "hydrated";
        HydrationStatus2["Skipped"] = "skipped";
        HydrationStatus2["Mismatched"] = "mismatched";
      })(HydrationStatus || (HydrationStatus = {}));
      HYDRATION_INFO_KEY = "__ngDebugHydrationInfo__";
      IS_HYDRATION_DOM_REUSE_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_HYDRATION_DOM_REUSE_ENABLED" : "");
      PRESERVE_HOST_CONTENT_DEFAULT = false;
      PRESERVE_HOST_CONTENT = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "PRESERVE_HOST_CONTENT" : "", {
        providedIn: "root",
        factory: () => PRESERVE_HOST_CONTENT_DEFAULT
      });
      IS_I18N_HYDRATION_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_I18N_HYDRATION_ENABLED" : "");
      SafeValueImpl = class {
        constructor(changingThisBreaksApplicationSecurity) {
          this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
        }
        toString() {
          return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see ${XSS_SECURITY_URL})`;
        }
      };
      SafeHtmlImpl = class extends SafeValueImpl {
        getTypeName() {
          return "HTML";
        }
      };
      SafeStyleImpl = class extends SafeValueImpl {
        getTypeName() {
          return "Style";
        }
      };
      SafeScriptImpl = class extends SafeValueImpl {
        getTypeName() {
          return "Script";
        }
      };
      SafeUrlImpl = class extends SafeValueImpl {
        getTypeName() {
          return "URL";
        }
      };
      SafeResourceUrlImpl = class extends SafeValueImpl {
        getTypeName() {
          return "ResourceURL";
        }
      };
      DOMParserHelper = class {
        constructor(inertDocumentHelper) {
          this.inertDocumentHelper = inertDocumentHelper;
        }
        getInertBodyElement(html) {
          html = "<body><remove></remove>" + html;
          try {
            const body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), "text/html").body;
            if (body === null) {
              return this.inertDocumentHelper.getInertBodyElement(html);
            }
            body.removeChild(body.firstChild);
            return body;
          } catch {
            return null;
          }
        }
      };
      InertDocumentHelper = class {
        constructor(defaultDoc) {
          this.defaultDoc = defaultDoc;
          this.inertDocument = this.defaultDoc.implementation.createHTMLDocument("sanitization-inert");
        }
        getInertBodyElement(html) {
          const templateEl = this.inertDocument.createElement("template");
          templateEl.innerHTML = trustedHTMLFromString(html);
          return templateEl;
        }
      };
      SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\/?#]*(?:[\/?#]|$))/i;
      VOID_ELEMENTS = tagSet("area,br,col,hr,img,wbr");
      OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr");
      OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet("rp,rt");
      OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
      BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul"));
      INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video"));
      VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
      URI_ATTRS = tagSet("background,cite,href,itemtype,longdesc,poster,src,xlink:href");
      HTML_ATTRS = tagSet("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width");
      ARIA_ATTRS = tagSet("aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext");
      VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);
      SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet("script,style,template");
      SanitizingHtmlSerializer = class {
        constructor() {
          this.sanitizedSomething = false;
          this.buf = [];
        }
        sanitizeChildren(el) {
          let current = el.firstChild;
          let traverseContent = true;
          let parentNodes = [];
          while (current) {
            if (current.nodeType === Node.ELEMENT_NODE) {
              traverseContent = this.startElement(current);
            } else if (current.nodeType === Node.TEXT_NODE) {
              this.chars(current.nodeValue);
            } else {
              this.sanitizedSomething = true;
            }
            if (traverseContent && current.firstChild) {
              parentNodes.push(current);
              current = getFirstChild(current);
              continue;
            }
            while (current) {
              if (current.nodeType === Node.ELEMENT_NODE) {
                this.endElement(current);
              }
              let next = getNextSibling(current);
              if (next) {
                current = next;
                break;
              }
              current = parentNodes.pop();
            }
          }
          return this.buf.join("");
        }
        /**
         * Sanitizes an opening element tag (if valid) and returns whether the element's contents should
         * be traversed. Element content must always be traversed (even if the element itself is not
         * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.
         *
         * @param element The element to sanitize.
         * @return True if the element's contents should be traversed.
         */
        startElement(element2) {
          const tagName = getNodeName(element2).toLowerCase();
          if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
            this.sanitizedSomething = true;
            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);
          }
          this.buf.push("<");
          this.buf.push(tagName);
          const elAttrs = element2.attributes;
          for (let i = 0; i < elAttrs.length; i++) {
            const elAttr = elAttrs.item(i);
            const attrName = elAttr.name;
            const lower = attrName.toLowerCase();
            if (!VALID_ATTRS.hasOwnProperty(lower)) {
              this.sanitizedSomething = true;
              continue;
            }
            let value = elAttr.value;
            if (URI_ATTRS[lower])
              value = _sanitizeUrl(value);
            this.buf.push(" ", attrName, '="', encodeEntities(value), '"');
          }
          this.buf.push(">");
          return true;
        }
        endElement(current) {
          const tagName = getNodeName(current).toLowerCase();
          if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
            this.buf.push("</");
            this.buf.push(tagName);
            this.buf.push(">");
          }
        }
        chars(chars) {
          this.buf.push(encodeEntities(chars));
        }
      };
      SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
      NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
      (function(SecurityContext3) {
        SecurityContext3[SecurityContext3["NONE"] = 0] = "NONE";
        SecurityContext3[SecurityContext3["HTML"] = 1] = "HTML";
        SecurityContext3[SecurityContext3["STYLE"] = 2] = "STYLE";
        SecurityContext3[SecurityContext3["SCRIPT"] = 3] = "SCRIPT";
        SecurityContext3[SecurityContext3["URL"] = 4] = "URL";
        SecurityContext3[SecurityContext3["RESOURCE_URL"] = 5] = "RESOURCE_URL";
      })(SecurityContext || (SecurityContext = {}));
      COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;
      COMMENT_DELIMITER = /(<|>)/g;
      COMMENT_DELIMITER_ESCAPED = "\u200B$1\u200B";
      CAMEL_CASE_REGEXP = /([A-Z])/g;
      CUSTOM_ELEMENTS_SCHEMA = {
        name: "custom-elements"
      };
      NO_ERRORS_SCHEMA = {
        name: "no-errors-schema"
      };
      shouldThrowErrorOnUnknownElement = false;
      shouldThrowErrorOnUnknownProperty = false;
      KNOWN_CONTROL_FLOW_DIRECTIVES = /* @__PURE__ */ new Map([
        ["ngIf", "NgIf"],
        ["ngFor", "NgFor"],
        ["ngSwitchCase", "NgSwitchCase"],
        ["ngSwitchDefault", "NgSwitchDefault"]
      ]);
      INTERPOLATION_DELIMITER = `\uFFFD`;
      VALUE_STRING_LENGTH_LIMIT = 200;
      (function(RendererStyleFlags22) {
        RendererStyleFlags22[RendererStyleFlags22["Important"] = 1] = "Important";
        RendererStyleFlags22[RendererStyleFlags22["DashCase"] = 2] = "DashCase";
      })(RendererStyleFlags2 || (RendererStyleFlags2 = {}));
      _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;
      NO_CHANGE = typeof ngDevMode === "undefined" || ngDevMode ? { __brand__: "NO_CHANGE" } : {};
      _applyRootElementTransformImpl = () => null;
      freeConsumers = [];
      REACTIVE_LVIEW_CONSUMER_NODE = {
        ...REACTIVE_NODE,
        consumerIsAlwaysLive: true,
        consumerMarkedDirty: (node) => {
          markAncestorsForTraversal(node.lView);
        },
        consumerOnSignalRead() {
          this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;
        }
      };
      MAXIMUM_REFRESH_RERUNS = 100;
      ViewRef$1 = class {
        get rootNodes() {
          const lView = this._lView;
          const tView = lView[TVIEW];
          return collectNativeNodes(tView, lView, tView.firstChild, []);
        }
        constructor(_lView, _cdRefInjectingView, notifyErrorHandler = true) {
          this._lView = _lView;
          this._cdRefInjectingView = _cdRefInjectingView;
          this.notifyErrorHandler = notifyErrorHandler;
          this._appRef = null;
          this._attachedToViewContainer = false;
        }
        get context() {
          return this._lView[CONTEXT];
        }
        /**
         * @deprecated Replacing the full context object is not supported. Modify the context
         *   directly, or consider using a `Proxy` if you need to replace the full object.
         * // TODO(devversion): Remove this.
         */
        set context(value) {
          if (ngDevMode) {
            console.warn("Angular: Replacing the `context` object of an `EmbeddedViewRef` is deprecated.");
          }
          this._lView[CONTEXT] = value;
        }
        get destroyed() {
          return (this._lView[FLAGS] & 256) === 256;
        }
        destroy() {
          if (this._appRef) {
            this._appRef.detachView(this);
          } else if (this._attachedToViewContainer) {
            const parent = this._lView[PARENT];
            if (isLContainer(parent)) {
              const viewRefs = parent[VIEW_REFS];
              const index = viewRefs ? viewRefs.indexOf(this) : -1;
              if (index > -1) {
                ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, "An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.");
                detachView(parent, index);
                removeFromArray(viewRefs, index);
              }
            }
            this._attachedToViewContainer = false;
          }
          destroyLView(this._lView[TVIEW], this._lView);
        }
        onDestroy(callback) {
          storeLViewOnDestroy(this._lView, callback);
        }
        /**
         * Marks a view and all of its ancestors dirty.
         *
         * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush} component is
         * checked when it needs to be re-rendered but the two normal triggers haven't marked it
         * dirty (i.e. inputs haven't changed and events haven't fired in the view).
         *
         * <!-- TODO: Add a link to a chapter on OnPush components -->
         *
         * @usageNotes
         * ### Example
         *
         * ```typescript
         * @Component({
         *   selector: 'app-root',
         *   template: `Number of ticks: {{numberOfTicks}}`
         *   changeDetection: ChangeDetectionStrategy.OnPush,
         * })
         * class AppComponent {
         *   numberOfTicks = 0;
         *
         *   constructor(private ref: ChangeDetectorRef) {
         *     setInterval(() => {
         *       this.numberOfTicks++;
         *       // the following is required, otherwise the view will not be updated
         *       this.ref.markForCheck();
         *     }, 1000);
         *   }
         * }
         * ```
         */
        markForCheck() {
          markViewDirty(this._cdRefInjectingView || this._lView);
        }
        /**
         * Detaches the view from the change detection tree.
         *
         * Detached views will not be checked during change detection runs until they are
         * re-attached, even if they are dirty. `detach` can be used in combination with
         * {@link ChangeDetectorRef#detectChanges} to implement local change
         * detection checks.
         *
         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
         *
         * @usageNotes
         * ### Example
         *
         * The following example defines a component with a large list of readonly data.
         * Imagine the data changes constantly, many times per second. For performance reasons,
         * we want to check and update the list every five seconds. We can do that by detaching
         * the component's change detector and doing a local check every five seconds.
         *
         * ```typescript
         * class DataProvider {
         *   // in a real application the returned data will be different every time
         *   get data() {
         *     return [1,2,3,4,5];
         *   }
         * }
         *
         * @Component({
         *   selector: 'giant-list',
         *   template: `
         *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
         *   `,
         * })
         * class GiantList {
         *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
         *     ref.detach();
         *     setInterval(() => {
         *       this.ref.detectChanges();
         *     }, 5000);
         *   }
         * }
         *
         * @Component({
         *   selector: 'app',
         *   providers: [DataProvider],
         *   template: `
         *     <giant-list><giant-list>
         *   `,
         * })
         * class App {
         * }
         * ```
         */
        detach() {
          this._lView[FLAGS] &= ~128;
        }
        /**
         * Re-attaches a view to the change detection tree.
         *
         * This can be used to re-attach views that were previously detached from the tree
         * using {@link ChangeDetectorRef#detach}. Views are attached to the tree by default.
         *
         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
         *
         * @usageNotes
         * ### Example
         *
         * The following example creates a component displaying `live` data. The component will detach
         * its change detector from the main change detector tree when the component's live property
         * is set to false.
         *
         * ```typescript
         * class DataProvider {
         *   data = 1;
         *
         *   constructor() {
         *     setInterval(() => {
         *       this.data = this.data * 2;
         *     }, 500);
         *   }
         * }
         *
         * @Component({
         *   selector: 'live-data',
         *   inputs: ['live'],
         *   template: 'Data: {{dataProvider.data}}'
         * })
         * class LiveData {
         *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
         *
         *   set live(value) {
         *     if (value) {
         *       this.ref.reattach();
         *     } else {
         *       this.ref.detach();
         *     }
         *   }
         * }
         *
         * @Component({
         *   selector: 'app-root',
         *   providers: [DataProvider],
         *   template: `
         *     Live Update: <input type="checkbox" [(ngModel)]="live">
         *     <live-data [live]="live"><live-data>
         *   `,
         * })
         * class AppComponent {
         *   live = true;
         * }
         * ```
         */
        reattach() {
          updateAncestorTraversalFlagsOnAttach(this._lView);
          this._lView[FLAGS] |= 128;
        }
        /**
         * Checks the view and its children.
         *
         * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement
         * local change detection checks.
         *
         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
         *
         * @usageNotes
         * ### Example
         *
         * The following example defines a component with a large list of readonly data.
         * Imagine, the data changes constantly, many times per second. For performance reasons,
         * we want to check and update the list every five seconds.
         *
         * We can do that by detaching the component's change detector and doing a local change detection
         * check every five seconds.
         *
         * See {@link ChangeDetectorRef#detach} for more information.
         */
        detectChanges() {
          this._lView[FLAGS] |= 1024;
          detectChangesInternal(this._lView, this.notifyErrorHandler);
        }
        /**
         * Checks the change detector and its children, and throws if any changes are detected.
         *
         * This is used in development mode to verify that running change detection doesn't
         * introduce other changes.
         */
        checkNoChanges() {
          if (ngDevMode) {
            checkNoChangesInternal(this._lView, this.notifyErrorHandler);
          }
        }
        attachToViewContainerRef() {
          if (this._appRef) {
            throw new RuntimeError(902, ngDevMode && "This view is already attached directly to the ApplicationRef!");
          }
          this._attachedToViewContainer = true;
        }
        detachFromAppRef() {
          this._appRef = null;
          detachViewFromDOM(this._lView[TVIEW], this._lView);
        }
        attachToAppRef(appRef) {
          if (this._attachedToViewContainer) {
            throw new RuntimeError(902, ngDevMode && "This view is already attached to a ViewContainer!");
          }
          this._appRef = appRef;
          updateAncestorTraversalFlagsOnAttach(this._lView);
        }
      };
      TemplateRef = class {
        static {
          this.__NG_ELEMENT_ID__ = injectTemplateRef;
        }
      };
      ViewEngineTemplateRef = TemplateRef;
      R3TemplateRef = class TemplateRef2 extends ViewEngineTemplateRef {
        constructor(_declarationLView, _declarationTContainer, elementRef) {
          super();
          this._declarationLView = _declarationLView;
          this._declarationTContainer = _declarationTContainer;
          this.elementRef = elementRef;
        }
        /**
         * Returns an `ssrId` associated with a TView, which was used to
         * create this instance of the `TemplateRef`.
         *
         * @internal
         */
        get ssrId() {
          return this._declarationTContainer.tView?.ssrId || null;
        }
        createEmbeddedView(context2, injector) {
          return this.createEmbeddedViewImpl(context2, injector);
        }
        /**
         * @internal
         */
        createEmbeddedViewImpl(context2, injector, dehydratedView) {
          const embeddedLView = createAndRenderEmbeddedLView(this._declarationLView, this._declarationTContainer, context2, { embeddedViewInjector: injector, dehydratedView });
          return new ViewRef$1(embeddedLView);
        }
      };
      AT_THIS_LOCATION = "<-- AT THIS LOCATION";
      internalAttrs = /* @__PURE__ */ new Set(["ngh", "ng-version", "ng-server-context"]);
      REF_EXTRACTOR_REGEXP = new RegExp(`^(\\d+)*(${REFERENCE_NODE_BODY}|${REFERENCE_NODE_HOST})*(.*)`);
      _findMatchingDehydratedViewImpl = () => null;
      ChangeDetectionScheduler = class {
      };
      ComponentRef$1 = class {
      };
      ComponentFactory$1 = class {
      };
      ERROR_COMPONENT = "ngComponent";
      _NullComponentFactoryResolver = class {
        resolveComponentFactory(component) {
          throw noComponentFactoryError(component);
        }
      };
      ComponentFactoryResolver$1 = class {
        static {
          this.NULL = /* @__PURE__ */ new _NullComponentFactoryResolver();
        }
      };
      RendererFactory2 = class {
      };
      Renderer2 = class {
        constructor() {
          this.destroyNode = null;
        }
        static {
          this.__NG_ELEMENT_ID__ = () => injectRenderer2();
        }
      };
      Sanitizer = class _Sanitizer {
        static {
          this.\u0275prov = \u0275\u0275defineInjectable({
            token: _Sanitizer,
            providedIn: "root",
            factory: () => null
          });
        }
      };
      NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
      markedFeatures = /* @__PURE__ */ new Set();
      AsyncStackTaggingZoneSpec = class {
        constructor(namePrefix, consoleAsyncStackTaggingImpl = console) {
          this.name = "asyncStackTagging for " + namePrefix;
          this.createTask = consoleAsyncStackTaggingImpl?.createTask ?? (() => null);
        }
        onScheduleTask(delegate, _current, target, task) {
          task.consoleTask = this.createTask(`Zone - ${task.source || task.type}`);
          return delegate.scheduleTask(target, task);
        }
        onInvokeTask(delegate, _currentZone, targetZone, task, applyThis, applyArgs) {
          let ret;
          if (task.consoleTask) {
            ret = task.consoleTask.run(() => delegate.invokeTask(targetZone, task, applyThis, applyArgs));
          } else {
            ret = delegate.invokeTask(targetZone, task, applyThis, applyArgs);
          }
          return ret;
        }
      };
      NgZone = class _NgZone {
        constructor({ enableLongStackTrace = false, shouldCoalesceEventChangeDetection = false, shouldCoalesceRunChangeDetection = false }) {
          this.hasPendingMacrotasks = false;
          this.hasPendingMicrotasks = false;
          this.isStable = true;
          this.onUnstable = new EventEmitter(false);
          this.onMicrotaskEmpty = new EventEmitter(false);
          this.onStable = new EventEmitter(false);
          this.onError = new EventEmitter(false);
          if (typeof Zone == "undefined") {
            throw new RuntimeError(908, ngDevMode && `In this configuration Angular requires Zone.js`);
          }
          Zone.assertZonePatched();
          const self2 = this;
          self2._nesting = 0;
          self2._outer = self2._inner = Zone.current;
          if (ngDevMode) {
            self2._inner = self2._inner.fork(new AsyncStackTaggingZoneSpec("Angular"));
          }
          if (Zone["TaskTrackingZoneSpec"]) {
            self2._inner = self2._inner.fork(new Zone["TaskTrackingZoneSpec"]());
          }
          if (enableLongStackTrace && Zone["longStackTraceZoneSpec"]) {
            self2._inner = self2._inner.fork(Zone["longStackTraceZoneSpec"]);
          }
          self2.shouldCoalesceEventChangeDetection = !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;
          self2.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;
          self2.lastRequestAnimationFrameId = -1;
          self2.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;
          forkInnerZoneWithAngularBehavior(self2);
        }
        /**
          This method checks whether the method call happens within an Angular Zone instance.
        */
        static isInAngularZone() {
          return typeof Zone !== "undefined" && Zone.current.get("isAngularZone") === true;
        }
        /**
          Assures that the method is called within the Angular Zone, otherwise throws an error.
        */
        static assertInAngularZone() {
          if (!_NgZone.isInAngularZone()) {
            throw new RuntimeError(909, ngDevMode && "Expected to be in Angular Zone, but it is not!");
          }
        }
        /**
          Assures that the method is called outside of the Angular Zone, otherwise throws an error.
        */
        static assertNotInAngularZone() {
          if (_NgZone.isInAngularZone()) {
            throw new RuntimeError(909, ngDevMode && "Expected to not be in Angular Zone, but it is!");
          }
        }
        /**
         * Executes the `fn` function synchronously within the Angular zone and returns value returned by
         * the function.
         *
         * Running functions via `run` allows you to reenter Angular zone from a task that was executed
         * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
         *
         * Any future tasks or microtasks scheduled from within this function will continue executing from
         * within the Angular zone.
         *
         * If a synchronous error happens it will be rethrown and not reported via `onError`.
         */
        run(fn2, applyThis, applyArgs) {
          return this._inner.run(fn2, applyThis, applyArgs);
        }
        /**
         * Executes the `fn` function synchronously within the Angular zone as a task and returns value
         * returned by the function.
         *
         * Running functions via `run` allows you to reenter Angular zone from a task that was executed
         * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
         *
         * Any future tasks or microtasks scheduled from within this function will continue executing from
         * within the Angular zone.
         *
         * If a synchronous error happens it will be rethrown and not reported via `onError`.
         */
        runTask(fn2, applyThis, applyArgs, name) {
          const zone = this._inner;
          const task = zone.scheduleEventTask("NgZoneEvent: " + name, fn2, EMPTY_PAYLOAD, noop2, noop2);
          try {
            return zone.runTask(task, applyThis, applyArgs);
          } finally {
            zone.cancelTask(task);
          }
        }
        /**
         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
         * rethrown.
         */
        runGuarded(fn2, applyThis, applyArgs) {
          return this._inner.runGuarded(fn2, applyThis, applyArgs);
        }
        /**
         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
         * the function.
         *
         * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
         * work that
         * doesn't trigger Angular change-detection or is subject to Angular's error handling.
         *
         * Any future tasks or microtasks scheduled from within this function will continue executing from
         * outside of the Angular zone.
         *
         * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
         */
        runOutsideAngular(fn2) {
          return this._outer.run(fn2);
        }
      };
      EMPTY_PAYLOAD = {};
      NoopNgZone = class {
        constructor() {
          this.hasPendingMicrotasks = false;
          this.hasPendingMacrotasks = false;
          this.isStable = true;
          this.onUnstable = new EventEmitter();
          this.onMicrotaskEmpty = new EventEmitter();
          this.onStable = new EventEmitter();
          this.onError = new EventEmitter();
        }
        run(fn2, applyThis, applyArgs) {
          return fn2.apply(applyThis, applyArgs);
        }
        runGuarded(fn2, applyThis, applyArgs) {
          return fn2.apply(applyThis, applyArgs);
        }
        runOutsideAngular(fn2) {
          return fn2();
        }
        runTask(fn2, applyThis, applyArgs, name) {
          return fn2.apply(applyThis, applyArgs);
        }
      };
      (function(AfterRenderPhase2) {
        AfterRenderPhase2[AfterRenderPhase2["EarlyRead"] = 0] = "EarlyRead";
        AfterRenderPhase2[AfterRenderPhase2["Write"] = 1] = "Write";
        AfterRenderPhase2[AfterRenderPhase2["MixedReadWrite"] = 2] = "MixedReadWrite";
        AfterRenderPhase2[AfterRenderPhase2["Read"] = 3] = "Read";
      })(AfterRenderPhase || (AfterRenderPhase = {}));
      NOOP_AFTER_RENDER_REF = {
        destroy() {
        }
      };
      AfterRenderCallback = class {
        constructor(phase, callbackFn) {
          this.phase = phase;
          this.callbackFn = callbackFn;
          this.zone = inject(NgZone);
          this.errorHandler = inject(ErrorHandler, { optional: true });
          inject(ChangeDetectionScheduler, { optional: true })?.notify(
            1
            /* NotificationType.AfterRenderHooks */
          );
        }
        invoke() {
          try {
            this.zone.runOutsideAngular(this.callbackFn);
          } catch (err2) {
            this.errorHandler?.handleError(err2);
          }
        }
      };
      AfterRenderCallbackHandlerImpl = class {
        constructor() {
          this.executingCallbacks = false;
          this.buckets = {
            // Note: the order of these keys controls the order the phases are run.
            [AfterRenderPhase.EarlyRead]: /* @__PURE__ */ new Set(),
            [AfterRenderPhase.Write]: /* @__PURE__ */ new Set(),
            [AfterRenderPhase.MixedReadWrite]: /* @__PURE__ */ new Set(),
            [AfterRenderPhase.Read]: /* @__PURE__ */ new Set()
          };
          this.deferredCallbacks = /* @__PURE__ */ new Set();
        }
        register(callback) {
          const target = this.executingCallbacks ? this.deferredCallbacks : this.buckets[callback.phase];
          target.add(callback);
        }
        unregister(callback) {
          this.buckets[callback.phase].delete(callback);
          this.deferredCallbacks.delete(callback);
        }
        execute() {
          this.executingCallbacks = true;
          for (const bucket of Object.values(this.buckets)) {
            for (const callback of bucket) {
              callback.invoke();
            }
          }
          this.executingCallbacks = false;
          for (const callback of this.deferredCallbacks) {
            this.buckets[callback.phase].add(callback);
          }
          this.deferredCallbacks.clear();
        }
        destroy() {
          for (const bucket of Object.values(this.buckets)) {
            bucket.clear();
          }
          this.deferredCallbacks.clear();
        }
      };
      AfterRenderEventManager = class _AfterRenderEventManager {
        constructor() {
          this.handler = null;
          this.internalCallbacks = [];
        }
        /**
         * Executes internal and user-provided callbacks.
         */
        execute() {
          this.executeInternalCallbacks();
          this.handler?.execute();
        }
        executeInternalCallbacks() {
          const callbacks = [...this.internalCallbacks];
          this.internalCallbacks.length = 0;
          for (const callback of callbacks) {
            callback();
          }
        }
        ngOnDestroy() {
          this.handler?.destroy();
          this.handler = null;
          this.internalCallbacks.length = 0;
        }
        static {
          this.\u0275prov = \u0275\u0275defineInjectable({
            token: _AfterRenderEventManager,
            providedIn: "root",
            factory: () => new _AfterRenderEventManager()
          });
        }
      };
      USE_RUNTIME_DEPS_TRACKER_FOR_JIT = true;
      DepsTracker = class {
        constructor() {
          this.ownerNgModule = /* @__PURE__ */ new Map();
          this.ngModulesWithSomeUnresolvedDecls = /* @__PURE__ */ new Set();
          this.ngModulesScopeCache = /* @__PURE__ */ new Map();
          this.standaloneComponentsScopeCache = /* @__PURE__ */ new Map();
        }
        /**
         * Attempts to resolve ng module's forward ref declarations as much as possible and add them to
         * the `ownerNgModule` map. This method normally should be called after the initial parsing when
         * all the forward refs are resolved (e.g., when trying to render a component)
         */
        resolveNgModulesDecls() {
          if (this.ngModulesWithSomeUnresolvedDecls.size === 0) {
            return;
          }
          for (const moduleType of this.ngModulesWithSomeUnresolvedDecls) {
            const def = getNgModuleDef(moduleType);
            if (def?.declarations) {
              for (const decl of maybeUnwrapFn(def.declarations)) {
                if (isComponent(decl)) {
                  this.ownerNgModule.set(decl, moduleType);
                }
              }
            }
          }
          this.ngModulesWithSomeUnresolvedDecls.clear();
        }
        /** @override */
        getComponentDependencies(type, rawImports) {
          this.resolveNgModulesDecls();
          const def = getComponentDef(type);
          if (def === null) {
            throw new Error(`Attempting to get component dependencies for a type that is not a component: ${type}`);
          }
          if (def.standalone) {
            const scope = this.getStandaloneComponentScope(type, rawImports);
            if (scope.compilation.isPoisoned) {
              return { dependencies: [] };
            }
            return {
              dependencies: [
                ...scope.compilation.directives,
                ...scope.compilation.pipes,
                ...scope.compilation.ngModules
              ]
            };
          } else {
            if (!this.ownerNgModule.has(type)) {
              return { dependencies: [] };
            }
            const scope = this.getNgModuleScope(this.ownerNgModule.get(type));
            if (scope.compilation.isPoisoned) {
              return { dependencies: [] };
            }
            return {
              dependencies: [
                ...scope.compilation.directives,
                ...scope.compilation.pipes
              ]
            };
          }
        }
        /**
         * @override
         * This implementation does not make use of param scopeInfo since it assumes the scope info is
         * already added to the type itself through methods like {@link ɵɵsetNgModuleScope}
         */
        registerNgModule(type, scopeInfo) {
          if (!isNgModule(type)) {
            throw new Error(`Attempting to register a Type which is not NgModule as NgModule: ${type}`);
          }
          this.ngModulesWithSomeUnresolvedDecls.add(type);
        }
        /** @override */
        clearScopeCacheFor(type) {
          this.ngModulesScopeCache.delete(type);
          this.standaloneComponentsScopeCache.delete(type);
        }
        /** @override */
        getNgModuleScope(type) {
          if (this.ngModulesScopeCache.has(type)) {
            return this.ngModulesScopeCache.get(type);
          }
          const scope = this.computeNgModuleScope(type);
          this.ngModulesScopeCache.set(type, scope);
          return scope;
        }
        /** Compute NgModule scope afresh. */
        computeNgModuleScope(type) {
          const def = getNgModuleDef(type, true);
          const scope = {
            exported: { directives: /* @__PURE__ */ new Set(), pipes: /* @__PURE__ */ new Set() },
            compilation: { directives: /* @__PURE__ */ new Set(), pipes: /* @__PURE__ */ new Set() }
          };
          for (const imported of maybeUnwrapFn(def.imports)) {
            if (isNgModule(imported)) {
              const importedScope = this.getNgModuleScope(imported);
              addSet(importedScope.exported.directives, scope.compilation.directives);
              addSet(importedScope.exported.pipes, scope.compilation.pipes);
            } else if (isStandalone(imported)) {
              if (isDirective(imported) || isComponent(imported)) {
                scope.compilation.directives.add(imported);
              } else if (isPipe(imported)) {
                scope.compilation.pipes.add(imported);
              } else {
                throw new RuntimeError(1e3, "The standalone imported type is neither a component nor a directive nor a pipe");
              }
            } else {
              scope.compilation.isPoisoned = true;
              break;
            }
          }
          if (!scope.compilation.isPoisoned) {
            for (const decl of maybeUnwrapFn(def.declarations)) {
              if (isNgModule(decl) || isStandalone(decl)) {
                scope.compilation.isPoisoned = true;
                break;
              }
              if (isPipe(decl)) {
                scope.compilation.pipes.add(decl);
              } else {
                scope.compilation.directives.add(decl);
              }
            }
          }
          for (const exported of maybeUnwrapFn(def.exports)) {
            if (isNgModule(exported)) {
              const exportedScope = this.getNgModuleScope(exported);
              addSet(exportedScope.exported.directives, scope.exported.directives);
              addSet(exportedScope.exported.pipes, scope.exported.pipes);
              addSet(exportedScope.exported.directives, scope.compilation.directives);
              addSet(exportedScope.exported.pipes, scope.compilation.pipes);
            } else if (isPipe(exported)) {
              scope.exported.pipes.add(exported);
            } else {
              scope.exported.directives.add(exported);
            }
          }
          return scope;
        }
        /** @override */
        getStandaloneComponentScope(type, rawImports) {
          if (this.standaloneComponentsScopeCache.has(type)) {
            return this.standaloneComponentsScopeCache.get(type);
          }
          const ans = this.computeStandaloneComponentScope(type, rawImports);
          this.standaloneComponentsScopeCache.set(type, ans);
          return ans;
        }
        computeStandaloneComponentScope(type, rawImports) {
          const ans = {
            compilation: {
              // Standalone components are always able to self-reference.
              directives: /* @__PURE__ */ new Set([type]),
              pipes: /* @__PURE__ */ new Set(),
              ngModules: /* @__PURE__ */ new Set()
            }
          };
          for (const rawImport of flatten(rawImports ?? [])) {
            const imported = resolveForwardRef(rawImport);
            try {
              verifyStandaloneImport(imported, type);
            } catch (e2) {
              ans.compilation.isPoisoned = true;
              return ans;
            }
            if (isNgModule(imported)) {
              ans.compilation.ngModules.add(imported);
              const importedScope = this.getNgModuleScope(imported);
              if (importedScope.exported.isPoisoned) {
                ans.compilation.isPoisoned = true;
                return ans;
              }
              addSet(importedScope.exported.directives, ans.compilation.directives);
              addSet(importedScope.exported.pipes, ans.compilation.pipes);
            } else if (isPipe(imported)) {
              ans.compilation.pipes.add(imported);
            } else if (isDirective(imported) || isComponent(imported)) {
              ans.compilation.directives.add(imported);
            } else {
              ans.compilation.isPoisoned = true;
              return ans;
            }
          }
          return ans;
        }
        /** @override */
        isOrphanComponent(cmp) {
          const def = getComponentDef(cmp);
          if (!def || def.standalone) {
            return false;
          }
          this.resolveNgModulesDecls();
          return !this.ownerNgModule.has(cmp);
        }
      };
      depsTracker = new DepsTracker();
      ComponentFactoryResolver = class extends ComponentFactoryResolver$1 {
        /**
         * @param ngModule The NgModuleRef to which all resolved factories are bound.
         */
        constructor(ngModule) {
          super();
          this.ngModule = ngModule;
        }
        resolveComponentFactory(component) {
          ngDevMode && assertComponentType(component);
          const componentDef = getComponentDef(component);
          return new ComponentFactory(componentDef, this.ngModule);
        }
      };
      ChainedInjector = class {
        constructor(injector, parentInjector) {
          this.injector = injector;
          this.parentInjector = parentInjector;
        }
        get(token, notFoundValue, flags) {
          flags = convertToBitFlags(flags);
          const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);
          if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
            return value;
          }
          return this.parentInjector.get(token, notFoundValue, flags);
        }
      };
      ComponentFactory = class extends ComponentFactory$1 {
        get inputs() {
          const componentDef = this.componentDef;
          const inputTransforms = componentDef.inputTransforms;
          const refArray = toRefArray(componentDef.inputs);
          if (inputTransforms !== null) {
            for (const input2 of refArray) {
              if (inputTransforms.hasOwnProperty(input2.propName)) {
                input2.transform = inputTransforms[input2.propName];
              }
            }
          }
          return refArray;
        }
        get outputs() {
          return toRefArray(this.componentDef.outputs);
        }
        /**
         * @param componentDef The component definition.
         * @param ngModule The NgModuleRef to which the factory is bound.
         */
        constructor(componentDef, ngModule) {
          super();
          this.componentDef = componentDef;
          this.ngModule = ngModule;
          this.componentType = componentDef.type;
          this.selector = stringifyCSSSelectorList(componentDef.selectors);
          this.ngContentSelectors = componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];
          this.isBoundToModule = !!ngModule;
        }
        create(injector, projectableNodes, rootSelectorOrNode, environmentInjector) {
          const prevConsumer = setActiveConsumer(null);
          try {
            if (ngDevMode && (typeof ngJitMode === "undefined" || ngJitMode) && this.componentDef.debugInfo?.forbidOrphanRendering) {
              if (depsTracker.isOrphanComponent(this.componentType)) {
                throw new RuntimeError(1001, `Orphan component found! Trying to render the component ${debugStringifyTypeForError(this.componentType)} without first loading the NgModule that declares it. It is recommended to make this component standalone in order to avoid this error. If this is not possible now, import the component's NgModule in the appropriate NgModule, or the standalone component in which you are trying to render this component. If this is a lazy import, load the NgModule lazily as well and use its module injector.`);
              }
            }
            environmentInjector = environmentInjector || this.ngModule;
            let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ? environmentInjector : environmentInjector?.injector;
            if (realEnvironmentInjector && this.componentDef.getStandaloneInjector !== null) {
              realEnvironmentInjector = this.componentDef.getStandaloneInjector(realEnvironmentInjector) || realEnvironmentInjector;
            }
            const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;
            const rendererFactory = rootViewInjector.get(RendererFactory2, null);
            if (rendererFactory === null) {
              throw new RuntimeError(407, ngDevMode && "Angular was not able to inject a renderer (RendererFactory2). Likely this is due to a broken DI hierarchy. Make sure that any injector used to create this component has a correct parent.");
            }
            const sanitizer = rootViewInjector.get(Sanitizer, null);
            const afterRenderEventManager = rootViewInjector.get(AfterRenderEventManager, null);
            const changeDetectionScheduler = rootViewInjector.get(ChangeDetectionScheduler, null);
            const environment2 = {
              rendererFactory,
              sanitizer,
              // We don't use inline effects (yet).
              inlineEffectRunner: null,
              afterRenderEventManager,
              changeDetectionScheduler
            };
            const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);
            const elementName = this.componentDef.selectors[0][0] || "div";
            const hostRNode = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation, rootViewInjector) : createElementNode(hostRenderer, elementName, getNamespace(elementName));
            let rootFlags = 512;
            if (this.componentDef.signals) {
              rootFlags |= 4096;
            } else if (!this.componentDef.onPush) {
              rootFlags |= 16;
            }
            let hydrationInfo = null;
            if (hostRNode !== null) {
              hydrationInfo = retrieveHydrationInfo(
                hostRNode,
                rootViewInjector,
                true
                /* isRootView */
              );
            }
            const rootTView = createTView(0, null, null, 1, 0, null, null, null, null, null, null);
            const rootLView = createLView(null, rootTView, null, rootFlags, null, null, environment2, hostRenderer, rootViewInjector, null, hydrationInfo);
            enterView(rootLView);
            let component;
            let tElementNode;
            try {
              const rootComponentDef = this.componentDef;
              let rootDirectives;
              let hostDirectiveDefs = null;
              if (rootComponentDef.findHostDirectiveDefs) {
                rootDirectives = [];
                hostDirectiveDefs = /* @__PURE__ */ new Map();
                rootComponentDef.findHostDirectiveDefs(rootComponentDef, rootDirectives, hostDirectiveDefs);
                rootDirectives.push(rootComponentDef);
                ngDevMode && assertNoDuplicateDirectives(rootDirectives);
              } else {
                rootDirectives = [rootComponentDef];
              }
              const hostTNode = createRootComponentTNode(rootLView, hostRNode);
              const componentView = createRootComponentView(hostTNode, hostRNode, rootComponentDef, rootDirectives, rootLView, environment2, hostRenderer);
              tElementNode = getTNode(rootTView, HEADER_OFFSET);
              if (hostRNode) {
                setRootNodeAttributes(hostRenderer, rootComponentDef, hostRNode, rootSelectorOrNode);
              }
              if (projectableNodes !== void 0) {
                projectNodes(tElementNode, this.ngContentSelectors, projectableNodes);
              }
              component = createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, [LifecycleHooksFeature]);
              renderView(rootTView, rootLView, null);
            } finally {
              leaveView();
            }
            return new ComponentRef(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);
          } finally {
            setActiveConsumer(prevConsumer);
          }
        }
      };
      ComponentRef = class extends ComponentRef$1 {
        constructor(componentType, instance, location2, _rootLView, _tNode) {
          super();
          this.location = location2;
          this._rootLView = _rootLView;
          this._tNode = _tNode;
          this.previousInputValues = null;
          this.instance = instance;
          this.hostView = this.changeDetectorRef = new ViewRef$1(
            _rootLView,
            void 0,
            /* _cdRefInjectingView */
            false
          );
          this.componentType = componentType;
        }
        setInput(name, value) {
          const inputData = this._tNode.inputs;
          let dataValue;
          if (inputData !== null && (dataValue = inputData[name])) {
            this.previousInputValues ??= /* @__PURE__ */ new Map();
            if (this.previousInputValues.has(name) && Object.is(this.previousInputValues.get(name), value)) {
              return;
            }
            const lView = this._rootLView;
            setInputsForProperty(lView[TVIEW], lView, dataValue, name, value);
            this.previousInputValues.set(name, value);
            const childComponentLView = getComponentLViewByIndex(this._tNode.index, lView);
            markViewDirty(childComponentLView);
          } else {
            if (ngDevMode) {
              const cmpNameForError = stringifyForError(this.componentType);
              let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;
              message += `Make sure that the '${name}' property is annotated with @Input() or a mapped @Input('${name}') exists.`;
              reportUnknownPropertyError(message);
            }
          }
        }
        get injector() {
          return new NodeInjector(this._tNode, this._rootLView);
        }
        destroy() {
          this.hostView.destroy();
        }
        onDestroy(callback) {
          this.hostView.onDestroy(callback);
        }
      };
      ViewContainerRef = class {
        static {
          this.__NG_ELEMENT_ID__ = injectViewContainerRef;
        }
      };
      VE_ViewContainerRef = ViewContainerRef;
      R3ViewContainerRef = class ViewContainerRef2 extends VE_ViewContainerRef {
        constructor(_lContainer, _hostTNode, _hostLView) {
          super();
          this._lContainer = _lContainer;
          this._hostTNode = _hostTNode;
          this._hostLView = _hostLView;
        }
        get element() {
          return createElementRef(this._hostTNode, this._hostLView);
        }
        get injector() {
          return new NodeInjector(this._hostTNode, this._hostLView);
        }
        /** @deprecated No replacement */
        get parentInjector() {
          const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);
          if (hasParentInjector(parentLocation)) {
            const parentView = getParentInjectorView(parentLocation, this._hostLView);
            const injectorIndex = getParentInjectorIndex(parentLocation);
            ngDevMode && assertNodeInjector(parentView, injectorIndex);
            const parentTNode = parentView[TVIEW].data[
              injectorIndex + 8
              /* NodeInjectorOffset.TNODE */
            ];
            return new NodeInjector(parentTNode, parentView);
          } else {
            return new NodeInjector(null, this._hostLView);
          }
        }
        clear() {
          while (this.length > 0) {
            this.remove(this.length - 1);
          }
        }
        get(index) {
          const viewRefs = getViewRefs(this._lContainer);
          return viewRefs !== null && viewRefs[index] || null;
        }
        get length() {
          return this._lContainer.length - CONTAINER_HEADER_OFFSET;
        }
        createEmbeddedView(templateRef, context2, indexOrOptions) {
          let index;
          let injector;
          if (typeof indexOrOptions === "number") {
            index = indexOrOptions;
          } else if (indexOrOptions != null) {
            index = indexOrOptions.index;
            injector = indexOrOptions.injector;
          }
          const dehydratedView = findMatchingDehydratedView(this._lContainer, templateRef.ssrId);
          const viewRef = templateRef.createEmbeddedViewImpl(context2 || {}, injector, dehydratedView);
          this.insertImpl(viewRef, index, shouldAddViewToDom(this._hostTNode, dehydratedView));
          return viewRef;
        }
        createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector) {
          const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);
          let index;
          if (isComponentFactory) {
            if (ngDevMode) {
              assertEqual(typeof indexOrOptions !== "object", true, "It looks like Component factory was provided as the first argument and an options object as the second argument. This combination of arguments is incompatible. You can either change the first argument to provide Component type or change the second argument to be a number (representing an index at which to insert the new component's host view into this container)");
            }
            index = indexOrOptions;
          } else {
            if (ngDevMode) {
              assertDefined(getComponentDef(componentFactoryOrType), `Provided Component class doesn't contain Component definition. Please check whether provided class has @Component decorator.`);
              assertEqual(typeof indexOrOptions !== "number", true, "It looks like Component type was provided as the first argument and a number (representing an index at which to insert the new component's host view into this container as the second argument. This combination of arguments is incompatible. Please use an object as the second argument instead.");
            }
            const options = indexOrOptions || {};
            if (ngDevMode && options.environmentInjector && options.ngModuleRef) {
              throwError2(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);
            }
            index = options.index;
            injector = options.injector;
            projectableNodes = options.projectableNodes;
            environmentInjector = options.environmentInjector || options.ngModuleRef;
          }
          const componentFactory = isComponentFactory ? componentFactoryOrType : new ComponentFactory(getComponentDef(componentFactoryOrType));
          const contextInjector = injector || this.parentInjector;
          if (!environmentInjector && componentFactory.ngModule == null) {
            const _injector = isComponentFactory ? contextInjector : this.parentInjector;
            const result = _injector.get(EnvironmentInjector, null);
            if (result) {
              environmentInjector = result;
            }
          }
          const componentDef = getComponentDef(componentFactory.componentType ?? {});
          const dehydratedView = findMatchingDehydratedView(this._lContainer, componentDef?.id ?? null);
          const rNode = dehydratedView?.firstChild ?? null;
          const componentRef = componentFactory.create(contextInjector, projectableNodes, rNode, environmentInjector);
          this.insertImpl(componentRef.hostView, index, shouldAddViewToDom(this._hostTNode, dehydratedView));
          return componentRef;
        }
        insert(viewRef, index) {
          return this.insertImpl(viewRef, index, true);
        }
        insertImpl(viewRef, index, addToDOM) {
          const lView = viewRef._lView;
          if (ngDevMode && viewRef.destroyed) {
            throw new Error("Cannot insert a destroyed View in a ViewContainer!");
          }
          if (viewAttachedToContainer(lView)) {
            const prevIdx = this.indexOf(viewRef);
            if (prevIdx !== -1) {
              this.detach(prevIdx);
            } else {
              const prevLContainer = lView[PARENT];
              ngDevMode && assertEqual(isLContainer(prevLContainer), true, "An attached view should have its PARENT point to a container.");
              const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);
              prevVCRef.detach(prevVCRef.indexOf(viewRef));
            }
          }
          const adjustedIdx = this._adjustIndex(index);
          const lContainer = this._lContainer;
          addLViewToLContainer(lContainer, lView, adjustedIdx, addToDOM);
          viewRef.attachToViewContainerRef();
          addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);
          return viewRef;
        }
        move(viewRef, newIndex) {
          if (ngDevMode && viewRef.destroyed) {
            throw new Error("Cannot move a destroyed View in a ViewContainer!");
          }
          return this.insert(viewRef, newIndex);
        }
        indexOf(viewRef) {
          const viewRefsArr = getViewRefs(this._lContainer);
          return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;
        }
        remove(index) {
          const adjustedIdx = this._adjustIndex(index, -1);
          const detachedView = detachView(this._lContainer, adjustedIdx);
          if (detachedView) {
            removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);
            destroyLView(detachedView[TVIEW], detachedView);
          }
        }
        detach(index) {
          const adjustedIdx = this._adjustIndex(index, -1);
          const view = detachView(this._lContainer, adjustedIdx);
          const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;
          return wasDetached ? new ViewRef$1(view) : null;
        }
        _adjustIndex(index, shift = 0) {
          if (index == null) {
            return this.length + shift;
          }
          if (ngDevMode) {
            assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);
            assertLessThan(index, this.length + 1 + shift, "index");
          }
          return index;
        }
      };
      _locateOrCreateAnchorNode = createAnchorNode;
      _populateDehydratedViewsInLContainer = () => false;
      LQuery_ = class _LQuery_ {
        constructor(queryList) {
          this.queryList = queryList;
          this.matches = null;
        }
        clone() {
          return new _LQuery_(this.queryList);
        }
        setDirty() {
          this.queryList.setDirty();
        }
      };
      LQueries_ = class _LQueries_ {
        constructor(queries = []) {
          this.queries = queries;
        }
        createEmbeddedView(tView) {
          const tQueries = tView.queries;
          if (tQueries !== null) {
            const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;
            const viewLQueries = [];
            for (let i = 0; i < noOfInheritedQueries; i++) {
              const tQuery = tQueries.getByIndex(i);
              const parentLQuery = this.queries[tQuery.indexInDeclarationView];
              viewLQueries.push(parentLQuery.clone());
            }
            return new _LQueries_(viewLQueries);
          }
          return null;
        }
        insertView(tView) {
          this.dirtyQueriesWithMatches(tView);
        }
        detachView(tView) {
          this.dirtyQueriesWithMatches(tView);
        }
        finishViewCreation(tView) {
          this.dirtyQueriesWithMatches(tView);
        }
        dirtyQueriesWithMatches(tView) {
          for (let i = 0; i < this.queries.length; i++) {
            if (getTQuery(tView, i).matches !== null) {
              this.queries[i].setDirty();
            }
          }
        }
      };
      TQueryMetadata_ = class {
        constructor(predicate, flags, read = null) {
          this.flags = flags;
          this.read = read;
          if (typeof predicate === "string") {
            this.predicate = splitQueryMultiSelectors(predicate);
          } else {
            this.predicate = predicate;
          }
        }
      };
      TQueries_ = class _TQueries_ {
        constructor(queries = []) {
          this.queries = queries;
        }
        elementStart(tView, tNode) {
          ngDevMode && assertFirstCreatePass(tView, "Queries should collect results on the first template pass only");
          for (let i = 0; i < this.queries.length; i++) {
            this.queries[i].elementStart(tView, tNode);
          }
        }
        elementEnd(tNode) {
          for (let i = 0; i < this.queries.length; i++) {
            this.queries[i].elementEnd(tNode);
          }
        }
        embeddedTView(tNode) {
          let queriesForTemplateRef = null;
          for (let i = 0; i < this.length; i++) {
            const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;
            const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);
            if (tqueryClone) {
              tqueryClone.indexInDeclarationView = i;
              if (queriesForTemplateRef !== null) {
                queriesForTemplateRef.push(tqueryClone);
              } else {
                queriesForTemplateRef = [tqueryClone];
              }
            }
          }
          return queriesForTemplateRef !== null ? new _TQueries_(queriesForTemplateRef) : null;
        }
        template(tView, tNode) {
          ngDevMode && assertFirstCreatePass(tView, "Queries should collect results on the first template pass only");
          for (let i = 0; i < this.queries.length; i++) {
            this.queries[i].template(tView, tNode);
          }
        }
        getByIndex(index) {
          ngDevMode && assertIndexInRange(this.queries, index);
          return this.queries[index];
        }
        get length() {
          return this.queries.length;
        }
        track(tquery) {
          this.queries.push(tquery);
        }
      };
      TQuery_ = class _TQuery_ {
        constructor(metadata, nodeIndex = -1) {
          this.metadata = metadata;
          this.matches = null;
          this.indexInDeclarationView = -1;
          this.crossesNgTemplate = false;
          this._appliesToNextNode = true;
          this._declarationNodeIndex = nodeIndex;
        }
        elementStart(tView, tNode) {
          if (this.isApplyingToNode(tNode)) {
            this.matchTNode(tView, tNode);
          }
        }
        elementEnd(tNode) {
          if (this._declarationNodeIndex === tNode.index) {
            this._appliesToNextNode = false;
          }
        }
        template(tView, tNode) {
          this.elementStart(tView, tNode);
        }
        embeddedTView(tNode, childQueryIndex) {
          if (this.isApplyingToNode(tNode)) {
            this.crossesNgTemplate = true;
            this.addMatch(-tNode.index, childQueryIndex);
            return new _TQuery_(this.metadata);
          }
          return null;
        }
        isApplyingToNode(tNode) {
          if (this._appliesToNextNode && (this.metadata.flags & 1) !== 1) {
            const declarationNodeIdx = this._declarationNodeIndex;
            let parent = tNode.parent;
            while (parent !== null && parent.type & 8 && parent.index !== declarationNodeIdx) {
              parent = parent.parent;
            }
            return declarationNodeIdx === (parent !== null ? parent.index : -1);
          }
          return this._appliesToNextNode;
        }
        matchTNode(tView, tNode) {
          const predicate = this.metadata.predicate;
          if (Array.isArray(predicate)) {
            for (let i = 0; i < predicate.length; i++) {
              const name = predicate[i];
              this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));
              this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));
            }
          } else {
            if (predicate === TemplateRef) {
              if (tNode.type & 4) {
                this.matchTNodeWithReadOption(tView, tNode, -1);
              }
            } else {
              this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));
            }
          }
        }
        matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {
          if (nodeMatchIdx !== null) {
            const read = this.metadata.read;
            if (read !== null) {
              if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4) {
                this.addMatch(tNode.index, -2);
              } else {
                const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);
                if (directiveOrProviderIdx !== null) {
                  this.addMatch(tNode.index, directiveOrProviderIdx);
                }
              }
            } else {
              this.addMatch(tNode.index, nodeMatchIdx);
            }
          }
        }
        addMatch(tNodeIdx, matchIdx) {
          if (this.matches === null) {
            this.matches = [tNodeIdx, matchIdx];
          } else {
            this.matches.push(tNodeIdx, matchIdx);
          }
        }
      };
      viewChild = (() => {
        viewChildFn.required = viewChildRequiredFn;
        return viewChildFn;
      })();
      contentChild = (() => {
        contentChildFn.required = contentChildRequiredFn;
        return contentChildFn;
      })();
      model = (() => {
        modelFunction.required = modelRequiredFunction;
        return modelFunction;
      })();
      emitDistinctChangesOnlyDefaultValue = true;
      Query = class {
      };
      ContentChildren = makePropDecorator("ContentChildren", (selector, opts = {}) => ({
        selector,
        first: false,
        isViewQuery: false,
        descendants: false,
        emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,
        ...opts
      }), Query);
      ContentChild = makePropDecorator("ContentChild", (selector, opts = {}) => ({ selector, first: true, isViewQuery: false, descendants: true, ...opts }), Query);
      ViewChildren = makePropDecorator("ViewChildren", (selector, opts = {}) => ({
        selector,
        first: false,
        isViewQuery: true,
        descendants: true,
        emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,
        ...opts
      }), Query);
      ViewChild = makePropDecorator("ViewChild", (selector, opts) => ({ selector, first: true, isViewQuery: true, descendants: true, ...opts }), Query);
      componentResourceResolutionQueue = /* @__PURE__ */ new Map();
      componentDefPendingResolution = /* @__PURE__ */ new Set();
      modules = /* @__PURE__ */ new Map();
      checkForDuplicateNgModules = true;
      COPY_DIRECTIVE_FIELDS = [
        // The child class should use the providers of its parent.
        "providersResolver"
        // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such
        // as inputs, outputs, and host binding functions.
      ];
      COPY_COMPONENT_FIELDS = [
        // The child class should use the template function of its parent, including all template
        // semantics.
        "template",
        "decls",
        "consts",
        "vars",
        "onPush",
        "ngContentSelectors",
        // The child class should use the CSS styles of its parent, including all styling semantics.
        "styles",
        "encapsulation",
        // The child class should be checked by the runtime in the same way as its parent.
        "schemas"
      ];
      NgModuleRef$1 = class {
      };
      NgModuleFactory$1 = class {
      };
      createNgModuleRef = createNgModule;
      NgModuleRef = class extends NgModuleRef$1 {
        constructor(ngModuleType, _parent, additionalProviders) {
          super();
          this._parent = _parent;
          this._bootstrapComponents = [];
          this.destroyCbs = [];
          this.componentFactoryResolver = new ComponentFactoryResolver(this);
          const ngModuleDef = getNgModuleDef(ngModuleType);
          ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);
          this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);
          this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [
            { provide: NgModuleRef$1, useValue: this },
            {
              provide: ComponentFactoryResolver$1,
              useValue: this.componentFactoryResolver
            },
            ...additionalProviders
          ], stringify(ngModuleType), /* @__PURE__ */ new Set(["environment"]));
          this._r3Injector.resolveInjectorInitializers();
          this.instance = this._r3Injector.get(ngModuleType);
        }
        get injector() {
          return this._r3Injector;
        }
        destroy() {
          ngDevMode && assertDefined(this.destroyCbs, "NgModule already destroyed");
          const injector = this._r3Injector;
          !injector.destroyed && injector.destroy();
          this.destroyCbs.forEach((fn2) => fn2());
          this.destroyCbs = null;
        }
        onDestroy(callback) {
          ngDevMode && assertDefined(this.destroyCbs, "NgModule already destroyed");
          this.destroyCbs.push(callback);
        }
      };
      NgModuleFactory = class extends NgModuleFactory$1 {
        constructor(moduleType) {
          super();
          this.moduleType = moduleType;
        }
        create(parentInjector) {
          return new NgModuleRef(this.moduleType, parentInjector, []);
        }
      };
      EnvironmentNgModuleRefAdapter = class extends NgModuleRef$1 {
        constructor(config4) {
          super();
          this.componentFactoryResolver = new ComponentFactoryResolver(this);
          this.instance = null;
          const injector = new R3Injector([
            ...config4.providers,
            { provide: NgModuleRef$1, useValue: this },
            { provide: ComponentFactoryResolver$1, useValue: this.componentFactoryResolver }
          ], config4.parent || getNullInjector(), config4.debugName, /* @__PURE__ */ new Set(["environment"]));
          this.injector = injector;
          if (config4.runEnvironmentInitializers) {
            injector.resolveInjectorInitializers();
          }
        }
        destroy() {
          this.injector.destroy();
        }
        onDestroy(callback) {
          this.injector.onDestroy(callback);
        }
      };
      CachedInjectorService = class _CachedInjectorService {
        constructor() {
          this.cachedInjectors = /* @__PURE__ */ new Map();
        }
        getOrCreateInjector(key, parentInjector, providers, debugName) {
          if (!this.cachedInjectors.has(key)) {
            const injector = providers.length > 0 ? createEnvironmentInjector(providers, parentInjector, debugName) : null;
            this.cachedInjectors.set(key, injector);
          }
          return this.cachedInjectors.get(key);
        }
        ngOnDestroy() {
          try {
            for (const injector of this.cachedInjectors.values()) {
              if (injector !== null) {
                injector.destroy();
              }
            }
          } finally {
            this.cachedInjectors.clear();
          }
        }
        static {
          this.\u0275prov = \u0275\u0275defineInjectable({
            token: _CachedInjectorService,
            providedIn: "environment",
            factory: () => new _CachedInjectorService()
          });
        }
      };
      ASYNC_COMPONENT_METADATA_FN = "__ngAsyncComponentMetadataFn__";
      PendingTasks = class _PendingTasks {
        constructor() {
          this.taskId = 0;
          this.pendingTasks = /* @__PURE__ */ new Set();
          this.hasPendingTasks = new BehaviorSubject(false);
        }
        get _hasPendingTasks() {
          return this.hasPendingTasks.value;
        }
        add() {
          if (!this._hasPendingTasks) {
            this.hasPendingTasks.next(true);
          }
          const taskId = this.taskId++;
          this.pendingTasks.add(taskId);
          return taskId;
        }
        remove(taskId) {
          this.pendingTasks.delete(taskId);
          if (this.pendingTasks.size === 0 && this._hasPendingTasks) {
            this.hasPendingTasks.next(false);
          }
        }
        ngOnDestroy() {
          this.pendingTasks.clear();
          if (this._hasPendingTasks) {
            this.hasPendingTasks.next(false);
          }
        }
        static {
          this.\u0275fac = function PendingTasks_Factory(t) {
            return new (t || _PendingTasks)();
          };
        }
        static {
          this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _PendingTasks, factory: _PendingTasks.\u0275fac, providedIn: "root" });
        }
      };
      (() => {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PendingTasks, [{
          type: Injectable,
          args: [{ providedIn: "root" }]
        }], null, null);
      })();
      _locateOrCreateContainerAnchor = createContainerAnchorImpl;
      (function(DeferDependenciesLoadingState2) {
        DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["NOT_STARTED"] = 0] = "NOT_STARTED";
        DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["IN_PROGRESS"] = 1] = "IN_PROGRESS";
        DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["COMPLETE"] = 2] = "COMPLETE";
        DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["FAILED"] = 3] = "FAILED";
      })(DeferDependenciesLoadingState || (DeferDependenciesLoadingState = {}));
      MINIMUM_SLOT = 0;
      LOADING_AFTER_SLOT = 1;
      (function(DeferBlockState2) {
        DeferBlockState2[DeferBlockState2["Placeholder"] = 0] = "Placeholder";
        DeferBlockState2[DeferBlockState2["Loading"] = 1] = "Loading";
        DeferBlockState2[DeferBlockState2["Complete"] = 2] = "Complete";
        DeferBlockState2[DeferBlockState2["Error"] = 3] = "Error";
      })(DeferBlockState || (DeferBlockState = {}));
      (function(DeferBlockInternalState2) {
        DeferBlockInternalState2[DeferBlockInternalState2["Initial"] = -1] = "Initial";
      })(DeferBlockInternalState || (DeferBlockInternalState = {}));
      NEXT_DEFER_BLOCK_STATE = 0;
      DEFER_BLOCK_STATE = 1;
      STATE_IS_FROZEN_UNTIL = 2;
      LOADING_AFTER_CLEANUP_FN = 3;
      TRIGGER_CLEANUP_FNS = 4;
      PREFETCH_TRIGGER_CLEANUP_FNS = 5;
      (function(DeferBlockBehavior2) {
        DeferBlockBehavior2[DeferBlockBehavior2["Manual"] = 0] = "Manual";
        DeferBlockBehavior2[DeferBlockBehavior2["Playthrough"] = 1] = "Playthrough";
      })(DeferBlockBehavior || (DeferBlockBehavior = {}));
      eventListenerOptions = {
        passive: true,
        capture: true
      };
      hoverTriggers = /* @__PURE__ */ new WeakMap();
      interactionTriggers = /* @__PURE__ */ new WeakMap();
      viewportTriggers = /* @__PURE__ */ new WeakMap();
      interactionEventNames = ["click", "keydown"];
      hoverEventNames = ["mouseenter", "focusin"];
      intersectionObserver = null;
      observedViewportElements = 0;
      DeferEventEntry = class {
        constructor() {
          this.callbacks = /* @__PURE__ */ new Set();
          this.listener = () => {
            for (const callback of this.callbacks) {
              callback();
            }
          };
        }
      };
      _requestIdleCallback = () => typeof requestIdleCallback !== "undefined" ? requestIdleCallback : setTimeout;
      _cancelIdleCallback = () => typeof requestIdleCallback !== "undefined" ? cancelIdleCallback : clearTimeout;
      IdleScheduler = class _IdleScheduler {
        constructor() {
          this.executingCallbacks = false;
          this.idleId = null;
          this.current = /* @__PURE__ */ new Set();
          this.deferred = /* @__PURE__ */ new Set();
          this.ngZone = inject(NgZone);
          this.requestIdleCallbackFn = _requestIdleCallback().bind(globalThis);
          this.cancelIdleCallbackFn = _cancelIdleCallback().bind(globalThis);
        }
        add(callback) {
          const target = this.executingCallbacks ? this.deferred : this.current;
          target.add(callback);
          if (this.idleId === null) {
            this.scheduleIdleCallback();
          }
        }
        remove(callback) {
          const { current, deferred } = this;
          current.delete(callback);
          deferred.delete(callback);
          if (current.size === 0 && deferred.size === 0) {
            this.cancelIdleCallback();
          }
        }
        scheduleIdleCallback() {
          const callback = () => {
            this.cancelIdleCallback();
            this.executingCallbacks = true;
            for (const callback2 of this.current) {
              callback2();
            }
            this.current.clear();
            this.executingCallbacks = false;
            if (this.deferred.size > 0) {
              for (const callback2 of this.deferred) {
                this.current.add(callback2);
              }
              this.deferred.clear();
              this.scheduleIdleCallback();
            }
          };
          this.idleId = this.requestIdleCallbackFn(() => this.ngZone.run(callback));
        }
        cancelIdleCallback() {
          if (this.idleId !== null) {
            this.cancelIdleCallbackFn(this.idleId);
            this.idleId = null;
          }
        }
        ngOnDestroy() {
          this.cancelIdleCallback();
          this.current.clear();
          this.deferred.clear();
        }
        static {
          this.\u0275prov = \u0275\u0275defineInjectable({
            token: _IdleScheduler,
            providedIn: "root",
            factory: () => new _IdleScheduler()
          });
        }
      };
      TimerScheduler = class _TimerScheduler {
        constructor() {
          this.executingCallbacks = false;
          this.timeoutId = null;
          this.invokeTimerAt = null;
          this.current = [];
          this.deferred = [];
        }
        add(delay, callback) {
          const target = this.executingCallbacks ? this.deferred : this.current;
          this.addToQueue(target, Date.now() + delay, callback);
          this.scheduleTimer();
        }
        remove(callback) {
          const { current, deferred } = this;
          const callbackIndex = this.removeFromQueue(current, callback);
          if (callbackIndex === -1) {
            this.removeFromQueue(deferred, callback);
          }
          if (current.length === 0 && deferred.length === 0) {
            this.clearTimeout();
          }
        }
        addToQueue(target, invokeAt, callback) {
          let insertAtIndex = target.length;
          for (let i = 0; i < target.length; i += 2) {
            const invokeQueuedCallbackAt = target[i];
            if (invokeQueuedCallbackAt > invokeAt) {
              insertAtIndex = i;
              break;
            }
          }
          arrayInsert2(target, insertAtIndex, invokeAt, callback);
        }
        removeFromQueue(target, callback) {
          let index = -1;
          for (let i = 0; i < target.length; i += 2) {
            const queuedCallback = target[i + 1];
            if (queuedCallback === callback) {
              index = i;
              break;
            }
          }
          if (index > -1) {
            arraySplice(target, index, 2);
          }
          return index;
        }
        scheduleTimer() {
          const callback = () => {
            this.clearTimeout();
            this.executingCallbacks = true;
            const current = [...this.current];
            const now2 = Date.now();
            for (let i = 0; i < current.length; i += 2) {
              const invokeAt = current[i];
              const callback2 = current[i + 1];
              if (invokeAt <= now2) {
                callback2();
              } else {
                break;
              }
            }
            let lastCallbackIndex = -1;
            for (let i = 0; i < this.current.length; i += 2) {
              const invokeAt = this.current[i];
              if (invokeAt <= now2) {
                lastCallbackIndex = i + 1;
              } else {
                break;
              }
            }
            if (lastCallbackIndex >= 0) {
              arraySplice(this.current, 0, lastCallbackIndex + 1);
            }
            this.executingCallbacks = false;
            if (this.deferred.length > 0) {
              for (let i = 0; i < this.deferred.length; i += 2) {
                const invokeAt = this.deferred[i];
                const callback2 = this.deferred[i + 1];
                this.addToQueue(this.current, invokeAt, callback2);
              }
              this.deferred.length = 0;
            }
            this.scheduleTimer();
          };
          const FRAME_DURATION_MS = 16;
          if (this.current.length > 0) {
            const now2 = Date.now();
            const invokeAt = this.current[0];
            if (this.timeoutId === null || // Reschedule a timer in case a queue contains an item with
            // an earlier timestamp and the delta is more than an average
            // frame duration.
            this.invokeTimerAt && this.invokeTimerAt - invokeAt > FRAME_DURATION_MS) {
              this.clearTimeout();
              const timeout = Math.max(invokeAt - now2, FRAME_DURATION_MS);
              this.invokeTimerAt = invokeAt;
              this.timeoutId = setTimeout(callback, timeout);
            }
          }
        }
        clearTimeout() {
          if (this.timeoutId !== null) {
            clearTimeout(this.timeoutId);
            this.timeoutId = null;
          }
        }
        ngOnDestroy() {
          this.clearTimeout();
          this.current.length = 0;
          this.deferred.length = 0;
        }
        static {
          this.\u0275prov = \u0275\u0275defineInjectable({
            token: _TimerScheduler,
            providedIn: "root",
            factory: () => new _TimerScheduler()
          });
        }
      };
      DEFER_BLOCK_DEPENDENCY_INTERCEPTOR = new InjectionToken("DEFER_BLOCK_DEPENDENCY_INTERCEPTOR");
      DEFER_BLOCK_CONFIG = new InjectionToken(ngDevMode ? "DEFER_BLOCK_CONFIG" : "");
      applyDeferBlockStateWithSchedulingImpl = null;
      parserState = {
        textEnd: 0,
        key: 0,
        keyEnd: 0,
        value: 0,
        valueEnd: 0
      };
      LiveCollection = class {
        destroy(item) {
        }
        updateValue(index, value) {
        }
        // operations below could be implemented on top of the operations defined so far, but having
        // them explicitly allow clear expression of intent and potentially more performant
        // implementations
        swap(index1, index2) {
          const startIdx = Math.min(index1, index2);
          const endIdx = Math.max(index1, index2);
          const endItem = this.detach(endIdx);
          if (endIdx - startIdx > 1) {
            const startItem = this.detach(startIdx);
            this.attach(startIdx, endItem);
            this.attach(endIdx, startItem);
          } else {
            this.attach(startIdx, endItem);
          }
        }
        move(prevIndex, newIdx) {
          this.attach(newIdx, this.detach(prevIndex));
        }
      };
      UniqueValueMultiKeyMap = class {
        constructor() {
          this.kvMap = /* @__PURE__ */ new Map();
          this._vMap = void 0;
        }
        has(key) {
          return this.kvMap.has(key);
        }
        delete(key) {
          if (!this.has(key))
            return false;
          const value = this.kvMap.get(key);
          if (this._vMap !== void 0 && this._vMap.has(value)) {
            this.kvMap.set(key, this._vMap.get(value));
            this._vMap.delete(value);
          } else {
            this.kvMap.delete(key);
          }
          return true;
        }
        get(key) {
          return this.kvMap.get(key);
        }
        set(key, value) {
          if (this.kvMap.has(key)) {
            let prevValue = this.kvMap.get(key);
            ngDevMode && assertNotSame(prevValue, value, `Detected a duplicated value ${value} for the key ${key}`);
            if (this._vMap === void 0) {
              this._vMap = /* @__PURE__ */ new Map();
            }
            const vMap = this._vMap;
            while (vMap.has(prevValue)) {
              prevValue = vMap.get(prevValue);
            }
            vMap.set(prevValue, value);
          } else {
            this.kvMap.set(key, value);
          }
        }
        forEach(cb) {
          for (let [key, value] of this.kvMap) {
            cb(value, key);
            if (this._vMap !== void 0) {
              const vMap = this._vMap;
              while (vMap.has(value)) {
                value = vMap.get(value);
                cb(value, key);
              }
            }
          }
        }
      };
      RepeaterContext = class {
        constructor(lContainer, $implicit, $index) {
          this.lContainer = lContainer;
          this.$implicit = $implicit;
          this.$index = $index;
        }
        get $count() {
          return this.lContainer.length - CONTAINER_HEADER_OFFSET;
        }
      };
      RepeaterMetadata = class {
        constructor(hasEmptyBlock, trackByFn, liveCollection) {
          this.hasEmptyBlock = hasEmptyBlock;
          this.trackByFn = trackByFn;
          this.liveCollection = liveCollection;
        }
      };
      LiveCollectionLContainerImpl = class extends LiveCollection {
        constructor(lContainer, hostLView, templateTNode) {
          super();
          this.lContainer = lContainer;
          this.hostLView = hostLView;
          this.templateTNode = templateTNode;
          this.needsIndexUpdate = false;
        }
        get length() {
          return this.lContainer.length - CONTAINER_HEADER_OFFSET;
        }
        at(index) {
          return this.getLView(index)[CONTEXT].$implicit;
        }
        attach(index, lView) {
          const dehydratedView = lView[HYDRATION];
          this.needsIndexUpdate ||= index !== this.length;
          addLViewToLContainer(this.lContainer, lView, index, shouldAddViewToDom(this.templateTNode, dehydratedView));
        }
        detach(index) {
          this.needsIndexUpdate ||= index !== this.length - 1;
          return detachExistingView(this.lContainer, index);
        }
        create(index, value) {
          const dehydratedView = findMatchingDehydratedView(this.lContainer, this.templateTNode.tView.ssrId);
          const embeddedLView = createAndRenderEmbeddedLView(this.hostLView, this.templateTNode, new RepeaterContext(this.lContainer, value, index), { dehydratedView });
          return embeddedLView;
        }
        destroy(lView) {
          destroyLView(lView[TVIEW], lView);
        }
        updateValue(index, value) {
          this.getLView(index)[CONTEXT].$implicit = value;
        }
        reset() {
          this.needsIndexUpdate = false;
        }
        updateIndexes() {
          if (this.needsIndexUpdate) {
            for (let i = 0; i < this.length; i++) {
              this.getLView(i)[CONTEXT].$index = i;
            }
          }
        }
        getLView(index) {
          return getExistingLViewFromLContainer(this.lContainer, index);
        }
      };
      _locateOrCreateElementNode = (tView, lView, tNode, renderer, name, index) => {
        lastNodeWasCreated(true);
        return createElementNode(renderer, name, getNamespace$1());
      };
      _locateOrCreateElementContainerNode = (tView, lView, tNode, index) => {
        lastNodeWasCreated(true);
        return createCommentNode(lView[RENDERER], ngDevMode ? "ng-container" : "");
      };
      if (typeof ngI18nClosureMode === "undefined") {
        (function() {
          _global["ngI18nClosureMode"] = // TODO(FW-1250): validate that this actually, you know, works.
          // tslint:disable-next-line:no-toplevel-property-access
          typeof goog !== "undefined" && typeof goog.getMsg === "function";
        })();
      }
      u = void 0;
      localeEn = ["en", [["a", "p"], ["AM", "PM"], u], [["AM", "PM"], u, u], [["S", "M", "T", "W", "T", "F", "S"], ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]], u, [["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]], u, [["B", "A"], ["BC", "AD"], ["Before Christ", "Anno Domini"]], 0, [6, 0], ["M/d/yy", "MMM d, y", "MMMM d, y", "EEEE, MMMM d, y"], ["h:mm a", "h:mm:ss a", "h:mm:ss a z", "h:mm:ss a zzzz"], ["{1}, {0}", u, "{1} 'at' {0}", u], [".", ",", ";", "%", "+", "-", "E", "\xD7", "\u2030", "\u221E", "NaN", ":"], ["#,##0.###", "#,##0%", "\xA4#,##0.00", "#E0"], "USD", "$", "US Dollar", {}, "ltr", plural];
      LOCALE_DATA = {};
      (function(LocaleDataIndex2) {
        LocaleDataIndex2[LocaleDataIndex2["LocaleId"] = 0] = "LocaleId";
        LocaleDataIndex2[LocaleDataIndex2["DayPeriodsFormat"] = 1] = "DayPeriodsFormat";
        LocaleDataIndex2[LocaleDataIndex2["DayPeriodsStandalone"] = 2] = "DayPeriodsStandalone";
        LocaleDataIndex2[LocaleDataIndex2["DaysFormat"] = 3] = "DaysFormat";
        LocaleDataIndex2[LocaleDataIndex2["DaysStandalone"] = 4] = "DaysStandalone";
        LocaleDataIndex2[LocaleDataIndex2["MonthsFormat"] = 5] = "MonthsFormat";
        LocaleDataIndex2[LocaleDataIndex2["MonthsStandalone"] = 6] = "MonthsStandalone";
        LocaleDataIndex2[LocaleDataIndex2["Eras"] = 7] = "Eras";
        LocaleDataIndex2[LocaleDataIndex2["FirstDayOfWeek"] = 8] = "FirstDayOfWeek";
        LocaleDataIndex2[LocaleDataIndex2["WeekendRange"] = 9] = "WeekendRange";
        LocaleDataIndex2[LocaleDataIndex2["DateFormat"] = 10] = "DateFormat";
        LocaleDataIndex2[LocaleDataIndex2["TimeFormat"] = 11] = "TimeFormat";
        LocaleDataIndex2[LocaleDataIndex2["DateTimeFormat"] = 12] = "DateTimeFormat";
        LocaleDataIndex2[LocaleDataIndex2["NumberSymbols"] = 13] = "NumberSymbols";
        LocaleDataIndex2[LocaleDataIndex2["NumberFormats"] = 14] = "NumberFormats";
        LocaleDataIndex2[LocaleDataIndex2["CurrencyCode"] = 15] = "CurrencyCode";
        LocaleDataIndex2[LocaleDataIndex2["CurrencySymbol"] = 16] = "CurrencySymbol";
        LocaleDataIndex2[LocaleDataIndex2["CurrencyName"] = 17] = "CurrencyName";
        LocaleDataIndex2[LocaleDataIndex2["Currencies"] = 18] = "Currencies";
        LocaleDataIndex2[LocaleDataIndex2["Directionality"] = 19] = "Directionality";
        LocaleDataIndex2[LocaleDataIndex2["PluralCase"] = 20] = "PluralCase";
        LocaleDataIndex2[LocaleDataIndex2["ExtraData"] = 21] = "ExtraData";
      })(LocaleDataIndex || (LocaleDataIndex = {}));
      pluralMapping = ["zero", "one", "two", "few", "many"];
      DEFAULT_LOCALE_ID = "en-US";
      USD_CURRENCY_CODE = "USD";
      ELEMENT_MARKER = {
        marker: "element"
      };
      ICU_MARKER = {
        marker: "ICU"
      };
      (function(I18nCreateOpCode2) {
        I18nCreateOpCode2[I18nCreateOpCode2["SHIFT"] = 2] = "SHIFT";
        I18nCreateOpCode2[I18nCreateOpCode2["APPEND_EAGERLY"] = 1] = "APPEND_EAGERLY";
        I18nCreateOpCode2[I18nCreateOpCode2["COMMENT"] = 2] = "COMMENT";
      })(I18nCreateOpCode || (I18nCreateOpCode = {}));
      LOCALE_ID$1 = DEFAULT_LOCALE_ID;
      changeMask = 0;
      changeMaskCounter = 0;
      _locateOrCreateNode = (lView, index, textOrName, nodeType) => {
        lastNodeWasCreated(true);
        return createNodeWithoutHydration(lView, textOrName, nodeType);
      };
      OpCodeParser = class {
        constructor(codes) {
          this.i = 0;
          this.codes = codes;
        }
        hasMore() {
          return this.i < this.codes.length;
        }
        consumeNumber() {
          let value = this.codes[this.i++];
          assertNumber(value, "expecting number in OpCode");
          return value;
        }
        consumeString() {
          let value = this.codes[this.i++];
          assertString(value, "expecting string in OpCode");
          return value;
        }
        consumeFunction() {
          let value = this.codes[this.i++];
          if (value === null || typeof value === "function") {
            return value;
          }
          throw new Error("expecting function in OpCode");
        }
        consumeNumberOrString() {
          let value = this.codes[this.i++];
          if (typeof value === "string") {
            return value;
          }
          assertNumber(value, "expecting number or string in OpCode");
          return value;
        }
        consumeNumberStringOrMarker() {
          let value = this.codes[this.i++];
          if (typeof value === "string" || typeof value === "number" || value == ICU_MARKER || value == ELEMENT_MARKER) {
            return value;
          }
          assertNumber(value, "expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode");
          return value;
        }
      };
      BINDING_REGEXP = /�(\d+):?\d*�/gi;
      ICU_REGEXP = /({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi;
      NESTED_ICU = /�(\d+)�/;
      ICU_BLOCK_REGEXP = /^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/;
      MARKER = `\uFFFD`;
      SUBTEMPLATE_REGEXP = /�\/?\*(\d+:\d+)�/gi;
      PH_REGEXP = /�(\/?[#*]\d+):?\d*�/gi;
      NGSP_UNICODE_REGEXP = /\uE500/g;
      ROOT_TEMPLATE_ID = 0;
      PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]/;
      PP_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g;
      PP_ICU_VARS_REGEXP = /({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g;
      PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;
      PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\d+)?)�/g;
      PP_CLOSE_TEMPLATE_REGEXP = /\/\*/;
      PP_TEMPLATE_ID_REGEXP = /\d+\:(\d+)/;
      _locateOrCreateTextNode = (tView, lView, tNode, value, index) => {
        lastNodeWasCreated(true);
        return createTextNode(lView[RENDERER], value);
      };
      StandaloneService = class _StandaloneService {
        constructor(_injector) {
          this._injector = _injector;
          this.cachedInjectors = /* @__PURE__ */ new Map();
        }
        getOrCreateStandaloneInjector(componentDef) {
          if (!componentDef.standalone) {
            return null;
          }
          if (!this.cachedInjectors.has(componentDef)) {
            const providers = internalImportProvidersFrom(false, componentDef.type);
            const standaloneInjector = providers.length > 0 ? createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) : null;
            this.cachedInjectors.set(componentDef, standaloneInjector);
          }
          return this.cachedInjectors.get(componentDef);
        }
        ngOnDestroy() {
          try {
            for (const injector of this.cachedInjectors.values()) {
              if (injector !== null) {
                injector.destroy();
              }
            }
          } finally {
            this.cachedInjectors.clear();
          }
        }
        static {
          this.\u0275prov = \u0275\u0275defineInjectable({
            token: _StandaloneService,
            providedIn: "environment",
            factory: () => new _StandaloneService(\u0275\u0275inject(EnvironmentInjector))
          });
        }
      };
      angularCoreEnv = /* @__PURE__ */ (() => ({
        "\u0275\u0275attribute": \u0275\u0275attribute,
        "\u0275\u0275attributeInterpolate1": \u0275\u0275attributeInterpolate1,
        "\u0275\u0275attributeInterpolate2": \u0275\u0275attributeInterpolate2,
        "\u0275\u0275attributeInterpolate3": \u0275\u0275attributeInterpolate3,
        "\u0275\u0275attributeInterpolate4": \u0275\u0275attributeInterpolate4,
        "\u0275\u0275attributeInterpolate5": \u0275\u0275attributeInterpolate5,
        "\u0275\u0275attributeInterpolate6": \u0275\u0275attributeInterpolate6,
        "\u0275\u0275attributeInterpolate7": \u0275\u0275attributeInterpolate7,
        "\u0275\u0275attributeInterpolate8": \u0275\u0275attributeInterpolate8,
        "\u0275\u0275attributeInterpolateV": \u0275\u0275attributeInterpolateV,
        "\u0275\u0275defineComponent": \u0275\u0275defineComponent,
        "\u0275\u0275defineDirective": \u0275\u0275defineDirective,
        "\u0275\u0275defineInjectable": \u0275\u0275defineInjectable,
        "\u0275\u0275defineInjector": \u0275\u0275defineInjector,
        "\u0275\u0275defineNgModule": \u0275\u0275defineNgModule,
        "\u0275\u0275definePipe": \u0275\u0275definePipe,
        "\u0275\u0275directiveInject": \u0275\u0275directiveInject,
        "\u0275\u0275getInheritedFactory": \u0275\u0275getInheritedFactory,
        "\u0275\u0275inject": \u0275\u0275inject,
        "\u0275\u0275injectAttribute": \u0275\u0275injectAttribute,
        "\u0275\u0275invalidFactory": \u0275\u0275invalidFactory,
        "\u0275\u0275invalidFactoryDep": \u0275\u0275invalidFactoryDep,
        "\u0275\u0275templateRefExtractor": \u0275\u0275templateRefExtractor,
        "\u0275\u0275resetView": \u0275\u0275resetView,
        "\u0275\u0275HostDirectivesFeature": \u0275\u0275HostDirectivesFeature,
        "\u0275\u0275NgOnChangesFeature": \u0275\u0275NgOnChangesFeature,
        "\u0275\u0275ProvidersFeature": \u0275\u0275ProvidersFeature,
        "\u0275\u0275CopyDefinitionFeature": \u0275\u0275CopyDefinitionFeature,
        "\u0275\u0275InheritDefinitionFeature": \u0275\u0275InheritDefinitionFeature,
        "\u0275\u0275InputTransformsFeature": \u0275\u0275InputTransformsFeature,
        "\u0275\u0275StandaloneFeature": \u0275\u0275StandaloneFeature,
        "\u0275\u0275nextContext": \u0275\u0275nextContext,
        "\u0275\u0275namespaceHTML": \u0275\u0275namespaceHTML,
        "\u0275\u0275namespaceMathML": \u0275\u0275namespaceMathML,
        "\u0275\u0275namespaceSVG": \u0275\u0275namespaceSVG,
        "\u0275\u0275enableBindings": \u0275\u0275enableBindings,
        "\u0275\u0275disableBindings": \u0275\u0275disableBindings,
        "\u0275\u0275elementStart": \u0275\u0275elementStart,
        "\u0275\u0275elementEnd": \u0275\u0275elementEnd,
        "\u0275\u0275element": \u0275\u0275element,
        "\u0275\u0275elementContainerStart": \u0275\u0275elementContainerStart,
        "\u0275\u0275elementContainerEnd": \u0275\u0275elementContainerEnd,
        "\u0275\u0275elementContainer": \u0275\u0275elementContainer,
        "\u0275\u0275pureFunction0": \u0275\u0275pureFunction0,
        "\u0275\u0275pureFunction1": \u0275\u0275pureFunction1,
        "\u0275\u0275pureFunction2": \u0275\u0275pureFunction2,
        "\u0275\u0275pureFunction3": \u0275\u0275pureFunction3,
        "\u0275\u0275pureFunction4": \u0275\u0275pureFunction4,
        "\u0275\u0275pureFunction5": \u0275\u0275pureFunction5,
        "\u0275\u0275pureFunction6": \u0275\u0275pureFunction6,
        "\u0275\u0275pureFunction7": \u0275\u0275pureFunction7,
        "\u0275\u0275pureFunction8": \u0275\u0275pureFunction8,
        "\u0275\u0275pureFunctionV": \u0275\u0275pureFunctionV,
        "\u0275\u0275getCurrentView": \u0275\u0275getCurrentView,
        "\u0275\u0275restoreView": \u0275\u0275restoreView,
        "\u0275\u0275listener": \u0275\u0275listener,
        "\u0275\u0275projection": \u0275\u0275projection,
        "\u0275\u0275syntheticHostProperty": \u0275\u0275syntheticHostProperty,
        "\u0275\u0275syntheticHostListener": \u0275\u0275syntheticHostListener,
        "\u0275\u0275pipeBind1": \u0275\u0275pipeBind1,
        "\u0275\u0275pipeBind2": \u0275\u0275pipeBind2,
        "\u0275\u0275pipeBind3": \u0275\u0275pipeBind3,
        "\u0275\u0275pipeBind4": \u0275\u0275pipeBind4,
        "\u0275\u0275pipeBindV": \u0275\u0275pipeBindV,
        "\u0275\u0275projectionDef": \u0275\u0275projectionDef,
        "\u0275\u0275hostProperty": \u0275\u0275hostProperty,
        "\u0275\u0275property": \u0275\u0275property,
        "\u0275\u0275propertyInterpolate": \u0275\u0275propertyInterpolate,
        "\u0275\u0275propertyInterpolate1": \u0275\u0275propertyInterpolate1,
        "\u0275\u0275propertyInterpolate2": \u0275\u0275propertyInterpolate2,
        "\u0275\u0275propertyInterpolate3": \u0275\u0275propertyInterpolate3,
        "\u0275\u0275propertyInterpolate4": \u0275\u0275propertyInterpolate4,
        "\u0275\u0275propertyInterpolate5": \u0275\u0275propertyInterpolate5,
        "\u0275\u0275propertyInterpolate6": \u0275\u0275propertyInterpolate6,
        "\u0275\u0275propertyInterpolate7": \u0275\u0275propertyInterpolate7,
        "\u0275\u0275propertyInterpolate8": \u0275\u0275propertyInterpolate8,
        "\u0275\u0275propertyInterpolateV": \u0275\u0275propertyInterpolateV,
        "\u0275\u0275pipe": \u0275\u0275pipe,
        "\u0275\u0275queryRefresh": \u0275\u0275queryRefresh,
        "\u0275\u0275queryAdvance": \u0275\u0275queryAdvance,
        "\u0275\u0275viewQuery": \u0275\u0275viewQuery,
        "\u0275\u0275viewQuerySignal": \u0275\u0275viewQuerySignal,
        "\u0275\u0275loadQuery": \u0275\u0275loadQuery,
        "\u0275\u0275contentQuery": \u0275\u0275contentQuery,
        "\u0275\u0275contentQuerySignal": \u0275\u0275contentQuerySignal,
        "\u0275\u0275reference": \u0275\u0275reference,
        "\u0275\u0275classMap": \u0275\u0275classMap,
        "\u0275\u0275classMapInterpolate1": \u0275\u0275classMapInterpolate1,
        "\u0275\u0275classMapInterpolate2": \u0275\u0275classMapInterpolate2,
        "\u0275\u0275classMapInterpolate3": \u0275\u0275classMapInterpolate3,
        "\u0275\u0275classMapInterpolate4": \u0275\u0275classMapInterpolate4,
        "\u0275\u0275classMapInterpolate5": \u0275\u0275classMapInterpolate5,
        "\u0275\u0275classMapInterpolate6": \u0275\u0275classMapInterpolate6,
        "\u0275\u0275classMapInterpolate7": \u0275\u0275classMapInterpolate7,
        "\u0275\u0275classMapInterpolate8": \u0275\u0275classMapInterpolate8,
        "\u0275\u0275classMapInterpolateV": \u0275\u0275classMapInterpolateV,
        "\u0275\u0275styleMap": \u0275\u0275styleMap,
        "\u0275\u0275styleMapInterpolate1": \u0275\u0275styleMapInterpolate1,
        "\u0275\u0275styleMapInterpolate2": \u0275\u0275styleMapInterpolate2,
        "\u0275\u0275styleMapInterpolate3": \u0275\u0275styleMapInterpolate3,
        "\u0275\u0275styleMapInterpolate4": \u0275\u0275styleMapInterpolate4,
        "\u0275\u0275styleMapInterpolate5": \u0275\u0275styleMapInterpolate5,
        "\u0275\u0275styleMapInterpolate6": \u0275\u0275styleMapInterpolate6,
        "\u0275\u0275styleMapInterpolate7": \u0275\u0275styleMapInterpolate7,
        "\u0275\u0275styleMapInterpolate8": \u0275\u0275styleMapInterpolate8,
        "\u0275\u0275styleMapInterpolateV": \u0275\u0275styleMapInterpolateV,
        "\u0275\u0275styleProp": \u0275\u0275styleProp,
        "\u0275\u0275stylePropInterpolate1": \u0275\u0275stylePropInterpolate1,
        "\u0275\u0275stylePropInterpolate2": \u0275\u0275stylePropInterpolate2,
        "\u0275\u0275stylePropInterpolate3": \u0275\u0275stylePropInterpolate3,
        "\u0275\u0275stylePropInterpolate4": \u0275\u0275stylePropInterpolate4,
        "\u0275\u0275stylePropInterpolate5": \u0275\u0275stylePropInterpolate5,
        "\u0275\u0275stylePropInterpolate6": \u0275\u0275stylePropInterpolate6,
        "\u0275\u0275stylePropInterpolate7": \u0275\u0275stylePropInterpolate7,
        "\u0275\u0275stylePropInterpolate8": \u0275\u0275stylePropInterpolate8,
        "\u0275\u0275stylePropInterpolateV": \u0275\u0275stylePropInterpolateV,
        "\u0275\u0275classProp": \u0275\u0275classProp,
        "\u0275\u0275advance": \u0275\u0275advance,
        "\u0275\u0275template": \u0275\u0275template,
        "\u0275\u0275conditional": \u0275\u0275conditional,
        "\u0275\u0275defer": \u0275\u0275defer,
        "\u0275\u0275deferWhen": \u0275\u0275deferWhen,
        "\u0275\u0275deferOnIdle": \u0275\u0275deferOnIdle,
        "\u0275\u0275deferOnImmediate": \u0275\u0275deferOnImmediate,
        "\u0275\u0275deferOnTimer": \u0275\u0275deferOnTimer,
        "\u0275\u0275deferOnHover": \u0275\u0275deferOnHover,
        "\u0275\u0275deferOnInteraction": \u0275\u0275deferOnInteraction,
        "\u0275\u0275deferOnViewport": \u0275\u0275deferOnViewport,
        "\u0275\u0275deferPrefetchWhen": \u0275\u0275deferPrefetchWhen,
        "\u0275\u0275deferPrefetchOnIdle": \u0275\u0275deferPrefetchOnIdle,
        "\u0275\u0275deferPrefetchOnImmediate": \u0275\u0275deferPrefetchOnImmediate,
        "\u0275\u0275deferPrefetchOnTimer": \u0275\u0275deferPrefetchOnTimer,
        "\u0275\u0275deferPrefetchOnHover": \u0275\u0275deferPrefetchOnHover,
        "\u0275\u0275deferPrefetchOnInteraction": \u0275\u0275deferPrefetchOnInteraction,
        "\u0275\u0275deferPrefetchOnViewport": \u0275\u0275deferPrefetchOnViewport,
        "\u0275\u0275deferEnableTimerScheduling": \u0275\u0275deferEnableTimerScheduling,
        "\u0275\u0275repeater": \u0275\u0275repeater,
        "\u0275\u0275repeaterCreate": \u0275\u0275repeaterCreate,
        "\u0275\u0275repeaterTrackByIndex": \u0275\u0275repeaterTrackByIndex,
        "\u0275\u0275repeaterTrackByIdentity": \u0275\u0275repeaterTrackByIdentity,
        "\u0275\u0275componentInstance": \u0275\u0275componentInstance,
        "\u0275\u0275text": \u0275\u0275text,
        "\u0275\u0275textInterpolate": \u0275\u0275textInterpolate,
        "\u0275\u0275textInterpolate1": \u0275\u0275textInterpolate1,
        "\u0275\u0275textInterpolate2": \u0275\u0275textInterpolate2,
        "\u0275\u0275textInterpolate3": \u0275\u0275textInterpolate3,
        "\u0275\u0275textInterpolate4": \u0275\u0275textInterpolate4,
        "\u0275\u0275textInterpolate5": \u0275\u0275textInterpolate5,
        "\u0275\u0275textInterpolate6": \u0275\u0275textInterpolate6,
        "\u0275\u0275textInterpolate7": \u0275\u0275textInterpolate7,
        "\u0275\u0275textInterpolate8": \u0275\u0275textInterpolate8,
        "\u0275\u0275textInterpolateV": \u0275\u0275textInterpolateV,
        "\u0275\u0275i18n": \u0275\u0275i18n,
        "\u0275\u0275i18nAttributes": \u0275\u0275i18nAttributes,
        "\u0275\u0275i18nExp": \u0275\u0275i18nExp,
        "\u0275\u0275i18nStart": \u0275\u0275i18nStart,
        "\u0275\u0275i18nEnd": \u0275\u0275i18nEnd,
        "\u0275\u0275i18nApply": \u0275\u0275i18nApply,
        "\u0275\u0275i18nPostprocess": \u0275\u0275i18nPostprocess,
        "\u0275\u0275resolveWindow": \u0275\u0275resolveWindow,
        "\u0275\u0275resolveDocument": \u0275\u0275resolveDocument,
        "\u0275\u0275resolveBody": \u0275\u0275resolveBody,
        "\u0275\u0275setComponentScope": \u0275\u0275setComponentScope,
        "\u0275\u0275setNgModuleScope": \u0275\u0275setNgModuleScope,
        "\u0275\u0275registerNgModuleType": registerNgModuleType,
        "\u0275\u0275getComponentDepsFactory": \u0275\u0275getComponentDepsFactory,
        "\u0275setClassDebugInfo": \u0275setClassDebugInfo,
        "\u0275\u0275sanitizeHtml": \u0275\u0275sanitizeHtml,
        "\u0275\u0275sanitizeStyle": \u0275\u0275sanitizeStyle,
        "\u0275\u0275sanitizeResourceUrl": \u0275\u0275sanitizeResourceUrl,
        "\u0275\u0275sanitizeScript": \u0275\u0275sanitizeScript,
        "\u0275\u0275sanitizeUrl": \u0275\u0275sanitizeUrl,
        "\u0275\u0275sanitizeUrlOrResourceUrl": \u0275\u0275sanitizeUrlOrResourceUrl,
        "\u0275\u0275trustConstantHtml": \u0275\u0275trustConstantHtml,
        "\u0275\u0275trustConstantResourceUrl": \u0275\u0275trustConstantResourceUrl,
        "\u0275\u0275validateIframeAttribute": \u0275\u0275validateIframeAttribute,
        "forwardRef": forwardRef,
        "resolveForwardRef": resolveForwardRef,
        "\u0275\u0275twoWayProperty": \u0275\u0275twoWayProperty,
        "\u0275\u0275twoWayBindingSet": \u0275\u0275twoWayBindingSet,
        "\u0275\u0275twoWayListener": \u0275\u0275twoWayListener,
        "\u0275\u0275InputFlags": InputFlags
      }))();
      jitOptions = null;
      moduleQueue = [];
      flushingModuleQueue = false;
      ownerNgModule = /* @__PURE__ */ new WeakMap();
      verifiedNgModule = /* @__PURE__ */ new WeakMap();
      compilationDepth = 0;
      LIFECYCLE_HOOKS = [
        "ngOnChanges",
        "ngOnInit",
        "ngOnDestroy",
        "ngDoCheck",
        "ngAfterViewInit",
        "ngAfterViewChecked",
        "ngAfterContentInit",
        "ngAfterContentChecked"
      ];
      Directive = makeDecorator("Directive", (dir = {}) => dir, void 0, void 0, (type, meta) => compileDirective(type, meta));
      Component = makeDecorator("Component", (c = {}) => ({ changeDetection: ChangeDetectionStrategy.Default, ...c }), Directive, void 0, (type, meta) => compileComponent(type, meta));
      Pipe = makeDecorator("Pipe", (p) => ({ pure: true, ...p }), void 0, void 0, (type, meta) => compilePipe(type, meta));
      Input = makePropDecorator("Input", (arg) => {
        if (!arg) {
          return {};
        }
        return typeof arg === "string" ? { alias: arg } : arg;
      });
      Output = makePropDecorator("Output", (alias) => ({ alias }));
      HostBinding = makePropDecorator("HostBinding", (hostPropertyName) => ({ hostPropertyName }));
      HostListener = makePropDecorator("HostListener", (eventName, args) => ({ eventName, args }));
      NgModule = makeDecorator(
        "NgModule",
        (ngModule) => ngModule,
        void 0,
        void 0,
        /**
         * Decorator that marks the following class as an NgModule, and supplies
         * configuration metadata for it.
         *
         * * The `declarations` option configures the compiler
         * with information about what belongs to the NgModule.
         * * The `providers` options configures the NgModule's injector to provide
         * dependencies the NgModule members.
         * * The `imports` and `exports` options bring in members from other modules, and make
         * this module's members available to others.
         */
        (type, meta) => compileNgModule(type, meta)
      );
      Version = class {
        constructor(full) {
          this.full = full;
          const parts = full.split(".");
          this.major = parts[0];
          this.minor = parts[1];
          this.patch = parts.slice(2).join(".");
        }
      };
      VERSION = new Version("17.3.5");
      Console = class _Console {
        log(message) {
          console.log(message);
        }
        // Note: for reporting errors use `DOM.logError()` as it is platform specific
        warn(message) {
          console.warn(message);
        }
        static {
          this.\u0275fac = function Console_Factory(t) {
            return new (t || _Console)();
          };
        }
        static {
          this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _Console, factory: _Console.\u0275fac, providedIn: "platform" });
        }
      };
      (() => {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Console, [{
          type: Injectable,
          args: [{ providedIn: "platform" }]
        }], null, null);
      })();
      DIDebugData = class {
        constructor() {
          this.resolverToTokenToDependencies = /* @__PURE__ */ new WeakMap();
          this.resolverToProviders = /* @__PURE__ */ new WeakMap();
          this.standaloneInjectorToComponent = /* @__PURE__ */ new WeakMap();
        }
        reset() {
          this.resolverToTokenToDependencies = /* @__PURE__ */ new WeakMap();
          this.resolverToProviders = /* @__PURE__ */ new WeakMap();
          this.standaloneInjectorToComponent = /* @__PURE__ */ new WeakMap();
        }
      };
      frameworkDIDebugData = new DIDebugData();
      GLOBAL_PUBLISH_EXPANDO_KEY = "ng";
      globalUtilsFunctions = {
        /**
         * Warning: functions that start with `ɵ` are considered *INTERNAL* and should not be relied upon
         * in application's code. The contract of those functions might be changed in any release and/or a
         * function can be removed completely.
         */
        "\u0275getDependenciesFromInjectable": getDependenciesFromInjectable,
        "\u0275getInjectorProviders": getInjectorProviders,
        "\u0275getInjectorResolutionPath": getInjectorResolutionPath,
        "\u0275getInjectorMetadata": getInjectorMetadata,
        "\u0275setProfiler": setProfiler,
        "getDirectiveMetadata": getDirectiveMetadata$1,
        "getComponent": getComponent$1,
        "getContext": getContext,
        "getListeners": getListeners,
        "getOwningComponent": getOwningComponent,
        "getHostElement": getHostElement,
        "getInjector": getInjector,
        "getRootComponents": getRootComponents,
        "getDirectives": getDirectives,
        "applyChanges": applyChanges,
        "isSignal": isSignal
      };
      _published = false;
      TESTABILITY = new InjectionToken("");
      TESTABILITY_GETTER = new InjectionToken("");
      Testability = class _Testability {
        constructor(_ngZone, registry, testabilityGetter) {
          this._ngZone = _ngZone;
          this.registry = registry;
          this._pendingCount = 0;
          this._isZoneStable = true;
          this._callbacks = [];
          this.taskTrackingZone = null;
          if (!_testabilityGetter) {
            setTestabilityGetter(testabilityGetter);
            testabilityGetter.addToWindow(registry);
          }
          this._watchAngularEvents();
          _ngZone.run(() => {
            this.taskTrackingZone = typeof Zone == "undefined" ? null : Zone.current.get("TaskTrackingZone");
          });
        }
        _watchAngularEvents() {
          this._ngZone.onUnstable.subscribe({
            next: () => {
              this._isZoneStable = false;
            }
          });
          this._ngZone.runOutsideAngular(() => {
            this._ngZone.onStable.subscribe({
              next: () => {
                NgZone.assertNotInAngularZone();
                queueMicrotask(() => {
                  this._isZoneStable = true;
                  this._runCallbacksIfReady();
                });
              }
            });
          });
        }
        /**
         * Increases the number of pending request
         * @deprecated pending requests are now tracked with zones.
         */
        increasePendingRequestCount() {
          this._pendingCount += 1;
          return this._pendingCount;
        }
        /**
         * Decreases the number of pending request
         * @deprecated pending requests are now tracked with zones
         */
        decreasePendingRequestCount() {
          this._pendingCount -= 1;
          if (this._pendingCount < 0) {
            throw new Error("pending async requests below zero");
          }
          this._runCallbacksIfReady();
          return this._pendingCount;
        }
        /**
         * Whether an associated application is stable
         */
        isStable() {
          return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;
        }
        _runCallbacksIfReady() {
          if (this.isStable()) {
            queueMicrotask(() => {
              while (this._callbacks.length !== 0) {
                let cb = this._callbacks.pop();
                clearTimeout(cb.timeoutId);
                cb.doneCb();
              }
            });
          } else {
            let pending = this.getPendingTasks();
            this._callbacks = this._callbacks.filter((cb) => {
              if (cb.updateCb && cb.updateCb(pending)) {
                clearTimeout(cb.timeoutId);
                return false;
              }
              return true;
            });
          }
        }
        getPendingTasks() {
          if (!this.taskTrackingZone) {
            return [];
          }
          return this.taskTrackingZone.macroTasks.map((t) => {
            return {
              source: t.source,
              // From TaskTrackingZone:
              // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
              creationLocation: t.creationLocation,
              data: t.data
            };
          });
        }
        addCallback(cb, timeout, updateCb) {
          let timeoutId = -1;
          if (timeout && timeout > 0) {
            timeoutId = setTimeout(() => {
              this._callbacks = this._callbacks.filter((cb2) => cb2.timeoutId !== timeoutId);
              cb();
            }, timeout);
          }
          this._callbacks.push({ doneCb: cb, timeoutId, updateCb });
        }
        /**
         * Wait for the application to be stable with a timeout. If the timeout is reached before that
         * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
         *
         * @param doneCb The callback to invoke when Angular is stable or the timeout expires
         *    whichever comes first.
         * @param timeout Optional. The maximum time to wait for Angular to become stable. If not
         *    specified, whenStable() will wait forever.
         * @param updateCb Optional. If specified, this callback will be invoked whenever the set of
         *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
         *    and no further updates will be issued.
         */
        whenStable(doneCb, timeout, updateCb) {
          if (updateCb && !this.taskTrackingZone) {
            throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/plugins/task-tracking" loaded?');
          }
          this.addCallback(doneCb, timeout, updateCb);
          this._runCallbacksIfReady();
        }
        /**
         * Get the number of pending requests
         * @deprecated pending requests are now tracked with zones
         */
        getPendingRequestCount() {
          return this._pendingCount;
        }
        /**
         * Registers an application with a testability hook so that it can be tracked.
         * @param token token of application, root element
         *
         * @internal
         */
        registerApplication(token) {
          this.registry.registerApplication(token, this);
        }
        /**
         * Unregisters an application.
         * @param token token of application, root element
         *
         * @internal
         */
        unregisterApplication(token) {
          this.registry.unregisterApplication(token);
        }
        /**
         * Find providers by name
         * @param using The root element to search from
         * @param provider The name of binding variable
         * @param exactMatch Whether using exactMatch
         */
        findProviders(using, provider, exactMatch) {
          return [];
        }
        static {
          this.\u0275fac = function Testability_Factory(t) {
            return new (t || _Testability)(\u0275\u0275inject(NgZone), \u0275\u0275inject(TestabilityRegistry), \u0275\u0275inject(TESTABILITY_GETTER));
          };
        }
        static {
          this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _Testability, factory: _Testability.\u0275fac });
        }
      };
      (() => {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Testability, [{
          type: Injectable
        }], () => [{ type: NgZone }, { type: TestabilityRegistry }, { type: void 0, decorators: [{
          type: Inject,
          args: [TESTABILITY_GETTER]
        }] }], null);
      })();
      TestabilityRegistry = class _TestabilityRegistry {
        constructor() {
          this._applications = /* @__PURE__ */ new Map();
        }
        /**
         * Registers an application with a testability hook so that it can be tracked
         * @param token token of application, root element
         * @param testability Testability hook
         */
        registerApplication(token, testability) {
          this._applications.set(token, testability);
        }
        /**
         * Unregisters an application.
         * @param token token of application, root element
         */
        unregisterApplication(token) {
          this._applications.delete(token);
        }
        /**
         * Unregisters all applications
         */
        unregisterAllApplications() {
          this._applications.clear();
        }
        /**
         * Get a testability hook associated with the application
         * @param elem root element
         */
        getTestability(elem) {
          return this._applications.get(elem) || null;
        }
        /**
         * Get all registered testabilities
         */
        getAllTestabilities() {
          return Array.from(this._applications.values());
        }
        /**
         * Get all registered applications(root elements)
         */
        getAllRootElements() {
          return Array.from(this._applications.keys());
        }
        /**
         * Find testability of a node in the Tree
         * @param elem node
         * @param findInAncestors whether finding testability in ancestors if testability was not found in
         * current node
         */
        findTestabilityInTree(elem, findInAncestors = true) {
          return _testabilityGetter?.findTestabilityInTree(this, elem, findInAncestors) ?? null;
        }
        static {
          this.\u0275fac = function TestabilityRegistry_Factory(t) {
            return new (t || _TestabilityRegistry)();
          };
        }
        static {
          this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _TestabilityRegistry, factory: _TestabilityRegistry.\u0275fac, providedIn: "platform" });
        }
      };
      (() => {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{
          type: Injectable,
          args: [{ providedIn: "platform" }]
        }], null, null);
      })();
      APP_INITIALIZER = new InjectionToken(ngDevMode ? "Application Initializer" : "");
      ApplicationInitStatus = class _ApplicationInitStatus {
        constructor() {
          this.initialized = false;
          this.done = false;
          this.donePromise = new Promise((res, rej) => {
            this.resolve = res;
            this.reject = rej;
          });
          this.appInits = inject(APP_INITIALIZER, { optional: true }) ?? [];
          if ((typeof ngDevMode === "undefined" || ngDevMode) && !Array.isArray(this.appInits)) {
            throw new RuntimeError(-209, `Unexpected type of the \`APP_INITIALIZER\` token value (expected an array, but got ${typeof this.appInits}). Please check that the \`APP_INITIALIZER\` token is configured as a \`multi: true\` provider.`);
          }
        }
        /** @internal */
        runInitializers() {
          if (this.initialized) {
            return;
          }
          const asyncInitPromises = [];
          for (const appInits of this.appInits) {
            const initResult = appInits();
            if (isPromise2(initResult)) {
              asyncInitPromises.push(initResult);
            } else if (isSubscribable(initResult)) {
              const observableAsPromise = new Promise((resolve, reject) => {
                initResult.subscribe({ complete: resolve, error: reject });
              });
              asyncInitPromises.push(observableAsPromise);
            }
          }
          const complete = () => {
            this.done = true;
            this.resolve();
          };
          Promise.all(asyncInitPromises).then(() => {
            complete();
          }).catch((e2) => {
            this.reject(e2);
          });
          if (asyncInitPromises.length === 0) {
            complete();
          }
          this.initialized = true;
        }
        static {
          this.\u0275fac = function ApplicationInitStatus_Factory(t) {
            return new (t || _ApplicationInitStatus)();
          };
        }
        static {
          this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ApplicationInitStatus, factory: _ApplicationInitStatus.\u0275fac, providedIn: "root" });
        }
      };
      (() => {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{
          type: Injectable,
          args: [{ providedIn: "root" }]
        }], () => [], null);
      })();
      APP_BOOTSTRAP_LISTENER = new InjectionToken(ngDevMode ? "appBootstrapListener" : "");
      NgProbeToken = class {
        constructor(name, token) {
          this.name = name;
          this.token = token;
        }
      };
      ApplicationRef = class _ApplicationRef {
        constructor() {
          this._bootstrapListeners = [];
          this._runningTick = false;
          this._destroyed = false;
          this._destroyListeners = [];
          this._views = [];
          this.internalErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);
          this.afterRenderEffectManager = inject(AfterRenderEventManager);
          this.externalTestViews = /* @__PURE__ */ new Set();
          this.beforeRender = new Subject();
          this.afterTick = new Subject();
          this.componentTypes = [];
          this.components = [];
          this.isStable = inject(PendingTasks).hasPendingTasks.pipe(map((pending) => !pending));
          this._injector = inject(EnvironmentInjector);
        }
        /**
         * Indicates whether this instance was destroyed.
         */
        get destroyed() {
          return this._destroyed;
        }
        /**
         * The `EnvironmentInjector` used to create this application.
         */
        get injector() {
          return this._injector;
        }
        /**
         * Bootstrap a component onto the element identified by its selector or, optionally, to a
         * specified element.
         *
         * @usageNotes
         * ### Bootstrap process
         *
         * When bootstrapping a component, Angular mounts it onto a target DOM element
         * and kicks off automatic change detection. The target DOM element can be
         * provided using the `rootSelectorOrNode` argument.
         *
         * If the target DOM element is not provided, Angular tries to find one on a page
         * using the `selector` of the component that is being bootstrapped
         * (first matched element is used).
         *
         * ### Example
         *
         * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,
         * but it requires us to know the component while writing the application code.
         *
         * Imagine a situation where we have to wait for an API call to decide about the component to
         * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to
         * dynamically bootstrap a component.
         *
         * {@example core/ts/platform/platform.ts region='componentSelector'}
         *
         * Optionally, a component can be mounted onto a DOM element that does not match the
         * selector of the bootstrapped component.
         *
         * In the following example, we are providing a CSS selector to match the target element.
         *
         * {@example core/ts/platform/platform.ts region='cssSelector'}
         *
         * While in this example, we are providing reference to a DOM node.
         *
         * {@example core/ts/platform/platform.ts region='domNode'}
         */
        bootstrap(componentOrFactory, rootSelectorOrNode) {
          (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
          const isComponentFactory = componentOrFactory instanceof ComponentFactory$1;
          const initStatus = this._injector.get(ApplicationInitStatus);
          if (!initStatus.done) {
            const standalone = !isComponentFactory && isStandalone(componentOrFactory);
            const errorMessage = (typeof ngDevMode === "undefined" || ngDevMode) && "Cannot bootstrap as there are still asynchronous initializers running." + (standalone ? "" : " Bootstrap components in the `ngDoBootstrap` method of the root module.");
            throw new RuntimeError(405, errorMessage);
          }
          let componentFactory;
          if (isComponentFactory) {
            componentFactory = componentOrFactory;
          } else {
            const resolver = this._injector.get(ComponentFactoryResolver$1);
            componentFactory = resolver.resolveComponentFactory(componentOrFactory);
          }
          this.componentTypes.push(componentFactory.componentType);
          const ngModule = isBoundToModule(componentFactory) ? void 0 : this._injector.get(NgModuleRef$1);
          const selectorOrNode = rootSelectorOrNode || componentFactory.selector;
          const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
          const nativeElement = compRef.location.nativeElement;
          const testability = compRef.injector.get(TESTABILITY, null);
          testability?.registerApplication(nativeElement);
          compRef.onDestroy(() => {
            this.detachView(compRef.hostView);
            remove(this.components, compRef);
            testability?.unregisterApplication(nativeElement);
          });
          this._loadComponent(compRef);
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            const _console = this._injector.get(Console);
            _console.log(`Angular is running in development mode.`);
          }
          return compRef;
        }
        /**
         * Invoke this method to explicitly process change detection and its side-effects.
         *
         * In development mode, `tick()` also performs a second change detection cycle to ensure that no
         * further changes are detected. If additional changes are picked up during this second cycle,
         * bindings in the app have side-effects that cannot be resolved in a single change detection
         * pass.
         * In this case, Angular throws an error, since an Angular application can only have one change
         * detection pass during which all change detection must complete.
         */
        tick() {
          this._tick(true);
        }
        /** @internal */
        _tick(refreshViews) {
          (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
          if (this._runningTick) {
            throw new RuntimeError(101, ngDevMode && "ApplicationRef.tick is called recursively");
          }
          const prevConsumer = setActiveConsumer(null);
          try {
            this._runningTick = true;
            this.detectChangesInAttachedViews(refreshViews);
            if (typeof ngDevMode === "undefined" || ngDevMode) {
              for (let view of this._views) {
                view.checkNoChanges();
              }
            }
          } catch (e2) {
            this.internalErrorHandler(e2);
          } finally {
            this.afterTick.next();
            this._runningTick = false;
            setActiveConsumer(prevConsumer);
          }
        }
        detectChangesInAttachedViews(refreshViews) {
          let runs = 0;
          const afterRenderEffectManager = this.afterRenderEffectManager;
          while (true) {
            if (runs === MAXIMUM_REFRESH_RERUNS) {
              throw new RuntimeError(103, ngDevMode && "Infinite change detection while refreshing application views. Ensure afterRender or queueStateUpdate hooks are not continuously causing updates.");
            }
            if (refreshViews) {
              const isFirstPass = runs === 0;
              this.beforeRender.next(isFirstPass);
              for (let { _lView, notifyErrorHandler } of this._views) {
                detectChangesInViewIfRequired(_lView, isFirstPass, notifyErrorHandler);
              }
            }
            runs++;
            afterRenderEffectManager.executeInternalCallbacks();
            if ([...this.externalTestViews.keys(), ...this._views].some(({ _lView }) => shouldRecheckView(_lView))) {
              continue;
            }
            afterRenderEffectManager.execute();
            if (![...this.externalTestViews.keys(), ...this._views].some(({ _lView }) => shouldRecheckView(_lView))) {
              break;
            }
          }
        }
        /**
         * Attaches a view so that it will be dirty checked.
         * The view will be automatically detached when it is destroyed.
         * This will throw if the view is already attached to a ViewContainer.
         */
        attachView(viewRef) {
          (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
          const view = viewRef;
          this._views.push(view);
          view.attachToAppRef(this);
        }
        /**
         * Detaches a view from dirty checking again.
         */
        detachView(viewRef) {
          (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
          const view = viewRef;
          remove(this._views, view);
          view.detachFromAppRef();
        }
        _loadComponent(componentRef) {
          this.attachView(componentRef.hostView);
          this.tick();
          this.components.push(componentRef);
          const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []);
          if (ngDevMode && !Array.isArray(listeners)) {
            throw new RuntimeError(-209, `Unexpected type of the \`APP_BOOTSTRAP_LISTENER\` token value (expected an array, but got ${typeof listeners}). Please check that the \`APP_BOOTSTRAP_LISTENER\` token is configured as a \`multi: true\` provider.`);
          }
          [...this._bootstrapListeners, ...listeners].forEach((listener2) => listener2(componentRef));
        }
        /** @internal */
        ngOnDestroy() {
          if (this._destroyed)
            return;
          try {
            this._destroyListeners.forEach((listener2) => listener2());
            this._views.slice().forEach((view) => view.destroy());
          } finally {
            this._destroyed = true;
            this._views = [];
            this._bootstrapListeners = [];
            this._destroyListeners = [];
          }
        }
        /**
         * Registers a listener to be called when an instance is destroyed.
         *
         * @param callback A callback function to add as a listener.
         * @returns A function which unregisters a listener.
         */
        onDestroy(callback) {
          (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
          this._destroyListeners.push(callback);
          return () => remove(this._destroyListeners, callback);
        }
        /**
         * Destroys an Angular application represented by this `ApplicationRef`. Calling this function
         * will destroy the associated environment injectors as well as all the bootstrapped components
         * with their views.
         */
        destroy() {
          if (this._destroyed) {
            throw new RuntimeError(406, ngDevMode && "This instance of the `ApplicationRef` has already been destroyed.");
          }
          const injector = this._injector;
          if (injector.destroy && !injector.destroyed) {
            injector.destroy();
          }
        }
        /**
         * Returns the number of attached views.
         */
        get viewCount() {
          return this._views.length;
        }
        warnIfDestroyed() {
          if ((typeof ngDevMode === "undefined" || ngDevMode) && this._destroyed) {
            console.warn(formatRuntimeError(406, "This instance of the `ApplicationRef` has already been destroyed."));
          }
        }
        static {
          this.\u0275fac = function ApplicationRef_Factory(t) {
            return new (t || _ApplicationRef)();
          };
        }
        static {
          this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ApplicationRef, factory: _ApplicationRef.\u0275fac, providedIn: "root" });
        }
      };
      (() => {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationRef, [{
          type: Injectable,
          args: [{ providedIn: "root" }]
        }], null, null);
      })();
      ModuleWithComponentFactories = class {
        constructor(ngModuleFactory, componentFactories) {
          this.ngModuleFactory = ngModuleFactory;
          this.componentFactories = componentFactories;
        }
      };
      Compiler = class _Compiler {
        /**
         * Compiles the given NgModule and all of its components. All templates of the components
         * have to be inlined.
         */
        compileModuleSync(moduleType) {
          return new NgModuleFactory(moduleType);
        }
        /**
         * Compiles the given NgModule and all of its components
         */
        compileModuleAsync(moduleType) {
          return Promise.resolve(this.compileModuleSync(moduleType));
        }
        /**
         * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.
         */
        compileModuleAndAllComponentsSync(moduleType) {
          const ngModuleFactory = this.compileModuleSync(moduleType);
          const moduleDef = getNgModuleDef(moduleType);
          const componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce((factories, declaration) => {
            const componentDef = getComponentDef(declaration);
            componentDef && factories.push(new ComponentFactory(componentDef));
            return factories;
          }, []);
          return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
        }
        /**
         * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.
         */
        compileModuleAndAllComponentsAsync(moduleType) {
          return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));
        }
        /**
         * Clears all caches.
         */
        clearCache() {
        }
        /**
         * Clears the cache for the given component/ngModule.
         */
        clearCacheFor(type) {
        }
        /**
         * Returns the id for a given NgModule, if one is defined and known to the compiler.
         */
        getModuleId(moduleType) {
          return void 0;
        }
        static {
          this.\u0275fac = function Compiler_Factory(t) {
            return new (t || _Compiler)();
          };
        }
        static {
          this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _Compiler, factory: _Compiler.\u0275fac, providedIn: "root" });
        }
      };
      (() => {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Compiler, [{
          type: Injectable,
          args: [{ providedIn: "root" }]
        }], null, null);
      })();
      COMPILER_OPTIONS = new InjectionToken(ngDevMode ? "compilerOptions" : "");
      CompilerFactory = class {
      };
      NgZoneChangeDetectionScheduler = class _NgZoneChangeDetectionScheduler {
        constructor() {
          this.zone = inject(NgZone);
          this.applicationRef = inject(ApplicationRef);
        }
        initialize() {
          if (this._onMicrotaskEmptySubscription) {
            return;
          }
          this._onMicrotaskEmptySubscription = this.zone.onMicrotaskEmpty.subscribe({
            next: () => {
              this.zone.run(() => {
                this.applicationRef.tick();
              });
            }
          });
        }
        ngOnDestroy() {
          this._onMicrotaskEmptySubscription?.unsubscribe();
        }
        static {
          this.\u0275fac = function NgZoneChangeDetectionScheduler_Factory(t) {
            return new (t || _NgZoneChangeDetectionScheduler)();
          };
        }
        static {
          this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _NgZoneChangeDetectionScheduler, factory: _NgZoneChangeDetectionScheduler.\u0275fac, providedIn: "root" });
        }
      };
      (() => {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgZoneChangeDetectionScheduler, [{
          type: Injectable,
          args: [{ providedIn: "root" }]
        }], null, null);
      })();
      PROVIDED_NG_ZONE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "provideZoneChangeDetection token" : "");
      ZoneStablePendingTask = class _ZoneStablePendingTask {
        constructor() {
          this.subscription = new Subscription();
          this.initialized = false;
          this.zone = inject(NgZone);
          this.pendingTasks = inject(PendingTasks);
        }
        initialize() {
          if (this.initialized) {
            return;
          }
          this.initialized = true;
          let task = null;
          if (!this.zone.isStable && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {
            task = this.pendingTasks.add();
          }
          this.zone.runOutsideAngular(() => {
            this.subscription.add(this.zone.onStable.subscribe(() => {
              NgZone.assertNotInAngularZone();
              queueMicrotask(() => {
                if (task !== null && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {
                  this.pendingTasks.remove(task);
                  task = null;
                }
              });
            }));
          });
          this.subscription.add(this.zone.onUnstable.subscribe(() => {
            NgZone.assertInAngularZone();
            task ??= this.pendingTasks.add();
          }));
        }
        ngOnDestroy() {
          this.subscription.unsubscribe();
        }
        static {
          this.\u0275fac = function ZoneStablePendingTask_Factory(t) {
            return new (t || _ZoneStablePendingTask)();
          };
        }
        static {
          this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ZoneStablePendingTask, factory: _ZoneStablePendingTask.\u0275fac, providedIn: "root" });
        }
      };
      (() => {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ZoneStablePendingTask, [{
          type: Injectable,
          args: [{ providedIn: "root" }]
        }], null, null);
      })();
      LOCALE_ID = new InjectionToken(ngDevMode ? "LocaleId" : "", {
        providedIn: "root",
        factory: () => inject(LOCALE_ID, InjectFlags.Optional | InjectFlags.SkipSelf) || getGlobalLocale()
      });
      DEFAULT_CURRENCY_CODE = new InjectionToken(ngDevMode ? "DefaultCurrencyCode" : "", {
        providedIn: "root",
        factory: () => USD_CURRENCY_CODE
      });
      TRANSLATIONS = new InjectionToken(ngDevMode ? "Translations" : "");
      TRANSLATIONS_FORMAT = new InjectionToken(ngDevMode ? "TranslationsFormat" : "");
      (function(MissingTranslationStrategy3) {
        MissingTranslationStrategy3[MissingTranslationStrategy3["Error"] = 0] = "Error";
        MissingTranslationStrategy3[MissingTranslationStrategy3["Warning"] = 1] = "Warning";
        MissingTranslationStrategy3[MissingTranslationStrategy3["Ignore"] = 2] = "Ignore";
      })(MissingTranslationStrategy || (MissingTranslationStrategy = {}));
      PLATFORM_DESTROY_LISTENERS = new InjectionToken(ngDevMode ? "PlatformDestroyListeners" : "");
      PlatformRef = class _PlatformRef {
        /** @internal */
        constructor(_injector) {
          this._injector = _injector;
          this._modules = [];
          this._destroyListeners = [];
          this._destroyed = false;
        }
        /**
         * Creates an instance of an `@NgModule` for the given platform.
         *
         * @deprecated Passing NgModule factories as the `PlatformRef.bootstrapModuleFactory` function
         *     argument is deprecated. Use the `PlatformRef.bootstrapModule` API instead.
         */
        bootstrapModuleFactory(moduleFactory, options) {
          const ngZone = getNgZone(options?.ngZone, getNgZoneOptions({
            eventCoalescing: options?.ngZoneEventCoalescing,
            runCoalescing: options?.ngZoneRunCoalescing
          }));
          return ngZone.run(() => {
            const moduleRef = createNgModuleRefWithProviders(moduleFactory.moduleType, this.injector, internalProvideZoneChangeDetection(() => ngZone));
            if ((typeof ngDevMode === "undefined" || ngDevMode) && moduleRef.injector.get(PROVIDED_NG_ZONE, null) !== null) {
              throw new RuntimeError(207, "`bootstrapModule` does not support `provideZoneChangeDetection`. Use `BootstrapOptions` instead.");
            }
            const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
            if ((typeof ngDevMode === "undefined" || ngDevMode) && exceptionHandler === null) {
              throw new RuntimeError(402, "No ErrorHandler. Is platform module (BrowserModule) included?");
            }
            ngZone.runOutsideAngular(() => {
              const subscription = ngZone.onError.subscribe({
                next: (error2) => {
                  exceptionHandler.handleError(error2);
                }
              });
              moduleRef.onDestroy(() => {
                remove(this._modules, moduleRef);
                subscription.unsubscribe();
              });
            });
            return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {
              const initStatus = moduleRef.injector.get(ApplicationInitStatus);
              initStatus.runInitializers();
              return initStatus.donePromise.then(() => {
                const localeId = moduleRef.injector.get(LOCALE_ID, DEFAULT_LOCALE_ID);
                setLocaleId(localeId || DEFAULT_LOCALE_ID);
                this._moduleDoBootstrap(moduleRef);
                return moduleRef;
              });
            });
          });
        }
        /**
         * Creates an instance of an `@NgModule` for a given platform.
         *
         * @usageNotes
         * ### Simple Example
         *
         * ```typescript
         * @NgModule({
         *   imports: [BrowserModule]
         * })
         * class MyModule {}
         *
         * let moduleRef = platformBrowser().bootstrapModule(MyModule);
         * ```
         *
         */
        bootstrapModule(moduleType, compilerOptions = []) {
          const options = optionsReducer({}, compilerOptions);
          return compileNgModuleFactory(this.injector, options, moduleType).then((moduleFactory) => this.bootstrapModuleFactory(moduleFactory, options));
        }
        _moduleDoBootstrap(moduleRef) {
          const appRef = moduleRef.injector.get(ApplicationRef);
          if (moduleRef._bootstrapComponents.length > 0) {
            moduleRef._bootstrapComponents.forEach((f) => appRef.bootstrap(f));
          } else if (moduleRef.instance.ngDoBootstrap) {
            moduleRef.instance.ngDoBootstrap(appRef);
          } else {
            throw new RuntimeError(-403, ngDevMode && `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`);
          }
          this._modules.push(moduleRef);
        }
        /**
         * Registers a listener to be called when the platform is destroyed.
         */
        onDestroy(callback) {
          this._destroyListeners.push(callback);
        }
        /**
         * Retrieves the platform {@link Injector}, which is the parent injector for
         * every Angular application on the page and provides singleton providers.
         */
        get injector() {
          return this._injector;
        }
        /**
         * Destroys the current Angular platform and all Angular applications on the page.
         * Destroys all modules and listeners registered with the platform.
         */
        destroy() {
          if (this._destroyed) {
            throw new RuntimeError(404, ngDevMode && "The platform has already been destroyed!");
          }
          this._modules.slice().forEach((module) => module.destroy());
          this._destroyListeners.forEach((listener2) => listener2());
          const destroyListeners = this._injector.get(PLATFORM_DESTROY_LISTENERS, null);
          if (destroyListeners) {
            destroyListeners.forEach((listener2) => listener2());
            destroyListeners.clear();
          }
          this._destroyed = true;
        }
        /**
         * Indicates whether this instance was destroyed.
         */
        get destroyed() {
          return this._destroyed;
        }
        static {
          this.\u0275fac = function PlatformRef_Factory(t) {
            return new (t || _PlatformRef)(\u0275\u0275inject(Injector));
          };
        }
        static {
          this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _PlatformRef, factory: _PlatformRef.\u0275fac, providedIn: "platform" });
        }
      };
      (() => {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformRef, [{
          type: Injectable,
          args: [{ providedIn: "platform" }]
        }], () => [{ type: Injector }], null);
      })();
      _platformInjector = null;
      ALLOW_MULTIPLE_PLATFORMS = new InjectionToken(ngDevMode ? "AllowMultipleToken" : "");
      ChangeDetectorRef = class {
        static {
          this.__NG_ELEMENT_ID__ = injectChangeDetectorRef;
        }
      };
      ViewRef = class extends ChangeDetectorRef {
      };
      EmbeddedViewRef = class extends ViewRef {
      };
      DebugEventListener = class {
        constructor(name, callback) {
          this.name = name;
          this.callback = callback;
        }
      };
      DebugNode = class {
        constructor(nativeNode) {
          this.nativeNode = nativeNode;
        }
        /**
         * The `DebugElement` parent. Will be `null` if this is the root element.
         */
        get parent() {
          const parent = this.nativeNode.parentNode;
          return parent ? new DebugElement(parent) : null;
        }
        /**
         * The host dependency injector. For example, the root element's component instance injector.
         */
        get injector() {
          return getInjector(this.nativeNode);
        }
        /**
         * The element's own component instance, if it has one.
         */
        get componentInstance() {
          const nativeElement = this.nativeNode;
          return nativeElement && (getComponent$1(nativeElement) || getOwningComponent(nativeElement));
        }
        /**
         * An object that provides parent context for this element. Often an ancestor component instance
         * that governs this element.
         *
         * When an element is repeated within *ngFor, the context is an `NgForOf` whose `$implicit`
         * property is the value of the row instance value. For example, the `hero` in `*ngFor="let hero
         * of heroes"`.
         */
        get context() {
          return getComponent$1(this.nativeNode) || getContext(this.nativeNode);
        }
        /**
         * The callbacks attached to the component's @Output properties and/or the element's event
         * properties.
         */
        get listeners() {
          return getListeners(this.nativeNode).filter((listener2) => listener2.type === "dom");
        }
        /**
         * Dictionary of objects associated with template local variables (e.g. #foo), keyed by the local
         * variable name.
         */
        get references() {
          return getLocalRefs(this.nativeNode);
        }
        /**
         * This component's injector lookup tokens. Includes the component itself plus the tokens that the
         * component lists in its providers metadata.
         */
        get providerTokens() {
          return getInjectionTokens(this.nativeNode);
        }
      };
      DebugElement = class extends DebugNode {
        constructor(nativeNode) {
          ngDevMode && assertDomNode(nativeNode);
          super(nativeNode);
        }
        /**
         * The underlying DOM element at the root of the component.
         */
        get nativeElement() {
          return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;
        }
        /**
         * The element tag name, if it is an element.
         */
        get name() {
          const context2 = getLContext(this.nativeNode);
          const lView = context2 ? context2.lView : null;
          if (lView !== null) {
            const tData = lView[TVIEW].data;
            const tNode = tData[context2.nodeIndex];
            return tNode.value;
          } else {
            return this.nativeNode.nodeName;
          }
        }
        /**
         *  Gets a map of property names to property values for an element.
         *
         *  This map includes:
         *  - Regular property bindings (e.g. `[id]="id"`)
         *  - Host property bindings (e.g. `host: { '[id]': "id" }`)
         *  - Interpolated property bindings (e.g. `id="{{ value }}")
         *
         *  It does not include:
         *  - input property bindings (e.g. `[myCustomInput]="value"`)
         *  - attribute bindings (e.g. `[attr.role]="menu"`)
         */
        get properties() {
          const context2 = getLContext(this.nativeNode);
          const lView = context2 ? context2.lView : null;
          if (lView === null) {
            return {};
          }
          const tData = lView[TVIEW].data;
          const tNode = tData[context2.nodeIndex];
          const properties = {};
          copyDomProperties(this.nativeElement, properties);
          collectPropertyBindings(properties, tNode, lView, tData);
          return properties;
        }
        /**
         *  A map of attribute names to attribute values for an element.
         */
        // TODO: replace null by undefined in the return type
        get attributes() {
          const attributes = {};
          const element2 = this.nativeElement;
          if (!element2) {
            return attributes;
          }
          const context2 = getLContext(element2);
          const lView = context2 ? context2.lView : null;
          if (lView === null) {
            return {};
          }
          const tNodeAttrs = lView[TVIEW].data[context2.nodeIndex].attrs;
          const lowercaseTNodeAttrs = [];
          if (tNodeAttrs) {
            let i = 0;
            while (i < tNodeAttrs.length) {
              const attrName = tNodeAttrs[i];
              if (typeof attrName !== "string")
                break;
              const attrValue = tNodeAttrs[i + 1];
              attributes[attrName] = attrValue;
              lowercaseTNodeAttrs.push(attrName.toLowerCase());
              i += 2;
            }
          }
          for (const attr of element2.attributes) {
            if (!lowercaseTNodeAttrs.includes(attr.name)) {
              attributes[attr.name] = attr.value;
            }
          }
          return attributes;
        }
        /**
         * The inline styles of the DOM element.
         */
        // TODO: replace null by undefined in the return type
        get styles() {
          const element2 = this.nativeElement;
          return element2?.style ?? {};
        }
        /**
         * A map containing the class names on the element as keys.
         *
         * This map is derived from the `className` property of the DOM element.
         *
         * Note: The values of this object will always be `true`. The class key will not appear in the KV
         * object if it does not exist on the element.
         *
         * @see [Element.className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)
         */
        get classes() {
          const result = {};
          const element2 = this.nativeElement;
          const className = element2.className;
          const classes = typeof className !== "string" ? className.baseVal.split(" ") : className.split(" ");
          classes.forEach((value) => result[value] = true);
          return result;
        }
        /**
         * The `childNodes` of the DOM element as a `DebugNode` array.
         *
         * @see [Node.childNodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)
         */
        get childNodes() {
          const childNodes = this.nativeNode.childNodes;
          const children = [];
          for (let i = 0; i < childNodes.length; i++) {
            const element2 = childNodes[i];
            children.push(getDebugNode(element2));
          }
          return children;
        }
        /**
         * The immediate `DebugElement` children. Walk the tree by descending through `children`.
         */
        get children() {
          const nativeElement = this.nativeElement;
          if (!nativeElement)
            return [];
          const childNodes = nativeElement.children;
          const children = [];
          for (let i = 0; i < childNodes.length; i++) {
            const element2 = childNodes[i];
            children.push(getDebugNode(element2));
          }
          return children;
        }
        /**
         * @returns the first `DebugElement` that matches the predicate at any depth in the subtree.
         */
        query(predicate) {
          const results = this.queryAll(predicate);
          return results[0] || null;
        }
        /**
         * @returns All `DebugElement` matches for the predicate at any depth in the subtree.
         */
        queryAll(predicate) {
          const matches2 = [];
          _queryAll(this, predicate, matches2, true);
          return matches2;
        }
        /**
         * @returns All `DebugNode` matches for the predicate at any depth in the subtree.
         */
        queryAllNodes(predicate) {
          const matches2 = [];
          _queryAll(this, predicate, matches2, false);
          return matches2;
        }
        /**
         * Triggers the event by its name if there is a corresponding listener in the element's
         * `listeners` collection.
         *
         * If the event lacks a listener or there's some other problem, consider
         * calling `nativeElement.dispatchEvent(eventObject)`.
         *
         * @param eventName The name of the event to trigger
         * @param eventObj The _event object_ expected by the handler
         *
         * @see [Testing components scenarios](guide/testing-components-scenarios#trigger-event-handler)
         */
        triggerEventHandler(eventName, eventObj) {
          const node = this.nativeNode;
          const invokedListeners = [];
          this.listeners.forEach((listener2) => {
            if (listener2.name === eventName) {
              const callback = listener2.callback;
              callback.call(node, eventObj);
              invokedListeners.push(callback);
            }
          });
          if (typeof node.eventListeners === "function") {
            node.eventListeners(eventName).forEach((listener2) => {
              if (listener2.toString().indexOf("__ngUnwrap__") !== -1) {
                const unwrappedListener = listener2("__ngUnwrap__");
                return invokedListeners.indexOf(unwrappedListener) === -1 && unwrappedListener.call(node, eventObj);
              }
            });
          }
        }
      };
      NG_DEBUG_PROPERTY = "__ng_debug__";
      DefaultIterableDifferFactory = class {
        constructor() {
        }
        supports(obj) {
          return isListLikeIterable(obj);
        }
        create(trackByFn) {
          return new DefaultIterableDiffer(trackByFn);
        }
      };
      trackByIdentity = (index, item) => item;
      DefaultIterableDiffer = class {
        constructor(trackByFn) {
          this.length = 0;
          this._linkedRecords = null;
          this._unlinkedRecords = null;
          this._previousItHead = null;
          this._itHead = null;
          this._itTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._movesHead = null;
          this._movesTail = null;
          this._removalsHead = null;
          this._removalsTail = null;
          this._identityChangesHead = null;
          this._identityChangesTail = null;
          this._trackByFn = trackByFn || trackByIdentity;
        }
        forEachItem(fn2) {
          let record;
          for (record = this._itHead; record !== null; record = record._next) {
            fn2(record);
          }
        }
        forEachOperation(fn2) {
          let nextIt = this._itHead;
          let nextRemove = this._removalsHead;
          let addRemoveOffset = 0;
          let moveOffsets = null;
          while (nextIt || nextRemove) {
            const record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
            const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
            const currentIndex = record.currentIndex;
            if (record === nextRemove) {
              addRemoveOffset--;
              nextRemove = nextRemove._nextRemoved;
            } else {
              nextIt = nextIt._next;
              if (record.previousIndex == null) {
                addRemoveOffset++;
              } else {
                if (!moveOffsets)
                  moveOffsets = [];
                const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                const localCurrentIndex = currentIndex - addRemoveOffset;
                if (localMovePreviousIndex != localCurrentIndex) {
                  for (let i = 0; i < localMovePreviousIndex; i++) {
                    const offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
                    const index = offset + i;
                    if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                      moveOffsets[i] = offset + 1;
                    }
                  }
                  const previousIndex = record.previousIndex;
                  moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                }
              }
            }
            if (adjPreviousIndex !== currentIndex) {
              fn2(record, adjPreviousIndex, currentIndex);
            }
          }
        }
        forEachPreviousItem(fn2) {
          let record;
          for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
            fn2(record);
          }
        }
        forEachAddedItem(fn2) {
          let record;
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn2(record);
          }
        }
        forEachMovedItem(fn2) {
          let record;
          for (record = this._movesHead; record !== null; record = record._nextMoved) {
            fn2(record);
          }
        }
        forEachRemovedItem(fn2) {
          let record;
          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn2(record);
          }
        }
        forEachIdentityChange(fn2) {
          let record;
          for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
            fn2(record);
          }
        }
        diff(collection) {
          if (collection == null)
            collection = [];
          if (!isListLikeIterable(collection)) {
            throw new RuntimeError(900, ngDevMode && `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);
          }
          if (this.check(collection)) {
            return this;
          } else {
            return null;
          }
        }
        onDestroy() {
        }
        check(collection) {
          this._reset();
          let record = this._itHead;
          let mayBeDirty = false;
          let index;
          let item;
          let itemTrackBy;
          if (Array.isArray(collection)) {
            this.length = collection.length;
            for (let index2 = 0; index2 < this.length; index2++) {
              item = collection[index2];
              itemTrackBy = this._trackByFn(index2, item);
              if (record === null || !Object.is(record.trackById, itemTrackBy)) {
                record = this._mismatch(record, item, itemTrackBy, index2);
                mayBeDirty = true;
              } else {
                if (mayBeDirty) {
                  record = this._verifyReinsertion(record, item, itemTrackBy, index2);
                }
                if (!Object.is(record.item, item))
                  this._addIdentityChange(record, item);
              }
              record = record._next;
            }
          } else {
            index = 0;
            iterateListLike(collection, (item2) => {
              itemTrackBy = this._trackByFn(index, item2);
              if (record === null || !Object.is(record.trackById, itemTrackBy)) {
                record = this._mismatch(record, item2, itemTrackBy, index);
                mayBeDirty = true;
              } else {
                if (mayBeDirty) {
                  record = this._verifyReinsertion(record, item2, itemTrackBy, index);
                }
                if (!Object.is(record.item, item2))
                  this._addIdentityChange(record, item2);
              }
              record = record._next;
              index++;
            });
            this.length = index;
          }
          this._truncate(record);
          this.collection = collection;
          return this.isDirty;
        }
        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
         * changes.
         */
        get isDirty() {
          return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
        }
        /**
         * Reset the state of the change objects to show no changes. This means set previousKey to
         * currentKey, and clear all of the queues (additions, moves, removals).
         * Set the previousIndexes of moved and added items to their currentIndexes
         * Reset the list of additions, moves and removals
         *
         * @internal
         */
        _reset() {
          if (this.isDirty) {
            let record;
            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
              record._nextPrevious = record._next;
            }
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
              record.previousIndex = record.currentIndex;
            }
            this._additionsHead = this._additionsTail = null;
            for (record = this._movesHead; record !== null; record = record._nextMoved) {
              record.previousIndex = record.currentIndex;
            }
            this._movesHead = this._movesTail = null;
            this._removalsHead = this._removalsTail = null;
            this._identityChangesHead = this._identityChangesTail = null;
          }
        }
        /**
         * This is the core function which handles differences between collections.
         *
         * - `record` is the record which we saw at this position last time. If null then it is a new
         *   item.
         * - `item` is the current item in the collection
         * - `index` is the position of the item in the collection
         *
         * @internal
         */
        _mismatch(record, item, itemTrackBy, index) {
          let previousRecord;
          if (record === null) {
            previousRecord = this._itTail;
          } else {
            previousRecord = record._prev;
            this._remove(record);
          }
          record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
          if (record !== null) {
            if (!Object.is(record.item, item))
              this._addIdentityChange(record, item);
            this._reinsertAfter(record, previousRecord, index);
          } else {
            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
            if (record !== null) {
              if (!Object.is(record.item, item))
                this._addIdentityChange(record, item);
              this._moveAfter(record, previousRecord, index);
            } else {
              record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
            }
          }
          return record;
        }
        /**
         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
         *
         * Use case: `[a, a]` => `[b, a, a]`
         *
         * If we did not have this check then the insertion of `b` would:
         *   1) evict first `a`
         *   2) insert `b` at `0` index.
         *   3) leave `a` at index `1` as is. <-- this is wrong!
         *   3) reinsert `a` at index 2. <-- this is wrong!
         *
         * The correct behavior is:
         *   1) evict first `a`
         *   2) insert `b` at `0` index.
         *   3) reinsert `a` at index 1.
         *   3) move `a` at from `1` to `2`.
         *
         *
         * Double check that we have not evicted a duplicate item. We need to check if the item type may
         * have already been removed:
         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
         * at the end.
         *
         * @internal
         */
        _verifyReinsertion(record, item, itemTrackBy, index) {
          let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
          if (reinsertRecord !== null) {
            record = this._reinsertAfter(reinsertRecord, record._prev, index);
          } else if (record.currentIndex != index) {
            record.currentIndex = index;
            this._addToMoves(record, index);
          }
          return record;
        }
        /**
         * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
         *
         * - `record` The first excess {@link IterableChangeRecord_}.
         *
         * @internal
         */
        _truncate(record) {
          while (record !== null) {
            const nextRecord = record._next;
            this._addToRemovals(this._unlink(record));
            record = nextRecord;
          }
          if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.clear();
          }
          if (this._additionsTail !== null) {
            this._additionsTail._nextAdded = null;
          }
          if (this._movesTail !== null) {
            this._movesTail._nextMoved = null;
          }
          if (this._itTail !== null) {
            this._itTail._next = null;
          }
          if (this._removalsTail !== null) {
            this._removalsTail._nextRemoved = null;
          }
          if (this._identityChangesTail !== null) {
            this._identityChangesTail._nextIdentityChange = null;
          }
        }
        /** @internal */
        _reinsertAfter(record, prevRecord, index) {
          if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.remove(record);
          }
          const prev = record._prevRemoved;
          const next = record._nextRemoved;
          if (prev === null) {
            this._removalsHead = next;
          } else {
            prev._nextRemoved = next;
          }
          if (next === null) {
            this._removalsTail = prev;
          } else {
            next._prevRemoved = prev;
          }
          this._insertAfter(record, prevRecord, index);
          this._addToMoves(record, index);
          return record;
        }
        /** @internal */
        _moveAfter(record, prevRecord, index) {
          this._unlink(record);
          this._insertAfter(record, prevRecord, index);
          this._addToMoves(record, index);
          return record;
        }
        /** @internal */
        _addAfter(record, prevRecord, index) {
          this._insertAfter(record, prevRecord, index);
          if (this._additionsTail === null) {
            this._additionsTail = this._additionsHead = record;
          } else {
            this._additionsTail = this._additionsTail._nextAdded = record;
          }
          return record;
        }
        /** @internal */
        _insertAfter(record, prevRecord, index) {
          const next = prevRecord === null ? this._itHead : prevRecord._next;
          record._next = next;
          record._prev = prevRecord;
          if (next === null) {
            this._itTail = record;
          } else {
            next._prev = record;
          }
          if (prevRecord === null) {
            this._itHead = record;
          } else {
            prevRecord._next = record;
          }
          if (this._linkedRecords === null) {
            this._linkedRecords = new _DuplicateMap();
          }
          this._linkedRecords.put(record);
          record.currentIndex = index;
          return record;
        }
        /** @internal */
        _remove(record) {
          return this._addToRemovals(this._unlink(record));
        }
        /** @internal */
        _unlink(record) {
          if (this._linkedRecords !== null) {
            this._linkedRecords.remove(record);
          }
          const prev = record._prev;
          const next = record._next;
          if (prev === null) {
            this._itHead = next;
          } else {
            prev._next = next;
          }
          if (next === null) {
            this._itTail = prev;
          } else {
            next._prev = prev;
          }
          return record;
        }
        /** @internal */
        _addToMoves(record, toIndex) {
          if (record.previousIndex === toIndex) {
            return record;
          }
          if (this._movesTail === null) {
            this._movesTail = this._movesHead = record;
          } else {
            this._movesTail = this._movesTail._nextMoved = record;
          }
          return record;
        }
        _addToRemovals(record) {
          if (this._unlinkedRecords === null) {
            this._unlinkedRecords = new _DuplicateMap();
          }
          this._unlinkedRecords.put(record);
          record.currentIndex = null;
          record._nextRemoved = null;
          if (this._removalsTail === null) {
            this._removalsTail = this._removalsHead = record;
            record._prevRemoved = null;
          } else {
            record._prevRemoved = this._removalsTail;
            this._removalsTail = this._removalsTail._nextRemoved = record;
          }
          return record;
        }
        /** @internal */
        _addIdentityChange(record, item) {
          record.item = item;
          if (this._identityChangesTail === null) {
            this._identityChangesTail = this._identityChangesHead = record;
          } else {
            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
          }
          return record;
        }
      };
      IterableChangeRecord_ = class {
        constructor(item, trackById) {
          this.item = item;
          this.trackById = trackById;
          this.currentIndex = null;
          this.previousIndex = null;
          this._nextPrevious = null;
          this._prev = null;
          this._next = null;
          this._prevDup = null;
          this._nextDup = null;
          this._prevRemoved = null;
          this._nextRemoved = null;
          this._nextAdded = null;
          this._nextMoved = null;
          this._nextIdentityChange = null;
        }
      };
      _DuplicateItemRecordList = class {
        constructor() {
          this._head = null;
          this._tail = null;
        }
        /**
         * Append the record to the list of duplicates.
         *
         * Note: by design all records in the list of duplicates hold the same value in record.item.
         */
        add(record) {
          if (this._head === null) {
            this._head = this._tail = record;
            record._nextDup = null;
            record._prevDup = null;
          } else {
            this._tail._nextDup = record;
            record._prevDup = this._tail;
            record._nextDup = null;
            this._tail = record;
          }
        }
        // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
        // IterableChangeRecord_.currentIndex >= atOrAfterIndex
        get(trackById, atOrAfterIndex) {
          let record;
          for (record = this._head; record !== null; record = record._nextDup) {
            if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) && Object.is(record.trackById, trackById)) {
              return record;
            }
          }
          return null;
        }
        /**
         * Remove one {@link IterableChangeRecord_} from the list of duplicates.
         *
         * Returns whether the list of duplicates is empty.
         */
        remove(record) {
          const prev = record._prevDup;
          const next = record._nextDup;
          if (prev === null) {
            this._head = next;
          } else {
            prev._nextDup = next;
          }
          if (next === null) {
            this._tail = prev;
          } else {
            next._prevDup = prev;
          }
          return this._head === null;
        }
      };
      _DuplicateMap = class {
        constructor() {
          this.map = /* @__PURE__ */ new Map();
        }
        put(record) {
          const key = record.trackById;
          let duplicates = this.map.get(key);
          if (!duplicates) {
            duplicates = new _DuplicateItemRecordList();
            this.map.set(key, duplicates);
          }
          duplicates.add(record);
        }
        /**
         * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
         * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
         *
         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
         * have any more `a`s needs to return the second `a`.
         */
        get(trackById, atOrAfterIndex) {
          const key = trackById;
          const recordList = this.map.get(key);
          return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
        }
        /**
         * Removes a {@link IterableChangeRecord_} from the list of duplicates.
         *
         * The list of duplicates also is removed from the map if it gets empty.
         */
        remove(record) {
          const key = record.trackById;
          const recordList = this.map.get(key);
          if (recordList.remove(record)) {
            this.map.delete(key);
          }
          return record;
        }
        get isEmpty() {
          return this.map.size === 0;
        }
        clear() {
          this.map.clear();
        }
      };
      DefaultKeyValueDifferFactory = class {
        constructor() {
        }
        supports(obj) {
          return obj instanceof Map || isJsObject(obj);
        }
        create() {
          return new DefaultKeyValueDiffer();
        }
      };
      DefaultKeyValueDiffer = class {
        constructor() {
          this._records = /* @__PURE__ */ new Map();
          this._mapHead = null;
          this._appendAfter = null;
          this._previousMapHead = null;
          this._changesHead = null;
          this._changesTail = null;
          this._additionsHead = null;
          this._additionsTail = null;
          this._removalsHead = null;
          this._removalsTail = null;
        }
        get isDirty() {
          return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
        }
        forEachItem(fn2) {
          let record;
          for (record = this._mapHead; record !== null; record = record._next) {
            fn2(record);
          }
        }
        forEachPreviousItem(fn2) {
          let record;
          for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            fn2(record);
          }
        }
        forEachChangedItem(fn2) {
          let record;
          for (record = this._changesHead; record !== null; record = record._nextChanged) {
            fn2(record);
          }
        }
        forEachAddedItem(fn2) {
          let record;
          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn2(record);
          }
        }
        forEachRemovedItem(fn2) {
          let record;
          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn2(record);
          }
        }
        diff(map3) {
          if (!map3) {
            map3 = /* @__PURE__ */ new Map();
          } else if (!(map3 instanceof Map || isJsObject(map3))) {
            throw new RuntimeError(900, ngDevMode && `Error trying to diff '${stringify(map3)}'. Only maps and objects are allowed`);
          }
          return this.check(map3) ? this : null;
        }
        onDestroy() {
        }
        /**
         * Check the current state of the map vs the previous.
         * The algorithm is optimised for when the keys do no change.
         */
        check(map3) {
          this._reset();
          let insertBefore2 = this._mapHead;
          this._appendAfter = null;
          this._forEach(map3, (value, key) => {
            if (insertBefore2 && insertBefore2.key === key) {
              this._maybeAddToChanges(insertBefore2, value);
              this._appendAfter = insertBefore2;
              insertBefore2 = insertBefore2._next;
            } else {
              const record = this._getOrCreateRecordForKey(key, value);
              insertBefore2 = this._insertBeforeOrAppend(insertBefore2, record);
            }
          });
          if (insertBefore2) {
            if (insertBefore2._prev) {
              insertBefore2._prev._next = null;
            }
            this._removalsHead = insertBefore2;
            for (let record = insertBefore2; record !== null; record = record._nextRemoved) {
              if (record === this._mapHead) {
                this._mapHead = null;
              }
              this._records.delete(record.key);
              record._nextRemoved = record._next;
              record.previousValue = record.currentValue;
              record.currentValue = null;
              record._prev = null;
              record._next = null;
            }
          }
          if (this._changesTail)
            this._changesTail._nextChanged = null;
          if (this._additionsTail)
            this._additionsTail._nextAdded = null;
          return this.isDirty;
        }
        /**
         * Inserts a record before `before` or append at the end of the list when `before` is null.
         *
         * Notes:
         * - This method appends at `this._appendAfter`,
         * - This method updates `this._appendAfter`,
         * - The return value is the new value for the insertion pointer.
         */
        _insertBeforeOrAppend(before, record) {
          if (before) {
            const prev = before._prev;
            record._next = before;
            record._prev = prev;
            before._prev = record;
            if (prev) {
              prev._next = record;
            }
            if (before === this._mapHead) {
              this._mapHead = record;
            }
            this._appendAfter = before;
            return before;
          }
          if (this._appendAfter) {
            this._appendAfter._next = record;
            record._prev = this._appendAfter;
          } else {
            this._mapHead = record;
          }
          this._appendAfter = record;
          return null;
        }
        _getOrCreateRecordForKey(key, value) {
          if (this._records.has(key)) {
            const record2 = this._records.get(key);
            this._maybeAddToChanges(record2, value);
            const prev = record2._prev;
            const next = record2._next;
            if (prev) {
              prev._next = next;
            }
            if (next) {
              next._prev = prev;
            }
            record2._next = null;
            record2._prev = null;
            return record2;
          }
          const record = new KeyValueChangeRecord_(key);
          this._records.set(key, record);
          record.currentValue = value;
          this._addToAdditions(record);
          return record;
        }
        /** @internal */
        _reset() {
          if (this.isDirty) {
            let record;
            this._previousMapHead = this._mapHead;
            for (record = this._previousMapHead; record !== null; record = record._next) {
              record._nextPrevious = record._next;
            }
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
              record.previousValue = record.currentValue;
            }
            for (record = this._additionsHead; record != null; record = record._nextAdded) {
              record.previousValue = record.currentValue;
            }
            this._changesHead = this._changesTail = null;
            this._additionsHead = this._additionsTail = null;
            this._removalsHead = null;
          }
        }
        // Add the record or a given key to the list of changes only when the value has actually changed
        _maybeAddToChanges(record, newValue) {
          if (!Object.is(newValue, record.currentValue)) {
            record.previousValue = record.currentValue;
            record.currentValue = newValue;
            this._addToChanges(record);
          }
        }
        _addToAdditions(record) {
          if (this._additionsHead === null) {
            this._additionsHead = this._additionsTail = record;
          } else {
            this._additionsTail._nextAdded = record;
            this._additionsTail = record;
          }
        }
        _addToChanges(record) {
          if (this._changesHead === null) {
            this._changesHead = this._changesTail = record;
          } else {
            this._changesTail._nextChanged = record;
            this._changesTail = record;
          }
        }
        /** @internal */
        _forEach(obj, fn2) {
          if (obj instanceof Map) {
            obj.forEach(fn2);
          } else {
            Object.keys(obj).forEach((k) => fn2(obj[k], k));
          }
        }
      };
      KeyValueChangeRecord_ = class {
        constructor(key) {
          this.key = key;
          this.previousValue = null;
          this.currentValue = null;
          this._nextPrevious = null;
          this._next = null;
          this._prev = null;
          this._nextAdded = null;
          this._nextRemoved = null;
          this._nextChanged = null;
        }
      };
      IterableDiffers = class _IterableDiffers {
        static {
          this.\u0275prov = \u0275\u0275defineInjectable({ token: _IterableDiffers, providedIn: "root", factory: defaultIterableDiffersFactory });
        }
        constructor(factories) {
          this.factories = factories;
        }
        static create(factories, parent) {
          if (parent != null) {
            const copied = parent.factories.slice();
            factories = factories.concat(copied);
          }
          return new _IterableDiffers(factories);
        }
        /**
         * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
         * inherited {@link IterableDiffers} instance with the provided factories and return a new
         * {@link IterableDiffers} instance.
         *
         * @usageNotes
         * ### Example
         *
         * The following example shows how to extend an existing list of factories,
         * which will only be applied to the injector for this component and its children.
         * This step is all that's required to make a new {@link IterableDiffer} available.
         *
         * ```
         * @Component({
         *   viewProviders: [
         *     IterableDiffers.extend([new ImmutableListDiffer()])
         *   ]
         * })
         * ```
         */
        static extend(factories) {
          return {
            provide: _IterableDiffers,
            useFactory: (parent) => {
              return _IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());
            },
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[_IterableDiffers, new SkipSelf(), new Optional()]]
          };
        }
        find(iterable) {
          const factory = this.factories.find((f) => f.supports(iterable));
          if (factory != null) {
            return factory;
          } else {
            throw new RuntimeError(901, ngDevMode && `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);
          }
        }
      };
      KeyValueDiffers = class _KeyValueDiffers {
        static {
          this.\u0275prov = \u0275\u0275defineInjectable({ token: _KeyValueDiffers, providedIn: "root", factory: defaultKeyValueDiffersFactory });
        }
        constructor(factories) {
          this.factories = factories;
        }
        static create(factories, parent) {
          if (parent) {
            const copied = parent.factories.slice();
            factories = factories.concat(copied);
          }
          return new _KeyValueDiffers(factories);
        }
        /**
         * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
         * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
         * {@link KeyValueDiffers} instance.
         *
         * @usageNotes
         * ### Example
         *
         * The following example shows how to extend an existing list of factories,
         * which will only be applied to the injector for this component and its children.
         * This step is all that's required to make a new {@link KeyValueDiffer} available.
         *
         * ```
         * @Component({
         *   viewProviders: [
         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
         *   ]
         * })
         * ```
         */
        static extend(factories) {
          return {
            provide: _KeyValueDiffers,
            useFactory: (parent) => {
              return _KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());
            },
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[_KeyValueDiffers, new SkipSelf(), new Optional()]]
          };
        }
        find(kv) {
          const factory = this.factories.find((f) => f.supports(kv));
          if (factory) {
            return factory;
          }
          throw new RuntimeError(901, ngDevMode && `Cannot find a differ supporting object '${kv}'`);
        }
      };
      keyValDiff = [new DefaultKeyValueDifferFactory()];
      iterableDiff = [new DefaultIterableDifferFactory()];
      defaultIterableDiffers = new IterableDiffers(iterableDiff);
      defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
      platformCore = createPlatformFactory(null, "core", []);
      ApplicationModule = class _ApplicationModule {
        // Inject ApplicationRef to make it eager...
        constructor(appRef) {
        }
        static {
          this.\u0275fac = function ApplicationModule_Factory(t) {
            return new (t || _ApplicationModule)(\u0275\u0275inject(ApplicationRef));
          };
        }
        static {
          this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _ApplicationModule });
        }
        static {
          this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
        }
      };
      (() => {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationModule, [{
          type: NgModule
        }], () => [{ type: ApplicationRef }], null);
      })();
      SCAN_DELAY = 200;
      OVERSIZED_IMAGE_TOLERANCE = 1200;
      ImagePerformanceWarning = class _ImagePerformanceWarning {
        constructor() {
          this.window = null;
          this.observer = null;
          this.options = inject(IMAGE_CONFIG);
          this.ngZone = inject(NgZone);
        }
        start() {
          if (typeof PerformanceObserver === "undefined" || this.options?.disableImageSizeWarning && this.options?.disableImageLazyLoadWarning) {
            return;
          }
          this.observer = this.initPerformanceObserver();
          const doc3 = getDocument();
          const win3 = doc3.defaultView;
          if (typeof win3 !== "undefined") {
            this.window = win3;
            const waitToScan = () => {
              setTimeout(this.scanImages.bind(this), SCAN_DELAY);
            };
            this.ngZone.runOutsideAngular(() => {
              if (doc3.readyState === "complete") {
                waitToScan();
              } else {
                this.window?.addEventListener("load", waitToScan, { once: true });
              }
            });
          }
        }
        ngOnDestroy() {
          this.observer?.disconnect();
        }
        initPerformanceObserver() {
          if (typeof PerformanceObserver === "undefined") {
            return null;
          }
          const observer = new PerformanceObserver((entryList) => {
            const entries = entryList.getEntries();
            if (entries.length === 0)
              return;
            const lcpElement = entries[entries.length - 1];
            const imgSrc = lcpElement.element?.src ?? "";
            if (imgSrc.startsWith("data:") || imgSrc.startsWith("blob:"))
              return;
            this.lcpImageUrl = imgSrc;
          });
          observer.observe({ type: "largest-contentful-paint", buffered: true });
          return observer;
        }
        scanImages() {
          const images = getDocument().querySelectorAll("img");
          let lcpElementFound, lcpElementLoadedCorrectly = false;
          images.forEach((image) => {
            if (!this.options?.disableImageSizeWarning) {
              for (const image2 of images) {
                if (!image2.getAttribute("ng-img") && this.isOversized(image2)) {
                  logOversizedImageWarning(image2.src);
                }
              }
            }
            if (!this.options?.disableImageLazyLoadWarning && this.lcpImageUrl) {
              if (image.src === this.lcpImageUrl) {
                lcpElementFound = true;
                if (image.loading !== "lazy" || image.getAttribute("ng-img")) {
                  lcpElementLoadedCorrectly = true;
                }
              }
            }
          });
          if (lcpElementFound && !lcpElementLoadedCorrectly && this.lcpImageUrl && !this.options?.disableImageLazyLoadWarning) {
            logLazyLCPWarning(this.lcpImageUrl);
          }
        }
        isOversized(image) {
          if (!this.window) {
            return false;
          }
          const computedStyle = this.window.getComputedStyle(image);
          let renderedWidth = parseFloat(computedStyle.getPropertyValue("width"));
          let renderedHeight = parseFloat(computedStyle.getPropertyValue("height"));
          const boxSizing = computedStyle.getPropertyValue("box-sizing");
          const objectFit = computedStyle.getPropertyValue("object-fit");
          if (objectFit === `cover`) {
            return false;
          }
          if (boxSizing === "border-box") {
            const paddingTop = computedStyle.getPropertyValue("padding-top");
            const paddingRight = computedStyle.getPropertyValue("padding-right");
            const paddingBottom = computedStyle.getPropertyValue("padding-bottom");
            const paddingLeft = computedStyle.getPropertyValue("padding-left");
            renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);
            renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);
          }
          const intrinsicWidth = image.naturalWidth;
          const intrinsicHeight = image.naturalHeight;
          const recommendedWidth = this.window.devicePixelRatio * renderedWidth;
          const recommendedHeight = this.window.devicePixelRatio * renderedHeight;
          const oversizedWidth = intrinsicWidth - recommendedWidth >= OVERSIZED_IMAGE_TOLERANCE;
          const oversizedHeight = intrinsicHeight - recommendedHeight >= OVERSIZED_IMAGE_TOLERANCE;
          return oversizedWidth || oversizedHeight;
        }
        static {
          this.\u0275fac = function ImagePerformanceWarning_Factory(t) {
            return new (t || _ImagePerformanceWarning)();
          };
        }
        static {
          this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ImagePerformanceWarning, factory: _ImagePerformanceWarning.\u0275fac, providedIn: "root" });
        }
      };
      (() => {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ImagePerformanceWarning, [{
          type: Injectable,
          args: [{ providedIn: "root" }]
        }], null, null);
      })();
      ChangeDetectionSchedulerImpl = class _ChangeDetectionSchedulerImpl {
        constructor() {
          this.appRef = inject(ApplicationRef);
          this.taskService = inject(PendingTasks);
          this.pendingRenderTaskId = null;
          this.shouldRefreshViews = false;
        }
        notify(type = 0) {
          this.shouldRefreshViews ||= type === 0;
          if (this.pendingRenderTaskId !== null) {
            return;
          }
          this.pendingRenderTaskId = this.taskService.add();
          this.raceTimeoutAndRequestAnimationFrame();
        }
        /**
         * Run change detection after the first of setTimeout and requestAnimationFrame resolves.
         *
         * - `requestAnimationFrame` ensures that change detection runs ahead of a browser repaint.
         * This ensures that the create and update passes of a change detection always happen
         * in the same frame.
         * - When the browser is resource-starved, `rAF` can execute _before_ a `setTimeout` because
         * rendering is a very high priority process. This means that `setTimeout` cannot guarantee
         * same-frame create and update pass, when `setTimeout` is used to schedule the update phase.
         * - While `rAF` gives us the desirable same-frame updates, it has two limitations that
         * prevent it from being used alone. First, it does not run in background tabs, which would
         * prevent Angular from initializing an application when opened in a new tab (for example).
         * Second, repeated calls to requestAnimationFrame will execute at the refresh rate of the
         * hardware (~16ms for a 60Hz display). This would cause significant slowdown of tests that
         * are written with several updates and asserts in the form of "update; await stable; assert;".
         * - Both `setTimeout` and `rAF` are able to "coalesce" several events from a single user
         * interaction into a single change detection. Importantly, this reduces view tree traversals when
         * compared to an alternative timing mechanism like `queueMicrotask`, where change detection would
         * then be interleaves between each event.
         *
         * By running change detection after the first of `setTimeout` and `rAF` to execute, we get the
         * best of both worlds.
         */
        async raceTimeoutAndRequestAnimationFrame() {
          const timeout = new Promise((resolve) => setTimeout(resolve));
          const rAF = typeof _global["requestAnimationFrame"] === "function" ? new Promise((resolve) => requestAnimationFrame(() => resolve())) : null;
          await Promise.race([timeout, rAF]);
          this.tick();
        }
        tick() {
          try {
            if (!this.appRef.destroyed) {
              this.appRef._tick(this.shouldRefreshViews);
            }
          } finally {
            this.shouldRefreshViews = false;
            const taskId = this.pendingRenderTaskId;
            this.pendingRenderTaskId = null;
            this.taskService.remove(taskId);
          }
        }
        static {
          this.\u0275fac = function ChangeDetectionSchedulerImpl_Factory(t) {
            return new (t || _ChangeDetectionSchedulerImpl)();
          };
        }
        static {
          this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ChangeDetectionSchedulerImpl, factory: _ChangeDetectionSchedulerImpl.\u0275fac, providedIn: "root" });
        }
      };
      (() => {
        (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChangeDetectionSchedulerImpl, [{
          type: Injectable,
          args: [{ providedIn: "root" }]
        }], null, null);
      })();
      isHydrationSupportEnabled = false;
      _isI18nHydrationSupportEnabled = false;
      APPLICATION_IS_STABLE_TIMEOUT = 1e4;
      SerializedViewCollection = class {
        constructor() {
          this.views = [];
          this.indexByContent = /* @__PURE__ */ new Map();
        }
        add(serializedView) {
          const viewAsString = JSON.stringify(serializedView);
          if (!this.indexByContent.has(viewAsString)) {
            const index = this.views.length;
            this.views.push(serializedView);
            this.indexByContent.set(viewAsString, index);
            return index;
          }
          return this.indexByContent.get(viewAsString);
        }
        getAll() {
          return this.views;
        }
      };
      tViewSsrId = 0;
      APP_EFFECT_SCHEDULER = new InjectionToken("", {
        providedIn: "root",
        factory: () => inject(EffectScheduler)
      });
      EffectScheduler = class _EffectScheduler {
        static {
          this.\u0275prov = \u0275\u0275defineInjectable({
            token: _EffectScheduler,
            providedIn: "root",
            factory: () => new ZoneAwareEffectScheduler()
          });
        }
      };
      ZoneAwareEffectScheduler = class {
        constructor() {
          this.queuedEffectCount = 0;
          this.queues = /* @__PURE__ */ new Map();
          this.pendingTasks = inject(PendingTasks);
          this.taskId = null;
        }
        scheduleEffect(handle) {
          this.enqueue(handle);
          if (this.taskId === null) {
            const taskId = this.taskId = this.pendingTasks.add();
            queueMicrotask(() => {
              this.flush();
              this.pendingTasks.remove(taskId);
              this.taskId = null;
            });
          }
        }
        enqueue(handle) {
          const zone = handle.creationZone;
          if (!this.queues.has(zone)) {
            this.queues.set(zone, /* @__PURE__ */ new Set());
          }
          const queue = this.queues.get(zone);
          if (queue.has(handle)) {
            return;
          }
          this.queuedEffectCount++;
          queue.add(handle);
        }
        /**
         * Run all scheduled effects.
         *
         * Execution order of effects within the same zone is guaranteed to be FIFO, but there is no
         * ordering guarantee between effects scheduled in different zones.
         */
        flush() {
          while (this.queuedEffectCount > 0) {
            for (const [zone, queue] of this.queues) {
              if (zone === null) {
                this.flushQueue(queue);
              } else {
                zone.run(() => this.flushQueue(queue));
              }
            }
          }
        }
        flushQueue(queue) {
          for (const handle of queue) {
            queue.delete(handle);
            this.queuedEffectCount--;
            handle.run();
          }
        }
      };
      EffectHandle = class {
        constructor(scheduler, effectFn, creationZone, destroyRef, injector, allowSignalWrites) {
          this.scheduler = scheduler;
          this.effectFn = effectFn;
          this.creationZone = creationZone;
          this.injector = injector;
          this.watcher = createWatch((onCleanup) => this.runEffect(onCleanup), () => this.schedule(), allowSignalWrites);
          this.unregisterOnDestroy = destroyRef?.onDestroy(() => this.destroy());
        }
        runEffect(onCleanup) {
          try {
            this.effectFn(onCleanup);
          } catch (err2) {
            const errorHandler2 = this.injector.get(ErrorHandler, null, { optional: true });
            errorHandler2?.handleError(err2);
          }
        }
        run() {
          this.watcher.run();
        }
        schedule() {
          this.scheduler.scheduleEffect(this);
        }
        destroy() {
          this.watcher.destroy();
          this.unregisterOnDestroy?.();
        }
      };
      if (typeof ngDevMode !== "undefined" && ngDevMode) {
        _global.$localize ??= function() {
          throw new Error("It looks like your application or one of its dependencies is using i18n.\nAngular 9 introduced a global `$localize()` function that needs to be loaded.\nPlease run `ng add @angular/localize` from the Angular CLI.\n(For non-CLI projects, add `import '@angular/localize/init';` to your `polyfills.ts` file.\nFor server-side rendering applications add the import to your `main.server.ts` file.)");
        };
      }
    }
  });

  // node_modules/@angular/common/fesm2022/common.mjs
  function getDOM() {
    return _DOM;
  }
  function setRootDomAdapter(adapter) {
    _DOM ??= adapter;
  }
  function joinWithSlash(start, end) {
    if (start.length == 0) {
      return end;
    }
    if (end.length == 0) {
      return start;
    }
    let slashes = 0;
    if (start.endsWith("/")) {
      slashes++;
    }
    if (end.startsWith("/")) {
      slashes++;
    }
    if (slashes == 2) {
      return start + end.substring(1);
    }
    if (slashes == 1) {
      return start + end;
    }
    return start + "/" + end;
  }
  function stripTrailingSlash(url) {
    const match2 = url.match(/#|\?|$/);
    const pathEndIdx = match2 && match2.index || url.length;
    const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === "/" ? 1 : 0);
    return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);
  }
  function normalizeQueryParams(params) {
    return params && params[0] !== "?" ? "?" + params : params;
  }
  function createLocation() {
    return new Location(\u0275\u0275inject(LocationStrategy));
  }
  function _stripBasePath(basePath, url) {
    if (!basePath || !url.startsWith(basePath)) {
      return url;
    }
    const strippedUrl = url.substring(basePath.length);
    if (strippedUrl === "" || ["/", ";", "?", "#"].includes(strippedUrl[0])) {
      return strippedUrl;
    }
    return url;
  }
  function _stripIndexHtml(url) {
    return url.replace(/\/index.html$/, "");
  }
  function _stripOrigin(baseHref) {
    const isAbsoluteUrl2 = new RegExp("^(https?:)?//").test(baseHref);
    if (isAbsoluteUrl2) {
      const [, pathname] = baseHref.split(/\/\/[^\/]+/);
      return pathname;
    }
    return baseHref;
  }
  function getLocaleId2(locale) {
    return findLocaleData(locale)[LocaleDataIndex.LocaleId];
  }
  function getLocaleDayPeriods(locale, formStyle, width) {
    const data = findLocaleData(locale);
    const amPmData = [
      data[LocaleDataIndex.DayPeriodsFormat],
      data[LocaleDataIndex.DayPeriodsStandalone]
    ];
    const amPm = getLastDefinedValue(amPmData, formStyle);
    return getLastDefinedValue(amPm, width);
  }
  function getLocaleDayNames(locale, formStyle, width) {
    const data = findLocaleData(locale);
    const daysData = [
      data[LocaleDataIndex.DaysFormat],
      data[LocaleDataIndex.DaysStandalone]
    ];
    const days = getLastDefinedValue(daysData, formStyle);
    return getLastDefinedValue(days, width);
  }
  function getLocaleMonthNames(locale, formStyle, width) {
    const data = findLocaleData(locale);
    const monthsData = [
      data[LocaleDataIndex.MonthsFormat],
      data[LocaleDataIndex.MonthsStandalone]
    ];
    const months = getLastDefinedValue(monthsData, formStyle);
    return getLastDefinedValue(months, width);
  }
  function getLocaleEraNames(locale, width) {
    const data = findLocaleData(locale);
    const erasData = data[LocaleDataIndex.Eras];
    return getLastDefinedValue(erasData, width);
  }
  function getLocaleDateFormat(locale, width) {
    const data = findLocaleData(locale);
    return getLastDefinedValue(data[LocaleDataIndex.DateFormat], width);
  }
  function getLocaleTimeFormat(locale, width) {
    const data = findLocaleData(locale);
    return getLastDefinedValue(data[LocaleDataIndex.TimeFormat], width);
  }
  function getLocaleDateTimeFormat(locale, width) {
    const data = findLocaleData(locale);
    const dateTimeFormatData = data[LocaleDataIndex.DateTimeFormat];
    return getLastDefinedValue(dateTimeFormatData, width);
  }
  function getLocaleNumberSymbol(locale, symbol) {
    const data = findLocaleData(locale);
    const res = data[LocaleDataIndex.NumberSymbols][symbol];
    if (typeof res === "undefined") {
      if (symbol === NumberSymbol.CurrencyDecimal) {
        return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];
      } else if (symbol === NumberSymbol.CurrencyGroup) {
        return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Group];
      }
    }
    return res;
  }
  function getLocaleNumberFormat(locale, type) {
    const data = findLocaleData(locale);
    return data[LocaleDataIndex.NumberFormats][type];
  }
  function getLocaleCurrencies(locale) {
    const data = findLocaleData(locale);
    return data[LocaleDataIndex.Currencies];
  }
  function checkFullData(data) {
    if (!data[LocaleDataIndex.ExtraData]) {
      throw new Error(`Missing extra locale data for the locale "${data[LocaleDataIndex.LocaleId]}". Use "registerLocaleData" to load new data. See the "I18n guide" on angular.io to know more.`);
    }
  }
  function getLocaleExtraDayPeriodRules(locale) {
    const data = findLocaleData(locale);
    checkFullData(data);
    const rules = data[LocaleDataIndex.ExtraData][
      2
      /* ɵExtraLocaleDataIndex.ExtraDayPeriodsRules */
    ] || [];
    return rules.map((rule) => {
      if (typeof rule === "string") {
        return extractTime(rule);
      }
      return [extractTime(rule[0]), extractTime(rule[1])];
    });
  }
  function getLocaleExtraDayPeriods(locale, formStyle, width) {
    const data = findLocaleData(locale);
    checkFullData(data);
    const dayPeriodsData = [
      data[LocaleDataIndex.ExtraData][
        0
        /* ɵExtraLocaleDataIndex.ExtraDayPeriodFormats */
      ],
      data[LocaleDataIndex.ExtraData][
        1
        /* ɵExtraLocaleDataIndex.ExtraDayPeriodStandalone */
      ]
    ];
    const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];
    return getLastDefinedValue(dayPeriods, width) || [];
  }
  function getLastDefinedValue(data, index) {
    for (let i = index; i > -1; i--) {
      if (typeof data[i] !== "undefined") {
        return data[i];
      }
    }
    throw new Error("Locale data API: locale data undefined");
  }
  function extractTime(time) {
    const [h2, m] = time.split(":");
    return { hours: +h2, minutes: +m };
  }
  function getCurrencySymbol(code, format, locale = "en") {
    const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];
    const symbolNarrow = currency[
      1
      /* ɵCurrencyIndex.SymbolNarrow */
    ];
    if (format === "narrow" && typeof symbolNarrow === "string") {
      return symbolNarrow;
    }
    return currency[
      0
      /* ɵCurrencyIndex.Symbol */
    ] || code;
  }
  function getNumberOfCurrencyDigits(code) {
    let digits;
    const currency = CURRENCIES_EN[code];
    if (currency) {
      digits = currency[
        2
        /* ɵCurrencyIndex.NbOfDigits */
      ];
    }
    return typeof digits === "number" ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;
  }
  function formatDate(value, format, locale, timezone) {
    let date = toDate(value);
    const namedFormat = getNamedFormat(locale, format);
    format = namedFormat || format;
    let parts = [];
    let match2;
    while (format) {
      match2 = DATE_FORMATS_SPLIT.exec(format);
      if (match2) {
        parts = parts.concat(match2.slice(1));
        const part = parts.pop();
        if (!part) {
          break;
        }
        format = part;
      } else {
        parts.push(format);
        break;
      }
    }
    let dateTimezoneOffset = date.getTimezoneOffset();
    if (timezone) {
      dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
      date = convertTimezoneToLocal(date, timezone, true);
    }
    let text2 = "";
    parts.forEach((value2) => {
      const dateFormatter = getDateFormatter(value2);
      text2 += dateFormatter ? dateFormatter(date, locale, dateTimezoneOffset) : value2 === "''" ? "'" : value2.replace(/(^'|'$)/g, "").replace(/''/g, "'");
    });
    return text2;
  }
  function createDate(year, month, date) {
    const newDate = /* @__PURE__ */ new Date(0);
    newDate.setFullYear(year, month, date);
    newDate.setHours(0, 0, 0);
    return newDate;
  }
  function getNamedFormat(locale, format) {
    const localeId = getLocaleId2(locale);
    NAMED_FORMATS[localeId] ??= {};
    if (NAMED_FORMATS[localeId][format]) {
      return NAMED_FORMATS[localeId][format];
    }
    let formatValue3 = "";
    switch (format) {
      case "shortDate":
        formatValue3 = getLocaleDateFormat(locale, FormatWidth.Short);
        break;
      case "mediumDate":
        formatValue3 = getLocaleDateFormat(locale, FormatWidth.Medium);
        break;
      case "longDate":
        formatValue3 = getLocaleDateFormat(locale, FormatWidth.Long);
        break;
      case "fullDate":
        formatValue3 = getLocaleDateFormat(locale, FormatWidth.Full);
        break;
      case "shortTime":
        formatValue3 = getLocaleTimeFormat(locale, FormatWidth.Short);
        break;
      case "mediumTime":
        formatValue3 = getLocaleTimeFormat(locale, FormatWidth.Medium);
        break;
      case "longTime":
        formatValue3 = getLocaleTimeFormat(locale, FormatWidth.Long);
        break;
      case "fullTime":
        formatValue3 = getLocaleTimeFormat(locale, FormatWidth.Full);
        break;
      case "short":
        const shortTime = getNamedFormat(locale, "shortTime");
        const shortDate = getNamedFormat(locale, "shortDate");
        formatValue3 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [
          shortTime,
          shortDate
        ]);
        break;
      case "medium":
        const mediumTime = getNamedFormat(locale, "mediumTime");
        const mediumDate = getNamedFormat(locale, "mediumDate");
        formatValue3 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [
          mediumTime,
          mediumDate
        ]);
        break;
      case "long":
        const longTime = getNamedFormat(locale, "longTime");
        const longDate = getNamedFormat(locale, "longDate");
        formatValue3 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [
          longTime,
          longDate
        ]);
        break;
      case "full":
        const fullTime = getNamedFormat(locale, "fullTime");
        const fullDate = getNamedFormat(locale, "fullDate");
        formatValue3 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [
          fullTime,
          fullDate
        ]);
        break;
    }
    if (formatValue3) {
      NAMED_FORMATS[localeId][format] = formatValue3;
    }
    return formatValue3;
  }
  function formatDateTime(str, opt_values) {
    if (opt_values) {
      str = str.replace(/\{([^}]+)}/g, function(match2, key) {
        return opt_values != null && key in opt_values ? opt_values[key] : match2;
      });
    }
    return str;
  }
  function padNumber(num, digits, minusSign = "-", trim, negWrap) {
    let neg = "";
    if (num < 0 || negWrap && num <= 0) {
      if (negWrap) {
        num = -num + 1;
      } else {
        num = -num;
        neg = minusSign;
      }
    }
    let strNum = String(num);
    while (strNum.length < digits) {
      strNum = "0" + strNum;
    }
    if (trim) {
      strNum = strNum.slice(strNum.length - digits);
    }
    return neg + strNum;
  }
  function formatFractionalSeconds(milliseconds, digits) {
    const strMs = padNumber(milliseconds, 3);
    return strMs.substring(0, digits);
  }
  function dateGetter(name, size, offset = 0, trim = false, negWrap = false) {
    return function(date, locale) {
      let part = getDatePart(name, date);
      if (offset > 0 || part > -offset) {
        part += offset;
      }
      if (name === DateType.Hours) {
        if (part === 0 && offset === -12) {
          part = 12;
        }
      } else if (name === DateType.FractionalSeconds) {
        return formatFractionalSeconds(part, size);
      }
      const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
      return padNumber(part, size, localeMinus, trim, negWrap);
    };
  }
  function getDatePart(part, date) {
    switch (part) {
      case DateType.FullYear:
        return date.getFullYear();
      case DateType.Month:
        return date.getMonth();
      case DateType.Date:
        return date.getDate();
      case DateType.Hours:
        return date.getHours();
      case DateType.Minutes:
        return date.getMinutes();
      case DateType.Seconds:
        return date.getSeconds();
      case DateType.FractionalSeconds:
        return date.getMilliseconds();
      case DateType.Day:
        return date.getDay();
      default:
        throw new Error(`Unknown DateType value "${part}".`);
    }
  }
  function dateStrGetter(name, width, form = FormStyle.Format, extended = false) {
    return function(date, locale) {
      return getDateTranslation(date, locale, name, width, form, extended);
    };
  }
  function getDateTranslation(date, locale, name, width, form, extended) {
    switch (name) {
      case TranslationType.Months:
        return getLocaleMonthNames(locale, form, width)[date.getMonth()];
      case TranslationType.Days:
        return getLocaleDayNames(locale, form, width)[date.getDay()];
      case TranslationType.DayPeriods:
        const currentHours = date.getHours();
        const currentMinutes = date.getMinutes();
        if (extended) {
          const rules = getLocaleExtraDayPeriodRules(locale);
          const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);
          const index = rules.findIndex((rule) => {
            if (Array.isArray(rule)) {
              const [from2, to] = rule;
              const afterFrom = currentHours >= from2.hours && currentMinutes >= from2.minutes;
              const beforeTo = currentHours < to.hours || currentHours === to.hours && currentMinutes < to.minutes;
              if (from2.hours < to.hours) {
                if (afterFrom && beforeTo) {
                  return true;
                }
              } else if (afterFrom || beforeTo) {
                return true;
              }
            } else {
              if (rule.hours === currentHours && rule.minutes === currentMinutes) {
                return true;
              }
            }
            return false;
          });
          if (index !== -1) {
            return dayPeriods[index];
          }
        }
        return getLocaleDayPeriods(locale, form, width)[currentHours < 12 ? 0 : 1];
      case TranslationType.Eras:
        return getLocaleEraNames(locale, width)[date.getFullYear() <= 0 ? 0 : 1];
      default:
        const unexpected = name;
        throw new Error(`unexpected translation type ${unexpected}`);
    }
  }
  function timeZoneGetter(width) {
    return function(date, locale, offset) {
      const zone = -1 * offset;
      const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
      const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);
      switch (width) {
        case ZoneWidth.Short:
          return (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + padNumber(Math.abs(zone % 60), 2, minusSign);
        case ZoneWidth.ShortGMT:
          return "GMT" + (zone >= 0 ? "+" : "") + padNumber(hours, 1, minusSign);
        case ZoneWidth.Long:
          return "GMT" + (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + ":" + padNumber(Math.abs(zone % 60), 2, minusSign);
        case ZoneWidth.Extended:
          if (offset === 0) {
            return "Z";
          } else {
            return (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + ":" + padNumber(Math.abs(zone % 60), 2, minusSign);
          }
        default:
          throw new Error(`Unknown zone width "${width}"`);
      }
    };
  }
  function getFirstThursdayOfYear(year) {
    const firstDayOfYear = createDate(year, JANUARY, 1).getDay();
    return createDate(year, 0, 1 + (firstDayOfYear <= THURSDAY ? THURSDAY : THURSDAY + 7) - firstDayOfYear);
  }
  function getThursdayThisIsoWeek(datetime) {
    const currentDay = datetime.getDay();
    const deltaToThursday = currentDay === 0 ? -3 : THURSDAY - currentDay;
    return createDate(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + deltaToThursday);
  }
  function weekGetter(size, monthBased = false) {
    return function(date, locale) {
      let result;
      if (monthBased) {
        const nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;
        const today = date.getDate();
        result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);
      } else {
        const thisThurs = getThursdayThisIsoWeek(date);
        const firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());
        const diff = thisThurs.getTime() - firstThurs.getTime();
        result = 1 + Math.round(diff / 6048e5);
      }
      return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
    };
  }
  function weekNumberingYearGetter(size, trim = false) {
    return function(date, locale) {
      const thisThurs = getThursdayThisIsoWeek(date);
      const weekNumberingYear = thisThurs.getFullYear();
      return padNumber(weekNumberingYear, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim);
    };
  }
  function getDateFormatter(format) {
    if (DATE_FORMATS[format]) {
      return DATE_FORMATS[format];
    }
    let formatter;
    switch (format) {
      case "G":
      case "GG":
      case "GGG":
        formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);
        break;
      case "GGGG":
        formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);
        break;
      case "GGGGG":
        formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);
        break;
      case "y":
        formatter = dateGetter(DateType.FullYear, 1, 0, false, true);
        break;
      case "yy":
        formatter = dateGetter(DateType.FullYear, 2, 0, true, true);
        break;
      case "yyy":
        formatter = dateGetter(DateType.FullYear, 3, 0, false, true);
        break;
      case "yyyy":
        formatter = dateGetter(DateType.FullYear, 4, 0, false, true);
        break;
      case "Y":
        formatter = weekNumberingYearGetter(1);
        break;
      case "YY":
        formatter = weekNumberingYearGetter(2, true);
        break;
      case "YYY":
        formatter = weekNumberingYearGetter(3);
        break;
      case "YYYY":
        formatter = weekNumberingYearGetter(4);
        break;
      case "M":
      case "L":
        formatter = dateGetter(DateType.Month, 1, 1);
        break;
      case "MM":
      case "LL":
        formatter = dateGetter(DateType.Month, 2, 1);
        break;
      case "MMM":
        formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);
        break;
      case "MMMM":
        formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);
        break;
      case "MMMMM":
        formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);
        break;
      case "LLL":
        formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);
        break;
      case "LLLL":
        formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);
        break;
      case "LLLLL":
        formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);
        break;
      case "w":
        formatter = weekGetter(1);
        break;
      case "ww":
        formatter = weekGetter(2);
        break;
      case "W":
        formatter = weekGetter(1, true);
        break;
      case "d":
        formatter = dateGetter(DateType.Date, 1);
        break;
      case "dd":
        formatter = dateGetter(DateType.Date, 2);
        break;
      case "c":
      case "cc":
        formatter = dateGetter(DateType.Day, 1);
        break;
      case "ccc":
        formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated, FormStyle.Standalone);
        break;
      case "cccc":
        formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide, FormStyle.Standalone);
        break;
      case "ccccc":
        formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow, FormStyle.Standalone);
        break;
      case "cccccc":
        formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short, FormStyle.Standalone);
        break;
      case "E":
      case "EE":
      case "EEE":
        formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);
        break;
      case "EEEE":
        formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);
        break;
      case "EEEEE":
        formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);
        break;
      case "EEEEEE":
        formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);
        break;
      case "a":
      case "aa":
      case "aaa":
        formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);
        break;
      case "aaaa":
        formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);
        break;
      case "aaaaa":
        formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);
        break;
      case "b":
      case "bb":
      case "bbb":
        formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);
        break;
      case "bbbb":
        formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);
        break;
      case "bbbbb":
        formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);
        break;
      case "B":
      case "BB":
      case "BBB":
        formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);
        break;
      case "BBBB":
        formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);
        break;
      case "BBBBB":
        formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);
        break;
      case "h":
        formatter = dateGetter(DateType.Hours, 1, -12);
        break;
      case "hh":
        formatter = dateGetter(DateType.Hours, 2, -12);
        break;
      case "H":
        formatter = dateGetter(DateType.Hours, 1);
        break;
      case "HH":
        formatter = dateGetter(DateType.Hours, 2);
        break;
      case "m":
        formatter = dateGetter(DateType.Minutes, 1);
        break;
      case "mm":
        formatter = dateGetter(DateType.Minutes, 2);
        break;
      case "s":
        formatter = dateGetter(DateType.Seconds, 1);
        break;
      case "ss":
        formatter = dateGetter(DateType.Seconds, 2);
        break;
      case "S":
        formatter = dateGetter(DateType.FractionalSeconds, 1);
        break;
      case "SS":
        formatter = dateGetter(DateType.FractionalSeconds, 2);
        break;
      case "SSS":
        formatter = dateGetter(DateType.FractionalSeconds, 3);
        break;
      case "Z":
      case "ZZ":
      case "ZZZ":
        formatter = timeZoneGetter(ZoneWidth.Short);
        break;
      case "ZZZZZ":
        formatter = timeZoneGetter(ZoneWidth.Extended);
        break;
      case "O":
      case "OO":
      case "OOO":
      case "z":
      case "zz":
      case "zzz":
        formatter = timeZoneGetter(ZoneWidth.ShortGMT);
        break;
      case "OOOO":
      case "ZZZZ":
      case "zzzz":
        formatter = timeZoneGetter(ZoneWidth.Long);
        break;
      default:
        return null;
    }
    DATE_FORMATS[format] = formatter;
    return formatter;
  }
  function timezoneToOffset(timezone, fallback) {
    timezone = timezone.replace(/:/g, "");
    const requestedTimezoneOffset = Date.parse("Jan 01, 1970 00:00:00 " + timezone) / 6e4;
    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
  }
  function addDateMinutes(date, minutes) {
    date = new Date(date.getTime());
    date.setMinutes(date.getMinutes() + minutes);
    return date;
  }
  function convertTimezoneToLocal(date, timezone, reverse) {
    const reverseValue = reverse ? -1 : 1;
    const dateTimezoneOffset = date.getTimezoneOffset();
    const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
    return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));
  }
  function toDate(value) {
    if (isDate(value)) {
      return value;
    }
    if (typeof value === "number" && !isNaN(value)) {
      return new Date(value);
    }
    if (typeof value === "string") {
      value = value.trim();
      if (/^(\d{4}(-\d{1,2}(-\d{1,2})?)?)$/.test(value)) {
        const [y, m = 1, d = 1] = value.split("-").map((val) => +val);
        return createDate(y, m - 1, d);
      }
      const parsedNb = parseFloat(value);
      if (!isNaN(value - parsedNb)) {
        return new Date(parsedNb);
      }
      let match2;
      if (match2 = value.match(ISO8601_DATE_REGEX)) {
        return isoStringToDate(match2);
      }
    }
    const date = new Date(value);
    if (!isDate(date)) {
      throw new Error(`Unable to convert "${value}" into a date`);
    }
    return date;
  }
  function isoStringToDate(match2) {
    const date = /* @__PURE__ */ new Date(0);
    let tzHour = 0;
    let tzMin = 0;
    const dateSetter = match2[8] ? date.setUTCFullYear : date.setFullYear;
    const timeSetter = match2[8] ? date.setUTCHours : date.setHours;
    if (match2[9]) {
      tzHour = Number(match2[9] + match2[10]);
      tzMin = Number(match2[9] + match2[11]);
    }
    dateSetter.call(date, Number(match2[1]), Number(match2[2]) - 1, Number(match2[3]));
    const h2 = Number(match2[4] || 0) - tzHour;
    const m = Number(match2[5] || 0) - tzMin;
    const s = Number(match2[6] || 0);
    const ms = Math.floor(parseFloat("0." + (match2[7] || 0)) * 1e3);
    timeSetter.call(date, h2, m, s, ms);
    return date;
  }
  function isDate(value) {
    return value instanceof Date && !isNaN(value.valueOf());
  }
  function formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo, isPercent = false) {
    let formattedText = "";
    let isZero = false;
    if (!isFinite(value)) {
      formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);
    } else {
      let parsedNumber = parseNumber(value);
      if (isPercent) {
        parsedNumber = toPercent(parsedNumber);
      }
      let minInt = pattern.minInt;
      let minFraction = pattern.minFrac;
      let maxFraction = pattern.maxFrac;
      if (digitsInfo) {
        const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);
        if (parts === null) {
          throw new Error(`${digitsInfo} is not a valid digit info`);
        }
        const minIntPart = parts[1];
        const minFractionPart = parts[3];
        const maxFractionPart = parts[5];
        if (minIntPart != null) {
          minInt = parseIntAutoRadix2(minIntPart);
        }
        if (minFractionPart != null) {
          minFraction = parseIntAutoRadix2(minFractionPart);
        }
        if (maxFractionPart != null) {
          maxFraction = parseIntAutoRadix2(maxFractionPart);
        } else if (minFractionPart != null && minFraction > maxFraction) {
          maxFraction = minFraction;
        }
      }
      roundNumber(parsedNumber, minFraction, maxFraction);
      let digits = parsedNumber.digits;
      let integerLen = parsedNumber.integerLen;
      const exponent = parsedNumber.exponent;
      let decimals = [];
      isZero = digits.every((d) => !d);
      for (; integerLen < minInt; integerLen++) {
        digits.unshift(0);
      }
      for (; integerLen < 0; integerLen++) {
        digits.unshift(0);
      }
      if (integerLen > 0) {
        decimals = digits.splice(integerLen, digits.length);
      } else {
        decimals = digits;
        digits = [0];
      }
      const groups = [];
      if (digits.length >= pattern.lgSize) {
        groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(""));
      }
      while (digits.length > pattern.gSize) {
        groups.unshift(digits.splice(-pattern.gSize, digits.length).join(""));
      }
      if (digits.length) {
        groups.unshift(digits.join(""));
      }
      formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));
      if (decimals.length) {
        formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join("");
      }
      if (exponent) {
        formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + "+" + exponent;
      }
    }
    if (value < 0 && !isZero) {
      formattedText = pattern.negPre + formattedText + pattern.negSuf;
    } else {
      formattedText = pattern.posPre + formattedText + pattern.posSuf;
    }
    return formattedText;
  }
  function formatCurrency(value, locale, currency, currencyCode, digitsInfo) {
    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);
    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
    pattern.minFrac = getNumberOfCurrencyDigits(currencyCode);
    pattern.maxFrac = pattern.minFrac;
    const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);
    return res.replace(CURRENCY_CHAR, currency).replace(CURRENCY_CHAR, "").trim();
  }
  function formatPercent(value, locale, digitsInfo) {
    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);
    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
    const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);
    return res.replace(new RegExp(PERCENT_CHAR, "g"), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));
  }
  function formatNumber(value, locale, digitsInfo) {
    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);
    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
    return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);
  }
  function parseNumberFormat(format, minusSign = "-") {
    const p = {
      minInt: 1,
      minFrac: 0,
      maxFrac: 0,
      posPre: "",
      posSuf: "",
      negPre: "",
      negSuf: "",
      gSize: 0,
      lgSize: 0
    };
    const patternParts = format.split(PATTERN_SEP);
    const positive = patternParts[0];
    const negative = patternParts[1];
    const positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ? positive.split(DECIMAL_SEP) : [
      positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),
      positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)
    ], integer = positiveParts[0], fraction = positiveParts[1] || "";
    p.posPre = integer.substring(0, integer.indexOf(DIGIT_CHAR));
    for (let i = 0; i < fraction.length; i++) {
      const ch = fraction.charAt(i);
      if (ch === ZERO_CHAR) {
        p.minFrac = p.maxFrac = i + 1;
      } else if (ch === DIGIT_CHAR) {
        p.maxFrac = i + 1;
      } else {
        p.posSuf += ch;
      }
    }
    const groups = integer.split(GROUP_SEP);
    p.gSize = groups[1] ? groups[1].length : 0;
    p.lgSize = groups[2] || groups[1] ? (groups[2] || groups[1]).length : 0;
    if (negative) {
      const trunkLen = positive.length - p.posPre.length - p.posSuf.length, pos = negative.indexOf(DIGIT_CHAR);
      p.negPre = negative.substring(0, pos).replace(/'/g, "");
      p.negSuf = negative.slice(pos + trunkLen).replace(/'/g, "");
    } else {
      p.negPre = minusSign + p.posPre;
      p.negSuf = p.posSuf;
    }
    return p;
  }
  function toPercent(parsedNumber) {
    if (parsedNumber.digits[0] === 0) {
      return parsedNumber;
    }
    const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;
    if (parsedNumber.exponent) {
      parsedNumber.exponent += 2;
    } else {
      if (fractionLen === 0) {
        parsedNumber.digits.push(0, 0);
      } else if (fractionLen === 1) {
        parsedNumber.digits.push(0);
      }
      parsedNumber.integerLen += 2;
    }
    return parsedNumber;
  }
  function parseNumber(num) {
    let numStr = Math.abs(num) + "";
    let exponent = 0, digits, integerLen;
    let i, j, zeros;
    if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {
      numStr = numStr.replace(DECIMAL_SEP, "");
    }
    if ((i = numStr.search(/e/i)) > 0) {
      if (integerLen < 0)
        integerLen = i;
      integerLen += +numStr.slice(i + 1);
      numStr = numStr.substring(0, i);
    } else if (integerLen < 0) {
      integerLen = numStr.length;
    }
    for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {
    }
    if (i === (zeros = numStr.length)) {
      digits = [0];
      integerLen = 1;
    } else {
      zeros--;
      while (numStr.charAt(zeros) === ZERO_CHAR)
        zeros--;
      integerLen -= i;
      digits = [];
      for (j = 0; i <= zeros; i++, j++) {
        digits[j] = Number(numStr.charAt(i));
      }
    }
    if (integerLen > MAX_DIGITS) {
      digits = digits.splice(0, MAX_DIGITS - 1);
      exponent = integerLen - 1;
      integerLen = 1;
    }
    return { digits, exponent, integerLen };
  }
  function roundNumber(parsedNumber, minFrac, maxFrac) {
    if (minFrac > maxFrac) {
      throw new Error(`The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);
    }
    let digits = parsedNumber.digits;
    let fractionLen = digits.length - parsedNumber.integerLen;
    const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);
    let roundAt = fractionSize + parsedNumber.integerLen;
    let digit = digits[roundAt];
    if (roundAt > 0) {
      digits.splice(Math.max(parsedNumber.integerLen, roundAt));
      for (let j = roundAt; j < digits.length; j++) {
        digits[j] = 0;
      }
    } else {
      fractionLen = Math.max(0, fractionLen);
      parsedNumber.integerLen = 1;
      digits.length = Math.max(1, roundAt = fractionSize + 1);
      digits[0] = 0;
      for (let i = 1; i < roundAt; i++)
        digits[i] = 0;
    }
    if (digit >= 5) {
      if (roundAt - 1 < 0) {
        for (let k = 0; k > roundAt; k--) {
          digits.unshift(0);
          parsedNumber.integerLen++;
        }
        digits.unshift(1);
        parsedNumber.integerLen++;
      } else {
        digits[roundAt - 1]++;
      }
    }
    for (; fractionLen < Math.max(0, fractionSize); fractionLen++)
      digits.push(0);
    let dropTrailingZeros = fractionSize !== 0;
    const minLen = minFrac + parsedNumber.integerLen;
    const carry = digits.reduceRight(function(carry2, d, i, digits2) {
      d = d + carry2;
      digits2[i] = d < 10 ? d : d - 10;
      if (dropTrailingZeros) {
        if (digits2[i] === 0 && i >= minLen) {
          digits2.pop();
        } else {
          dropTrailingZeros = false;
        }
      }
      return d >= 10 ? 1 : 0;
    }, 0);
    if (carry) {
      digits.unshift(carry);
      parsedNumber.integerLen++;
    }
  }
  function parseIntAutoRadix2(text2) {
    const result = parseInt(text2);
    if (isNaN(result)) {
      throw new Error("Invalid integer literal when parsing " + text2);
    }
    return result;
  }
  function getPluralCategory(value, cases, ngLocalization, locale) {
    let key = `=${value}`;
    if (cases.indexOf(key) > -1) {
      return key;
    }
    key = ngLocalization.getPluralCategory(value, locale);
    if (cases.indexOf(key) > -1) {
      return key;
    }
    if (cases.indexOf("other") > -1) {
      return "other";
    }
    throw new Error(`No plural message found for value "${value}"`);
  }
  function parseCookieValue(cookieStr, name) {
    name = encodeURIComponent(name);
    for (const cookie of cookieStr.split(";")) {
      const eqIndex = cookie.indexOf("=");
      const [cookieName, cookieValue] = eqIndex == -1 ? [cookie, ""] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];
      if (cookieName.trim() === name) {
        return decodeURIComponent(cookieValue);
      }
    }
    return null;
  }
  function getParentInjector(injector) {
    const parentNgModule = injector.get(NgModuleRef$1);
    return parentNgModule.injector;
  }
  function applyViewChange(view, record) {
    view.context.$implicit = record.item;
  }
  function getTypeName(type) {
    return type["name"] || typeof type;
  }
  function assertTemplate(property2, templateRef) {
    const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);
    if (!isTemplateRefOrNull) {
      throw new Error(`${property2} must be a TemplateRef, but received '${stringify(templateRef)}'.`);
    }
  }
  function throwNgSwitchProviderNotFoundError(attrName, directiveName) {
    throw new RuntimeError(2e3, `An element with the "${attrName}" attribute (matching the "${directiveName}" directive) must be located inside an element with the "ngSwitch" attribute (matching "NgSwitch" directive)`);
  }
  function stringifyValue(value) {
    return typeof value === "string" ? `'${value}'` : String(value);
  }
  function invalidPipeArgumentError(type, value) {
    return new RuntimeError(2100, ngDevMode && `InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`);
  }
  function makeKeyValuePair(key, value) {
    return { key, value };
  }
  function defaultComparator(keyValueA, keyValueB) {
    const a = keyValueA.key;
    const b = keyValueB.key;
    if (a === b)
      return 0;
    if (a === void 0)
      return 1;
    if (b === void 0)
      return -1;
    if (a === null)
      return 1;
    if (b === null)
      return -1;
    if (typeof a == "string" && typeof b == "string") {
      return a < b ? -1 : 1;
    }
    if (typeof a == "number" && typeof b == "number") {
      return a - b;
    }
    if (typeof a == "boolean" && typeof b == "boolean") {
      return a < b ? -1 : 1;
    }
    const aString = String(a);
    const bString = String(b);
    return aString == bString ? 0 : aString < bString ? -1 : 1;
  }
  function isValue(value) {
    return !(value == null || value === "" || value !== value);
  }
  function strToNumber(value) {
    if (typeof value === "string" && !isNaN(Number(value) - parseFloat(value))) {
      return Number(value);
    }
    if (typeof value !== "number") {
      throw new Error(`${value} is not a number`);
    }
    return value;
  }
  function isPlatformBrowser2(platformId) {
    return platformId === PLATFORM_BROWSER_ID;
  }
  function isPlatformServer(platformId) {
    return platformId === PLATFORM_SERVER_ID;
  }
  function findAnchorFromDocument(document2, target) {
    const documentResult = document2.getElementById(target) || document2.getElementsByName(target)[0];
    if (documentResult) {
      return documentResult;
    }
    if (typeof document2.createTreeWalker === "function" && document2.body && typeof document2.body.attachShadow === "function") {
      const treeWalker = document2.createTreeWalker(document2.body, NodeFilter.SHOW_ELEMENT);
      let currentNode = treeWalker.currentNode;
      while (currentNode) {
        const shadowRoot = currentNode.shadowRoot;
        if (shadowRoot) {
          const result = shadowRoot.getElementById(target) || shadowRoot.querySelector(`[name="${target}"]`);
          if (result) {
            return result;
          }
        }
        currentNode = treeWalker.nextNode();
      }
    }
    return null;
  }
  function getUrl(src, win3) {
    return isAbsoluteUrl(src) ? new URL(src) : new URL(src, win3.location.href);
  }
  function isAbsoluteUrl(src) {
    return /^https?:\/\//.test(src);
  }
  function extractHostname(url) {
    return isAbsoluteUrl(url) ? new URL(url).hostname : url;
  }
  function isValidPath(path) {
    const isString = typeof path === "string";
    if (!isString || path.trim() === "") {
      return false;
    }
    try {
      const url = new URL(path);
      return true;
    } catch {
      return false;
    }
  }
  function normalizePath(path) {
    return path.endsWith("/") ? path.slice(0, -1) : path;
  }
  function normalizeSrc(src) {
    return src.startsWith("/") ? src.slice(1) : src;
  }
  function createImageLoader(buildUrlFn, exampleUrls) {
    return function provideImageLoader(path) {
      if (!isValidPath(path)) {
        throwInvalidPathError(path, exampleUrls || []);
      }
      path = normalizePath(path);
      const loaderFn = (config4) => {
        if (isAbsoluteUrl(config4.src)) {
          throwUnexpectedAbsoluteUrlError(path, config4.src);
        }
        return buildUrlFn(path, { ...config4, src: normalizeSrc(config4.src) });
      };
      const providers = [{ provide: IMAGE_LOADER, useValue: loaderFn }];
      return providers;
    };
  }
  function throwInvalidPathError(path, exampleUrls) {
    throw new RuntimeError(2959, ngDevMode && `Image loader has detected an invalid path (\`${path}\`). To fix this, supply a path using one of the following formats: ${exampleUrls.join(" or ")}`);
  }
  function throwUnexpectedAbsoluteUrlError(path, url) {
    throw new RuntimeError(2959, ngDevMode && `Image loader has detected a \`<img>\` tag with an invalid \`ngSrc\` attribute: ${url}. This image loader expects \`ngSrc\` to be a relative URL - however the provided value is an absolute URL. To fix this, provide \`ngSrc\` as a path relative to the base URL configured for this loader (\`${path}\`).`);
  }
  function createCloudflareUrl(path, config4) {
    let params = `format=auto`;
    if (config4.width) {
      params += `,width=${config4.width}`;
    }
    if (config4.isPlaceholder) {
      params += `,quality=${PLACEHOLDER_QUALITY}`;
    }
    return `${path}/cdn-cgi/image/${params}/${config4.src}`;
  }
  function isCloudinaryUrl(url) {
    return CLOUDINARY_LOADER_REGEX.test(url);
  }
  function createCloudinaryUrl(path, config4) {
    const quality = config4.isPlaceholder ? "q_auto:low" : "q_auto";
    let params = `f_auto,${quality}`;
    if (config4.width) {
      params += `,w_${config4.width}`;
    }
    return `${path}/image/upload/${params}/${config4.src}`;
  }
  function isImageKitUrl(url) {
    return IMAGE_KIT_LOADER_REGEX.test(url);
  }
  function createImagekitUrl(path, config4) {
    const { src, width } = config4;
    const params = [];
    if (width) {
      params.push(`w-${width}`);
    }
    if (config4.isPlaceholder) {
      params.push(`q-${PLACEHOLDER_QUALITY}`);
    }
    const urlSegments = params.length ? [path, `tr:${params.join(",")}`, src] : [path, src];
    const url = new URL(urlSegments.join("/"));
    return url.href;
  }
  function isImgixUrl(url) {
    return IMGIX_LOADER_REGEX.test(url);
  }
  function createImgixUrl(path, config4) {
    const url = new URL(`${path}/${config4.src}`);
    url.searchParams.set("auto", "format");
    if (config4.width) {
      url.searchParams.set("w", config4.width.toString());
    }
    if (config4.isPlaceholder) {
      url.searchParams.set("q", PLACEHOLDER_QUALITY);
    }
    return url.href;
  }
  function isNetlifyUrl(url) {
    return NETLIFY_LOADER_REGEX.test(url);
  }
  function imgDirectiveDetails(ngSrc, includeNgSrc = true) {
    const ngSrcInfo = includeNgSrc ? `(activated on an <img> element with the \`ngSrc="${ngSrc}"\`) ` : "";
    return `The NgOptimizedImage directive ${ngSrcInfo}has detected that`;
  }
  function assertDevMode(checkName) {
    if (!ngDevMode) {
      throw new RuntimeError(2958, `Unexpected invocation of the ${checkName} in the prod mode. Please make sure that the prod mode is enabled for production builds.`);
    }
  }
  function logMissingPriorityError(ngSrc) {
    const directiveDetails = imgDirectiveDetails(ngSrc);
    console.error(formatRuntimeError(2955, `${directiveDetails} this image is the Largest Contentful Paint (LCP) element but was not marked "priority". This image should be marked "priority" in order to prioritize its loading. To fix this, add the "priority" attribute.`));
  }
  function logModifiedWarning(ngSrc) {
    const directiveDetails = imgDirectiveDetails(ngSrc);
    console.warn(formatRuntimeError(2964, `${directiveDetails} this image is the Largest Contentful Paint (LCP) element and has had its "ngSrc" attribute modified. This can cause slower loading performance. It is recommended not to modify the "ngSrc" property on any image which could be the LCP element.`));
  }
  function deepForEach2(input2, fn2) {
    for (let value of input2) {
      Array.isArray(value) ? deepForEach2(value, fn2) : fn2(value);
    }
  }
  function processConfig(config4) {
    let sortedBreakpoints = {};
    if (config4.breakpoints) {
      sortedBreakpoints.breakpoints = config4.breakpoints.sort((a, b) => a - b);
    }
    return Object.assign({}, IMAGE_CONFIG_DEFAULTS, config4, sortedBreakpoints);
  }
  function assertNoConflictingSrc(dir) {
    if (dir.src) {
      throw new RuntimeError(2950, `${imgDirectiveDetails(dir.ngSrc)} both \`src\` and \`ngSrc\` have been set. Supplying both of these attributes breaks lazy loading. The NgOptimizedImage directive sets \`src\` itself based on the value of \`ngSrc\`. To fix this, please remove the \`src\` attribute.`);
    }
  }
  function assertNoConflictingSrcset(dir) {
    if (dir.srcset) {
      throw new RuntimeError(2951, `${imgDirectiveDetails(dir.ngSrc)} both \`srcset\` and \`ngSrcset\` have been set. Supplying both of these attributes breaks lazy loading. The NgOptimizedImage directive sets \`srcset\` itself based on the value of \`ngSrcset\`. To fix this, please remove the \`srcset\` attribute.`);
    }
  }
  function assertNotBase64Image(dir) {
    let ngSrc = dir.ngSrc.trim();
    if (ngSrc.startsWith("data:")) {
      if (ngSrc.length > BASE64_IMG_MAX_LENGTH_IN_ERROR) {
        ngSrc = ngSrc.substring(0, BASE64_IMG_MAX_LENGTH_IN_ERROR) + "...";
      }
      throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`ngSrc\` is a Base64-encoded string (${ngSrc}). NgOptimizedImage does not support Base64-encoded strings. To fix this, disable the NgOptimizedImage directive for this element by removing \`ngSrc\` and using a standard \`src\` attribute instead.`);
    }
  }
  function assertNoComplexSizes(dir) {
    let sizes = dir.sizes;
    if (sizes?.match(/((\)|,)\s|^)\d+px/)) {
      throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`sizes\` was set to a string including pixel values. For automatic \`srcset\` generation, \`sizes\` must only include responsive values, such as \`sizes="50vw"\` or \`sizes="(min-width: 768px) 50vw, 100vw"\`. To fix this, modify the \`sizes\` attribute, or provide your own \`ngSrcset\` value directly.`);
    }
  }
  function assertValidPlaceholder(dir, imageLoader) {
    assertNoPlaceholderConfigWithoutPlaceholder(dir);
    assertNoRelativePlaceholderWithoutLoader(dir, imageLoader);
    assertNoOversizedDataUrl(dir);
  }
  function assertNoPlaceholderConfigWithoutPlaceholder(dir) {
    if (dir.placeholderConfig && !dir.placeholder) {
      throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`placeholderConfig\` options were provided for an image that does not use the \`placeholder\` attribute, and will have no effect.`);
    }
  }
  function assertNoRelativePlaceholderWithoutLoader(dir, imageLoader) {
    if (dir.placeholder === true && imageLoader === noopImageLoader) {
      throw new RuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`placeholder\` attribute is set to true but no image loader is configured (i.e. the default one is being used), which would result in the same image being used for the primary image and its placeholder. To fix this, provide a loader or remove the \`placeholder\` attribute from the image.`);
    }
  }
  function assertNoOversizedDataUrl(dir) {
    if (dir.placeholder && typeof dir.placeholder === "string" && dir.placeholder.startsWith("data:")) {
      if (dir.placeholder.length > DATA_URL_ERROR_LIMIT) {
        throw new RuntimeError(2965, `${imgDirectiveDetails(dir.ngSrc)} the \`placeholder\` attribute is set to a data URL which is longer than ${DATA_URL_ERROR_LIMIT} characters. This is strongly discouraged, as large inline placeholders directly increase the bundle size of Angular and hurt page load performance. To fix this, generate a smaller data URL placeholder.`);
      }
      if (dir.placeholder.length > DATA_URL_WARN_LIMIT) {
        console.warn(formatRuntimeError(2965, `${imgDirectiveDetails(dir.ngSrc)} the \`placeholder\` attribute is set to a data URL which is longer than ${DATA_URL_WARN_LIMIT} characters. This is discouraged, as large inline placeholders directly increase the bundle size of Angular and hurt page load performance. For better loading performance, generate a smaller data URL placeholder.`));
      }
    }
  }
  function assertNotBlobUrl(dir) {
    const ngSrc = dir.ngSrc.trim();
    if (ngSrc.startsWith("blob:")) {
      throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`ngSrc\` was set to a blob URL (${ngSrc}). Blob URLs are not supported by the NgOptimizedImage directive. To fix this, disable the NgOptimizedImage directive for this element by removing \`ngSrc\` and using a regular \`src\` attribute instead.`);
    }
  }
  function assertNonEmptyInput(dir, name, value) {
    const isString = typeof value === "string";
    const isEmptyString = isString && value.trim() === "";
    if (!isString || isEmptyString) {
      throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`${name}\` has an invalid value (\`${value}\`). To fix this, change the value to a non-empty string.`);
    }
  }
  function assertValidNgSrcset(dir, value) {
    if (value == null)
      return;
    assertNonEmptyInput(dir, "ngSrcset", value);
    const stringVal = value;
    const isValidWidthDescriptor = VALID_WIDTH_DESCRIPTOR_SRCSET.test(stringVal);
    const isValidDensityDescriptor = VALID_DENSITY_DESCRIPTOR_SRCSET.test(stringVal);
    if (isValidDensityDescriptor) {
      assertUnderDensityCap(dir, stringVal);
    }
    const isValidSrcset = isValidWidthDescriptor || isValidDensityDescriptor;
    if (!isValidSrcset) {
      throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`ngSrcset\` has an invalid value (\`${value}\`). To fix this, supply \`ngSrcset\` using a comma-separated list of one or more width descriptors (e.g. "100w, 200w") or density descriptors (e.g. "1x, 2x").`);
    }
  }
  function assertUnderDensityCap(dir, value) {
    const underDensityCap = value.split(",").every((num) => num === "" || parseFloat(num) <= ABSOLUTE_SRCSET_DENSITY_CAP);
    if (!underDensityCap) {
      throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`ngSrcset\` contains an unsupported image density:\`${value}\`. NgOptimizedImage generally recommends a max image density of ${RECOMMENDED_SRCSET_DENSITY_CAP}x but supports image densities up to ${ABSOLUTE_SRCSET_DENSITY_CAP}x. The human eye cannot distinguish between image densities greater than ${RECOMMENDED_SRCSET_DENSITY_CAP}x - which makes them unnecessary for most use cases. Images that will be pinch-zoomed are typically the primary use case for ${ABSOLUTE_SRCSET_DENSITY_CAP}x images. Please remove the high density descriptor and try again.`);
    }
  }
  function postInitInputChangeError(dir, inputName) {
    let reason;
    if (inputName === "width" || inputName === "height") {
      reason = `Changing \`${inputName}\` may result in different attribute value applied to the underlying image element and cause layout shifts on a page.`;
    } else {
      reason = `Changing the \`${inputName}\` would have no effect on the underlying image element, because the resource loading has already occurred.`;
    }
    return new RuntimeError(2953, `${imgDirectiveDetails(dir.ngSrc)} \`${inputName}\` was updated after initialization. The NgOptimizedImage directive will not react to this input change. ${reason} To fix this, either switch \`${inputName}\` to a static value or wrap the image element in an *ngIf that is gated on the necessary value.`);
  }
  function assertNoPostInitInputChange(dir, changes, inputs) {
    inputs.forEach((input2) => {
      const isUpdated = changes.hasOwnProperty(input2);
      if (isUpdated && !changes[input2].isFirstChange()) {
        if (input2 === "ngSrc") {
          dir = { ngSrc: changes[input2].previousValue };
        }
        throw postInitInputChangeError(dir, input2);
      }
    });
  }
  function assertGreaterThanZero(dir, inputValue, inputName) {
    const validNumber = typeof inputValue === "number" && inputValue > 0;
    const validString = typeof inputValue === "string" && /^\d+$/.test(inputValue.trim()) && parseInt(inputValue) > 0;
    if (!validNumber && !validString) {
      throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`${inputName}\` has an invalid value. To fix this, provide \`${inputName}\` as a number greater than 0.`);
    }
  }
  function assertNoImageDistortion(dir, img, renderer) {
    const removeLoadListenerFn = renderer.listen(img, "load", () => {
      removeLoadListenerFn();
      removeErrorListenerFn();
      const computedStyle = window.getComputedStyle(img);
      let renderedWidth = parseFloat(computedStyle.getPropertyValue("width"));
      let renderedHeight = parseFloat(computedStyle.getPropertyValue("height"));
      const boxSizing = computedStyle.getPropertyValue("box-sizing");
      if (boxSizing === "border-box") {
        const paddingTop = computedStyle.getPropertyValue("padding-top");
        const paddingRight = computedStyle.getPropertyValue("padding-right");
        const paddingBottom = computedStyle.getPropertyValue("padding-bottom");
        const paddingLeft = computedStyle.getPropertyValue("padding-left");
        renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);
        renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);
      }
      const renderedAspectRatio = renderedWidth / renderedHeight;
      const nonZeroRenderedDimensions = renderedWidth !== 0 && renderedHeight !== 0;
      const intrinsicWidth = img.naturalWidth;
      const intrinsicHeight = img.naturalHeight;
      const intrinsicAspectRatio = intrinsicWidth / intrinsicHeight;
      const suppliedWidth = dir.width;
      const suppliedHeight = dir.height;
      const suppliedAspectRatio = suppliedWidth / suppliedHeight;
      const inaccurateDimensions = Math.abs(suppliedAspectRatio - intrinsicAspectRatio) > ASPECT_RATIO_TOLERANCE;
      const stylingDistortion = nonZeroRenderedDimensions && Math.abs(intrinsicAspectRatio - renderedAspectRatio) > ASPECT_RATIO_TOLERANCE;
      if (inaccurateDimensions) {
        console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the image does not match the aspect ratio indicated by the width and height attributes. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h (aspect-ratio: ${round(intrinsicAspectRatio)}). 
Supplied width and height attributes: ${suppliedWidth}w x ${suppliedHeight}h (aspect-ratio: ${round(suppliedAspectRatio)}). 
To fix this, update the width and height attributes.`));
      } else if (stylingDistortion) {
        console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the rendered image does not match the image's intrinsic aspect ratio. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h (aspect-ratio: ${round(intrinsicAspectRatio)}). 
Rendered image size: ${renderedWidth}w x ${renderedHeight}h (aspect-ratio: ${round(renderedAspectRatio)}). 
This issue can occur if "width" and "height" attributes are added to an image without updating the corresponding image styling. To fix this, adjust image styling. In most cases, adding "height: auto" or "width: auto" to the image styling will fix this issue.`));
      } else if (!dir.ngSrcset && nonZeroRenderedDimensions) {
        const recommendedWidth = RECOMMENDED_SRCSET_DENSITY_CAP * renderedWidth;
        const recommendedHeight = RECOMMENDED_SRCSET_DENSITY_CAP * renderedHeight;
        const oversizedWidth = intrinsicWidth - recommendedWidth >= OVERSIZED_IMAGE_TOLERANCE2;
        const oversizedHeight = intrinsicHeight - recommendedHeight >= OVERSIZED_IMAGE_TOLERANCE2;
        if (oversizedWidth || oversizedHeight) {
          console.warn(formatRuntimeError(2960, `${imgDirectiveDetails(dir.ngSrc)} the intrinsic image is significantly larger than necessary. 
Rendered image size: ${renderedWidth}w x ${renderedHeight}h. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h. 
Recommended intrinsic image size: ${recommendedWidth}w x ${recommendedHeight}h. 
Note: Recommended intrinsic image size is calculated assuming a maximum DPR of ${RECOMMENDED_SRCSET_DENSITY_CAP}. To improve loading time, resize the image or consider using the "ngSrcset" and "sizes" attributes.`));
        }
      }
    });
    const removeErrorListenerFn = renderer.listen(img, "error", () => {
      removeLoadListenerFn();
      removeErrorListenerFn();
    });
  }
  function assertNonEmptyWidthAndHeight(dir) {
    let missingAttributes = [];
    if (dir.width === void 0)
      missingAttributes.push("width");
    if (dir.height === void 0)
      missingAttributes.push("height");
    if (missingAttributes.length > 0) {
      throw new RuntimeError(2954, `${imgDirectiveDetails(dir.ngSrc)} these required attributes are missing: ${missingAttributes.map((attr) => `"${attr}"`).join(", ")}. Including "width" and "height" attributes will prevent image-related layout shifts. To fix this, include "width" and "height" attributes on the image tag or turn on "fill" mode with the \`fill\` attribute.`);
    }
  }
  function assertEmptyWidthAndHeight(dir) {
    if (dir.width || dir.height) {
      throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the attributes \`height\` and/or \`width\` are present along with the \`fill\` attribute. Because \`fill\` mode causes an image to fill its containing element, the size attributes have no effect and should be removed.`);
    }
  }
  function assertNonZeroRenderedHeight(dir, img, renderer) {
    const removeLoadListenerFn = renderer.listen(img, "load", () => {
      removeLoadListenerFn();
      removeErrorListenerFn();
      const renderedHeight = img.clientHeight;
      if (dir.fill && renderedHeight === 0) {
        console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the height of the fill-mode image is zero. This is likely because the containing element does not have the CSS 'position' property set to one of the following: "relative", "fixed", or "absolute". To fix this problem, make sure the container element has the CSS 'position' property defined and the height of the element is not zero.`));
      }
    });
    const removeErrorListenerFn = renderer.listen(img, "error", () => {
      removeLoadListenerFn();
      removeErrorListenerFn();
    });
  }
  function assertValidLoadingInput(dir) {
    if (dir.loading && dir.priority) {
      throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`loading\` attribute was used on an image that was marked "priority". Setting \`loading\` on priority images is not allowed because these images will always be eagerly loaded. To fix this, remove the \u201Cloading\u201D attribute from the priority image.`);
    }
    const validInputs = ["auto", "eager", "lazy"];
    if (typeof dir.loading === "string" && !validInputs.includes(dir.loading)) {
      throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`loading\` attribute has an invalid value (\`${dir.loading}\`). To fix this, provide a valid value ("lazy", "eager", or "auto").`);
    }
  }
  function assertNotMissingBuiltInLoader(ngSrc, imageLoader) {
    if (imageLoader === noopImageLoader) {
      let builtInLoaderName = "";
      for (const loader of BUILT_IN_LOADERS) {
        if (loader.testUrl(ngSrc)) {
          builtInLoaderName = loader.name;
          break;
        }
      }
      if (builtInLoaderName) {
        console.warn(formatRuntimeError(2962, `NgOptimizedImage: It looks like your images may be hosted on the ${builtInLoaderName} CDN, but your app is not using Angular's built-in loader for that CDN. We recommend switching to use the built-in by calling \`provide${builtInLoaderName}Loader()\` in your \`providers\` and passing it your instance's base URL. If you don't want to use the built-in loader, define a custom loader function using IMAGE_LOADER to silence this warning.`));
      }
    }
  }
  function assertNoNgSrcsetWithoutLoader(dir, imageLoader) {
    if (dir.ngSrcset && imageLoader === noopImageLoader) {
      console.warn(formatRuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`ngSrcset\` attribute is present but no image loader is configured (i.e. the default one is being used), which would result in the same image being used for all configured sizes. To fix this, provide a loader or remove the \`ngSrcset\` attribute from the image.`));
    }
  }
  function assertNoLoaderParamsWithoutLoader(dir, imageLoader) {
    if (dir.loaderParams && imageLoader === noopImageLoader) {
      console.warn(formatRuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`loaderParams\` attribute is present but no image loader is configured (i.e. the default one is being used), which means that the loaderParams data will not be consumed and will not affect the URL. To fix this, provide a custom loader or remove the \`loaderParams\` attribute from the image.`));
    }
  }
  function round(input2) {
    return Number.isInteger(input2) ? input2 : input2.toFixed(2);
  }
  function unwrapSafeUrl(value) {
    if (typeof value === "string") {
      return value;
    }
    return unwrapSafeValue(value);
  }
  function booleanOrDataUrlAttribute(value) {
    if (typeof value === "string" && value.startsWith(`data:`)) {
      return value;
    }
    return booleanAttribute(value);
  }
  var _DOM, DomAdapter, PlatformNavigation, DOCUMENT2, PlatformLocation, LOCATION_INITIALIZED, BrowserPlatformLocation, LocationStrategy, APP_BASE_HREF, PathLocationStrategy, HashLocationStrategy, Location, CURRENCIES_EN, NumberFormatStyle, Plural, FormStyle, TranslationWidth, FormatWidth, NumberSymbol, WeekDay, getLocalePluralCase2, DEFAULT_NB_OF_CURRENCY_DIGITS, ISO8601_DATE_REGEX, NAMED_FORMATS, DATE_FORMATS_SPLIT, ZoneWidth, DateType, TranslationType, JANUARY, THURSDAY, DATE_FORMATS, NUMBER_FORMAT_REGEXP, MAX_DIGITS, DECIMAL_SEP, ZERO_CHAR, PATTERN_SEP, GROUP_SEP, DIGIT_CHAR, CURRENCY_CHAR, PERCENT_CHAR, NgLocalization, NgLocaleLocalization, WS_REGEXP, EMPTY_ARRAY2, NgClass, NgComponentOutlet, NgForOfContext, NgForOf, NgIf, NgIfContext, NG_SWITCH_USE_STRICT_EQUALS, SwitchView, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, NgStyle, NgTemplateOutlet, COMMON_DIRECTIVES, SubscribableStrategy, PromiseStrategy, _promiseStrategy, _subscribableStrategy, AsyncPipe, LowerCasePipe, unicodeWordMatch, TitleCasePipe, UpperCasePipe, DEFAULT_DATE_FORMAT, DATE_PIPE_DEFAULT_TIMEZONE, DATE_PIPE_DEFAULT_OPTIONS, DatePipe, _INTERPOLATION_REGEXP, I18nPluralPipe, I18nSelectPipe, JsonPipe, KeyValuePipe, DecimalPipe, PercentPipe, CurrencyPipe, SlicePipe, COMMON_PIPES, CommonModule, PLATFORM_BROWSER_ID, PLATFORM_SERVER_ID, VERSION3, ViewportScroller, BrowserViewportScroller, NullViewportScroller, XhrFactory, PLACEHOLDER_QUALITY, noopImageLoader, IMAGE_LOADER, provideCloudflareLoader, cloudinaryLoaderInfo, CLOUDINARY_LOADER_REGEX, provideCloudinaryLoader, imageKitLoaderInfo, IMAGE_KIT_LOADER_REGEX, provideImageKitLoader, imgixLoaderInfo, IMGIX_LOADER_REGEX, provideImgixLoader, netlifyLoaderInfo, NETLIFY_LOADER_REGEX, LCPImageObserver, INTERNAL_PRECONNECT_CHECK_BLOCKLIST, PRECONNECT_CHECK_BLOCKLIST, PreconnectLinkChecker, DEFAULT_PRELOADED_IMAGES_LIMIT, PRELOADED_IMAGES, PreloadLinkCreator, BASE64_IMG_MAX_LENGTH_IN_ERROR, VALID_WIDTH_DESCRIPTOR_SRCSET, VALID_DENSITY_DESCRIPTOR_SRCSET, ABSOLUTE_SRCSET_DENSITY_CAP, RECOMMENDED_SRCSET_DENSITY_CAP, DENSITY_SRCSET_MULTIPLIERS, VIEWPORT_BREAKPOINT_CUTOFF, ASPECT_RATIO_TOLERANCE, OVERSIZED_IMAGE_TOLERANCE2, FIXED_SRCSET_WIDTH_LIMIT, FIXED_SRCSET_HEIGHT_LIMIT, PLACEHOLDER_BLUR_AMOUNT, DATA_URL_WARN_LIMIT, DATA_URL_ERROR_LIMIT, BUILT_IN_LOADERS, NgOptimizedImage;
  var init_common = __esm({
    "node_modules/@angular/common/fesm2022/common.mjs"() {
      init_core();
      init_core();
      _DOM = null;
      DomAdapter = class {
      };
      PlatformNavigation = class _PlatformNavigation {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PlatformNavigation, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PlatformNavigation, providedIn: "platform", useFactory: () => window.navigation });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: PlatformNavigation, decorators: [{
        type: Injectable,
        args: [{ providedIn: "platform", useFactory: () => window.navigation }]
      }] });
      DOCUMENT2 = new InjectionToken(ngDevMode ? "DocumentToken" : "");
      PlatformLocation = class _PlatformLocation {
        historyGo(relativePosition) {
          throw new Error(ngDevMode ? "Not implemented" : "");
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PlatformLocation, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PlatformLocation, providedIn: "platform", useFactory: () => inject(BrowserPlatformLocation) });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: PlatformLocation, decorators: [{
        type: Injectable,
        args: [{ providedIn: "platform", useFactory: () => inject(BrowserPlatformLocation) }]
      }] });
      LOCATION_INITIALIZED = new InjectionToken(ngDevMode ? "Location Initialized" : "");
      BrowserPlatformLocation = class _BrowserPlatformLocation extends PlatformLocation {
        constructor() {
          super();
          this._doc = inject(DOCUMENT2);
          this._location = window.location;
          this._history = window.history;
        }
        getBaseHrefFromDOM() {
          return getDOM().getBaseHref(this._doc);
        }
        onPopState(fn2) {
          const window2 = getDOM().getGlobalEventTarget(this._doc, "window");
          window2.addEventListener("popstate", fn2, false);
          return () => window2.removeEventListener("popstate", fn2);
        }
        onHashChange(fn2) {
          const window2 = getDOM().getGlobalEventTarget(this._doc, "window");
          window2.addEventListener("hashchange", fn2, false);
          return () => window2.removeEventListener("hashchange", fn2);
        }
        get href() {
          return this._location.href;
        }
        get protocol() {
          return this._location.protocol;
        }
        get hostname() {
          return this._location.hostname;
        }
        get port() {
          return this._location.port;
        }
        get pathname() {
          return this._location.pathname;
        }
        get search() {
          return this._location.search;
        }
        get hash() {
          return this._location.hash;
        }
        set pathname(newPath) {
          this._location.pathname = newPath;
        }
        pushState(state, title, url) {
          this._history.pushState(state, title, url);
        }
        replaceState(state, title, url) {
          this._history.replaceState(state, title, url);
        }
        forward() {
          this._history.forward();
        }
        back() {
          this._history.back();
        }
        historyGo(relativePosition = 0) {
          this._history.go(relativePosition);
        }
        getState() {
          return this._history.state;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _BrowserPlatformLocation, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _BrowserPlatformLocation, providedIn: "platform", useFactory: () => new _BrowserPlatformLocation() });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: BrowserPlatformLocation, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "platform",
          useFactory: () => new BrowserPlatformLocation()
        }]
      }], ctorParameters: () => [] });
      LocationStrategy = class _LocationStrategy {
        historyGo(relativePosition) {
          throw new Error(ngDevMode ? "Not implemented" : "");
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _LocationStrategy, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _LocationStrategy, providedIn: "root", useFactory: () => inject(PathLocationStrategy) });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: LocationStrategy, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root", useFactory: () => inject(PathLocationStrategy) }]
      }] });
      APP_BASE_HREF = new InjectionToken(ngDevMode ? "appBaseHref" : "");
      PathLocationStrategy = class _PathLocationStrategy extends LocationStrategy {
        constructor(_platformLocation, href) {
          super();
          this._platformLocation = _platformLocation;
          this._removeListenerFns = [];
          this._baseHref = href ?? this._platformLocation.getBaseHrefFromDOM() ?? inject(DOCUMENT2).location?.origin ?? "";
        }
        /** @nodoc */
        ngOnDestroy() {
          while (this._removeListenerFns.length) {
            this._removeListenerFns.pop()();
          }
        }
        onPopState(fn2) {
          this._removeListenerFns.push(this._platformLocation.onPopState(fn2), this._platformLocation.onHashChange(fn2));
        }
        getBaseHref() {
          return this._baseHref;
        }
        prepareExternalUrl(internal) {
          return joinWithSlash(this._baseHref, internal);
        }
        path(includeHash = false) {
          const pathname = this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);
          const hash = this._platformLocation.hash;
          return hash && includeHash ? `${pathname}${hash}` : pathname;
        }
        pushState(state, title, url, queryParams) {
          const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
          this._platformLocation.pushState(state, title, externalUrl);
        }
        replaceState(state, title, url, queryParams) {
          const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
          this._platformLocation.replaceState(state, title, externalUrl);
        }
        forward() {
          this._platformLocation.forward();
        }
        back() {
          this._platformLocation.back();
        }
        getState() {
          return this._platformLocation.getState();
        }
        historyGo(relativePosition = 0) {
          this._platformLocation.historyGo?.(relativePosition);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PathLocationStrategy, deps: [{ token: PlatformLocation }, { token: APP_BASE_HREF, optional: true }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PathLocationStrategy, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: PathLocationStrategy, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], ctorParameters: () => [{ type: PlatformLocation }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [APP_BASE_HREF]
      }] }] });
      HashLocationStrategy = class _HashLocationStrategy extends LocationStrategy {
        constructor(_platformLocation, _baseHref) {
          super();
          this._platformLocation = _platformLocation;
          this._baseHref = "";
          this._removeListenerFns = [];
          if (_baseHref != null) {
            this._baseHref = _baseHref;
          }
        }
        /** @nodoc */
        ngOnDestroy() {
          while (this._removeListenerFns.length) {
            this._removeListenerFns.pop()();
          }
        }
        onPopState(fn2) {
          this._removeListenerFns.push(this._platformLocation.onPopState(fn2), this._platformLocation.onHashChange(fn2));
        }
        getBaseHref() {
          return this._baseHref;
        }
        path(includeHash = false) {
          const path = this._platformLocation.hash ?? "#";
          return path.length > 0 ? path.substring(1) : path;
        }
        prepareExternalUrl(internal) {
          const url = joinWithSlash(this._baseHref, internal);
          return url.length > 0 ? "#" + url : url;
        }
        pushState(state, title, path, queryParams) {
          let url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));
          if (url.length == 0) {
            url = this._platformLocation.pathname;
          }
          this._platformLocation.pushState(state, title, url);
        }
        replaceState(state, title, path, queryParams) {
          let url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));
          if (url.length == 0) {
            url = this._platformLocation.pathname;
          }
          this._platformLocation.replaceState(state, title, url);
        }
        forward() {
          this._platformLocation.forward();
        }
        back() {
          this._platformLocation.back();
        }
        getState() {
          return this._platformLocation.getState();
        }
        historyGo(relativePosition = 0) {
          this._platformLocation.historyGo?.(relativePosition);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _HashLocationStrategy, deps: [{ token: PlatformLocation }, { token: APP_BASE_HREF, optional: true }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _HashLocationStrategy });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: HashLocationStrategy, decorators: [{
        type: Injectable
      }], ctorParameters: () => [{ type: PlatformLocation }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [APP_BASE_HREF]
      }] }] });
      Location = class _Location {
        constructor(locationStrategy) {
          this._subject = new EventEmitter();
          this._urlChangeListeners = [];
          this._urlChangeSubscription = null;
          this._locationStrategy = locationStrategy;
          const baseHref = this._locationStrategy.getBaseHref();
          this._basePath = _stripOrigin(stripTrailingSlash(_stripIndexHtml(baseHref)));
          this._locationStrategy.onPopState((ev) => {
            this._subject.emit({
              "url": this.path(true),
              "pop": true,
              "state": ev.state,
              "type": ev.type
            });
          });
        }
        /** @nodoc */
        ngOnDestroy() {
          this._urlChangeSubscription?.unsubscribe();
          this._urlChangeListeners = [];
        }
        /**
         * Normalizes the URL path for this location.
         *
         * @param includeHash True to include an anchor fragment in the path.
         *
         * @returns The normalized URL path.
         */
        // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
        // removed.
        path(includeHash = false) {
          return this.normalize(this._locationStrategy.path(includeHash));
        }
        /**
         * Reports the current state of the location history.
         * @returns The current value of the `history.state` object.
         */
        getState() {
          return this._locationStrategy.getState();
        }
        /**
         * Normalizes the given path and compares to the current normalized path.
         *
         * @param path The given URL path.
         * @param query Query parameters.
         *
         * @returns True if the given URL path is equal to the current normalized path, false
         * otherwise.
         */
        isCurrentPathEqualTo(path, query = "") {
          return this.path() == this.normalize(path + normalizeQueryParams(query));
        }
        /**
         * Normalizes a URL path by stripping any trailing slashes.
         *
         * @param url String representing a URL.
         *
         * @returns The normalized URL string.
         */
        normalize(url) {
          return _Location.stripTrailingSlash(_stripBasePath(this._basePath, _stripIndexHtml(url)));
        }
        /**
         * Normalizes an external URL path.
         * If the given URL doesn't begin with a leading slash (`'/'`), adds one
         * before normalizing. Adds a hash if `HashLocationStrategy` is
         * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
         *
         * @param url String representing a URL.
         *
         * @returns  A normalized platform-specific URL.
         */
        prepareExternalUrl(url) {
          if (url && url[0] !== "/") {
            url = "/" + url;
          }
          return this._locationStrategy.prepareExternalUrl(url);
        }
        // TODO: rename this method to pushState
        /**
         * Changes the browser's URL to a normalized version of a given URL, and pushes a
         * new item onto the platform's history.
         *
         * @param path  URL path to normalize.
         * @param query Query parameters.
         * @param state Location history state.
         *
         */
        go(path, query = "", state = null) {
          this._locationStrategy.pushState(state, "", path, query);
          this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
        }
        /**
         * Changes the browser's URL to a normalized version of the given URL, and replaces
         * the top item on the platform's history stack.
         *
         * @param path  URL path to normalize.
         * @param query Query parameters.
         * @param state Location history state.
         */
        replaceState(path, query = "", state = null) {
          this._locationStrategy.replaceState(state, "", path, query);
          this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
        }
        /**
         * Navigates forward in the platform's history.
         */
        forward() {
          this._locationStrategy.forward();
        }
        /**
         * Navigates back in the platform's history.
         */
        back() {
          this._locationStrategy.back();
        }
        /**
         * Navigate to a specific page from session history, identified by its relative position to the
         * current page.
         *
         * @param relativePosition  Position of the target page in the history relative to the current
         *     page.
         * A negative value moves backwards, a positive value moves forwards, e.g. `location.historyGo(2)`
         * moves forward two pages and `location.historyGo(-2)` moves back two pages. When we try to go
         * beyond what's stored in the history session, we stay in the current page. Same behaviour occurs
         * when `relativePosition` equals 0.
         * @see https://developer.mozilla.org/en-US/docs/Web/API/History_API#Moving_to_a_specific_point_in_history
         */
        historyGo(relativePosition = 0) {
          this._locationStrategy.historyGo?.(relativePosition);
        }
        /**
         * Registers a URL change listener. Use to catch updates performed by the Angular
         * framework that are not detectible through "popstate" or "hashchange" events.
         *
         * @param fn The change handler function, which take a URL and a location history state.
         * @returns A function that, when executed, unregisters a URL change listener.
         */
        onUrlChange(fn2) {
          this._urlChangeListeners.push(fn2);
          this._urlChangeSubscription ??= this.subscribe((v) => {
            this._notifyUrlChangeListeners(v.url, v.state);
          });
          return () => {
            const fnIndex = this._urlChangeListeners.indexOf(fn2);
            this._urlChangeListeners.splice(fnIndex, 1);
            if (this._urlChangeListeners.length === 0) {
              this._urlChangeSubscription?.unsubscribe();
              this._urlChangeSubscription = null;
            }
          };
        }
        /** @internal */
        _notifyUrlChangeListeners(url = "", state) {
          this._urlChangeListeners.forEach((fn2) => fn2(url, state));
        }
        /**
         * Subscribes to the platform's `popState` events.
         *
         * Note: `Location.go()` does not trigger the `popState` event in the browser. Use
         * `Location.onUrlChange()` to subscribe to URL changes instead.
         *
         * @param value Event that is triggered when the state history changes.
         * @param exception The exception to throw.
         *
         * @see [onpopstate](https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate)
         *
         * @returns Subscribed events.
         */
        subscribe(onNext, onThrow, onReturn) {
          return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
        }
        static {
          this.normalizeQueryParams = normalizeQueryParams;
        }
        static {
          this.joinWithSlash = joinWithSlash;
        }
        static {
          this.stripTrailingSlash = stripTrailingSlash;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _Location, deps: [{ token: LocationStrategy }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _Location, providedIn: "root", useFactory: createLocation });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: Location, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root",
          // See #23917
          useFactory: createLocation
        }]
      }], ctorParameters: () => [{ type: LocationStrategy }] });
      CURRENCIES_EN = { "ADP": [void 0, void 0, 0], "AFN": [void 0, "\u060B", 0], "ALL": [void 0, void 0, 0], "AMD": [void 0, "\u058F", 2], "AOA": [void 0, "Kz"], "ARS": [void 0, "$"], "AUD": ["A$", "$"], "AZN": [void 0, "\u20BC"], "BAM": [void 0, "KM"], "BBD": [void 0, "$"], "BDT": [void 0, "\u09F3"], "BHD": [void 0, void 0, 3], "BIF": [void 0, void 0, 0], "BMD": [void 0, "$"], "BND": [void 0, "$"], "BOB": [void 0, "Bs"], "BRL": ["R$"], "BSD": [void 0, "$"], "BWP": [void 0, "P"], "BYN": [void 0, void 0, 2], "BYR": [void 0, void 0, 0], "BZD": [void 0, "$"], "CAD": ["CA$", "$", 2], "CHF": [void 0, void 0, 2], "CLF": [void 0, void 0, 4], "CLP": [void 0, "$", 0], "CNY": ["CN\xA5", "\xA5"], "COP": [void 0, "$", 2], "CRC": [void 0, "\u20A1", 2], "CUC": [void 0, "$"], "CUP": [void 0, "$"], "CZK": [void 0, "K\u010D", 2], "DJF": [void 0, void 0, 0], "DKK": [void 0, "kr", 2], "DOP": [void 0, "$"], "EGP": [void 0, "E\xA3"], "ESP": [void 0, "\u20A7", 0], "EUR": ["\u20AC"], "FJD": [void 0, "$"], "FKP": [void 0, "\xA3"], "GBP": ["\xA3"], "GEL": [void 0, "\u20BE"], "GHS": [void 0, "GH\u20B5"], "GIP": [void 0, "\xA3"], "GNF": [void 0, "FG", 0], "GTQ": [void 0, "Q"], "GYD": [void 0, "$", 2], "HKD": ["HK$", "$"], "HNL": [void 0, "L"], "HRK": [void 0, "kn"], "HUF": [void 0, "Ft", 2], "IDR": [void 0, "Rp", 2], "ILS": ["\u20AA"], "INR": ["\u20B9"], "IQD": [void 0, void 0, 0], "IRR": [void 0, void 0, 0], "ISK": [void 0, "kr", 0], "ITL": [void 0, void 0, 0], "JMD": [void 0, "$"], "JOD": [void 0, void 0, 3], "JPY": ["\xA5", void 0, 0], "KHR": [void 0, "\u17DB"], "KMF": [void 0, "CF", 0], "KPW": [void 0, "\u20A9", 0], "KRW": ["\u20A9", void 0, 0], "KWD": [void 0, void 0, 3], "KYD": [void 0, "$"], "KZT": [void 0, "\u20B8"], "LAK": [void 0, "\u20AD", 0], "LBP": [void 0, "L\xA3", 0], "LKR": [void 0, "Rs"], "LRD": [void 0, "$"], "LTL": [void 0, "Lt"], "LUF": [void 0, void 0, 0], "LVL": [void 0, "Ls"], "LYD": [void 0, void 0, 3], "MGA": [void 0, "Ar", 0], "MGF": [void 0, void 0, 0], "MMK": [void 0, "K", 0], "MNT": [void 0, "\u20AE", 2], "MRO": [void 0, void 0, 0], "MUR": [void 0, "Rs", 2], "MXN": ["MX$", "$"], "MYR": [void 0, "RM"], "NAD": [void 0, "$"], "NGN": [void 0, "\u20A6"], "NIO": [void 0, "C$"], "NOK": [void 0, "kr", 2], "NPR": [void 0, "Rs"], "NZD": ["NZ$", "$"], "OMR": [void 0, void 0, 3], "PHP": ["\u20B1"], "PKR": [void 0, "Rs", 2], "PLN": [void 0, "z\u0142"], "PYG": [void 0, "\u20B2", 0], "RON": [void 0, "lei"], "RSD": [void 0, void 0, 0], "RUB": [void 0, "\u20BD"], "RWF": [void 0, "RF", 0], "SBD": [void 0, "$"], "SEK": [void 0, "kr", 2], "SGD": [void 0, "$"], "SHP": [void 0, "\xA3"], "SLE": [void 0, void 0, 2], "SLL": [void 0, void 0, 0], "SOS": [void 0, void 0, 0], "SRD": [void 0, "$"], "SSP": [void 0, "\xA3"], "STD": [void 0, void 0, 0], "STN": [void 0, "Db"], "SYP": [void 0, "\xA3", 0], "THB": [void 0, "\u0E3F"], "TMM": [void 0, void 0, 0], "TND": [void 0, void 0, 3], "TOP": [void 0, "T$"], "TRL": [void 0, void 0, 0], "TRY": [void 0, "\u20BA"], "TTD": [void 0, "$"], "TWD": ["NT$", "$", 2], "TZS": [void 0, void 0, 2], "UAH": [void 0, "\u20B4"], "UGX": [void 0, void 0, 0], "USD": ["$"], "UYI": [void 0, void 0, 0], "UYU": [void 0, "$"], "UYW": [void 0, void 0, 4], "UZS": [void 0, void 0, 2], "VEF": [void 0, "Bs", 2], "VND": ["\u20AB", void 0, 0], "VUV": [void 0, void 0, 0], "XAF": ["FCFA", void 0, 0], "XCD": ["EC$", "$"], "XOF": ["F\u202FCFA", void 0, 0], "XPF": ["CFPF", void 0, 0], "XXX": ["\xA4"], "YER": [void 0, void 0, 0], "ZAR": [void 0, "R"], "ZMK": [void 0, void 0, 0], "ZMW": [void 0, "ZK"], "ZWD": [void 0, void 0, 0] };
      (function(NumberFormatStyle2) {
        NumberFormatStyle2[NumberFormatStyle2["Decimal"] = 0] = "Decimal";
        NumberFormatStyle2[NumberFormatStyle2["Percent"] = 1] = "Percent";
        NumberFormatStyle2[NumberFormatStyle2["Currency"] = 2] = "Currency";
        NumberFormatStyle2[NumberFormatStyle2["Scientific"] = 3] = "Scientific";
      })(NumberFormatStyle || (NumberFormatStyle = {}));
      (function(Plural2) {
        Plural2[Plural2["Zero"] = 0] = "Zero";
        Plural2[Plural2["One"] = 1] = "One";
        Plural2[Plural2["Two"] = 2] = "Two";
        Plural2[Plural2["Few"] = 3] = "Few";
        Plural2[Plural2["Many"] = 4] = "Many";
        Plural2[Plural2["Other"] = 5] = "Other";
      })(Plural || (Plural = {}));
      (function(FormStyle2) {
        FormStyle2[FormStyle2["Format"] = 0] = "Format";
        FormStyle2[FormStyle2["Standalone"] = 1] = "Standalone";
      })(FormStyle || (FormStyle = {}));
      (function(TranslationWidth2) {
        TranslationWidth2[TranslationWidth2["Narrow"] = 0] = "Narrow";
        TranslationWidth2[TranslationWidth2["Abbreviated"] = 1] = "Abbreviated";
        TranslationWidth2[TranslationWidth2["Wide"] = 2] = "Wide";
        TranslationWidth2[TranslationWidth2["Short"] = 3] = "Short";
      })(TranslationWidth || (TranslationWidth = {}));
      (function(FormatWidth2) {
        FormatWidth2[FormatWidth2["Short"] = 0] = "Short";
        FormatWidth2[FormatWidth2["Medium"] = 1] = "Medium";
        FormatWidth2[FormatWidth2["Long"] = 2] = "Long";
        FormatWidth2[FormatWidth2["Full"] = 3] = "Full";
      })(FormatWidth || (FormatWidth = {}));
      NumberSymbol = {
        /**
         * Decimal separator.
         * For `en-US`, the dot character.
         * Example: 2,345`.`67
         */
        Decimal: 0,
        /**
         * Grouping separator, typically for thousands.
         * For `en-US`, the comma character.
         * Example: 2`,`345.67
         */
        Group: 1,
        /**
         * List-item separator.
         * Example: "one, two, and three"
         */
        List: 2,
        /**
         * Sign for percentage (out of 100).
         * Example: 23.4%
         */
        PercentSign: 3,
        /**
         * Sign for positive numbers.
         * Example: +23
         */
        PlusSign: 4,
        /**
         * Sign for negative numbers.
         * Example: -23
         */
        MinusSign: 5,
        /**
         * Computer notation for exponential value (n times a power of 10).
         * Example: 1.2E3
         */
        Exponential: 6,
        /**
         * Human-readable format of exponential.
         * Example: 1.2x103
         */
        SuperscriptingExponent: 7,
        /**
         * Sign for permille (out of 1000).
         * Example: 23.4‰
         */
        PerMille: 8,
        /**
         * Infinity, can be used with plus and minus.
         * Example: ∞, +∞, -∞
         */
        Infinity: 9,
        /**
         * Not a number.
         * Example: NaN
         */
        NaN: 10,
        /**
         * Symbol used between time units.
         * Example: 10:52
         */
        TimeSeparator: 11,
        /**
         * Decimal separator for currency values (fallback to `Decimal`).
         * Example: $2,345.67
         */
        CurrencyDecimal: 12,
        /**
         * Group separator for currency values (fallback to `Group`).
         * Example: $2,345.67
         */
        CurrencyGroup: 13
      };
      (function(WeekDay2) {
        WeekDay2[WeekDay2["Sunday"] = 0] = "Sunday";
        WeekDay2[WeekDay2["Monday"] = 1] = "Monday";
        WeekDay2[WeekDay2["Tuesday"] = 2] = "Tuesday";
        WeekDay2[WeekDay2["Wednesday"] = 3] = "Wednesday";
        WeekDay2[WeekDay2["Thursday"] = 4] = "Thursday";
        WeekDay2[WeekDay2["Friday"] = 5] = "Friday";
        WeekDay2[WeekDay2["Saturday"] = 6] = "Saturday";
      })(WeekDay || (WeekDay = {}));
      getLocalePluralCase2 = getLocalePluralCase;
      DEFAULT_NB_OF_CURRENCY_DIGITS = 2;
      ISO8601_DATE_REGEX = /^(\d{4,})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
      NAMED_FORMATS = {};
      DATE_FORMATS_SPLIT = /((?:[^BEGHLMOSWYZabcdhmswyz']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|c{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;
      (function(ZoneWidth2) {
        ZoneWidth2[ZoneWidth2["Short"] = 0] = "Short";
        ZoneWidth2[ZoneWidth2["ShortGMT"] = 1] = "ShortGMT";
        ZoneWidth2[ZoneWidth2["Long"] = 2] = "Long";
        ZoneWidth2[ZoneWidth2["Extended"] = 3] = "Extended";
      })(ZoneWidth || (ZoneWidth = {}));
      (function(DateType2) {
        DateType2[DateType2["FullYear"] = 0] = "FullYear";
        DateType2[DateType2["Month"] = 1] = "Month";
        DateType2[DateType2["Date"] = 2] = "Date";
        DateType2[DateType2["Hours"] = 3] = "Hours";
        DateType2[DateType2["Minutes"] = 4] = "Minutes";
        DateType2[DateType2["Seconds"] = 5] = "Seconds";
        DateType2[DateType2["FractionalSeconds"] = 6] = "FractionalSeconds";
        DateType2[DateType2["Day"] = 7] = "Day";
      })(DateType || (DateType = {}));
      (function(TranslationType2) {
        TranslationType2[TranslationType2["DayPeriods"] = 0] = "DayPeriods";
        TranslationType2[TranslationType2["Days"] = 1] = "Days";
        TranslationType2[TranslationType2["Months"] = 2] = "Months";
        TranslationType2[TranslationType2["Eras"] = 3] = "Eras";
      })(TranslationType || (TranslationType = {}));
      JANUARY = 0;
      THURSDAY = 4;
      DATE_FORMATS = {};
      NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
      MAX_DIGITS = 22;
      DECIMAL_SEP = ".";
      ZERO_CHAR = "0";
      PATTERN_SEP = ";";
      GROUP_SEP = ",";
      DIGIT_CHAR = "#";
      CURRENCY_CHAR = "\xA4";
      PERCENT_CHAR = "%";
      NgLocalization = class _NgLocalization {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgLocalization, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgLocalization, providedIn: "root", useFactory: (locale) => new NgLocaleLocalization(locale), deps: [{ token: LOCALE_ID }] });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgLocalization, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root",
          useFactory: (locale) => new NgLocaleLocalization(locale),
          deps: [LOCALE_ID]
        }]
      }] });
      NgLocaleLocalization = class _NgLocaleLocalization extends NgLocalization {
        constructor(locale) {
          super();
          this.locale = locale;
        }
        getPluralCategory(value, locale) {
          const plural2 = getLocalePluralCase2(locale || this.locale)(value);
          switch (plural2) {
            case Plural.Zero:
              return "zero";
            case Plural.One:
              return "one";
            case Plural.Two:
              return "two";
            case Plural.Few:
              return "few";
            case Plural.Many:
              return "many";
            default:
              return "other";
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgLocaleLocalization, deps: [{ token: LOCALE_ID }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgLocaleLocalization });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgLocaleLocalization, decorators: [{
        type: Injectable
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Inject,
        args: [LOCALE_ID]
      }] }] });
      WS_REGEXP = /\s+/;
      EMPTY_ARRAY2 = [];
      NgClass = class _NgClass {
        constructor(_ngEl, _renderer) {
          this._ngEl = _ngEl;
          this._renderer = _renderer;
          this.initialClasses = EMPTY_ARRAY2;
          this.stateMap = /* @__PURE__ */ new Map();
        }
        set klass(value) {
          this.initialClasses = value != null ? value.trim().split(WS_REGEXP) : EMPTY_ARRAY2;
        }
        set ngClass(value) {
          this.rawClass = typeof value === "string" ? value.trim().split(WS_REGEXP) : value;
        }
        /*
          The NgClass directive uses the custom change detection algorithm for its inputs. The custom
          algorithm is necessary since inputs are represented as complex object or arrays that need to be
          deeply-compared.
        
          This algorithm is perf-sensitive since NgClass is used very frequently and its poor performance
          might negatively impact runtime performance of the entire change detection cycle. The design of
          this algorithm is making sure that:
          - there is no unnecessary DOM manipulation (CSS classes are added / removed from the DOM only when
          needed), even if references to bound objects change;
          - there is no memory allocation if nothing changes (even relatively modest memory allocation
          during the change detection cycle can result in GC pauses for some of the CD cycles).
        
          The algorithm works by iterating over the set of bound classes, staring with [class] binding and
          then going over [ngClass] binding. For each CSS class name:
          - check if it was seen before (this information is tracked in the state map) and if its value
          changed;
          - mark it as "touched" - names that are not marked are not present in the latest set of binding
          and we can remove such class name from the internal data structures;
        
          After iteration over all the CSS class names we've got data structure with all the information
          necessary to synchronize changes to the DOM - it is enough to iterate over the state map, flush
          changes to the DOM and reset internal data structures so those are ready for the next change
          detection cycle.
           */
        ngDoCheck() {
          for (const klass of this.initialClasses) {
            this._updateState(klass, true);
          }
          const rawClass = this.rawClass;
          if (Array.isArray(rawClass) || rawClass instanceof Set) {
            for (const klass of rawClass) {
              this._updateState(klass, true);
            }
          } else if (rawClass != null) {
            for (const klass of Object.keys(rawClass)) {
              this._updateState(klass, Boolean(rawClass[klass]));
            }
          }
          this._applyStateDiff();
        }
        _updateState(klass, nextEnabled) {
          const state = this.stateMap.get(klass);
          if (state !== void 0) {
            if (state.enabled !== nextEnabled) {
              state.changed = true;
              state.enabled = nextEnabled;
            }
            state.touched = true;
          } else {
            this.stateMap.set(klass, { enabled: nextEnabled, changed: true, touched: true });
          }
        }
        _applyStateDiff() {
          for (const stateEntry of this.stateMap) {
            const klass = stateEntry[0];
            const state = stateEntry[1];
            if (state.changed) {
              this._toggleClass(klass, state.enabled);
              state.changed = false;
            } else if (!state.touched) {
              if (state.enabled) {
                this._toggleClass(klass, false);
              }
              this.stateMap.delete(klass);
            }
            state.touched = false;
          }
        }
        _toggleClass(klass, enabled) {
          if (ngDevMode) {
            if (typeof klass !== "string") {
              throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${stringify(klass)}`);
            }
          }
          klass = klass.trim();
          if (klass.length > 0) {
            klass.split(WS_REGEXP).forEach((klass2) => {
              if (enabled) {
                this._renderer.addClass(this._ngEl.nativeElement, klass2);
              } else {
                this._renderer.removeClass(this._ngEl.nativeElement, klass2);
              }
            });
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgClass, deps: [{ token: ElementRef }, { token: Renderer2 }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgClass, isStandalone: true, selector: "[ngClass]", inputs: { klass: ["class", "klass"], ngClass: "ngClass" }, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgClass, decorators: [{
        type: Directive,
        args: [{
          selector: "[ngClass]",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: ElementRef }, { type: Renderer2 }], propDecorators: { klass: [{
        type: Input,
        args: ["class"]
      }], ngClass: [{
        type: Input,
        args: ["ngClass"]
      }] } });
      NgComponentOutlet = class _NgComponentOutlet {
        constructor(_viewContainerRef) {
          this._viewContainerRef = _viewContainerRef;
          this.ngComponentOutlet = null;
          this._inputsUsed = /* @__PURE__ */ new Map();
        }
        _needToReCreateNgModuleInstance(changes) {
          return changes["ngComponentOutletNgModule"] !== void 0 || changes["ngComponentOutletNgModuleFactory"] !== void 0;
        }
        _needToReCreateComponentInstance(changes) {
          return changes["ngComponentOutlet"] !== void 0 || changes["ngComponentOutletContent"] !== void 0 || changes["ngComponentOutletInjector"] !== void 0 || this._needToReCreateNgModuleInstance(changes);
        }
        /** @nodoc */
        ngOnChanges(changes) {
          if (this._needToReCreateComponentInstance(changes)) {
            this._viewContainerRef.clear();
            this._inputsUsed.clear();
            this._componentRef = void 0;
            if (this.ngComponentOutlet) {
              const injector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
              if (this._needToReCreateNgModuleInstance(changes)) {
                this._moduleRef?.destroy();
                if (this.ngComponentOutletNgModule) {
                  this._moduleRef = createNgModule(this.ngComponentOutletNgModule, getParentInjector(injector));
                } else if (this.ngComponentOutletNgModuleFactory) {
                  this._moduleRef = this.ngComponentOutletNgModuleFactory.create(getParentInjector(injector));
                } else {
                  this._moduleRef = void 0;
                }
              }
              this._componentRef = this._viewContainerRef.createComponent(this.ngComponentOutlet, {
                injector,
                ngModuleRef: this._moduleRef,
                projectableNodes: this.ngComponentOutletContent
              });
            }
          }
        }
        /** @nodoc */
        ngDoCheck() {
          if (this._componentRef) {
            if (this.ngComponentOutletInputs) {
              for (const inputName of Object.keys(this.ngComponentOutletInputs)) {
                this._inputsUsed.set(inputName, true);
              }
            }
            this._applyInputStateDiff(this._componentRef);
          }
        }
        /** @nodoc */
        ngOnDestroy() {
          this._moduleRef?.destroy();
        }
        _applyInputStateDiff(componentRef) {
          for (const [inputName, touched] of this._inputsUsed) {
            if (!touched) {
              componentRef.setInput(inputName, void 0);
              this._inputsUsed.delete(inputName);
            } else {
              componentRef.setInput(inputName, this.ngComponentOutletInputs[inputName]);
              this._inputsUsed.set(inputName, false);
            }
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgComponentOutlet, deps: [{ token: ViewContainerRef }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgComponentOutlet, isStandalone: true, selector: "[ngComponentOutlet]", inputs: { ngComponentOutlet: "ngComponentOutlet", ngComponentOutletInputs: "ngComponentOutletInputs", ngComponentOutletInjector: "ngComponentOutletInjector", ngComponentOutletContent: "ngComponentOutletContent", ngComponentOutletNgModule: "ngComponentOutletNgModule", ngComponentOutletNgModuleFactory: "ngComponentOutletNgModuleFactory" }, usesOnChanges: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgComponentOutlet, decorators: [{
        type: Directive,
        args: [{
          selector: "[ngComponentOutlet]",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: ViewContainerRef }], propDecorators: { ngComponentOutlet: [{
        type: Input
      }], ngComponentOutletInputs: [{
        type: Input
      }], ngComponentOutletInjector: [{
        type: Input
      }], ngComponentOutletContent: [{
        type: Input
      }], ngComponentOutletNgModule: [{
        type: Input
      }], ngComponentOutletNgModuleFactory: [{
        type: Input
      }] } });
      NgForOfContext = class {
        constructor($implicit, ngForOf, index, count) {
          this.$implicit = $implicit;
          this.ngForOf = ngForOf;
          this.index = index;
          this.count = count;
        }
        get first() {
          return this.index === 0;
        }
        get last() {
          return this.index === this.count - 1;
        }
        get even() {
          return this.index % 2 === 0;
        }
        get odd() {
          return !this.even;
        }
      };
      NgForOf = class _NgForOf {
        /**
         * The value of the iterable expression, which can be used as a
         * [template input variable](guide/structural-directives#shorthand).
         */
        set ngForOf(ngForOf) {
          this._ngForOf = ngForOf;
          this._ngForOfDirty = true;
        }
        /**
         * Specifies a custom `TrackByFunction` to compute the identity of items in an iterable.
         *
         * If a custom `TrackByFunction` is not provided, `NgForOf` will use the item's [object
         * identity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)
         * as the key.
         *
         * `NgForOf` uses the computed key to associate items in an iterable with DOM elements
         * it produces for these items.
         *
         * A custom `TrackByFunction` is useful to provide good user experience in cases when items in an
         * iterable rendered using `NgForOf` have a natural identifier (for example, custom ID or a
         * primary key), and this iterable could be updated with new object instances that still
         * represent the same underlying entity (for example, when data is re-fetched from the server,
         * and the iterable is recreated and re-rendered, but most of the data is still the same).
         *
         * @see {@link TrackByFunction}
         */
        set ngForTrackBy(fn2) {
          if ((typeof ngDevMode === "undefined" || ngDevMode) && fn2 != null && typeof fn2 !== "function") {
            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn2)}. See https://angular.io/api/common/NgForOf#change-propagation for more information.`);
          }
          this._trackByFn = fn2;
        }
        get ngForTrackBy() {
          return this._trackByFn;
        }
        constructor(_viewContainer, _template, _differs) {
          this._viewContainer = _viewContainer;
          this._template = _template;
          this._differs = _differs;
          this._ngForOf = null;
          this._ngForOfDirty = true;
          this._differ = null;
        }
        /**
         * A reference to the template that is stamped out for each item in the iterable.
         * @see [template reference variable](guide/template-reference-variables)
         */
        set ngForTemplate(value) {
          if (value) {
            this._template = value;
          }
        }
        /**
         * Applies the changes when needed.
         * @nodoc
         */
        ngDoCheck() {
          if (this._ngForOfDirty) {
            this._ngForOfDirty = false;
            const value = this._ngForOf;
            if (!this._differ && value) {
              if (typeof ngDevMode === "undefined" || ngDevMode) {
                try {
                  this._differ = this._differs.find(value).create(this.ngForTrackBy);
                } catch {
                  let errorMessage = `Cannot find a differ supporting object '${value}' of type '${getTypeName(value)}'. NgFor only supports binding to Iterables, such as Arrays.`;
                  if (typeof value === "object") {
                    errorMessage += " Did you mean to use the keyvalue pipe?";
                  }
                  throw new RuntimeError(-2200, errorMessage);
                }
              } else {
                this._differ = this._differs.find(value).create(this.ngForTrackBy);
              }
            }
          }
          if (this._differ) {
            const changes = this._differ.diff(this._ngForOf);
            if (changes)
              this._applyChanges(changes);
          }
        }
        _applyChanges(changes) {
          const viewContainer = this._viewContainer;
          changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {
            if (item.previousIndex == null) {
              viewContainer.createEmbeddedView(this._template, new NgForOfContext(item.item, this._ngForOf, -1, -1), currentIndex === null ? void 0 : currentIndex);
            } else if (currentIndex == null) {
              viewContainer.remove(adjustedPreviousIndex === null ? void 0 : adjustedPreviousIndex);
            } else if (adjustedPreviousIndex !== null) {
              const view = viewContainer.get(adjustedPreviousIndex);
              viewContainer.move(view, currentIndex);
              applyViewChange(view, item);
            }
          });
          for (let i = 0, ilen = viewContainer.length; i < ilen; i++) {
            const viewRef = viewContainer.get(i);
            const context2 = viewRef.context;
            context2.index = i;
            context2.count = ilen;
            context2.ngForOf = this._ngForOf;
          }
          changes.forEachIdentityChange((record) => {
            const viewRef = viewContainer.get(record.currentIndex);
            applyViewChange(viewRef, record);
          });
        }
        /**
         * Asserts the correct type of the context for the template that `NgForOf` will render.
         *
         * The presence of this method is a signal to the Ivy template type-check compiler that the
         * `NgForOf` structural directive renders its template with a specific context type.
         */
        static ngTemplateContextGuard(dir, ctx) {
          return true;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgForOf, deps: [{ token: ViewContainerRef }, { token: TemplateRef }, { token: IterableDiffers }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgForOf, isStandalone: true, selector: "[ngFor][ngForOf]", inputs: { ngForOf: "ngForOf", ngForTrackBy: "ngForTrackBy", ngForTemplate: "ngForTemplate" }, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgForOf, decorators: [{
        type: Directive,
        args: [{
          selector: "[ngFor][ngForOf]",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: ViewContainerRef }, { type: TemplateRef }, { type: IterableDiffers }], propDecorators: { ngForOf: [{
        type: Input
      }], ngForTrackBy: [{
        type: Input
      }], ngForTemplate: [{
        type: Input
      }] } });
      NgIf = class _NgIf {
        constructor(_viewContainer, templateRef) {
          this._viewContainer = _viewContainer;
          this._context = new NgIfContext();
          this._thenTemplateRef = null;
          this._elseTemplateRef = null;
          this._thenViewRef = null;
          this._elseViewRef = null;
          this._thenTemplateRef = templateRef;
        }
        /**
         * The Boolean expression to evaluate as the condition for showing a template.
         */
        set ngIf(condition) {
          this._context.$implicit = this._context.ngIf = condition;
          this._updateView();
        }
        /**
         * A template to show if the condition expression evaluates to true.
         */
        set ngIfThen(templateRef) {
          assertTemplate("ngIfThen", templateRef);
          this._thenTemplateRef = templateRef;
          this._thenViewRef = null;
          this._updateView();
        }
        /**
         * A template to show if the condition expression evaluates to false.
         */
        set ngIfElse(templateRef) {
          assertTemplate("ngIfElse", templateRef);
          this._elseTemplateRef = templateRef;
          this._elseViewRef = null;
          this._updateView();
        }
        _updateView() {
          if (this._context.$implicit) {
            if (!this._thenViewRef) {
              this._viewContainer.clear();
              this._elseViewRef = null;
              if (this._thenTemplateRef) {
                this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
              }
            }
          } else {
            if (!this._elseViewRef) {
              this._viewContainer.clear();
              this._thenViewRef = null;
              if (this._elseTemplateRef) {
                this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
              }
            }
          }
        }
        /**
         * Asserts the correct type of the context for the template that `NgIf` will render.
         *
         * The presence of this method is a signal to the Ivy template type-check compiler that the
         * `NgIf` structural directive renders its template with a specific context type.
         */
        static ngTemplateContextGuard(dir, ctx) {
          return true;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgIf, deps: [{ token: ViewContainerRef }, { token: TemplateRef }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgIf, isStandalone: true, selector: "[ngIf]", inputs: { ngIf: "ngIf", ngIfThen: "ngIfThen", ngIfElse: "ngIfElse" }, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgIf, decorators: [{
        type: Directive,
        args: [{
          selector: "[ngIf]",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: ViewContainerRef }, { type: TemplateRef }], propDecorators: { ngIf: [{
        type: Input
      }], ngIfThen: [{
        type: Input
      }], ngIfElse: [{
        type: Input
      }] } });
      NgIfContext = class {
        constructor() {
          this.$implicit = null;
          this.ngIf = null;
        }
      };
      NG_SWITCH_USE_STRICT_EQUALS = true;
      SwitchView = class {
        constructor(_viewContainerRef, _templateRef) {
          this._viewContainerRef = _viewContainerRef;
          this._templateRef = _templateRef;
          this._created = false;
        }
        create() {
          this._created = true;
          this._viewContainerRef.createEmbeddedView(this._templateRef);
        }
        destroy() {
          this._created = false;
          this._viewContainerRef.clear();
        }
        enforceState(created) {
          if (created && !this._created) {
            this.create();
          } else if (!created && this._created) {
            this.destroy();
          }
        }
      };
      NgSwitch = class _NgSwitch {
        constructor() {
          this._defaultViews = [];
          this._defaultUsed = false;
          this._caseCount = 0;
          this._lastCaseCheckIndex = 0;
          this._lastCasesMatched = false;
        }
        set ngSwitch(newValue) {
          this._ngSwitch = newValue;
          if (this._caseCount === 0) {
            this._updateDefaultCases(true);
          }
        }
        /** @internal */
        _addCase() {
          return this._caseCount++;
        }
        /** @internal */
        _addDefault(view) {
          this._defaultViews.push(view);
        }
        /** @internal */
        _matchCase(value) {
          const matched = NG_SWITCH_USE_STRICT_EQUALS ? value === this._ngSwitch : value == this._ngSwitch;
          if ((typeof ngDevMode === "undefined" || ngDevMode) && matched !== (value == this._ngSwitch)) {
            console.warn(formatRuntimeError(2001, `As of Angular v17 the NgSwitch directive uses strict equality comparison === instead of == to match different cases. Previously the case value "${stringifyValue(value)}" matched switch expression value "${stringifyValue(this._ngSwitch)}", but this is no longer the case with the stricter equality check. Your comparison results return different results using === vs. == and you should adjust your ngSwitch expression and / or values to conform with the strict equality requirements.`));
          }
          this._lastCasesMatched ||= matched;
          this._lastCaseCheckIndex++;
          if (this._lastCaseCheckIndex === this._caseCount) {
            this._updateDefaultCases(!this._lastCasesMatched);
            this._lastCaseCheckIndex = 0;
            this._lastCasesMatched = false;
          }
          return matched;
        }
        _updateDefaultCases(useDefault) {
          if (this._defaultViews.length > 0 && useDefault !== this._defaultUsed) {
            this._defaultUsed = useDefault;
            for (const defaultView of this._defaultViews) {
              defaultView.enforceState(useDefault);
            }
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgSwitch, deps: [], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgSwitch, isStandalone: true, selector: "[ngSwitch]", inputs: { ngSwitch: "ngSwitch" }, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgSwitch, decorators: [{
        type: Directive,
        args: [{
          selector: "[ngSwitch]",
          standalone: true
        }]
      }], propDecorators: { ngSwitch: [{
        type: Input
      }] } });
      NgSwitchCase = class _NgSwitchCase {
        constructor(viewContainer, templateRef, ngSwitch) {
          this.ngSwitch = ngSwitch;
          if ((typeof ngDevMode === "undefined" || ngDevMode) && !ngSwitch) {
            throwNgSwitchProviderNotFoundError("ngSwitchCase", "NgSwitchCase");
          }
          ngSwitch._addCase();
          this._view = new SwitchView(viewContainer, templateRef);
        }
        /**
         * Performs case matching. For internal use only.
         * @nodoc
         */
        ngDoCheck() {
          this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgSwitchCase, deps: [{ token: ViewContainerRef }, { token: TemplateRef }, { token: NgSwitch, host: true, optional: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgSwitchCase, isStandalone: true, selector: "[ngSwitchCase]", inputs: { ngSwitchCase: "ngSwitchCase" }, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgSwitchCase, decorators: [{
        type: Directive,
        args: [{
          selector: "[ngSwitchCase]",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: ViewContainerRef }, { type: TemplateRef }, { type: NgSwitch, decorators: [{
        type: Optional
      }, {
        type: Host
      }] }], propDecorators: { ngSwitchCase: [{
        type: Input
      }] } });
      NgSwitchDefault = class _NgSwitchDefault {
        constructor(viewContainer, templateRef, ngSwitch) {
          if ((typeof ngDevMode === "undefined" || ngDevMode) && !ngSwitch) {
            throwNgSwitchProviderNotFoundError("ngSwitchDefault", "NgSwitchDefault");
          }
          ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgSwitchDefault, deps: [{ token: ViewContainerRef }, { token: TemplateRef }, { token: NgSwitch, host: true, optional: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgSwitchDefault, isStandalone: true, selector: "[ngSwitchDefault]", ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgSwitchDefault, decorators: [{
        type: Directive,
        args: [{
          selector: "[ngSwitchDefault]",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: ViewContainerRef }, { type: TemplateRef }, { type: NgSwitch, decorators: [{
        type: Optional
      }, {
        type: Host
      }] }] });
      NgPlural = class _NgPlural {
        constructor(_localization) {
          this._localization = _localization;
          this._caseViews = {};
        }
        set ngPlural(value) {
          this._updateView(value);
        }
        addCase(value, switchView) {
          this._caseViews[value] = switchView;
        }
        _updateView(switchValue) {
          this._clearViews();
          const cases = Object.keys(this._caseViews);
          const key = getPluralCategory(switchValue, cases, this._localization);
          this._activateView(this._caseViews[key]);
        }
        _clearViews() {
          if (this._activeView)
            this._activeView.destroy();
        }
        _activateView(view) {
          if (view) {
            this._activeView = view;
            this._activeView.create();
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgPlural, deps: [{ token: NgLocalization }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgPlural, isStandalone: true, selector: "[ngPlural]", inputs: { ngPlural: "ngPlural" }, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgPlural, decorators: [{
        type: Directive,
        args: [{
          selector: "[ngPlural]",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: NgLocalization }], propDecorators: { ngPlural: [{
        type: Input
      }] } });
      NgPluralCase = class _NgPluralCase {
        constructor(value, template2, viewContainer, ngPlural) {
          this.value = value;
          const isANumber = !isNaN(Number(value));
          ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template2));
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgPluralCase, deps: [{ token: "ngPluralCase", attribute: true }, { token: TemplateRef }, { token: ViewContainerRef }, { token: NgPlural, host: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgPluralCase, isStandalone: true, selector: "[ngPluralCase]", ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgPluralCase, decorators: [{
        type: Directive,
        args: [{
          selector: "[ngPluralCase]",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Attribute,
        args: ["ngPluralCase"]
      }] }, { type: TemplateRef }, { type: ViewContainerRef }, { type: NgPlural, decorators: [{
        type: Host
      }] }] });
      NgStyle = class _NgStyle {
        constructor(_ngEl, _differs, _renderer) {
          this._ngEl = _ngEl;
          this._differs = _differs;
          this._renderer = _renderer;
          this._ngStyle = null;
          this._differ = null;
        }
        set ngStyle(values) {
          this._ngStyle = values;
          if (!this._differ && values) {
            this._differ = this._differs.find(values).create();
          }
        }
        ngDoCheck() {
          if (this._differ) {
            const changes = this._differ.diff(this._ngStyle);
            if (changes) {
              this._applyChanges(changes);
            }
          }
        }
        _setStyle(nameAndUnit, value) {
          const [name, unit] = nameAndUnit.split(".");
          const flags = name.indexOf("-") === -1 ? void 0 : RendererStyleFlags2.DashCase;
          if (value != null) {
            this._renderer.setStyle(this._ngEl.nativeElement, name, unit ? `${value}${unit}` : value, flags);
          } else {
            this._renderer.removeStyle(this._ngEl.nativeElement, name, flags);
          }
        }
        _applyChanges(changes) {
          changes.forEachRemovedItem((record) => this._setStyle(record.key, null));
          changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));
          changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgStyle, deps: [{ token: ElementRef }, { token: KeyValueDiffers }, { token: Renderer2 }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgStyle, isStandalone: true, selector: "[ngStyle]", inputs: { ngStyle: "ngStyle" }, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgStyle, decorators: [{
        type: Directive,
        args: [{
          selector: "[ngStyle]",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: ElementRef }, { type: KeyValueDiffers }, { type: Renderer2 }], propDecorators: { ngStyle: [{
        type: Input,
        args: ["ngStyle"]
      }] } });
      NgTemplateOutlet = class _NgTemplateOutlet {
        constructor(_viewContainerRef) {
          this._viewContainerRef = _viewContainerRef;
          this._viewRef = null;
          this.ngTemplateOutletContext = null;
          this.ngTemplateOutlet = null;
          this.ngTemplateOutletInjector = null;
        }
        ngOnChanges(changes) {
          if (this._shouldRecreateView(changes)) {
            const viewContainerRef = this._viewContainerRef;
            if (this._viewRef) {
              viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));
            }
            if (!this.ngTemplateOutlet) {
              this._viewRef = null;
              return;
            }
            const viewContext = this._createContextForwardProxy();
            this._viewRef = viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, viewContext, {
              injector: this.ngTemplateOutletInjector ?? void 0
            });
          }
        }
        /**
         * We need to re-create existing embedded view if either is true:
         * - the outlet changed.
         * - the injector changed.
         */
        _shouldRecreateView(changes) {
          return !!changes["ngTemplateOutlet"] || !!changes["ngTemplateOutletInjector"];
        }
        /**
         * For a given outlet instance, we create a proxy object that delegates
         * to the user-specified context. This allows changing, or swapping out
         * the context object completely without having to destroy/re-create the view.
         */
        _createContextForwardProxy() {
          return new Proxy({}, {
            set: (_target, prop, newValue) => {
              if (!this.ngTemplateOutletContext) {
                return false;
              }
              return Reflect.set(this.ngTemplateOutletContext, prop, newValue);
            },
            get: (_target, prop, receiver) => {
              if (!this.ngTemplateOutletContext) {
                return void 0;
              }
              return Reflect.get(this.ngTemplateOutletContext, prop, receiver);
            }
          });
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgTemplateOutlet, deps: [{ token: ViewContainerRef }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgTemplateOutlet, isStandalone: true, selector: "[ngTemplateOutlet]", inputs: { ngTemplateOutletContext: "ngTemplateOutletContext", ngTemplateOutlet: "ngTemplateOutlet", ngTemplateOutletInjector: "ngTemplateOutletInjector" }, usesOnChanges: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgTemplateOutlet, decorators: [{
        type: Directive,
        args: [{
          selector: "[ngTemplateOutlet]",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: ViewContainerRef }], propDecorators: { ngTemplateOutletContext: [{
        type: Input
      }], ngTemplateOutlet: [{
        type: Input
      }], ngTemplateOutletInjector: [{
        type: Input
      }] } });
      COMMON_DIRECTIVES = [
        NgClass,
        NgComponentOutlet,
        NgForOf,
        NgIf,
        NgTemplateOutlet,
        NgStyle,
        NgSwitch,
        NgSwitchCase,
        NgSwitchDefault,
        NgPlural,
        NgPluralCase
      ];
      SubscribableStrategy = class {
        createSubscription(async, updateLatestValue) {
          return untracked(() => async.subscribe({
            next: updateLatestValue,
            error: (e2) => {
              throw e2;
            }
          }));
        }
        dispose(subscription) {
          untracked(() => subscription.unsubscribe());
        }
      };
      PromiseStrategy = class {
        createSubscription(async, updateLatestValue) {
          return async.then(updateLatestValue, (e2) => {
            throw e2;
          });
        }
        dispose(subscription) {
        }
      };
      _promiseStrategy = new PromiseStrategy();
      _subscribableStrategy = new SubscribableStrategy();
      AsyncPipe = class _AsyncPipe {
        constructor(ref) {
          this._latestValue = null;
          this.markForCheckOnValueUpdate = true;
          this._subscription = null;
          this._obj = null;
          this._strategy = null;
          this._ref = ref;
        }
        ngOnDestroy() {
          if (this._subscription) {
            this._dispose();
          }
          this._ref = null;
        }
        transform(obj) {
          if (!this._obj) {
            if (obj) {
              try {
                this.markForCheckOnValueUpdate = false;
                this._subscribe(obj);
              } finally {
                this.markForCheckOnValueUpdate = true;
              }
            }
            return this._latestValue;
          }
          if (obj !== this._obj) {
            this._dispose();
            return this.transform(obj);
          }
          return this._latestValue;
        }
        _subscribe(obj) {
          this._obj = obj;
          this._strategy = this._selectStrategy(obj);
          this._subscription = this._strategy.createSubscription(obj, (value) => this._updateLatestValue(obj, value));
        }
        _selectStrategy(obj) {
          if (isPromise2(obj)) {
            return _promiseStrategy;
          }
          if (isSubscribable(obj)) {
            return _subscribableStrategy;
          }
          throw invalidPipeArgumentError(_AsyncPipe, obj);
        }
        _dispose() {
          this._strategy.dispose(this._subscription);
          this._latestValue = null;
          this._subscription = null;
          this._obj = null;
        }
        _updateLatestValue(async, value) {
          if (async === this._obj) {
            this._latestValue = value;
            if (this.markForCheckOnValueUpdate) {
              this._ref?.markForCheck();
            }
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _AsyncPipe, deps: [{ token: ChangeDetectorRef }], target: FactoryTarget.Pipe });
        }
        static {
          this.\u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _AsyncPipe, isStandalone: true, name: "async", pure: false });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: AsyncPipe, decorators: [{
        type: Pipe,
        args: [{
          name: "async",
          pure: false,
          standalone: true
        }]
      }], ctorParameters: () => [{ type: ChangeDetectorRef }] });
      LowerCasePipe = class _LowerCasePipe {
        transform(value) {
          if (value == null)
            return null;
          if (typeof value !== "string") {
            throw invalidPipeArgumentError(_LowerCasePipe, value);
          }
          return value.toLowerCase();
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _LowerCasePipe, deps: [], target: FactoryTarget.Pipe });
        }
        static {
          this.\u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _LowerCasePipe, isStandalone: true, name: "lowercase" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: LowerCasePipe, decorators: [{
        type: Pipe,
        args: [{
          name: "lowercase",
          standalone: true
        }]
      }] });
      unicodeWordMatch = /(?:[0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])\S*/g;
      TitleCasePipe = class _TitleCasePipe {
        transform(value) {
          if (value == null)
            return null;
          if (typeof value !== "string") {
            throw invalidPipeArgumentError(_TitleCasePipe, value);
          }
          return value.replace(unicodeWordMatch, (txt) => txt[0].toUpperCase() + txt.slice(1).toLowerCase());
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _TitleCasePipe, deps: [], target: FactoryTarget.Pipe });
        }
        static {
          this.\u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _TitleCasePipe, isStandalone: true, name: "titlecase" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: TitleCasePipe, decorators: [{
        type: Pipe,
        args: [{
          name: "titlecase",
          standalone: true
        }]
      }] });
      UpperCasePipe = class _UpperCasePipe {
        transform(value) {
          if (value == null)
            return null;
          if (typeof value !== "string") {
            throw invalidPipeArgumentError(_UpperCasePipe, value);
          }
          return value.toUpperCase();
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _UpperCasePipe, deps: [], target: FactoryTarget.Pipe });
        }
        static {
          this.\u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _UpperCasePipe, isStandalone: true, name: "uppercase" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: UpperCasePipe, decorators: [{
        type: Pipe,
        args: [{
          name: "uppercase",
          standalone: true
        }]
      }] });
      DEFAULT_DATE_FORMAT = "mediumDate";
      DATE_PIPE_DEFAULT_TIMEZONE = new InjectionToken(ngDevMode ? "DATE_PIPE_DEFAULT_TIMEZONE" : "");
      DATE_PIPE_DEFAULT_OPTIONS = new InjectionToken(ngDevMode ? "DATE_PIPE_DEFAULT_OPTIONS" : "");
      DatePipe = class _DatePipe {
        constructor(locale, defaultTimezone, defaultOptions) {
          this.locale = locale;
          this.defaultTimezone = defaultTimezone;
          this.defaultOptions = defaultOptions;
        }
        transform(value, format, timezone, locale) {
          if (value == null || value === "" || value !== value)
            return null;
          try {
            const _format = format ?? this.defaultOptions?.dateFormat ?? DEFAULT_DATE_FORMAT;
            const _timezone = timezone ?? this.defaultOptions?.timezone ?? this.defaultTimezone ?? void 0;
            return formatDate(value, _format, locale || this.locale, _timezone);
          } catch (error2) {
            throw invalidPipeArgumentError(_DatePipe, error2.message);
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DatePipe, deps: [{ token: LOCALE_ID }, { token: DATE_PIPE_DEFAULT_TIMEZONE, optional: true }, { token: DATE_PIPE_DEFAULT_OPTIONS, optional: true }], target: FactoryTarget.Pipe });
        }
        static {
          this.\u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _DatePipe, isStandalone: true, name: "date" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: DatePipe, decorators: [{
        type: Pipe,
        args: [{
          name: "date",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Inject,
        args: [LOCALE_ID]
      }] }, { type: void 0, decorators: [{
        type: Inject,
        args: [DATE_PIPE_DEFAULT_TIMEZONE]
      }, {
        type: Optional
      }] }, { type: void 0, decorators: [{
        type: Inject,
        args: [DATE_PIPE_DEFAULT_OPTIONS]
      }, {
        type: Optional
      }] }] });
      _INTERPOLATION_REGEXP = /#/g;
      I18nPluralPipe = class _I18nPluralPipe {
        constructor(_localization) {
          this._localization = _localization;
        }
        /**
         * @param value the number to be formatted
         * @param pluralMap an object that mimics the ICU format, see
         * https://unicode-org.github.io/icu/userguide/format_parse/messages/.
         * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by
         * default).
         */
        transform(value, pluralMap, locale) {
          if (value == null)
            return "";
          if (typeof pluralMap !== "object" || pluralMap === null) {
            throw invalidPipeArgumentError(_I18nPluralPipe, pluralMap);
          }
          const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
          return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _I18nPluralPipe, deps: [{ token: NgLocalization }], target: FactoryTarget.Pipe });
        }
        static {
          this.\u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _I18nPluralPipe, isStandalone: true, name: "i18nPlural" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: I18nPluralPipe, decorators: [{
        type: Pipe,
        args: [{
          name: "i18nPlural",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: NgLocalization }] });
      I18nSelectPipe = class _I18nSelectPipe {
        /**
         * @param value a string to be internationalized.
         * @param mapping an object that indicates the text that should be displayed
         * for different values of the provided `value`.
         */
        transform(value, mapping) {
          if (value == null)
            return "";
          if (typeof mapping !== "object" || typeof value !== "string") {
            throw invalidPipeArgumentError(_I18nSelectPipe, mapping);
          }
          if (mapping.hasOwnProperty(value)) {
            return mapping[value];
          }
          if (mapping.hasOwnProperty("other")) {
            return mapping["other"];
          }
          return "";
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _I18nSelectPipe, deps: [], target: FactoryTarget.Pipe });
        }
        static {
          this.\u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _I18nSelectPipe, isStandalone: true, name: "i18nSelect" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: I18nSelectPipe, decorators: [{
        type: Pipe,
        args: [{
          name: "i18nSelect",
          standalone: true
        }]
      }] });
      JsonPipe = class _JsonPipe {
        /**
         * @param value A value of any type to convert into a JSON-format string.
         */
        transform(value) {
          return JSON.stringify(value, null, 2);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _JsonPipe, deps: [], target: FactoryTarget.Pipe });
        }
        static {
          this.\u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _JsonPipe, isStandalone: true, name: "json", pure: false });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: JsonPipe, decorators: [{
        type: Pipe,
        args: [{
          name: "json",
          pure: false,
          standalone: true
        }]
      }] });
      KeyValuePipe = class _KeyValuePipe {
        constructor(differs) {
          this.differs = differs;
          this.keyValues = [];
          this.compareFn = defaultComparator;
        }
        transform(input2, compareFn = defaultComparator) {
          if (!input2 || !(input2 instanceof Map) && typeof input2 !== "object") {
            return null;
          }
          this.differ ??= this.differs.find(input2).create();
          const differChanges = this.differ.diff(input2);
          const compareFnChanged = compareFn !== this.compareFn;
          if (differChanges) {
            this.keyValues = [];
            differChanges.forEachItem((r) => {
              this.keyValues.push(makeKeyValuePair(r.key, r.currentValue));
            });
          }
          if (differChanges || compareFnChanged) {
            this.keyValues.sort(compareFn);
            this.compareFn = compareFn;
          }
          return this.keyValues;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _KeyValuePipe, deps: [{ token: KeyValueDiffers }], target: FactoryTarget.Pipe });
        }
        static {
          this.\u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _KeyValuePipe, isStandalone: true, name: "keyvalue", pure: false });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: KeyValuePipe, decorators: [{
        type: Pipe,
        args: [{
          name: "keyvalue",
          pure: false,
          standalone: true
        }]
      }], ctorParameters: () => [{ type: KeyValueDiffers }] });
      DecimalPipe = class _DecimalPipe {
        constructor(_locale) {
          this._locale = _locale;
        }
        /**
         * @param value The value to be formatted.
         * @param digitsInfo Sets digit and decimal representation.
         * [See more](#digitsinfo).
         * @param locale Specifies what locale format rules to use.
         * [See more](#locale).
         */
        transform(value, digitsInfo, locale) {
          if (!isValue(value))
            return null;
          locale ||= this._locale;
          try {
            const num = strToNumber(value);
            return formatNumber(num, locale, digitsInfo);
          } catch (error2) {
            throw invalidPipeArgumentError(_DecimalPipe, error2.message);
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DecimalPipe, deps: [{ token: LOCALE_ID }], target: FactoryTarget.Pipe });
        }
        static {
          this.\u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _DecimalPipe, isStandalone: true, name: "number" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: DecimalPipe, decorators: [{
        type: Pipe,
        args: [{
          name: "number",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Inject,
        args: [LOCALE_ID]
      }] }] });
      PercentPipe = class _PercentPipe {
        constructor(_locale) {
          this._locale = _locale;
        }
        /**
         *
         * @param value The number to be formatted as a percentage.
         * @param digitsInfo Decimal representation options, specified by a string
         * in the following format:<br>
         * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
         *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
         * Default is `1`.
         *   - `minFractionDigits`: The minimum number of digits after the decimal point.
         * Default is `0`.
         *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
         * Default is `0`.
         * @param locale A locale code for the locale format rules to use.
         * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
         * See [Setting your app locale](guide/i18n-common-locale-id).
         */
        transform(value, digitsInfo, locale) {
          if (!isValue(value))
            return null;
          locale ||= this._locale;
          try {
            const num = strToNumber(value);
            return formatPercent(num, locale, digitsInfo);
          } catch (error2) {
            throw invalidPipeArgumentError(_PercentPipe, error2.message);
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PercentPipe, deps: [{ token: LOCALE_ID }], target: FactoryTarget.Pipe });
        }
        static {
          this.\u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _PercentPipe, isStandalone: true, name: "percent" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: PercentPipe, decorators: [{
        type: Pipe,
        args: [{
          name: "percent",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Inject,
        args: [LOCALE_ID]
      }] }] });
      CurrencyPipe = class _CurrencyPipe {
        constructor(_locale, _defaultCurrencyCode = "USD") {
          this._locale = _locale;
          this._defaultCurrencyCode = _defaultCurrencyCode;
        }
        /**
         *
         * @param value The number to be formatted as currency.
         * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,
         * such as `USD` for the US dollar and `EUR` for the euro. The default currency code can be
         * configured using the `DEFAULT_CURRENCY_CODE` injection token.
         * @param display The format for the currency indicator. One of the following:
         *   - `code`: Show the code (such as `USD`).
         *   - `symbol`(default): Show the symbol (such as `$`).
         *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their
         * currency.
         * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the
         * locale has no narrow symbol, uses the standard symbol for the locale.
         *   - String: Use the given string value instead of a code or a symbol.
         * For example, an empty string will suppress the currency & symbol.
         *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.
         *
         * @param digitsInfo Decimal representation options, specified by a string
         * in the following format:<br>
         * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
         *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
         * Default is `1`.
         *   - `minFractionDigits`: The minimum number of digits after the decimal point.
         * Default is `2`.
         *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
         * Default is `2`.
         * If not provided, the number will be formatted with the proper amount of digits,
         * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.
         * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.
         * @param locale A locale code for the locale format rules to use.
         * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
         * See [Setting your app locale](guide/i18n-common-locale-id).
         */
        transform(value, currencyCode = this._defaultCurrencyCode, display = "symbol", digitsInfo, locale) {
          if (!isValue(value))
            return null;
          locale ||= this._locale;
          if (typeof display === "boolean") {
            if ((typeof ngDevMode === "undefined" || ngDevMode) && console && console.warn) {
              console.warn(`Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are "code", "symbol" or "symbol-narrow".`);
            }
            display = display ? "symbol" : "code";
          }
          let currency = currencyCode || this._defaultCurrencyCode;
          if (display !== "code") {
            if (display === "symbol" || display === "symbol-narrow") {
              currency = getCurrencySymbol(currency, display === "symbol" ? "wide" : "narrow", locale);
            } else {
              currency = display;
            }
          }
          try {
            const num = strToNumber(value);
            return formatCurrency(num, locale, currency, currencyCode, digitsInfo);
          } catch (error2) {
            throw invalidPipeArgumentError(_CurrencyPipe, error2.message);
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _CurrencyPipe, deps: [{ token: LOCALE_ID }, { token: DEFAULT_CURRENCY_CODE }], target: FactoryTarget.Pipe });
        }
        static {
          this.\u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _CurrencyPipe, isStandalone: true, name: "currency" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: CurrencyPipe, decorators: [{
        type: Pipe,
        args: [{
          name: "currency",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Inject,
        args: [LOCALE_ID]
      }] }, { type: void 0, decorators: [{
        type: Inject,
        args: [DEFAULT_CURRENCY_CODE]
      }] }] });
      SlicePipe = class _SlicePipe {
        transform(value, start, end) {
          if (value == null)
            return null;
          if (!this.supports(value)) {
            throw invalidPipeArgumentError(_SlicePipe, value);
          }
          return value.slice(start, end);
        }
        supports(obj) {
          return typeof obj === "string" || Array.isArray(obj);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _SlicePipe, deps: [], target: FactoryTarget.Pipe });
        }
        static {
          this.\u0275pipe = \u0275\u0275ngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _SlicePipe, isStandalone: true, name: "slice", pure: false });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: SlicePipe, decorators: [{
        type: Pipe,
        args: [{
          name: "slice",
          pure: false,
          standalone: true
        }]
      }] });
      COMMON_PIPES = [
        AsyncPipe,
        UpperCasePipe,
        LowerCasePipe,
        JsonPipe,
        SlicePipe,
        DecimalPipe,
        PercentPipe,
        TitleCasePipe,
        CurrencyPipe,
        DatePipe,
        I18nPluralPipe,
        I18nSelectPipe,
        KeyValuePipe
      ];
      CommonModule = class _CommonModule {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _CommonModule, deps: [], target: FactoryTarget.NgModule });
        }
        static {
          this.\u0275mod = \u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _CommonModule, imports: [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe], exports: [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe] });
        }
        static {
          this.\u0275inj = \u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _CommonModule });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: CommonModule, decorators: [{
        type: NgModule,
        args: [{
          imports: [COMMON_DIRECTIVES, COMMON_PIPES],
          exports: [COMMON_DIRECTIVES, COMMON_PIPES]
        }]
      }] });
      PLATFORM_BROWSER_ID = "browser";
      PLATFORM_SERVER_ID = "server";
      VERSION3 = new Version("17.3.5");
      ViewportScroller = class _ViewportScroller {
        static {
          this.\u0275prov = \u0275\u0275defineInjectable({
            token: _ViewportScroller,
            providedIn: "root",
            factory: () => isPlatformBrowser2(inject(PLATFORM_ID)) ? new BrowserViewportScroller(inject(DOCUMENT2), window) : new NullViewportScroller()
          });
        }
      };
      BrowserViewportScroller = class {
        constructor(document2, window2) {
          this.document = document2;
          this.window = window2;
          this.offset = () => [0, 0];
        }
        /**
         * Configures the top offset used when scrolling to an anchor.
         * @param offset A position in screen coordinates (a tuple with x and y values)
         * or a function that returns the top offset position.
         *
         */
        setOffset(offset) {
          if (Array.isArray(offset)) {
            this.offset = () => offset;
          } else {
            this.offset = offset;
          }
        }
        /**
         * Retrieves the current scroll position.
         * @returns The position in screen coordinates.
         */
        getScrollPosition() {
          return [this.window.scrollX, this.window.scrollY];
        }
        /**
         * Sets the scroll position.
         * @param position The new position in screen coordinates.
         */
        scrollToPosition(position) {
          this.window.scrollTo(position[0], position[1]);
        }
        /**
         * Scrolls to an element and attempts to focus the element.
         *
         * Note that the function name here is misleading in that the target string may be an ID for a
         * non-anchor element.
         *
         * @param target The ID of an element or name of the anchor.
         *
         * @see https://html.spec.whatwg.org/#the-indicated-part-of-the-document
         * @see https://html.spec.whatwg.org/#scroll-to-fragid
         */
        scrollToAnchor(target) {
          const elSelected = findAnchorFromDocument(this.document, target);
          if (elSelected) {
            this.scrollToElement(elSelected);
            elSelected.focus();
          }
        }
        /**
         * Disables automatic scroll restoration provided by the browser.
         */
        setHistoryScrollRestoration(scrollRestoration) {
          this.window.history.scrollRestoration = scrollRestoration;
        }
        /**
         * Scrolls to an element using the native offset and the specified offset set on this scroller.
         *
         * The offset can be used when we know that there is a floating header and scrolling naively to an
         * element (ex: `scrollIntoView`) leaves the element hidden behind the floating header.
         */
        scrollToElement(el) {
          const rect = el.getBoundingClientRect();
          const left = rect.left + this.window.pageXOffset;
          const top = rect.top + this.window.pageYOffset;
          const offset = this.offset();
          this.window.scrollTo(left - offset[0], top - offset[1]);
        }
      };
      NullViewportScroller = class {
        /**
         * Empty implementation
         */
        setOffset(offset) {
        }
        /**
         * Empty implementation
         */
        getScrollPosition() {
          return [0, 0];
        }
        /**
         * Empty implementation
         */
        scrollToPosition(position) {
        }
        /**
         * Empty implementation
         */
        scrollToAnchor(anchor) {
        }
        /**
         * Empty implementation
         */
        setHistoryScrollRestoration(scrollRestoration) {
        }
      };
      XhrFactory = class {
      };
      PLACEHOLDER_QUALITY = "20";
      noopImageLoader = (config4) => config4.src;
      IMAGE_LOADER = new InjectionToken(ngDevMode ? "ImageLoader" : "", {
        providedIn: "root",
        factory: () => noopImageLoader
      });
      provideCloudflareLoader = createImageLoader(createCloudflareUrl, ngDevMode ? ["https://<ZONE>/cdn-cgi/image/<OPTIONS>/<SOURCE-IMAGE>"] : void 0);
      cloudinaryLoaderInfo = {
        name: "Cloudinary",
        testUrl: isCloudinaryUrl
      };
      CLOUDINARY_LOADER_REGEX = /https?\:\/\/[^\/]+\.cloudinary\.com\/.+/;
      provideCloudinaryLoader = createImageLoader(createCloudinaryUrl, ngDevMode ? [
        "https://res.cloudinary.com/mysite",
        "https://mysite.cloudinary.com",
        "https://subdomain.mysite.com"
      ] : void 0);
      imageKitLoaderInfo = {
        name: "ImageKit",
        testUrl: isImageKitUrl
      };
      IMAGE_KIT_LOADER_REGEX = /https?\:\/\/[^\/]+\.imagekit\.io\/.+/;
      provideImageKitLoader = createImageLoader(createImagekitUrl, ngDevMode ? ["https://ik.imagekit.io/mysite", "https://subdomain.mysite.com"] : void 0);
      imgixLoaderInfo = {
        name: "Imgix",
        testUrl: isImgixUrl
      };
      IMGIX_LOADER_REGEX = /https?\:\/\/[^\/]+\.imgix\.net\/.+/;
      provideImgixLoader = createImageLoader(createImgixUrl, ngDevMode ? ["https://somepath.imgix.net/"] : void 0);
      netlifyLoaderInfo = {
        name: "Netlify",
        testUrl: isNetlifyUrl
      };
      NETLIFY_LOADER_REGEX = /https?\:\/\/[^\/]+\.netlify\.app\/.+/;
      LCPImageObserver = class _LCPImageObserver {
        constructor() {
          this.images = /* @__PURE__ */ new Map();
          this.window = null;
          this.observer = null;
          assertDevMode("LCP checker");
          const win3 = inject(DOCUMENT2).defaultView;
          if (typeof win3 !== "undefined" && typeof PerformanceObserver !== "undefined") {
            this.window = win3;
            this.observer = this.initPerformanceObserver();
          }
        }
        /**
         * Inits PerformanceObserver and subscribes to LCP events.
         * Based on https://web.dev/lcp/#measure-lcp-in-javascript
         */
        initPerformanceObserver() {
          const observer = new PerformanceObserver((entryList) => {
            const entries = entryList.getEntries();
            if (entries.length === 0)
              return;
            const lcpElement = entries[entries.length - 1];
            const imgSrc = lcpElement.element?.src ?? "";
            if (imgSrc.startsWith("data:") || imgSrc.startsWith("blob:"))
              return;
            const img = this.images.get(imgSrc);
            if (!img)
              return;
            if (!img.priority && !img.alreadyWarnedPriority) {
              img.alreadyWarnedPriority = true;
              logMissingPriorityError(imgSrc);
            }
            if (img.modified && !img.alreadyWarnedModified) {
              img.alreadyWarnedModified = true;
              logModifiedWarning(imgSrc);
            }
          });
          observer.observe({ type: "largest-contentful-paint", buffered: true });
          return observer;
        }
        registerImage(rewrittenSrc, originalNgSrc, isPriority) {
          if (!this.observer)
            return;
          const newObservedImageState = {
            priority: isPriority,
            modified: false,
            alreadyWarnedModified: false,
            alreadyWarnedPriority: false
          };
          this.images.set(getUrl(rewrittenSrc, this.window).href, newObservedImageState);
        }
        unregisterImage(rewrittenSrc) {
          if (!this.observer)
            return;
          this.images.delete(getUrl(rewrittenSrc, this.window).href);
        }
        updateImage(originalSrc, newSrc) {
          const originalUrl = getUrl(originalSrc, this.window).href;
          const img = this.images.get(originalUrl);
          if (img) {
            img.modified = true;
            this.images.set(getUrl(newSrc, this.window).href, img);
            this.images.delete(originalUrl);
          }
        }
        ngOnDestroy() {
          if (!this.observer)
            return;
          this.observer.disconnect();
          this.images.clear();
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _LCPImageObserver, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _LCPImageObserver, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: LCPImageObserver, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], ctorParameters: () => [] });
      INTERNAL_PRECONNECT_CHECK_BLOCKLIST = /* @__PURE__ */ new Set(["localhost", "127.0.0.1", "0.0.0.0"]);
      PRECONNECT_CHECK_BLOCKLIST = new InjectionToken(ngDevMode ? "PRECONNECT_CHECK_BLOCKLIST" : "");
      PreconnectLinkChecker = class _PreconnectLinkChecker {
        constructor() {
          this.document = inject(DOCUMENT2);
          this.preconnectLinks = null;
          this.alreadySeen = /* @__PURE__ */ new Set();
          this.window = null;
          this.blocklist = new Set(INTERNAL_PRECONNECT_CHECK_BLOCKLIST);
          assertDevMode("preconnect link checker");
          const win3 = this.document.defaultView;
          if (typeof win3 !== "undefined") {
            this.window = win3;
          }
          const blocklist = inject(PRECONNECT_CHECK_BLOCKLIST, { optional: true });
          if (blocklist) {
            this.populateBlocklist(blocklist);
          }
        }
        populateBlocklist(origins) {
          if (Array.isArray(origins)) {
            deepForEach2(origins, (origin) => {
              this.blocklist.add(extractHostname(origin));
            });
          } else {
            this.blocklist.add(extractHostname(origins));
          }
        }
        /**
         * Checks that a preconnect resource hint exists in the head for the
         * given src.
         *
         * @param rewrittenSrc src formatted with loader
         * @param originalNgSrc ngSrc value
         */
        assertPreconnect(rewrittenSrc, originalNgSrc) {
          if (!this.window)
            return;
          const imgUrl = getUrl(rewrittenSrc, this.window);
          if (this.blocklist.has(imgUrl.hostname) || this.alreadySeen.has(imgUrl.origin))
            return;
          this.alreadySeen.add(imgUrl.origin);
          this.preconnectLinks ??= this.queryPreconnectLinks();
          if (!this.preconnectLinks.has(imgUrl.origin)) {
            console.warn(formatRuntimeError(2956, `${imgDirectiveDetails(originalNgSrc)} there is no preconnect tag present for this image. Preconnecting to the origin(s) that serve priority images ensures that these images are delivered as soon as possible. To fix this, please add the following element into the <head> of the document:
  <link rel="preconnect" href="${imgUrl.origin}">`));
          }
        }
        queryPreconnectLinks() {
          const preconnectUrls = /* @__PURE__ */ new Set();
          const selector = "link[rel=preconnect]";
          const links = Array.from(this.document.querySelectorAll(selector));
          for (let link of links) {
            const url = getUrl(link.href, this.window);
            preconnectUrls.add(url.origin);
          }
          return preconnectUrls;
        }
        ngOnDestroy() {
          this.preconnectLinks?.clear();
          this.alreadySeen.clear();
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PreconnectLinkChecker, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PreconnectLinkChecker, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: PreconnectLinkChecker, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], ctorParameters: () => [] });
      DEFAULT_PRELOADED_IMAGES_LIMIT = 5;
      PRELOADED_IMAGES = new InjectionToken("NG_OPTIMIZED_PRELOADED_IMAGES", {
        providedIn: "root",
        factory: () => /* @__PURE__ */ new Set()
      });
      PreloadLinkCreator = class _PreloadLinkCreator {
        constructor() {
          this.preloadedImages = inject(PRELOADED_IMAGES);
          this.document = inject(DOCUMENT2);
        }
        /**
         * @description Add a preload `<link>` to the `<head>` of the `index.html` that is served from the
         * server while using Angular Universal and SSR to kick off image loads for high priority images.
         *
         * The `sizes` (passed in from the user) and `srcset` (parsed and formatted from `ngSrcset`)
         * properties used to set the corresponding attributes, `imagesizes` and `imagesrcset`
         * respectively, on the preload `<link>` tag so that the correctly sized image is preloaded from
         * the CDN.
         *
         * {@link https://web.dev/preload-responsive-images/#imagesrcset-and-imagesizes}
         *
         * @param renderer The `Renderer2` passed in from the directive
         * @param src The original src of the image that is set on the `ngSrc` input.
         * @param srcset The parsed and formatted srcset created from the `ngSrcset` input
         * @param sizes The value of the `sizes` attribute passed in to the `<img>` tag
         */
        createPreloadLinkTag(renderer, src, srcset, sizes) {
          if (ngDevMode) {
            if (this.preloadedImages.size >= DEFAULT_PRELOADED_IMAGES_LIMIT) {
              throw new RuntimeError(2961, ngDevMode && `The \`NgOptimizedImage\` directive has detected that more than ${DEFAULT_PRELOADED_IMAGES_LIMIT} images were marked as priority. This might negatively affect an overall performance of the page. To fix this, remove the "priority" attribute from images with less priority.`);
            }
          }
          if (this.preloadedImages.has(src)) {
            return;
          }
          this.preloadedImages.add(src);
          const preload = renderer.createElement("link");
          renderer.setAttribute(preload, "as", "image");
          renderer.setAttribute(preload, "href", src);
          renderer.setAttribute(preload, "rel", "preload");
          renderer.setAttribute(preload, "fetchpriority", "high");
          if (sizes) {
            renderer.setAttribute(preload, "imageSizes", sizes);
          }
          if (srcset) {
            renderer.setAttribute(preload, "imageSrcset", srcset);
          }
          renderer.appendChild(this.document.head, preload);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PreloadLinkCreator, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PreloadLinkCreator, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: PreloadLinkCreator, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }] });
      BASE64_IMG_MAX_LENGTH_IN_ERROR = 50;
      VALID_WIDTH_DESCRIPTOR_SRCSET = /^((\s*\d+w\s*(,|$)){1,})$/;
      VALID_DENSITY_DESCRIPTOR_SRCSET = /^((\s*\d+(\.\d+)?x\s*(,|$)){1,})$/;
      ABSOLUTE_SRCSET_DENSITY_CAP = 3;
      RECOMMENDED_SRCSET_DENSITY_CAP = 2;
      DENSITY_SRCSET_MULTIPLIERS = [1, 2];
      VIEWPORT_BREAKPOINT_CUTOFF = 640;
      ASPECT_RATIO_TOLERANCE = 0.1;
      OVERSIZED_IMAGE_TOLERANCE2 = 1e3;
      FIXED_SRCSET_WIDTH_LIMIT = 1920;
      FIXED_SRCSET_HEIGHT_LIMIT = 1080;
      PLACEHOLDER_BLUR_AMOUNT = 15;
      DATA_URL_WARN_LIMIT = 4e3;
      DATA_URL_ERROR_LIMIT = 1e4;
      BUILT_IN_LOADERS = [
        imgixLoaderInfo,
        imageKitLoaderInfo,
        cloudinaryLoaderInfo,
        netlifyLoaderInfo
      ];
      NgOptimizedImage = class _NgOptimizedImage {
        constructor() {
          this.imageLoader = inject(IMAGE_LOADER);
          this.config = processConfig(inject(IMAGE_CONFIG));
          this.renderer = inject(Renderer2);
          this.imgElement = inject(ElementRef).nativeElement;
          this.injector = inject(Injector);
          this.isServer = isPlatformServer(inject(PLATFORM_ID));
          this.preloadLinkCreator = inject(PreloadLinkCreator);
          this.lcpObserver = ngDevMode ? this.injector.get(LCPImageObserver) : null;
          this._renderedSrc = null;
          this.priority = false;
          this.disableOptimizedSrcset = false;
          this.fill = false;
        }
        /** @nodoc */
        ngOnInit() {
          performanceMarkFeature("NgOptimizedImage");
          if (ngDevMode) {
            const ngZone = this.injector.get(NgZone);
            assertNonEmptyInput(this, "ngSrc", this.ngSrc);
            assertValidNgSrcset(this, this.ngSrcset);
            assertNoConflictingSrc(this);
            if (this.ngSrcset) {
              assertNoConflictingSrcset(this);
            }
            assertNotBase64Image(this);
            assertNotBlobUrl(this);
            if (this.fill) {
              assertEmptyWidthAndHeight(this);
              ngZone.runOutsideAngular(() => assertNonZeroRenderedHeight(this, this.imgElement, this.renderer));
            } else {
              assertNonEmptyWidthAndHeight(this);
              if (this.height !== void 0) {
                assertGreaterThanZero(this, this.height, "height");
              }
              if (this.width !== void 0) {
                assertGreaterThanZero(this, this.width, "width");
              }
              ngZone.runOutsideAngular(() => assertNoImageDistortion(this, this.imgElement, this.renderer));
            }
            assertValidLoadingInput(this);
            if (!this.ngSrcset) {
              assertNoComplexSizes(this);
            }
            assertValidPlaceholder(this, this.imageLoader);
            assertNotMissingBuiltInLoader(this.ngSrc, this.imageLoader);
            assertNoNgSrcsetWithoutLoader(this, this.imageLoader);
            assertNoLoaderParamsWithoutLoader(this, this.imageLoader);
            if (this.lcpObserver !== null) {
              const ngZone2 = this.injector.get(NgZone);
              ngZone2.runOutsideAngular(() => {
                this.lcpObserver.registerImage(this.getRewrittenSrc(), this.ngSrc, this.priority);
              });
            }
            if (this.priority) {
              const checker = this.injector.get(PreconnectLinkChecker);
              checker.assertPreconnect(this.getRewrittenSrc(), this.ngSrc);
            }
          }
          if (this.placeholder) {
            this.removePlaceholderOnLoad(this.imgElement);
          }
          this.setHostAttributes();
        }
        setHostAttributes() {
          if (this.fill) {
            this.sizes ||= "100vw";
          } else {
            this.setHostAttribute("width", this.width.toString());
            this.setHostAttribute("height", this.height.toString());
          }
          this.setHostAttribute("loading", this.getLoadingBehavior());
          this.setHostAttribute("fetchpriority", this.getFetchPriority());
          this.setHostAttribute("ng-img", "true");
          const rewrittenSrcset = this.updateSrcAndSrcset();
          if (this.sizes) {
            this.setHostAttribute("sizes", this.sizes);
          }
          if (this.isServer && this.priority) {
            this.preloadLinkCreator.createPreloadLinkTag(this.renderer, this.getRewrittenSrc(), rewrittenSrcset, this.sizes);
          }
        }
        /** @nodoc */
        ngOnChanges(changes) {
          if (ngDevMode) {
            assertNoPostInitInputChange(this, changes, [
              "ngSrcset",
              "width",
              "height",
              "priority",
              "fill",
              "loading",
              "sizes",
              "loaderParams",
              "disableOptimizedSrcset"
            ]);
          }
          if (changes["ngSrc"] && !changes["ngSrc"].isFirstChange()) {
            const oldSrc = this._renderedSrc;
            this.updateSrcAndSrcset(true);
            const newSrc = this._renderedSrc;
            if (this.lcpObserver !== null && oldSrc && newSrc && oldSrc !== newSrc) {
              const ngZone = this.injector.get(NgZone);
              ngZone.runOutsideAngular(() => {
                this.lcpObserver?.updateImage(oldSrc, newSrc);
              });
            }
          }
        }
        callImageLoader(configWithoutCustomParams) {
          let augmentedConfig = configWithoutCustomParams;
          if (this.loaderParams) {
            augmentedConfig.loaderParams = this.loaderParams;
          }
          return this.imageLoader(augmentedConfig);
        }
        getLoadingBehavior() {
          if (!this.priority && this.loading !== void 0) {
            return this.loading;
          }
          return this.priority ? "eager" : "lazy";
        }
        getFetchPriority() {
          return this.priority ? "high" : "auto";
        }
        getRewrittenSrc() {
          if (!this._renderedSrc) {
            const imgConfig = { src: this.ngSrc };
            this._renderedSrc = this.callImageLoader(imgConfig);
          }
          return this._renderedSrc;
        }
        getRewrittenSrcset() {
          const widthSrcSet = VALID_WIDTH_DESCRIPTOR_SRCSET.test(this.ngSrcset);
          const finalSrcs = this.ngSrcset.split(",").filter((src) => src !== "").map((srcStr) => {
            srcStr = srcStr.trim();
            const width = widthSrcSet ? parseFloat(srcStr) : parseFloat(srcStr) * this.width;
            return `${this.callImageLoader({ src: this.ngSrc, width })} ${srcStr}`;
          });
          return finalSrcs.join(", ");
        }
        getAutomaticSrcset() {
          if (this.sizes) {
            return this.getResponsiveSrcset();
          } else {
            return this.getFixedSrcset();
          }
        }
        getResponsiveSrcset() {
          const { breakpoints } = this.config;
          let filteredBreakpoints = breakpoints;
          if (this.sizes?.trim() === "100vw") {
            filteredBreakpoints = breakpoints.filter((bp) => bp >= VIEWPORT_BREAKPOINT_CUTOFF);
          }
          const finalSrcs = filteredBreakpoints.map((bp) => `${this.callImageLoader({ src: this.ngSrc, width: bp })} ${bp}w`);
          return finalSrcs.join(", ");
        }
        updateSrcAndSrcset(forceSrcRecalc = false) {
          if (forceSrcRecalc) {
            this._renderedSrc = null;
          }
          const rewrittenSrc = this.getRewrittenSrc();
          this.setHostAttribute("src", rewrittenSrc);
          let rewrittenSrcset = void 0;
          if (this.ngSrcset) {
            rewrittenSrcset = this.getRewrittenSrcset();
          } else if (this.shouldGenerateAutomaticSrcset()) {
            rewrittenSrcset = this.getAutomaticSrcset();
          }
          if (rewrittenSrcset) {
            this.setHostAttribute("srcset", rewrittenSrcset);
          }
          return rewrittenSrcset;
        }
        getFixedSrcset() {
          const finalSrcs = DENSITY_SRCSET_MULTIPLIERS.map((multiplier) => `${this.callImageLoader({
            src: this.ngSrc,
            width: this.width * multiplier
          })} ${multiplier}x`);
          return finalSrcs.join(", ");
        }
        shouldGenerateAutomaticSrcset() {
          let oversizedImage = false;
          if (!this.sizes) {
            oversizedImage = this.width > FIXED_SRCSET_WIDTH_LIMIT || this.height > FIXED_SRCSET_HEIGHT_LIMIT;
          }
          return !this.disableOptimizedSrcset && !this.srcset && this.imageLoader !== noopImageLoader && !oversizedImage;
        }
        /**
         * Returns an image url formatted for use with the CSS background-image property. Expects one of:
         * * A base64 encoded image, which is wrapped and passed through.
         * * A boolean. If true, calls the image loader to generate a small placeholder url.
         */
        generatePlaceholder(placeholderInput) {
          const { placeholderResolution } = this.config;
          if (placeholderInput === true) {
            return `url(${this.callImageLoader({
              src: this.ngSrc,
              width: placeholderResolution,
              isPlaceholder: true
            })})`;
          } else if (typeof placeholderInput === "string" && placeholderInput.startsWith("data:")) {
            return `url(${placeholderInput})`;
          }
          return null;
        }
        /**
         * Determines if blur should be applied, based on an optional boolean
         * property `blur` within the optional configuration object `placeholderConfig`.
         */
        shouldBlurPlaceholder(placeholderConfig) {
          if (!placeholderConfig || !placeholderConfig.hasOwnProperty("blur")) {
            return true;
          }
          return Boolean(placeholderConfig.blur);
        }
        removePlaceholderOnLoad(img) {
          const callback = () => {
            const changeDetectorRef = this.injector.get(ChangeDetectorRef);
            removeLoadListenerFn();
            removeErrorListenerFn();
            this.placeholder = false;
            changeDetectorRef.markForCheck();
          };
          const removeLoadListenerFn = this.renderer.listen(img, "load", callback);
          const removeErrorListenerFn = this.renderer.listen(img, "error", callback);
        }
        /** @nodoc */
        ngOnDestroy() {
          if (ngDevMode) {
            if (!this.priority && this._renderedSrc !== null && this.lcpObserver !== null) {
              this.lcpObserver.unregisterImage(this._renderedSrc);
            }
          }
        }
        setHostAttribute(name, value) {
          this.renderer.setAttribute(this.imgElement, name, value);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgOptimizedImage, deps: [], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "16.1.0", version: "17.3.5", type: _NgOptimizedImage, isStandalone: true, selector: "img[ngSrc]", inputs: { ngSrc: ["ngSrc", "ngSrc", unwrapSafeUrl], ngSrcset: "ngSrcset", sizes: "sizes", width: ["width", "width", numberAttribute], height: ["height", "height", numberAttribute], loading: "loading", priority: ["priority", "priority", booleanAttribute], loaderParams: "loaderParams", disableOptimizedSrcset: ["disableOptimizedSrcset", "disableOptimizedSrcset", booleanAttribute], fill: ["fill", "fill", booleanAttribute], placeholder: ["placeholder", "placeholder", booleanOrDataUrlAttribute], placeholderConfig: "placeholderConfig", src: "src", srcset: "srcset" }, host: { properties: { "style.position": 'fill ? "absolute" : null', "style.width": 'fill ? "100%" : null', "style.height": 'fill ? "100%" : null', "style.inset": 'fill ? "0" : null', "style.background-size": 'placeholder ? "cover" : null', "style.background-position": 'placeholder ? "50% 50%" : null', "style.background-repeat": 'placeholder ? "no-repeat" : null', "style.background-image": "placeholder ? generatePlaceholder(placeholder) : null", "style.filter": 'placeholder && shouldBlurPlaceholder(placeholderConfig) ? "blur(15px)" : null' } }, usesOnChanges: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgOptimizedImage, decorators: [{
        type: Directive,
        args: [{
          standalone: true,
          selector: "img[ngSrc]",
          host: {
            "[style.position]": 'fill ? "absolute" : null',
            "[style.width]": 'fill ? "100%" : null',
            "[style.height]": 'fill ? "100%" : null',
            "[style.inset]": 'fill ? "0" : null',
            "[style.background-size]": 'placeholder ? "cover" : null',
            "[style.background-position]": 'placeholder ? "50% 50%" : null',
            "[style.background-repeat]": 'placeholder ? "no-repeat" : null',
            "[style.background-image]": "placeholder ? generatePlaceholder(placeholder) : null",
            "[style.filter]": `placeholder && shouldBlurPlaceholder(placeholderConfig) ? "blur(${PLACEHOLDER_BLUR_AMOUNT}px)" : null`
          }
        }]
      }], propDecorators: { ngSrc: [{
        type: Input,
        args: [{ required: true, transform: unwrapSafeUrl }]
      }], ngSrcset: [{
        type: Input
      }], sizes: [{
        type: Input
      }], width: [{
        type: Input,
        args: [{ transform: numberAttribute }]
      }], height: [{
        type: Input,
        args: [{ transform: numberAttribute }]
      }], loading: [{
        type: Input
      }], priority: [{
        type: Input,
        args: [{ transform: booleanAttribute }]
      }], loaderParams: [{
        type: Input
      }], disableOptimizedSrcset: [{
        type: Input,
        args: [{ transform: booleanAttribute }]
      }], fill: [{
        type: Input,
        args: [{ transform: booleanAttribute }]
      }], placeholder: [{
        type: Input,
        args: [{ transform: booleanOrDataUrlAttribute }]
      }], placeholderConfig: [{
        type: Input
      }], src: [{
        type: Input
      }], srcset: [{
        type: Input
      }] } });
    }
  });

  // node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs
  function getBaseElementHref() {
    baseElement = baseElement || document.querySelector("base");
    return baseElement ? baseElement.getAttribute("href") : null;
  }
  function relativePath(url) {
    return new URL(url, document.baseURI).pathname;
  }
  function shimContentAttribute(componentShortId) {
    return CONTENT_ATTR2.replace(COMPONENT_REGEX, componentShortId);
  }
  function shimHostAttribute(componentShortId) {
    return HOST_ATTR2.replace(COMPONENT_REGEX, componentShortId);
  }
  function shimStylesContent(compId, styles2) {
    return styles2.map((s) => s.replace(COMPONENT_REGEX, compId));
  }
  function checkNoSyntheticProp(name, nameKind) {
    if (name.charCodeAt(0) === AT_CHARCODE) {
      throw new RuntimeError(5105, `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:
  - Either \`BrowserAnimationsModule\` or \`NoopAnimationsModule\` are imported in your application.
  - There is corresponding configuration for the animation named \`${name}\` defined in the \`animations\` field of the \`@Component\` decorator (see https://angular.io/api/core/Component#animations).`);
    }
  }
  function isTemplateNode(node) {
    return node.tagName === "TEMPLATE" && node.content !== void 0;
  }
  function initDomAdapter() {
    BrowserDomAdapter.makeCurrent();
  }
  function errorHandler() {
    return new ErrorHandler();
  }
  function _document() {
    setDocument(document);
    return document;
  }
  var GenericBrowserDomAdapter, BrowserDomAdapter, baseElement, BrowserGetTestability, BrowserXhr, EVENT_MANAGER_PLUGINS, EventManager, EventManagerPlugin, APP_ID_ATTRIBUTE_NAME, SharedStylesHost, NAMESPACE_URIS, COMPONENT_REGEX, COMPONENT_VARIABLE2, HOST_ATTR2, CONTENT_ATTR2, REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT, REMOVE_STYLES_ON_COMPONENT_DESTROY, DomRendererFactory2, DefaultDomRenderer2, AT_CHARCODE, ShadowDomRenderer, NoneEncapsulationDomRenderer, EmulatedEncapsulationDomRenderer2, DomEventsPlugin, MODIFIER_KEYS, _keyMap, MODIFIER_KEY_GETTERS, KeyEventsPlugin, INTERNAL_BROWSER_PLATFORM_PROVIDERS, platformBrowser, BROWSER_MODULE_PROVIDERS_MARKER, TESTABILITY_PROVIDERS, BROWSER_MODULE_PROVIDERS, BrowserModule, Meta, META_KEYS_MAP, Title, EVENT_NAMES, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerGesturesPlugin, HammerModule, DomSanitizer, DomSanitizerImpl, HydrationFeatureKind, VERSION4;
  var init_platform_browser = __esm({
    "node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs"() {
      init_core();
      init_core();
      init_common();
      GenericBrowserDomAdapter = class extends DomAdapter {
        constructor() {
          super(...arguments);
          this.supportsDOMEvents = true;
        }
      };
      BrowserDomAdapter = class _BrowserDomAdapter extends GenericBrowserDomAdapter {
        static makeCurrent() {
          setRootDomAdapter(new _BrowserDomAdapter());
        }
        onAndCancel(el, evt, listener2) {
          el.addEventListener(evt, listener2);
          return () => {
            el.removeEventListener(evt, listener2);
          };
        }
        dispatchEvent(el, evt) {
          el.dispatchEvent(evt);
        }
        remove(node) {
          if (node.parentNode) {
            node.parentNode.removeChild(node);
          }
        }
        createElement(tagName, doc3) {
          doc3 = doc3 || this.getDefaultDocument();
          return doc3.createElement(tagName);
        }
        createHtmlDocument() {
          return document.implementation.createHTMLDocument("fakeTitle");
        }
        getDefaultDocument() {
          return document;
        }
        isElementNode(node) {
          return node.nodeType === Node.ELEMENT_NODE;
        }
        isShadowRoot(node) {
          return node instanceof DocumentFragment;
        }
        /** @deprecated No longer being used in Ivy code. To be removed in version 14. */
        getGlobalEventTarget(doc3, target) {
          if (target === "window") {
            return window;
          }
          if (target === "document") {
            return doc3;
          }
          if (target === "body") {
            return doc3.body;
          }
          return null;
        }
        getBaseHref(doc3) {
          const href = getBaseElementHref();
          return href == null ? null : relativePath(href);
        }
        resetBaseElement() {
          baseElement = null;
        }
        getUserAgent() {
          return window.navigator.userAgent;
        }
        getCookie(name) {
          return parseCookieValue(document.cookie, name);
        }
      };
      baseElement = null;
      BrowserGetTestability = class {
        addToWindow(registry) {
          _global["getAngularTestability"] = (elem, findInAncestors = true) => {
            const testability = registry.findTestabilityInTree(elem, findInAncestors);
            if (testability == null) {
              throw new RuntimeError(5103, (typeof ngDevMode === "undefined" || ngDevMode) && "Could not find testability for element.");
            }
            return testability;
          };
          _global["getAllAngularTestabilities"] = () => registry.getAllTestabilities();
          _global["getAllAngularRootElements"] = () => registry.getAllRootElements();
          const whenAllStable = (callback) => {
            const testabilities = _global["getAllAngularTestabilities"]();
            let count = testabilities.length;
            const decrement = function() {
              count--;
              if (count == 0) {
                callback();
              }
            };
            testabilities.forEach((testability) => {
              testability.whenStable(decrement);
            });
          };
          if (!_global["frameworkStabilizers"]) {
            _global["frameworkStabilizers"] = [];
          }
          _global["frameworkStabilizers"].push(whenAllStable);
        }
        findTestabilityInTree(registry, elem, findInAncestors) {
          if (elem == null) {
            return null;
          }
          const t = registry.getTestability(elem);
          if (t != null) {
            return t;
          } else if (!findInAncestors) {
            return null;
          }
          if (getDOM().isShadowRoot(elem)) {
            return this.findTestabilityInTree(registry, elem.host, true);
          }
          return this.findTestabilityInTree(registry, elem.parentElement, true);
        }
      };
      BrowserXhr = class _BrowserXhr {
        build() {
          return new XMLHttpRequest();
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _BrowserXhr, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _BrowserXhr });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: BrowserXhr, decorators: [{
        type: Injectable
      }] });
      EVENT_MANAGER_PLUGINS = new InjectionToken(ngDevMode ? "EventManagerPlugins" : "");
      EventManager = class _EventManager {
        /**
         * Initializes an instance of the event-manager service.
         */
        constructor(plugins, _zone) {
          this._zone = _zone;
          this._eventNameToPlugin = /* @__PURE__ */ new Map();
          plugins.forEach((plugin) => {
            plugin.manager = this;
          });
          this._plugins = plugins.slice().reverse();
        }
        /**
         * Registers a handler for a specific element and event.
         *
         * @param element The HTML element to receive event notifications.
         * @param eventName The name of the event to listen for.
         * @param handler A function to call when the notification occurs. Receives the
         * event object as an argument.
         * @returns  A callback function that can be used to remove the handler.
         */
        addEventListener(element2, eventName, handler) {
          const plugin = this._findPluginFor(eventName);
          return plugin.addEventListener(element2, eventName, handler);
        }
        /**
         * Retrieves the compilation zone in which event listeners are registered.
         */
        getZone() {
          return this._zone;
        }
        /** @internal */
        _findPluginFor(eventName) {
          let plugin = this._eventNameToPlugin.get(eventName);
          if (plugin) {
            return plugin;
          }
          const plugins = this._plugins;
          plugin = plugins.find((plugin2) => plugin2.supports(eventName));
          if (!plugin) {
            throw new RuntimeError(5101, (typeof ngDevMode === "undefined" || ngDevMode) && `No event manager plugin found for event ${eventName}`);
          }
          this._eventNameToPlugin.set(eventName, plugin);
          return plugin;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _EventManager, deps: [{ token: EVENT_MANAGER_PLUGINS }, { token: NgZone }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _EventManager });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: EventManager, decorators: [{
        type: Injectable
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Inject,
        args: [EVENT_MANAGER_PLUGINS]
      }] }, { type: NgZone }] });
      EventManagerPlugin = class {
        // TODO: remove (has some usage in G3)
        constructor(_doc) {
          this._doc = _doc;
        }
      };
      APP_ID_ATTRIBUTE_NAME = "ng-app-id";
      SharedStylesHost = class _SharedStylesHost {
        constructor(doc3, appId, nonce, platformId = {}) {
          this.doc = doc3;
          this.appId = appId;
          this.nonce = nonce;
          this.platformId = platformId;
          this.styleRef = /* @__PURE__ */ new Map();
          this.hostNodes = /* @__PURE__ */ new Set();
          this.styleNodesInDOM = this.collectServerRenderedStyles();
          this.platformIsServer = isPlatformServer(platformId);
          this.resetHostNodes();
        }
        addStyles(styles2) {
          for (const style of styles2) {
            const usageCount = this.changeUsageCount(style, 1);
            if (usageCount === 1) {
              this.onStyleAdded(style);
            }
          }
        }
        removeStyles(styles2) {
          for (const style of styles2) {
            const usageCount = this.changeUsageCount(style, -1);
            if (usageCount <= 0) {
              this.onStyleRemoved(style);
            }
          }
        }
        ngOnDestroy() {
          const styleNodesInDOM = this.styleNodesInDOM;
          if (styleNodesInDOM) {
            styleNodesInDOM.forEach((node) => node.remove());
            styleNodesInDOM.clear();
          }
          for (const style of this.getAllStyles()) {
            this.onStyleRemoved(style);
          }
          this.resetHostNodes();
        }
        addHost(hostNode) {
          this.hostNodes.add(hostNode);
          for (const style of this.getAllStyles()) {
            this.addStyleToHost(hostNode, style);
          }
        }
        removeHost(hostNode) {
          this.hostNodes.delete(hostNode);
        }
        getAllStyles() {
          return this.styleRef.keys();
        }
        onStyleAdded(style) {
          for (const host of this.hostNodes) {
            this.addStyleToHost(host, style);
          }
        }
        onStyleRemoved(style) {
          const styleRef = this.styleRef;
          styleRef.get(style)?.elements?.forEach((node) => node.remove());
          styleRef.delete(style);
        }
        collectServerRenderedStyles() {
          const styles2 = this.doc.head?.querySelectorAll(`style[${APP_ID_ATTRIBUTE_NAME}="${this.appId}"]`);
          if (styles2?.length) {
            const styleMap2 = /* @__PURE__ */ new Map();
            styles2.forEach((style) => {
              if (style.textContent != null) {
                styleMap2.set(style.textContent, style);
              }
            });
            return styleMap2;
          }
          return null;
        }
        changeUsageCount(style, delta) {
          const map3 = this.styleRef;
          if (map3.has(style)) {
            const styleRefValue = map3.get(style);
            styleRefValue.usage += delta;
            return styleRefValue.usage;
          }
          map3.set(style, { usage: delta, elements: [] });
          return delta;
        }
        getStyleElement(host, style) {
          const styleNodesInDOM = this.styleNodesInDOM;
          const styleEl = styleNodesInDOM?.get(style);
          if (styleEl?.parentNode === host) {
            styleNodesInDOM.delete(style);
            styleEl.removeAttribute(APP_ID_ATTRIBUTE_NAME);
            if (typeof ngDevMode === "undefined" || ngDevMode) {
              styleEl.setAttribute("ng-style-reused", "");
            }
            return styleEl;
          } else {
            const styleEl2 = this.doc.createElement("style");
            if (this.nonce) {
              styleEl2.setAttribute("nonce", this.nonce);
            }
            styleEl2.textContent = style;
            if (this.platformIsServer) {
              styleEl2.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);
            }
            host.appendChild(styleEl2);
            return styleEl2;
          }
        }
        addStyleToHost(host, style) {
          const styleEl = this.getStyleElement(host, style);
          const styleRef = this.styleRef;
          const styleElRef = styleRef.get(style)?.elements;
          if (styleElRef) {
            styleElRef.push(styleEl);
          } else {
            styleRef.set(style, { elements: [styleEl], usage: 1 });
          }
        }
        resetHostNodes() {
          const hostNodes = this.hostNodes;
          hostNodes.clear();
          hostNodes.add(this.doc.head);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _SharedStylesHost, deps: [{ token: DOCUMENT2 }, { token: APP_ID }, { token: CSP_NONCE, optional: true }, { token: PLATFORM_ID }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _SharedStylesHost });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: SharedStylesHost, decorators: [{
        type: Injectable
      }], ctorParameters: () => [{ type: Document, decorators: [{
        type: Inject,
        args: [DOCUMENT2]
      }] }, { type: void 0, decorators: [{
        type: Inject,
        args: [APP_ID]
      }] }, { type: void 0, decorators: [{
        type: Inject,
        args: [CSP_NONCE]
      }, {
        type: Optional
      }] }, { type: void 0, decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }] }] });
      NAMESPACE_URIS = {
        "svg": "http://www.w3.org/2000/svg",
        "xhtml": "http://www.w3.org/1999/xhtml",
        "xlink": "http://www.w3.org/1999/xlink",
        "xml": "http://www.w3.org/XML/1998/namespace",
        "xmlns": "http://www.w3.org/2000/xmlns/",
        "math": "http://www.w3.org/1998/MathML/"
      };
      COMPONENT_REGEX = /%COMP%/g;
      COMPONENT_VARIABLE2 = "%COMP%";
      HOST_ATTR2 = `_nghost-${COMPONENT_VARIABLE2}`;
      CONTENT_ATTR2 = `_ngcontent-${COMPONENT_VARIABLE2}`;
      REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;
      REMOVE_STYLES_ON_COMPONENT_DESTROY = new InjectionToken(ngDevMode ? "RemoveStylesOnCompDestroy" : "", {
        providedIn: "root",
        factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT
      });
      DomRendererFactory2 = class _DomRendererFactory2 {
        constructor(eventManager, sharedStylesHost, appId, removeStylesOnCompDestroy, doc3, platformId, ngZone, nonce = null) {
          this.eventManager = eventManager;
          this.sharedStylesHost = sharedStylesHost;
          this.appId = appId;
          this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;
          this.doc = doc3;
          this.platformId = platformId;
          this.ngZone = ngZone;
          this.nonce = nonce;
          this.rendererByCompId = /* @__PURE__ */ new Map();
          this.platformIsServer = isPlatformServer(platformId);
          this.defaultRenderer = new DefaultDomRenderer2(eventManager, doc3, ngZone, this.platformIsServer);
        }
        createRenderer(element2, type) {
          if (!element2 || !type) {
            return this.defaultRenderer;
          }
          if (this.platformIsServer && type.encapsulation === ViewEncapsulation$1.ShadowDom) {
            type = { ...type, encapsulation: ViewEncapsulation$1.Emulated };
          }
          const renderer = this.getOrCreateRenderer(element2, type);
          if (renderer instanceof EmulatedEncapsulationDomRenderer2) {
            renderer.applyToHost(element2);
          } else if (renderer instanceof NoneEncapsulationDomRenderer) {
            renderer.applyStyles();
          }
          return renderer;
        }
        getOrCreateRenderer(element2, type) {
          const rendererByCompId = this.rendererByCompId;
          let renderer = rendererByCompId.get(type.id);
          if (!renderer) {
            const doc3 = this.doc;
            const ngZone = this.ngZone;
            const eventManager = this.eventManager;
            const sharedStylesHost = this.sharedStylesHost;
            const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;
            const platformIsServer = this.platformIsServer;
            switch (type.encapsulation) {
              case ViewEncapsulation$1.Emulated:
                renderer = new EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc3, ngZone, platformIsServer);
                break;
              case ViewEncapsulation$1.ShadowDom:
                return new ShadowDomRenderer(eventManager, sharedStylesHost, element2, type, doc3, ngZone, this.nonce, platformIsServer);
              default:
                renderer = new NoneEncapsulationDomRenderer(eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc3, ngZone, platformIsServer);
                break;
            }
            rendererByCompId.set(type.id, renderer);
          }
          return renderer;
        }
        ngOnDestroy() {
          this.rendererByCompId.clear();
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DomRendererFactory2, deps: [{ token: EventManager }, { token: SharedStylesHost }, { token: APP_ID }, { token: REMOVE_STYLES_ON_COMPONENT_DESTROY }, { token: DOCUMENT2 }, { token: PLATFORM_ID }, { token: NgZone }, { token: CSP_NONCE }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DomRendererFactory2 });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: DomRendererFactory2, decorators: [{
        type: Injectable
      }], ctorParameters: () => [{ type: EventManager }, { type: SharedStylesHost }, { type: void 0, decorators: [{
        type: Inject,
        args: [APP_ID]
      }] }, { type: void 0, decorators: [{
        type: Inject,
        args: [REMOVE_STYLES_ON_COMPONENT_DESTROY]
      }] }, { type: Document, decorators: [{
        type: Inject,
        args: [DOCUMENT2]
      }] }, { type: Object, decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }] }, { type: NgZone }, { type: void 0, decorators: [{
        type: Inject,
        args: [CSP_NONCE]
      }] }] });
      DefaultDomRenderer2 = class {
        constructor(eventManager, doc3, ngZone, platformIsServer) {
          this.eventManager = eventManager;
          this.doc = doc3;
          this.ngZone = ngZone;
          this.platformIsServer = platformIsServer;
          this.data = /* @__PURE__ */ Object.create(null);
          this.throwOnSyntheticProps = true;
          this.destroyNode = null;
        }
        destroy() {
        }
        createElement(name, namespace) {
          if (namespace) {
            return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
          }
          return this.doc.createElement(name);
        }
        createComment(value) {
          return this.doc.createComment(value);
        }
        createText(value) {
          return this.doc.createTextNode(value);
        }
        appendChild(parent, newChild) {
          const targetParent = isTemplateNode(parent) ? parent.content : parent;
          targetParent.appendChild(newChild);
        }
        insertBefore(parent, newChild, refChild) {
          if (parent) {
            const targetParent = isTemplateNode(parent) ? parent.content : parent;
            targetParent.insertBefore(newChild, refChild);
          }
        }
        removeChild(parent, oldChild) {
          if (parent) {
            parent.removeChild(oldChild);
          }
        }
        selectRootElement(selectorOrNode, preserveContent) {
          let el = typeof selectorOrNode === "string" ? this.doc.querySelector(selectorOrNode) : selectorOrNode;
          if (!el) {
            throw new RuntimeError(-5104, (typeof ngDevMode === "undefined" || ngDevMode) && `The selector "${selectorOrNode}" did not match any elements`);
          }
          if (!preserveContent) {
            el.textContent = "";
          }
          return el;
        }
        parentNode(node) {
          return node.parentNode;
        }
        nextSibling(node) {
          return node.nextSibling;
        }
        setAttribute(el, name, value, namespace) {
          if (namespace) {
            name = namespace + ":" + name;
            const namespaceUri = NAMESPACE_URIS[namespace];
            if (namespaceUri) {
              el.setAttributeNS(namespaceUri, name, value);
            } else {
              el.setAttribute(name, value);
            }
          } else {
            el.setAttribute(name, value);
          }
        }
        removeAttribute(el, name, namespace) {
          if (namespace) {
            const namespaceUri = NAMESPACE_URIS[namespace];
            if (namespaceUri) {
              el.removeAttributeNS(namespaceUri, name);
            } else {
              el.removeAttribute(`${namespace}:${name}`);
            }
          } else {
            el.removeAttribute(name);
          }
        }
        addClass(el, name) {
          el.classList.add(name);
        }
        removeClass(el, name) {
          el.classList.remove(name);
        }
        setStyle(el, style, value, flags) {
          if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {
            el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? "important" : "");
          } else {
            el.style[style] = value;
          }
        }
        removeStyle(el, style, flags) {
          if (flags & RendererStyleFlags2.DashCase) {
            el.style.removeProperty(style);
          } else {
            el.style[style] = "";
          }
        }
        setProperty(el, name, value) {
          if (el == null) {
            return;
          }
          (typeof ngDevMode === "undefined" || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(name, "property");
          el[name] = value;
        }
        setValue(node, value) {
          node.nodeValue = value;
        }
        listen(target, event, callback) {
          (typeof ngDevMode === "undefined" || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(event, "listener");
          if (typeof target === "string") {
            target = getDOM().getGlobalEventTarget(this.doc, target);
            if (!target) {
              throw new Error(`Unsupported event target ${target} for event ${event}`);
            }
          }
          return this.eventManager.addEventListener(target, event, this.decoratePreventDefault(callback));
        }
        decoratePreventDefault(eventHandler) {
          return (event) => {
            if (event === "__ngUnwrap__") {
              return eventHandler;
            }
            const allowDefaultBehavior = this.platformIsServer ? this.ngZone.runGuarded(() => eventHandler(event)) : eventHandler(event);
            if (allowDefaultBehavior === false) {
              event.preventDefault();
            }
            return void 0;
          };
        }
      };
      AT_CHARCODE = (() => "@".charCodeAt(0))();
      ShadowDomRenderer = class extends DefaultDomRenderer2 {
        constructor(eventManager, sharedStylesHost, hostEl, component, doc3, ngZone, nonce, platformIsServer) {
          super(eventManager, doc3, ngZone, platformIsServer);
          this.sharedStylesHost = sharedStylesHost;
          this.hostEl = hostEl;
          this.shadowRoot = hostEl.attachShadow({ mode: "open" });
          this.sharedStylesHost.addHost(this.shadowRoot);
          const styles2 = shimStylesContent(component.id, component.styles);
          for (const style of styles2) {
            const styleEl = document.createElement("style");
            if (nonce) {
              styleEl.setAttribute("nonce", nonce);
            }
            styleEl.textContent = style;
            this.shadowRoot.appendChild(styleEl);
          }
        }
        nodeOrShadowRoot(node) {
          return node === this.hostEl ? this.shadowRoot : node;
        }
        appendChild(parent, newChild) {
          return super.appendChild(this.nodeOrShadowRoot(parent), newChild);
        }
        insertBefore(parent, newChild, refChild) {
          return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);
        }
        removeChild(parent, oldChild) {
          return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);
        }
        parentNode(node) {
          return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));
        }
        destroy() {
          this.sharedStylesHost.removeHost(this.shadowRoot);
        }
      };
      NoneEncapsulationDomRenderer = class extends DefaultDomRenderer2 {
        constructor(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc3, ngZone, platformIsServer, compId) {
          super(eventManager, doc3, ngZone, platformIsServer);
          this.sharedStylesHost = sharedStylesHost;
          this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;
          this.styles = compId ? shimStylesContent(compId, component.styles) : component.styles;
        }
        applyStyles() {
          this.sharedStylesHost.addStyles(this.styles);
        }
        destroy() {
          if (!this.removeStylesOnCompDestroy) {
            return;
          }
          this.sharedStylesHost.removeStyles(this.styles);
        }
      };
      EmulatedEncapsulationDomRenderer2 = class extends NoneEncapsulationDomRenderer {
        constructor(eventManager, sharedStylesHost, component, appId, removeStylesOnCompDestroy, doc3, ngZone, platformIsServer) {
          const compId = appId + "-" + component.id;
          super(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc3, ngZone, platformIsServer, compId);
          this.contentAttr = shimContentAttribute(compId);
          this.hostAttr = shimHostAttribute(compId);
        }
        applyToHost(element2) {
          this.applyStyles();
          this.setAttribute(element2, this.hostAttr, "");
        }
        createElement(parent, name) {
          const el = super.createElement(parent, name);
          super.setAttribute(el, this.contentAttr, "");
          return el;
        }
      };
      DomEventsPlugin = class _DomEventsPlugin extends EventManagerPlugin {
        constructor(doc3) {
          super(doc3);
        }
        // This plugin should come last in the list of plugins, because it accepts all
        // events.
        supports(eventName) {
          return true;
        }
        addEventListener(element2, eventName, handler) {
          element2.addEventListener(eventName, handler, false);
          return () => this.removeEventListener(element2, eventName, handler);
        }
        removeEventListener(target, eventName, callback) {
          return target.removeEventListener(eventName, callback);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DomEventsPlugin, deps: [{ token: DOCUMENT2 }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DomEventsPlugin });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: DomEventsPlugin, decorators: [{
        type: Injectable
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Inject,
        args: [DOCUMENT2]
      }] }] });
      MODIFIER_KEYS = ["alt", "control", "meta", "shift"];
      _keyMap = {
        "\b": "Backspace",
        "	": "Tab",
        "\x7F": "Delete",
        "\x1B": "Escape",
        "Del": "Delete",
        "Esc": "Escape",
        "Left": "ArrowLeft",
        "Right": "ArrowRight",
        "Up": "ArrowUp",
        "Down": "ArrowDown",
        "Menu": "ContextMenu",
        "Scroll": "ScrollLock",
        "Win": "OS"
      };
      MODIFIER_KEY_GETTERS = {
        "alt": (event) => event.altKey,
        "control": (event) => event.ctrlKey,
        "meta": (event) => event.metaKey,
        "shift": (event) => event.shiftKey
      };
      KeyEventsPlugin = class _KeyEventsPlugin extends EventManagerPlugin {
        /**
         * Initializes an instance of the browser plug-in.
         * @param doc The document in which key events will be detected.
         */
        constructor(doc3) {
          super(doc3);
        }
        /**
         * Reports whether a named key event is supported.
         * @param eventName The event name to query.
         * @return True if the named key event is supported.
         */
        supports(eventName) {
          return _KeyEventsPlugin.parseEventName(eventName) != null;
        }
        /**
         * Registers a handler for a specific element and key event.
         * @param element The HTML element to receive event notifications.
         * @param eventName The name of the key event to listen for.
         * @param handler A function to call when the notification occurs. Receives the
         * event object as an argument.
         * @returns The key event that was registered.
         */
        addEventListener(element2, eventName, handler) {
          const parsedEvent = _KeyEventsPlugin.parseEventName(eventName);
          const outsideHandler = _KeyEventsPlugin.eventCallback(parsedEvent["fullKey"], handler, this.manager.getZone());
          return this.manager.getZone().runOutsideAngular(() => {
            return getDOM().onAndCancel(element2, parsedEvent["domEventName"], outsideHandler);
          });
        }
        /**
         * Parses the user provided full keyboard event definition and normalizes it for
         * later internal use. It ensures the string is all lowercase, converts special
         * characters to a standard spelling, and orders all the values consistently.
         *
         * @param eventName The name of the key event to listen for.
         * @returns an object with the full, normalized string, and the dom event name
         * or null in the case when the event doesn't match a keyboard event.
         */
        static parseEventName(eventName) {
          const parts = eventName.toLowerCase().split(".");
          const domEventName = parts.shift();
          if (parts.length === 0 || !(domEventName === "keydown" || domEventName === "keyup")) {
            return null;
          }
          const key = _KeyEventsPlugin._normalizeKey(parts.pop());
          let fullKey = "";
          let codeIX = parts.indexOf("code");
          if (codeIX > -1) {
            parts.splice(codeIX, 1);
            fullKey = "code.";
          }
          MODIFIER_KEYS.forEach((modifierName) => {
            const index = parts.indexOf(modifierName);
            if (index > -1) {
              parts.splice(index, 1);
              fullKey += modifierName + ".";
            }
          });
          fullKey += key;
          if (parts.length != 0 || key.length === 0) {
            return null;
          }
          const result = {};
          result["domEventName"] = domEventName;
          result["fullKey"] = fullKey;
          return result;
        }
        /**
         * Determines whether the actual keys pressed match the configured key code string.
         * The `fullKeyCode` event is normalized in the `parseEventName` method when the
         * event is attached to the DOM during the `addEventListener` call. This is unseen
         * by the end user and is normalized for internal consistency and parsing.
         *
         * @param event The keyboard event.
         * @param fullKeyCode The normalized user defined expected key event string
         * @returns boolean.
         */
        static matchEventFullKeyCode(event, fullKeyCode) {
          let keycode = _keyMap[event.key] || event.key;
          let key = "";
          if (fullKeyCode.indexOf("code.") > -1) {
            keycode = event.code;
            key = "code.";
          }
          if (keycode == null || !keycode)
            return false;
          keycode = keycode.toLowerCase();
          if (keycode === " ") {
            keycode = "space";
          } else if (keycode === ".") {
            keycode = "dot";
          }
          MODIFIER_KEYS.forEach((modifierName) => {
            if (modifierName !== keycode) {
              const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
              if (modifierGetter(event)) {
                key += modifierName + ".";
              }
            }
          });
          key += keycode;
          return key === fullKeyCode;
        }
        /**
         * Configures a handler callback for a key event.
         * @param fullKey The event name that combines all simultaneous keystrokes.
         * @param handler The function that responds to the key event.
         * @param zone The zone in which the event occurred.
         * @returns A callback function.
         */
        static eventCallback(fullKey, handler, zone) {
          return (event) => {
            if (_KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {
              zone.runGuarded(() => handler(event));
            }
          };
        }
        /** @internal */
        static _normalizeKey(keyName) {
          return keyName === "esc" ? "escape" : keyName;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _KeyEventsPlugin, deps: [{ token: DOCUMENT2 }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _KeyEventsPlugin });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: KeyEventsPlugin, decorators: [{
        type: Injectable
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Inject,
        args: [DOCUMENT2]
      }] }] });
      INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
        { provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID },
        { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
        { provide: DOCUMENT2, useFactory: _document, deps: [] }
      ];
      platformBrowser = createPlatformFactory(platformCore, "browser", INTERNAL_BROWSER_PLATFORM_PROVIDERS);
      BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "BrowserModule Providers Marker" : "");
      TESTABILITY_PROVIDERS = [
        {
          provide: TESTABILITY_GETTER,
          useClass: BrowserGetTestability,
          deps: []
        },
        {
          provide: TESTABILITY,
          useClass: Testability,
          deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]
        },
        {
          provide: Testability,
          // Also provide as `Testability` for backwards-compatibility.
          useClass: Testability,
          deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]
        }
      ];
      BROWSER_MODULE_PROVIDERS = [
        { provide: INJECTOR_SCOPE, useValue: "root" },
        { provide: ErrorHandler, useFactory: errorHandler, deps: [] },
        {
          provide: EVENT_MANAGER_PLUGINS,
          useClass: DomEventsPlugin,
          multi: true,
          deps: [DOCUMENT2, NgZone, PLATFORM_ID]
        },
        { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT2] },
        DomRendererFactory2,
        SharedStylesHost,
        EventManager,
        { provide: RendererFactory2, useExisting: DomRendererFactory2 },
        { provide: XhrFactory, useClass: BrowserXhr, deps: [] },
        typeof ngDevMode === "undefined" || ngDevMode ? { provide: BROWSER_MODULE_PROVIDERS_MARKER, useValue: true } : []
      ];
      BrowserModule = class _BrowserModule {
        constructor(providersAlreadyPresent) {
          if ((typeof ngDevMode === "undefined" || ngDevMode) && providersAlreadyPresent) {
            throw new RuntimeError(5100, `Providers from the \`BrowserModule\` have already been loaded. If you need access to common directives such as NgIf and NgFor, import the \`CommonModule\` instead.`);
          }
        }
        /**
         * Configures a browser-based app to transition from a server-rendered app, if
         * one is present on the page.
         *
         * @param params An object containing an identifier for the app to transition.
         * The ID must match between the client and server versions of the app.
         * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.
         *
         * @deprecated Use {@link APP_ID} instead to set the application ID.
         */
        static withServerTransition(params) {
          return {
            ngModule: _BrowserModule,
            providers: [
              { provide: APP_ID, useValue: params.appId }
            ]
          };
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _BrowserModule, deps: [{ token: BROWSER_MODULE_PROVIDERS_MARKER, optional: true, skipSelf: true }], target: FactoryTarget.NgModule });
        }
        static {
          this.\u0275mod = \u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _BrowserModule, exports: [CommonModule, ApplicationModule] });
        }
        static {
          this.\u0275inj = \u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _BrowserModule, providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS], imports: [CommonModule, ApplicationModule] });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: BrowserModule, decorators: [{
        type: NgModule,
        args: [{
          providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],
          exports: [CommonModule, ApplicationModule]
        }]
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Optional
      }, {
        type: SkipSelf
      }, {
        type: Inject,
        args: [BROWSER_MODULE_PROVIDERS_MARKER]
      }] }] });
      Meta = class _Meta {
        constructor(_doc) {
          this._doc = _doc;
          this._dom = getDOM();
        }
        /**
         * Retrieves or creates a specific `<meta>` tag element in the current HTML document.
         * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
         * values in the provided tag definition, and verifies that all other attribute values are equal.
         * If an existing element is found, it is returned and is not modified in any way.
         * @param tag The definition of a `<meta>` element to match or create.
         * @param forceCreation True to create a new element without checking whether one already exists.
         * @returns The existing element with the same attributes and values if found,
         * the new element if no match is found, or `null` if the tag parameter is not defined.
         */
        addTag(tag, forceCreation = false) {
          if (!tag)
            return null;
          return this._getOrCreateElement(tag, forceCreation);
        }
        /**
         * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.
         * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
         * values in the provided tag definition, and verifies that all other attribute values are equal.
         * @param tags An array of tag definitions to match or create.
         * @param forceCreation True to create new elements without checking whether they already exist.
         * @returns The matching elements if found, or the new elements.
         */
        addTags(tags, forceCreation = false) {
          if (!tags)
            return [];
          return tags.reduce((result, tag) => {
            if (tag) {
              result.push(this._getOrCreateElement(tag, forceCreation));
            }
            return result;
          }, []);
        }
        /**
         * Retrieves a `<meta>` tag element in the current HTML document.
         * @param attrSelector The tag attribute and value to match against, in the format
         * `"tag_attribute='value string'"`.
         * @returns The matching element, if any.
         */
        getTag(attrSelector) {
          if (!attrSelector)
            return null;
          return this._doc.querySelector(`meta[${attrSelector}]`) || null;
        }
        /**
         * Retrieves a set of `<meta>` tag elements in the current HTML document.
         * @param attrSelector The tag attribute and value to match against, in the format
         * `"tag_attribute='value string'"`.
         * @returns The matching elements, if any.
         */
        getTags(attrSelector) {
          if (!attrSelector)
            return [];
          const list = this._doc.querySelectorAll(`meta[${attrSelector}]`);
          return list ? [].slice.call(list) : [];
        }
        /**
         * Modifies an existing `<meta>` tag element in the current HTML document.
         * @param tag The tag description with which to replace the existing tag content.
         * @param selector A tag attribute and value to match against, to identify
         * an existing tag. A string in the format `"tag_attribute=`value string`"`.
         * If not supplied, matches a tag with the same `name` or `property` attribute value as the
         * replacement tag.
         * @return The modified element.
         */
        updateTag(tag, selector) {
          if (!tag)
            return null;
          selector = selector || this._parseSelector(tag);
          const meta = this.getTag(selector);
          if (meta) {
            return this._setMetaElementAttributes(tag, meta);
          }
          return this._getOrCreateElement(tag, true);
        }
        /**
         * Removes an existing `<meta>` tag element from the current HTML document.
         * @param attrSelector A tag attribute and value to match against, to identify
         * an existing tag. A string in the format `"tag_attribute=`value string`"`.
         */
        removeTag(attrSelector) {
          this.removeTagElement(this.getTag(attrSelector));
        }
        /**
         * Removes an existing `<meta>` tag element from the current HTML document.
         * @param meta The tag definition to match against to identify an existing tag.
         */
        removeTagElement(meta) {
          if (meta) {
            this._dom.remove(meta);
          }
        }
        _getOrCreateElement(meta, forceCreation = false) {
          if (!forceCreation) {
            const selector = this._parseSelector(meta);
            const elem = this.getTags(selector).filter((elem2) => this._containsAttributes(meta, elem2))[0];
            if (elem !== void 0)
              return elem;
          }
          const element2 = this._dom.createElement("meta");
          this._setMetaElementAttributes(meta, element2);
          const head = this._doc.getElementsByTagName("head")[0];
          head.appendChild(element2);
          return element2;
        }
        _setMetaElementAttributes(tag, el) {
          Object.keys(tag).forEach((prop) => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));
          return el;
        }
        _parseSelector(tag) {
          const attr = tag.name ? "name" : "property";
          return `${attr}="${tag[attr]}"`;
        }
        _containsAttributes(tag, elem) {
          return Object.keys(tag).every((key) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);
        }
        _getMetaKeyMap(prop) {
          return META_KEYS_MAP[prop] || prop;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _Meta, deps: [{ token: DOCUMENT2 }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _Meta, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: Meta, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Inject,
        args: [DOCUMENT2]
      }] }] });
      META_KEYS_MAP = {
        httpEquiv: "http-equiv"
      };
      Title = class _Title {
        constructor(_doc) {
          this._doc = _doc;
        }
        /**
         * Get the title of the current HTML document.
         */
        getTitle() {
          return this._doc.title;
        }
        /**
         * Set the title of the current HTML document.
         * @param newTitle
         */
        setTitle(newTitle) {
          this._doc.title = newTitle || "";
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _Title, deps: [{ token: DOCUMENT2 }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _Title, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: Title, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Inject,
        args: [DOCUMENT2]
      }] }] });
      EVENT_NAMES = {
        // pan
        "pan": true,
        "panstart": true,
        "panmove": true,
        "panend": true,
        "pancancel": true,
        "panleft": true,
        "panright": true,
        "panup": true,
        "pandown": true,
        // pinch
        "pinch": true,
        "pinchstart": true,
        "pinchmove": true,
        "pinchend": true,
        "pinchcancel": true,
        "pinchin": true,
        "pinchout": true,
        // press
        "press": true,
        "pressup": true,
        // rotate
        "rotate": true,
        "rotatestart": true,
        "rotatemove": true,
        "rotateend": true,
        "rotatecancel": true,
        // swipe
        "swipe": true,
        "swipeleft": true,
        "swiperight": true,
        "swipeup": true,
        "swipedown": true,
        // tap
        "tap": true,
        "doubletap": true
      };
      HAMMER_GESTURE_CONFIG = new InjectionToken("HammerGestureConfig");
      HAMMER_LOADER = new InjectionToken("HammerLoader");
      HammerGestureConfig = class _HammerGestureConfig {
        constructor() {
          this.events = [];
          this.overrides = {};
        }
        /**
         * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)
         * and attaches it to a given HTML element.
         * @param element The element that will recognize gestures.
         * @returns A HammerJS event-manager object.
         */
        buildHammer(element2) {
          const mc = new Hammer(element2, this.options);
          mc.get("pinch").set({ enable: true });
          mc.get("rotate").set({ enable: true });
          for (const eventName in this.overrides) {
            mc.get(eventName).set(this.overrides[eventName]);
          }
          return mc;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _HammerGestureConfig, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _HammerGestureConfig });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: HammerGestureConfig, decorators: [{
        type: Injectable
      }] });
      HammerGesturesPlugin = class _HammerGesturesPlugin extends EventManagerPlugin {
        constructor(doc3, _config, console2, loader) {
          super(doc3);
          this._config = _config;
          this.console = console2;
          this.loader = loader;
          this._loaderPromise = null;
        }
        supports(eventName) {
          if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
            return false;
          }
          if (!window.Hammer && !this.loader) {
            if (typeof ngDevMode === "undefined" || ngDevMode) {
              this.console.warn(`The "${eventName}" event cannot be bound because Hammer.JS is not loaded and no custom loader has been specified.`);
            }
            return false;
          }
          return true;
        }
        addEventListener(element2, eventName, handler) {
          const zone = this.manager.getZone();
          eventName = eventName.toLowerCase();
          if (!window.Hammer && this.loader) {
            this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader());
            let cancelRegistration = false;
            let deregister = () => {
              cancelRegistration = true;
            };
            zone.runOutsideAngular(() => this._loaderPromise.then(() => {
              if (!window.Hammer) {
                if (typeof ngDevMode === "undefined" || ngDevMode) {
                  this.console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);
                }
                deregister = () => {
                };
                return;
              }
              if (!cancelRegistration) {
                deregister = this.addEventListener(element2, eventName, handler);
              }
            }).catch(() => {
              if (typeof ngDevMode === "undefined" || ngDevMode) {
                this.console.warn(`The "${eventName}" event cannot be bound because the custom Hammer.JS loader failed.`);
              }
              deregister = () => {
              };
            }));
            return () => {
              deregister();
            };
          }
          return zone.runOutsideAngular(() => {
            const mc = this._config.buildHammer(element2);
            const callback = function(eventObj) {
              zone.runGuarded(function() {
                handler(eventObj);
              });
            };
            mc.on(eventName, callback);
            return () => {
              mc.off(eventName, callback);
              if (typeof mc.destroy === "function") {
                mc.destroy();
              }
            };
          });
        }
        isCustomEvent(eventName) {
          return this._config.events.indexOf(eventName) > -1;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _HammerGesturesPlugin, deps: [{ token: DOCUMENT2 }, { token: HAMMER_GESTURE_CONFIG }, { token: Console }, { token: HAMMER_LOADER, optional: true }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _HammerGesturesPlugin });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: HammerGesturesPlugin, decorators: [{
        type: Injectable
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Inject,
        args: [DOCUMENT2]
      }] }, { type: HammerGestureConfig, decorators: [{
        type: Inject,
        args: [HAMMER_GESTURE_CONFIG]
      }] }, { type: Console }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [HAMMER_LOADER]
      }] }] });
      HammerModule = class _HammerModule {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _HammerModule, deps: [], target: FactoryTarget.NgModule });
        }
        static {
          this.\u0275mod = \u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _HammerModule });
        }
        static {
          this.\u0275inj = \u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _HammerModule, providers: [
            {
              provide: EVENT_MANAGER_PLUGINS,
              useClass: HammerGesturesPlugin,
              multi: true,
              deps: [DOCUMENT2, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]
            },
            { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] }
          ] });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: HammerModule, decorators: [{
        type: NgModule,
        args: [{
          providers: [
            {
              provide: EVENT_MANAGER_PLUGINS,
              useClass: HammerGesturesPlugin,
              multi: true,
              deps: [DOCUMENT2, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]
            },
            { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] }
          ]
        }]
      }] });
      DomSanitizer = class _DomSanitizer {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DomSanitizer, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DomSanitizer, providedIn: "root", useExisting: forwardRef(() => DomSanitizerImpl) });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: DomSanitizer, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root", useExisting: forwardRef(() => DomSanitizerImpl) }]
      }] });
      DomSanitizerImpl = class _DomSanitizerImpl extends DomSanitizer {
        constructor(_doc) {
          super();
          this._doc = _doc;
        }
        sanitize(ctx, value) {
          if (value == null)
            return null;
          switch (ctx) {
            case SecurityContext.NONE:
              return value;
            case SecurityContext.HTML:
              if (allowSanitizationBypassAndThrow(
                value,
                "HTML"
                /* BypassType.Html */
              )) {
                return unwrapSafeValue(value);
              }
              return _sanitizeHtml(this._doc, String(value)).toString();
            case SecurityContext.STYLE:
              if (allowSanitizationBypassAndThrow(
                value,
                "Style"
                /* BypassType.Style */
              )) {
                return unwrapSafeValue(value);
              }
              return value;
            case SecurityContext.SCRIPT:
              if (allowSanitizationBypassAndThrow(
                value,
                "Script"
                /* BypassType.Script */
              )) {
                return unwrapSafeValue(value);
              }
              throw new RuntimeError(5200, (typeof ngDevMode === "undefined" || ngDevMode) && "unsafe value used in a script context");
            case SecurityContext.URL:
              if (allowSanitizationBypassAndThrow(
                value,
                "URL"
                /* BypassType.Url */
              )) {
                return unwrapSafeValue(value);
              }
              return _sanitizeUrl(String(value));
            case SecurityContext.RESOURCE_URL:
              if (allowSanitizationBypassAndThrow(
                value,
                "ResourceURL"
                /* BypassType.ResourceUrl */
              )) {
                return unwrapSafeValue(value);
              }
              throw new RuntimeError(5201, (typeof ngDevMode === "undefined" || ngDevMode) && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);
            default:
              throw new RuntimeError(5202, (typeof ngDevMode === "undefined" || ngDevMode) && `Unexpected SecurityContext ${ctx} (see ${XSS_SECURITY_URL})`);
          }
        }
        bypassSecurityTrustHtml(value) {
          return bypassSanitizationTrustHtml(value);
        }
        bypassSecurityTrustStyle(value) {
          return bypassSanitizationTrustStyle(value);
        }
        bypassSecurityTrustScript(value) {
          return bypassSanitizationTrustScript(value);
        }
        bypassSecurityTrustUrl(value) {
          return bypassSanitizationTrustUrl(value);
        }
        bypassSecurityTrustResourceUrl(value) {
          return bypassSanitizationTrustResourceUrl(value);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DomSanitizerImpl, deps: [{ token: DOCUMENT2 }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DomSanitizerImpl, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: DomSanitizerImpl, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Inject,
        args: [DOCUMENT2]
      }] }] });
      (function(HydrationFeatureKind2) {
        HydrationFeatureKind2[HydrationFeatureKind2["NoHttpTransferCache"] = 0] = "NoHttpTransferCache";
        HydrationFeatureKind2[HydrationFeatureKind2["HttpTransferCacheOptions"] = 1] = "HttpTransferCacheOptions";
      })(HydrationFeatureKind || (HydrationFeatureKind = {}));
      VERSION4 = new Version("17.3.5");
    }
  });

  // node_modules/@angular/router/fesm2022/router.mjs
  function convertToParamMap(params) {
    return new ParamsAsMap(params);
  }
  function defaultUrlMatcher(segments, segmentGroup, route) {
    const parts = route.path.split("/");
    if (parts.length > segments.length) {
      return null;
    }
    if (route.pathMatch === "full" && (segmentGroup.hasChildren() || parts.length < segments.length)) {
      return null;
    }
    const posParams = {};
    for (let index = 0; index < parts.length; index++) {
      const part = parts[index];
      const segment = segments[index];
      const isParameter = part.startsWith(":");
      if (isParameter) {
        posParams[part.substring(1)] = segment;
      } else if (part !== segment.path) {
        return null;
      }
    }
    return { consumed: segments.slice(0, parts.length), posParams };
  }
  function shallowEqualArrays(a, b) {
    if (a.length !== b.length)
      return false;
    for (let i = 0; i < a.length; ++i) {
      if (!shallowEqual(a[i], b[i]))
        return false;
    }
    return true;
  }
  function shallowEqual(a, b) {
    const k1 = a ? getDataKeys(a) : void 0;
    const k2 = b ? getDataKeys(b) : void 0;
    if (!k1 || !k2 || k1.length != k2.length) {
      return false;
    }
    let key;
    for (let i = 0; i < k1.length; i++) {
      key = k1[i];
      if (!equalArraysOrString(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  function getDataKeys(obj) {
    return [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];
  }
  function equalArraysOrString(a, b) {
    if (Array.isArray(a) && Array.isArray(b)) {
      if (a.length !== b.length)
        return false;
      const aSorted = [...a].sort();
      const bSorted = [...b].sort();
      return aSorted.every((val, index) => bSorted[index] === val);
    } else {
      return a === b;
    }
  }
  function last3(a) {
    return a.length > 0 ? a[a.length - 1] : null;
  }
  function wrapIntoObservable(value) {
    if (isObservable(value)) {
      return value;
    }
    if (isPromise2(value)) {
      return from(Promise.resolve(value));
    }
    return of(value);
  }
  function containsTree(container, containee, options) {
    return pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) && paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) && !(options.fragment === "exact" && container.fragment !== containee.fragment);
  }
  function equalParams(container, containee) {
    return shallowEqual(container, containee);
  }
  function equalSegmentGroups(container, containee, matrixParams) {
    if (!equalPath(container.segments, containee.segments))
      return false;
    if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {
      return false;
    }
    if (container.numberOfChildren !== containee.numberOfChildren)
      return false;
    for (const c in containee.children) {
      if (!container.children[c])
        return false;
      if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams))
        return false;
    }
    return true;
  }
  function containsParams(container, containee) {
    return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every((key) => equalArraysOrString(container[key], containee[key]));
  }
  function containsSegmentGroup(container, containee, matrixParams) {
    return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);
  }
  function containsSegmentGroupHelper(container, containee, containeePaths, matrixParams) {
    if (container.segments.length > containeePaths.length) {
      const current = container.segments.slice(0, containeePaths.length);
      if (!equalPath(current, containeePaths))
        return false;
      if (containee.hasChildren())
        return false;
      if (!matrixParamsMatch(current, containeePaths, matrixParams))
        return false;
      return true;
    } else if (container.segments.length === containeePaths.length) {
      if (!equalPath(container.segments, containeePaths))
        return false;
      if (!matrixParamsMatch(container.segments, containeePaths, matrixParams))
        return false;
      for (const c in containee.children) {
        if (!container.children[c])
          return false;
        if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {
          return false;
        }
      }
      return true;
    } else {
      const current = containeePaths.slice(0, container.segments.length);
      const next = containeePaths.slice(container.segments.length);
      if (!equalPath(container.segments, current))
        return false;
      if (!matrixParamsMatch(container.segments, current, matrixParams))
        return false;
      if (!container.children[PRIMARY_OUTLET])
        return false;
      return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next, matrixParams);
    }
  }
  function matrixParamsMatch(containerPaths, containeePaths, options) {
    return containeePaths.every((containeeSegment, i) => {
      return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);
    });
  }
  function equalSegments(as, bs) {
    return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));
  }
  function equalPath(as, bs) {
    if (as.length !== bs.length)
      return false;
    return as.every((a, i) => a.path === bs[i].path);
  }
  function mapChildrenIntoArray(segment, fn2) {
    let res = [];
    Object.entries(segment.children).forEach(([childOutlet, child]) => {
      if (childOutlet === PRIMARY_OUTLET) {
        res = res.concat(fn2(child, childOutlet));
      }
    });
    Object.entries(segment.children).forEach(([childOutlet, child]) => {
      if (childOutlet !== PRIMARY_OUTLET) {
        res = res.concat(fn2(child, childOutlet));
      }
    });
    return res;
  }
  function serializePaths(segment) {
    return segment.segments.map((p) => serializePath(p)).join("/");
  }
  function serializeSegment(segment, root) {
    if (!segment.hasChildren()) {
      return serializePaths(segment);
    }
    if (root) {
      const primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : "";
      const children = [];
      Object.entries(segment.children).forEach(([k, v]) => {
        if (k !== PRIMARY_OUTLET) {
          children.push(`${k}:${serializeSegment(v, false)}`);
        }
      });
      return children.length > 0 ? `${primary}(${children.join("//")})` : primary;
    } else {
      const children = mapChildrenIntoArray(segment, (v, k) => {
        if (k === PRIMARY_OUTLET) {
          return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
        }
        return [`${k}:${serializeSegment(v, false)}`];
      });
      if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {
        return `${serializePaths(segment)}/${children[0]}`;
      }
      return `${serializePaths(segment)}/(${children.join("//")})`;
    }
  }
  function encodeUriString(s) {
    return encodeURIComponent(s).replace(/%40/g, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",");
  }
  function encodeUriQuery(s) {
    return encodeUriString(s).replace(/%3B/gi, ";");
  }
  function encodeUriFragment(s) {
    return encodeURI(s);
  }
  function encodeUriSegment(s) {
    return encodeUriString(s).replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/%26/gi, "&");
  }
  function decode(s) {
    return decodeURIComponent(s);
  }
  function decodeQuery(s) {
    return decode(s.replace(/\+/g, "%20"));
  }
  function serializePath(path) {
    return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;
  }
  function serializeMatrixParams(params) {
    return Object.entries(params).map(([key, value]) => `;${encodeUriSegment(key)}=${encodeUriSegment(value)}`).join("");
  }
  function serializeQueryParams(params) {
    const strParams = Object.entries(params).map(([name, value]) => {
      return Array.isArray(value) ? value.map((v) => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join("&") : `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;
    }).filter((s) => s);
    return strParams.length ? `?${strParams.join("&")}` : "";
  }
  function matchSegments(str) {
    const match2 = str.match(SEGMENT_RE);
    return match2 ? match2[0] : "";
  }
  function matchMatrixKeySegments(str) {
    const match2 = str.match(MATRIX_PARAM_SEGMENT_RE);
    return match2 ? match2[0] : "";
  }
  function matchQueryParams(str) {
    const match2 = str.match(QUERY_PARAM_RE);
    return match2 ? match2[0] : "";
  }
  function matchUrlQueryParamValue(str) {
    const match2 = str.match(QUERY_PARAM_VALUE_RE);
    return match2 ? match2[0] : "";
  }
  function createRoot(rootCandidate) {
    return rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], { [PRIMARY_OUTLET]: rootCandidate }) : rootCandidate;
  }
  function squashSegmentGroup(segmentGroup) {
    const newChildren = {};
    for (const [childOutlet, child] of Object.entries(segmentGroup.children)) {
      const childCandidate = squashSegmentGroup(child);
      if (childOutlet === PRIMARY_OUTLET && childCandidate.segments.length === 0 && childCandidate.hasChildren()) {
        for (const [grandChildOutlet, grandChild] of Object.entries(childCandidate.children)) {
          newChildren[grandChildOutlet] = grandChild;
        }
      } else if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {
        newChildren[childOutlet] = childCandidate;
      }
    }
    const s = new UrlSegmentGroup(segmentGroup.segments, newChildren);
    return mergeTrivialChildren(s);
  }
  function mergeTrivialChildren(s) {
    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
      const c = s.children[PRIMARY_OUTLET];
      return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
    }
    return s;
  }
  function isUrlTree(v) {
    return v instanceof UrlTree;
  }
  function createUrlTreeFromSnapshot(relativeTo, commands, queryParams = null, fragment = null) {
    const relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeTo);
    return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, queryParams, fragment);
  }
  function createSegmentGroupFromRoute(route) {
    let targetGroup;
    function createSegmentGroupFromRouteRecursive(currentRoute) {
      const childOutlets = {};
      for (const childSnapshot of currentRoute.children) {
        const root = createSegmentGroupFromRouteRecursive(childSnapshot);
        childOutlets[childSnapshot.outlet] = root;
      }
      const segmentGroup = new UrlSegmentGroup(currentRoute.url, childOutlets);
      if (currentRoute === route) {
        targetGroup = segmentGroup;
      }
      return segmentGroup;
    }
    const rootCandidate = createSegmentGroupFromRouteRecursive(route.root);
    const rootSegmentGroup = createRoot(rootCandidate);
    return targetGroup ?? rootSegmentGroup;
  }
  function createUrlTreeFromSegmentGroup(relativeTo, commands, queryParams, fragment) {
    let root = relativeTo;
    while (root.parent) {
      root = root.parent;
    }
    if (commands.length === 0) {
      return tree(root, root, root, queryParams, fragment);
    }
    const nav = computeNavigation(commands);
    if (nav.toRoot()) {
      return tree(root, root, new UrlSegmentGroup([], {}), queryParams, fragment);
    }
    const position = findStartingPositionForTargetGroup(nav, root, relativeTo);
    const newSegmentGroup = position.processChildren ? updateSegmentGroupChildren(position.segmentGroup, position.index, nav.commands) : updateSegmentGroup(position.segmentGroup, position.index, nav.commands);
    return tree(root, position.segmentGroup, newSegmentGroup, queryParams, fragment);
  }
  function isMatrixParams(command) {
    return typeof command === "object" && command != null && !command.outlets && !command.segmentPath;
  }
  function isCommandWithOutlets(command) {
    return typeof command === "object" && command != null && command.outlets;
  }
  function tree(oldRoot, oldSegmentGroup, newSegmentGroup, queryParams, fragment) {
    let qp = {};
    if (queryParams) {
      Object.entries(queryParams).forEach(([name, value]) => {
        qp[name] = Array.isArray(value) ? value.map((v) => `${v}`) : `${value}`;
      });
    }
    let rootCandidate;
    if (oldRoot === oldSegmentGroup) {
      rootCandidate = newSegmentGroup;
    } else {
      rootCandidate = replaceSegment(oldRoot, oldSegmentGroup, newSegmentGroup);
    }
    const newRoot = createRoot(squashSegmentGroup(rootCandidate));
    return new UrlTree(newRoot, qp, fragment);
  }
  function replaceSegment(current, oldSegment, newSegment) {
    const children = {};
    Object.entries(current.children).forEach(([outletName, c]) => {
      if (c === oldSegment) {
        children[outletName] = newSegment;
      } else {
        children[outletName] = replaceSegment(c, oldSegment, newSegment);
      }
    });
    return new UrlSegmentGroup(current.segments, children);
  }
  function computeNavigation(commands) {
    if (typeof commands[0] === "string" && commands.length === 1 && commands[0] === "/") {
      return new Navigation(true, 0, commands);
    }
    let numberOfDoubleDots = 0;
    let isAbsolute = false;
    const res = commands.reduce((res2, cmd, cmdIdx) => {
      if (typeof cmd === "object" && cmd != null) {
        if (cmd.outlets) {
          const outlets = {};
          Object.entries(cmd.outlets).forEach(([name, commands2]) => {
            outlets[name] = typeof commands2 === "string" ? commands2.split("/") : commands2;
          });
          return [...res2, { outlets }];
        }
        if (cmd.segmentPath) {
          return [...res2, cmd.segmentPath];
        }
      }
      if (!(typeof cmd === "string")) {
        return [...res2, cmd];
      }
      if (cmdIdx === 0) {
        cmd.split("/").forEach((urlPart, partIndex) => {
          if (partIndex == 0 && urlPart === ".") {
          } else if (partIndex == 0 && urlPart === "") {
            isAbsolute = true;
          } else if (urlPart === "..") {
            numberOfDoubleDots++;
          } else if (urlPart != "") {
            res2.push(urlPart);
          }
        });
        return res2;
      }
      return [...res2, cmd];
    }, []);
    return new Navigation(isAbsolute, numberOfDoubleDots, res);
  }
  function findStartingPositionForTargetGroup(nav, root, target) {
    if (nav.isAbsolute) {
      return new Position(root, true, 0);
    }
    if (!target) {
      return new Position(root, false, NaN);
    }
    if (target.parent === null) {
      return new Position(target, true, 0);
    }
    const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
    const index = target.segments.length - 1 + modifier;
    return createPositionApplyingDoubleDots(target, index, nav.numberOfDoubleDots);
  }
  function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
    let g = group;
    let ci = index;
    let dd = numberOfDoubleDots;
    while (dd > ci) {
      dd -= ci;
      g = g.parent;
      if (!g) {
        throw new RuntimeError(4005, (typeof ngDevMode === "undefined" || ngDevMode) && "Invalid number of '../'");
      }
      ci = g.segments.length;
    }
    return new Position(g, false, ci - dd);
  }
  function getOutlets(commands) {
    if (isCommandWithOutlets(commands[0])) {
      return commands[0].outlets;
    }
    return { [PRIMARY_OUTLET]: commands };
  }
  function updateSegmentGroup(segmentGroup, startIndex, commands) {
    segmentGroup ??= new UrlSegmentGroup([], {});
    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
      return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
    }
    const m = prefixedWith(segmentGroup, startIndex, commands);
    const slicedCommands = commands.slice(m.commandIndex);
    if (m.match && m.pathIndex < segmentGroup.segments.length) {
      const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
      g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
      return updateSegmentGroupChildren(g, 0, slicedCommands);
    } else if (m.match && slicedCommands.length === 0) {
      return new UrlSegmentGroup(segmentGroup.segments, {});
    } else if (m.match && !segmentGroup.hasChildren()) {
      return createNewSegmentGroup(segmentGroup, startIndex, commands);
    } else if (m.match) {
      return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
    } else {
      return createNewSegmentGroup(segmentGroup, startIndex, commands);
    }
  }
  function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
    if (commands.length === 0) {
      return new UrlSegmentGroup(segmentGroup.segments, {});
    } else {
      const outlets = getOutlets(commands);
      const children = {};
      if (Object.keys(outlets).some((o) => o !== PRIMARY_OUTLET) && segmentGroup.children[PRIMARY_OUTLET] && segmentGroup.numberOfChildren === 1 && segmentGroup.children[PRIMARY_OUTLET].segments.length === 0) {
        const childrenOfEmptyChild = updateSegmentGroupChildren(segmentGroup.children[PRIMARY_OUTLET], startIndex, commands);
        return new UrlSegmentGroup(segmentGroup.segments, childrenOfEmptyChild.children);
      }
      Object.entries(outlets).forEach(([outlet, commands2]) => {
        if (typeof commands2 === "string") {
          commands2 = [commands2];
        }
        if (commands2 !== null) {
          children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands2);
        }
      });
      Object.entries(segmentGroup.children).forEach(([childOutlet, child]) => {
        if (outlets[childOutlet] === void 0) {
          children[childOutlet] = child;
        }
      });
      return new UrlSegmentGroup(segmentGroup.segments, children);
    }
  }
  function prefixedWith(segmentGroup, startIndex, commands) {
    let currentCommandIndex = 0;
    let currentPathIndex = startIndex;
    const noMatch2 = { match: false, pathIndex: 0, commandIndex: 0 };
    while (currentPathIndex < segmentGroup.segments.length) {
      if (currentCommandIndex >= commands.length)
        return noMatch2;
      const path = segmentGroup.segments[currentPathIndex];
      const command = commands[currentCommandIndex];
      if (isCommandWithOutlets(command)) {
        break;
      }
      const curr = `${command}`;
      const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
      if (currentPathIndex > 0 && curr === void 0)
        break;
      if (curr && next && typeof next === "object" && next.outlets === void 0) {
        if (!compare(curr, next, path))
          return noMatch2;
        currentCommandIndex += 2;
      } else {
        if (!compare(curr, {}, path))
          return noMatch2;
        currentCommandIndex++;
      }
      currentPathIndex++;
    }
    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };
  }
  function createNewSegmentGroup(segmentGroup, startIndex, commands) {
    const paths = segmentGroup.segments.slice(0, startIndex);
    let i = 0;
    while (i < commands.length) {
      const command = commands[i];
      if (isCommandWithOutlets(command)) {
        const children = createNewSegmentChildren(command.outlets);
        return new UrlSegmentGroup(paths, children);
      }
      if (i === 0 && isMatrixParams(commands[0])) {
        const p = segmentGroup.segments[startIndex];
        paths.push(new UrlSegment(p.path, stringify3(commands[0])));
        i++;
        continue;
      }
      const curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : `${command}`;
      const next = i < commands.length - 1 ? commands[i + 1] : null;
      if (curr && next && isMatrixParams(next)) {
        paths.push(new UrlSegment(curr, stringify3(next)));
        i += 2;
      } else {
        paths.push(new UrlSegment(curr, {}));
        i++;
      }
    }
    return new UrlSegmentGroup(paths, {});
  }
  function createNewSegmentChildren(outlets) {
    const children = {};
    Object.entries(outlets).forEach(([outlet, commands]) => {
      if (typeof commands === "string") {
        commands = [commands];
      }
      if (commands !== null) {
        children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
      }
    });
    return children;
  }
  function stringify3(params) {
    const res = {};
    Object.entries(params).forEach(([k, v]) => res[k] = `${v}`);
    return res;
  }
  function compare(path, params, segment) {
    return path == segment.path && shallowEqual(params, segment.parameters);
  }
  function stringifyEvent(routerEvent) {
    switch (routerEvent.type) {
      case EventType.ActivationEnd:
        return `ActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
      case EventType.ActivationStart:
        return `ActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
      case EventType.ChildActivationEnd:
        return `ChildActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
      case EventType.ChildActivationStart:
        return `ChildActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
      case EventType.GuardsCheckEnd:
        return `GuardsCheckEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state}, shouldActivate: ${routerEvent.shouldActivate})`;
      case EventType.GuardsCheckStart:
        return `GuardsCheckStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
      case EventType.NavigationCancel:
        return `NavigationCancel(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
      case EventType.NavigationSkipped:
        return `NavigationSkipped(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
      case EventType.NavigationEnd:
        return `NavigationEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}')`;
      case EventType.NavigationError:
        return `NavigationError(id: ${routerEvent.id}, url: '${routerEvent.url}', error: ${routerEvent.error})`;
      case EventType.NavigationStart:
        return `NavigationStart(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
      case EventType.ResolveEnd:
        return `ResolveEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
      case EventType.ResolveStart:
        return `ResolveStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
      case EventType.RouteConfigLoadEnd:
        return `RouteConfigLoadEnd(path: ${routerEvent.route.path})`;
      case EventType.RouteConfigLoadStart:
        return `RouteConfigLoadStart(path: ${routerEvent.route.path})`;
      case EventType.RoutesRecognized:
        return `RoutesRecognized(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
      case EventType.Scroll:
        const pos = routerEvent.position ? `${routerEvent.position[0]}, ${routerEvent.position[1]}` : null;
        return `Scroll(anchor: '${routerEvent.anchor}', position: '${pos}')`;
    }
  }
  function findNode(value, node) {
    if (value === node.value)
      return node;
    for (const child of node.children) {
      const node2 = findNode(value, child);
      if (node2)
        return node2;
    }
    return null;
  }
  function findPath(value, node) {
    if (value === node.value)
      return [node];
    for (const child of node.children) {
      const path = findPath(value, child);
      if (path.length) {
        path.unshift(node);
        return path;
      }
    }
    return [];
  }
  function nodeChildrenAsMap(node) {
    const map3 = {};
    if (node) {
      node.children.forEach((child) => map3[child.value.outlet] = child);
    }
    return map3;
  }
  function createEmptyState(rootComponent) {
    const snapshot = createEmptyStateSnapshot(rootComponent);
    const emptyUrl = new BehaviorSubject([new UrlSegment("", {})]);
    const emptyParams = new BehaviorSubject({});
    const emptyData = new BehaviorSubject({});
    const emptyQueryParams = new BehaviorSubject({});
    const fragment = new BehaviorSubject("");
    const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
    activated.snapshot = snapshot.root;
    return new RouterState(new TreeNode(activated, []), snapshot);
  }
  function createEmptyStateSnapshot(rootComponent) {
    const emptyParams = {};
    const emptyData = {};
    const emptyQueryParams = {};
    const fragment = "";
    const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, {});
    return new RouterStateSnapshot("", new TreeNode(activated, []));
  }
  function getInherited(route, parent, paramsInheritanceStrategy = "emptyOnly") {
    let inherited;
    const { routeConfig } = route;
    if (parent !== null && (paramsInheritanceStrategy === "always" || // inherit parent data if route is empty path
    routeConfig?.path === "" || // inherit parent data if parent was componentless
    !parent.component && !parent.routeConfig?.loadComponent)) {
      inherited = {
        params: { ...parent.params, ...route.params },
        data: { ...parent.data, ...route.data },
        resolve: {
          // Snapshots are created with data inherited from parent and guards (i.e. canActivate) can
          // change data because it's not frozen...
          // This first line could be deleted chose to break/disallow mutating the `data` object in
          // guards.
          // Note that data from parents still override this mutated data so anyone relying on this
          // might be surprised that it doesn't work if parent data is inherited but otherwise does.
          ...route.data,
          // Ensure inherited resolved data overrides inherited static data
          ...parent.data,
          // static data from the current route overrides any inherited data
          ...routeConfig?.data,
          // resolved data from current route overrides everything
          ...route._resolvedData
        }
      };
    } else {
      inherited = {
        params: { ...route.params },
        data: { ...route.data },
        resolve: { ...route.data, ...route._resolvedData ?? {} }
      };
    }
    if (routeConfig && hasStaticTitle(routeConfig)) {
      inherited.resolve[RouteTitleKey] = routeConfig.title;
    }
    return inherited;
  }
  function setRouterState(state, node) {
    node.value._routerState = state;
    node.children.forEach((c) => setRouterState(state, c));
  }
  function serializeNode(node) {
    const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(", ")} } ` : "";
    return `${node.value}${c}`;
  }
  function advanceActivatedRoute(route) {
    if (route.snapshot) {
      const currentSnapshot = route.snapshot;
      const nextSnapshot = route._futureSnapshot;
      route.snapshot = nextSnapshot;
      if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {
        route.queryParamsSubject.next(nextSnapshot.queryParams);
      }
      if (currentSnapshot.fragment !== nextSnapshot.fragment) {
        route.fragmentSubject.next(nextSnapshot.fragment);
      }
      if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {
        route.paramsSubject.next(nextSnapshot.params);
      }
      if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {
        route.urlSubject.next(nextSnapshot.url);
      }
      if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {
        route.dataSubject.next(nextSnapshot.data);
      }
    } else {
      route.snapshot = route._futureSnapshot;
      route.dataSubject.next(route._futureSnapshot.data);
    }
  }
  function equalParamsAndUrlSegments(a, b) {
    const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
    const parentsMismatch = !a.parent !== !b.parent;
    return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));
  }
  function hasStaticTitle(config4) {
    return typeof config4.title === "string" || config4.title === null;
  }
  function createRouterState(routeReuseStrategy, curr, prevState) {
    const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : void 0);
    return new RouterState(root, curr);
  }
  function createNode(routeReuseStrategy, curr, prevState) {
    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
      const value = prevState.value;
      value._futureSnapshot = curr.value;
      const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
      return new TreeNode(value, children);
    } else {
      if (routeReuseStrategy.shouldAttach(curr.value)) {
        const detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);
        if (detachedRouteHandle !== null) {
          const tree2 = detachedRouteHandle.route;
          tree2.value._futureSnapshot = curr.value;
          tree2.children = curr.children.map((c) => createNode(routeReuseStrategy, c));
          return tree2;
        }
      }
      const value = createActivatedRoute(curr.value);
      const children = curr.children.map((c) => createNode(routeReuseStrategy, c));
      return new TreeNode(value, children);
    }
  }
  function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
    return curr.children.map((child) => {
      for (const p of prevState.children) {
        if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {
          return createNode(routeReuseStrategy, child, p);
        }
      }
      return createNode(routeReuseStrategy, child);
    });
  }
  function createActivatedRoute(c) {
    return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);
  }
  function redirectingNavigationError(urlSerializer, redirect) {
    const { redirectTo, navigationBehaviorOptions } = isUrlTree(redirect) ? { redirectTo: redirect, navigationBehaviorOptions: void 0 } : redirect;
    const error2 = navigationCancelingError(ngDevMode && `Redirecting to "${urlSerializer.serialize(redirectTo)}"`, NavigationCancellationCode.Redirect);
    error2.url = redirectTo;
    error2.navigationBehaviorOptions = navigationBehaviorOptions;
    return error2;
  }
  function navigationCancelingError(message, code) {
    const error2 = new Error(`NavigationCancelingError: ${message || ""}`);
    error2[NAVIGATION_CANCELING_ERROR] = true;
    error2.cancellationCode = code;
    return error2;
  }
  function isRedirectingNavigationCancelingError(error2) {
    return isNavigationCancelingError(error2) && isUrlTree(error2.url);
  }
  function isNavigationCancelingError(error2) {
    return !!error2 && error2[NAVIGATION_CANCELING_ERROR];
  }
  function getOrCreateRouteInjectorIfNeeded(route, currentInjector) {
    if (route.providers && !route._injector) {
      route._injector = createEnvironmentInjector(route.providers, currentInjector, `Route: ${route.path}`);
    }
    return route._injector ?? currentInjector;
  }
  function validateConfig(config4, parentPath = "", requireStandaloneComponents = false) {
    for (let i = 0; i < config4.length; i++) {
      const route = config4[i];
      const fullPath = getFullPath(parentPath, route);
      validateNode(route, fullPath, requireStandaloneComponents);
    }
  }
  function assertStandalone(fullPath, component) {
    if (component && isNgModule(component)) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. You are using 'loadComponent' with a module, but it must be used with standalone components. Use 'loadChildren' instead.`);
    } else if (component && !isStandalone(component)) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. The component must be standalone.`);
    }
  }
  function validateNode(route, fullPath, requireStandaloneComponents) {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!route) {
        throw new RuntimeError(4014, `
      Invalid configuration of route '${fullPath}': Encountered undefined route.
      The reason might be an extra comma.

      Example:
      const routes: Routes = [
        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
        { path: 'dashboard',  component: DashboardComponent },, << two commas
        { path: 'detail/:id', component: HeroDetailComponent }
      ];
    `);
      }
      if (Array.isArray(route)) {
        throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': Array cannot be specified`);
      }
      if (!route.redirectTo && !route.component && !route.loadComponent && !route.children && !route.loadChildren && route.outlet && route.outlet !== PRIMARY_OUTLET) {
        throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);
      }
      if (route.redirectTo && route.children) {
        throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);
      }
      if (route.redirectTo && route.loadChildren) {
        throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);
      }
      if (route.children && route.loadChildren) {
        throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);
      }
      if (route.redirectTo && (route.component || route.loadComponent)) {
        throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and component/loadComponent cannot be used together`);
      }
      if (route.component && route.loadComponent) {
        throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': component and loadComponent cannot be used together`);
      }
      if (route.redirectTo && route.canActivate) {
        throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and canActivate cannot be used together. Redirects happen before activation so canActivate will never be executed.`);
      }
      if (route.path && route.matcher) {
        throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);
      }
      if (route.redirectTo === void 0 && !route.component && !route.loadComponent && !route.children && !route.loadChildren) {
        throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, loadComponent, redirectTo, children or loadChildren`);
      }
      if (route.path === void 0 && route.matcher === void 0) {
        throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);
      }
      if (typeof route.path === "string" && route.path.charAt(0) === "/") {
        throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': path cannot start with a slash`);
      }
      if (route.path === "" && route.redirectTo !== void 0 && route.pathMatch === void 0) {
        const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;
        throw new RuntimeError(4014, `Invalid configuration of route '{path: "${fullPath}", redirectTo: "${route.redirectTo}"}': please provide 'pathMatch'. ${exp}`);
      }
      if (requireStandaloneComponents) {
        assertStandalone(fullPath, route.component);
      }
    }
    if (route.children) {
      validateConfig(route.children, fullPath, requireStandaloneComponents);
    }
  }
  function getFullPath(parentPath, currentRoute) {
    if (!currentRoute) {
      return parentPath;
    }
    if (!parentPath && !currentRoute.path) {
      return "";
    } else if (parentPath && !currentRoute.path) {
      return `${parentPath}/`;
    } else if (!parentPath && currentRoute.path) {
      return currentRoute.path;
    } else {
      return `${parentPath}/${currentRoute.path}`;
    }
  }
  function standardizeConfig(r) {
    const children = r.children && r.children.map(standardizeConfig);
    const c = children ? { ...r, children } : { ...r };
    if (!c.component && !c.loadComponent && (children || c.loadChildren) && c.outlet && c.outlet !== PRIMARY_OUTLET) {
      c.component = \u0275EmptyOutletComponent;
    }
    return c;
  }
  function getOutlet(route) {
    return route.outlet || PRIMARY_OUTLET;
  }
  function sortByMatchingOutlets(routes6, outletName) {
    const sortedConfig = routes6.filter((r) => getOutlet(r) === outletName);
    sortedConfig.push(...routes6.filter((r) => getOutlet(r) !== outletName));
    return sortedConfig;
  }
  function getClosestRouteInjector(snapshot) {
    if (!snapshot)
      return null;
    if (snapshot.routeConfig?._injector) {
      return snapshot.routeConfig._injector;
    }
    for (let s = snapshot.parent; s; s = s.parent) {
      const route = s.routeConfig;
      if (route?._loadedInjector)
        return route._loadedInjector;
      if (route?._injector)
        return route._injector;
    }
    return null;
  }
  function getAllRouteGuards(future, curr, parentContexts) {
    const futureRoot = future._root;
    const currRoot = curr ? curr._root : null;
    return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);
  }
  function getCanActivateChild(p) {
    const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;
    if (!canActivateChild || canActivateChild.length === 0)
      return null;
    return { node: p, guards: canActivateChild };
  }
  function getTokenOrFunctionIdentity(tokenOrFunction, injector) {
    const NOT_FOUND2 = Symbol();
    const result = injector.get(tokenOrFunction, NOT_FOUND2);
    if (result === NOT_FOUND2) {
      if (typeof tokenOrFunction === "function" && !isInjectable(tokenOrFunction)) {
        return tokenOrFunction;
      } else {
        return injector.get(tokenOrFunction);
      }
    }
    return result;
  }
  function getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {
    canDeactivateChecks: [],
    canActivateChecks: []
  }) {
    const prevChildren = nodeChildrenAsMap(currNode);
    futureNode.children.forEach((c) => {
      getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);
      delete prevChildren[c.value.outlet];
    });
    Object.entries(prevChildren).forEach(([k, v]) => deactivateRouteAndItsChildren(v, contexts.getContext(k), checks));
    return checks;
  }
  function getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {
    canDeactivateChecks: [],
    canActivateChecks: []
  }) {
    const future = futureNode.value;
    const curr = currNode ? currNode.value : null;
    const context2 = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;
    if (curr && future.routeConfig === curr.routeConfig) {
      const shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);
      if (shouldRun) {
        checks.canActivateChecks.push(new CanActivate(futurePath));
      } else {
        future.data = curr.data;
        future._resolvedData = curr._resolvedData;
      }
      if (future.component) {
        getChildRouteGuards(futureNode, currNode, context2 ? context2.children : null, futurePath, checks);
      } else {
        getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);
      }
      if (shouldRun && context2 && context2.outlet && context2.outlet.isActivated) {
        checks.canDeactivateChecks.push(new CanDeactivate(context2.outlet.component, curr));
      }
    } else {
      if (curr) {
        deactivateRouteAndItsChildren(currNode, context2, checks);
      }
      checks.canActivateChecks.push(new CanActivate(futurePath));
      if (future.component) {
        getChildRouteGuards(futureNode, null, context2 ? context2.children : null, futurePath, checks);
      } else {
        getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);
      }
    }
    return checks;
  }
  function shouldRunGuardsAndResolvers(curr, future, mode) {
    if (typeof mode === "function") {
      return mode(curr, future);
    }
    switch (mode) {
      case "pathParamsChange":
        return !equalPath(curr.url, future.url);
      case "pathParamsOrQueryParamsChange":
        return !equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams);
      case "always":
        return true;
      case "paramsOrQueryParamsChange":
        return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);
      case "paramsChange":
      default:
        return !equalParamsAndUrlSegments(curr, future);
    }
  }
  function deactivateRouteAndItsChildren(route, context2, checks) {
    const children = nodeChildrenAsMap(route);
    const r = route.value;
    Object.entries(children).forEach(([childName, node]) => {
      if (!r.component) {
        deactivateRouteAndItsChildren(node, context2, checks);
      } else if (context2) {
        deactivateRouteAndItsChildren(node, context2.children.getContext(childName), checks);
      } else {
        deactivateRouteAndItsChildren(node, null, checks);
      }
    });
    if (!r.component) {
      checks.canDeactivateChecks.push(new CanDeactivate(null, r));
    } else if (context2 && context2.outlet && context2.outlet.isActivated) {
      checks.canDeactivateChecks.push(new CanDeactivate(context2.outlet.component, r));
    } else {
      checks.canDeactivateChecks.push(new CanDeactivate(null, r));
    }
  }
  function isFunction2(v) {
    return typeof v === "function";
  }
  function isBoolean(v) {
    return typeof v === "boolean";
  }
  function isCanLoad(guard) {
    return guard && isFunction2(guard.canLoad);
  }
  function isCanActivate(guard) {
    return guard && isFunction2(guard.canActivate);
  }
  function isCanActivateChild(guard) {
    return guard && isFunction2(guard.canActivateChild);
  }
  function isCanDeactivate(guard) {
    return guard && isFunction2(guard.canDeactivate);
  }
  function isCanMatch(guard) {
    return guard && isFunction2(guard.canMatch);
  }
  function isEmptyError(e2) {
    return e2 instanceof EmptyError || e2?.name === "EmptyError";
  }
  function prioritizedGuardValue() {
    return switchMap((obs) => {
      return combineLatest(obs.map((o) => o.pipe(take(1), startWith(INITIAL_VALUE)))).pipe(map((results) => {
        for (const result of results) {
          if (result === true) {
            continue;
          } else if (result === INITIAL_VALUE) {
            return INITIAL_VALUE;
          } else if (result === false || result instanceof UrlTree) {
            return result;
          }
        }
        return true;
      }), filter((item) => item !== INITIAL_VALUE), take(1));
    });
  }
  function checkGuards(injector, forwardEvent) {
    return mergeMap((t) => {
      const { targetSnapshot, currentSnapshot, guards: { canActivateChecks, canDeactivateChecks } } = t;
      if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {
        return of({ ...t, guardsResult: true });
      }
      return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, injector).pipe(mergeMap((canDeactivate) => {
        return canDeactivate && isBoolean(canDeactivate) ? runCanActivateChecks(targetSnapshot, canActivateChecks, injector, forwardEvent) : of(canDeactivate);
      }), map((guardsResult) => ({ ...t, guardsResult })));
    });
  }
  function runCanDeactivateChecks(checks, futureRSS, currRSS, injector) {
    return from(checks).pipe(mergeMap((check) => runCanDeactivate(check.component, check.route, currRSS, futureRSS, injector)), first((result) => {
      return result !== true;
    }, true));
  }
  function runCanActivateChecks(futureSnapshot, checks, injector, forwardEvent) {
    return from(checks).pipe(concatMap((check) => {
      return concat(fireChildActivationStart(check.route.parent, forwardEvent), fireActivationStart(check.route, forwardEvent), runCanActivateChild(futureSnapshot, check.path, injector), runCanActivate(futureSnapshot, check.route, injector));
    }), first((result) => {
      return result !== true;
    }, true));
  }
  function fireActivationStart(snapshot, forwardEvent) {
    if (snapshot !== null && forwardEvent) {
      forwardEvent(new ActivationStart(snapshot));
    }
    return of(true);
  }
  function fireChildActivationStart(snapshot, forwardEvent) {
    if (snapshot !== null && forwardEvent) {
      forwardEvent(new ChildActivationStart(snapshot));
    }
    return of(true);
  }
  function runCanActivate(futureRSS, futureARS, injector) {
    const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;
    if (!canActivate || canActivate.length === 0)
      return of(true);
    const canActivateObservables = canActivate.map((canActivate2) => {
      return defer(() => {
        const closestInjector = getClosestRouteInjector(futureARS) ?? injector;
        const guard = getTokenOrFunctionIdentity(canActivate2, closestInjector);
        const guardVal = isCanActivate(guard) ? guard.canActivate(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));
        return wrapIntoObservable(guardVal).pipe(first());
      });
    });
    return of(canActivateObservables).pipe(prioritizedGuardValue());
  }
  function runCanActivateChild(futureRSS, path, injector) {
    const futureARS = path[path.length - 1];
    const canActivateChildGuards = path.slice(0, path.length - 1).reverse().map((p) => getCanActivateChild(p)).filter((_) => _ !== null);
    const canActivateChildGuardsMapped = canActivateChildGuards.map((d) => {
      return defer(() => {
        const guardsMapped = d.guards.map((canActivateChild) => {
          const closestInjector = getClosestRouteInjector(d.node) ?? injector;
          const guard = getTokenOrFunctionIdentity(canActivateChild, closestInjector);
          const guardVal = isCanActivateChild(guard) ? guard.canActivateChild(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));
          return wrapIntoObservable(guardVal).pipe(first());
        });
        return of(guardsMapped).pipe(prioritizedGuardValue());
      });
    });
    return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());
  }
  function runCanDeactivate(component, currARS, currRSS, futureRSS, injector) {
    const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;
    if (!canDeactivate || canDeactivate.length === 0)
      return of(true);
    const canDeactivateObservables = canDeactivate.map((c) => {
      const closestInjector = getClosestRouteInjector(currARS) ?? injector;
      const guard = getTokenOrFunctionIdentity(c, closestInjector);
      const guardVal = isCanDeactivate(guard) ? guard.canDeactivate(component, currARS, currRSS, futureRSS) : runInInjectionContext(closestInjector, () => guard(component, currARS, currRSS, futureRSS));
      return wrapIntoObservable(guardVal).pipe(first());
    });
    return of(canDeactivateObservables).pipe(prioritizedGuardValue());
  }
  function runCanLoadGuards(injector, route, segments, urlSerializer) {
    const canLoad = route.canLoad;
    if (canLoad === void 0 || canLoad.length === 0) {
      return of(true);
    }
    const canLoadObservables = canLoad.map((injectionToken) => {
      const guard = getTokenOrFunctionIdentity(injectionToken, injector);
      const guardVal = isCanLoad(guard) ? guard.canLoad(route, segments) : runInInjectionContext(injector, () => guard(route, segments));
      return wrapIntoObservable(guardVal);
    });
    return of(canLoadObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));
  }
  function redirectIfUrlTree(urlSerializer) {
    return pipe(tap((result) => {
      if (!isUrlTree(result))
        return;
      throw redirectingNavigationError(urlSerializer, result);
    }), map((result) => result === true));
  }
  function runCanMatchGuards(injector, route, segments, urlSerializer) {
    const canMatch = route.canMatch;
    if (!canMatch || canMatch.length === 0)
      return of(true);
    const canMatchObservables = canMatch.map((injectionToken) => {
      const guard = getTokenOrFunctionIdentity(injectionToken, injector);
      const guardVal = isCanMatch(guard) ? guard.canMatch(route, segments) : runInInjectionContext(injector, () => guard(route, segments));
      return wrapIntoObservable(guardVal);
    });
    return of(canMatchObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));
  }
  function noMatch$1(segmentGroup) {
    return throwError(new NoMatch(segmentGroup));
  }
  function namedOutletsRedirect(redirectTo) {
    return throwError(new RuntimeError(4e3, (typeof ngDevMode === "undefined" || ngDevMode) && `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`));
  }
  function canLoadFails(route) {
    return throwError(navigationCancelingError((typeof ngDevMode === "undefined" || ngDevMode) && `Cannot load children because the guard of the route "path: '${route.path}'" returned false`, NavigationCancellationCode.GuardRejected));
  }
  function matchWithChecks(segmentGroup, route, segments, injector, urlSerializer) {
    const result = match(segmentGroup, route, segments);
    if (!result.matched) {
      return of(result);
    }
    injector = getOrCreateRouteInjectorIfNeeded(route, injector);
    return runCanMatchGuards(injector, route, segments, urlSerializer).pipe(map((v) => v === true ? result : { ...noMatch }));
  }
  function match(segmentGroup, route, segments) {
    if (route.path === "**") {
      return createWildcardMatchResult(segments);
    }
    if (route.path === "") {
      if (route.pathMatch === "full" && (segmentGroup.hasChildren() || segments.length > 0)) {
        return { ...noMatch };
      }
      return {
        matched: true,
        consumedSegments: [],
        remainingSegments: segments,
        parameters: {},
        positionalParamSegments: {}
      };
    }
    const matcher = route.matcher || defaultUrlMatcher;
    const res = matcher(segments, segmentGroup, route);
    if (!res)
      return { ...noMatch };
    const posParams = {};
    Object.entries(res.posParams ?? {}).forEach(([k, v]) => {
      posParams[k] = v.path;
    });
    const parameters = res.consumed.length > 0 ? { ...posParams, ...res.consumed[res.consumed.length - 1].parameters } : posParams;
    return {
      matched: true,
      consumedSegments: res.consumed,
      remainingSegments: segments.slice(res.consumed.length),
      // TODO(atscott): investigate combining parameters and positionalParamSegments
      parameters,
      positionalParamSegments: res.posParams ?? {}
    };
  }
  function createWildcardMatchResult(segments) {
    return {
      matched: true,
      parameters: segments.length > 0 ? last3(segments).parameters : {},
      consumedSegments: segments,
      remainingSegments: [],
      positionalParamSegments: {}
    };
  }
  function split(segmentGroup, consumedSegments, slicedSegments, config4) {
    if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config4)) {
      const s2 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(config4, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
      return { segmentGroup: s2, slicedSegments: [] };
    }
    if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config4)) {
      const s2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config4, segmentGroup.children));
      return { segmentGroup: s2, slicedSegments };
    }
    const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
    return { segmentGroup: s, slicedSegments };
  }
  function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes6, children) {
    const res = {};
    for (const r of routes6) {
      if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
        const s = new UrlSegmentGroup([], {});
        res[getOutlet(r)] = s;
      }
    }
    return { ...children, ...res };
  }
  function createChildrenForEmptyPaths(routes6, primarySegment) {
    const res = {};
    res[PRIMARY_OUTLET] = primarySegment;
    for (const r of routes6) {
      if (r.path === "" && getOutlet(r) !== PRIMARY_OUTLET) {
        const s = new UrlSegmentGroup([], {});
        res[getOutlet(r)] = s;
      }
    }
    return res;
  }
  function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes6) {
    return routes6.some((r) => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);
  }
  function containsEmptyPathMatches(segmentGroup, slicedSegments, routes6) {
    return routes6.some((r) => emptyPathMatch(segmentGroup, slicedSegments, r));
  }
  function emptyPathMatch(segmentGroup, slicedSegments, r) {
    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === "full") {
      return false;
    }
    return r.path === "";
  }
  function isImmediateMatch(route, rawSegment, segments, outlet) {
    if (getOutlet(route) !== outlet && (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {
      return false;
    }
    return match(rawSegment, route, segments).matched;
  }
  function noLeftoversInUrl(segmentGroup, segments, outlet) {
    return segments.length === 0 && !segmentGroup.children[outlet];
  }
  function recognize$1(injector, configLoader, rootComponentType, config4, urlTree, urlSerializer, paramsInheritanceStrategy = "emptyOnly") {
    return new Recognizer(injector, configLoader, rootComponentType, config4, urlTree, paramsInheritanceStrategy, urlSerializer).recognize();
  }
  function sortActivatedRouteSnapshots(nodes) {
    nodes.sort((a, b) => {
      if (a.value.outlet === PRIMARY_OUTLET)
        return -1;
      if (b.value.outlet === PRIMARY_OUTLET)
        return 1;
      return a.value.outlet.localeCompare(b.value.outlet);
    });
  }
  function hasEmptyPathConfig(node) {
    const config4 = node.value.routeConfig;
    return config4 && config4.path === "";
  }
  function mergeEmptyPathMatches(nodes) {
    const result = [];
    const mergedNodes = /* @__PURE__ */ new Set();
    for (const node of nodes) {
      if (!hasEmptyPathConfig(node)) {
        result.push(node);
        continue;
      }
      const duplicateEmptyPathNode = result.find((resultNode) => node.value.routeConfig === resultNode.value.routeConfig);
      if (duplicateEmptyPathNode !== void 0) {
        duplicateEmptyPathNode.children.push(...node.children);
        mergedNodes.add(duplicateEmptyPathNode);
      } else {
        result.push(node);
      }
    }
    for (const mergedNode of mergedNodes) {
      const mergedChildren = mergeEmptyPathMatches(mergedNode.children);
      result.push(new TreeNode(mergedNode.value, mergedChildren));
    }
    return result.filter((n) => !mergedNodes.has(n));
  }
  function checkOutletNameUniqueness(nodes) {
    const names = {};
    nodes.forEach((n) => {
      const routeWithSameOutletName = names[n.value.outlet];
      if (routeWithSameOutletName) {
        const p = routeWithSameOutletName.url.map((s) => s.toString()).join("/");
        const c = n.value.url.map((s) => s.toString()).join("/");
        throw new RuntimeError(4006, (typeof ngDevMode === "undefined" || ngDevMode) && `Two segments cannot have the same outlet name: '${p}' and '${c}'.`);
      }
      names[n.value.outlet] = n.value;
    });
  }
  function getData(route) {
    return route.data || {};
  }
  function getResolve(route) {
    return route.resolve || {};
  }
  function recognize(injector, configLoader, rootComponentType, config4, serializer2, paramsInheritanceStrategy) {
    return mergeMap((t) => recognize$1(injector, configLoader, rootComponentType, config4, t.extractedUrl, serializer2, paramsInheritanceStrategy).pipe(map(({ state: targetSnapshot, tree: urlAfterRedirects }) => {
      return { ...t, targetSnapshot, urlAfterRedirects };
    })));
  }
  function resolveData(paramsInheritanceStrategy, injector) {
    return mergeMap((t) => {
      const { targetSnapshot, guards: { canActivateChecks } } = t;
      if (!canActivateChecks.length) {
        return of(t);
      }
      const routesWithResolversToRun = new Set(canActivateChecks.map((check) => check.route));
      const routesNeedingDataUpdates = /* @__PURE__ */ new Set();
      for (const route of routesWithResolversToRun) {
        if (routesNeedingDataUpdates.has(route)) {
          continue;
        }
        for (const newRoute of flattenRouteTree(route)) {
          routesNeedingDataUpdates.add(newRoute);
        }
      }
      let routesProcessed = 0;
      return from(routesNeedingDataUpdates).pipe(concatMap((route) => {
        if (routesWithResolversToRun.has(route)) {
          return runResolve(route, targetSnapshot, paramsInheritanceStrategy, injector);
        } else {
          route.data = getInherited(route, route.parent, paramsInheritanceStrategy).resolve;
          return of(void 0);
        }
      }), tap(() => routesProcessed++), takeLast(1), mergeMap((_) => routesProcessed === routesNeedingDataUpdates.size ? of(t) : EMPTY));
    });
  }
  function flattenRouteTree(route) {
    const descendants = route.children.map((child) => flattenRouteTree(child)).flat();
    return [route, ...descendants];
  }
  function runResolve(futureARS, futureRSS, paramsInheritanceStrategy, injector) {
    const config4 = futureARS.routeConfig;
    const resolve = futureARS._resolve;
    if (config4?.title !== void 0 && !hasStaticTitle(config4)) {
      resolve[RouteTitleKey] = config4.title;
    }
    return resolveNode(resolve, futureARS, futureRSS, injector).pipe(map((resolvedData) => {
      futureARS._resolvedData = resolvedData;
      futureARS.data = getInherited(futureARS, futureARS.parent, paramsInheritanceStrategy).resolve;
      return null;
    }));
  }
  function resolveNode(resolve, futureARS, futureRSS, injector) {
    const keys = getDataKeys(resolve);
    if (keys.length === 0) {
      return of({});
    }
    const data = {};
    return from(keys).pipe(mergeMap((key) => getResolver(resolve[key], futureARS, futureRSS, injector).pipe(first(), tap((value) => {
      data[key] = value;
    }))), takeLast(1), mapTo(data), catchError((e2) => isEmptyError(e2) ? EMPTY : throwError(e2)));
  }
  function getResolver(injectionToken, futureARS, futureRSS, injector) {
    const closestInjector = getClosestRouteInjector(futureARS) ?? injector;
    const resolver = getTokenOrFunctionIdentity(injectionToken, closestInjector);
    const resolverValue = resolver.resolve ? resolver.resolve(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => resolver(futureARS, futureRSS));
    return wrapIntoObservable(resolverValue);
  }
  function switchTap(next) {
    return switchMap((v) => {
      const nextResult = next(v);
      if (nextResult) {
        return from(nextResult).pipe(map(() => v));
      }
      return of(v);
    });
  }
  function loadChildren(route, compiler, parentInjector, onLoadEndListener) {
    return wrapIntoObservable(route.loadChildren()).pipe(map(maybeUnwrapDefaultExport), mergeMap((t) => {
      if (t instanceof NgModuleFactory$1 || Array.isArray(t)) {
        return of(t);
      } else {
        return from(compiler.compileModuleAsync(t));
      }
    }), map((factoryOrRoutes) => {
      if (onLoadEndListener) {
        onLoadEndListener(route);
      }
      let injector;
      let rawRoutes;
      let requireStandaloneComponents = false;
      if (Array.isArray(factoryOrRoutes)) {
        rawRoutes = factoryOrRoutes;
        requireStandaloneComponents = true;
      } else {
        injector = factoryOrRoutes.create(parentInjector).injector;
        rawRoutes = injector.get(ROUTES, [], { optional: true, self: true }).flat();
      }
      const routes6 = rawRoutes.map(standardizeConfig);
      (typeof ngDevMode === "undefined" || ngDevMode) && validateConfig(routes6, route.path, requireStandaloneComponents);
      return { routes: routes6, injector };
    }));
  }
  function isWrappedDefaultExport(value) {
    return value && typeof value === "object" && "default" in value;
  }
  function maybeUnwrapDefaultExport(input2) {
    return isWrappedDefaultExport(input2) ? input2["default"] : input2;
  }
  function createViewTransition(injector, from2, to) {
    const transitionOptions = injector.get(VIEW_TRANSITION_OPTIONS);
    const document2 = injector.get(DOCUMENT2);
    return injector.get(NgZone).runOutsideAngular(() => {
      if (!document2.startViewTransition || transitionOptions.skipNextTransition) {
        transitionOptions.skipNextTransition = false;
        return Promise.resolve();
      }
      let resolveViewTransitionStarted;
      const viewTransitionStarted = new Promise((resolve) => {
        resolveViewTransitionStarted = resolve;
      });
      const transition = document2.startViewTransition(() => {
        resolveViewTransitionStarted();
        return createRenderPromise(injector);
      });
      const { onViewTransitionCreated } = transitionOptions;
      if (onViewTransitionCreated) {
        runInInjectionContext(injector, () => onViewTransitionCreated({ transition, from: from2, to }));
      }
      return viewTransitionStarted;
    });
  }
  function createRenderPromise(injector) {
    return new Promise((resolve) => {
      afterNextRender(resolve, { injector });
    });
  }
  function isBrowserTriggeredNavigation(source) {
    return source !== IMPERATIVE_NAVIGATION;
  }
  function afterNextNavigation(router, action) {
    router.events.pipe(filter((e2) => e2 instanceof NavigationEnd || e2 instanceof NavigationCancel || e2 instanceof NavigationError || e2 instanceof NavigationSkipped), map((e2) => {
      if (e2 instanceof NavigationEnd || e2 instanceof NavigationSkipped) {
        return NavigationResult.COMPLETE;
      }
      const redirecting = e2 instanceof NavigationCancel ? e2.code === NavigationCancellationCode.Redirect || e2.code === NavigationCancellationCode.SupersededByNewNavigation : false;
      return redirecting ? NavigationResult.REDIRECTING : NavigationResult.FAILED;
    }), filter((result) => result !== NavigationResult.REDIRECTING), take(1)).subscribe(() => {
      action();
    });
  }
  function defaultErrorHandler2(error2) {
    throw error2;
  }
  function validateCommands(commands) {
    for (let i = 0; i < commands.length; i++) {
      const cmd = commands[i];
      if (cmd == null) {
        throw new RuntimeError(4008, (typeof ngDevMode === "undefined" || ngDevMode) && `The requested path contains ${cmd} segment at index ${i}`);
      }
    }
  }
  function isPublicRouterEvent(e2) {
    return !(e2 instanceof BeforeActivateRoutes) && !(e2 instanceof RedirectRequest);
  }
  function isActiveMatchOptions(options) {
    return !!options.paths;
  }
  function rootRoute(router) {
    return router.routerState.root;
  }
  function routerFeature(kind, providers) {
    return { \u0275kind: kind, \u0275providers: providers };
  }
  function getBootstrapListener() {
    const injector = inject(Injector);
    return (bootstrappedComponentRef) => {
      const ref = injector.get(ApplicationRef);
      if (bootstrappedComponentRef !== ref.components[0]) {
        return;
      }
      const router = injector.get(Router);
      const bootstrapDone = injector.get(BOOTSTRAP_DONE);
      if (injector.get(INITIAL_NAVIGATION) === 1) {
        router.initialNavigation();
      }
      injector.get(ROUTER_PRELOADER, null, InjectFlags.Optional)?.setUpPreloading();
      injector.get(ROUTER_SCROLLER, null, InjectFlags.Optional)?.init();
      router.resetRootComponentType(ref.componentTypes[0]);
      if (!bootstrapDone.closed) {
        bootstrapDone.next();
        bootstrapDone.complete();
        bootstrapDone.unsubscribe();
      }
    };
  }
  function withEnabledBlockingInitialNavigation() {
    const providers = [
      {
        provide: INITIAL_NAVIGATION,
        useValue: 0
        /* InitialNavigation.EnabledBlocking */
      },
      {
        provide: APP_INITIALIZER,
        multi: true,
        deps: [Injector],
        useFactory: (injector) => {
          const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve());
          return () => {
            return locationInitialized.then(() => {
              return new Promise((resolve) => {
                const router = injector.get(Router);
                const bootstrapDone = injector.get(BOOTSTRAP_DONE);
                afterNextNavigation(router, () => {
                  resolve(true);
                });
                injector.get(NavigationTransitions).afterPreactivation = () => {
                  resolve(true);
                  return bootstrapDone.closed ? of(void 0) : bootstrapDone;
                };
                router.initialNavigation();
              });
            });
          };
        }
      }
    ];
    return routerFeature(2, providers);
  }
  function withDisabledInitialNavigation() {
    const providers = [
      {
        provide: APP_INITIALIZER,
        multi: true,
        useFactory: () => {
          const router = inject(Router);
          return () => {
            router.setUpLocationChangeListener();
          };
        }
      },
      {
        provide: INITIAL_NAVIGATION,
        useValue: 2
        /* InitialNavigation.Disabled */
      }
    ];
    return routerFeature(3, providers);
  }
  function withDebugTracing() {
    let providers = [];
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      providers = [
        {
          provide: ENVIRONMENT_INITIALIZER,
          multi: true,
          useFactory: () => {
            const router = inject(Router);
            return () => router.events.subscribe((e2) => {
              console.group?.(`Router Event: ${e2.constructor.name}`);
              console.log(stringifyEvent(e2));
              console.log(e2);
              console.groupEnd?.();
            });
          }
        }
      ];
    } else {
      providers = [];
    }
    return routerFeature(1, providers);
  }
  function withPreloading(preloadingStrategy) {
    const providers = [
      { provide: ROUTER_PRELOADER, useExisting: RouterPreloader },
      { provide: PreloadingStrategy, useExisting: preloadingStrategy }
    ];
    return routerFeature(0, providers);
  }
  function withComponentInputBinding() {
    const providers = [
      RoutedComponentInputBinder,
      { provide: INPUT_BINDER, useExisting: RoutedComponentInputBinder }
    ];
    return routerFeature(8, providers);
  }
  function withViewTransitions(options) {
    const providers = [
      { provide: CREATE_VIEW_TRANSITION, useValue: createViewTransition },
      {
        provide: VIEW_TRANSITION_OPTIONS,
        useValue: { skipNextTransition: !!options?.skipInitialTransition, ...options }
      }
    ];
    return routerFeature(9, providers);
  }
  function provideRouterScroller() {
    return {
      provide: ROUTER_SCROLLER,
      useFactory: () => {
        const viewportScroller = inject(ViewportScroller);
        const zone = inject(NgZone);
        const config4 = inject(ROUTER_CONFIGURATION);
        const transitions = inject(NavigationTransitions);
        const urlSerializer = inject(UrlSerializer);
        if (config4.scrollOffset) {
          viewportScroller.setOffset(config4.scrollOffset);
        }
        return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, config4);
      }
    };
  }
  function provideHashLocationStrategy() {
    return { provide: LocationStrategy, useClass: HashLocationStrategy };
  }
  function providePathLocationStrategy() {
    return { provide: LocationStrategy, useClass: PathLocationStrategy };
  }
  function provideForRootGuard(router) {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && router) {
      throw new RuntimeError(4007, `The Router was provided more than once. This can happen if 'forRoot' is used outside of the root injector. Lazy loaded modules should use RouterModule.forChild() instead.`);
    }
    return "guarded";
  }
  function provideInitialNavigation(config4) {
    return [
      config4.initialNavigation === "disabled" ? withDisabledInitialNavigation().\u0275providers : [],
      config4.initialNavigation === "enabledBlocking" ? withEnabledBlockingInitialNavigation().\u0275providers : []
    ];
  }
  function provideRouterInitializer() {
    return [
      // ROUTER_INITIALIZER token should be removed. It's public API but shouldn't be. We can just
      // have `getBootstrapListener` directly attached to APP_BOOTSTRAP_LISTENER.
      { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener },
      { provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER }
    ];
  }
  var PRIMARY_OUTLET, RouteTitleKey, ParamsAsMap, pathCompareMap, paramCompareMap, UrlTree, UrlSegmentGroup, UrlSegment, UrlSerializer, DefaultUrlSerializer, DEFAULT_SERIALIZER, SEGMENT_RE, MATRIX_PARAM_SEGMENT_RE, QUERY_PARAM_RE, QUERY_PARAM_VALUE_RE, UrlParser, Navigation, Position, IMPERATIVE_NAVIGATION, EventType, RouterEvent, NavigationStart, NavigationEnd, NavigationCancellationCode, NavigationSkippedCode, NavigationCancel, NavigationSkipped, NavigationError, RoutesRecognized, GuardsCheckStart, GuardsCheckEnd, ResolveStart, ResolveEnd, RouteConfigLoadStart, RouteConfigLoadEnd, ChildActivationStart, ChildActivationEnd, ActivationStart, ActivationEnd, Scroll, BeforeActivateRoutes, RedirectRequest, OutletContext, ChildrenOutletContexts, Tree, TreeNode, RouterState, ActivatedRoute, ActivatedRouteSnapshot, RouterStateSnapshot, RouterOutlet, OutletInjector, INPUT_BINDER, RoutedComponentInputBinder, NAVIGATION_CANCELING_ERROR, \u0275EmptyOutletComponent, warnedAboutUnsupportedInputBinding, activateRoutes, ActivateRoutes, CanActivate, CanDeactivate, INITIAL_VALUE, NoMatch, AbsoluteRedirect, ApplyRedirects, noMatch, NoLeftoversInUrl, MAX_ALLOWED_REDIRECTS, Recognizer, TitleStrategy, DefaultTitleStrategy, ROUTER_CONFIGURATION, ROUTES, RouterConfigLoader, UrlHandlingStrategy, DefaultUrlHandlingStrategy, CREATE_VIEW_TRANSITION, VIEW_TRANSITION_OPTIONS, NavigationTransitions, RouteReuseStrategy, BaseRouteReuseStrategy, DefaultRouteReuseStrategy, StateManager, HistoryStateManager, NavigationResult, exactMatchOptions, subsetMatchOptions, Router, RouterLink, RouterLinkActive, PreloadingStrategy, PreloadAllModules, NoPreloading, RouterPreloader, ROUTER_SCROLLER, RouterScroller, ROUTER_IS_PROVIDED, BOOTSTRAP_DONE, INITIAL_NAVIGATION, ROUTER_PRELOADER, ROUTER_DIRECTIVES, ROUTER_FORROOT_GUARD, ROUTER_PROVIDERS, RouterModule, ROUTER_INITIALIZER, VERSION6;
  var init_router = __esm({
    "node_modules/@angular/router/fesm2022/router.mjs"() {
      init_core();
      init_core();
      init_esm5();
      init_common();
      init_common();
      init_operators();
      init_platform_browser();
      PRIMARY_OUTLET = "primary";
      RouteTitleKey = /* @__PURE__ */ Symbol("RouteTitle");
      ParamsAsMap = class {
        constructor(params) {
          this.params = params || {};
        }
        has(name) {
          return Object.prototype.hasOwnProperty.call(this.params, name);
        }
        get(name) {
          if (this.has(name)) {
            const v = this.params[name];
            return Array.isArray(v) ? v[0] : v;
          }
          return null;
        }
        getAll(name) {
          if (this.has(name)) {
            const v = this.params[name];
            return Array.isArray(v) ? v : [v];
          }
          return [];
        }
        get keys() {
          return Object.keys(this.params);
        }
      };
      pathCompareMap = {
        "exact": equalSegmentGroups,
        "subset": containsSegmentGroup
      };
      paramCompareMap = {
        "exact": equalParams,
        "subset": containsParams,
        "ignored": () => true
      };
      UrlTree = class {
        constructor(root = new UrlSegmentGroup([], {}), queryParams = {}, fragment = null) {
          this.root = root;
          this.queryParams = queryParams;
          this.fragment = fragment;
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            if (root.segments.length > 0) {
              throw new RuntimeError(4015, "The root `UrlSegmentGroup` should not contain `segments`. Instead, these segments belong in the `children` so they can be associated with a named outlet.");
            }
          }
        }
        get queryParamMap() {
          this._queryParamMap ??= convertToParamMap(this.queryParams);
          return this._queryParamMap;
        }
        /** @docsNotRequired */
        toString() {
          return DEFAULT_SERIALIZER.serialize(this);
        }
      };
      UrlSegmentGroup = class {
        constructor(segments, children) {
          this.segments = segments;
          this.children = children;
          this.parent = null;
          Object.values(children).forEach((v) => v.parent = this);
        }
        /** Whether the segment has child segments */
        hasChildren() {
          return this.numberOfChildren > 0;
        }
        /** Number of child segments */
        get numberOfChildren() {
          return Object.keys(this.children).length;
        }
        /** @docsNotRequired */
        toString() {
          return serializePaths(this);
        }
      };
      UrlSegment = class {
        constructor(path, parameters) {
          this.path = path;
          this.parameters = parameters;
        }
        get parameterMap() {
          this._parameterMap ??= convertToParamMap(this.parameters);
          return this._parameterMap;
        }
        /** @docsNotRequired */
        toString() {
          return serializePath(this);
        }
      };
      UrlSerializer = class _UrlSerializer {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _UrlSerializer, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _UrlSerializer, providedIn: "root", useFactory: () => new DefaultUrlSerializer() });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: UrlSerializer, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root", useFactory: () => new DefaultUrlSerializer() }]
      }] });
      DefaultUrlSerializer = class {
        /** Parses a url into a `UrlTree` */
        parse(url) {
          const p = new UrlParser(url);
          return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
        }
        /** Converts a `UrlTree` into a url */
        serialize(tree2) {
          const segment = `/${serializeSegment(tree2.root, true)}`;
          const query = serializeQueryParams(tree2.queryParams);
          const fragment = typeof tree2.fragment === `string` ? `#${encodeUriFragment(tree2.fragment)}` : "";
          return `${segment}${query}${fragment}`;
        }
      };
      DEFAULT_SERIALIZER = new DefaultUrlSerializer();
      SEGMENT_RE = /^[^\/()?;#]+/;
      MATRIX_PARAM_SEGMENT_RE = /^[^\/()?;=#]+/;
      QUERY_PARAM_RE = /^[^=?&#]+/;
      QUERY_PARAM_VALUE_RE = /^[^&#]+/;
      UrlParser = class {
        constructor(url) {
          this.url = url;
          this.remaining = url;
        }
        parseRootSegment() {
          this.consumeOptional("/");
          if (this.remaining === "" || this.peekStartsWith("?") || this.peekStartsWith("#")) {
            return new UrlSegmentGroup([], {});
          }
          return new UrlSegmentGroup([], this.parseChildren());
        }
        parseQueryParams() {
          const params = {};
          if (this.consumeOptional("?")) {
            do {
              this.parseQueryParam(params);
            } while (this.consumeOptional("&"));
          }
          return params;
        }
        parseFragment() {
          return this.consumeOptional("#") ? decodeURIComponent(this.remaining) : null;
        }
        parseChildren() {
          if (this.remaining === "") {
            return {};
          }
          this.consumeOptional("/");
          const segments = [];
          if (!this.peekStartsWith("(")) {
            segments.push(this.parseSegment());
          }
          while (this.peekStartsWith("/") && !this.peekStartsWith("//") && !this.peekStartsWith("/(")) {
            this.capture("/");
            segments.push(this.parseSegment());
          }
          let children = {};
          if (this.peekStartsWith("/(")) {
            this.capture("/");
            children = this.parseParens(true);
          }
          let res = {};
          if (this.peekStartsWith("(")) {
            res = this.parseParens(false);
          }
          if (segments.length > 0 || Object.keys(children).length > 0) {
            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);
          }
          return res;
        }
        // parse a segment with its matrix parameters
        // ie `name;k1=v1;k2`
        parseSegment() {
          const path = matchSegments(this.remaining);
          if (path === "" && this.peekStartsWith(";")) {
            throw new RuntimeError(4009, (typeof ngDevMode === "undefined" || ngDevMode) && `Empty path url segment cannot have parameters: '${this.remaining}'.`);
          }
          this.capture(path);
          return new UrlSegment(decode(path), this.parseMatrixParams());
        }
        parseMatrixParams() {
          const params = {};
          while (this.consumeOptional(";")) {
            this.parseParam(params);
          }
          return params;
        }
        parseParam(params) {
          const key = matchMatrixKeySegments(this.remaining);
          if (!key) {
            return;
          }
          this.capture(key);
          let value = "";
          if (this.consumeOptional("=")) {
            const valueMatch = matchSegments(this.remaining);
            if (valueMatch) {
              value = valueMatch;
              this.capture(value);
            }
          }
          params[decode(key)] = decode(value);
        }
        // Parse a single query parameter `name[=value]`
        parseQueryParam(params) {
          const key = matchQueryParams(this.remaining);
          if (!key) {
            return;
          }
          this.capture(key);
          let value = "";
          if (this.consumeOptional("=")) {
            const valueMatch = matchUrlQueryParamValue(this.remaining);
            if (valueMatch) {
              value = valueMatch;
              this.capture(value);
            }
          }
          const decodedKey = decodeQuery(key);
          const decodedVal = decodeQuery(value);
          if (params.hasOwnProperty(decodedKey)) {
            let currentVal = params[decodedKey];
            if (!Array.isArray(currentVal)) {
              currentVal = [currentVal];
              params[decodedKey] = currentVal;
            }
            currentVal.push(decodedVal);
          } else {
            params[decodedKey] = decodedVal;
          }
        }
        // parse `(a/b//outlet_name:c/d)`
        parseParens(allowPrimary) {
          const segments = {};
          this.capture("(");
          while (!this.consumeOptional(")") && this.remaining.length > 0) {
            const path = matchSegments(this.remaining);
            const next = this.remaining[path.length];
            if (next !== "/" && next !== ")" && next !== ";") {
              throw new RuntimeError(4010, (typeof ngDevMode === "undefined" || ngDevMode) && `Cannot parse url '${this.url}'`);
            }
            let outletName = void 0;
            if (path.indexOf(":") > -1) {
              outletName = path.slice(0, path.indexOf(":"));
              this.capture(outletName);
              this.capture(":");
            } else if (allowPrimary) {
              outletName = PRIMARY_OUTLET;
            }
            const children = this.parseChildren();
            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
            this.consumeOptional("//");
          }
          return segments;
        }
        peekStartsWith(str) {
          return this.remaining.startsWith(str);
        }
        // Consumes the prefix when it is present and returns whether it has been consumed
        consumeOptional(str) {
          if (this.peekStartsWith(str)) {
            this.remaining = this.remaining.substring(str.length);
            return true;
          }
          return false;
        }
        capture(str) {
          if (!this.consumeOptional(str)) {
            throw new RuntimeError(4011, (typeof ngDevMode === "undefined" || ngDevMode) && `Expected "${str}".`);
          }
        }
      };
      Navigation = class {
        constructor(isAbsolute, numberOfDoubleDots, commands) {
          this.isAbsolute = isAbsolute;
          this.numberOfDoubleDots = numberOfDoubleDots;
          this.commands = commands;
          if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
            throw new RuntimeError(4003, (typeof ngDevMode === "undefined" || ngDevMode) && "Root segment cannot have matrix parameters");
          }
          const cmdWithOutlet = commands.find(isCommandWithOutlets);
          if (cmdWithOutlet && cmdWithOutlet !== last3(commands)) {
            throw new RuntimeError(4004, (typeof ngDevMode === "undefined" || ngDevMode) && "{outlets:{}} has to be the last command");
          }
        }
        toRoot() {
          return this.isAbsolute && this.commands.length === 1 && this.commands[0] == "/";
        }
      };
      Position = class {
        constructor(segmentGroup, processChildren, index) {
          this.segmentGroup = segmentGroup;
          this.processChildren = processChildren;
          this.index = index;
        }
      };
      IMPERATIVE_NAVIGATION = "imperative";
      (function(EventType2) {
        EventType2[EventType2["NavigationStart"] = 0] = "NavigationStart";
        EventType2[EventType2["NavigationEnd"] = 1] = "NavigationEnd";
        EventType2[EventType2["NavigationCancel"] = 2] = "NavigationCancel";
        EventType2[EventType2["NavigationError"] = 3] = "NavigationError";
        EventType2[EventType2["RoutesRecognized"] = 4] = "RoutesRecognized";
        EventType2[EventType2["ResolveStart"] = 5] = "ResolveStart";
        EventType2[EventType2["ResolveEnd"] = 6] = "ResolveEnd";
        EventType2[EventType2["GuardsCheckStart"] = 7] = "GuardsCheckStart";
        EventType2[EventType2["GuardsCheckEnd"] = 8] = "GuardsCheckEnd";
        EventType2[EventType2["RouteConfigLoadStart"] = 9] = "RouteConfigLoadStart";
        EventType2[EventType2["RouteConfigLoadEnd"] = 10] = "RouteConfigLoadEnd";
        EventType2[EventType2["ChildActivationStart"] = 11] = "ChildActivationStart";
        EventType2[EventType2["ChildActivationEnd"] = 12] = "ChildActivationEnd";
        EventType2[EventType2["ActivationStart"] = 13] = "ActivationStart";
        EventType2[EventType2["ActivationEnd"] = 14] = "ActivationEnd";
        EventType2[EventType2["Scroll"] = 15] = "Scroll";
        EventType2[EventType2["NavigationSkipped"] = 16] = "NavigationSkipped";
      })(EventType || (EventType = {}));
      RouterEvent = class {
        constructor(id, url) {
          this.id = id;
          this.url = url;
        }
      };
      NavigationStart = class extends RouterEvent {
        constructor(id, url, navigationTrigger = "imperative", restoredState = null) {
          super(id, url);
          this.type = EventType.NavigationStart;
          this.navigationTrigger = navigationTrigger;
          this.restoredState = restoredState;
        }
        /** @docsNotRequired */
        toString() {
          return `NavigationStart(id: ${this.id}, url: '${this.url}')`;
        }
      };
      NavigationEnd = class extends RouterEvent {
        constructor(id, url, urlAfterRedirects) {
          super(id, url);
          this.urlAfterRedirects = urlAfterRedirects;
          this.type = EventType.NavigationEnd;
        }
        /** @docsNotRequired */
        toString() {
          return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;
        }
      };
      (function(NavigationCancellationCode2) {
        NavigationCancellationCode2[NavigationCancellationCode2["Redirect"] = 0] = "Redirect";
        NavigationCancellationCode2[NavigationCancellationCode2["SupersededByNewNavigation"] = 1] = "SupersededByNewNavigation";
        NavigationCancellationCode2[NavigationCancellationCode2["NoDataFromResolver"] = 2] = "NoDataFromResolver";
        NavigationCancellationCode2[NavigationCancellationCode2["GuardRejected"] = 3] = "GuardRejected";
      })(NavigationCancellationCode || (NavigationCancellationCode = {}));
      (function(NavigationSkippedCode2) {
        NavigationSkippedCode2[NavigationSkippedCode2["IgnoredSameUrlNavigation"] = 0] = "IgnoredSameUrlNavigation";
        NavigationSkippedCode2[NavigationSkippedCode2["IgnoredByUrlHandlingStrategy"] = 1] = "IgnoredByUrlHandlingStrategy";
      })(NavigationSkippedCode || (NavigationSkippedCode = {}));
      NavigationCancel = class extends RouterEvent {
        constructor(id, url, reason, code) {
          super(id, url);
          this.reason = reason;
          this.code = code;
          this.type = EventType.NavigationCancel;
        }
        /** @docsNotRequired */
        toString() {
          return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;
        }
      };
      NavigationSkipped = class extends RouterEvent {
        constructor(id, url, reason, code) {
          super(id, url);
          this.reason = reason;
          this.code = code;
          this.type = EventType.NavigationSkipped;
        }
      };
      NavigationError = class extends RouterEvent {
        constructor(id, url, error2, target) {
          super(id, url);
          this.error = error2;
          this.target = target;
          this.type = EventType.NavigationError;
        }
        /** @docsNotRequired */
        toString() {
          return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;
        }
      };
      RoutesRecognized = class extends RouterEvent {
        constructor(id, url, urlAfterRedirects, state) {
          super(id, url);
          this.urlAfterRedirects = urlAfterRedirects;
          this.state = state;
          this.type = EventType.RoutesRecognized;
        }
        /** @docsNotRequired */
        toString() {
          return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
        }
      };
      GuardsCheckStart = class extends RouterEvent {
        constructor(id, url, urlAfterRedirects, state) {
          super(id, url);
          this.urlAfterRedirects = urlAfterRedirects;
          this.state = state;
          this.type = EventType.GuardsCheckStart;
        }
        toString() {
          return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
        }
      };
      GuardsCheckEnd = class extends RouterEvent {
        constructor(id, url, urlAfterRedirects, state, shouldActivate) {
          super(id, url);
          this.urlAfterRedirects = urlAfterRedirects;
          this.state = state;
          this.shouldActivate = shouldActivate;
          this.type = EventType.GuardsCheckEnd;
        }
        toString() {
          return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;
        }
      };
      ResolveStart = class extends RouterEvent {
        constructor(id, url, urlAfterRedirects, state) {
          super(id, url);
          this.urlAfterRedirects = urlAfterRedirects;
          this.state = state;
          this.type = EventType.ResolveStart;
        }
        toString() {
          return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
        }
      };
      ResolveEnd = class extends RouterEvent {
        constructor(id, url, urlAfterRedirects, state) {
          super(id, url);
          this.urlAfterRedirects = urlAfterRedirects;
          this.state = state;
          this.type = EventType.ResolveEnd;
        }
        toString() {
          return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
        }
      };
      RouteConfigLoadStart = class {
        constructor(route) {
          this.route = route;
          this.type = EventType.RouteConfigLoadStart;
        }
        toString() {
          return `RouteConfigLoadStart(path: ${this.route.path})`;
        }
      };
      RouteConfigLoadEnd = class {
        constructor(route) {
          this.route = route;
          this.type = EventType.RouteConfigLoadEnd;
        }
        toString() {
          return `RouteConfigLoadEnd(path: ${this.route.path})`;
        }
      };
      ChildActivationStart = class {
        constructor(snapshot) {
          this.snapshot = snapshot;
          this.type = EventType.ChildActivationStart;
        }
        toString() {
          const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
          return `ChildActivationStart(path: '${path}')`;
        }
      };
      ChildActivationEnd = class {
        constructor(snapshot) {
          this.snapshot = snapshot;
          this.type = EventType.ChildActivationEnd;
        }
        toString() {
          const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
          return `ChildActivationEnd(path: '${path}')`;
        }
      };
      ActivationStart = class {
        constructor(snapshot) {
          this.snapshot = snapshot;
          this.type = EventType.ActivationStart;
        }
        toString() {
          const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
          return `ActivationStart(path: '${path}')`;
        }
      };
      ActivationEnd = class {
        constructor(snapshot) {
          this.snapshot = snapshot;
          this.type = EventType.ActivationEnd;
        }
        toString() {
          const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
          return `ActivationEnd(path: '${path}')`;
        }
      };
      Scroll = class {
        constructor(routerEvent, position, anchor) {
          this.routerEvent = routerEvent;
          this.position = position;
          this.anchor = anchor;
          this.type = EventType.Scroll;
        }
        toString() {
          const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;
          return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;
        }
      };
      BeforeActivateRoutes = class {
      };
      RedirectRequest = class {
        constructor(url) {
          this.url = url;
        }
      };
      OutletContext = class {
        constructor() {
          this.outlet = null;
          this.route = null;
          this.injector = null;
          this.children = new ChildrenOutletContexts();
          this.attachRef = null;
        }
      };
      ChildrenOutletContexts = class _ChildrenOutletContexts {
        constructor() {
          this.contexts = /* @__PURE__ */ new Map();
        }
        /** Called when a `RouterOutlet` directive is instantiated */
        onChildOutletCreated(childName, outlet) {
          const context2 = this.getOrCreateContext(childName);
          context2.outlet = outlet;
          this.contexts.set(childName, context2);
        }
        /**
         * Called when a `RouterOutlet` directive is destroyed.
         * We need to keep the context as the outlet could be destroyed inside a NgIf and might be
         * re-created later.
         */
        onChildOutletDestroyed(childName) {
          const context2 = this.getContext(childName);
          if (context2) {
            context2.outlet = null;
            context2.attachRef = null;
          }
        }
        /**
         * Called when the corresponding route is deactivated during navigation.
         * Because the component get destroyed, all children outlet are destroyed.
         */
        onOutletDeactivated() {
          const contexts = this.contexts;
          this.contexts = /* @__PURE__ */ new Map();
          return contexts;
        }
        onOutletReAttached(contexts) {
          this.contexts = contexts;
        }
        getOrCreateContext(childName) {
          let context2 = this.getContext(childName);
          if (!context2) {
            context2 = new OutletContext();
            this.contexts.set(childName, context2);
          }
          return context2;
        }
        getContext(childName) {
          return this.contexts.get(childName) || null;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _ChildrenOutletContexts, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _ChildrenOutletContexts, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: ChildrenOutletContexts, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }] });
      Tree = class {
        constructor(root) {
          this._root = root;
        }
        get root() {
          return this._root.value;
        }
        /**
         * @internal
         */
        parent(t) {
          const p = this.pathFromRoot(t);
          return p.length > 1 ? p[p.length - 2] : null;
        }
        /**
         * @internal
         */
        children(t) {
          const n = findNode(t, this._root);
          return n ? n.children.map((t2) => t2.value) : [];
        }
        /**
         * @internal
         */
        firstChild(t) {
          const n = findNode(t, this._root);
          return n && n.children.length > 0 ? n.children[0].value : null;
        }
        /**
         * @internal
         */
        siblings(t) {
          const p = findPath(t, this._root);
          if (p.length < 2)
            return [];
          const c = p[p.length - 2].children.map((c2) => c2.value);
          return c.filter((cc) => cc !== t);
        }
        /**
         * @internal
         */
        pathFromRoot(t) {
          return findPath(t, this._root).map((s) => s.value);
        }
      };
      TreeNode = class {
        constructor(value, children) {
          this.value = value;
          this.children = children;
        }
        toString() {
          return `TreeNode(${this.value})`;
        }
      };
      RouterState = class extends Tree {
        /** @internal */
        constructor(root, snapshot) {
          super(root);
          this.snapshot = snapshot;
          setRouterState(this, root);
        }
        toString() {
          return this.snapshot.toString();
        }
      };
      ActivatedRoute = class {
        /** @internal */
        constructor(urlSubject, paramsSubject, queryParamsSubject, fragmentSubject, dataSubject, outlet, component, futureSnapshot) {
          this.urlSubject = urlSubject;
          this.paramsSubject = paramsSubject;
          this.queryParamsSubject = queryParamsSubject;
          this.fragmentSubject = fragmentSubject;
          this.dataSubject = dataSubject;
          this.outlet = outlet;
          this.component = component;
          this._futureSnapshot = futureSnapshot;
          this.title = this.dataSubject?.pipe(map((d) => d[RouteTitleKey])) ?? of(void 0);
          this.url = urlSubject;
          this.params = paramsSubject;
          this.queryParams = queryParamsSubject;
          this.fragment = fragmentSubject;
          this.data = dataSubject;
        }
        /** The configuration used to match this route. */
        get routeConfig() {
          return this._futureSnapshot.routeConfig;
        }
        /** The root of the router state. */
        get root() {
          return this._routerState.root;
        }
        /** The parent of this route in the router state tree. */
        get parent() {
          return this._routerState.parent(this);
        }
        /** The first child of this route in the router state tree. */
        get firstChild() {
          return this._routerState.firstChild(this);
        }
        /** The children of this route in the router state tree. */
        get children() {
          return this._routerState.children(this);
        }
        /** The path from the root of the router state tree to this route. */
        get pathFromRoot() {
          return this._routerState.pathFromRoot(this);
        }
        /**
         * An Observable that contains a map of the required and optional parameters
         * specific to the route.
         * The map supports retrieving single and multiple values from the same parameter.
         */
        get paramMap() {
          this._paramMap ??= this.params.pipe(map((p) => convertToParamMap(p)));
          return this._paramMap;
        }
        /**
         * An Observable that contains a map of the query parameters available to all routes.
         * The map supports retrieving single and multiple values from the query parameter.
         */
        get queryParamMap() {
          this._queryParamMap ??= this.queryParams.pipe(map((p) => convertToParamMap(p)));
          return this._queryParamMap;
        }
        toString() {
          return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;
        }
      };
      ActivatedRouteSnapshot = class {
        /** The resolved route title */
        get title() {
          return this.data?.[RouteTitleKey];
        }
        /** @internal */
        constructor(url, params, queryParams, fragment, data, outlet, component, routeConfig, resolve) {
          this.url = url;
          this.params = params;
          this.queryParams = queryParams;
          this.fragment = fragment;
          this.data = data;
          this.outlet = outlet;
          this.component = component;
          this.routeConfig = routeConfig;
          this._resolve = resolve;
        }
        /** The root of the router state */
        get root() {
          return this._routerState.root;
        }
        /** The parent of this route in the router state tree */
        get parent() {
          return this._routerState.parent(this);
        }
        /** The first child of this route in the router state tree */
        get firstChild() {
          return this._routerState.firstChild(this);
        }
        /** The children of this route in the router state tree */
        get children() {
          return this._routerState.children(this);
        }
        /** The path from the root of the router state tree to this route */
        get pathFromRoot() {
          return this._routerState.pathFromRoot(this);
        }
        get paramMap() {
          this._paramMap ??= convertToParamMap(this.params);
          return this._paramMap;
        }
        get queryParamMap() {
          this._queryParamMap ??= convertToParamMap(this.queryParams);
          return this._queryParamMap;
        }
        toString() {
          const url = this.url.map((segment) => segment.toString()).join("/");
          const matched = this.routeConfig ? this.routeConfig.path : "";
          return `Route(url:'${url}', path:'${matched}')`;
        }
      };
      RouterStateSnapshot = class extends Tree {
        /** @internal */
        constructor(url, root) {
          super(root);
          this.url = url;
          setRouterState(this, root);
        }
        toString() {
          return serializeNode(this._root);
        }
      };
      RouterOutlet = class _RouterOutlet {
        constructor() {
          this.activated = null;
          this._activatedRoute = null;
          this.name = PRIMARY_OUTLET;
          this.activateEvents = new EventEmitter();
          this.deactivateEvents = new EventEmitter();
          this.attachEvents = new EventEmitter();
          this.detachEvents = new EventEmitter();
          this.parentContexts = inject(ChildrenOutletContexts);
          this.location = inject(ViewContainerRef);
          this.changeDetector = inject(ChangeDetectorRef);
          this.environmentInjector = inject(EnvironmentInjector);
          this.inputBinder = inject(INPUT_BINDER, { optional: true });
          this.supportsBindingToComponentInputs = true;
        }
        /** @internal */
        get activatedComponentRef() {
          return this.activated;
        }
        /** @nodoc */
        ngOnChanges(changes) {
          if (changes["name"]) {
            const { firstChange, previousValue } = changes["name"];
            if (firstChange) {
              return;
            }
            if (this.isTrackedInParentContexts(previousValue)) {
              this.deactivate();
              this.parentContexts.onChildOutletDestroyed(previousValue);
            }
            this.initializeOutletWithName();
          }
        }
        /** @nodoc */
        ngOnDestroy() {
          if (this.isTrackedInParentContexts(this.name)) {
            this.parentContexts.onChildOutletDestroyed(this.name);
          }
          this.inputBinder?.unsubscribeFromRouteData(this);
        }
        isTrackedInParentContexts(outletName) {
          return this.parentContexts.getContext(outletName)?.outlet === this;
        }
        /** @nodoc */
        ngOnInit() {
          this.initializeOutletWithName();
        }
        initializeOutletWithName() {
          this.parentContexts.onChildOutletCreated(this.name, this);
          if (this.activated) {
            return;
          }
          const context2 = this.parentContexts.getContext(this.name);
          if (context2?.route) {
            if (context2.attachRef) {
              this.attach(context2.attachRef, context2.route);
            } else {
              this.activateWith(context2.route, context2.injector);
            }
          }
        }
        get isActivated() {
          return !!this.activated;
        }
        /**
         * @returns The currently activated component instance.
         * @throws An error if the outlet is not activated.
         */
        get component() {
          if (!this.activated)
            throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
          return this.activated.instance;
        }
        get activatedRoute() {
          if (!this.activated)
            throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
          return this._activatedRoute;
        }
        get activatedRouteData() {
          if (this._activatedRoute) {
            return this._activatedRoute.snapshot.data;
          }
          return {};
        }
        /**
         * Called when the `RouteReuseStrategy` instructs to detach the subtree
         */
        detach() {
          if (!this.activated)
            throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
          this.location.detach();
          const cmp = this.activated;
          this.activated = null;
          this._activatedRoute = null;
          this.detachEvents.emit(cmp.instance);
          return cmp;
        }
        /**
         * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
         */
        attach(ref, activatedRoute) {
          this.activated = ref;
          this._activatedRoute = activatedRoute;
          this.location.insert(ref.hostView);
          this.inputBinder?.bindActivatedRouteToOutletComponent(this);
          this.attachEvents.emit(ref.instance);
        }
        deactivate() {
          if (this.activated) {
            const c = this.component;
            this.activated.destroy();
            this.activated = null;
            this._activatedRoute = null;
            this.deactivateEvents.emit(c);
          }
        }
        activateWith(activatedRoute, environmentInjector) {
          if (this.isActivated) {
            throw new RuntimeError(4013, (typeof ngDevMode === "undefined" || ngDevMode) && "Cannot activate an already activated outlet");
          }
          this._activatedRoute = activatedRoute;
          const location2 = this.location;
          const snapshot = activatedRoute.snapshot;
          const component = snapshot.component;
          const childContexts = this.parentContexts.getOrCreateContext(this.name).children;
          const injector = new OutletInjector(activatedRoute, childContexts, location2.injector);
          this.activated = location2.createComponent(component, {
            index: location2.length,
            injector,
            environmentInjector: environmentInjector ?? this.environmentInjector
          });
          this.changeDetector.markForCheck();
          this.inputBinder?.bindActivatedRouteToOutletComponent(this);
          this.activateEvents.emit(this.activated.instance);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RouterOutlet, deps: [], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _RouterOutlet, isStandalone: true, selector: "router-outlet", inputs: { name: "name" }, outputs: { activateEvents: "activate", deactivateEvents: "deactivate", attachEvents: "attach", detachEvents: "detach" }, exportAs: ["outlet"], usesOnChanges: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: RouterOutlet, decorators: [{
        type: Directive,
        args: [{
          selector: "router-outlet",
          exportAs: "outlet",
          standalone: true
        }]
      }], propDecorators: { name: [{
        type: Input
      }], activateEvents: [{
        type: Output,
        args: ["activate"]
      }], deactivateEvents: [{
        type: Output,
        args: ["deactivate"]
      }], attachEvents: [{
        type: Output,
        args: ["attach"]
      }], detachEvents: [{
        type: Output,
        args: ["detach"]
      }] } });
      OutletInjector = class {
        constructor(route, childContexts, parent) {
          this.route = route;
          this.childContexts = childContexts;
          this.parent = parent;
          this.__ngOutletInjector = true;
        }
        get(token, notFoundValue) {
          if (token === ActivatedRoute) {
            return this.route;
          }
          if (token === ChildrenOutletContexts) {
            return this.childContexts;
          }
          return this.parent.get(token, notFoundValue);
        }
      };
      INPUT_BINDER = new InjectionToken("");
      RoutedComponentInputBinder = class _RoutedComponentInputBinder {
        constructor() {
          this.outletDataSubscriptions = /* @__PURE__ */ new Map();
        }
        bindActivatedRouteToOutletComponent(outlet) {
          this.unsubscribeFromRouteData(outlet);
          this.subscribeToRouteData(outlet);
        }
        unsubscribeFromRouteData(outlet) {
          this.outletDataSubscriptions.get(outlet)?.unsubscribe();
          this.outletDataSubscriptions.delete(outlet);
        }
        subscribeToRouteData(outlet) {
          const { activatedRoute } = outlet;
          const dataSubscription = combineLatest([
            activatedRoute.queryParams,
            activatedRoute.params,
            activatedRoute.data
          ]).pipe(switchMap(([queryParams, params, data], index) => {
            data = { ...queryParams, ...params, ...data };
            if (index === 0) {
              return of(data);
            }
            return Promise.resolve(data);
          })).subscribe((data) => {
            if (!outlet.isActivated || !outlet.activatedComponentRef || outlet.activatedRoute !== activatedRoute || activatedRoute.component === null) {
              this.unsubscribeFromRouteData(outlet);
              return;
            }
            const mirror = reflectComponentType(activatedRoute.component);
            if (!mirror) {
              this.unsubscribeFromRouteData(outlet);
              return;
            }
            for (const { templateName } of mirror.inputs) {
              outlet.activatedComponentRef.setInput(templateName, data[templateName]);
            }
          });
          this.outletDataSubscriptions.set(outlet, dataSubscription);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RoutedComponentInputBinder, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RoutedComponentInputBinder });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: RoutedComponentInputBinder, decorators: [{
        type: Injectable
      }] });
      NAVIGATION_CANCELING_ERROR = "ngNavigationCancelingError";
      \u0275EmptyOutletComponent = class _\u0275EmptyOutletComponent {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _\u0275EmptyOutletComponent, deps: [], target: FactoryTarget.Component });
        }
        static {
          this.\u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "17.3.5", type: _\u0275EmptyOutletComponent, isStandalone: true, selector: "ng-component", ngImport: core_exports, template: `<router-outlet></router-outlet>`, isInline: true, dependencies: [{ kind: "directive", type: RouterOutlet, selector: "router-outlet", inputs: ["name"], outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }] });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: \u0275EmptyOutletComponent, decorators: [{
        type: Component,
        args: [{
          template: `<router-outlet></router-outlet>`,
          imports: [RouterOutlet],
          standalone: true
        }]
      }] });
      warnedAboutUnsupportedInputBinding = false;
      activateRoutes = (rootContexts, routeReuseStrategy, forwardEvent, inputBindingEnabled) => map((t) => {
        new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent, inputBindingEnabled).activate(rootContexts);
        return t;
      });
      ActivateRoutes = class {
        constructor(routeReuseStrategy, futureState, currState, forwardEvent, inputBindingEnabled) {
          this.routeReuseStrategy = routeReuseStrategy;
          this.futureState = futureState;
          this.currState = currState;
          this.forwardEvent = forwardEvent;
          this.inputBindingEnabled = inputBindingEnabled;
        }
        activate(parentContexts) {
          const futureRoot = this.futureState._root;
          const currRoot = this.currState ? this.currState._root : null;
          this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);
          advanceActivatedRoute(this.futureState.root);
          this.activateChildRoutes(futureRoot, currRoot, parentContexts);
        }
        // De-activate the child route that are not re-used for the future state
        deactivateChildRoutes(futureNode, currNode, contexts) {
          const children = nodeChildrenAsMap(currNode);
          futureNode.children.forEach((futureChild) => {
            const childOutletName = futureChild.value.outlet;
            this.deactivateRoutes(futureChild, children[childOutletName], contexts);
            delete children[childOutletName];
          });
          Object.values(children).forEach((v) => {
            this.deactivateRouteAndItsChildren(v, contexts);
          });
        }
        deactivateRoutes(futureNode, currNode, parentContext) {
          const future = futureNode.value;
          const curr = currNode ? currNode.value : null;
          if (future === curr) {
            if (future.component) {
              const context2 = parentContext.getContext(future.outlet);
              if (context2) {
                this.deactivateChildRoutes(futureNode, currNode, context2.children);
              }
            } else {
              this.deactivateChildRoutes(futureNode, currNode, parentContext);
            }
          } else {
            if (curr) {
              this.deactivateRouteAndItsChildren(currNode, parentContext);
            }
          }
        }
        deactivateRouteAndItsChildren(route, parentContexts) {
          if (route.value.component && this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
            this.detachAndStoreRouteSubtree(route, parentContexts);
          } else {
            this.deactivateRouteAndOutlet(route, parentContexts);
          }
        }
        detachAndStoreRouteSubtree(route, parentContexts) {
          const context2 = parentContexts.getContext(route.value.outlet);
          const contexts = context2 && route.value.component ? context2.children : parentContexts;
          const children = nodeChildrenAsMap(route);
          for (const treeNode of Object.values(children)) {
            this.deactivateRouteAndItsChildren(treeNode, contexts);
          }
          if (context2 && context2.outlet) {
            const componentRef = context2.outlet.detach();
            const contexts2 = context2.children.onOutletDeactivated();
            this.routeReuseStrategy.store(route.value.snapshot, { componentRef, route, contexts: contexts2 });
          }
        }
        deactivateRouteAndOutlet(route, parentContexts) {
          const context2 = parentContexts.getContext(route.value.outlet);
          const contexts = context2 && route.value.component ? context2.children : parentContexts;
          const children = nodeChildrenAsMap(route);
          for (const treeNode of Object.values(children)) {
            this.deactivateRouteAndItsChildren(treeNode, contexts);
          }
          if (context2) {
            if (context2.outlet) {
              context2.outlet.deactivate();
              context2.children.onOutletDeactivated();
            }
            context2.attachRef = null;
            context2.route = null;
          }
        }
        activateChildRoutes(futureNode, currNode, contexts) {
          const children = nodeChildrenAsMap(currNode);
          futureNode.children.forEach((c) => {
            this.activateRoutes(c, children[c.value.outlet], contexts);
            this.forwardEvent(new ActivationEnd(c.value.snapshot));
          });
          if (futureNode.children.length) {
            this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));
          }
        }
        activateRoutes(futureNode, currNode, parentContexts) {
          const future = futureNode.value;
          const curr = currNode ? currNode.value : null;
          advanceActivatedRoute(future);
          if (future === curr) {
            if (future.component) {
              const context2 = parentContexts.getOrCreateContext(future.outlet);
              this.activateChildRoutes(futureNode, currNode, context2.children);
            } else {
              this.activateChildRoutes(futureNode, currNode, parentContexts);
            }
          } else {
            if (future.component) {
              const context2 = parentContexts.getOrCreateContext(future.outlet);
              if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
                const stored = this.routeReuseStrategy.retrieve(future.snapshot);
                this.routeReuseStrategy.store(future.snapshot, null);
                context2.children.onOutletReAttached(stored.contexts);
                context2.attachRef = stored.componentRef;
                context2.route = stored.route.value;
                if (context2.outlet) {
                  context2.outlet.attach(stored.componentRef, stored.route.value);
                }
                advanceActivatedRoute(stored.route.value);
                this.activateChildRoutes(futureNode, null, context2.children);
              } else {
                const injector = getClosestRouteInjector(future.snapshot);
                context2.attachRef = null;
                context2.route = future;
                context2.injector = injector;
                if (context2.outlet) {
                  context2.outlet.activateWith(future, context2.injector);
                }
                this.activateChildRoutes(futureNode, null, context2.children);
              }
            } else {
              this.activateChildRoutes(futureNode, null, parentContexts);
            }
          }
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            const context2 = parentContexts.getOrCreateContext(future.outlet);
            const outlet = context2.outlet;
            if (outlet && this.inputBindingEnabled && !outlet.supportsBindingToComponentInputs && !warnedAboutUnsupportedInputBinding) {
              console.warn(`'withComponentInputBinding' feature is enabled but this application is using an outlet that may not support binding to component inputs.`);
              warnedAboutUnsupportedInputBinding = true;
            }
          }
        }
      };
      CanActivate = class {
        constructor(path) {
          this.path = path;
          this.route = this.path[this.path.length - 1];
        }
      };
      CanDeactivate = class {
        constructor(component, route) {
          this.component = component;
          this.route = route;
        }
      };
      INITIAL_VALUE = /* @__PURE__ */ Symbol("INITIAL_VALUE");
      NoMatch = class {
        constructor(segmentGroup) {
          this.segmentGroup = segmentGroup || null;
        }
      };
      AbsoluteRedirect = class extends Error {
        constructor(urlTree) {
          super();
          this.urlTree = urlTree;
        }
      };
      ApplyRedirects = class {
        constructor(urlSerializer, urlTree) {
          this.urlSerializer = urlSerializer;
          this.urlTree = urlTree;
        }
        lineralizeSegments(route, urlTree) {
          let res = [];
          let c = urlTree.root;
          while (true) {
            res = res.concat(c.segments);
            if (c.numberOfChildren === 0) {
              return of(res);
            }
            if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
              return namedOutletsRedirect(route.redirectTo);
            }
            c = c.children[PRIMARY_OUTLET];
          }
        }
        applyRedirectCommands(segments, redirectTo, posParams) {
          const newTree = this.applyRedirectCreateUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
          if (redirectTo.startsWith("/")) {
            throw new AbsoluteRedirect(newTree);
          }
          return newTree;
        }
        applyRedirectCreateUrlTree(redirectTo, urlTree, segments, posParams) {
          const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
          return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
        }
        createQueryParams(redirectToParams, actualParams) {
          const res = {};
          Object.entries(redirectToParams).forEach(([k, v]) => {
            const copySourceValue = typeof v === "string" && v.startsWith(":");
            if (copySourceValue) {
              const sourceName = v.substring(1);
              res[k] = actualParams[sourceName];
            } else {
              res[k] = v;
            }
          });
          return res;
        }
        createSegmentGroup(redirectTo, group, segments, posParams) {
          const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
          let children = {};
          Object.entries(group.children).forEach(([name, child]) => {
            children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);
          });
          return new UrlSegmentGroup(updatedSegments, children);
        }
        createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {
          return redirectToSegments.map((s) => s.path.startsWith(":") ? this.findPosParam(redirectTo, s, posParams) : this.findOrReturn(s, actualSegments));
        }
        findPosParam(redirectTo, redirectToUrlSegment, posParams) {
          const pos = posParams[redirectToUrlSegment.path.substring(1)];
          if (!pos)
            throw new RuntimeError(4001, (typeof ngDevMode === "undefined" || ngDevMode) && `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);
          return pos;
        }
        findOrReturn(redirectToUrlSegment, actualSegments) {
          let idx = 0;
          for (const s of actualSegments) {
            if (s.path === redirectToUrlSegment.path) {
              actualSegments.splice(idx);
              return s;
            }
            idx++;
          }
          return redirectToUrlSegment;
        }
      };
      noMatch = {
        matched: false,
        consumedSegments: [],
        remainingSegments: [],
        parameters: {},
        positionalParamSegments: {}
      };
      NoLeftoversInUrl = class {
      };
      MAX_ALLOWED_REDIRECTS = 31;
      Recognizer = class {
        constructor(injector, configLoader, rootComponentType, config4, urlTree, paramsInheritanceStrategy, urlSerializer) {
          this.injector = injector;
          this.configLoader = configLoader;
          this.rootComponentType = rootComponentType;
          this.config = config4;
          this.urlTree = urlTree;
          this.paramsInheritanceStrategy = paramsInheritanceStrategy;
          this.urlSerializer = urlSerializer;
          this.applyRedirects = new ApplyRedirects(this.urlSerializer, this.urlTree);
          this.absoluteRedirectCount = 0;
          this.allowRedirects = true;
        }
        noMatchError(e2) {
          return new RuntimeError(4002, typeof ngDevMode === "undefined" || ngDevMode ? `Cannot match any routes. URL Segment: '${e2.segmentGroup}'` : `'${e2.segmentGroup}'`);
        }
        recognize() {
          const rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;
          return this.match(rootSegmentGroup).pipe(map((children) => {
            const root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze({ ...this.urlTree.queryParams }), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, {});
            const rootNode = new TreeNode(root, children);
            const routeState = new RouterStateSnapshot("", rootNode);
            const tree2 = createUrlTreeFromSnapshot(root, [], this.urlTree.queryParams, this.urlTree.fragment);
            tree2.queryParams = this.urlTree.queryParams;
            routeState.url = this.urlSerializer.serialize(tree2);
            this.inheritParamsAndData(routeState._root, null);
            return { state: routeState, tree: tree2 };
          }));
        }
        match(rootSegmentGroup) {
          const expanded$ = this.processSegmentGroup(this.injector, this.config, rootSegmentGroup, PRIMARY_OUTLET);
          return expanded$.pipe(catchError((e2) => {
            if (e2 instanceof AbsoluteRedirect) {
              this.urlTree = e2.urlTree;
              return this.match(e2.urlTree.root);
            }
            if (e2 instanceof NoMatch) {
              throw this.noMatchError(e2);
            }
            throw e2;
          }));
        }
        inheritParamsAndData(routeNode, parent) {
          const route = routeNode.value;
          const i = getInherited(route, parent, this.paramsInheritanceStrategy);
          route.params = Object.freeze(i.params);
          route.data = Object.freeze(i.data);
          routeNode.children.forEach((n) => this.inheritParamsAndData(n, route));
        }
        processSegmentGroup(injector, config4, segmentGroup, outlet) {
          if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return this.processChildren(injector, config4, segmentGroup);
          }
          return this.processSegment(injector, config4, segmentGroup, segmentGroup.segments, outlet, true).pipe(map((child) => child instanceof TreeNode ? [child] : []));
        }
        /**
         * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if
         * we cannot find a match for _any_ of the children.
         *
         * @param config - The `Routes` to match against
         * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the
         *     config.
         */
        processChildren(injector, config4, segmentGroup) {
          const childOutlets = [];
          for (const child of Object.keys(segmentGroup.children)) {
            if (child === "primary") {
              childOutlets.unshift(child);
            } else {
              childOutlets.push(child);
            }
          }
          return from(childOutlets).pipe(concatMap((childOutlet) => {
            const child = segmentGroup.children[childOutlet];
            const sortedConfig = sortByMatchingOutlets(config4, childOutlet);
            return this.processSegmentGroup(injector, sortedConfig, child, childOutlet);
          }), scan((children, outletChildren) => {
            children.push(...outletChildren);
            return children;
          }), defaultIfEmpty(null), last2(), mergeMap((children) => {
            if (children === null)
              return noMatch$1(segmentGroup);
            const mergedChildren = mergeEmptyPathMatches(children);
            if (typeof ngDevMode === "undefined" || ngDevMode) {
              checkOutletNameUniqueness(mergedChildren);
            }
            sortActivatedRouteSnapshots(mergedChildren);
            return of(mergedChildren);
          }));
        }
        processSegment(injector, routes6, segmentGroup, segments, outlet, allowRedirects) {
          return from(routes6).pipe(concatMap((r) => {
            return this.processSegmentAgainstRoute(r._injector ?? injector, routes6, r, segmentGroup, segments, outlet, allowRedirects).pipe(catchError((e2) => {
              if (e2 instanceof NoMatch) {
                return of(null);
              }
              throw e2;
            }));
          }), first((x) => !!x), catchError((e2) => {
            if (isEmptyError(e2)) {
              if (noLeftoversInUrl(segmentGroup, segments, outlet)) {
                return of(new NoLeftoversInUrl());
              }
              return noMatch$1(segmentGroup);
            }
            throw e2;
          }));
        }
        processSegmentAgainstRoute(injector, routes6, route, rawSegment, segments, outlet, allowRedirects) {
          if (!isImmediateMatch(route, rawSegment, segments, outlet))
            return noMatch$1(rawSegment);
          if (route.redirectTo === void 0) {
            return this.matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet);
          }
          if (this.allowRedirects && allowRedirects) {
            return this.expandSegmentAgainstRouteUsingRedirect(injector, rawSegment, routes6, route, segments, outlet);
          }
          return noMatch$1(rawSegment);
        }
        expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes6, route, segments, outlet) {
          const { matched, consumedSegments, positionalParamSegments, remainingSegments } = match(segmentGroup, route, segments);
          if (!matched)
            return noMatch$1(segmentGroup);
          if (route.redirectTo.startsWith("/")) {
            this.absoluteRedirectCount++;
            if (this.absoluteRedirectCount > MAX_ALLOWED_REDIRECTS) {
              if (ngDevMode) {
                throw new RuntimeError(4016, `Detected possible infinite redirect when redirecting from '${this.urlTree}' to '${route.redirectTo}'.
This is currently a dev mode only error but will become a call stack size exceeded error in production in a future major version.`);
              }
              this.allowRedirects = false;
            }
          }
          const newTree = this.applyRedirects.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);
          return this.applyRedirects.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments) => {
            return this.processSegment(injector, routes6, segmentGroup, newSegments.concat(remainingSegments), outlet, false);
          }));
        }
        matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet) {
          const matchResult = matchWithChecks(rawSegment, route, segments, injector, this.urlSerializer);
          if (route.path === "**") {
            rawSegment.children = {};
          }
          return matchResult.pipe(switchMap((result) => {
            if (!result.matched) {
              return noMatch$1(rawSegment);
            }
            injector = route._injector ?? injector;
            return this.getChildConfig(injector, route, segments).pipe(switchMap(({ routes: childConfig }) => {
              const childInjector = route._loadedInjector ?? injector;
              const { consumedSegments, remainingSegments, parameters } = result;
              const snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze({ ...this.urlTree.queryParams }), this.urlTree.fragment, getData(route), getOutlet(route), route.component ?? route._loadedComponent ?? null, route, getResolve(route));
              const { segmentGroup, slicedSegments } = split(rawSegment, consumedSegments, remainingSegments, childConfig);
              if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
                return this.processChildren(childInjector, childConfig, segmentGroup).pipe(map((children) => {
                  if (children === null) {
                    return null;
                  }
                  return new TreeNode(snapshot, children);
                }));
              }
              if (childConfig.length === 0 && slicedSegments.length === 0) {
                return of(new TreeNode(snapshot, []));
              }
              const matchedOnOutlet = getOutlet(route) === outlet;
              return this.processSegment(childInjector, childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet, true).pipe(map((child) => {
                return new TreeNode(snapshot, child instanceof TreeNode ? [child] : []);
              }));
            }));
          }));
        }
        getChildConfig(injector, route, segments) {
          if (route.children) {
            return of({ routes: route.children, injector });
          }
          if (route.loadChildren) {
            if (route._loadedRoutes !== void 0) {
              return of({ routes: route._loadedRoutes, injector: route._loadedInjector });
            }
            return runCanLoadGuards(injector, route, segments, this.urlSerializer).pipe(mergeMap((shouldLoadResult) => {
              if (shouldLoadResult) {
                return this.configLoader.loadChildren(injector, route).pipe(tap((cfg) => {
                  route._loadedRoutes = cfg.routes;
                  route._loadedInjector = cfg.injector;
                }));
              }
              return canLoadFails(route);
            }));
          }
          return of({ routes: [], injector });
        }
      };
      TitleStrategy = class _TitleStrategy {
        /**
         * @returns The `title` of the deepest primary route.
         */
        buildTitle(snapshot) {
          let pageTitle;
          let route = snapshot.root;
          while (route !== void 0) {
            pageTitle = this.getResolvedTitleForRoute(route) ?? pageTitle;
            route = route.children.find((child) => child.outlet === PRIMARY_OUTLET);
          }
          return pageTitle;
        }
        /**
         * Given an `ActivatedRouteSnapshot`, returns the final value of the
         * `Route.title` property, which can either be a static string or a resolved value.
         */
        getResolvedTitleForRoute(snapshot) {
          return snapshot.data[RouteTitleKey];
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _TitleStrategy, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _TitleStrategy, providedIn: "root", useFactory: () => inject(DefaultTitleStrategy) });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: TitleStrategy, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root", useFactory: () => inject(DefaultTitleStrategy) }]
      }] });
      DefaultTitleStrategy = class _DefaultTitleStrategy extends TitleStrategy {
        constructor(title) {
          super();
          this.title = title;
        }
        /**
         * Sets the title of the browser to the given value.
         *
         * @param title The `pageTitle` from the deepest primary route.
         */
        updateTitle(snapshot) {
          const title = this.buildTitle(snapshot);
          if (title !== void 0) {
            this.title.setTitle(title);
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DefaultTitleStrategy, deps: [{ token: Title }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DefaultTitleStrategy, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: DefaultTitleStrategy, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], ctorParameters: () => [{ type: Title }] });
      ROUTER_CONFIGURATION = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router config" : "", {
        providedIn: "root",
        factory: () => ({})
      });
      ROUTES = new InjectionToken(ngDevMode ? "ROUTES" : "");
      RouterConfigLoader = class _RouterConfigLoader {
        constructor() {
          this.componentLoaders = /* @__PURE__ */ new WeakMap();
          this.childrenLoaders = /* @__PURE__ */ new WeakMap();
          this.compiler = inject(Compiler);
        }
        loadComponent(route) {
          if (this.componentLoaders.get(route)) {
            return this.componentLoaders.get(route);
          } else if (route._loadedComponent) {
            return of(route._loadedComponent);
          }
          if (this.onLoadStartListener) {
            this.onLoadStartListener(route);
          }
          const loadRunner = wrapIntoObservable(route.loadComponent()).pipe(map(maybeUnwrapDefaultExport), tap((component) => {
            if (this.onLoadEndListener) {
              this.onLoadEndListener(route);
            }
            (typeof ngDevMode === "undefined" || ngDevMode) && assertStandalone(route.path ?? "", component);
            route._loadedComponent = component;
          }), finalize(() => {
            this.componentLoaders.delete(route);
          }));
          const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());
          this.componentLoaders.set(route, loader);
          return loader;
        }
        loadChildren(parentInjector, route) {
          if (this.childrenLoaders.get(route)) {
            return this.childrenLoaders.get(route);
          } else if (route._loadedRoutes) {
            return of({ routes: route._loadedRoutes, injector: route._loadedInjector });
          }
          if (this.onLoadStartListener) {
            this.onLoadStartListener(route);
          }
          const moduleFactoryOrRoutes$ = loadChildren(route, this.compiler, parentInjector, this.onLoadEndListener);
          const loadRunner = moduleFactoryOrRoutes$.pipe(finalize(() => {
            this.childrenLoaders.delete(route);
          }));
          const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());
          this.childrenLoaders.set(route, loader);
          return loader;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RouterConfigLoader, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RouterConfigLoader, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: RouterConfigLoader, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }] });
      UrlHandlingStrategy = class _UrlHandlingStrategy {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _UrlHandlingStrategy, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _UrlHandlingStrategy, providedIn: "root", useFactory: () => inject(DefaultUrlHandlingStrategy) });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: UrlHandlingStrategy, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root", useFactory: () => inject(DefaultUrlHandlingStrategy) }]
      }] });
      DefaultUrlHandlingStrategy = class _DefaultUrlHandlingStrategy {
        shouldProcessUrl(url) {
          return true;
        }
        extract(url) {
          return url;
        }
        merge(newUrlPart, wholeUrl) {
          return newUrlPart;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DefaultUrlHandlingStrategy, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DefaultUrlHandlingStrategy, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: DefaultUrlHandlingStrategy, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }] });
      CREATE_VIEW_TRANSITION = new InjectionToken(ngDevMode ? "view transition helper" : "");
      VIEW_TRANSITION_OPTIONS = new InjectionToken(ngDevMode ? "view transition options" : "");
      NavigationTransitions = class _NavigationTransitions {
        get hasRequestedNavigation() {
          return this.navigationId !== 0;
        }
        constructor() {
          this.currentNavigation = null;
          this.currentTransition = null;
          this.lastSuccessfulNavigation = null;
          this.events = new Subject();
          this.transitionAbortSubject = new Subject();
          this.configLoader = inject(RouterConfigLoader);
          this.environmentInjector = inject(EnvironmentInjector);
          this.urlSerializer = inject(UrlSerializer);
          this.rootContexts = inject(ChildrenOutletContexts);
          this.location = inject(Location);
          this.inputBindingEnabled = inject(INPUT_BINDER, { optional: true }) !== null;
          this.titleStrategy = inject(TitleStrategy);
          this.options = inject(ROUTER_CONFIGURATION, { optional: true }) || {};
          this.paramsInheritanceStrategy = this.options.paramsInheritanceStrategy || "emptyOnly";
          this.urlHandlingStrategy = inject(UrlHandlingStrategy);
          this.createViewTransition = inject(CREATE_VIEW_TRANSITION, { optional: true });
          this.navigationId = 0;
          this.afterPreactivation = () => of(void 0);
          this.rootComponentType = null;
          const onLoadStart = (r) => this.events.next(new RouteConfigLoadStart(r));
          const onLoadEnd = (r) => this.events.next(new RouteConfigLoadEnd(r));
          this.configLoader.onLoadEndListener = onLoadEnd;
          this.configLoader.onLoadStartListener = onLoadStart;
        }
        complete() {
          this.transitions?.complete();
        }
        handleNavigationRequest(request) {
          const id = ++this.navigationId;
          this.transitions?.next({ ...this.transitions.value, ...request, id });
        }
        setupNavigations(router, initialUrlTree, initialRouterState) {
          this.transitions = new BehaviorSubject({
            id: 0,
            currentUrlTree: initialUrlTree,
            currentRawUrl: initialUrlTree,
            extractedUrl: this.urlHandlingStrategy.extract(initialUrlTree),
            urlAfterRedirects: this.urlHandlingStrategy.extract(initialUrlTree),
            rawUrl: initialUrlTree,
            extras: {},
            resolve: null,
            reject: null,
            promise: Promise.resolve(true),
            source: IMPERATIVE_NAVIGATION,
            restoredState: null,
            currentSnapshot: initialRouterState.snapshot,
            targetSnapshot: null,
            currentRouterState: initialRouterState,
            targetRouterState: null,
            guards: { canActivateChecks: [], canDeactivateChecks: [] },
            guardsResult: null
          });
          return this.transitions.pipe(
            filter((t) => t.id !== 0),
            // Extract URL
            map((t) => ({
              ...t,
              extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl)
            })),
            // Using switchMap so we cancel executing navigations when a new one comes in
            switchMap((overallTransitionState) => {
              let completed = false;
              let errored = false;
              return of(overallTransitionState).pipe(
                switchMap((t) => {
                  if (this.navigationId > overallTransitionState.id) {
                    const cancellationReason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : "";
                    this.cancelNavigationTransition(overallTransitionState, cancellationReason, NavigationCancellationCode.SupersededByNewNavigation);
                    return EMPTY;
                  }
                  this.currentTransition = overallTransitionState;
                  this.currentNavigation = {
                    id: t.id,
                    initialUrl: t.rawUrl,
                    extractedUrl: t.extractedUrl,
                    trigger: t.source,
                    extras: t.extras,
                    previousNavigation: !this.lastSuccessfulNavigation ? null : {
                      ...this.lastSuccessfulNavigation,
                      previousNavigation: null
                    }
                  };
                  const urlTransition = !router.navigated || this.isUpdatingInternalState() || this.isUpdatedBrowserUrl();
                  const onSameUrlNavigation = t.extras.onSameUrlNavigation ?? router.onSameUrlNavigation;
                  if (!urlTransition && onSameUrlNavigation !== "reload") {
                    const reason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation to ${t.rawUrl} was ignored because it is the same as the current Router URL.` : "";
                    this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.rawUrl), reason, NavigationSkippedCode.IgnoredSameUrlNavigation));
                    t.resolve(null);
                    return EMPTY;
                  }
                  if (this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl)) {
                    return of(t).pipe(
                      // Fire NavigationStart event
                      switchMap((t2) => {
                        const transition = this.transitions?.getValue();
                        this.events.next(new NavigationStart(t2.id, this.urlSerializer.serialize(t2.extractedUrl), t2.source, t2.restoredState));
                        if (transition !== this.transitions?.getValue()) {
                          return EMPTY;
                        }
                        return Promise.resolve(t2);
                      }),
                      // Recognize
                      recognize(this.environmentInjector, this.configLoader, this.rootComponentType, router.config, this.urlSerializer, this.paramsInheritanceStrategy),
                      // Update URL if in `eager` update mode
                      tap((t2) => {
                        overallTransitionState.targetSnapshot = t2.targetSnapshot;
                        overallTransitionState.urlAfterRedirects = t2.urlAfterRedirects;
                        this.currentNavigation = {
                          ...this.currentNavigation,
                          finalUrl: t2.urlAfterRedirects
                        };
                        const routesRecognized = new RoutesRecognized(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
                        this.events.next(routesRecognized);
                      })
                    );
                  } else if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(t.currentRawUrl)) {
                    const { id, extractedUrl, source, restoredState, extras } = t;
                    const navStart = new NavigationStart(id, this.urlSerializer.serialize(extractedUrl), source, restoredState);
                    this.events.next(navStart);
                    const targetSnapshot = createEmptyState(this.rootComponentType).snapshot;
                    this.currentTransition = overallTransitionState = {
                      ...t,
                      targetSnapshot,
                      urlAfterRedirects: extractedUrl,
                      extras: { ...extras, skipLocationChange: false, replaceUrl: false }
                    };
                    this.currentNavigation.finalUrl = extractedUrl;
                    return of(overallTransitionState);
                  } else {
                    const reason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation was ignored because the UrlHandlingStrategy indicated neither the current URL ${t.currentRawUrl} nor target URL ${t.rawUrl} should be processed.` : "";
                    this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, NavigationSkippedCode.IgnoredByUrlHandlingStrategy));
                    t.resolve(null);
                    return EMPTY;
                  }
                }),
                // --- GUARDS ---
                tap((t) => {
                  const guardsStart = new GuardsCheckStart(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);
                  this.events.next(guardsStart);
                }),
                map((t) => {
                  this.currentTransition = overallTransitionState = {
                    ...t,
                    guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, this.rootContexts)
                  };
                  return overallTransitionState;
                }),
                checkGuards(this.environmentInjector, (evt) => this.events.next(evt)),
                tap((t) => {
                  overallTransitionState.guardsResult = t.guardsResult;
                  if (isUrlTree(t.guardsResult)) {
                    throw redirectingNavigationError(this.urlSerializer, t.guardsResult);
                  }
                  const guardsEnd = new GuardsCheckEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);
                  this.events.next(guardsEnd);
                }),
                filter((t) => {
                  if (!t.guardsResult) {
                    this.cancelNavigationTransition(t, "", NavigationCancellationCode.GuardRejected);
                    return false;
                  }
                  return true;
                }),
                // --- RESOLVE ---
                switchTap((t) => {
                  if (t.guards.canActivateChecks.length) {
                    return of(t).pipe(tap((t2) => {
                      const resolveStart = new ResolveStart(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
                      this.events.next(resolveStart);
                    }), switchMap((t2) => {
                      let dataResolved = false;
                      return of(t2).pipe(resolveData(this.paramsInheritanceStrategy, this.environmentInjector), tap({
                        next: () => dataResolved = true,
                        complete: () => {
                          if (!dataResolved) {
                            this.cancelNavigationTransition(t2, typeof ngDevMode === "undefined" || ngDevMode ? `At least one route resolver didn't emit any value.` : "", NavigationCancellationCode.NoDataFromResolver);
                          }
                        }
                      }));
                    }), tap((t2) => {
                      const resolveEnd = new ResolveEnd(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
                      this.events.next(resolveEnd);
                    }));
                  }
                  return void 0;
                }),
                // --- LOAD COMPONENTS ---
                switchTap((t) => {
                  const loadComponents = (route) => {
                    const loaders = [];
                    if (route.routeConfig?.loadComponent && !route.routeConfig._loadedComponent) {
                      loaders.push(this.configLoader.loadComponent(route.routeConfig).pipe(tap((loadedComponent) => {
                        route.component = loadedComponent;
                      }), map(() => void 0)));
                    }
                    for (const child of route.children) {
                      loaders.push(...loadComponents(child));
                    }
                    return loaders;
                  };
                  return combineLatest(loadComponents(t.targetSnapshot.root)).pipe(defaultIfEmpty(null), take(1));
                }),
                switchTap(() => this.afterPreactivation()),
                switchMap(() => {
                  const { currentSnapshot, targetSnapshot } = overallTransitionState;
                  const viewTransitionStarted = this.createViewTransition?.(this.environmentInjector, currentSnapshot.root, targetSnapshot.root);
                  return viewTransitionStarted ? from(viewTransitionStarted).pipe(map(() => overallTransitionState)) : of(overallTransitionState);
                }),
                map((t) => {
                  const targetRouterState = createRouterState(router.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);
                  this.currentTransition = overallTransitionState = { ...t, targetRouterState };
                  this.currentNavigation.targetRouterState = targetRouterState;
                  return overallTransitionState;
                }),
                tap(() => {
                  this.events.next(new BeforeActivateRoutes());
                }),
                activateRoutes(this.rootContexts, router.routeReuseStrategy, (evt) => this.events.next(evt), this.inputBindingEnabled),
                // Ensure that if some observable used to drive the transition doesn't
                // complete, the navigation still finalizes This should never happen, but
                // this is done as a safety measure to avoid surfacing this error (#49567).
                take(1),
                tap({
                  next: (t) => {
                    completed = true;
                    this.lastSuccessfulNavigation = this.currentNavigation;
                    this.events.next(new NavigationEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects)));
                    this.titleStrategy?.updateTitle(t.targetRouterState.snapshot);
                    t.resolve(true);
                  },
                  complete: () => {
                    completed = true;
                  }
                }),
                // There used to be a lot more logic happening directly within the
                // transition Observable. Some of this logic has been refactored out to
                // other places but there may still be errors that happen there. This gives
                // us a way to cancel the transition from the outside. This may also be
                // required in the future to support something like the abort signal of the
                // Navigation API where the navigation gets aborted from outside the
                // transition.
                takeUntil(this.transitionAbortSubject.pipe(tap((err2) => {
                  throw err2;
                }))),
                finalize(() => {
                  if (!completed && !errored) {
                    const cancelationReason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : "";
                    this.cancelNavigationTransition(overallTransitionState, cancelationReason, NavigationCancellationCode.SupersededByNewNavigation);
                  }
                  if (this.currentTransition?.id === overallTransitionState.id) {
                    this.currentNavigation = null;
                    this.currentTransition = null;
                  }
                }),
                catchError((e2) => {
                  errored = true;
                  if (isNavigationCancelingError(e2)) {
                    this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e2.message, e2.cancellationCode));
                    if (!isRedirectingNavigationCancelingError(e2)) {
                      overallTransitionState.resolve(false);
                    } else {
                      this.events.next(new RedirectRequest(e2.url));
                    }
                  } else {
                    this.events.next(new NavigationError(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e2, overallTransitionState.targetSnapshot ?? void 0));
                    try {
                      overallTransitionState.resolve(router.errorHandler(e2));
                    } catch (ee) {
                      if (this.options.resolveNavigationPromiseOnError) {
                        overallTransitionState.resolve(false);
                      } else {
                        overallTransitionState.reject(ee);
                      }
                    }
                  }
                  return EMPTY;
                })
              );
            })
          );
        }
        cancelNavigationTransition(t, reason, code) {
          const navCancel = new NavigationCancel(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, code);
          this.events.next(navCancel);
          t.resolve(false);
        }
        /**
         * @returns Whether we're navigating to somewhere that is not what the Router is
         * currently set to.
         */
        isUpdatingInternalState() {
          return this.currentTransition?.extractedUrl.toString() !== this.currentTransition?.currentUrlTree.toString();
        }
        /**
         * @returns Whether we're updating the browser URL to something new (navigation is going
         * to somewhere not displayed in the URL bar and we will update the URL
         * bar if navigation succeeds).
         */
        isUpdatedBrowserUrl() {
          const extractedBrowserUrl = this.urlHandlingStrategy.extract(this.urlSerializer.parse(this.location.path(true)));
          return extractedBrowserUrl.toString() !== this.currentTransition?.extractedUrl.toString() && !this.currentTransition?.extras.skipLocationChange;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NavigationTransitions, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NavigationTransitions, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NavigationTransitions, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], ctorParameters: () => [] });
      RouteReuseStrategy = class _RouteReuseStrategy {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RouteReuseStrategy, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RouteReuseStrategy, providedIn: "root", useFactory: () => inject(DefaultRouteReuseStrategy) });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: RouteReuseStrategy, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root", useFactory: () => inject(DefaultRouteReuseStrategy) }]
      }] });
      BaseRouteReuseStrategy = class {
        /**
         * Whether the given route should detach for later reuse.
         * Always returns false for `BaseRouteReuseStrategy`.
         * */
        shouldDetach(route) {
          return false;
        }
        /**
         * A no-op; the route is never stored since this strategy never detaches routes for later re-use.
         */
        store(route, detachedTree) {
        }
        /** Returns `false`, meaning the route (and its subtree) is never reattached */
        shouldAttach(route) {
          return false;
        }
        /** Returns `null` because this strategy does not store routes for later re-use. */
        retrieve(route) {
          return null;
        }
        /**
         * Determines if a route should be reused.
         * This strategy returns `true` when the future route config and current route config are
         * identical.
         */
        shouldReuseRoute(future, curr) {
          return future.routeConfig === curr.routeConfig;
        }
      };
      DefaultRouteReuseStrategy = class _DefaultRouteReuseStrategy extends BaseRouteReuseStrategy {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DefaultRouteReuseStrategy, deps: null, target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DefaultRouteReuseStrategy, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: DefaultRouteReuseStrategy, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }] });
      StateManager = class _StateManager {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _StateManager, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _StateManager, providedIn: "root", useFactory: () => inject(HistoryStateManager) });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: StateManager, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root", useFactory: () => inject(HistoryStateManager) }]
      }] });
      HistoryStateManager = class _HistoryStateManager extends StateManager {
        constructor() {
          super(...arguments);
          this.location = inject(Location);
          this.urlSerializer = inject(UrlSerializer);
          this.options = inject(ROUTER_CONFIGURATION, { optional: true }) || {};
          this.canceledNavigationResolution = this.options.canceledNavigationResolution || "replace";
          this.urlHandlingStrategy = inject(UrlHandlingStrategy);
          this.urlUpdateStrategy = this.options.urlUpdateStrategy || "deferred";
          this.currentUrlTree = new UrlTree();
          this.rawUrlTree = this.currentUrlTree;
          this.currentPageId = 0;
          this.lastSuccessfulId = -1;
          this.routerState = createEmptyState(null);
          this.stateMemento = this.createStateMemento();
        }
        getCurrentUrlTree() {
          return this.currentUrlTree;
        }
        getRawUrlTree() {
          return this.rawUrlTree;
        }
        restoredState() {
          return this.location.getState();
        }
        /**
         * The ɵrouterPageId of whatever page is currently active in the browser history. This is
         * important for computing the target page id for new navigations because we need to ensure each
         * page id in the browser history is 1 more than the previous entry.
         */
        get browserPageId() {
          if (this.canceledNavigationResolution !== "computed") {
            return this.currentPageId;
          }
          return this.restoredState()?.\u0275routerPageId ?? this.currentPageId;
        }
        getRouterState() {
          return this.routerState;
        }
        createStateMemento() {
          return {
            rawUrlTree: this.rawUrlTree,
            currentUrlTree: this.currentUrlTree,
            routerState: this.routerState
          };
        }
        registerNonRouterCurrentEntryChangeListener(listener2) {
          return this.location.subscribe((event) => {
            if (event["type"] === "popstate") {
              listener2(event["url"], event.state);
            }
          });
        }
        handleRouterEvent(e2, currentTransition) {
          if (e2 instanceof NavigationStart) {
            this.stateMemento = this.createStateMemento();
          } else if (e2 instanceof NavigationSkipped) {
            this.rawUrlTree = currentTransition.initialUrl;
          } else if (e2 instanceof RoutesRecognized) {
            if (this.urlUpdateStrategy === "eager") {
              if (!currentTransition.extras.skipLocationChange) {
                const rawUrl = this.urlHandlingStrategy.merge(currentTransition.finalUrl, currentTransition.initialUrl);
                this.setBrowserUrl(rawUrl, currentTransition);
              }
            }
          } else if (e2 instanceof BeforeActivateRoutes) {
            this.currentUrlTree = currentTransition.finalUrl;
            this.rawUrlTree = this.urlHandlingStrategy.merge(currentTransition.finalUrl, currentTransition.initialUrl);
            this.routerState = currentTransition.targetRouterState;
            if (this.urlUpdateStrategy === "deferred") {
              if (!currentTransition.extras.skipLocationChange) {
                this.setBrowserUrl(this.rawUrlTree, currentTransition);
              }
            }
          } else if (e2 instanceof NavigationCancel && (e2.code === NavigationCancellationCode.GuardRejected || e2.code === NavigationCancellationCode.NoDataFromResolver)) {
            this.restoreHistory(currentTransition);
          } else if (e2 instanceof NavigationError) {
            this.restoreHistory(currentTransition, true);
          } else if (e2 instanceof NavigationEnd) {
            this.lastSuccessfulId = e2.id;
            this.currentPageId = this.browserPageId;
          }
        }
        setBrowserUrl(url, transition) {
          const path = this.urlSerializer.serialize(url);
          if (this.location.isCurrentPathEqualTo(path) || !!transition.extras.replaceUrl) {
            const currentBrowserPageId = this.browserPageId;
            const state = {
              ...transition.extras.state,
              ...this.generateNgRouterState(transition.id, currentBrowserPageId)
            };
            this.location.replaceState(path, "", state);
          } else {
            const state = {
              ...transition.extras.state,
              ...this.generateNgRouterState(transition.id, this.browserPageId + 1)
            };
            this.location.go(path, "", state);
          }
        }
        /**
         * Performs the necessary rollback action to restore the browser URL to the
         * state before the transition.
         */
        restoreHistory(navigation, restoringFromCaughtError = false) {
          if (this.canceledNavigationResolution === "computed") {
            const currentBrowserPageId = this.browserPageId;
            const targetPagePosition = this.currentPageId - currentBrowserPageId;
            if (targetPagePosition !== 0) {
              this.location.historyGo(targetPagePosition);
            } else if (this.currentUrlTree === navigation.finalUrl && targetPagePosition === 0) {
              this.resetState(navigation);
              this.resetUrlToCurrentUrlTree();
            } else {
            }
          } else if (this.canceledNavigationResolution === "replace") {
            if (restoringFromCaughtError) {
              this.resetState(navigation);
            }
            this.resetUrlToCurrentUrlTree();
          }
        }
        resetState(navigation) {
          this.routerState = this.stateMemento.routerState;
          this.currentUrlTree = this.stateMemento.currentUrlTree;
          this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, navigation.finalUrl ?? this.rawUrlTree);
        }
        resetUrlToCurrentUrlTree() {
          this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), "", this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId));
        }
        generateNgRouterState(navigationId, routerPageId) {
          if (this.canceledNavigationResolution === "computed") {
            return { navigationId, \u0275routerPageId: routerPageId };
          }
          return { navigationId };
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _HistoryStateManager, deps: null, target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _HistoryStateManager, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: HistoryStateManager, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }] });
      (function(NavigationResult2) {
        NavigationResult2[NavigationResult2["COMPLETE"] = 0] = "COMPLETE";
        NavigationResult2[NavigationResult2["FAILED"] = 1] = "FAILED";
        NavigationResult2[NavigationResult2["REDIRECTING"] = 2] = "REDIRECTING";
      })(NavigationResult || (NavigationResult = {}));
      exactMatchOptions = {
        paths: "exact",
        fragment: "ignored",
        matrixParams: "ignored",
        queryParams: "exact"
      };
      subsetMatchOptions = {
        paths: "subset",
        fragment: "ignored",
        matrixParams: "ignored",
        queryParams: "subset"
      };
      Router = class _Router {
        get currentUrlTree() {
          return this.stateManager.getCurrentUrlTree();
        }
        get rawUrlTree() {
          return this.stateManager.getRawUrlTree();
        }
        /**
         * An event stream for routing events.
         */
        get events() {
          return this._events;
        }
        /**
         * The current state of routing in this NgModule.
         */
        get routerState() {
          return this.stateManager.getRouterState();
        }
        constructor() {
          this.disposed = false;
          this.isNgZoneEnabled = false;
          this.console = inject(Console);
          this.stateManager = inject(StateManager);
          this.options = inject(ROUTER_CONFIGURATION, { optional: true }) || {};
          this.pendingTasks = inject(PendingTasks);
          this.urlUpdateStrategy = this.options.urlUpdateStrategy || "deferred";
          this.navigationTransitions = inject(NavigationTransitions);
          this.urlSerializer = inject(UrlSerializer);
          this.location = inject(Location);
          this.urlHandlingStrategy = inject(UrlHandlingStrategy);
          this._events = new Subject();
          this.errorHandler = this.options.errorHandler || defaultErrorHandler2;
          this.navigated = false;
          this.routeReuseStrategy = inject(RouteReuseStrategy);
          this.onSameUrlNavigation = this.options.onSameUrlNavigation || "ignore";
          this.config = inject(ROUTES, { optional: true })?.flat() ?? [];
          this.componentInputBindingEnabled = !!inject(INPUT_BINDER, { optional: true });
          this.eventsSubscription = new Subscription();
          this.isNgZoneEnabled = inject(NgZone) instanceof NgZone && NgZone.isInAngularZone();
          this.resetConfig(this.config);
          this.navigationTransitions.setupNavigations(this, this.currentUrlTree, this.routerState).subscribe({
            error: (e2) => {
              this.console.warn(ngDevMode ? `Unhandled Navigation Error: ${e2}` : e2);
            }
          });
          this.subscribeToNavigationEvents();
        }
        subscribeToNavigationEvents() {
          const subscription = this.navigationTransitions.events.subscribe((e2) => {
            try {
              const currentTransition = this.navigationTransitions.currentTransition;
              const currentNavigation = this.navigationTransitions.currentNavigation;
              if (currentTransition !== null && currentNavigation !== null) {
                this.stateManager.handleRouterEvent(e2, currentNavigation);
                if (e2 instanceof NavigationCancel && e2.code !== NavigationCancellationCode.Redirect && e2.code !== NavigationCancellationCode.SupersededByNewNavigation) {
                  this.navigated = true;
                } else if (e2 instanceof NavigationEnd) {
                  this.navigated = true;
                } else if (e2 instanceof RedirectRequest) {
                  const mergedTree = this.urlHandlingStrategy.merge(e2.url, currentTransition.currentRawUrl);
                  const extras = {
                    // Persist transient navigation info from the original navigation request.
                    info: currentTransition.extras.info,
                    skipLocationChange: currentTransition.extras.skipLocationChange,
                    // The URL is already updated at this point if we have 'eager' URL
                    // updates or if the navigation was triggered by the browser (back
                    // button, URL bar, etc). We want to replace that item in history
                    // if the navigation is rejected.
                    replaceUrl: this.urlUpdateStrategy === "eager" || isBrowserTriggeredNavigation(currentTransition.source)
                  };
                  this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras, {
                    resolve: currentTransition.resolve,
                    reject: currentTransition.reject,
                    promise: currentTransition.promise
                  });
                }
              }
              if (isPublicRouterEvent(e2)) {
                this._events.next(e2);
              }
            } catch (e3) {
              this.navigationTransitions.transitionAbortSubject.next(e3);
            }
          });
          this.eventsSubscription.add(subscription);
        }
        /** @internal */
        resetRootComponentType(rootComponentType) {
          this.routerState.root.component = rootComponentType;
          this.navigationTransitions.rootComponentType = rootComponentType;
        }
        /**
         * Sets up the location change listener and performs the initial navigation.
         */
        initialNavigation() {
          this.setUpLocationChangeListener();
          if (!this.navigationTransitions.hasRequestedNavigation) {
            this.navigateToSyncWithBrowser(this.location.path(true), IMPERATIVE_NAVIGATION, this.stateManager.restoredState());
          }
        }
        /**
         * Sets up the location change listener. This listener detects navigations triggered from outside
         * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router
         * navigation so that the correct events, guards, etc. are triggered.
         */
        setUpLocationChangeListener() {
          this.nonRouterCurrentEntryChangeSubscription ??= this.stateManager.registerNonRouterCurrentEntryChangeListener((url, state) => {
            setTimeout(() => {
              this.navigateToSyncWithBrowser(url, "popstate", state);
            }, 0);
          });
        }
        /**
         * Schedules a router navigation to synchronize Router state with the browser state.
         *
         * This is done as a response to a popstate event and the initial navigation. These
         * two scenarios represent times when the browser URL/state has been updated and
         * the Router needs to respond to ensure its internal state matches.
         */
        navigateToSyncWithBrowser(url, source, state) {
          const extras = { replaceUrl: true };
          const restoredState = state?.navigationId ? state : null;
          if (state) {
            const stateCopy = { ...state };
            delete stateCopy.navigationId;
            delete stateCopy.\u0275routerPageId;
            if (Object.keys(stateCopy).length !== 0) {
              extras.state = stateCopy;
            }
          }
          const urlTree = this.parseUrl(url);
          this.scheduleNavigation(urlTree, source, restoredState, extras);
        }
        /** The current URL. */
        get url() {
          return this.serializeUrl(this.currentUrlTree);
        }
        /**
         * Returns the current `Navigation` object when the router is navigating,
         * and `null` when idle.
         */
        getCurrentNavigation() {
          return this.navigationTransitions.currentNavigation;
        }
        /**
         * The `Navigation` object of the most recent navigation to succeed and `null` if there
         *     has not been a successful navigation yet.
         */
        get lastSuccessfulNavigation() {
          return this.navigationTransitions.lastSuccessfulNavigation;
        }
        /**
         * Resets the route configuration used for navigation and generating links.
         *
         * @param config The route array for the new configuration.
         *
         * @usageNotes
         *
         * ```
         * router.resetConfig([
         *  { path: 'team/:id', component: TeamCmp, children: [
         *    { path: 'simple', component: SimpleCmp },
         *    { path: 'user/:name', component: UserCmp }
         *  ]}
         * ]);
         * ```
         */
        resetConfig(config4) {
          (typeof ngDevMode === "undefined" || ngDevMode) && validateConfig(config4);
          this.config = config4.map(standardizeConfig);
          this.navigated = false;
        }
        /** @nodoc */
        ngOnDestroy() {
          this.dispose();
        }
        /** Disposes of the router. */
        dispose() {
          this.navigationTransitions.complete();
          if (this.nonRouterCurrentEntryChangeSubscription) {
            this.nonRouterCurrentEntryChangeSubscription.unsubscribe();
            this.nonRouterCurrentEntryChangeSubscription = void 0;
          }
          this.disposed = true;
          this.eventsSubscription.unsubscribe();
        }
        /**
         * Appends URL segments to the current URL tree to create a new URL tree.
         *
         * @param commands An array of URL fragments with which to construct the new URL tree.
         * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
         * segments, followed by the parameters for each segment.
         * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`
         * property of the options object, if supplied.
         * @param navigationExtras Options that control the navigation strategy.
         * @returns The new URL tree.
         *
         * @usageNotes
         *
         * ```
         * // create /team/33/user/11
         * router.createUrlTree(['/team', 33, 'user', 11]);
         *
         * // create /team/33;expand=true/user/11
         * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
         *
         * // you can collapse static segments like this (this works only with the first passed-in value):
         * router.createUrlTree(['/team/33/user', userId]);
         *
         * // If the first segment can contain slashes, and you do not want the router to split it,
         * // you can do the following:
         * router.createUrlTree([{segmentPath: '/one/two'}]);
         *
         * // create /team/33/(user/11//right:chat)
         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
         *
         * // remove the right secondary node
         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
         *
         * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
         *
         * // navigate to /team/33/user/11/details
         * router.createUrlTree(['details'], {relativeTo: route});
         *
         * // navigate to /team/33/user/22
         * router.createUrlTree(['../22'], {relativeTo: route});
         *
         * // navigate to /team/44/user/22
         * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
         *
         * Note that a value of `null` or `undefined` for `relativeTo` indicates that the
         * tree should be created relative to the root.
         * ```
         */
        createUrlTree(commands, navigationExtras = {}) {
          const { relativeTo, queryParams, fragment, queryParamsHandling, preserveFragment } = navigationExtras;
          const f = preserveFragment ? this.currentUrlTree.fragment : fragment;
          let q = null;
          switch (queryParamsHandling) {
            case "merge":
              q = { ...this.currentUrlTree.queryParams, ...queryParams };
              break;
            case "preserve":
              q = this.currentUrlTree.queryParams;
              break;
            default:
              q = queryParams || null;
          }
          if (q !== null) {
            q = this.removeEmptyProps(q);
          }
          let relativeToUrlSegmentGroup;
          try {
            const relativeToSnapshot = relativeTo ? relativeTo.snapshot : this.routerState.snapshot.root;
            relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeToSnapshot);
          } catch (e2) {
            if (typeof commands[0] !== "string" || !commands[0].startsWith("/")) {
              commands = [];
            }
            relativeToUrlSegmentGroup = this.currentUrlTree.root;
          }
          return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, q, f ?? null);
        }
        /**
         * Navigates to a view using an absolute route path.
         *
         * @param url An absolute path for a defined route. The function does not apply any delta to the
         *     current URL.
         * @param extras An object containing properties that modify the navigation strategy.
         *
         * @returns A Promise that resolves to 'true' when navigation succeeds,
         * to 'false' when navigation fails, or is rejected on error.
         *
         * @usageNotes
         *
         * The following calls request navigation to an absolute path.
         *
         * ```
         * router.navigateByUrl("/team/33/user/11");
         *
         * // Navigate without updating the URL
         * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
         * ```
         *
         * @see [Routing and Navigation guide](guide/router)
         *
         */
        navigateByUrl(url, extras = {
          skipLocationChange: false
        }) {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            if (this.isNgZoneEnabled && !NgZone.isInAngularZone()) {
              this.console.warn(`Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?`);
            }
          }
          const urlTree = isUrlTree(url) ? url : this.parseUrl(url);
          const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);
          return this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras);
        }
        /**
         * Navigate based on the provided array of commands and a starting point.
         * If no starting route is provided, the navigation is absolute.
         *
         * @param commands An array of URL fragments with which to construct the target URL.
         * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
         * segments, followed by the parameters for each segment.
         * The fragments are applied to the current URL or the one provided  in the `relativeTo` property
         * of the options object, if supplied.
         * @param extras An options object that determines how the URL should be constructed or
         *     interpreted.
         *
         * @returns A Promise that resolves to `true` when navigation succeeds, or `false` when navigation
         *     fails. The Promise is rejected when an error occurs if `resolveNavigationPromiseOnError` is
         * not `true`.
         *
         * @usageNotes
         *
         * The following calls request navigation to a dynamic route path relative to the current URL.
         *
         * ```
         * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
         *
         * // Navigate without updating the URL, overriding the default behavior
         * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});
         * ```
         *
         * @see [Routing and Navigation guide](guide/router)
         *
         */
        navigate(commands, extras = { skipLocationChange: false }) {
          validateCommands(commands);
          return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
        }
        /** Serializes a `UrlTree` into a string */
        serializeUrl(url) {
          return this.urlSerializer.serialize(url);
        }
        /** Parses a string into a `UrlTree` */
        parseUrl(url) {
          try {
            return this.urlSerializer.parse(url);
          } catch {
            return this.urlSerializer.parse("/");
          }
        }
        isActive(url, matchOptions) {
          let options;
          if (matchOptions === true) {
            options = { ...exactMatchOptions };
          } else if (matchOptions === false) {
            options = { ...subsetMatchOptions };
          } else {
            options = matchOptions;
          }
          if (isUrlTree(url)) {
            return containsTree(this.currentUrlTree, url, options);
          }
          const urlTree = this.parseUrl(url);
          return containsTree(this.currentUrlTree, urlTree, options);
        }
        removeEmptyProps(params) {
          return Object.entries(params).reduce((result, [key, value]) => {
            if (value !== null && value !== void 0) {
              result[key] = value;
            }
            return result;
          }, {});
        }
        scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {
          if (this.disposed) {
            return Promise.resolve(false);
          }
          let resolve;
          let reject;
          let promise;
          if (priorPromise) {
            resolve = priorPromise.resolve;
            reject = priorPromise.reject;
            promise = priorPromise.promise;
          } else {
            promise = new Promise((res, rej) => {
              resolve = res;
              reject = rej;
            });
          }
          const taskId = this.pendingTasks.add();
          afterNextNavigation(this, () => {
            queueMicrotask(() => this.pendingTasks.remove(taskId));
          });
          this.navigationTransitions.handleNavigationRequest({
            source,
            restoredState,
            currentUrlTree: this.currentUrlTree,
            currentRawUrl: this.currentUrlTree,
            rawUrl,
            extras,
            resolve,
            reject,
            promise,
            currentSnapshot: this.routerState.snapshot,
            currentRouterState: this.routerState
          });
          return promise.catch((e2) => {
            return Promise.reject(e2);
          });
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _Router, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _Router, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: Router, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], ctorParameters: () => [] });
      RouterLink = class _RouterLink {
        constructor(router, route, tabIndexAttribute, renderer, el, locationStrategy) {
          this.router = router;
          this.route = route;
          this.tabIndexAttribute = tabIndexAttribute;
          this.renderer = renderer;
          this.el = el;
          this.locationStrategy = locationStrategy;
          this.href = null;
          this.commands = null;
          this.onChanges = new Subject();
          this.preserveFragment = false;
          this.skipLocationChange = false;
          this.replaceUrl = false;
          const tagName = el.nativeElement.tagName?.toLowerCase();
          this.isAnchorElement = tagName === "a" || tagName === "area";
          if (this.isAnchorElement) {
            this.subscription = router.events.subscribe((s) => {
              if (s instanceof NavigationEnd) {
                this.updateHref();
              }
            });
          } else {
            this.setTabIndexIfNotOnNativeEl("0");
          }
        }
        /**
         * Modifies the tab index if there was not a tabindex attribute on the element during
         * instantiation.
         */
        setTabIndexIfNotOnNativeEl(newTabIndex) {
          if (this.tabIndexAttribute != null || this.isAnchorElement) {
            return;
          }
          this.applyAttributeValue("tabindex", newTabIndex);
        }
        /** @nodoc */
        ngOnChanges(changes) {
          if (this.isAnchorElement) {
            this.updateHref();
          }
          this.onChanges.next(this);
        }
        /**
         * Commands to pass to {@link Router#createUrlTree}.
         *   - **array**: commands to pass to {@link Router#createUrlTree}.
         *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`
         *   - **null|undefined**: effectively disables the `routerLink`
         * @see {@link Router#createUrlTree}
         */
        set routerLink(commands) {
          if (commands != null) {
            this.commands = Array.isArray(commands) ? commands : [commands];
            this.setTabIndexIfNotOnNativeEl("0");
          } else {
            this.commands = null;
            this.setTabIndexIfNotOnNativeEl(null);
          }
        }
        /** @nodoc */
        onClick(button, ctrlKey, shiftKey, altKey, metaKey) {
          const urlTree = this.urlTree;
          if (urlTree === null) {
            return true;
          }
          if (this.isAnchorElement) {
            if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {
              return true;
            }
            if (typeof this.target === "string" && this.target != "_self") {
              return true;
            }
          }
          const extras = {
            skipLocationChange: this.skipLocationChange,
            replaceUrl: this.replaceUrl,
            state: this.state,
            info: this.info
          };
          this.router.navigateByUrl(urlTree, extras);
          return !this.isAnchorElement;
        }
        /** @nodoc */
        ngOnDestroy() {
          this.subscription?.unsubscribe();
        }
        updateHref() {
          const urlTree = this.urlTree;
          this.href = urlTree !== null && this.locationStrategy ? this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(urlTree)) : null;
          const sanitizedValue = this.href === null ? null : (
            // This class represents a directive that can be added to both `<a>` elements,
            // as well as other elements. As a result, we can't define security context at
            // compile time. So the security context is deferred to runtime.
            // The `ɵɵsanitizeUrlOrResourceUrl` selects the necessary sanitizer function
            // based on the tag and property names. The logic mimics the one from
            // `packages/compiler/src/schema/dom_security_schema.ts`, which is used at compile time.
            //
            // Note: we should investigate whether we can switch to using `@HostBinding('attr.href')`
            // instead of applying a value via a renderer, after a final merge of the
            // `RouterLinkWithHref` directive.
            \u0275\u0275sanitizeUrlOrResourceUrl(this.href, this.el.nativeElement.tagName.toLowerCase(), "href")
          );
          this.applyAttributeValue("href", sanitizedValue);
        }
        applyAttributeValue(attrName, attrValue) {
          const renderer = this.renderer;
          const nativeElement = this.el.nativeElement;
          if (attrValue !== null) {
            renderer.setAttribute(nativeElement, attrName, attrValue);
          } else {
            renderer.removeAttribute(nativeElement, attrName);
          }
        }
        get urlTree() {
          if (this.commands === null) {
            return null;
          }
          return this.router.createUrlTree(this.commands, {
            // If the `relativeTo` input is not defined, we want to use `this.route` by default.
            // Otherwise, we should use the value provided by the user in the input.
            relativeTo: this.relativeTo !== void 0 ? this.relativeTo : this.route,
            queryParams: this.queryParams,
            fragment: this.fragment,
            queryParamsHandling: this.queryParamsHandling,
            preserveFragment: this.preserveFragment
          });
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RouterLink, deps: [{ token: Router }, { token: ActivatedRoute }, { token: "tabindex", attribute: true }, { token: Renderer2 }, { token: ElementRef }, { token: LocationStrategy }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "16.1.0", version: "17.3.5", type: _RouterLink, isStandalone: true, selector: "[routerLink]", inputs: { target: "target", queryParams: "queryParams", fragment: "fragment", queryParamsHandling: "queryParamsHandling", state: "state", info: "info", relativeTo: "relativeTo", preserveFragment: ["preserveFragment", "preserveFragment", booleanAttribute], skipLocationChange: ["skipLocationChange", "skipLocationChange", booleanAttribute], replaceUrl: ["replaceUrl", "replaceUrl", booleanAttribute], routerLink: "routerLink" }, host: { listeners: { "click": "onClick($event.button,$event.ctrlKey,$event.shiftKey,$event.altKey,$event.metaKey)" }, properties: { "attr.target": "this.target" } }, usesOnChanges: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: RouterLink, decorators: [{
        type: Directive,
        args: [{
          selector: "[routerLink]",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: Router }, { type: ActivatedRoute }, { type: void 0, decorators: [{
        type: Attribute,
        args: ["tabindex"]
      }] }, { type: Renderer2 }, { type: ElementRef }, { type: LocationStrategy }], propDecorators: { target: [{
        type: HostBinding,
        args: ["attr.target"]
      }, {
        type: Input
      }], queryParams: [{
        type: Input
      }], fragment: [{
        type: Input
      }], queryParamsHandling: [{
        type: Input
      }], state: [{
        type: Input
      }], info: [{
        type: Input
      }], relativeTo: [{
        type: Input
      }], preserveFragment: [{
        type: Input,
        args: [{ transform: booleanAttribute }]
      }], skipLocationChange: [{
        type: Input,
        args: [{ transform: booleanAttribute }]
      }], replaceUrl: [{
        type: Input,
        args: [{ transform: booleanAttribute }]
      }], routerLink: [{
        type: Input
      }], onClick: [{
        type: HostListener,
        args: ["click", [
          "$event.button",
          "$event.ctrlKey",
          "$event.shiftKey",
          "$event.altKey",
          "$event.metaKey"
        ]]
      }] } });
      RouterLinkActive = class _RouterLinkActive {
        get isActive() {
          return this._isActive;
        }
        constructor(router, element2, renderer, cdr, link) {
          this.router = router;
          this.element = element2;
          this.renderer = renderer;
          this.cdr = cdr;
          this.link = link;
          this.classes = [];
          this._isActive = false;
          this.routerLinkActiveOptions = { exact: false };
          this.isActiveChange = new EventEmitter();
          this.routerEventsSubscription = router.events.subscribe((s) => {
            if (s instanceof NavigationEnd) {
              this.update();
            }
          });
        }
        /** @nodoc */
        ngAfterContentInit() {
          of(this.links.changes, of(null)).pipe(mergeAll()).subscribe((_) => {
            this.update();
            this.subscribeToEachLinkOnChanges();
          });
        }
        subscribeToEachLinkOnChanges() {
          this.linkInputChangesSubscription?.unsubscribe();
          const allLinkChanges = [...this.links.toArray(), this.link].filter((link) => !!link).map((link) => link.onChanges);
          this.linkInputChangesSubscription = from(allLinkChanges).pipe(mergeAll()).subscribe((link) => {
            if (this._isActive !== this.isLinkActive(this.router)(link)) {
              this.update();
            }
          });
        }
        set routerLinkActive(data) {
          const classes = Array.isArray(data) ? data : data.split(" ");
          this.classes = classes.filter((c) => !!c);
        }
        /** @nodoc */
        ngOnChanges(changes) {
          this.update();
        }
        /** @nodoc */
        ngOnDestroy() {
          this.routerEventsSubscription.unsubscribe();
          this.linkInputChangesSubscription?.unsubscribe();
        }
        update() {
          if (!this.links || !this.router.navigated)
            return;
          queueMicrotask(() => {
            const hasActiveLinks = this.hasActiveLinks();
            this.classes.forEach((c) => {
              if (hasActiveLinks) {
                this.renderer.addClass(this.element.nativeElement, c);
              } else {
                this.renderer.removeClass(this.element.nativeElement, c);
              }
            });
            if (hasActiveLinks && this.ariaCurrentWhenActive !== void 0) {
              this.renderer.setAttribute(this.element.nativeElement, "aria-current", this.ariaCurrentWhenActive.toString());
            } else {
              this.renderer.removeAttribute(this.element.nativeElement, "aria-current");
            }
            if (this._isActive !== hasActiveLinks) {
              this._isActive = hasActiveLinks;
              this.cdr.markForCheck();
              this.isActiveChange.emit(hasActiveLinks);
            }
          });
        }
        isLinkActive(router) {
          const options = isActiveMatchOptions(this.routerLinkActiveOptions) ? this.routerLinkActiveOptions : (
            // While the types should disallow `undefined` here, it's possible without strict inputs
            this.routerLinkActiveOptions.exact || false
          );
          return (link) => {
            const urlTree = link.urlTree;
            return urlTree ? router.isActive(urlTree, options) : false;
          };
        }
        hasActiveLinks() {
          const isActiveCheckFn = this.isLinkActive(this.router);
          return this.link && isActiveCheckFn(this.link) || this.links.some(isActiveCheckFn);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RouterLinkActive, deps: [{ token: Router }, { token: ElementRef }, { token: Renderer2 }, { token: ChangeDetectorRef }, { token: RouterLink, optional: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _RouterLinkActive, isStandalone: true, selector: "[routerLinkActive]", inputs: { routerLinkActiveOptions: "routerLinkActiveOptions", ariaCurrentWhenActive: "ariaCurrentWhenActive", routerLinkActive: "routerLinkActive" }, outputs: { isActiveChange: "isActiveChange" }, queries: [{ propertyName: "links", predicate: RouterLink, descendants: true }], exportAs: ["routerLinkActive"], usesOnChanges: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: RouterLinkActive, decorators: [{
        type: Directive,
        args: [{
          selector: "[routerLinkActive]",
          exportAs: "routerLinkActive",
          standalone: true
        }]
      }], ctorParameters: () => [{ type: Router }, { type: ElementRef }, { type: Renderer2 }, { type: ChangeDetectorRef }, { type: RouterLink, decorators: [{
        type: Optional
      }] }], propDecorators: { links: [{
        type: ContentChildren,
        args: [RouterLink, { descendants: true }]
      }], routerLinkActiveOptions: [{
        type: Input
      }], ariaCurrentWhenActive: [{
        type: Input
      }], isActiveChange: [{
        type: Output
      }], routerLinkActive: [{
        type: Input
      }] } });
      PreloadingStrategy = class {
      };
      PreloadAllModules = class _PreloadAllModules {
        preload(route, fn2) {
          return fn2().pipe(catchError(() => of(null)));
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PreloadAllModules, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PreloadAllModules, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: PreloadAllModules, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }] });
      NoPreloading = class _NoPreloading {
        preload(route, fn2) {
          return of(null);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NoPreloading, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NoPreloading, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NoPreloading, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }] });
      RouterPreloader = class _RouterPreloader {
        constructor(router, compiler, injector, preloadingStrategy, loader) {
          this.router = router;
          this.injector = injector;
          this.preloadingStrategy = preloadingStrategy;
          this.loader = loader;
        }
        setUpPreloading() {
          this.subscription = this.router.events.pipe(filter((e2) => e2 instanceof NavigationEnd), concatMap(() => this.preload())).subscribe(() => {
          });
        }
        preload() {
          return this.processRoutes(this.injector, this.router.config);
        }
        /** @nodoc */
        ngOnDestroy() {
          if (this.subscription) {
            this.subscription.unsubscribe();
          }
        }
        processRoutes(injector, routes6) {
          const res = [];
          for (const route of routes6) {
            if (route.providers && !route._injector) {
              route._injector = createEnvironmentInjector(route.providers, injector, `Route: ${route.path}`);
            }
            const injectorForCurrentRoute = route._injector ?? injector;
            const injectorForChildren = route._loadedInjector ?? injectorForCurrentRoute;
            if (route.loadChildren && !route._loadedRoutes && route.canLoad === void 0 || route.loadComponent && !route._loadedComponent) {
              res.push(this.preloadConfig(injectorForCurrentRoute, route));
            }
            if (route.children || route._loadedRoutes) {
              res.push(this.processRoutes(injectorForChildren, route.children ?? route._loadedRoutes));
            }
          }
          return from(res).pipe(mergeAll());
        }
        preloadConfig(injector, route) {
          return this.preloadingStrategy.preload(route, () => {
            let loadedChildren$;
            if (route.loadChildren && route.canLoad === void 0) {
              loadedChildren$ = this.loader.loadChildren(injector, route);
            } else {
              loadedChildren$ = of(null);
            }
            const recursiveLoadChildren$ = loadedChildren$.pipe(mergeMap((config4) => {
              if (config4 === null) {
                return of(void 0);
              }
              route._loadedRoutes = config4.routes;
              route._loadedInjector = config4.injector;
              return this.processRoutes(config4.injector ?? injector, config4.routes);
            }));
            if (route.loadComponent && !route._loadedComponent) {
              const loadComponent$ = this.loader.loadComponent(route);
              return from([recursiveLoadChildren$, loadComponent$]).pipe(mergeAll());
            } else {
              return recursiveLoadChildren$;
            }
          });
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RouterPreloader, deps: [{ token: Router }, { token: Compiler }, { token: EnvironmentInjector }, { token: PreloadingStrategy }, { token: RouterConfigLoader }], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RouterPreloader, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: RouterPreloader, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }], ctorParameters: () => [{ type: Router }, { type: Compiler }, { type: EnvironmentInjector }, { type: PreloadingStrategy }, { type: RouterConfigLoader }] });
      ROUTER_SCROLLER = new InjectionToken("");
      RouterScroller = class _RouterScroller {
        /** @nodoc */
        constructor(urlSerializer, transitions, viewportScroller, zone, options = {}) {
          this.urlSerializer = urlSerializer;
          this.transitions = transitions;
          this.viewportScroller = viewportScroller;
          this.zone = zone;
          this.options = options;
          this.lastId = 0;
          this.lastSource = "imperative";
          this.restoredId = 0;
          this.store = {};
          options.scrollPositionRestoration ||= "disabled";
          options.anchorScrolling ||= "disabled";
        }
        init() {
          if (this.options.scrollPositionRestoration !== "disabled") {
            this.viewportScroller.setHistoryScrollRestoration("manual");
          }
          this.routerEventsSubscription = this.createScrollEvents();
          this.scrollEventsSubscription = this.consumeScrollEvents();
        }
        createScrollEvents() {
          return this.transitions.events.subscribe((e2) => {
            if (e2 instanceof NavigationStart) {
              this.store[this.lastId] = this.viewportScroller.getScrollPosition();
              this.lastSource = e2.navigationTrigger;
              this.restoredId = e2.restoredState ? e2.restoredState.navigationId : 0;
            } else if (e2 instanceof NavigationEnd) {
              this.lastId = e2.id;
              this.scheduleScrollEvent(e2, this.urlSerializer.parse(e2.urlAfterRedirects).fragment);
            } else if (e2 instanceof NavigationSkipped && e2.code === NavigationSkippedCode.IgnoredSameUrlNavigation) {
              this.lastSource = void 0;
              this.restoredId = 0;
              this.scheduleScrollEvent(e2, this.urlSerializer.parse(e2.url).fragment);
            }
          });
        }
        consumeScrollEvents() {
          return this.transitions.events.subscribe((e2) => {
            if (!(e2 instanceof Scroll))
              return;
            if (e2.position) {
              if (this.options.scrollPositionRestoration === "top") {
                this.viewportScroller.scrollToPosition([0, 0]);
              } else if (this.options.scrollPositionRestoration === "enabled") {
                this.viewportScroller.scrollToPosition(e2.position);
              }
            } else {
              if (e2.anchor && this.options.anchorScrolling === "enabled") {
                this.viewportScroller.scrollToAnchor(e2.anchor);
              } else if (this.options.scrollPositionRestoration !== "disabled") {
                this.viewportScroller.scrollToPosition([0, 0]);
              }
            }
          });
        }
        scheduleScrollEvent(routerEvent, anchor) {
          this.zone.runOutsideAngular(() => {
            setTimeout(() => {
              this.zone.run(() => {
                this.transitions.events.next(new Scroll(routerEvent, this.lastSource === "popstate" ? this.store[this.restoredId] : null, anchor));
              });
            }, 0);
          });
        }
        /** @nodoc */
        ngOnDestroy() {
          this.routerEventsSubscription?.unsubscribe();
          this.scrollEventsSubscription?.unsubscribe();
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RouterScroller, deps: "invalid", target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RouterScroller });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: RouterScroller, decorators: [{
        type: Injectable
      }], ctorParameters: () => [{ type: UrlSerializer }, { type: NavigationTransitions }, { type: ViewportScroller }, { type: NgZone }, { type: void 0 }] });
      ROUTER_IS_PROVIDED = new InjectionToken("", {
        providedIn: "root",
        factory: () => false
      });
      BOOTSTRAP_DONE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "bootstrap done indicator" : "", {
        factory: () => {
          return new Subject();
        }
      });
      INITIAL_NAVIGATION = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "initial navigation" : "", {
        providedIn: "root",
        factory: () => 1
        /* InitialNavigation.EnabledNonBlocking */
      });
      ROUTER_PRELOADER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router preloader" : "");
      ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkActive, \u0275EmptyOutletComponent];
      ROUTER_FORROOT_GUARD = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router duplicate forRoot guard" : "ROUTER_FORROOT_GUARD");
      ROUTER_PROVIDERS = [
        Location,
        { provide: UrlSerializer, useClass: DefaultUrlSerializer },
        Router,
        ChildrenOutletContexts,
        { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },
        RouterConfigLoader,
        // Only used to warn when `provideRoutes` is used without `RouterModule` or `provideRouter`. Can
        // be removed when `provideRoutes` is removed.
        typeof ngDevMode === "undefined" || ngDevMode ? { provide: ROUTER_IS_PROVIDED, useValue: true } : []
      ];
      RouterModule = class _RouterModule {
        constructor(guard) {
        }
        /**
         * Creates and configures a module with all the router providers and directives.
         * Optionally sets up an application listener to perform an initial navigation.
         *
         * When registering the NgModule at the root, import as follows:
         *
         * ```
         * @NgModule({
         *   imports: [RouterModule.forRoot(ROUTES)]
         * })
         * class MyNgModule {}
         * ```
         *
         * @param routes An array of `Route` objects that define the navigation paths for the application.
         * @param config An `ExtraOptions` configuration object that controls how navigation is performed.
         * @return The new `NgModule`.
         *
         */
        static forRoot(routes6, config4) {
          return {
            ngModule: _RouterModule,
            providers: [
              ROUTER_PROVIDERS,
              typeof ngDevMode === "undefined" || ngDevMode ? config4?.enableTracing ? withDebugTracing().\u0275providers : [] : [],
              { provide: ROUTES, multi: true, useValue: routes6 },
              {
                provide: ROUTER_FORROOT_GUARD,
                useFactory: provideForRootGuard,
                deps: [[Router, new Optional(), new SkipSelf()]]
              },
              { provide: ROUTER_CONFIGURATION, useValue: config4 ? config4 : {} },
              config4?.useHash ? provideHashLocationStrategy() : providePathLocationStrategy(),
              provideRouterScroller(),
              config4?.preloadingStrategy ? withPreloading(config4.preloadingStrategy).\u0275providers : [],
              config4?.initialNavigation ? provideInitialNavigation(config4) : [],
              config4?.bindToComponentInputs ? withComponentInputBinding().\u0275providers : [],
              config4?.enableViewTransitions ? withViewTransitions().\u0275providers : [],
              provideRouterInitializer()
            ]
          };
        }
        /**
         * Creates a module with all the router directives and a provider registering routes,
         * without creating a new Router service.
         * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:
         *
         * ```
         * @NgModule({
         *   imports: [RouterModule.forChild(ROUTES)]
         * })
         * class MyNgModule {}
         * ```
         *
         * @param routes An array of `Route` objects that define the navigation paths for the submodule.
         * @return The new NgModule.
         *
         */
        static forChild(routes6) {
          return {
            ngModule: _RouterModule,
            providers: [{ provide: ROUTES, multi: true, useValue: routes6 }]
          };
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RouterModule, deps: [{ token: ROUTER_FORROOT_GUARD, optional: true }], target: FactoryTarget.NgModule });
        }
        static {
          this.\u0275mod = \u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _RouterModule, imports: [RouterOutlet, RouterLink, RouterLinkActive, \u0275EmptyOutletComponent], exports: [RouterOutlet, RouterLink, RouterLinkActive, \u0275EmptyOutletComponent] });
        }
        static {
          this.\u0275inj = \u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RouterModule });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: RouterModule, decorators: [{
        type: NgModule,
        args: [{
          imports: ROUTER_DIRECTIVES,
          exports: ROUTER_DIRECTIVES
        }]
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [ROUTER_FORROOT_GUARD]
      }] }] });
      ROUTER_INITIALIZER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "Router Initializer" : "");
      VERSION6 = new Version("17.3.5");
    }
  });

  // node_modules/@angular/forms/fesm2022/forms.mjs
  function _isAndroid() {
    const userAgent = getDOM() ? getDOM().getUserAgent() : "";
    return /android (\d+)/.test(userAgent.toLowerCase());
  }
  function isEmptyInputValue(value) {
    return value == null || (typeof value === "string" || Array.isArray(value)) && value.length === 0;
  }
  function hasValidLength(value) {
    return value != null && typeof value.length === "number";
  }
  function minValidator(min) {
    return (control) => {
      if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {
        return null;
      }
      const value = parseFloat(control.value);
      return !isNaN(value) && value < min ? { "min": { "min": min, "actual": control.value } } : null;
    };
  }
  function maxValidator(max) {
    return (control) => {
      if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {
        return null;
      }
      const value = parseFloat(control.value);
      return !isNaN(value) && value > max ? { "max": { "max": max, "actual": control.value } } : null;
    };
  }
  function requiredValidator(control) {
    return isEmptyInputValue(control.value) ? { "required": true } : null;
  }
  function requiredTrueValidator(control) {
    return control.value === true ? null : { "required": true };
  }
  function emailValidator(control) {
    if (isEmptyInputValue(control.value)) {
      return null;
    }
    return EMAIL_REGEXP.test(control.value) ? null : { "email": true };
  }
  function minLengthValidator(minLength) {
    return (control) => {
      if (isEmptyInputValue(control.value) || !hasValidLength(control.value)) {
        return null;
      }
      return control.value.length < minLength ? { "minlength": { "requiredLength": minLength, "actualLength": control.value.length } } : null;
    };
  }
  function maxLengthValidator(maxLength) {
    return (control) => {
      return hasValidLength(control.value) && control.value.length > maxLength ? { "maxlength": { "requiredLength": maxLength, "actualLength": control.value.length } } : null;
    };
  }
  function patternValidator(pattern) {
    if (!pattern)
      return nullValidator;
    let regex;
    let regexStr;
    if (typeof pattern === "string") {
      regexStr = "";
      if (pattern.charAt(0) !== "^")
        regexStr += "^";
      regexStr += pattern;
      if (pattern.charAt(pattern.length - 1) !== "$")
        regexStr += "$";
      regex = new RegExp(regexStr);
    } else {
      regexStr = pattern.toString();
      regex = pattern;
    }
    return (control) => {
      if (isEmptyInputValue(control.value)) {
        return null;
      }
      const value = control.value;
      return regex.test(value) ? null : { "pattern": { "requiredPattern": regexStr, "actualValue": value } };
    };
  }
  function nullValidator(control) {
    return null;
  }
  function isPresent(o) {
    return o != null;
  }
  function toObservable(value) {
    const obs = isPromise2(value) ? from(value) : value;
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !isSubscribable(obs)) {
      let errorMessage = `Expected async validator to return Promise or Observable.`;
      if (typeof value === "object") {
        errorMessage += " Are you using a synchronous validator where an async validator is expected?";
      }
      throw new RuntimeError(-1101, errorMessage);
    }
    return obs;
  }
  function mergeErrors(arrayOfErrors) {
    let res = {};
    arrayOfErrors.forEach((errors) => {
      res = errors != null ? { ...res, ...errors } : res;
    });
    return Object.keys(res).length === 0 ? null : res;
  }
  function executeValidators(control, validators) {
    return validators.map((validator) => validator(control));
  }
  function isValidatorFn(validator) {
    return !validator.validate;
  }
  function normalizeValidators(validators) {
    return validators.map((validator) => {
      return isValidatorFn(validator) ? validator : (c) => validator.validate(c);
    });
  }
  function compose(validators) {
    if (!validators)
      return null;
    const presentValidators = validators.filter(isPresent);
    if (presentValidators.length == 0)
      return null;
    return function(control) {
      return mergeErrors(executeValidators(control, presentValidators));
    };
  }
  function composeValidators(validators) {
    return validators != null ? compose(normalizeValidators(validators)) : null;
  }
  function composeAsync(validators) {
    if (!validators)
      return null;
    const presentValidators = validators.filter(isPresent);
    if (presentValidators.length == 0)
      return null;
    return function(control) {
      const observables = executeValidators(control, presentValidators).map(toObservable);
      return forkJoin(observables).pipe(map(mergeErrors));
    };
  }
  function composeAsyncValidators(validators) {
    return validators != null ? composeAsync(normalizeValidators(validators)) : null;
  }
  function mergeValidators(controlValidators, dirValidator) {
    if (controlValidators === null)
      return [dirValidator];
    return Array.isArray(controlValidators) ? [...controlValidators, dirValidator] : [controlValidators, dirValidator];
  }
  function getControlValidators(control) {
    return control._rawValidators;
  }
  function getControlAsyncValidators(control) {
    return control._rawAsyncValidators;
  }
  function makeValidatorsArray(validators) {
    if (!validators)
      return [];
    return Array.isArray(validators) ? validators : [validators];
  }
  function hasValidator(validators, validator) {
    return Array.isArray(validators) ? validators.includes(validator) : validators === validator;
  }
  function addValidators(validators, currentValidators) {
    const current = makeValidatorsArray(currentValidators);
    const validatorsToAdd = makeValidatorsArray(validators);
    validatorsToAdd.forEach((v) => {
      if (!hasValidator(current, v)) {
        current.push(v);
      }
    });
    return current;
  }
  function removeValidators(validators, currentValidators) {
    return makeValidatorsArray(currentValidators).filter((v) => !hasValidator(validators, v));
  }
  function controlParentException() {
    return new RuntimeError(1050, `formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup
      directive and pass it an existing FormGroup instance (you can create one in your class).

    Example:

    ${formControlNameExample}`);
  }
  function ngModelGroupException() {
    return new RuntimeError(1051, `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents
      that also have a "form" prefix: formGroupName, formArrayName, or formGroup.

      Option 1:  Update the parent to be formGroupName (reactive form strategy)

      ${formGroupNameExample}

      Option 2: Use ngModel instead of formControlName (template-driven strategy)

      ${ngModelGroupExample}`);
  }
  function missingFormException() {
    return new RuntimeError(1052, `formGroup expects a FormGroup instance. Please pass one in.

      Example:

      ${formControlNameExample}`);
  }
  function groupParentException() {
    return new RuntimeError(1053, `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup
    directive and pass it an existing FormGroup instance (you can create one in your class).

    Example:

    ${formGroupNameExample}`);
  }
  function arrayParentException() {
    return new RuntimeError(1054, `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup
      directive and pass it an existing FormGroup instance (you can create one in your class).

      Example:

      ${formArrayNameExample}`);
  }
  function ngModelWarning(directiveName) {
    return `
  It looks like you're using ngModel on the same form field as ${directiveName}.
  Support for using the ngModel input property and ngModelChange event with
  reactive form directives has been deprecated in Angular v6 and will be removed
  in a future version of Angular.

  For more information on this, see our API docs here:
  https://angular.io/api/forms/${directiveName === "formControl" ? "FormControlDirective" : "FormControlName"}#use-with-ngmodel
  `;
  }
  function describeKey(isFormGroup, key) {
    return isFormGroup ? `with name: '${key}'` : `at index: ${key}`;
  }
  function noControlsError(isFormGroup) {
    return `
    There are no form controls registered with this ${isFormGroup ? "group" : "array"} yet. If you're using ngModel,
    you may want to check next tick (e.g. use setTimeout).
  `;
  }
  function missingControlError(isFormGroup, key) {
    return `Cannot find form control ${describeKey(isFormGroup, key)}`;
  }
  function missingControlValueError(isFormGroup, key) {
    return `Must supply a value for form control ${describeKey(isFormGroup, key)}`;
  }
  function pickValidators(validatorOrOpts) {
    return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;
  }
  function coerceToValidator(validator) {
    return Array.isArray(validator) ? composeValidators(validator) : validator || null;
  }
  function pickAsyncValidators(asyncValidator, validatorOrOpts) {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (isOptionsObj(validatorOrOpts) && asyncValidator) {
        console.warn(asyncValidatorsDroppedWithOptsWarning);
      }
    }
    return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;
  }
  function coerceToAsyncValidator(asyncValidator) {
    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator || null;
  }
  function isOptionsObj(validatorOrOpts) {
    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && typeof validatorOrOpts === "object";
  }
  function assertControlPresent(parent, isGroup, key) {
    const controls = parent.controls;
    const collection = isGroup ? Object.keys(controls) : controls;
    if (!collection.length) {
      throw new RuntimeError(1e3, typeof ngDevMode === "undefined" || ngDevMode ? noControlsError(isGroup) : "");
    }
    if (!controls[key]) {
      throw new RuntimeError(1001, typeof ngDevMode === "undefined" || ngDevMode ? missingControlError(isGroup, key) : "");
    }
  }
  function assertAllValuesPresent(control, isGroup, value) {
    control._forEachChild((_, key) => {
      if (value[key] === void 0) {
        throw new RuntimeError(1002, typeof ngDevMode === "undefined" || ngDevMode ? missingControlValueError(isGroup, key) : "");
      }
    });
  }
  function validateFormGroupControls(controls) {
    const invalidKeys = Object.keys(controls).filter((key) => key.includes("."));
    if (invalidKeys.length > 0) {
      console.warn(`FormGroup keys cannot include \`.\`, please replace the keys for: ${invalidKeys.join(",")}.`);
    }
  }
  function controlPath(name, parent) {
    return [...parent.path, name];
  }
  function setUpControl(control, dir, callSetDisabledState = setDisabledStateDefault) {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!control)
        _throwError(dir, "Cannot find control with");
      if (!dir.valueAccessor)
        _throwMissingValueAccessorError(dir);
    }
    setUpValidators(control, dir);
    dir.valueAccessor.writeValue(control.value);
    if (control.disabled || callSetDisabledState === "always") {
      dir.valueAccessor.setDisabledState?.(control.disabled);
    }
    setUpViewChangePipeline(control, dir);
    setUpModelChangePipeline(control, dir);
    setUpBlurPipeline(control, dir);
    setUpDisabledChangeHandler(control, dir);
  }
  function cleanUpControl(control, dir, validateControlPresenceOnChange = true) {
    const noop3 = () => {
      if (validateControlPresenceOnChange && (typeof ngDevMode === "undefined" || ngDevMode)) {
        _noControlError(dir);
      }
    };
    if (dir.valueAccessor) {
      dir.valueAccessor.registerOnChange(noop3);
      dir.valueAccessor.registerOnTouched(noop3);
    }
    cleanUpValidators(control, dir);
    if (control) {
      dir._invokeOnDestroyCallbacks();
      control._registerOnCollectionChange(() => {
      });
    }
  }
  function registerOnValidatorChange(validators, onChange) {
    validators.forEach((validator) => {
      if (validator.registerOnValidatorChange)
        validator.registerOnValidatorChange(onChange);
    });
  }
  function setUpDisabledChangeHandler(control, dir) {
    if (dir.valueAccessor.setDisabledState) {
      const onDisabledChange = (isDisabled) => {
        dir.valueAccessor.setDisabledState(isDisabled);
      };
      control.registerOnDisabledChange(onDisabledChange);
      dir._registerOnDestroy(() => {
        control._unregisterOnDisabledChange(onDisabledChange);
      });
    }
  }
  function setUpValidators(control, dir) {
    const validators = getControlValidators(control);
    if (dir.validator !== null) {
      control.setValidators(mergeValidators(validators, dir.validator));
    } else if (typeof validators === "function") {
      control.setValidators([validators]);
    }
    const asyncValidators = getControlAsyncValidators(control);
    if (dir.asyncValidator !== null) {
      control.setAsyncValidators(mergeValidators(asyncValidators, dir.asyncValidator));
    } else if (typeof asyncValidators === "function") {
      control.setAsyncValidators([asyncValidators]);
    }
    const onValidatorChange = () => control.updateValueAndValidity();
    registerOnValidatorChange(dir._rawValidators, onValidatorChange);
    registerOnValidatorChange(dir._rawAsyncValidators, onValidatorChange);
  }
  function cleanUpValidators(control, dir) {
    let isControlUpdated = false;
    if (control !== null) {
      if (dir.validator !== null) {
        const validators = getControlValidators(control);
        if (Array.isArray(validators) && validators.length > 0) {
          const updatedValidators = validators.filter((validator) => validator !== dir.validator);
          if (updatedValidators.length !== validators.length) {
            isControlUpdated = true;
            control.setValidators(updatedValidators);
          }
        }
      }
      if (dir.asyncValidator !== null) {
        const asyncValidators = getControlAsyncValidators(control);
        if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {
          const updatedAsyncValidators = asyncValidators.filter((asyncValidator) => asyncValidator !== dir.asyncValidator);
          if (updatedAsyncValidators.length !== asyncValidators.length) {
            isControlUpdated = true;
            control.setAsyncValidators(updatedAsyncValidators);
          }
        }
      }
    }
    const noop3 = () => {
    };
    registerOnValidatorChange(dir._rawValidators, noop3);
    registerOnValidatorChange(dir._rawAsyncValidators, noop3);
    return isControlUpdated;
  }
  function setUpViewChangePipeline(control, dir) {
    dir.valueAccessor.registerOnChange((newValue) => {
      control._pendingValue = newValue;
      control._pendingChange = true;
      control._pendingDirty = true;
      if (control.updateOn === "change")
        updateControl(control, dir);
    });
  }
  function setUpBlurPipeline(control, dir) {
    dir.valueAccessor.registerOnTouched(() => {
      control._pendingTouched = true;
      if (control.updateOn === "blur" && control._pendingChange)
        updateControl(control, dir);
      if (control.updateOn !== "submit")
        control.markAsTouched();
    });
  }
  function updateControl(control, dir) {
    if (control._pendingDirty)
      control.markAsDirty();
    control.setValue(control._pendingValue, { emitModelToViewChange: false });
    dir.viewToModelUpdate(control._pendingValue);
    control._pendingChange = false;
  }
  function setUpModelChangePipeline(control, dir) {
    const onChange = (newValue, emitModelEvent) => {
      dir.valueAccessor.writeValue(newValue);
      if (emitModelEvent)
        dir.viewToModelUpdate(newValue);
    };
    control.registerOnChange(onChange);
    dir._registerOnDestroy(() => {
      control._unregisterOnChange(onChange);
    });
  }
  function setUpFormContainer(control, dir) {
    if (control == null && (typeof ngDevMode === "undefined" || ngDevMode))
      _throwError(dir, "Cannot find control with");
    setUpValidators(control, dir);
  }
  function cleanUpFormContainer(control, dir) {
    return cleanUpValidators(control, dir);
  }
  function _noControlError(dir) {
    return _throwError(dir, "There is no FormControl instance attached to form control element with");
  }
  function _throwError(dir, message) {
    const messageEnd = _describeControlLocation(dir);
    throw new Error(`${message} ${messageEnd}`);
  }
  function _describeControlLocation(dir) {
    const path = dir.path;
    if (path && path.length > 1)
      return `path: '${path.join(" -> ")}'`;
    if (path?.[0])
      return `name: '${path}'`;
    return "unspecified name attribute";
  }
  function _throwMissingValueAccessorError(dir) {
    const loc = _describeControlLocation(dir);
    throw new RuntimeError(-1203, `No value accessor for form control ${loc}.`);
  }
  function _throwInvalidValueAccessorError(dir) {
    const loc = _describeControlLocation(dir);
    throw new RuntimeError(1200, `Value accessor was not provided as an array for form control with ${loc}. Check that the \`NG_VALUE_ACCESSOR\` token is configured as a \`multi: true\` provider.`);
  }
  function isPropertyUpdated(changes, viewModel) {
    if (!changes.hasOwnProperty("model"))
      return false;
    const change = changes["model"];
    if (change.isFirstChange())
      return true;
    return !Object.is(viewModel, change.currentValue);
  }
  function isBuiltInAccessor(valueAccessor) {
    return Object.getPrototypeOf(valueAccessor.constructor) === BuiltInControlValueAccessor;
  }
  function syncPendingControls(form, directives) {
    form._syncPendingControls();
    directives.forEach((dir) => {
      const control = dir.control;
      if (control.updateOn === "submit" && control._pendingChange) {
        dir.viewToModelUpdate(control._pendingValue);
        control._pendingChange = false;
      }
    });
  }
  function selectValueAccessor(dir, valueAccessors) {
    if (!valueAccessors)
      return null;
    if (!Array.isArray(valueAccessors) && (typeof ngDevMode === "undefined" || ngDevMode))
      _throwInvalidValueAccessorError(dir);
    let defaultAccessor = void 0;
    let builtinAccessor = void 0;
    let customAccessor = void 0;
    valueAccessors.forEach((v) => {
      if (v.constructor === DefaultValueAccessor) {
        defaultAccessor = v;
      } else if (isBuiltInAccessor(v)) {
        if (builtinAccessor && (typeof ngDevMode === "undefined" || ngDevMode))
          _throwError(dir, "More than one built-in value accessor matches form control with");
        builtinAccessor = v;
      } else {
        if (customAccessor && (typeof ngDevMode === "undefined" || ngDevMode))
          _throwError(dir, "More than one custom value accessor matches form control with");
        customAccessor = v;
      }
    });
    if (customAccessor)
      return customAccessor;
    if (builtinAccessor)
      return builtinAccessor;
    if (defaultAccessor)
      return defaultAccessor;
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      _throwError(dir, "No valid value accessor for form control with");
    }
    return null;
  }
  function removeListItem$1(list, el) {
    const index = list.indexOf(el);
    if (index > -1)
      list.splice(index, 1);
  }
  function _ngModelWarning(name, type, instance, warningConfig) {
    if (warningConfig === "never")
      return;
    if ((warningConfig === null || warningConfig === "once") && !type._ngModelWarningSentOnce || warningConfig === "always" && !instance._ngModelWarningSent) {
      console.warn(ngModelWarning(name));
      type._ngModelWarningSentOnce = true;
      instance._ngModelWarningSent = true;
    }
  }
  function removeListItem(list, el) {
    const index = list.indexOf(el);
    if (index > -1)
      list.splice(index, 1);
  }
  function isFormControlState(formState) {
    return typeof formState === "object" && formState !== null && Object.keys(formState).length === 2 && "value" in formState && "disabled" in formState;
  }
  function modelParentException() {
    return new RuntimeError(1350, `
    ngModel cannot be used to register form controls with a parent formGroup directive.  Try using
    formGroup's partner directive "formControlName" instead.  Example:

    ${formControlNameExample}

    Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:

    Example:

    ${ngModelWithFormGroupExample}`);
  }
  function formGroupNameException() {
    return new RuntimeError(1351, `
    ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.

    Option 1: Use formControlName instead of ngModel (reactive strategy):

    ${formGroupNameExample}

    Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):

    ${ngModelGroupExample}`);
  }
  function missingNameException() {
    return new RuntimeError(1352, `If ngModel is used within a form tag, either the name attribute must be set or the form
    control must be defined as 'standalone' in ngModelOptions.

    Example 1: <input [(ngModel)]="person.firstName" name="first">
    Example 2: <input [(ngModel)]="person.firstName" [ngModelOptions]="{standalone: true}">`);
  }
  function modelGroupParentException() {
    return new RuntimeError(1353, `
    ngModelGroup cannot be used with a parent formGroup directive.

    Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):

    ${formGroupNameExample}

    Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):

    ${ngModelGroupExample}`);
  }
  function throwNameError() {
    throw new RuntimeError(1202, `
      If you define both a name and a formControlName attribute on your radio button, their values
      must match. Ex: <input type="radio" formControlName="food" name="food">
    `);
  }
  function _hasInvalidParent(parent) {
    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
  }
  function _buildValueString$1(id, value) {
    if (id == null)
      return `${value}`;
    if (value && typeof value === "object")
      value = "Object";
    return `${id}: ${value}`.slice(0, 50);
  }
  function _extractId$1(valueString) {
    return valueString.split(":")[0];
  }
  function _buildValueString(id, value) {
    if (id == null)
      return `${value}`;
    if (typeof value === "string")
      value = `'${value}'`;
    if (value && typeof value === "object")
      value = "Object";
    return `${id}: ${value}`.slice(0, 50);
  }
  function _extractId(valueString) {
    return valueString.split(":")[0];
  }
  function toInteger(value) {
    return typeof value === "number" ? value : parseInt(value, 10);
  }
  function toFloat(value) {
    return typeof value === "number" ? value : parseFloat(value);
  }
  function isAbstractControlOptions(options) {
    return !!options && (options.asyncValidators !== void 0 || options.validators !== void 0 || options.updateOn !== void 0);
  }
  var BaseControlValueAccessor, BuiltInControlValueAccessor, NG_VALUE_ACCESSOR, CHECKBOX_VALUE_ACCESSOR, CheckboxControlValueAccessor, DEFAULT_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE, DefaultValueAccessor, NG_VALIDATORS, NG_ASYNC_VALIDATORS, EMAIL_REGEXP, AbstractControlDirective, ControlContainer, NgControl, AbstractControlStatus, ngControlStatusHost, ngGroupStatusHost, NgControlStatus, NgControlStatusGroup, formControlNameExample, formGroupNameExample, formArrayNameExample, ngModelGroupExample, ngModelWithFormGroupExample, disabledAttrWarning, asyncValidatorsDroppedWithOptsWarning, VALID, INVALID, PENDING, DISABLED, AbstractControl, FormGroup, FormRecord, CALL_SET_DISABLED_STATE, setDisabledStateDefault, formDirectiveProvider$1, resolvedPromise$1, NgForm, FormControl, isFormControl, AbstractFormGroupDirective, modelGroupProvider, NgModelGroup, formControlBinding$1, resolvedPromise, NgModel, \u0275NgNoValidate, NUMBER_VALUE_ACCESSOR, NumberValueAccessor, RADIO_VALUE_ACCESSOR, RadioControlRegistry, RadioControlValueAccessor, RANGE_VALUE_ACCESSOR, RangeValueAccessor, NG_MODEL_WITH_FORM_CONTROL_WARNING, formControlBinding, FormControlDirective, formDirectiveProvider, FormGroupDirective, formGroupNameProvider, FormGroupName, formArrayNameProvider, FormArrayName, controlNameBinding, FormControlName, SELECT_VALUE_ACCESSOR, SelectControlValueAccessor, NgSelectOption, SELECT_MULTIPLE_VALUE_ACCESSOR, SelectMultipleControlValueAccessor, \u0275NgSelectMultipleOption, AbstractValidatorDirective, MAX_VALIDATOR, MaxValidator, MIN_VALIDATOR, MinValidator, REQUIRED_VALIDATOR, CHECKBOX_REQUIRED_VALIDATOR, RequiredValidator, CheckboxRequiredValidator, EMAIL_VALIDATOR, EmailValidator, MIN_LENGTH_VALIDATOR, MinLengthValidator, MAX_LENGTH_VALIDATOR, MaxLengthValidator, PATTERN_VALIDATOR, PatternValidator, SHARED_FORM_DIRECTIVES, TEMPLATE_DRIVEN_DIRECTIVES, REACTIVE_DRIVEN_DIRECTIVES, \u0275InternalFormsSharedModule, FormArray, FormBuilder, NonNullableFormBuilder, UntypedFormBuilder, VERSION7, FormsModule, ReactiveFormsModule;
  var init_forms = __esm({
    "node_modules/@angular/forms/fesm2022/forms.mjs"() {
      init_core();
      init_core();
      init_common();
      init_esm5();
      init_operators();
      BaseControlValueAccessor = class _BaseControlValueAccessor {
        constructor(_renderer, _elementRef) {
          this._renderer = _renderer;
          this._elementRef = _elementRef;
          this.onChange = (_) => {
          };
          this.onTouched = () => {
          };
        }
        /**
         * Helper method that sets a property on a target element using the current Renderer
         * implementation.
         * @nodoc
         */
        setProperty(key, value) {
          this._renderer.setProperty(this._elementRef.nativeElement, key, value);
        }
        /**
         * Registers a function called when the control is touched.
         * @nodoc
         */
        registerOnTouched(fn2) {
          this.onTouched = fn2;
        }
        /**
         * Registers a function called when the control value changes.
         * @nodoc
         */
        registerOnChange(fn2) {
          this.onChange = fn2;
        }
        /**
         * Sets the "disabled" property on the range input element.
         * @nodoc
         */
        setDisabledState(isDisabled) {
          this.setProperty("disabled", isDisabled);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _BaseControlValueAccessor, deps: [{ token: Renderer2 }, { token: ElementRef }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _BaseControlValueAccessor, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: BaseControlValueAccessor, decorators: [{
        type: Directive
      }], ctorParameters: () => [{ type: Renderer2 }, { type: ElementRef }] });
      BuiltInControlValueAccessor = class _BuiltInControlValueAccessor extends BaseControlValueAccessor {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _BuiltInControlValueAccessor, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _BuiltInControlValueAccessor, usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: BuiltInControlValueAccessor, decorators: [{
        type: Directive
      }] });
      NG_VALUE_ACCESSOR = new InjectionToken(ngDevMode ? "NgValueAccessor" : "");
      CHECKBOX_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => CheckboxControlValueAccessor),
        multi: true
      };
      CheckboxControlValueAccessor = class _CheckboxControlValueAccessor extends BuiltInControlValueAccessor {
        /**
         * Sets the "checked" property on the input element.
         * @nodoc
         */
        writeValue(value) {
          this.setProperty("checked", value);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _CheckboxControlValueAccessor, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]", host: { listeners: { "change": "onChange($event.target.checked)", "blur": "onTouched()" } }, providers: [CHECKBOX_VALUE_ACCESSOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: CheckboxControlValueAccessor, decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]",
          host: { "(change)": "onChange($event.target.checked)", "(blur)": "onTouched()" },
          providers: [CHECKBOX_VALUE_ACCESSOR]
        }]
      }] });
      DEFAULT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => DefaultValueAccessor),
        multi: true
      };
      COMPOSITION_BUFFER_MODE = new InjectionToken(ngDevMode ? "CompositionEventMode" : "");
      DefaultValueAccessor = class _DefaultValueAccessor extends BaseControlValueAccessor {
        constructor(renderer, elementRef, _compositionMode) {
          super(renderer, elementRef);
          this._compositionMode = _compositionMode;
          this._composing = false;
          if (this._compositionMode == null) {
            this._compositionMode = !_isAndroid();
          }
        }
        /**
         * Sets the "value" property on the input element.
         * @nodoc
         */
        writeValue(value) {
          const normalizedValue = value == null ? "" : value;
          this.setProperty("value", normalizedValue);
        }
        /** @internal */
        _handleInput(value) {
          if (!this._compositionMode || this._compositionMode && !this._composing) {
            this.onChange(value);
          }
        }
        /** @internal */
        _compositionStart() {
          this._composing = true;
        }
        /** @internal */
        _compositionEnd(value) {
          this._composing = false;
          this._compositionMode && this.onChange(value);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _DefaultValueAccessor, deps: [{ token: Renderer2 }, { token: ElementRef }, { token: COMPOSITION_BUFFER_MODE, optional: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]", host: { listeners: { "input": "$any(this)._handleInput($event.target.value)", "blur": "onTouched()", "compositionstart": "$any(this)._compositionStart()", "compositionend": "$any(this)._compositionEnd($event.target.value)" } }, providers: [DEFAULT_VALUE_ACCESSOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: DefaultValueAccessor, decorators: [{
        type: Directive,
        args: [{
          selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]",
          // TODO: vsavkin replace the above selector with the one below it once
          // https://github.com/angular/angular/issues/3011 is implemented
          // selector: '[ngModel],[formControl],[formControlName]',
          host: {
            "(input)": "$any(this)._handleInput($event.target.value)",
            "(blur)": "onTouched()",
            "(compositionstart)": "$any(this)._compositionStart()",
            "(compositionend)": "$any(this)._compositionEnd($event.target.value)"
          },
          providers: [DEFAULT_VALUE_ACCESSOR]
        }]
      }], ctorParameters: () => [{ type: Renderer2 }, { type: ElementRef }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [COMPOSITION_BUFFER_MODE]
      }] }] });
      NG_VALIDATORS = new InjectionToken(ngDevMode ? "NgValidators" : "");
      NG_ASYNC_VALIDATORS = new InjectionToken(ngDevMode ? "NgAsyncValidators" : "");
      EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
      AbstractControlDirective = class {
        constructor() {
          this._rawValidators = [];
          this._rawAsyncValidators = [];
          this._onDestroyCallbacks = [];
        }
        /**
         * @description
         * Reports the value of the control if it is present, otherwise null.
         */
        get value() {
          return this.control ? this.control.value : null;
        }
        /**
         * @description
         * Reports whether the control is valid. A control is considered valid if no
         * validation errors exist with the current value.
         * If the control is not present, null is returned.
         */
        get valid() {
          return this.control ? this.control.valid : null;
        }
        /**
         * @description
         * Reports whether the control is invalid, meaning that an error exists in the input value.
         * If the control is not present, null is returned.
         */
        get invalid() {
          return this.control ? this.control.invalid : null;
        }
        /**
         * @description
         * Reports whether a control is pending, meaning that async validation is occurring and
         * errors are not yet available for the input value. If the control is not present, null is
         * returned.
         */
        get pending() {
          return this.control ? this.control.pending : null;
        }
        /**
         * @description
         * Reports whether the control is disabled, meaning that the control is disabled
         * in the UI and is exempt from validation checks and excluded from aggregate
         * values of ancestor controls. If the control is not present, null is returned.
         */
        get disabled() {
          return this.control ? this.control.disabled : null;
        }
        /**
         * @description
         * Reports whether the control is enabled, meaning that the control is included in ancestor
         * calculations of validity or value. If the control is not present, null is returned.
         */
        get enabled() {
          return this.control ? this.control.enabled : null;
        }
        /**
         * @description
         * Reports the control's validation errors. If the control is not present, null is returned.
         */
        get errors() {
          return this.control ? this.control.errors : null;
        }
        /**
         * @description
         * Reports whether the control is pristine, meaning that the user has not yet changed
         * the value in the UI. If the control is not present, null is returned.
         */
        get pristine() {
          return this.control ? this.control.pristine : null;
        }
        /**
         * @description
         * Reports whether the control is dirty, meaning that the user has changed
         * the value in the UI. If the control is not present, null is returned.
         */
        get dirty() {
          return this.control ? this.control.dirty : null;
        }
        /**
         * @description
         * Reports whether the control is touched, meaning that the user has triggered
         * a `blur` event on it. If the control is not present, null is returned.
         */
        get touched() {
          return this.control ? this.control.touched : null;
        }
        /**
         * @description
         * Reports the validation status of the control. Possible values include:
         * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.
         * If the control is not present, null is returned.
         */
        get status() {
          return this.control ? this.control.status : null;
        }
        /**
         * @description
         * Reports whether the control is untouched, meaning that the user has not yet triggered
         * a `blur` event on it. If the control is not present, null is returned.
         */
        get untouched() {
          return this.control ? this.control.untouched : null;
        }
        /**
         * @description
         * Returns a multicasting observable that emits a validation status whenever it is
         * calculated for the control. If the control is not present, null is returned.
         */
        get statusChanges() {
          return this.control ? this.control.statusChanges : null;
        }
        /**
         * @description
         * Returns a multicasting observable of value changes for the control that emits every time the
         * value of the control changes in the UI or programmatically.
         * If the control is not present, null is returned.
         */
        get valueChanges() {
          return this.control ? this.control.valueChanges : null;
        }
        /**
         * @description
         * Returns an array that represents the path from the top-level form to this control.
         * Each index is the string name of the control on that level.
         */
        get path() {
          return null;
        }
        /**
         * Sets synchronous validators for this directive.
         * @internal
         */
        _setValidators(validators) {
          this._rawValidators = validators || [];
          this._composedValidatorFn = composeValidators(this._rawValidators);
        }
        /**
         * Sets asynchronous validators for this directive.
         * @internal
         */
        _setAsyncValidators(validators) {
          this._rawAsyncValidators = validators || [];
          this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);
        }
        /**
         * @description
         * Synchronous validator function composed of all the synchronous validators registered with this
         * directive.
         */
        get validator() {
          return this._composedValidatorFn || null;
        }
        /**
         * @description
         * Asynchronous validator function composed of all the asynchronous validators registered with
         * this directive.
         */
        get asyncValidator() {
          return this._composedAsyncValidatorFn || null;
        }
        /**
         * Internal function to register callbacks that should be invoked
         * when directive instance is being destroyed.
         * @internal
         */
        _registerOnDestroy(fn2) {
          this._onDestroyCallbacks.push(fn2);
        }
        /**
         * Internal function to invoke all registered "on destroy" callbacks.
         * Note: calling this function also clears the list of callbacks.
         * @internal
         */
        _invokeOnDestroyCallbacks() {
          this._onDestroyCallbacks.forEach((fn2) => fn2());
          this._onDestroyCallbacks = [];
        }
        /**
         * @description
         * Resets the control with the provided value if the control is present.
         */
        reset(value = void 0) {
          if (this.control)
            this.control.reset(value);
        }
        /**
         * @description
         * Reports whether the control with the given path has the error specified.
         *
         * @param errorCode The code of the error to check
         * @param path A list of control names that designates how to move from the current control
         * to the control that should be queried for errors.
         *
         * @usageNotes
         * For example, for the following `FormGroup`:
         *
         * ```
         * form = new FormGroup({
         *   address: new FormGroup({ street: new FormControl() })
         * });
         * ```
         *
         * The path to the 'street' control from the root form would be 'address' -> 'street'.
         *
         * It can be provided to this method in one of two formats:
         *
         * 1. An array of string control names, e.g. `['address', 'street']`
         * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
         *
         * If no path is given, this method checks for the error on the current control.
         *
         * @returns whether the given error is present in the control at the given path.
         *
         * If the control is not present, false is returned.
         */
        hasError(errorCode, path) {
          return this.control ? this.control.hasError(errorCode, path) : false;
        }
        /**
         * @description
         * Reports error data for the control with the given path.
         *
         * @param errorCode The code of the error to check
         * @param path A list of control names that designates how to move from the current control
         * to the control that should be queried for errors.
         *
         * @usageNotes
         * For example, for the following `FormGroup`:
         *
         * ```
         * form = new FormGroup({
         *   address: new FormGroup({ street: new FormControl() })
         * });
         * ```
         *
         * The path to the 'street' control from the root form would be 'address' -> 'street'.
         *
         * It can be provided to this method in one of two formats:
         *
         * 1. An array of string control names, e.g. `['address', 'street']`
         * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
         *
         * @returns error data for that particular error. If the control or error is not present,
         * null is returned.
         */
        getError(errorCode, path) {
          return this.control ? this.control.getError(errorCode, path) : null;
        }
      };
      ControlContainer = class extends AbstractControlDirective {
        /**
         * @description
         * The top-level form directive for the control.
         */
        get formDirective() {
          return null;
        }
        /**
         * @description
         * The path to this group.
         */
        get path() {
          return null;
        }
      };
      NgControl = class extends AbstractControlDirective {
        constructor() {
          super(...arguments);
          this._parent = null;
          this.name = null;
          this.valueAccessor = null;
        }
      };
      AbstractControlStatus = class {
        constructor(cd) {
          this._cd = cd;
        }
        get isTouched() {
          return !!this._cd?.control?.touched;
        }
        get isUntouched() {
          return !!this._cd?.control?.untouched;
        }
        get isPristine() {
          return !!this._cd?.control?.pristine;
        }
        get isDirty() {
          return !!this._cd?.control?.dirty;
        }
        get isValid() {
          return !!this._cd?.control?.valid;
        }
        get isInvalid() {
          return !!this._cd?.control?.invalid;
        }
        get isPending() {
          return !!this._cd?.control?.pending;
        }
        get isSubmitted() {
          return !!this._cd?.submitted;
        }
      };
      ngControlStatusHost = {
        "[class.ng-untouched]": "isUntouched",
        "[class.ng-touched]": "isTouched",
        "[class.ng-pristine]": "isPristine",
        "[class.ng-dirty]": "isDirty",
        "[class.ng-valid]": "isValid",
        "[class.ng-invalid]": "isInvalid",
        "[class.ng-pending]": "isPending"
      };
      ngGroupStatusHost = {
        ...ngControlStatusHost,
        "[class.ng-submitted]": "isSubmitted"
      };
      NgControlStatus = class _NgControlStatus extends AbstractControlStatus {
        constructor(cd) {
          super(cd);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgControlStatus, deps: [{ token: NgControl, self: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgControlStatus, selector: "[formControlName],[ngModel],[formControl]", host: { properties: { "class.ng-untouched": "isUntouched", "class.ng-touched": "isTouched", "class.ng-pristine": "isPristine", "class.ng-dirty": "isDirty", "class.ng-valid": "isValid", "class.ng-invalid": "isInvalid", "class.ng-pending": "isPending" } }, usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgControlStatus, decorators: [{
        type: Directive,
        args: [{ selector: "[formControlName],[ngModel],[formControl]", host: ngControlStatusHost }]
      }], ctorParameters: () => [{ type: NgControl, decorators: [{
        type: Self
      }] }] });
      NgControlStatusGroup = class _NgControlStatusGroup extends AbstractControlStatus {
        constructor(cd) {
          super(cd);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgControlStatusGroup, deps: [{ token: ControlContainer, optional: true, self: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]", host: { properties: { "class.ng-untouched": "isUntouched", "class.ng-touched": "isTouched", "class.ng-pristine": "isPristine", "class.ng-dirty": "isDirty", "class.ng-valid": "isValid", "class.ng-invalid": "isInvalid", "class.ng-pending": "isPending", "class.ng-submitted": "isSubmitted" } }, usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgControlStatusGroup, decorators: [{
        type: Directive,
        args: [{
          selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]",
          host: ngGroupStatusHost
        }]
      }], ctorParameters: () => [{ type: ControlContainer, decorators: [{
        type: Optional
      }, {
        type: Self
      }] }] });
      formControlNameExample = `
  <div [formGroup]="myGroup">
    <input formControlName="firstName">
  </div>

  In your class:

  this.myGroup = new FormGroup({
      firstName: new FormControl()
  });`;
      formGroupNameExample = `
  <div [formGroup]="myGroup">
      <div formGroupName="person">
        <input formControlName="firstName">
      </div>
  </div>

  In your class:

  this.myGroup = new FormGroup({
      person: new FormGroup({ firstName: new FormControl() })
  });`;
      formArrayNameExample = `
  <div [formGroup]="myGroup">
    <div formArrayName="cities">
      <div *ngFor="let city of cityArray.controls; index as i">
        <input [formControlName]="i">
      </div>
    </div>
  </div>

  In your class:

  this.cityArray = new FormArray([new FormControl('SF')]);
  this.myGroup = new FormGroup({
    cities: this.cityArray
  });`;
      ngModelGroupExample = `
  <form>
      <div ngModelGroup="person">
        <input [(ngModel)]="person.name" name="firstName">
      </div>
  </form>`;
      ngModelWithFormGroupExample = `
  <div [formGroup]="myGroup">
      <input formControlName="firstName">
      <input [(ngModel)]="showMoreControls" [ngModelOptions]="{standalone: true}">
  </div>
`;
      disabledAttrWarning = `
  It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true
  when you set up this control in your component class, the disabled attribute will actually be set in the DOM for
  you. We recommend using this approach to avoid 'changed after checked' errors.

  Example:
  // Specify the \`disabled\` property at control creation time:
  form = new FormGroup({
    first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),
    last: new FormControl('Drew', Validators.required)
  });

  // Controls can also be enabled/disabled after creation:
  form.get('first')?.enable();
  form.get('last')?.disable();
`;
      asyncValidatorsDroppedWithOptsWarning = `
  It looks like you're constructing using a FormControl with both an options argument and an
  async validators argument. Mixing these arguments will cause your async validators to be dropped.
  You should either put all your validators in the options object, or in separate validators
  arguments. For example:

  // Using validators arguments
  fc = new FormControl(42, Validators.required, myAsyncValidator);

  // Using AbstractControlOptions
  fc = new FormControl(42, {validators: Validators.required, asyncValidators: myAV});

  // Do NOT mix them: async validators will be dropped!
  fc = new FormControl(42, {validators: Validators.required}, /* Oops! */ myAsyncValidator);
`;
      VALID = "VALID";
      INVALID = "INVALID";
      PENDING = "PENDING";
      DISABLED = "DISABLED";
      AbstractControl = class {
        /**
         * Initialize the AbstractControl instance.
         *
         * @param validators The function or array of functions that is used to determine the validity of
         *     this control synchronously.
         * @param asyncValidators The function or array of functions that is used to determine validity of
         *     this control asynchronously.
         */
        constructor(validators, asyncValidators) {
          this._pendingDirty = false;
          this._hasOwnPendingAsyncValidator = false;
          this._pendingTouched = false;
          this._onCollectionChange = () => {
          };
          this._parent = null;
          this.pristine = true;
          this.touched = false;
          this._onDisabledChange = [];
          this._assignValidators(validators);
          this._assignAsyncValidators(asyncValidators);
        }
        /**
         * Returns the function that is used to determine the validity of this control synchronously.
         * If multiple validators have been added, this will be a single composed function.
         * See `Validators.compose()` for additional information.
         */
        get validator() {
          return this._composedValidatorFn;
        }
        set validator(validatorFn) {
          this._rawValidators = this._composedValidatorFn = validatorFn;
        }
        /**
         * Returns the function that is used to determine the validity of this control asynchronously.
         * If multiple validators have been added, this will be a single composed function.
         * See `Validators.compose()` for additional information.
         */
        get asyncValidator() {
          return this._composedAsyncValidatorFn;
        }
        set asyncValidator(asyncValidatorFn) {
          this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;
        }
        /**
         * The parent control.
         */
        get parent() {
          return this._parent;
        }
        /**
         * A control is `valid` when its `status` is `VALID`.
         *
         * @see {@link AbstractControl.status}
         *
         * @returns True if the control has passed all of its validation tests,
         * false otherwise.
         */
        get valid() {
          return this.status === VALID;
        }
        /**
         * A control is `invalid` when its `status` is `INVALID`.
         *
         * @see {@link AbstractControl.status}
         *
         * @returns True if this control has failed one or more of its validation checks,
         * false otherwise.
         */
        get invalid() {
          return this.status === INVALID;
        }
        /**
         * A control is `pending` when its `status` is `PENDING`.
         *
         * @see {@link AbstractControl.status}
         *
         * @returns True if this control is in the process of conducting a validation check,
         * false otherwise.
         */
        get pending() {
          return this.status == PENDING;
        }
        /**
         * A control is `disabled` when its `status` is `DISABLED`.
         *
         * Disabled controls are exempt from validation checks and
         * are not included in the aggregate value of their ancestor
         * controls.
         *
         * @see {@link AbstractControl.status}
         *
         * @returns True if the control is disabled, false otherwise.
         */
        get disabled() {
          return this.status === DISABLED;
        }
        /**
         * A control is `enabled` as long as its `status` is not `DISABLED`.
         *
         * @returns True if the control has any status other than 'DISABLED',
         * false if the status is 'DISABLED'.
         *
         * @see {@link AbstractControl.status}
         *
         */
        get enabled() {
          return this.status !== DISABLED;
        }
        /**
         * A control is `dirty` if the user has changed the value
         * in the UI.
         *
         * @returns True if the user has changed the value of this control in the UI; compare `pristine`.
         * Programmatic changes to a control's value do not mark it dirty.
         */
        get dirty() {
          return !this.pristine;
        }
        /**
         * True if the control has not been marked as touched
         *
         * A control is `untouched` if the user has not yet triggered
         * a `blur` event on it.
         */
        get untouched() {
          return !this.touched;
        }
        /**
         * Reports the update strategy of the `AbstractControl` (meaning
         * the event on which the control updates itself).
         * Possible values: `'change'` | `'blur'` | `'submit'`
         * Default value: `'change'`
         */
        get updateOn() {
          return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : "change";
        }
        /**
         * Sets the synchronous validators that are active on this control.  Calling
         * this overwrites any existing synchronous validators.
         *
         * When you add or remove a validator at run time, you must call
         * `updateValueAndValidity()` for the new validation to take effect.
         *
         * If you want to add a new validator without affecting existing ones, consider
         * using `addValidators()` method instead.
         */
        setValidators(validators) {
          this._assignValidators(validators);
        }
        /**
         * Sets the asynchronous validators that are active on this control. Calling this
         * overwrites any existing asynchronous validators.
         *
         * When you add or remove a validator at run time, you must call
         * `updateValueAndValidity()` for the new validation to take effect.
         *
         * If you want to add a new validator without affecting existing ones, consider
         * using `addAsyncValidators()` method instead.
         */
        setAsyncValidators(validators) {
          this._assignAsyncValidators(validators);
        }
        /**
         * Add a synchronous validator or validators to this control, without affecting other validators.
         *
         * When you add or remove a validator at run time, you must call
         * `updateValueAndValidity()` for the new validation to take effect.
         *
         * Adding a validator that already exists will have no effect. If duplicate validator functions
         * are present in the `validators` array, only the first instance would be added to a form
         * control.
         *
         * @param validators The new validator function or functions to add to this control.
         */
        addValidators(validators) {
          this.setValidators(addValidators(validators, this._rawValidators));
        }
        /**
         * Add an asynchronous validator or validators to this control, without affecting other
         * validators.
         *
         * When you add or remove a validator at run time, you must call
         * `updateValueAndValidity()` for the new validation to take effect.
         *
         * Adding a validator that already exists will have no effect.
         *
         * @param validators The new asynchronous validator function or functions to add to this control.
         */
        addAsyncValidators(validators) {
          this.setAsyncValidators(addValidators(validators, this._rawAsyncValidators));
        }
        /**
         * Remove a synchronous validator from this control, without affecting other validators.
         * Validators are compared by function reference; you must pass a reference to the exact same
         * validator function as the one that was originally set. If a provided validator is not found,
         * it is ignored.
         *
         * @usageNotes
         *
         * ### Reference to a ValidatorFn
         *
         * ```
         * // Reference to the RequiredValidator
         * const ctrl = new FormControl<string | null>('', Validators.required);
         * ctrl.removeValidators(Validators.required);
         *
         * // Reference to anonymous function inside MinValidator
         * const minValidator = Validators.min(3);
         * const ctrl = new FormControl<string | null>('', minValidator);
         * expect(ctrl.hasValidator(minValidator)).toEqual(true)
         * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)
         *
         * ctrl.removeValidators(minValidator);
         * ```
         *
         * When you add or remove a validator at run time, you must call
         * `updateValueAndValidity()` for the new validation to take effect.
         *
         * @param validators The validator or validators to remove.
         */
        removeValidators(validators) {
          this.setValidators(removeValidators(validators, this._rawValidators));
        }
        /**
         * Remove an asynchronous validator from this control, without affecting other validators.
         * Validators are compared by function reference; you must pass a reference to the exact same
         * validator function as the one that was originally set. If a provided validator is not found, it
         * is ignored.
         *
         * When you add or remove a validator at run time, you must call
         * `updateValueAndValidity()` for the new validation to take effect.
         *
         * @param validators The asynchronous validator or validators to remove.
         */
        removeAsyncValidators(validators) {
          this.setAsyncValidators(removeValidators(validators, this._rawAsyncValidators));
        }
        /**
         * Check whether a synchronous validator function is present on this control. The provided
         * validator must be a reference to the exact same function that was provided.
         *
         * @usageNotes
         *
         * ### Reference to a ValidatorFn
         *
         * ```
         * // Reference to the RequiredValidator
         * const ctrl = new FormControl<number | null>(0, Validators.required);
         * expect(ctrl.hasValidator(Validators.required)).toEqual(true)
         *
         * // Reference to anonymous function inside MinValidator
         * const minValidator = Validators.min(3);
         * const ctrl = new FormControl<number | null>(0, minValidator);
         * expect(ctrl.hasValidator(minValidator)).toEqual(true)
         * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)
         * ```
         *
         * @param validator The validator to check for presence. Compared by function reference.
         * @returns Whether the provided validator was found on this control.
         */
        hasValidator(validator) {
          return hasValidator(this._rawValidators, validator);
        }
        /**
         * Check whether an asynchronous validator function is present on this control. The provided
         * validator must be a reference to the exact same function that was provided.
         *
         * @param validator The asynchronous validator to check for presence. Compared by function
         *     reference.
         * @returns Whether the provided asynchronous validator was found on this control.
         */
        hasAsyncValidator(validator) {
          return hasValidator(this._rawAsyncValidators, validator);
        }
        /**
         * Empties out the synchronous validator list.
         *
         * When you add or remove a validator at run time, you must call
         * `updateValueAndValidity()` for the new validation to take effect.
         *
         */
        clearValidators() {
          this.validator = null;
        }
        /**
         * Empties out the async validator list.
         *
         * When you add or remove a validator at run time, you must call
         * `updateValueAndValidity()` for the new validation to take effect.
         *
         */
        clearAsyncValidators() {
          this.asyncValidator = null;
        }
        /**
         * Marks the control as `touched`. A control is touched by focus and
         * blur events that do not change the value.
         *
         * @see {@link markAsUntouched()}
         * @see {@link markAsDirty()}
         * @see {@link markAsPristine()}
         *
         * @param opts Configuration options that determine how the control propagates changes
         * and emits events after marking is applied.
         * * `onlySelf`: When true, mark only this control. When false or not supplied,
         * marks all direct ancestors. Default is false.
         */
        markAsTouched(opts = {}) {
          this.touched = true;
          if (this._parent && !opts.onlySelf) {
            this._parent.markAsTouched(opts);
          }
        }
        /**
         * Marks the control and all its descendant controls as `touched`.
         * @see {@link markAsTouched()}
         */
        markAllAsTouched() {
          this.markAsTouched({ onlySelf: true });
          this._forEachChild((control) => control.markAllAsTouched());
        }
        /**
         * Marks the control as `untouched`.
         *
         * If the control has any children, also marks all children as `untouched`
         * and recalculates the `touched` status of all parent controls.
         *
         * @see {@link markAsTouched()}
         * @see {@link markAsDirty()}
         * @see {@link markAsPristine()}
         *
         * @param opts Configuration options that determine how the control propagates changes
         * and emits events after the marking is applied.
         * * `onlySelf`: When true, mark only this control. When false or not supplied,
         * marks all direct ancestors. Default is false.
         */
        markAsUntouched(opts = {}) {
          this.touched = false;
          this._pendingTouched = false;
          this._forEachChild((control) => {
            control.markAsUntouched({ onlySelf: true });
          });
          if (this._parent && !opts.onlySelf) {
            this._parent._updateTouched(opts);
          }
        }
        /**
         * Marks the control as `dirty`. A control becomes dirty when
         * the control's value is changed through the UI; compare `markAsTouched`.
         *
         * @see {@link markAsTouched()}
         * @see {@link markAsUntouched()}
         * @see {@link markAsPristine()}
         *
         * @param opts Configuration options that determine how the control propagates changes
         * and emits events after marking is applied.
         * * `onlySelf`: When true, mark only this control. When false or not supplied,
         * marks all direct ancestors. Default is false.
         */
        markAsDirty(opts = {}) {
          this.pristine = false;
          if (this._parent && !opts.onlySelf) {
            this._parent.markAsDirty(opts);
          }
        }
        /**
         * Marks the control as `pristine`.
         *
         * If the control has any children, marks all children as `pristine`,
         * and recalculates the `pristine` status of all parent
         * controls.
         *
         * @see {@link markAsTouched()}
         * @see {@link markAsUntouched()}
         * @see {@link markAsDirty()}
         *
         * @param opts Configuration options that determine how the control emits events after
         * marking is applied.
         * * `onlySelf`: When true, mark only this control. When false or not supplied,
         * marks all direct ancestors. Default is false.
         */
        markAsPristine(opts = {}) {
          this.pristine = true;
          this._pendingDirty = false;
          this._forEachChild((control) => {
            control.markAsPristine({ onlySelf: true });
          });
          if (this._parent && !opts.onlySelf) {
            this._parent._updatePristine(opts);
          }
        }
        /**
         * Marks the control as `pending`.
         *
         * A control is pending while the control performs async validation.
         *
         * @see {@link AbstractControl.status}
         *
         * @param opts Configuration options that determine how the control propagates changes and
         * emits events after marking is applied.
         * * `onlySelf`: When true, mark only this control. When false or not supplied,
         * marks all direct ancestors. Default is false.
         * * `emitEvent`: When true or not supplied (the default), the `statusChanges`
         * observable emits an event with the latest status the control is marked pending.
         * When false, no events are emitted.
         *
         */
        markAsPending(opts = {}) {
          this.status = PENDING;
          if (opts.emitEvent !== false) {
            this.statusChanges.emit(this.status);
          }
          if (this._parent && !opts.onlySelf) {
            this._parent.markAsPending(opts);
          }
        }
        /**
         * Disables the control. This means the control is exempt from validation checks and
         * excluded from the aggregate value of any parent. Its status is `DISABLED`.
         *
         * If the control has children, all children are also disabled.
         *
         * @see {@link AbstractControl.status}
         *
         * @param opts Configuration options that determine how the control propagates
         * changes and emits events after the control is disabled.
         * * `onlySelf`: When true, mark only this control. When false or not supplied,
         * marks all direct ancestors. Default is false.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges`
         * observables emit events with the latest status and value when the control is disabled.
         * When false, no events are emitted.
         */
        disable(opts = {}) {
          const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
          this.status = DISABLED;
          this.errors = null;
          this._forEachChild((control) => {
            control.disable({ ...opts, onlySelf: true });
          });
          this._updateValue();
          if (opts.emitEvent !== false) {
            this.valueChanges.emit(this.value);
            this.statusChanges.emit(this.status);
          }
          this._updateAncestors({ ...opts, skipPristineCheck });
          this._onDisabledChange.forEach((changeFn) => changeFn(true));
        }
        /**
         * Enables the control. This means the control is included in validation checks and
         * the aggregate value of its parent. Its status recalculates based on its value and
         * its validators.
         *
         * By default, if the control has children, all children are enabled.
         *
         * @see {@link AbstractControl.status}
         *
         * @param opts Configure options that control how the control propagates changes and
         * emits events when marked as untouched
         * * `onlySelf`: When true, mark only this control. When false or not supplied,
         * marks all direct ancestors. Default is false.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges`
         * observables emit events with the latest status and value when the control is enabled.
         * When false, no events are emitted.
         */
        enable(opts = {}) {
          const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
          this.status = VALID;
          this._forEachChild((control) => {
            control.enable({ ...opts, onlySelf: true });
          });
          this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });
          this._updateAncestors({ ...opts, skipPristineCheck });
          this._onDisabledChange.forEach((changeFn) => changeFn(false));
        }
        _updateAncestors(opts) {
          if (this._parent && !opts.onlySelf) {
            this._parent.updateValueAndValidity(opts);
            if (!opts.skipPristineCheck) {
              this._parent._updatePristine();
            }
            this._parent._updateTouched();
          }
        }
        /**
         * Sets the parent of the control
         *
         * @param parent The new parent.
         */
        setParent(parent) {
          this._parent = parent;
        }
        /**
         * The raw value of this control. For most control implementations, the raw value will include
         * disabled children.
         */
        getRawValue() {
          return this.value;
        }
        /**
         * Recalculates the value and validation status of the control.
         *
         * By default, it also updates the value and validity of its ancestors.
         *
         * @param opts Configuration options determine how the control propagates changes and emits events
         * after updates and validity checks are applied.
         * * `onlySelf`: When true, only update this control. When false or not supplied,
         * update all direct ancestors. Default is false.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges`
         * observables emit events with the latest status and value when the control is updated.
         * When false, no events are emitted.
         */
        updateValueAndValidity(opts = {}) {
          this._setInitialStatus();
          this._updateValue();
          if (this.enabled) {
            this._cancelExistingSubscription();
            this.errors = this._runValidator();
            this.status = this._calculateStatus();
            if (this.status === VALID || this.status === PENDING) {
              this._runAsyncValidator(opts.emitEvent);
            }
          }
          if (opts.emitEvent !== false) {
            this.valueChanges.emit(this.value);
            this.statusChanges.emit(this.status);
          }
          if (this._parent && !opts.onlySelf) {
            this._parent.updateValueAndValidity(opts);
          }
        }
        /** @internal */
        _updateTreeValidity(opts = { emitEvent: true }) {
          this._forEachChild((ctrl) => ctrl._updateTreeValidity(opts));
          this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });
        }
        _setInitialStatus() {
          this.status = this._allControlsDisabled() ? DISABLED : VALID;
        }
        _runValidator() {
          return this.validator ? this.validator(this) : null;
        }
        _runAsyncValidator(emitEvent2) {
          if (this.asyncValidator) {
            this.status = PENDING;
            this._hasOwnPendingAsyncValidator = true;
            const obs = toObservable(this.asyncValidator(this));
            this._asyncValidationSubscription = obs.subscribe((errors) => {
              this._hasOwnPendingAsyncValidator = false;
              this.setErrors(errors, { emitEvent: emitEvent2 });
            });
          }
        }
        _cancelExistingSubscription() {
          if (this._asyncValidationSubscription) {
            this._asyncValidationSubscription.unsubscribe();
            this._hasOwnPendingAsyncValidator = false;
          }
        }
        /**
         * Sets errors on a form control when running validations manually, rather than automatically.
         *
         * Calling `setErrors` also updates the validity of the parent control.
         *
         * @param opts Configuration options that determine how the control propagates
         * changes and emits events after the control errors are set.
         * * `emitEvent`: When true or not supplied (the default), the `statusChanges`
         * observable emits an event after the errors are set.
         *
         * @usageNotes
         *
         * ### Manually set the errors for a control
         *
         * ```
         * const login = new FormControl('someLogin');
         * login.setErrors({
         *   notUnique: true
         * });
         *
         * expect(login.valid).toEqual(false);
         * expect(login.errors).toEqual({ notUnique: true });
         *
         * login.setValue('someOtherLogin');
         *
         * expect(login.valid).toEqual(true);
         * ```
         */
        setErrors(errors, opts = {}) {
          this.errors = errors;
          this._updateControlsErrors(opts.emitEvent !== false);
        }
        /**
         * Retrieves a child control given the control's name or path.
         *
         * @param path A dot-delimited string or array of string/number values that define the path to the
         * control. If a string is provided, passing it as a string literal will result in improved type
         * information. Likewise, if an array is provided, passing it `as const` will cause improved type
         * information to be available.
         *
         * @usageNotes
         * ### Retrieve a nested control
         *
         * For example, to get a `name` control nested within a `person` sub-group:
         *
         * * `this.form.get('person.name');`
         *
         * -OR-
         *
         * * `this.form.get(['person', 'name'] as const);` // `as const` gives improved typings
         *
         * ### Retrieve a control in a FormArray
         *
         * When accessing an element inside a FormArray, you can use an element index.
         * For example, to get a `price` control from the first element in an `items` array you can use:
         *
         * * `this.form.get('items.0.price');`
         *
         * -OR-
         *
         * * `this.form.get(['items', 0, 'price']);`
         */
        get(path) {
          let currPath = path;
          if (currPath == null)
            return null;
          if (!Array.isArray(currPath))
            currPath = currPath.split(".");
          if (currPath.length === 0)
            return null;
          return currPath.reduce((control, name) => control && control._find(name), this);
        }
        /**
         * @description
         * Reports error data for the control with the given path.
         *
         * @param errorCode The code of the error to check
         * @param path A list of control names that designates how to move from the current control
         * to the control that should be queried for errors.
         *
         * @usageNotes
         * For example, for the following `FormGroup`:
         *
         * ```
         * form = new FormGroup({
         *   address: new FormGroup({ street: new FormControl() })
         * });
         * ```
         *
         * The path to the 'street' control from the root form would be 'address' -> 'street'.
         *
         * It can be provided to this method in one of two formats:
         *
         * 1. An array of string control names, e.g. `['address', 'street']`
         * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
         *
         * @returns error data for that particular error. If the control or error is not present,
         * null is returned.
         */
        getError(errorCode, path) {
          const control = path ? this.get(path) : this;
          return control && control.errors ? control.errors[errorCode] : null;
        }
        /**
         * @description
         * Reports whether the control with the given path has the error specified.
         *
         * @param errorCode The code of the error to check
         * @param path A list of control names that designates how to move from the current control
         * to the control that should be queried for errors.
         *
         * @usageNotes
         * For example, for the following `FormGroup`:
         *
         * ```
         * form = new FormGroup({
         *   address: new FormGroup({ street: new FormControl() })
         * });
         * ```
         *
         * The path to the 'street' control from the root form would be 'address' -> 'street'.
         *
         * It can be provided to this method in one of two formats:
         *
         * 1. An array of string control names, e.g. `['address', 'street']`
         * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
         *
         * If no path is given, this method checks for the error on the current control.
         *
         * @returns whether the given error is present in the control at the given path.
         *
         * If the control is not present, false is returned.
         */
        hasError(errorCode, path) {
          return !!this.getError(errorCode, path);
        }
        /**
         * Retrieves the top-level ancestor of this control.
         */
        get root() {
          let x = this;
          while (x._parent) {
            x = x._parent;
          }
          return x;
        }
        /** @internal */
        _updateControlsErrors(emitEvent2) {
          this.status = this._calculateStatus();
          if (emitEvent2) {
            this.statusChanges.emit(this.status);
          }
          if (this._parent) {
            this._parent._updateControlsErrors(emitEvent2);
          }
        }
        /** @internal */
        _initObservables() {
          this.valueChanges = new EventEmitter();
          this.statusChanges = new EventEmitter();
        }
        _calculateStatus() {
          if (this._allControlsDisabled())
            return DISABLED;
          if (this.errors)
            return INVALID;
          if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING))
            return PENDING;
          if (this._anyControlsHaveStatus(INVALID))
            return INVALID;
          return VALID;
        }
        /** @internal */
        _anyControlsHaveStatus(status) {
          return this._anyControls((control) => control.status === status);
        }
        /** @internal */
        _anyControlsDirty() {
          return this._anyControls((control) => control.dirty);
        }
        /** @internal */
        _anyControlsTouched() {
          return this._anyControls((control) => control.touched);
        }
        /** @internal */
        _updatePristine(opts = {}) {
          this.pristine = !this._anyControlsDirty();
          if (this._parent && !opts.onlySelf) {
            this._parent._updatePristine(opts);
          }
        }
        /** @internal */
        _updateTouched(opts = {}) {
          this.touched = this._anyControlsTouched();
          if (this._parent && !opts.onlySelf) {
            this._parent._updateTouched(opts);
          }
        }
        /** @internal */
        _registerOnCollectionChange(fn2) {
          this._onCollectionChange = fn2;
        }
        /** @internal */
        _setUpdateStrategy(opts) {
          if (isOptionsObj(opts) && opts.updateOn != null) {
            this._updateOn = opts.updateOn;
          }
        }
        /**
         * Check to see if parent has been marked artificially dirty.
         *
         * @internal
         */
        _parentMarkedDirty(onlySelf) {
          const parentDirty = this._parent && this._parent.dirty;
          return !onlySelf && !!parentDirty && !this._parent._anyControlsDirty();
        }
        /** @internal */
        _find(name) {
          return null;
        }
        /**
         * Internal implementation of the `setValidators` method. Needs to be separated out into a
         * different method, because it is called in the constructor and it can break cases where
         * a control is extended.
         */
        _assignValidators(validators) {
          this._rawValidators = Array.isArray(validators) ? validators.slice() : validators;
          this._composedValidatorFn = coerceToValidator(this._rawValidators);
        }
        /**
         * Internal implementation of the `setAsyncValidators` method. Needs to be separated out into a
         * different method, because it is called in the constructor and it can break cases where
         * a control is extended.
         */
        _assignAsyncValidators(validators) {
          this._rawAsyncValidators = Array.isArray(validators) ? validators.slice() : validators;
          this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);
        }
      };
      FormGroup = class extends AbstractControl {
        /**
         * Creates a new `FormGroup` instance.
         *
         * @param controls A collection of child controls. The key for each child is the name
         * under which it is registered.
         *
         * @param validatorOrOpts A synchronous validator function, or an array of
         * such functions, or an `AbstractControlOptions` object that contains validation functions
         * and a validation trigger.
         *
         * @param asyncValidator A single async validator or array of async validator functions
         *
         */
        constructor(controls, validatorOrOpts, asyncValidator) {
          super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
          (typeof ngDevMode === "undefined" || ngDevMode) && validateFormGroupControls(controls);
          this.controls = controls;
          this._initObservables();
          this._setUpdateStrategy(validatorOrOpts);
          this._setUpControls();
          this.updateValueAndValidity({
            onlySelf: true,
            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
            // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,
            // so we set `emitEvent` to `true` to allow that during the control creation process.
            emitEvent: !!this.asyncValidator
          });
        }
        registerControl(name, control) {
          if (this.controls[name])
            return this.controls[name];
          this.controls[name] = control;
          control.setParent(this);
          control._registerOnCollectionChange(this._onCollectionChange);
          return control;
        }
        addControl(name, control, options = {}) {
          this.registerControl(name, control);
          this.updateValueAndValidity({ emitEvent: options.emitEvent });
          this._onCollectionChange();
        }
        /**
         * Remove a control from this group. In a strongly-typed group, required controls cannot be
         * removed.
         *
         * This method also updates the value and validity of the control.
         *
         * @param name The control name to remove from the collection
         * @param options Specifies whether this FormGroup instance should emit events after a
         *     control is removed.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges` observables emit events with the latest status and value when the control is
         * removed. When false, no events are emitted.
         */
        removeControl(name, options = {}) {
          if (this.controls[name])
            this.controls[name]._registerOnCollectionChange(() => {
            });
          delete this.controls[name];
          this.updateValueAndValidity({ emitEvent: options.emitEvent });
          this._onCollectionChange();
        }
        setControl(name, control, options = {}) {
          if (this.controls[name])
            this.controls[name]._registerOnCollectionChange(() => {
            });
          delete this.controls[name];
          if (control)
            this.registerControl(name, control);
          this.updateValueAndValidity({ emitEvent: options.emitEvent });
          this._onCollectionChange();
        }
        contains(controlName) {
          return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
        }
        /**
         * Sets the value of the `FormGroup`. It accepts an object that matches
         * the structure of the group, with control names as keys.
         *
         * @usageNotes
         * ### Set the complete value for the form group
         *
         * ```
         * const form = new FormGroup({
         *   first: new FormControl(),
         *   last: new FormControl()
         * });
         *
         * console.log(form.value);   // {first: null, last: null}
         *
         * form.setValue({first: 'Nancy', last: 'Drew'});
         * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
         * ```
         *
         * @throws When strict checks fail, such as setting the value of a control
         * that doesn't exist or if you exclude a value of a control that does exist.
         *
         * @param value The new value for the control that matches the structure of the group.
         * @param options Configuration options that determine how the control propagates changes
         * and emits events after the value changes.
         * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
         * updateValueAndValidity} method.
         *
         * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
         * false.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges`
         * observables emit events with the latest status and value when the control value is updated.
         * When false, no events are emitted.
         */
        setValue(value, options = {}) {
          assertAllValuesPresent(this, true, value);
          Object.keys(value).forEach((name) => {
            assertControlPresent(this, true, name);
            this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });
          });
          this.updateValueAndValidity(options);
        }
        /**
         * Patches the value of the `FormGroup`. It accepts an object with control
         * names as keys, and does its best to match the values to the correct controls
         * in the group.
         *
         * It accepts both super-sets and sub-sets of the group without throwing an error.
         *
         * @usageNotes
         * ### Patch the value for a form group
         *
         * ```
         * const form = new FormGroup({
         *    first: new FormControl(),
         *    last: new FormControl()
         * });
         * console.log(form.value);   // {first: null, last: null}
         *
         * form.patchValue({first: 'Nancy'});
         * console.log(form.value);   // {first: 'Nancy', last: null}
         * ```
         *
         * @param value The object that matches the structure of the group.
         * @param options Configuration options that determine how the control propagates changes and
         * emits events after the value is patched.
         * * `onlySelf`: When true, each change only affects this control and not its parent. Default is
         * true.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges` observables emit events with the latest status and value when the control value
         * is updated. When false, no events are emitted. The configuration options are passed to
         * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
         */
        patchValue(value, options = {}) {
          if (value == null)
            return;
          Object.keys(value).forEach((name) => {
            const control = this.controls[name];
            if (control) {
              control.patchValue(
                /* Guaranteed to be present, due to the outer forEach. */
                value[name],
                { onlySelf: true, emitEvent: options.emitEvent }
              );
            }
          });
          this.updateValueAndValidity(options);
        }
        /**
         * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets
         * the value of all descendants to their default values, or null if no defaults were provided.
         *
         * You reset to a specific form state by passing in a map of states
         * that matches the structure of your form, with control names as keys. The state
         * is a standalone value or a form state object with both a value and a disabled
         * status.
         *
         * @param value Resets the control with an initial value,
         * or an object that defines the initial value and disabled state.
         *
         * @param options Configuration options that determine how the control propagates changes
         * and emits events when the group is reset.
         * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
         * false.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges`
         * observables emit events with the latest status and value when the control is reset.
         * When false, no events are emitted.
         * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
         * updateValueAndValidity} method.
         *
         * @usageNotes
         *
         * ### Reset the form group values
         *
         * ```ts
         * const form = new FormGroup({
         *   first: new FormControl('first name'),
         *   last: new FormControl('last name')
         * });
         *
         * console.log(form.value);  // {first: 'first name', last: 'last name'}
         *
         * form.reset({ first: 'name', last: 'last name' });
         *
         * console.log(form.value);  // {first: 'name', last: 'last name'}
         * ```
         *
         * ### Reset the form group values and disabled status
         *
         * ```
         * const form = new FormGroup({
         *   first: new FormControl('first name'),
         *   last: new FormControl('last name')
         * });
         *
         * form.reset({
         *   first: {value: 'name', disabled: true},
         *   last: 'last'
         * });
         *
         * console.log(form.value);  // {last: 'last'}
         * console.log(form.get('first').status);  // 'DISABLED'
         * ```
         */
        reset(value = {}, options = {}) {
          this._forEachChild((control, name) => {
            control.reset(value ? value[name] : null, { onlySelf: true, emitEvent: options.emitEvent });
          });
          this._updatePristine(options);
          this._updateTouched(options);
          this.updateValueAndValidity(options);
        }
        /**
         * The aggregate value of the `FormGroup`, including any disabled controls.
         *
         * Retrieves all values regardless of disabled status.
         */
        getRawValue() {
          return this._reduceChildren({}, (acc, control, name) => {
            acc[name] = control.getRawValue();
            return acc;
          });
        }
        /** @internal */
        _syncPendingControls() {
          let subtreeUpdated = this._reduceChildren(false, (updated, child) => {
            return child._syncPendingControls() ? true : updated;
          });
          if (subtreeUpdated)
            this.updateValueAndValidity({ onlySelf: true });
          return subtreeUpdated;
        }
        /** @internal */
        _forEachChild(cb) {
          Object.keys(this.controls).forEach((key) => {
            const control = this.controls[key];
            control && cb(control, key);
          });
        }
        /** @internal */
        _setUpControls() {
          this._forEachChild((control) => {
            control.setParent(this);
            control._registerOnCollectionChange(this._onCollectionChange);
          });
        }
        /** @internal */
        _updateValue() {
          this.value = this._reduceValue();
        }
        /** @internal */
        _anyControls(condition) {
          for (const [controlName, control] of Object.entries(this.controls)) {
            if (this.contains(controlName) && condition(control)) {
              return true;
            }
          }
          return false;
        }
        /** @internal */
        _reduceValue() {
          let acc = {};
          return this._reduceChildren(acc, (acc2, control, name) => {
            if (control.enabled || this.disabled) {
              acc2[name] = control.value;
            }
            return acc2;
          });
        }
        /** @internal */
        _reduceChildren(initValue, fn2) {
          let res = initValue;
          this._forEachChild((control, name) => {
            res = fn2(res, control, name);
          });
          return res;
        }
        /** @internal */
        _allControlsDisabled() {
          for (const controlName of Object.keys(this.controls)) {
            if (this.controls[controlName].enabled) {
              return false;
            }
          }
          return Object.keys(this.controls).length > 0 || this.disabled;
        }
        /** @internal */
        _find(name) {
          return this.controls.hasOwnProperty(name) ? this.controls[name] : null;
        }
      };
      FormRecord = class extends FormGroup {
      };
      CALL_SET_DISABLED_STATE = new InjectionToken("CallSetDisabledState", { providedIn: "root", factory: () => setDisabledStateDefault });
      setDisabledStateDefault = "always";
      formDirectiveProvider$1 = {
        provide: ControlContainer,
        useExisting: forwardRef(() => NgForm)
      };
      resolvedPromise$1 = (() => Promise.resolve())();
      NgForm = class _NgForm extends ControlContainer {
        constructor(validators, asyncValidators, callSetDisabledState) {
          super();
          this.callSetDisabledState = callSetDisabledState;
          this.submitted = false;
          this._directives = /* @__PURE__ */ new Set();
          this.ngSubmit = new EventEmitter();
          this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
        }
        /** @nodoc */
        ngAfterViewInit() {
          this._setUpdateStrategy();
        }
        /**
         * @description
         * The directive instance.
         */
        get formDirective() {
          return this;
        }
        /**
         * @description
         * The internal `FormGroup` instance.
         */
        get control() {
          return this.form;
        }
        /**
         * @description
         * Returns an array representing the path to this group. Because this directive
         * always lives at the top level of a form, it is always an empty array.
         */
        get path() {
          return [];
        }
        /**
         * @description
         * Returns a map of the controls in this group.
         */
        get controls() {
          return this.form.controls;
        }
        /**
         * @description
         * Method that sets up the control directive in this group, re-calculates its value
         * and validity, and adds the instance to the internal list of directives.
         *
         * @param dir The `NgModel` directive instance.
         */
        addControl(dir) {
          resolvedPromise$1.then(() => {
            const container = this._findContainer(dir.path);
            dir.control = container.registerControl(dir.name, dir.control);
            setUpControl(dir.control, dir, this.callSetDisabledState);
            dir.control.updateValueAndValidity({ emitEvent: false });
            this._directives.add(dir);
          });
        }
        /**
         * @description
         * Retrieves the `FormControl` instance from the provided `NgModel` directive.
         *
         * @param dir The `NgModel` directive instance.
         */
        getControl(dir) {
          return this.form.get(dir.path);
        }
        /**
         * @description
         * Removes the `NgModel` instance from the internal list of directives
         *
         * @param dir The `NgModel` directive instance.
         */
        removeControl(dir) {
          resolvedPromise$1.then(() => {
            const container = this._findContainer(dir.path);
            if (container) {
              container.removeControl(dir.name);
            }
            this._directives.delete(dir);
          });
        }
        /**
         * @description
         * Adds a new `NgModelGroup` directive instance to the form.
         *
         * @param dir The `NgModelGroup` directive instance.
         */
        addFormGroup(dir) {
          resolvedPromise$1.then(() => {
            const container = this._findContainer(dir.path);
            const group = new FormGroup({});
            setUpFormContainer(group, dir);
            container.registerControl(dir.name, group);
            group.updateValueAndValidity({ emitEvent: false });
          });
        }
        /**
         * @description
         * Removes the `NgModelGroup` directive instance from the form.
         *
         * @param dir The `NgModelGroup` directive instance.
         */
        removeFormGroup(dir) {
          resolvedPromise$1.then(() => {
            const container = this._findContainer(dir.path);
            if (container) {
              container.removeControl(dir.name);
            }
          });
        }
        /**
         * @description
         * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance
         *
         * @param dir The `NgModelGroup` directive instance.
         */
        getFormGroup(dir) {
          return this.form.get(dir.path);
        }
        /**
         * Sets the new value for the provided `NgControl` directive.
         *
         * @param dir The `NgControl` directive instance.
         * @param value The new value for the directive's control.
         */
        updateModel(dir, value) {
          resolvedPromise$1.then(() => {
            const ctrl = this.form.get(dir.path);
            ctrl.setValue(value);
          });
        }
        /**
         * @description
         * Sets the value for this `FormGroup`.
         *
         * @param value The new value
         */
        setValue(value) {
          this.control.setValue(value);
        }
        /**
         * @description
         * Method called when the "submit" event is triggered on the form.
         * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
         *
         * @param $event The "submit" event object
         */
        onSubmit($event) {
          this.submitted = true;
          syncPendingControls(this.form, this._directives);
          this.ngSubmit.emit($event);
          return $event?.target?.method === "dialog";
        }
        /**
         * @description
         * Method called when the "reset" event is triggered on the form.
         */
        onReset() {
          this.resetForm();
        }
        /**
         * @description
         * Resets the form to an initial value and resets its submitted status.
         *
         * @param value The new value for the form.
         */
        resetForm(value = void 0) {
          this.form.reset(value);
          this.submitted = false;
        }
        _setUpdateStrategy() {
          if (this.options && this.options.updateOn != null) {
            this.form._updateOn = this.options.updateOn;
          }
        }
        _findContainer(path) {
          path.pop();
          return path.length ? this.form.get(path) : this.form;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgForm, deps: [{ token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: { options: ["ngFormOptions", "options"] }, outputs: { ngSubmit: "ngSubmit" }, host: { listeners: { "submit": "onSubmit($event)", "reset": "onReset()" } }, providers: [formDirectiveProvider$1], exportAs: ["ngForm"], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgForm, decorators: [{
        type: Directive,
        args: [{
          selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]",
          providers: [formDirectiveProvider$1],
          host: { "(submit)": "onSubmit($event)", "(reset)": "onReset()" },
          outputs: ["ngSubmit"],
          exportAs: "ngForm"
        }]
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_VALIDATORS]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_ASYNC_VALIDATORS]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [CALL_SET_DISABLED_STATE]
      }] }], propDecorators: { options: [{
        type: Input,
        args: ["ngFormOptions"]
      }] } });
      FormControl = class FormControl2 extends AbstractControl {
        constructor(formState = null, validatorOrOpts, asyncValidator) {
          super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
          this.defaultValue = null;
          this._onChange = [];
          this._pendingChange = false;
          this._applyFormState(formState);
          this._setUpdateStrategy(validatorOrOpts);
          this._initObservables();
          this.updateValueAndValidity({
            onlySelf: true,
            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
            // `VALID` or `INVALID`.
            // The status should be broadcasted via the `statusChanges` observable, so we set
            // `emitEvent` to `true` to allow that during the control creation process.
            emitEvent: !!this.asyncValidator
          });
          if (isOptionsObj(validatorOrOpts) && (validatorOrOpts.nonNullable || validatorOrOpts.initialValueIsDefault)) {
            if (isFormControlState(formState)) {
              this.defaultValue = formState.value;
            } else {
              this.defaultValue = formState;
            }
          }
        }
        setValue(value, options = {}) {
          this.value = this._pendingValue = value;
          if (this._onChange.length && options.emitModelToViewChange !== false) {
            this._onChange.forEach((changeFn) => changeFn(this.value, options.emitViewToModelChange !== false));
          }
          this.updateValueAndValidity(options);
        }
        patchValue(value, options = {}) {
          this.setValue(value, options);
        }
        reset(formState = this.defaultValue, options = {}) {
          this._applyFormState(formState);
          this.markAsPristine(options);
          this.markAsUntouched(options);
          this.setValue(this.value, options);
          this._pendingChange = false;
        }
        /**  @internal */
        _updateValue() {
        }
        /**  @internal */
        _anyControls(condition) {
          return false;
        }
        /**  @internal */
        _allControlsDisabled() {
          return this.disabled;
        }
        registerOnChange(fn2) {
          this._onChange.push(fn2);
        }
        /** @internal */
        _unregisterOnChange(fn2) {
          removeListItem(this._onChange, fn2);
        }
        registerOnDisabledChange(fn2) {
          this._onDisabledChange.push(fn2);
        }
        /** @internal */
        _unregisterOnDisabledChange(fn2) {
          removeListItem(this._onDisabledChange, fn2);
        }
        /** @internal */
        _forEachChild(cb) {
        }
        /** @internal */
        _syncPendingControls() {
          if (this.updateOn === "submit") {
            if (this._pendingDirty)
              this.markAsDirty();
            if (this._pendingTouched)
              this.markAsTouched();
            if (this._pendingChange) {
              this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });
              return true;
            }
          }
          return false;
        }
        _applyFormState(formState) {
          if (isFormControlState(formState)) {
            this.value = this._pendingValue = formState.value;
            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) : this.enable({ onlySelf: true, emitEvent: false });
          } else {
            this.value = this._pendingValue = formState;
          }
        }
      };
      isFormControl = (control) => control instanceof FormControl;
      AbstractFormGroupDirective = class _AbstractFormGroupDirective extends ControlContainer {
        /** @nodoc */
        ngOnInit() {
          this._checkParentType();
          this.formDirective.addFormGroup(this);
        }
        /** @nodoc */
        ngOnDestroy() {
          if (this.formDirective) {
            this.formDirective.removeFormGroup(this);
          }
        }
        /**
         * @description
         * The `FormGroup` bound to this directive.
         */
        get control() {
          return this.formDirective.getFormGroup(this);
        }
        /**
         * @description
         * The path to this group from the top-level directive.
         */
        get path() {
          return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
        }
        /**
         * @description
         * The top-level directive for this group if present, otherwise null.
         */
        get formDirective() {
          return this._parent ? this._parent.formDirective : null;
        }
        /** @internal */
        _checkParentType() {
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _AbstractFormGroupDirective, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _AbstractFormGroupDirective, usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: AbstractFormGroupDirective, decorators: [{
        type: Directive
      }] });
      modelGroupProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(() => NgModelGroup)
      };
      NgModelGroup = class _NgModelGroup extends AbstractFormGroupDirective {
        constructor(parent, validators, asyncValidators) {
          super();
          this.name = "";
          this._parent = parent;
          this._setValidators(validators);
          this._setAsyncValidators(asyncValidators);
        }
        /** @internal */
        _checkParentType() {
          if (!(this._parent instanceof _NgModelGroup) && !(this._parent instanceof NgForm) && (typeof ngDevMode === "undefined" || ngDevMode)) {
            throw modelGroupParentException();
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgModelGroup, deps: [{ token: ControlContainer, host: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgModelGroup, selector: "[ngModelGroup]", inputs: { name: ["ngModelGroup", "name"] }, providers: [modelGroupProvider], exportAs: ["ngModelGroup"], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgModelGroup, decorators: [{
        type: Directive,
        args: [{ selector: "[ngModelGroup]", providers: [modelGroupProvider], exportAs: "ngModelGroup" }]
      }], ctorParameters: () => [{ type: ControlContainer, decorators: [{
        type: Host
      }, {
        type: SkipSelf
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_VALIDATORS]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_ASYNC_VALIDATORS]
      }] }], propDecorators: { name: [{
        type: Input,
        args: ["ngModelGroup"]
      }] } });
      formControlBinding$1 = {
        provide: NgControl,
        useExisting: forwardRef(() => NgModel)
      };
      resolvedPromise = (() => Promise.resolve())();
      NgModel = class _NgModel extends NgControl {
        constructor(parent, validators, asyncValidators, valueAccessors, _changeDetectorRef, callSetDisabledState) {
          super();
          this._changeDetectorRef = _changeDetectorRef;
          this.callSetDisabledState = callSetDisabledState;
          this.control = new FormControl();
          this._registered = false;
          this.name = "";
          this.update = new EventEmitter();
          this._parent = parent;
          this._setValidators(validators);
          this._setAsyncValidators(asyncValidators);
          this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        /** @nodoc */
        ngOnChanges(changes) {
          this._checkForErrors();
          if (!this._registered || "name" in changes) {
            if (this._registered) {
              this._checkName();
              if (this.formDirective) {
                const oldName = changes["name"].previousValue;
                this.formDirective.removeControl({ name: oldName, path: this._getPath(oldName) });
              }
            }
            this._setUpControl();
          }
          if ("isDisabled" in changes) {
            this._updateDisabled(changes);
          }
          if (isPropertyUpdated(changes, this.viewModel)) {
            this._updateValue(this.model);
            this.viewModel = this.model;
          }
        }
        /** @nodoc */
        ngOnDestroy() {
          this.formDirective && this.formDirective.removeControl(this);
        }
        /**
         * @description
         * Returns an array that represents the path from the top-level form to this control.
         * Each index is the string name of the control on that level.
         */
        get path() {
          return this._getPath(this.name);
        }
        /**
         * @description
         * The top-level directive for this control if present, otherwise null.
         */
        get formDirective() {
          return this._parent ? this._parent.formDirective : null;
        }
        /**
         * @description
         * Sets the new value for the view model and emits an `ngModelChange` event.
         *
         * @param newValue The new value emitted by `ngModelChange`.
         */
        viewToModelUpdate(newValue) {
          this.viewModel = newValue;
          this.update.emit(newValue);
        }
        _setUpControl() {
          this._setUpdateStrategy();
          this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
          this._registered = true;
        }
        _setUpdateStrategy() {
          if (this.options && this.options.updateOn != null) {
            this.control._updateOn = this.options.updateOn;
          }
        }
        _isStandalone() {
          return !this._parent || !!(this.options && this.options.standalone);
        }
        _setUpStandalone() {
          setUpControl(this.control, this, this.callSetDisabledState);
          this.control.updateValueAndValidity({ emitEvent: false });
        }
        _checkForErrors() {
          if (!this._isStandalone()) {
            this._checkParentType();
          }
          this._checkName();
        }
        _checkParentType() {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
              throw formGroupNameException();
            } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
              throw modelParentException();
            }
          }
        }
        _checkName() {
          if (this.options && this.options.name)
            this.name = this.options.name;
          if (!this._isStandalone() && !this.name && (typeof ngDevMode === "undefined" || ngDevMode)) {
            throw missingNameException();
          }
        }
        _updateValue(value) {
          resolvedPromise.then(() => {
            this.control.setValue(value, { emitViewToModelChange: false });
            this._changeDetectorRef?.markForCheck();
          });
        }
        _updateDisabled(changes) {
          const disabledValue = changes["isDisabled"].currentValue;
          const isDisabled = disabledValue !== 0 && booleanAttribute(disabledValue);
          resolvedPromise.then(() => {
            if (isDisabled && !this.control.disabled) {
              this.control.disable();
            } else if (!isDisabled && this.control.disabled) {
              this.control.enable();
            }
            this._changeDetectorRef?.markForCheck();
          });
        }
        _getPath(controlName) {
          return this._parent ? controlPath(controlName, this._parent) : [controlName];
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgModel, deps: [{ token: ControlContainer, host: true, optional: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }, { token: ChangeDetectorRef, optional: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: { name: "name", isDisabled: ["disabled", "isDisabled"], model: ["ngModel", "model"], options: ["ngModelOptions", "options"] }, outputs: { update: "ngModelChange" }, providers: [formControlBinding$1], exportAs: ["ngModel"], usesInheritance: true, usesOnChanges: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgModel, decorators: [{
        type: Directive,
        args: [{
          selector: "[ngModel]:not([formControlName]):not([formControl])",
          providers: [formControlBinding$1],
          exportAs: "ngModel"
        }]
      }], ctorParameters: () => [{ type: ControlContainer, decorators: [{
        type: Optional
      }, {
        type: Host
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_VALIDATORS]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_ASYNC_VALIDATORS]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_VALUE_ACCESSOR]
      }] }, { type: ChangeDetectorRef, decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [ChangeDetectorRef]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [CALL_SET_DISABLED_STATE]
      }] }], propDecorators: { name: [{
        type: Input
      }], isDisabled: [{
        type: Input,
        args: ["disabled"]
      }], model: [{
        type: Input,
        args: ["ngModel"]
      }], options: [{
        type: Input,
        args: ["ngModelOptions"]
      }], update: [{
        type: Output,
        args: ["ngModelChange"]
      }] } });
      \u0275NgNoValidate = class _\u0275NgNoValidate {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _\u0275NgNoValidate, deps: [], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _\u0275NgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])", host: { attributes: { "novalidate": "" } }, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: \u0275NgNoValidate, decorators: [{
        type: Directive,
        args: [{
          selector: "form:not([ngNoForm]):not([ngNativeValidate])",
          host: { "novalidate": "" }
        }]
      }] });
      NUMBER_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => NumberValueAccessor),
        multi: true
      };
      NumberValueAccessor = class _NumberValueAccessor extends BuiltInControlValueAccessor {
        /**
         * Sets the "value" property on the input element.
         * @nodoc
         */
        writeValue(value) {
          const normalizedValue = value == null ? "" : value;
          this.setProperty("value", normalizedValue);
        }
        /**
         * Registers a function called when the control value changes.
         * @nodoc
         */
        registerOnChange(fn2) {
          this.onChange = (value) => {
            fn2(value == "" ? null : parseFloat(value));
          };
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NumberValueAccessor, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]", host: { listeners: { "input": "onChange($event.target.value)", "blur": "onTouched()" } }, providers: [NUMBER_VALUE_ACCESSOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NumberValueAccessor, decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]",
          host: { "(input)": "onChange($event.target.value)", "(blur)": "onTouched()" },
          providers: [NUMBER_VALUE_ACCESSOR]
        }]
      }] });
      RADIO_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => RadioControlValueAccessor),
        multi: true
      };
      RadioControlRegistry = class _RadioControlRegistry {
        constructor() {
          this._accessors = [];
        }
        /**
         * @description
         * Adds a control to the internal registry. For internal use only.
         */
        add(control, accessor) {
          this._accessors.push([control, accessor]);
        }
        /**
         * @description
         * Removes a control from the internal registry. For internal use only.
         */
        remove(accessor) {
          for (let i = this._accessors.length - 1; i >= 0; --i) {
            if (this._accessors[i][1] === accessor) {
              this._accessors.splice(i, 1);
              return;
            }
          }
        }
        /**
         * @description
         * Selects a radio button. For internal use only.
         */
        select(accessor) {
          this._accessors.forEach((c) => {
            if (this._isSameGroup(c, accessor) && c[1] !== accessor) {
              c[1].fireUncheck(accessor.value);
            }
          });
        }
        _isSameGroup(controlPair, accessor) {
          if (!controlPair[0].control)
            return false;
          return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RadioControlRegistry, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RadioControlRegistry, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: RadioControlRegistry, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }] });
      RadioControlValueAccessor = class _RadioControlValueAccessor extends BuiltInControlValueAccessor {
        constructor(renderer, elementRef, _registry, _injector) {
          super(renderer, elementRef);
          this._registry = _registry;
          this._injector = _injector;
          this.setDisabledStateFired = false;
          this.onChange = () => {
          };
          this.callSetDisabledState = inject(CALL_SET_DISABLED_STATE, { optional: true }) ?? setDisabledStateDefault;
        }
        /** @nodoc */
        ngOnInit() {
          this._control = this._injector.get(NgControl);
          this._checkName();
          this._registry.add(this._control, this);
        }
        /** @nodoc */
        ngOnDestroy() {
          this._registry.remove(this);
        }
        /**
         * Sets the "checked" property value on the radio input element.
         * @nodoc
         */
        writeValue(value) {
          this._state = value === this.value;
          this.setProperty("checked", this._state);
        }
        /**
         * Registers a function called when the control value changes.
         * @nodoc
         */
        registerOnChange(fn2) {
          this._fn = fn2;
          this.onChange = () => {
            fn2(this.value);
            this._registry.select(this);
          };
        }
        /** @nodoc */
        setDisabledState(isDisabled) {
          if (this.setDisabledStateFired || isDisabled || this.callSetDisabledState === "whenDisabledForLegacyCode") {
            this.setProperty("disabled", isDisabled);
          }
          this.setDisabledStateFired = true;
        }
        /**
         * Sets the "value" on the radio input element and unchecks it.
         *
         * @param value
         */
        fireUncheck(value) {
          this.writeValue(value);
        }
        _checkName() {
          if (this.name && this.formControlName && this.name !== this.formControlName && (typeof ngDevMode === "undefined" || ngDevMode)) {
            throwNameError();
          }
          if (!this.name && this.formControlName)
            this.name = this.formControlName;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RadioControlValueAccessor, deps: [{ token: Renderer2 }, { token: ElementRef }, { token: RadioControlRegistry }, { token: Injector }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: { name: "name", formControlName: "formControlName", value: "value" }, host: { listeners: { "change": "onChange()", "blur": "onTouched()" } }, providers: [RADIO_VALUE_ACCESSOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: RadioControlValueAccessor, decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]",
          host: { "(change)": "onChange()", "(blur)": "onTouched()" },
          providers: [RADIO_VALUE_ACCESSOR]
        }]
      }], ctorParameters: () => [{ type: Renderer2 }, { type: ElementRef }, { type: RadioControlRegistry }, { type: Injector }], propDecorators: { name: [{
        type: Input
      }], formControlName: [{
        type: Input
      }], value: [{
        type: Input
      }] } });
      RANGE_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => RangeValueAccessor),
        multi: true
      };
      RangeValueAccessor = class _RangeValueAccessor extends BuiltInControlValueAccessor {
        /**
         * Sets the "value" property on the input element.
         * @nodoc
         */
        writeValue(value) {
          this.setProperty("value", parseFloat(value));
        }
        /**
         * Registers a function called when the control value changes.
         * @nodoc
         */
        registerOnChange(fn2) {
          this.onChange = (value) => {
            fn2(value == "" ? null : parseFloat(value));
          };
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RangeValueAccessor, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _RangeValueAccessor, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]", host: { listeners: { "change": "onChange($event.target.value)", "input": "onChange($event.target.value)", "blur": "onTouched()" } }, providers: [RANGE_VALUE_ACCESSOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: RangeValueAccessor, decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]",
          host: {
            "(change)": "onChange($event.target.value)",
            "(input)": "onChange($event.target.value)",
            "(blur)": "onTouched()"
          },
          providers: [RANGE_VALUE_ACCESSOR]
        }]
      }] });
      NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken(ngDevMode ? "NgModelWithFormControlWarning" : "");
      formControlBinding = {
        provide: NgControl,
        useExisting: forwardRef(() => FormControlDirective)
      };
      FormControlDirective = class _FormControlDirective extends NgControl {
        /**
         * @description
         * Triggers a warning in dev mode that this input should not be used with reactive forms.
         */
        set isDisabled(isDisabled) {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            console.warn(disabledAttrWarning);
          }
        }
        static {
          this._ngModelWarningSentOnce = false;
        }
        constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig, callSetDisabledState) {
          super();
          this._ngModelWarningConfig = _ngModelWarningConfig;
          this.callSetDisabledState = callSetDisabledState;
          this.update = new EventEmitter();
          this._ngModelWarningSent = false;
          this._setValidators(validators);
          this._setAsyncValidators(asyncValidators);
          this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        /** @nodoc */
        ngOnChanges(changes) {
          if (this._isControlChanged(changes)) {
            const previousForm = changes["form"].previousValue;
            if (previousForm) {
              cleanUpControl(
                previousForm,
                this,
                /* validateControlPresenceOnChange */
                false
              );
            }
            setUpControl(this.form, this, this.callSetDisabledState);
            this.form.updateValueAndValidity({ emitEvent: false });
          }
          if (isPropertyUpdated(changes, this.viewModel)) {
            if (typeof ngDevMode === "undefined" || ngDevMode) {
              _ngModelWarning("formControl", _FormControlDirective, this, this._ngModelWarningConfig);
            }
            this.form.setValue(this.model);
            this.viewModel = this.model;
          }
        }
        /** @nodoc */
        ngOnDestroy() {
          if (this.form) {
            cleanUpControl(
              this.form,
              this,
              /* validateControlPresenceOnChange */
              false
            );
          }
        }
        /**
         * @description
         * Returns an array that represents the path from the top-level form to this control.
         * Each index is the string name of the control on that level.
         */
        get path() {
          return [];
        }
        /**
         * @description
         * The `FormControl` bound to this directive.
         */
        get control() {
          return this.form;
        }
        /**
         * @description
         * Sets the new value for the view model and emits an `ngModelChange` event.
         *
         * @param newValue The new value for the view model.
         */
        viewToModelUpdate(newValue) {
          this.viewModel = newValue;
          this.update.emit(newValue);
        }
        _isControlChanged(changes) {
          return changes.hasOwnProperty("form");
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _FormControlDirective, deps: [{ token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }, { token: NG_MODEL_WITH_FORM_CONTROL_WARNING, optional: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _FormControlDirective, selector: "[formControl]", inputs: { form: ["formControl", "form"], isDisabled: ["disabled", "isDisabled"], model: ["ngModel", "model"] }, outputs: { update: "ngModelChange" }, providers: [formControlBinding], exportAs: ["ngForm"], usesInheritance: true, usesOnChanges: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: FormControlDirective, decorators: [{
        type: Directive,
        args: [{ selector: "[formControl]", providers: [formControlBinding], exportAs: "ngForm" }]
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_VALIDATORS]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_ASYNC_VALIDATORS]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_VALUE_ACCESSOR]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [CALL_SET_DISABLED_STATE]
      }] }], propDecorators: { form: [{
        type: Input,
        args: ["formControl"]
      }], isDisabled: [{
        type: Input,
        args: ["disabled"]
      }], model: [{
        type: Input,
        args: ["ngModel"]
      }], update: [{
        type: Output,
        args: ["ngModelChange"]
      }] } });
      formDirectiveProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(() => FormGroupDirective)
      };
      FormGroupDirective = class _FormGroupDirective extends ControlContainer {
        constructor(validators, asyncValidators, callSetDisabledState) {
          super();
          this.callSetDisabledState = callSetDisabledState;
          this.submitted = false;
          this._onCollectionChange = () => this._updateDomValue();
          this.directives = [];
          this.form = null;
          this.ngSubmit = new EventEmitter();
          this._setValidators(validators);
          this._setAsyncValidators(asyncValidators);
        }
        /** @nodoc */
        ngOnChanges(changes) {
          this._checkFormPresent();
          if (changes.hasOwnProperty("form")) {
            this._updateValidators();
            this._updateDomValue();
            this._updateRegistrations();
            this._oldForm = this.form;
          }
        }
        /** @nodoc */
        ngOnDestroy() {
          if (this.form) {
            cleanUpValidators(this.form, this);
            if (this.form._onCollectionChange === this._onCollectionChange) {
              this.form._registerOnCollectionChange(() => {
              });
            }
          }
        }
        /**
         * @description
         * Returns this directive's instance.
         */
        get formDirective() {
          return this;
        }
        /**
         * @description
         * Returns the `FormGroup` bound to this directive.
         */
        get control() {
          return this.form;
        }
        /**
         * @description
         * Returns an array representing the path to this group. Because this directive
         * always lives at the top level of a form, it always an empty array.
         */
        get path() {
          return [];
        }
        /**
         * @description
         * Method that sets up the control directive in this group, re-calculates its value
         * and validity, and adds the instance to the internal list of directives.
         *
         * @param dir The `FormControlName` directive instance.
         */
        addControl(dir) {
          const ctrl = this.form.get(dir.path);
          setUpControl(ctrl, dir, this.callSetDisabledState);
          ctrl.updateValueAndValidity({ emitEvent: false });
          this.directives.push(dir);
          return ctrl;
        }
        /**
         * @description
         * Retrieves the `FormControl` instance from the provided `FormControlName` directive
         *
         * @param dir The `FormControlName` directive instance.
         */
        getControl(dir) {
          return this.form.get(dir.path);
        }
        /**
         * @description
         * Removes the `FormControlName` instance from the internal list of directives
         *
         * @param dir The `FormControlName` directive instance.
         */
        removeControl(dir) {
          cleanUpControl(
            dir.control || null,
            dir,
            /* validateControlPresenceOnChange */
            false
          );
          removeListItem$1(this.directives, dir);
        }
        /**
         * Adds a new `FormGroupName` directive instance to the form.
         *
         * @param dir The `FormGroupName` directive instance.
         */
        addFormGroup(dir) {
          this._setUpFormContainer(dir);
        }
        /**
         * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the
         * view.
         *
         * @param dir The `FormGroupName` directive instance.
         */
        removeFormGroup(dir) {
          this._cleanUpFormContainer(dir);
        }
        /**
         * @description
         * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance
         *
         * @param dir The `FormGroupName` directive instance.
         */
        getFormGroup(dir) {
          return this.form.get(dir.path);
        }
        /**
         * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.
         *
         * @param dir The `FormArrayName` directive instance.
         */
        addFormArray(dir) {
          this._setUpFormContainer(dir);
        }
        /**
         * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the
         * view.
         *
         * @param dir The `FormArrayName` directive instance.
         */
        removeFormArray(dir) {
          this._cleanUpFormContainer(dir);
        }
        /**
         * @description
         * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.
         *
         * @param dir The `FormArrayName` directive instance.
         */
        getFormArray(dir) {
          return this.form.get(dir.path);
        }
        /**
         * Sets the new value for the provided `FormControlName` directive.
         *
         * @param dir The `FormControlName` directive instance.
         * @param value The new value for the directive's control.
         */
        updateModel(dir, value) {
          const ctrl = this.form.get(dir.path);
          ctrl.setValue(value);
        }
        /**
         * @description
         * Method called with the "submit" event is triggered on the form.
         * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
         *
         * @param $event The "submit" event object
         */
        onSubmit($event) {
          this.submitted = true;
          syncPendingControls(this.form, this.directives);
          this.ngSubmit.emit($event);
          return $event?.target?.method === "dialog";
        }
        /**
         * @description
         * Method called when the "reset" event is triggered on the form.
         */
        onReset() {
          this.resetForm();
        }
        /**
         * @description
         * Resets the form to an initial value and resets its submitted status.
         *
         * @param value The new value for the form.
         */
        resetForm(value = void 0) {
          this.form.reset(value);
          this.submitted = false;
        }
        /** @internal */
        _updateDomValue() {
          this.directives.forEach((dir) => {
            const oldCtrl = dir.control;
            const newCtrl = this.form.get(dir.path);
            if (oldCtrl !== newCtrl) {
              cleanUpControl(oldCtrl || null, dir);
              if (isFormControl(newCtrl)) {
                setUpControl(newCtrl, dir, this.callSetDisabledState);
                dir.control = newCtrl;
              }
            }
          });
          this.form._updateTreeValidity({ emitEvent: false });
        }
        _setUpFormContainer(dir) {
          const ctrl = this.form.get(dir.path);
          setUpFormContainer(ctrl, dir);
          ctrl.updateValueAndValidity({ emitEvent: false });
        }
        _cleanUpFormContainer(dir) {
          if (this.form) {
            const ctrl = this.form.get(dir.path);
            if (ctrl) {
              const isControlUpdated = cleanUpFormContainer(ctrl, dir);
              if (isControlUpdated) {
                ctrl.updateValueAndValidity({ emitEvent: false });
              }
            }
          }
        }
        _updateRegistrations() {
          this.form._registerOnCollectionChange(this._onCollectionChange);
          if (this._oldForm) {
            this._oldForm._registerOnCollectionChange(() => {
            });
          }
        }
        _updateValidators() {
          setUpValidators(this.form, this);
          if (this._oldForm) {
            cleanUpValidators(this._oldForm, this);
          }
        }
        _checkFormPresent() {
          if (!this.form && (typeof ngDevMode === "undefined" || ngDevMode)) {
            throw missingFormException();
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _FormGroupDirective, deps: [{ token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _FormGroupDirective, selector: "[formGroup]", inputs: { form: ["formGroup", "form"] }, outputs: { ngSubmit: "ngSubmit" }, host: { listeners: { "submit": "onSubmit($event)", "reset": "onReset()" } }, providers: [formDirectiveProvider], exportAs: ["ngForm"], usesInheritance: true, usesOnChanges: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: FormGroupDirective, decorators: [{
        type: Directive,
        args: [{
          selector: "[formGroup]",
          providers: [formDirectiveProvider],
          host: { "(submit)": "onSubmit($event)", "(reset)": "onReset()" },
          exportAs: "ngForm"
        }]
      }], ctorParameters: () => [{ type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_VALIDATORS]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_ASYNC_VALIDATORS]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [CALL_SET_DISABLED_STATE]
      }] }], propDecorators: { form: [{
        type: Input,
        args: ["formGroup"]
      }], ngSubmit: [{
        type: Output
      }] } });
      formGroupNameProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(() => FormGroupName)
      };
      FormGroupName = class _FormGroupName extends AbstractFormGroupDirective {
        constructor(parent, validators, asyncValidators) {
          super();
          this.name = null;
          this._parent = parent;
          this._setValidators(validators);
          this._setAsyncValidators(asyncValidators);
        }
        /** @internal */
        _checkParentType() {
          if (_hasInvalidParent(this._parent) && (typeof ngDevMode === "undefined" || ngDevMode)) {
            throw groupParentException();
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _FormGroupName, deps: [{ token: ControlContainer, host: true, optional: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _FormGroupName, selector: "[formGroupName]", inputs: { name: ["formGroupName", "name"] }, providers: [formGroupNameProvider], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: FormGroupName, decorators: [{
        type: Directive,
        args: [{ selector: "[formGroupName]", providers: [formGroupNameProvider] }]
      }], ctorParameters: () => [{ type: ControlContainer, decorators: [{
        type: Optional
      }, {
        type: Host
      }, {
        type: SkipSelf
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_VALIDATORS]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_ASYNC_VALIDATORS]
      }] }], propDecorators: { name: [{
        type: Input,
        args: ["formGroupName"]
      }] } });
      formArrayNameProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(() => FormArrayName)
      };
      FormArrayName = class _FormArrayName extends ControlContainer {
        constructor(parent, validators, asyncValidators) {
          super();
          this.name = null;
          this._parent = parent;
          this._setValidators(validators);
          this._setAsyncValidators(asyncValidators);
        }
        /**
         * A lifecycle method called when the directive's inputs are initialized. For internal use only.
         * @throws If the directive does not have a valid parent.
         * @nodoc
         */
        ngOnInit() {
          this._checkParentType();
          this.formDirective.addFormArray(this);
        }
        /**
         * A lifecycle method called before the directive's instance is destroyed. For internal use only.
         * @nodoc
         */
        ngOnDestroy() {
          if (this.formDirective) {
            this.formDirective.removeFormArray(this);
          }
        }
        /**
         * @description
         * The `FormArray` bound to this directive.
         */
        get control() {
          return this.formDirective.getFormArray(this);
        }
        /**
         * @description
         * The top-level directive for this group if present, otherwise null.
         */
        get formDirective() {
          return this._parent ? this._parent.formDirective : null;
        }
        /**
         * @description
         * Returns an array that represents the path from the top-level form to this control.
         * Each index is the string name of the control on that level.
         */
        get path() {
          return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
        }
        _checkParentType() {
          if (_hasInvalidParent(this._parent) && (typeof ngDevMode === "undefined" || ngDevMode)) {
            throw arrayParentException();
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _FormArrayName, deps: [{ token: ControlContainer, host: true, optional: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _FormArrayName, selector: "[formArrayName]", inputs: { name: ["formArrayName", "name"] }, providers: [formArrayNameProvider], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: FormArrayName, decorators: [{
        type: Directive,
        args: [{ selector: "[formArrayName]", providers: [formArrayNameProvider] }]
      }], ctorParameters: () => [{ type: ControlContainer, decorators: [{
        type: Optional
      }, {
        type: Host
      }, {
        type: SkipSelf
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_VALIDATORS]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_ASYNC_VALIDATORS]
      }] }], propDecorators: { name: [{
        type: Input,
        args: ["formArrayName"]
      }] } });
      controlNameBinding = {
        provide: NgControl,
        useExisting: forwardRef(() => FormControlName)
      };
      FormControlName = class _FormControlName extends NgControl {
        /**
         * @description
         * Triggers a warning in dev mode that this input should not be used with reactive forms.
         */
        set isDisabled(isDisabled) {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            console.warn(disabledAttrWarning);
          }
        }
        static {
          this._ngModelWarningSentOnce = false;
        }
        constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
          super();
          this._ngModelWarningConfig = _ngModelWarningConfig;
          this._added = false;
          this.name = null;
          this.update = new EventEmitter();
          this._ngModelWarningSent = false;
          this._parent = parent;
          this._setValidators(validators);
          this._setAsyncValidators(asyncValidators);
          this.valueAccessor = selectValueAccessor(this, valueAccessors);
        }
        /** @nodoc */
        ngOnChanges(changes) {
          if (!this._added)
            this._setUpControl();
          if (isPropertyUpdated(changes, this.viewModel)) {
            if (typeof ngDevMode === "undefined" || ngDevMode) {
              _ngModelWarning("formControlName", _FormControlName, this, this._ngModelWarningConfig);
            }
            this.viewModel = this.model;
            this.formDirective.updateModel(this, this.model);
          }
        }
        /** @nodoc */
        ngOnDestroy() {
          if (this.formDirective) {
            this.formDirective.removeControl(this);
          }
        }
        /**
         * @description
         * Sets the new value for the view model and emits an `ngModelChange` event.
         *
         * @param newValue The new value for the view model.
         */
        viewToModelUpdate(newValue) {
          this.viewModel = newValue;
          this.update.emit(newValue);
        }
        /**
         * @description
         * Returns an array that represents the path from the top-level form to this control.
         * Each index is the string name of the control on that level.
         */
        get path() {
          return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
        }
        /**
         * @description
         * The top-level directive for this group if present, otherwise null.
         */
        get formDirective() {
          return this._parent ? this._parent.formDirective : null;
        }
        _checkParentType() {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
              throw ngModelGroupException();
            } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
              throw controlParentException();
            }
          }
        }
        _setUpControl() {
          this._checkParentType();
          this.control = this.formDirective.addControl(this);
          this._added = true;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _FormControlName, deps: [{ token: ControlContainer, host: true, optional: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }, { token: NG_MODEL_WITH_FORM_CONTROL_WARNING, optional: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _FormControlName, selector: "[formControlName]", inputs: { name: ["formControlName", "name"], isDisabled: ["disabled", "isDisabled"], model: ["ngModel", "model"] }, outputs: { update: "ngModelChange" }, providers: [controlNameBinding], usesInheritance: true, usesOnChanges: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: FormControlName, decorators: [{
        type: Directive,
        args: [{ selector: "[formControlName]", providers: [controlNameBinding] }]
      }], ctorParameters: () => [{ type: ControlContainer, decorators: [{
        type: Optional
      }, {
        type: Host
      }, {
        type: SkipSelf
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_VALIDATORS]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_ASYNC_VALIDATORS]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NG_VALUE_ACCESSOR]
      }] }, { type: void 0, decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
      }] }], propDecorators: { name: [{
        type: Input,
        args: ["formControlName"]
      }], isDisabled: [{
        type: Input,
        args: ["disabled"]
      }], model: [{
        type: Input,
        args: ["ngModel"]
      }], update: [{
        type: Output,
        args: ["ngModelChange"]
      }] } });
      SELECT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => SelectControlValueAccessor),
        multi: true
      };
      SelectControlValueAccessor = class _SelectControlValueAccessor extends BuiltInControlValueAccessor {
        constructor() {
          super(...arguments);
          this._optionMap = /* @__PURE__ */ new Map();
          this._idCounter = 0;
          this._compareWith = Object.is;
        }
        /**
         * @description
         * Tracks the option comparison algorithm for tracking identities when
         * checking for changes.
         */
        set compareWith(fn2) {
          if (typeof fn2 !== "function" && (typeof ngDevMode === "undefined" || ngDevMode)) {
            throw new RuntimeError(1201, `compareWith must be a function, but received ${JSON.stringify(fn2)}`);
          }
          this._compareWith = fn2;
        }
        /**
         * Sets the "value" property on the select element.
         * @nodoc
         */
        writeValue(value) {
          this.value = value;
          const id = this._getOptionId(value);
          const valueString = _buildValueString$1(id, value);
          this.setProperty("value", valueString);
        }
        /**
         * Registers a function called when the control value changes.
         * @nodoc
         */
        registerOnChange(fn2) {
          this.onChange = (valueString) => {
            this.value = this._getOptionValue(valueString);
            fn2(this.value);
          };
        }
        /** @internal */
        _registerOption() {
          return (this._idCounter++).toString();
        }
        /** @internal */
        _getOptionId(value) {
          for (const id of this._optionMap.keys()) {
            if (this._compareWith(this._optionMap.get(id), value))
              return id;
          }
          return null;
        }
        /** @internal */
        _getOptionValue(valueString) {
          const id = _extractId$1(valueString);
          return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _SelectControlValueAccessor, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: { compareWith: "compareWith" }, host: { listeners: { "change": "onChange($event.target.value)", "blur": "onTouched()" } }, providers: [SELECT_VALUE_ACCESSOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: SelectControlValueAccessor, decorators: [{
        type: Directive,
        args: [{
          selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]",
          host: { "(change)": "onChange($event.target.value)", "(blur)": "onTouched()" },
          providers: [SELECT_VALUE_ACCESSOR]
        }]
      }], propDecorators: { compareWith: [{
        type: Input
      }] } });
      NgSelectOption = class _NgSelectOption {
        constructor(_element, _renderer, _select) {
          this._element = _element;
          this._renderer = _renderer;
          this._select = _select;
          if (this._select)
            this.id = this._select._registerOption();
        }
        /**
         * @description
         * Tracks the value bound to the option element. Unlike the value binding,
         * ngValue supports binding to objects.
         */
        set ngValue(value) {
          if (this._select == null)
            return;
          this._select._optionMap.set(this.id, value);
          this._setElementValue(_buildValueString$1(this.id, value));
          this._select.writeValue(this._select.value);
        }
        /**
         * @description
         * Tracks simple string values bound to the option element.
         * For objects, use the `ngValue` input binding.
         */
        set value(value) {
          this._setElementValue(value);
          if (this._select)
            this._select.writeValue(this._select.value);
        }
        /** @internal */
        _setElementValue(value) {
          this._renderer.setProperty(this._element.nativeElement, "value", value);
        }
        /** @nodoc */
        ngOnDestroy() {
          if (this._select) {
            this._select._optionMap.delete(this.id);
            this._select.writeValue(this._select.value);
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NgSelectOption, deps: [{ token: ElementRef }, { token: Renderer2 }, { token: SelectControlValueAccessor, host: true, optional: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _NgSelectOption, selector: "option", inputs: { ngValue: "ngValue", value: "value" }, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NgSelectOption, decorators: [{
        type: Directive,
        args: [{ selector: "option" }]
      }], ctorParameters: () => [{ type: ElementRef }, { type: Renderer2 }, { type: SelectControlValueAccessor, decorators: [{
        type: Optional
      }, {
        type: Host
      }] }], propDecorators: { ngValue: [{
        type: Input,
        args: ["ngValue"]
      }], value: [{
        type: Input,
        args: ["value"]
      }] } });
      SELECT_MULTIPLE_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => SelectMultipleControlValueAccessor),
        multi: true
      };
      SelectMultipleControlValueAccessor = class _SelectMultipleControlValueAccessor extends BuiltInControlValueAccessor {
        constructor() {
          super(...arguments);
          this._optionMap = /* @__PURE__ */ new Map();
          this._idCounter = 0;
          this._compareWith = Object.is;
        }
        /**
         * @description
         * Tracks the option comparison algorithm for tracking identities when
         * checking for changes.
         */
        set compareWith(fn2) {
          if (typeof fn2 !== "function" && (typeof ngDevMode === "undefined" || ngDevMode)) {
            throw new RuntimeError(1201, `compareWith must be a function, but received ${JSON.stringify(fn2)}`);
          }
          this._compareWith = fn2;
        }
        /**
         * Sets the "value" property on one or of more of the select's options.
         * @nodoc
         */
        writeValue(value) {
          this.value = value;
          let optionSelectedStateSetter;
          if (Array.isArray(value)) {
            const ids = value.map((v) => this._getOptionId(v));
            optionSelectedStateSetter = (opt, o) => {
              opt._setSelected(ids.indexOf(o.toString()) > -1);
            };
          } else {
            optionSelectedStateSetter = (opt, o) => {
              opt._setSelected(false);
            };
          }
          this._optionMap.forEach(optionSelectedStateSetter);
        }
        /**
         * Registers a function called when the control value changes
         * and writes an array of the selected options.
         * @nodoc
         */
        registerOnChange(fn2) {
          this.onChange = (element2) => {
            const selected = [];
            const selectedOptions = element2.selectedOptions;
            if (selectedOptions !== void 0) {
              const options = selectedOptions;
              for (let i = 0; i < options.length; i++) {
                const opt = options[i];
                const val = this._getOptionValue(opt.value);
                selected.push(val);
              }
            } else {
              const options = element2.options;
              for (let i = 0; i < options.length; i++) {
                const opt = options[i];
                if (opt.selected) {
                  const val = this._getOptionValue(opt.value);
                  selected.push(val);
                }
              }
            }
            this.value = selected;
            fn2(selected);
          };
        }
        /** @internal */
        _registerOption(value) {
          const id = (this._idCounter++).toString();
          this._optionMap.set(id, value);
          return id;
        }
        /** @internal */
        _getOptionId(value) {
          for (const id of this._optionMap.keys()) {
            if (this._compareWith(this._optionMap.get(id)._value, value))
              return id;
          }
          return null;
        }
        /** @internal */
        _getOptionValue(valueString) {
          const id = _extractId(valueString);
          return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _SelectMultipleControlValueAccessor, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _SelectMultipleControlValueAccessor, selector: "select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]", inputs: { compareWith: "compareWith" }, host: { listeners: { "change": "onChange($event.target)", "blur": "onTouched()" } }, providers: [SELECT_MULTIPLE_VALUE_ACCESSOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: SelectMultipleControlValueAccessor, decorators: [{
        type: Directive,
        args: [{
          selector: "select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]",
          host: { "(change)": "onChange($event.target)", "(blur)": "onTouched()" },
          providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
        }]
      }], propDecorators: { compareWith: [{
        type: Input
      }] } });
      \u0275NgSelectMultipleOption = class _\u0275NgSelectMultipleOption {
        constructor(_element, _renderer, _select) {
          this._element = _element;
          this._renderer = _renderer;
          this._select = _select;
          if (this._select) {
            this.id = this._select._registerOption(this);
          }
        }
        /**
         * @description
         * Tracks the value bound to the option element. Unlike the value binding,
         * ngValue supports binding to objects.
         */
        set ngValue(value) {
          if (this._select == null)
            return;
          this._value = value;
          this._setElementValue(_buildValueString(this.id, value));
          this._select.writeValue(this._select.value);
        }
        /**
         * @description
         * Tracks simple string values bound to the option element.
         * For objects, use the `ngValue` input binding.
         */
        set value(value) {
          if (this._select) {
            this._value = value;
            this._setElementValue(_buildValueString(this.id, value));
            this._select.writeValue(this._select.value);
          } else {
            this._setElementValue(value);
          }
        }
        /** @internal */
        _setElementValue(value) {
          this._renderer.setProperty(this._element.nativeElement, "value", value);
        }
        /** @internal */
        _setSelected(selected) {
          this._renderer.setProperty(this._element.nativeElement, "selected", selected);
        }
        /** @nodoc */
        ngOnDestroy() {
          if (this._select) {
            this._select._optionMap.delete(this.id);
            this._select.writeValue(this._select.value);
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _\u0275NgSelectMultipleOption, deps: [{ token: ElementRef }, { token: Renderer2 }, { token: SelectMultipleControlValueAccessor, host: true, optional: true }], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _\u0275NgSelectMultipleOption, selector: "option", inputs: { ngValue: "ngValue", value: "value" }, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: \u0275NgSelectMultipleOption, decorators: [{
        type: Directive,
        args: [{ selector: "option" }]
      }], ctorParameters: () => [{ type: ElementRef }, { type: Renderer2 }, { type: SelectMultipleControlValueAccessor, decorators: [{
        type: Optional
      }, {
        type: Host
      }] }], propDecorators: { ngValue: [{
        type: Input,
        args: ["ngValue"]
      }], value: [{
        type: Input,
        args: ["value"]
      }] } });
      AbstractValidatorDirective = class _AbstractValidatorDirective {
        constructor() {
          this._validator = nullValidator;
        }
        /** @nodoc */
        ngOnChanges(changes) {
          if (this.inputName in changes) {
            const input2 = this.normalizeInput(changes[this.inputName].currentValue);
            this._enabled = this.enabled(input2);
            this._validator = this._enabled ? this.createValidator(input2) : nullValidator;
            if (this._onChange) {
              this._onChange();
            }
          }
        }
        /** @nodoc */
        validate(control) {
          return this._validator(control);
        }
        /** @nodoc */
        registerOnValidatorChange(fn2) {
          this._onChange = fn2;
        }
        /**
         * @description
         * Determines whether this validator should be active or not based on an input.
         * Base class implementation checks whether an input is defined (if the value is different from
         * `null` and `undefined`). Validator classes that extend this base class can override this
         * function with the logic specific to a particular validator directive.
         */
        enabled(input2) {
          return input2 != null;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _AbstractValidatorDirective, deps: [], target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _AbstractValidatorDirective, usesOnChanges: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: AbstractValidatorDirective, decorators: [{
        type: Directive
      }] });
      MAX_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(() => MaxValidator),
        multi: true
      };
      MaxValidator = class _MaxValidator extends AbstractValidatorDirective {
        constructor() {
          super(...arguments);
          this.inputName = "max";
          this.normalizeInput = (input2) => toFloat(input2);
          this.createValidator = (max) => maxValidator(max);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _MaxValidator, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: { max: "max" }, host: { properties: { "attr.max": "_enabled ? max : null" } }, providers: [MAX_VALIDATOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: MaxValidator, decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",
          providers: [MAX_VALIDATOR],
          host: { "[attr.max]": "_enabled ? max : null" }
        }]
      }], propDecorators: { max: [{
        type: Input
      }] } });
      MIN_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(() => MinValidator),
        multi: true
      };
      MinValidator = class _MinValidator extends AbstractValidatorDirective {
        constructor() {
          super(...arguments);
          this.inputName = "min";
          this.normalizeInput = (input2) => toFloat(input2);
          this.createValidator = (min) => minValidator(min);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _MinValidator, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: { min: "min" }, host: { properties: { "attr.min": "_enabled ? min : null" } }, providers: [MIN_VALIDATOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: MinValidator, decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",
          providers: [MIN_VALIDATOR],
          host: { "[attr.min]": "_enabled ? min : null" }
        }]
      }], propDecorators: { min: [{
        type: Input
      }] } });
      REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(() => RequiredValidator),
        multi: true
      };
      CHECKBOX_REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(() => CheckboxRequiredValidator),
        multi: true
      };
      RequiredValidator = class _RequiredValidator extends AbstractValidatorDirective {
        constructor() {
          super(...arguments);
          this.inputName = "required";
          this.normalizeInput = booleanAttribute;
          this.createValidator = (input2) => requiredValidator;
        }
        /** @nodoc */
        enabled(input2) {
          return input2;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _RequiredValidator, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: { required: "required" }, host: { properties: { "attr.required": '_enabled ? "" : null' } }, providers: [REQUIRED_VALIDATOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: RequiredValidator, decorators: [{
        type: Directive,
        args: [{
          selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",
          providers: [REQUIRED_VALIDATOR],
          host: { "[attr.required]": '_enabled ? "" : null' }
        }]
      }], propDecorators: { required: [{
        type: Input
      }] } });
      CheckboxRequiredValidator = class _CheckboxRequiredValidator extends RequiredValidator {
        constructor() {
          super(...arguments);
          this.createValidator = (input2) => requiredTrueValidator;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _CheckboxRequiredValidator, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _CheckboxRequiredValidator, selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]", host: { properties: { "attr.required": '_enabled ? "" : null' } }, providers: [CHECKBOX_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: CheckboxRequiredValidator, decorators: [{
        type: Directive,
        args: [{
          selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]",
          providers: [CHECKBOX_REQUIRED_VALIDATOR],
          host: { "[attr.required]": '_enabled ? "" : null' }
        }]
      }] });
      EMAIL_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(() => EmailValidator),
        multi: true
      };
      EmailValidator = class _EmailValidator extends AbstractValidatorDirective {
        constructor() {
          super(...arguments);
          this.inputName = "email";
          this.normalizeInput = booleanAttribute;
          this.createValidator = (input2) => emailValidator;
        }
        /** @nodoc */
        enabled(input2) {
          return input2;
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _EmailValidator, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _EmailValidator, selector: "[email][formControlName],[email][formControl],[email][ngModel]", inputs: { email: "email" }, providers: [EMAIL_VALIDATOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: EmailValidator, decorators: [{
        type: Directive,
        args: [{
          selector: "[email][formControlName],[email][formControl],[email][ngModel]",
          providers: [EMAIL_VALIDATOR]
        }]
      }], propDecorators: { email: [{
        type: Input
      }] } });
      MIN_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(() => MinLengthValidator),
        multi: true
      };
      MinLengthValidator = class _MinLengthValidator extends AbstractValidatorDirective {
        constructor() {
          super(...arguments);
          this.inputName = "minlength";
          this.normalizeInput = (input2) => toInteger(input2);
          this.createValidator = (minlength) => minLengthValidator(minlength);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _MinLengthValidator, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: { minlength: "minlength" }, host: { properties: { "attr.minlength": "_enabled ? minlength : null" } }, providers: [MIN_LENGTH_VALIDATOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: MinLengthValidator, decorators: [{
        type: Directive,
        args: [{
          selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]",
          providers: [MIN_LENGTH_VALIDATOR],
          host: { "[attr.minlength]": "_enabled ? minlength : null" }
        }]
      }], propDecorators: { minlength: [{
        type: Input
      }] } });
      MAX_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(() => MaxLengthValidator),
        multi: true
      };
      MaxLengthValidator = class _MaxLengthValidator extends AbstractValidatorDirective {
        constructor() {
          super(...arguments);
          this.inputName = "maxlength";
          this.normalizeInput = (input2) => toInteger(input2);
          this.createValidator = (maxlength) => maxLengthValidator(maxlength);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _MaxLengthValidator, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: { maxlength: "maxlength" }, host: { properties: { "attr.maxlength": "_enabled ? maxlength : null" } }, providers: [MAX_LENGTH_VALIDATOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: MaxLengthValidator, decorators: [{
        type: Directive,
        args: [{
          selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]",
          providers: [MAX_LENGTH_VALIDATOR],
          host: { "[attr.maxlength]": "_enabled ? maxlength : null" }
        }]
      }], propDecorators: { maxlength: [{
        type: Input
      }] } });
      PATTERN_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(() => PatternValidator),
        multi: true
      };
      PatternValidator = class _PatternValidator extends AbstractValidatorDirective {
        constructor() {
          super(...arguments);
          this.inputName = "pattern";
          this.normalizeInput = (input2) => input2;
          this.createValidator = (input2) => patternValidator(input2);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _PatternValidator, deps: null, target: FactoryTarget.Directive });
        }
        static {
          this.\u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: _PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: { pattern: "pattern" }, host: { properties: { "attr.pattern": "_enabled ? pattern : null" } }, providers: [PATTERN_VALIDATOR], usesInheritance: true, ngImport: core_exports });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: PatternValidator, decorators: [{
        type: Directive,
        args: [{
          selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]",
          providers: [PATTERN_VALIDATOR],
          host: { "[attr.pattern]": "_enabled ? pattern : null" }
        }]
      }], propDecorators: { pattern: [{
        type: Input
      }] } });
      SHARED_FORM_DIRECTIVES = [
        \u0275NgNoValidate,
        NgSelectOption,
        \u0275NgSelectMultipleOption,
        DefaultValueAccessor,
        NumberValueAccessor,
        RangeValueAccessor,
        CheckboxControlValueAccessor,
        SelectControlValueAccessor,
        SelectMultipleControlValueAccessor,
        RadioControlValueAccessor,
        NgControlStatus,
        NgControlStatusGroup,
        RequiredValidator,
        MinLengthValidator,
        MaxLengthValidator,
        PatternValidator,
        CheckboxRequiredValidator,
        EmailValidator,
        MinValidator,
        MaxValidator
      ];
      TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
      REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
      \u0275InternalFormsSharedModule = class _\u0275InternalFormsSharedModule {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _\u0275InternalFormsSharedModule, deps: [], target: FactoryTarget.NgModule });
        }
        static {
          this.\u0275mod = \u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _\u0275InternalFormsSharedModule, declarations: [
            \u0275NgNoValidate,
            NgSelectOption,
            \u0275NgSelectMultipleOption,
            DefaultValueAccessor,
            NumberValueAccessor,
            RangeValueAccessor,
            CheckboxControlValueAccessor,
            SelectControlValueAccessor,
            SelectMultipleControlValueAccessor,
            RadioControlValueAccessor,
            NgControlStatus,
            NgControlStatusGroup,
            RequiredValidator,
            MinLengthValidator,
            MaxLengthValidator,
            PatternValidator,
            CheckboxRequiredValidator,
            EmailValidator,
            MinValidator,
            MaxValidator
          ], exports: [
            \u0275NgNoValidate,
            NgSelectOption,
            \u0275NgSelectMultipleOption,
            DefaultValueAccessor,
            NumberValueAccessor,
            RangeValueAccessor,
            CheckboxControlValueAccessor,
            SelectControlValueAccessor,
            SelectMultipleControlValueAccessor,
            RadioControlValueAccessor,
            NgControlStatus,
            NgControlStatusGroup,
            RequiredValidator,
            MinLengthValidator,
            MaxLengthValidator,
            PatternValidator,
            CheckboxRequiredValidator,
            EmailValidator,
            MinValidator,
            MaxValidator
          ] });
        }
        static {
          this.\u0275inj = \u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _\u0275InternalFormsSharedModule });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: \u0275InternalFormsSharedModule, decorators: [{
        type: NgModule,
        args: [{
          declarations: SHARED_FORM_DIRECTIVES,
          exports: SHARED_FORM_DIRECTIVES
        }]
      }] });
      FormArray = class extends AbstractControl {
        /**
         * Creates a new `FormArray` instance.
         *
         * @param controls An array of child controls. Each child control is given an index
         * where it is registered.
         *
         * @param validatorOrOpts A synchronous validator function, or an array of
         * such functions, or an `AbstractControlOptions` object that contains validation functions
         * and a validation trigger.
         *
         * @param asyncValidator A single async validator or array of async validator functions
         *
         */
        constructor(controls, validatorOrOpts, asyncValidator) {
          super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
          this.controls = controls;
          this._initObservables();
          this._setUpdateStrategy(validatorOrOpts);
          this._setUpControls();
          this.updateValueAndValidity({
            onlySelf: true,
            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
            // `VALID` or `INVALID`.
            // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`
            // to `true` to allow that during the control creation process.
            emitEvent: !!this.asyncValidator
          });
        }
        /**
         * Get the `AbstractControl` at the given `index` in the array.
         *
         * @param index Index in the array to retrieve the control. If `index` is negative, it will wrap
         *     around from the back, and if index is greatly negative (less than `-length`), the result is
         * undefined. This behavior is the same as `Array.at(index)`.
         */
        at(index) {
          return this.controls[this._adjustIndex(index)];
        }
        /**
         * Insert a new `AbstractControl` at the end of the array.
         *
         * @param control Form control to be inserted
         * @param options Specifies whether this FormArray instance should emit events after a new
         *     control is added.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges` observables emit events with the latest status and value when the control is
         * inserted. When false, no events are emitted.
         */
        push(control, options = {}) {
          this.controls.push(control);
          this._registerControl(control);
          this.updateValueAndValidity({ emitEvent: options.emitEvent });
          this._onCollectionChange();
        }
        /**
         * Insert a new `AbstractControl` at the given `index` in the array.
         *
         * @param index Index in the array to insert the control. If `index` is negative, wraps around
         *     from the back. If `index` is greatly negative (less than `-length`), prepends to the array.
         * This behavior is the same as `Array.splice(index, 0, control)`.
         * @param control Form control to be inserted
         * @param options Specifies whether this FormArray instance should emit events after a new
         *     control is inserted.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges` observables emit events with the latest status and value when the control is
         * inserted. When false, no events are emitted.
         */
        insert(index, control, options = {}) {
          this.controls.splice(index, 0, control);
          this._registerControl(control);
          this.updateValueAndValidity({ emitEvent: options.emitEvent });
        }
        /**
         * Remove the control at the given `index` in the array.
         *
         * @param index Index in the array to remove the control.  If `index` is negative, wraps around
         *     from the back. If `index` is greatly negative (less than `-length`), removes the first
         *     element. This behavior is the same as `Array.splice(index, 1)`.
         * @param options Specifies whether this FormArray instance should emit events after a
         *     control is removed.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges` observables emit events with the latest status and value when the control is
         * removed. When false, no events are emitted.
         */
        removeAt(index, options = {}) {
          let adjustedIndex = this._adjustIndex(index);
          if (adjustedIndex < 0)
            adjustedIndex = 0;
          if (this.controls[adjustedIndex])
            this.controls[adjustedIndex]._registerOnCollectionChange(() => {
            });
          this.controls.splice(adjustedIndex, 1);
          this.updateValueAndValidity({ emitEvent: options.emitEvent });
        }
        /**
         * Replace an existing control.
         *
         * @param index Index in the array to replace the control. If `index` is negative, wraps around
         *     from the back. If `index` is greatly negative (less than `-length`), replaces the first
         *     element. This behavior is the same as `Array.splice(index, 1, control)`.
         * @param control The `AbstractControl` control to replace the existing control
         * @param options Specifies whether this FormArray instance should emit events after an
         *     existing control is replaced with a new one.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges` observables emit events with the latest status and value when the control is
         * replaced with a new one. When false, no events are emitted.
         */
        setControl(index, control, options = {}) {
          let adjustedIndex = this._adjustIndex(index);
          if (adjustedIndex < 0)
            adjustedIndex = 0;
          if (this.controls[adjustedIndex])
            this.controls[adjustedIndex]._registerOnCollectionChange(() => {
            });
          this.controls.splice(adjustedIndex, 1);
          if (control) {
            this.controls.splice(adjustedIndex, 0, control);
            this._registerControl(control);
          }
          this.updateValueAndValidity({ emitEvent: options.emitEvent });
          this._onCollectionChange();
        }
        /**
         * Length of the control array.
         */
        get length() {
          return this.controls.length;
        }
        /**
         * Sets the value of the `FormArray`. It accepts an array that matches
         * the structure of the control.
         *
         * This method performs strict checks, and throws an error if you try
         * to set the value of a control that doesn't exist or if you exclude the
         * value of a control.
         *
         * @usageNotes
         * ### Set the values for the controls in the form array
         *
         * ```
         * const arr = new FormArray([
         *   new FormControl(),
         *   new FormControl()
         * ]);
         * console.log(arr.value);   // [null, null]
         *
         * arr.setValue(['Nancy', 'Drew']);
         * console.log(arr.value);   // ['Nancy', 'Drew']
         * ```
         *
         * @param value Array of values for the controls
         * @param options Configure options that determine how the control propagates changes and
         * emits events after the value changes
         *
         * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
         * is false.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges`
         * observables emit events with the latest status and value when the control value is updated.
         * When false, no events are emitted.
         * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
         * updateValueAndValidity} method.
         */
        setValue(value, options = {}) {
          assertAllValuesPresent(this, false, value);
          value.forEach((newValue, index) => {
            assertControlPresent(this, false, index);
            this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });
          });
          this.updateValueAndValidity(options);
        }
        /**
         * Patches the value of the `FormArray`. It accepts an array that matches the
         * structure of the control, and does its best to match the values to the correct
         * controls in the group.
         *
         * It accepts both super-sets and sub-sets of the array without throwing an error.
         *
         * @usageNotes
         * ### Patch the values for controls in a form array
         *
         * ```
         * const arr = new FormArray([
         *    new FormControl(),
         *    new FormControl()
         * ]);
         * console.log(arr.value);   // [null, null]
         *
         * arr.patchValue(['Nancy']);
         * console.log(arr.value);   // ['Nancy', null]
         * ```
         *
         * @param value Array of latest values for the controls
         * @param options Configure options that determine how the control propagates changes and
         * emits events after the value changes
         *
         * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
         * is false.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges` observables emit events with the latest status and value when the control
         * value is updated. When false, no events are emitted. The configuration options are passed to
         * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
         */
        patchValue(value, options = {}) {
          if (value == null)
            return;
          value.forEach((newValue, index) => {
            if (this.at(index)) {
              this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });
            }
          });
          this.updateValueAndValidity(options);
        }
        /**
         * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the
         * value of all descendants to null or null maps.
         *
         * You reset to a specific form state by passing in an array of states
         * that matches the structure of the control. The state is a standalone value
         * or a form state object with both a value and a disabled status.
         *
         * @usageNotes
         * ### Reset the values in a form array
         *
         * ```ts
         * const arr = new FormArray([
         *    new FormControl(),
         *    new FormControl()
         * ]);
         * arr.reset(['name', 'last name']);
         *
         * console.log(arr.value);  // ['name', 'last name']
         * ```
         *
         * ### Reset the values in a form array and the disabled status for the first control
         *
         * ```
         * arr.reset([
         *   {value: 'name', disabled: true},
         *   'last'
         * ]);
         *
         * console.log(arr.value);  // ['last']
         * console.log(arr.at(0).status);  // 'DISABLED'
         * ```
         *
         * @param value Array of values for the controls
         * @param options Configure options that determine how the control propagates changes and
         * emits events after the value changes
         *
         * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
         * is false.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges`
         * observables emit events with the latest status and value when the control is reset.
         * When false, no events are emitted.
         * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
         * updateValueAndValidity} method.
         */
        reset(value = [], options = {}) {
          this._forEachChild((control, index) => {
            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });
          });
          this._updatePristine(options);
          this._updateTouched(options);
          this.updateValueAndValidity(options);
        }
        /**
         * The aggregate value of the array, including any disabled controls.
         *
         * Reports all values regardless of disabled status.
         */
        getRawValue() {
          return this.controls.map((control) => control.getRawValue());
        }
        /**
         * Remove all controls in the `FormArray`.
         *
         * @param options Specifies whether this FormArray instance should emit events after all
         *     controls are removed.
         * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
         * `valueChanges` observables emit events with the latest status and value when all controls
         * in this FormArray instance are removed. When false, no events are emitted.
         *
         * @usageNotes
         * ### Remove all elements from a FormArray
         *
         * ```ts
         * const arr = new FormArray([
         *    new FormControl(),
         *    new FormControl()
         * ]);
         * console.log(arr.length);  // 2
         *
         * arr.clear();
         * console.log(arr.length);  // 0
         * ```
         *
         * It's a simpler and more efficient alternative to removing all elements one by one:
         *
         * ```ts
         * const arr = new FormArray([
         *    new FormControl(),
         *    new FormControl()
         * ]);
         *
         * while (arr.length) {
         *    arr.removeAt(0);
         * }
         * ```
         */
        clear(options = {}) {
          if (this.controls.length < 1)
            return;
          this._forEachChild((control) => control._registerOnCollectionChange(() => {
          }));
          this.controls.splice(0);
          this.updateValueAndValidity({ emitEvent: options.emitEvent });
        }
        /**
         * Adjusts a negative index by summing it with the length of the array. For very negative
         * indices, the result may remain negative.
         * @internal
         */
        _adjustIndex(index) {
          return index < 0 ? index + this.length : index;
        }
        /** @internal */
        _syncPendingControls() {
          let subtreeUpdated = this.controls.reduce((updated, child) => {
            return child._syncPendingControls() ? true : updated;
          }, false);
          if (subtreeUpdated)
            this.updateValueAndValidity({ onlySelf: true });
          return subtreeUpdated;
        }
        /** @internal */
        _forEachChild(cb) {
          this.controls.forEach((control, index) => {
            cb(control, index);
          });
        }
        /** @internal */
        _updateValue() {
          this.value = this.controls.filter((control) => control.enabled || this.disabled).map((control) => control.value);
        }
        /** @internal */
        _anyControls(condition) {
          return this.controls.some((control) => control.enabled && condition(control));
        }
        /** @internal */
        _setUpControls() {
          this._forEachChild((control) => this._registerControl(control));
        }
        /** @internal */
        _allControlsDisabled() {
          for (const control of this.controls) {
            if (control.enabled)
              return false;
          }
          return this.controls.length > 0 || this.disabled;
        }
        _registerControl(control) {
          control.setParent(this);
          control._registerOnCollectionChange(this._onCollectionChange);
        }
        /** @internal */
        _find(name) {
          return this.at(name) ?? null;
        }
      };
      FormBuilder = class _FormBuilder {
        constructor() {
          this.useNonNullable = false;
        }
        /**
         * @description
         * Returns a FormBuilder in which automatically constructed `FormControl` elements
         * have `{nonNullable: true}` and are non-nullable.
         *
         * **Constructing non-nullable controls**
         *
         * When constructing a control, it will be non-nullable, and will reset to its initial value.
         *
         * ```ts
         * let nnfb = new FormBuilder().nonNullable;
         * let name = nnfb.control('Alex'); // FormControl<string>
         * name.reset();
         * console.log(name); // 'Alex'
         * ```
         *
         * **Constructing non-nullable groups or arrays**
         *
         * When constructing a group or array, all automatically created inner controls will be
         * non-nullable, and will reset to their initial values.
         *
         * ```ts
         * let nnfb = new FormBuilder().nonNullable;
         * let name = nnfb.group({who: 'Alex'}); // FormGroup<{who: FormControl<string>}>
         * name.reset();
         * console.log(name); // {who: 'Alex'}
         * ```
         * **Constructing *nullable* fields on groups or arrays**
         *
         * It is still possible to have a nullable field. In particular, any `FormControl` which is
         * *already* constructed will not be altered. For example:
         *
         * ```ts
         * let nnfb = new FormBuilder().nonNullable;
         * // FormGroup<{who: FormControl<string|null>}>
         * let name = nnfb.group({who: new FormControl('Alex')});
         * name.reset(); console.log(name); // {who: null}
         * ```
         *
         * Because the inner control is constructed explicitly by the caller, the builder has
         * no control over how it is created, and cannot exclude the `null`.
         */
        get nonNullable() {
          const nnfb = new _FormBuilder();
          nnfb.useNonNullable = true;
          return nnfb;
        }
        group(controls, options = null) {
          const reducedControls = this._reduceControls(controls);
          let newOptions = {};
          if (isAbstractControlOptions(options)) {
            newOptions = options;
          } else if (options !== null) {
            newOptions.validators = options.validator;
            newOptions.asyncValidators = options.asyncValidator;
          }
          return new FormGroup(reducedControls, newOptions);
        }
        /**
         * @description
         * Constructs a new `FormRecord` instance. Accepts a single generic argument, which is an object
         * containing all the keys and corresponding inner control types.
         *
         * @param controls A collection of child controls. The key for each child is the name
         * under which it is registered.
         *
         * @param options Configuration options object for the `FormRecord`. The object should have the
         * `AbstractControlOptions` type and might contain the following fields:
         * * `validators`: A synchronous validator function, or an array of validator functions.
         * * `asyncValidators`: A single async validator or array of async validator functions.
         * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur'
         * | submit').
         */
        record(controls, options = null) {
          const reducedControls = this._reduceControls(controls);
          return new FormRecord(reducedControls, options);
        }
        /**
         * @description
         * Constructs a new `FormControl` with the given state, validators and options. Sets
         * `{nonNullable: true}` in the options to get a non-nullable control. Otherwise, the
         * control will be nullable. Accepts a single generic argument, which is the type  of the
         * control's value.
         *
         * @param formState Initializes the control with an initial state value, or
         * with an object that contains both a value and a disabled status.
         *
         * @param validatorOrOpts A synchronous validator function, or an array of
         * such functions, or a `FormControlOptions` object that contains
         * validation functions and a validation trigger.
         *
         * @param asyncValidator A single async validator or array of async validator
         * functions.
         *
         * @usageNotes
         *
         * ### Initialize a control as disabled
         *
         * The following example returns a control with an initial value in a disabled state.
         *
         * <code-example path="forms/ts/formBuilder/form_builder_example.ts" region="disabled-control">
         * </code-example>
         */
        control(formState, validatorOrOpts, asyncValidator) {
          let newOptions = {};
          if (!this.useNonNullable) {
            return new FormControl(formState, validatorOrOpts, asyncValidator);
          }
          if (isAbstractControlOptions(validatorOrOpts)) {
            newOptions = validatorOrOpts;
          } else {
            newOptions.validators = validatorOrOpts;
            newOptions.asyncValidators = asyncValidator;
          }
          return new FormControl(formState, { ...newOptions, nonNullable: true });
        }
        /**
         * Constructs a new `FormArray` from the given array of configurations,
         * validators and options. Accepts a single generic argument, which is the type of each control
         * inside the array.
         *
         * @param controls An array of child controls or control configs. Each child control is given an
         *     index when it is registered.
         *
         * @param validatorOrOpts A synchronous validator function, or an array of such functions, or an
         *     `AbstractControlOptions` object that contains
         * validation functions and a validation trigger.
         *
         * @param asyncValidator A single async validator or array of async validator functions.
         */
        array(controls, validatorOrOpts, asyncValidator) {
          const createdControls = controls.map((c) => this._createControl(c));
          return new FormArray(createdControls, validatorOrOpts, asyncValidator);
        }
        /** @internal */
        _reduceControls(controls) {
          const createdControls = {};
          Object.keys(controls).forEach((controlName) => {
            createdControls[controlName] = this._createControl(controls[controlName]);
          });
          return createdControls;
        }
        /** @internal */
        _createControl(controls) {
          if (controls instanceof FormControl) {
            return controls;
          } else if (controls instanceof AbstractControl) {
            return controls;
          } else if (Array.isArray(controls)) {
            const value = controls[0];
            const validator = controls.length > 1 ? controls[1] : null;
            const asyncValidator = controls.length > 2 ? controls[2] : null;
            return this.control(value, validator, asyncValidator);
          } else {
            return this.control(controls);
          }
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _FormBuilder, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _FormBuilder, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: FormBuilder, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }] });
      NonNullableFormBuilder = class _NonNullableFormBuilder {
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NonNullableFormBuilder, deps: [], target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _NonNullableFormBuilder, providedIn: "root", useFactory: () => inject(FormBuilder).nonNullable });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: NonNullableFormBuilder, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root",
          useFactory: () => inject(FormBuilder).nonNullable
        }]
      }] });
      UntypedFormBuilder = class _UntypedFormBuilder extends FormBuilder {
        group(controlsConfig, options = null) {
          return super.group(controlsConfig, options);
        }
        /**
         * Like `FormBuilder#control`, except the resulting control is untyped.
         */
        control(formState, validatorOrOpts, asyncValidator) {
          return super.control(formState, validatorOrOpts, asyncValidator);
        }
        /**
         * Like `FormBuilder#array`, except the resulting array is untyped.
         */
        array(controlsConfig, validatorOrOpts, asyncValidator) {
          return super.array(controlsConfig, validatorOrOpts, asyncValidator);
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _UntypedFormBuilder, deps: null, target: FactoryTarget.Injectable });
        }
        static {
          this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _UntypedFormBuilder, providedIn: "root" });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: UntypedFormBuilder, decorators: [{
        type: Injectable,
        args: [{ providedIn: "root" }]
      }] });
      VERSION7 = new Version("17.3.5");
      FormsModule = class _FormsModule {
        /**
         * @description
         * Provides options for configuring the forms module.
         *
         * @param opts An object of configuration options
         * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more
         * correct, or to only call it `whenDisabled`, which is the legacy behavior.
         */
        static withConfig(opts) {
          return {
            ngModule: _FormsModule,
            providers: [{
              provide: CALL_SET_DISABLED_STATE,
              useValue: opts.callSetDisabledState ?? setDisabledStateDefault
            }]
          };
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _FormsModule, deps: [], target: FactoryTarget.NgModule });
        }
        static {
          this.\u0275mod = \u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _FormsModule, declarations: [NgModel, NgModelGroup, NgForm], exports: [\u0275InternalFormsSharedModule, NgModel, NgModelGroup, NgForm] });
        }
        static {
          this.\u0275inj = \u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _FormsModule, imports: [\u0275InternalFormsSharedModule] });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: FormsModule, decorators: [{
        type: NgModule,
        args: [{
          declarations: TEMPLATE_DRIVEN_DIRECTIVES,
          exports: [\u0275InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
        }]
      }] });
      ReactiveFormsModule = class _ReactiveFormsModule {
        /**
         * @description
         * Provides options for configuring the reactive forms module.
         *
         * @param opts An object of configuration options
         * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`
         * binding is used with reactive form directives.
         * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more
         * correct, or to only call it `whenDisabled`, which is the legacy behavior.
         */
        static withConfig(opts) {
          return {
            ngModule: _ReactiveFormsModule,
            providers: [
              {
                provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,
                useValue: opts.warnOnNgModelWithFormControl ?? "always"
              },
              {
                provide: CALL_SET_DISABLED_STATE,
                useValue: opts.callSetDisabledState ?? setDisabledStateDefault
              }
            ]
          };
        }
        static {
          this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _ReactiveFormsModule, deps: [], target: FactoryTarget.NgModule });
        }
        static {
          this.\u0275mod = \u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.5", ngImport: core_exports, type: _ReactiveFormsModule, declarations: [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName], exports: [\u0275InternalFormsSharedModule, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName] });
        }
        static {
          this.\u0275inj = \u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _ReactiveFormsModule, imports: [\u0275InternalFormsSharedModule] });
        }
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: ReactiveFormsModule, decorators: [{
        type: NgModule,
        args: [{
          declarations: [REACTIVE_DRIVEN_DIRECTIVES],
          exports: [\u0275InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
        }]
      }] });
    }
  });

  // node_modules/@ionic/core/components/helpers.js
  var componentOnReady, raf;
  var init_helpers = __esm({
    "node_modules/@ionic/core/components/helpers.js"() {
      componentOnReady = (el, callback) => {
        if (el.componentOnReady) {
          el.componentOnReady().then((resolvedEl) => callback(resolvedEl));
        } else {
          raf(() => callback(el));
        }
      };
      raf = (h2) => {
        if (typeof __zone_symbol__requestAnimationFrame === "function") {
          return __zone_symbol__requestAnimationFrame(h2);
        }
        if (typeof requestAnimationFrame === "function") {
          return requestAnimationFrame(h2);
        }
        return setTimeout(h2);
      };
    }
  });

  // node_modules/@ionic/core/components/index2.js
  var LIFECYCLE_WILL_ENTER, LIFECYCLE_DID_ENTER, LIFECYCLE_WILL_LEAVE, LIFECYCLE_DID_LEAVE, LIFECYCLE_WILL_UNLOAD;
  var init_index2 = __esm({
    "node_modules/@ionic/core/components/index2.js"() {
      LIFECYCLE_WILL_ENTER = "ionViewWillEnter";
      LIFECYCLE_DID_ENTER = "ionViewDidEnter";
      LIFECYCLE_WILL_LEAVE = "ionViewWillLeave";
      LIFECYCLE_DID_LEAVE = "ionViewDidLeave";
      LIFECYCLE_WILL_UNLOAD = "ionViewWillUnload";
    }
  });

  // node_modules/@ionic/core/components/ionic-global.js
  var Config, config2, getPlatforms, isPlatform, setupPlatforms, detectPlatforms, isMobileWeb, isIpad, isIphone, isIOS, isAndroid, isAndroidTablet, isPhablet, isTablet, isMobile, isDesktop, isHybrid, isCordova, isCapacitorNative, isElectron, isPWA, testUserAgent, matchMedia, PLATFORMS_MAP;
  var init_ionic_global = __esm({
    "node_modules/@ionic/core/components/ionic-global.js"() {
      Config = class {
        constructor() {
          this.m = /* @__PURE__ */ new Map();
        }
        reset(configObj) {
          this.m = new Map(Object.entries(configObj));
        }
        get(key, fallback) {
          const value = this.m.get(key);
          return value !== void 0 ? value : fallback;
        }
        getBoolean(key, fallback = false) {
          const val = this.m.get(key);
          if (val === void 0) {
            return fallback;
          }
          if (typeof val === "string") {
            return val === "true";
          }
          return !!val;
        }
        getNumber(key, fallback) {
          const val = parseFloat(this.m.get(key));
          return isNaN(val) ? fallback !== void 0 ? fallback : NaN : val;
        }
        set(key, value) {
          this.m.set(key, value);
        }
      };
      config2 = /* @__PURE__ */ new Config();
      getPlatforms = (win3) => setupPlatforms(win3);
      isPlatform = (winOrPlatform, platform) => {
        if (typeof winOrPlatform === "string") {
          platform = winOrPlatform;
          winOrPlatform = void 0;
        }
        return getPlatforms(winOrPlatform).includes(platform);
      };
      setupPlatforms = (win3 = window) => {
        if (typeof win3 === "undefined") {
          return [];
        }
        win3.Ionic = win3.Ionic || {};
        let platforms = win3.Ionic.platforms;
        if (platforms == null) {
          platforms = win3.Ionic.platforms = detectPlatforms(win3);
          platforms.forEach((p) => win3.document.documentElement.classList.add(`plt-${p}`));
        }
        return platforms;
      };
      detectPlatforms = (win3) => {
        const customPlatformMethods = config2.get("platform");
        return Object.keys(PLATFORMS_MAP).filter((p) => {
          const customMethod = customPlatformMethods === null || customPlatformMethods === void 0 ? void 0 : customPlatformMethods[p];
          return typeof customMethod === "function" ? customMethod(win3) : PLATFORMS_MAP[p](win3);
        });
      };
      isMobileWeb = (win3) => isMobile(win3) && !isHybrid(win3);
      isIpad = (win3) => {
        if (testUserAgent(win3, /iPad/i)) {
          return true;
        }
        if (testUserAgent(win3, /Macintosh/i) && isMobile(win3)) {
          return true;
        }
        return false;
      };
      isIphone = (win3) => testUserAgent(win3, /iPhone/i);
      isIOS = (win3) => testUserAgent(win3, /iPhone|iPod/i) || isIpad(win3);
      isAndroid = (win3) => testUserAgent(win3, /android|sink/i);
      isAndroidTablet = (win3) => {
        return isAndroid(win3) && !testUserAgent(win3, /mobile/i);
      };
      isPhablet = (win3) => {
        const width = win3.innerWidth;
        const height = win3.innerHeight;
        const smallest = Math.min(width, height);
        const largest = Math.max(width, height);
        return smallest > 390 && smallest < 520 && largest > 620 && largest < 800;
      };
      isTablet = (win3) => {
        const width = win3.innerWidth;
        const height = win3.innerHeight;
        const smallest = Math.min(width, height);
        const largest = Math.max(width, height);
        return isIpad(win3) || isAndroidTablet(win3) || smallest > 460 && smallest < 820 && largest > 780 && largest < 1400;
      };
      isMobile = (win3) => matchMedia(win3, "(any-pointer:coarse)");
      isDesktop = (win3) => !isMobile(win3);
      isHybrid = (win3) => isCordova(win3) || isCapacitorNative(win3);
      isCordova = (win3) => !!(win3["cordova"] || win3["phonegap"] || win3["PhoneGap"]);
      isCapacitorNative = (win3) => {
        const capacitor = win3["Capacitor"];
        return !!(capacitor === null || capacitor === void 0 ? void 0 : capacitor.isNative);
      };
      isElectron = (win3) => testUserAgent(win3, /electron/i);
      isPWA = (win3) => {
        var _a2;
        return !!(((_a2 = win3.matchMedia) === null || _a2 === void 0 ? void 0 : _a2.call(win3, "(display-mode: standalone)").matches) || win3.navigator.standalone);
      };
      testUserAgent = (win3, expr) => expr.test(win3.navigator.userAgent);
      matchMedia = (win3, query) => {
        var _a2;
        return (_a2 = win3.matchMedia) === null || _a2 === void 0 ? void 0 : _a2.call(win3, query).matches;
      };
      PLATFORMS_MAP = {
        ipad: isIpad,
        iphone: isIphone,
        ios: isIOS,
        android: isAndroid,
        phablet: isPhablet,
        tablet: isTablet,
        cordova: isCordova,
        capacitor: isCapacitorNative,
        electron: isElectron,
        pwa: isPWA,
        mobile: isMobile,
        mobileweb: isMobileWeb,
        desktop: isDesktop,
        hybrid: isHybrid
      };
    }
  });

  // node_modules/@ionic/core/components/index.js
  var init_components = __esm({
    "node_modules/@ionic/core/components/index.js"() {
      init_index2();
      init_ionic_global();
      init_helpers();
    }
  });

  // node_modules/@ionic/angular/fesm2022/ionic-angular-common.mjs
  function ProxyCmp(opts) {
    const decorator = function(cls) {
      const { defineCustomElementFn, inputs, methods } = opts;
      if (defineCustomElementFn !== void 0) {
        defineCustomElementFn();
      }
      if (inputs) {
        proxyInputs(cls, inputs);
      }
      if (methods) {
        proxyMethods(cls, methods);
      }
      return cls;
    };
    return decorator;
  }
  function componentInputBindingFactory(router) {
    if (router?.componentInputBindingEnabled) {
      return new RoutedComponentInputBinder2();
    }
    return null;
  }
  var MenuController, DomController, getQueue, Platform, readQueryParam, proxyEvent, NavController, getAnimation, DEFAULT_DIRECTION, DEFAULT_ANIMATED, Config2, ConfigToken, getConfig, NavParams, AngularDelegate, AngularFrameworkDelegate, attachView, LIFECYCLES, bindLifecycleEvents, NavParamsToken, getProviders, provideNavParamsInjectable, proxyInputs, proxyMethods, proxyOutputs, POPOVER_INPUTS, POPOVER_METHODS, IonPopover, MODAL_INPUTS, MODAL_METHODS, IonModal, insertView2, setRoot, setForward, setBack, getUrl2, isTabSwitch, computeStackId, toSegments, destroyView, StackController, cleanupAsync, cleanup, IonRouterOutlet, OutletInjector2, INPUT_BINDER2, RoutedComponentInputBinder2, provideComponentInputBinding, BACK_BUTTON_INPUTS, IonBackButton, RouterLinkDelegateDirective, RouterLinkWithHrefDelegateDirective, NAV_INPUTS, NAV_METHODS, IonNav, IonTabs, raf2, ValueAccessor, setIonicClasses, getClasses, setClasses, startsWith, IonicRouteStrategy, OverlayBaseController;
  var init_ionic_angular_common = __esm({
    "node_modules/@ionic/angular/fesm2022/ionic-angular-common.mjs"() {
      init_core();
      init_core();
      init_router();
      init_router();
      init_common();
      init_common();
      init_components();
      init_esm5();
      init_tslib_es6();
      init_operators();
      init_forms();
      MenuController = class {
        menuController;
        constructor(menuController2) {
          this.menuController = menuController2;
        }
        /**
         * Programmatically open the Menu.
         * @param [menuId]  Optionally get the menu by its id, or side.
         * @return returns a promise when the menu is fully opened
         */
        open(menuId) {
          return this.menuController.open(menuId);
        }
        /**
         * Programmatically close the Menu. If no `menuId` is given as the first
         * argument then it'll close any menu which is open. If a `menuId`
         * is given then it'll close that exact menu.
         * @param [menuId]  Optionally get the menu by its id, or side.
         * @return returns a promise when the menu is fully closed
         */
        close(menuId) {
          return this.menuController.close(menuId);
        }
        /**
         * Toggle the menu. If it's closed, it will open, and if opened, it
         * will close.
         * @param [menuId]  Optionally get the menu by its id, or side.
         * @return returns a promise when the menu has been toggled
         */
        toggle(menuId) {
          return this.menuController.toggle(menuId);
        }
        /**
         * Used to enable or disable a menu. For example, there could be multiple
         * left menus, but only one of them should be able to be opened at the same
         * time. If there are multiple menus on the same side, then enabling one menu
         * will also automatically disable all the others that are on the same side.
         * @param [menuId]  Optionally get the menu by its id, or side.
         * @return Returns the instance of the menu, which is useful for chaining.
         */
        enable(shouldEnable, menuId) {
          return this.menuController.enable(shouldEnable, menuId);
        }
        /**
         * Used to enable or disable the ability to swipe open the menu.
         * @param shouldEnable  True if it should be swipe-able, false if not.
         * @param [menuId]  Optionally get the menu by its id, or side.
         * @return Returns the instance of the menu, which is useful for chaining.
         */
        swipeGesture(shouldEnable, menuId) {
          return this.menuController.swipeGesture(shouldEnable, menuId);
        }
        /**
         * @param [menuId] Optionally get the menu by its id, or side.
         * @return Returns true if the specified menu is currently open, otherwise false.
         * If the menuId is not specified, it returns true if ANY menu is currenly open.
         */
        isOpen(menuId) {
          return this.menuController.isOpen(menuId);
        }
        /**
         * @param [menuId]  Optionally get the menu by its id, or side.
         * @return Returns true if the menu is currently enabled, otherwise false.
         */
        isEnabled(menuId) {
          return this.menuController.isEnabled(menuId);
        }
        /**
         * Used to get a menu instance. If a `menuId` is not provided then it'll
         * return the first menu found. If a `menuId` is `left` or `right`, then
         * it'll return the enabled menu on that side. Otherwise, if a `menuId` is
         * provided, then it'll try to find the menu using the menu's `id`
         * property. If a menu is not found then it'll return `null`.
         * @param [menuId]  Optionally get the menu by its id, or side.
         * @return Returns the instance of the menu if found, otherwise `null`.
         */
        get(menuId) {
          return this.menuController.get(menuId);
        }
        /**
         * @return Returns the instance of the menu already opened, otherwise `null`.
         */
        getOpen() {
          return this.menuController.getOpen();
        }
        /**
         * @return Returns an array of all menu instances.
         */
        getMenus() {
          return this.menuController.getMenus();
        }
        registerAnimation(name, animation) {
          return this.menuController.registerAnimation(name, animation);
        }
        isAnimating() {
          return this.menuController.isAnimating();
        }
        _getOpenSync() {
          return this.menuController._getOpenSync();
        }
        _createAnimation(type, menuCmp) {
          return this.menuController._createAnimation(type, menuCmp);
        }
        _register(menu) {
          return this.menuController._register(menu);
        }
        _unregister(menu) {
          return this.menuController._unregister(menu);
        }
        _setOpen(menu, shouldOpen, animated) {
          return this.menuController._setOpen(menu, shouldOpen, animated);
        }
      };
      DomController = class _DomController {
        /**
         * Schedules a task to run during the READ phase of the next frame.
         * This task should only read the DOM, but never modify it.
         */
        read(cb) {
          getQueue().read(cb);
        }
        /**
         * Schedules a task to run during the WRITE phase of the next frame.
         * This task should write the DOM, but never READ it.
         */
        write(cb) {
          getQueue().write(cb);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _DomController, deps: [], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _DomController, providedIn: "root" });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: DomController, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }] });
      getQueue = () => {
        const win3 = typeof window !== "undefined" ? window : null;
        if (win3 != null) {
          const Ionic = win3.Ionic;
          if (Ionic?.queue) {
            return Ionic.queue;
          }
          return {
            read: (cb) => win3.requestAnimationFrame(cb),
            write: (cb) => win3.requestAnimationFrame(cb)
          };
        }
        return {
          read: (cb) => cb(),
          write: (cb) => cb()
        };
      };
      Platform = class _Platform {
        doc;
        _readyPromise;
        win;
        /**
         * @hidden
         */
        backButton = new Subject();
        /**
         * The keyboardDidShow event emits when the
         * on-screen keyboard is presented.
         */
        keyboardDidShow = new Subject();
        /**
         * The keyboardDidHide event emits when the
         * on-screen keyboard is hidden.
         */
        keyboardDidHide = new Subject();
        /**
         * The pause event emits when the native platform puts the application
         * into the background, typically when the user switches to a different
         * application. This event would emit when a Cordova app is put into
         * the background, however, it would not fire on a standard web browser.
         */
        pause = new Subject();
        /**
         * The resume event emits when the native platform pulls the application
         * out from the background. This event would emit when a Cordova app comes
         * out from the background, however, it would not fire on a standard web browser.
         */
        resume = new Subject();
        /**
         * The resize event emits when the browser window has changed dimensions. This
         * could be from a browser window being physically resized, or from a device
         * changing orientation.
         */
        resize = new Subject();
        constructor(doc3, zone) {
          this.doc = doc3;
          zone.run(() => {
            this.win = doc3.defaultView;
            this.backButton.subscribeWithPriority = function(priority, callback) {
              return this.subscribe((ev) => {
                return ev.register(priority, (processNextHandler) => zone.run(() => callback(processNextHandler)));
              });
            };
            proxyEvent(this.pause, doc3, "pause", zone);
            proxyEvent(this.resume, doc3, "resume", zone);
            proxyEvent(this.backButton, doc3, "ionBackButton", zone);
            proxyEvent(this.resize, this.win, "resize", zone);
            proxyEvent(this.keyboardDidShow, this.win, "ionKeyboardDidShow", zone);
            proxyEvent(this.keyboardDidHide, this.win, "ionKeyboardDidHide", zone);
            let readyResolve;
            this._readyPromise = new Promise((res) => {
              readyResolve = res;
            });
            if (this.win?.["cordova"]) {
              doc3.addEventListener("deviceready", () => {
                readyResolve("cordova");
              }, { once: true });
            } else {
              readyResolve("dom");
            }
          });
        }
        /**
         * @returns returns true/false based on platform.
         * @description
         * Depending on the platform the user is on, `is(platformName)` will
         * return `true` or `false`. Note that the same app can return `true`
         * for more than one platform name. For example, an app running from
         * an iPad would return `true` for the platform names: `mobile`,
         * `ios`, `ipad`, and `tablet`. Additionally, if the app was running
         * from Cordova then `cordova` would be true, and if it was running
         * from a web browser on the iPad then `mobileweb` would be `true`.
         *
         * ```
         * import { Platform } from 'ionic-angular';
         *
         * @Component({...})
         * export MyPage {
         *   constructor(public platform: Platform) {
         *     if (this.platform.is('ios')) {
         *       // This will only print when on iOS
         *       console.log('I am an iOS device!');
         *     }
         *   }
         * }
         * ```
         *
         * | Platform Name   | Description                        |
         * |-----------------|------------------------------------|
         * | android         | on a device running Android.       |
         * | capacitor       | on a device running Capacitor.     |
         * | cordova         | on a device running Cordova.       |
         * | ios             | on a device running iOS.           |
         * | ipad            | on an iPad device.                 |
         * | iphone          | on an iPhone device.               |
         * | phablet         | on a phablet device.               |
         * | tablet          | on a tablet device.                |
         * | electron        | in Electron on a desktop device.   |
         * | pwa             | as a PWA app.                      |
         * | mobile          | on a mobile device.                |
         * | mobileweb       | on a mobile device in a browser.   |
         * | desktop         | on a desktop device.               |
         * | hybrid          | is a cordova or capacitor app.     |
         *
         */
        is(platformName) {
          return isPlatform(this.win, platformName);
        }
        /**
         * @returns the array of platforms
         * @description
         * Depending on what device you are on, `platforms` can return multiple values.
         * Each possible value is a hierarchy of platforms. For example, on an iPhone,
         * it would return `mobile`, `ios`, and `iphone`.
         *
         * ```
         * import { Platform } from 'ionic-angular';
         *
         * @Component({...})
         * export MyPage {
         *   constructor(public platform: Platform) {
         *     // This will print an array of the current platforms
         *     console.log(this.platform.platforms());
         *   }
         * }
         * ```
         */
        platforms() {
          return getPlatforms(this.win);
        }
        /**
         * Returns a promise when the platform is ready and native functionality
         * can be called. If the app is running from within a web browser, then
         * the promise will resolve when the DOM is ready. When the app is running
         * from an application engine such as Cordova, then the promise will
         * resolve when Cordova triggers the `deviceready` event.
         *
         * The resolved value is the `readySource`, which states which platform
         * ready was used. For example, when Cordova is ready, the resolved ready
         * source is `cordova`. The default ready source value will be `dom`. The
         * `readySource` is useful if different logic should run depending on the
         * platform the app is running from. For example, only Cordova can execute
         * the status bar plugin, so the web should not run status bar plugin logic.
         *
         * ```
         * import { Component } from '@angular/core';
         * import { Platform } from 'ionic-angular';
         *
         * @Component({...})
         * export MyApp {
         *   constructor(public platform: Platform) {
         *     this.platform.ready().then((readySource) => {
         *       console.log('Platform ready from', readySource);
         *       // Platform now ready, execute any required native code
         *     });
         *   }
         * }
         * ```
         */
        ready() {
          return this._readyPromise;
        }
        /**
         * Returns if this app is using right-to-left language direction or not.
         * We recommend the app's `index.html` file already has the correct `dir`
         * attribute value set, such as `<html dir="ltr">` or `<html dir="rtl">`.
         * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
         */
        get isRTL() {
          return this.doc.dir === "rtl";
        }
        /**
         * Get the query string parameter
         */
        getQueryParam(key) {
          return readQueryParam(this.win.location.href, key);
        }
        /**
         * Returns `true` if the app is in landscape mode.
         */
        isLandscape() {
          return !this.isPortrait();
        }
        /**
         * Returns `true` if the app is in portrait mode.
         */
        isPortrait() {
          return this.win.matchMedia?.("(orientation: portrait)").matches;
        }
        testUserAgent(expression) {
          const nav = this.win.navigator;
          return !!(nav?.userAgent && nav.userAgent.indexOf(expression) >= 0);
        }
        /**
         * Get the current url.
         */
        url() {
          return this.win.location.href;
        }
        /**
         * Gets the width of the platform's viewport using `window.innerWidth`.
         */
        width() {
          return this.win.innerWidth;
        }
        /**
         * Gets the height of the platform's viewport using `window.innerHeight`.
         */
        height() {
          return this.win.innerHeight;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _Platform, deps: [{ token: DOCUMENT2 }, { token: NgZone }], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _Platform, providedIn: "root" });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: Platform, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }], ctorParameters: function() {
        return [{ type: void 0, decorators: [{
          type: Inject,
          args: [DOCUMENT2]
        }] }, { type: NgZone }];
      } });
      readQueryParam = (url, key) => {
        key = key.replace(/[[\]\\]/g, "\\$&");
        const regex = new RegExp("[\\?&]" + key + "=([^&#]*)");
        const results = regex.exec(url);
        return results ? decodeURIComponent(results[1].replace(/\+/g, " ")) : null;
      };
      proxyEvent = (emitter, el, eventName, zone) => {
        if (el) {
          el.addEventListener(eventName, (ev) => {
            zone.run(() => {
              const value = ev != null ? ev.detail : void 0;
              emitter.next(value);
            });
          });
        }
      };
      NavController = class _NavController {
        location;
        serializer;
        router;
        topOutlet;
        direction = DEFAULT_DIRECTION;
        animated = DEFAULT_ANIMATED;
        animationBuilder;
        guessDirection = "forward";
        guessAnimation;
        lastNavId = -1;
        constructor(platform, location2, serializer2, router) {
          this.location = location2;
          this.serializer = serializer2;
          this.router = router;
          if (router) {
            router.events.subscribe((ev) => {
              if (ev instanceof NavigationStart) {
                const id = ev.restoredState ? ev.restoredState.navigationId : ev.id;
                this.guessDirection = this.guessAnimation = id < this.lastNavId ? "back" : "forward";
                this.lastNavId = this.guessDirection === "forward" ? ev.id : id;
              }
            });
          }
          platform.backButton.subscribeWithPriority(0, (processNextHandler) => {
            this.pop();
            processNextHandler();
          });
        }
        /**
         * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,
         * it's equivalent to calling `this.router.navigateByUrl()`, but it's explicit about the **direction** of the transition.
         *
         * Going **forward** means that a new page is going to be pushed to the stack of the outlet (ion-router-outlet),
         * and that it will show a "forward" animation by default.
         *
         * Navigating forward can also be triggered in a declarative manner by using the `[routerDirection]` directive:
         *
         * ```html
         * <a routerLink="/path/to/page" routerDirection="forward">Link</a>
         * ```
         */
        navigateForward(url, options = {}) {
          this.setDirection("forward", options.animated, options.animationDirection, options.animation);
          return this.navigate(url, options);
        }
        /**
         * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,
         * it's equivalent to calling:
         *
         * ```ts
         * this.navController.setDirection('back');
         * this.router.navigateByUrl(path);
         * ```
         *
         * Going **back** means that all the pages in the stack until the navigated page is found will be popped,
         * and that it will show a "back" animation by default.
         *
         * Navigating back can also be triggered in a declarative manner by using the `[routerDirection]` directive:
         *
         * ```html
         * <a routerLink="/path/to/page" routerDirection="back">Link</a>
         * ```
         */
        navigateBack(url, options = {}) {
          this.setDirection("back", options.animated, options.animationDirection, options.animation);
          return this.navigate(url, options);
        }
        /**
         * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,
         * it's equivalent to calling:
         *
         * ```ts
         * this.navController.setDirection('root');
         * this.router.navigateByUrl(path);
         * ```
         *
         * Going **root** means that all existing pages in the stack will be removed,
         * and the navigated page will become the single page in the stack.
         *
         * Navigating root can also be triggered in a declarative manner by using the `[routerDirection]` directive:
         *
         * ```html
         * <a routerLink="/path/to/page" routerDirection="root">Link</a>
         * ```
         */
        navigateRoot(url, options = {}) {
          this.setDirection("root", options.animated, options.animationDirection, options.animation);
          return this.navigate(url, options);
        }
        /**
         * Same as [Location](https://angular.io/api/common/Location)'s back() method.
         * It will use the standard `window.history.back()` under the hood, but featuring a `back` animation
         * by default.
         */
        back(options = { animated: true, animationDirection: "back" }) {
          this.setDirection("back", options.animated, options.animationDirection, options.animation);
          return this.location.back();
        }
        /**
         * This methods goes back in the context of Ionic's stack navigation.
         *
         * It recursively finds the top active `ion-router-outlet` and calls `pop()`.
         * This is the recommended way to go back when you are using `ion-router-outlet`.
         *
         * Resolves to `true` if it was able to pop.
         */
        async pop() {
          let outlet = this.topOutlet;
          while (outlet) {
            if (await outlet.pop()) {
              return true;
            } else {
              outlet = outlet.parentOutlet;
            }
          }
          return false;
        }
        /**
         * This methods specifies the direction of the next navigation performed by the Angular router.
         *
         * `setDirection()` does not trigger any transition, it just sets some flags to be consumed by `ion-router-outlet`.
         *
         * It's recommended to use `navigateForward()`, `navigateBack()` and `navigateRoot()` instead of `setDirection()`.
         */
        setDirection(direction, animated, animationDirection, animationBuilder) {
          this.direction = direction;
          this.animated = getAnimation(direction, animated, animationDirection);
          this.animationBuilder = animationBuilder;
        }
        /**
         * @internal
         */
        setTopOutlet(outlet) {
          this.topOutlet = outlet;
        }
        /**
         * @internal
         */
        consumeTransition() {
          let direction = "root";
          let animation;
          const animationBuilder = this.animationBuilder;
          if (this.direction === "auto") {
            direction = this.guessDirection;
            animation = this.guessAnimation;
          } else {
            animation = this.animated;
            direction = this.direction;
          }
          this.direction = DEFAULT_DIRECTION;
          this.animated = DEFAULT_ANIMATED;
          this.animationBuilder = void 0;
          return {
            direction,
            animation,
            animationBuilder
          };
        }
        navigate(url, options) {
          if (Array.isArray(url)) {
            return this.router.navigate(url, options);
          } else {
            const urlTree = this.serializer.parse(url.toString());
            if (options.queryParams !== void 0) {
              urlTree.queryParams = { ...options.queryParams };
            }
            if (options.fragment !== void 0) {
              urlTree.fragment = options.fragment;
            }
            return this.router.navigateByUrl(urlTree, options);
          }
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _NavController, deps: [{ token: Platform }, { token: Location }, { token: UrlSerializer }, { token: Router, optional: true }], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _NavController, providedIn: "root" });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: NavController, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }], ctorParameters: function() {
        return [{ type: Platform }, { type: Location }, { type: UrlSerializer }, { type: Router, decorators: [{
          type: Optional
        }] }];
      } });
      getAnimation = (direction, animated, animationDirection) => {
        if (animated === false) {
          return void 0;
        }
        if (animationDirection !== void 0) {
          return animationDirection;
        }
        if (direction === "forward" || direction === "back") {
          return direction;
        } else if (direction === "root" && animated === true) {
          return "forward";
        }
        return void 0;
      };
      DEFAULT_DIRECTION = "auto";
      DEFAULT_ANIMATED = void 0;
      Config2 = class _Config {
        get(key, fallback) {
          const c = getConfig();
          if (c) {
            return c.get(key, fallback);
          }
          return null;
        }
        getBoolean(key, fallback) {
          const c = getConfig();
          if (c) {
            return c.getBoolean(key, fallback);
          }
          return false;
        }
        getNumber(key, fallback) {
          const c = getConfig();
          if (c) {
            return c.getNumber(key, fallback);
          }
          return 0;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _Config, deps: [], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _Config, providedIn: "root" });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: Config2, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }] });
      ConfigToken = new InjectionToken("USERCONFIG");
      getConfig = () => {
        if (typeof window !== "undefined") {
          const Ionic = window.Ionic;
          if (Ionic?.config) {
            return Ionic.config;
          }
        }
        return null;
      };
      NavParams = class {
        data;
        constructor(data = {}) {
          this.data = data;
        }
        /**
         * Get the value of a nav-parameter for the current view
         *
         * ```ts
         * import { NavParams } from 'ionic-angular';
         *
         * export class MyClass{
         *  constructor(public navParams: NavParams){
         *    // userParams is an object we have in our nav-parameters
         *    this.navParams.get('userParams');
         *  }
         * }
         * ```
         *
         * @param param Which param you want to look up
         */
        get(param) {
          return this.data[param];
        }
      };
      AngularDelegate = class _AngularDelegate {
        zone = inject(NgZone);
        applicationRef = inject(ApplicationRef);
        create(environmentInjector, injector, elementReferenceKey) {
          return new AngularFrameworkDelegate(environmentInjector, injector, this.applicationRef, this.zone, elementReferenceKey);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _AngularDelegate, deps: [], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _AngularDelegate });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: AngularDelegate, decorators: [{
        type: Injectable
      }] });
      AngularFrameworkDelegate = class {
        environmentInjector;
        injector;
        applicationRef;
        zone;
        elementReferenceKey;
        elRefMap = /* @__PURE__ */ new WeakMap();
        elEventsMap = /* @__PURE__ */ new WeakMap();
        constructor(environmentInjector, injector, applicationRef, zone, elementReferenceKey) {
          this.environmentInjector = environmentInjector;
          this.injector = injector;
          this.applicationRef = applicationRef;
          this.zone = zone;
          this.elementReferenceKey = elementReferenceKey;
        }
        attachViewToDom(container, component, params, cssClasses) {
          return this.zone.run(() => {
            return new Promise((resolve) => {
              const componentProps = {
                ...params
              };
              if (this.elementReferenceKey !== void 0) {
                componentProps[this.elementReferenceKey] = container;
              }
              const el = attachView(this.zone, this.environmentInjector, this.injector, this.applicationRef, this.elRefMap, this.elEventsMap, container, component, componentProps, cssClasses, this.elementReferenceKey);
              resolve(el);
            });
          });
        }
        removeViewFromDom(_container, component) {
          return this.zone.run(() => {
            return new Promise((resolve) => {
              const componentRef = this.elRefMap.get(component);
              if (componentRef) {
                componentRef.destroy();
                this.elRefMap.delete(component);
                const unbindEvents = this.elEventsMap.get(component);
                if (unbindEvents) {
                  unbindEvents();
                  this.elEventsMap.delete(component);
                }
              }
              resolve();
            });
          });
        }
      };
      attachView = (zone, environmentInjector, injector, applicationRef, elRefMap, elEventsMap, container, component, params, cssClasses, elementReferenceKey) => {
        const childInjector = Injector.create({
          providers: getProviders(params),
          parent: injector
        });
        const componentRef = createComponent(component, {
          environmentInjector,
          elementInjector: childInjector
        });
        const instance = componentRef.instance;
        const hostElement = componentRef.location.nativeElement;
        if (params) {
          if (elementReferenceKey && instance[elementReferenceKey] !== void 0) {
            console.error(`[Ionic Error]: ${elementReferenceKey} is a reserved property when using ${container.tagName.toLowerCase()}. Rename or remove the "${elementReferenceKey}" property from ${component.name}.`);
          }
          Object.assign(instance, params);
        }
        if (cssClasses) {
          for (const cssClass of cssClasses) {
            hostElement.classList.add(cssClass);
          }
        }
        const unbindEvents = bindLifecycleEvents(zone, instance, hostElement);
        container.appendChild(hostElement);
        applicationRef.attachView(componentRef.hostView);
        elRefMap.set(hostElement, componentRef);
        elEventsMap.set(hostElement, unbindEvents);
        return hostElement;
      };
      LIFECYCLES = [
        LIFECYCLE_WILL_ENTER,
        LIFECYCLE_DID_ENTER,
        LIFECYCLE_WILL_LEAVE,
        LIFECYCLE_DID_LEAVE,
        LIFECYCLE_WILL_UNLOAD
      ];
      bindLifecycleEvents = (zone, instance, element2) => {
        return zone.run(() => {
          const unregisters = LIFECYCLES.filter((eventName) => typeof instance[eventName] === "function").map((eventName) => {
            const handler = (ev) => instance[eventName](ev.detail);
            element2.addEventListener(eventName, handler);
            return () => element2.removeEventListener(eventName, handler);
          });
          return () => unregisters.forEach((fn2) => fn2());
        });
      };
      NavParamsToken = new InjectionToken("NavParamsToken");
      getProviders = (params) => {
        return [
          {
            provide: NavParamsToken,
            useValue: params
          },
          {
            provide: NavParams,
            useFactory: provideNavParamsInjectable,
            deps: [NavParamsToken]
          }
        ];
      };
      provideNavParamsInjectable = (params) => {
        return new NavParams(params);
      };
      proxyInputs = (Cmp, inputs) => {
        const Prototype = Cmp.prototype;
        inputs.forEach((item) => {
          Object.defineProperty(Prototype, item, {
            get() {
              return this.el[item];
            },
            set(val) {
              this.z.runOutsideAngular(() => this.el[item] = val);
            }
          });
        });
      };
      proxyMethods = (Cmp, methods) => {
        const Prototype = Cmp.prototype;
        methods.forEach((methodName) => {
          Prototype[methodName] = function() {
            const args = arguments;
            return this.z.runOutsideAngular(() => this.el[methodName].apply(this.el, args));
          };
        });
      };
      proxyOutputs = (instance, el, events) => {
        events.forEach((eventName) => instance[eventName] = fromEvent(el, eventName));
      };
      POPOVER_INPUTS = [
        "alignment",
        "animated",
        "arrow",
        "keepContentsMounted",
        "backdropDismiss",
        "cssClass",
        "dismissOnSelect",
        "enterAnimation",
        "event",
        "isOpen",
        "keyboardClose",
        "leaveAnimation",
        "mode",
        "showBackdrop",
        "translucent",
        "trigger",
        "triggerAction",
        "reference",
        "size",
        "side"
      ];
      POPOVER_METHODS = ["present", "dismiss", "onDidDismiss", "onWillDismiss"];
      IonPopover = class IonPopover2 {
        z;
        // TODO(FW-2827): type
        template;
        isCmpOpen = false;
        el;
        constructor(c, r, z) {
          this.z = z;
          this.el = r.nativeElement;
          this.el.addEventListener("ionMount", () => {
            this.isCmpOpen = true;
            c.detectChanges();
          });
          this.el.addEventListener("didDismiss", () => {
            this.isCmpOpen = false;
            c.detectChanges();
          });
          proxyOutputs(this, this.el, [
            "ionPopoverDidPresent",
            "ionPopoverWillPresent",
            "ionPopoverWillDismiss",
            "ionPopoverDidDismiss",
            "didPresent",
            "willPresent",
            "willDismiss",
            "didDismiss"
          ]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonPopover2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: IonPopover2, selector: "ion-popover", inputs: { alignment: "alignment", animated: "animated", arrow: "arrow", keepContentsMounted: "keepContentsMounted", backdropDismiss: "backdropDismiss", cssClass: "cssClass", dismissOnSelect: "dismissOnSelect", enterAnimation: "enterAnimation", event: "event", isOpen: "isOpen", keyboardClose: "keyboardClose", leaveAnimation: "leaveAnimation", mode: "mode", showBackdrop: "showBackdrop", translucent: "translucent", trigger: "trigger", triggerAction: "triggerAction", reference: "reference", size: "size", side: "side" }, queries: [{ propertyName: "template", first: true, predicate: TemplateRef, descendants: true }], ngImport: core_exports });
      };
      IonPopover = __decorate([
        ProxyCmp({
          inputs: POPOVER_INPUTS,
          methods: POPOVER_METHODS
        })
        /**
         * @Component extends from @Directive
         * so by defining the inputs here we
         * do not need to re-define them for the
         * lazy loaded popover.
         */
      ], IonPopover);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonPopover, decorators: [{
        type: Directive,
        args: [{
          selector: "ion-popover",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: POPOVER_INPUTS
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      }, propDecorators: { template: [{
        type: ContentChild,
        args: [TemplateRef, { static: false }]
      }] } });
      MODAL_INPUTS = [
        "animated",
        "keepContentsMounted",
        "backdropBreakpoint",
        "backdropDismiss",
        "breakpoints",
        "canDismiss",
        "cssClass",
        "enterAnimation",
        "event",
        "handle",
        "handleBehavior",
        "initialBreakpoint",
        "isOpen",
        "keyboardClose",
        "leaveAnimation",
        "mode",
        "presentingElement",
        "showBackdrop",
        "translucent",
        "trigger"
      ];
      MODAL_METHODS = [
        "present",
        "dismiss",
        "onDidDismiss",
        "onWillDismiss",
        "setCurrentBreakpoint",
        "getCurrentBreakpoint"
      ];
      IonModal = class IonModal2 {
        z;
        // TODO(FW-2827): type
        template;
        isCmpOpen = false;
        el;
        constructor(c, r, z) {
          this.z = z;
          this.el = r.nativeElement;
          this.el.addEventListener("ionMount", () => {
            this.isCmpOpen = true;
            c.detectChanges();
          });
          this.el.addEventListener("didDismiss", () => {
            this.isCmpOpen = false;
            c.detectChanges();
          });
          proxyOutputs(this, this.el, [
            "ionModalDidPresent",
            "ionModalWillPresent",
            "ionModalWillDismiss",
            "ionModalDidDismiss",
            "ionBreakpointDidChange",
            "didPresent",
            "willPresent",
            "willDismiss",
            "didDismiss"
          ]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonModal2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: IonModal2, selector: "ion-modal", inputs: { animated: "animated", keepContentsMounted: "keepContentsMounted", backdropBreakpoint: "backdropBreakpoint", backdropDismiss: "backdropDismiss", breakpoints: "breakpoints", canDismiss: "canDismiss", cssClass: "cssClass", enterAnimation: "enterAnimation", event: "event", handle: "handle", handleBehavior: "handleBehavior", initialBreakpoint: "initialBreakpoint", isOpen: "isOpen", keyboardClose: "keyboardClose", leaveAnimation: "leaveAnimation", mode: "mode", presentingElement: "presentingElement", showBackdrop: "showBackdrop", translucent: "translucent", trigger: "trigger" }, queries: [{ propertyName: "template", first: true, predicate: TemplateRef, descendants: true }], ngImport: core_exports });
      };
      IonModal = __decorate([
        ProxyCmp({
          inputs: MODAL_INPUTS,
          methods: MODAL_METHODS
        })
        /**
         * @Component extends from @Directive
         * so by defining the inputs here we
         * do not need to re-define them for the
         * lazy loaded popover.
         */
      ], IonModal);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonModal, decorators: [{
        type: Directive,
        args: [{
          selector: "ion-modal",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: MODAL_INPUTS
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      }, propDecorators: { template: [{
        type: ContentChild,
        args: [TemplateRef, { static: false }]
      }] } });
      insertView2 = (views, view, direction) => {
        if (direction === "root") {
          return setRoot(views, view);
        } else if (direction === "forward") {
          return setForward(views, view);
        } else {
          return setBack(views, view);
        }
      };
      setRoot = (views, view) => {
        views = views.filter((v) => v.stackId !== view.stackId);
        views.push(view);
        return views;
      };
      setForward = (views, view) => {
        const index = views.indexOf(view);
        if (index >= 0) {
          views = views.filter((v) => v.stackId !== view.stackId || v.id <= view.id);
        } else {
          views.push(view);
        }
        return views;
      };
      setBack = (views, view) => {
        const index = views.indexOf(view);
        if (index >= 0) {
          return views.filter((v) => v.stackId !== view.stackId || v.id <= view.id);
        } else {
          return setRoot(views, view);
        }
      };
      getUrl2 = (router, activatedRoute) => {
        const urlTree = router.createUrlTree(["."], { relativeTo: activatedRoute });
        return router.serializeUrl(urlTree);
      };
      isTabSwitch = (enteringView, leavingView) => {
        if (!leavingView) {
          return true;
        }
        return enteringView.stackId !== leavingView.stackId;
      };
      computeStackId = (prefixUrl, url) => {
        if (!prefixUrl) {
          return void 0;
        }
        const segments = toSegments(url);
        for (let i = 0; i < segments.length; i++) {
          if (i >= prefixUrl.length) {
            return segments[i];
          }
          if (segments[i] !== prefixUrl[i]) {
            return void 0;
          }
        }
        return void 0;
      };
      toSegments = (path) => {
        return path.split("/").map((s) => s.trim()).filter((s) => s !== "");
      };
      destroyView = (view) => {
        if (view) {
          view.ref.destroy();
          view.unlistenEvents();
        }
      };
      StackController = class {
        containerEl;
        router;
        navCtrl;
        zone;
        location;
        views = [];
        runningTask;
        skipTransition = false;
        tabsPrefix;
        activeView;
        nextId = 0;
        constructor(tabsPrefix, containerEl, router, navCtrl, zone, location2) {
          this.containerEl = containerEl;
          this.router = router;
          this.navCtrl = navCtrl;
          this.zone = zone;
          this.location = location2;
          this.tabsPrefix = tabsPrefix !== void 0 ? toSegments(tabsPrefix) : void 0;
        }
        createView(ref, activatedRoute) {
          const url = getUrl2(this.router, activatedRoute);
          const element2 = ref?.location?.nativeElement;
          const unlistenEvents = bindLifecycleEvents(this.zone, ref.instance, element2);
          return {
            id: this.nextId++,
            stackId: computeStackId(this.tabsPrefix, url),
            unlistenEvents,
            element: element2,
            ref,
            url
          };
        }
        getExistingView(activatedRoute) {
          const activatedUrlKey = getUrl2(this.router, activatedRoute);
          const view = this.views.find((vw) => vw.url === activatedUrlKey);
          if (view) {
            view.ref.changeDetectorRef.reattach();
          }
          return view;
        }
        setActive(enteringView) {
          const consumeResult = this.navCtrl.consumeTransition();
          let { direction, animation, animationBuilder } = consumeResult;
          const leavingView = this.activeView;
          const tabSwitch = isTabSwitch(enteringView, leavingView);
          if (tabSwitch) {
            direction = "back";
            animation = void 0;
          }
          const viewsSnapshot = this.views.slice();
          let currentNavigation;
          const router = this.router;
          if (router.getCurrentNavigation) {
            currentNavigation = router.getCurrentNavigation();
          } else if (router.navigations?.value) {
            currentNavigation = router.navigations.value;
          }
          if (currentNavigation?.extras?.replaceUrl) {
            if (this.views.length > 0) {
              this.views.splice(-1, 1);
            }
          }
          const reused = this.views.includes(enteringView);
          const views = this.insertView(enteringView, direction);
          if (!reused) {
            enteringView.ref.changeDetectorRef.detectChanges();
          }
          const customAnimation = enteringView.animationBuilder;
          if (animationBuilder === void 0 && direction === "back" && !tabSwitch && customAnimation !== void 0) {
            animationBuilder = customAnimation;
          }
          if (leavingView) {
            leavingView.animationBuilder = animationBuilder;
          }
          return this.zone.runOutsideAngular(() => {
            return this.wait(() => {
              if (leavingView) {
                leavingView.ref.changeDetectorRef.detach();
              }
              enteringView.ref.changeDetectorRef.reattach();
              return this.transition(enteringView, leavingView, animation, this.canGoBack(1), false, animationBuilder).then(() => cleanupAsync(enteringView, views, viewsSnapshot, this.location, this.zone)).then(() => ({
                enteringView,
                direction,
                animation,
                tabSwitch
              }));
            });
          });
        }
        canGoBack(deep, stackId = this.getActiveStackId()) {
          return this.getStack(stackId).length > deep;
        }
        pop(deep, stackId = this.getActiveStackId()) {
          return this.zone.run(() => {
            const views = this.getStack(stackId);
            if (views.length <= deep) {
              return Promise.resolve(false);
            }
            const view = views[views.length - deep - 1];
            let url = view.url;
            const viewSavedData = view.savedData;
            if (viewSavedData) {
              const primaryOutlet = viewSavedData.get("primary");
              if (primaryOutlet?.route?._routerState?.snapshot.url) {
                url = primaryOutlet.route._routerState.snapshot.url;
              }
            }
            const { animationBuilder } = this.navCtrl.consumeTransition();
            return this.navCtrl.navigateBack(url, { ...view.savedExtras, animation: animationBuilder }).then(() => true);
          });
        }
        startBackTransition() {
          const leavingView = this.activeView;
          if (leavingView) {
            const views = this.getStack(leavingView.stackId);
            const enteringView = views[views.length - 2];
            const customAnimation = enteringView.animationBuilder;
            return this.wait(() => {
              return this.transition(
                enteringView,
                // entering view
                leavingView,
                // leaving view
                "back",
                this.canGoBack(2),
                true,
                customAnimation
              );
            });
          }
          return Promise.resolve();
        }
        endBackTransition(shouldComplete) {
          if (shouldComplete) {
            this.skipTransition = true;
            this.pop(1);
          } else if (this.activeView) {
            cleanup(this.activeView, this.views, this.views, this.location, this.zone);
          }
        }
        getLastUrl(stackId) {
          const views = this.getStack(stackId);
          return views.length > 0 ? views[views.length - 1] : void 0;
        }
        /**
         * @internal
         */
        getRootUrl(stackId) {
          const views = this.getStack(stackId);
          return views.length > 0 ? views[0] : void 0;
        }
        getActiveStackId() {
          return this.activeView ? this.activeView.stackId : void 0;
        }
        /**
         * @internal
         */
        getActiveView() {
          return this.activeView;
        }
        hasRunningTask() {
          return this.runningTask !== void 0;
        }
        destroy() {
          this.containerEl = void 0;
          this.views.forEach(destroyView);
          this.activeView = void 0;
          this.views = [];
        }
        getStack(stackId) {
          return this.views.filter((v) => v.stackId === stackId);
        }
        insertView(enteringView, direction) {
          this.activeView = enteringView;
          this.views = insertView2(this.views, enteringView, direction);
          return this.views.slice();
        }
        transition(enteringView, leavingView, direction, showGoBack, progressAnimation, animationBuilder) {
          if (this.skipTransition) {
            this.skipTransition = false;
            return Promise.resolve(false);
          }
          if (leavingView === enteringView) {
            return Promise.resolve(false);
          }
          const enteringEl = enteringView ? enteringView.element : void 0;
          const leavingEl = leavingView ? leavingView.element : void 0;
          const containerEl = this.containerEl;
          if (enteringEl && enteringEl !== leavingEl) {
            enteringEl.classList.add("ion-page");
            enteringEl.classList.add("ion-page-invisible");
            if (containerEl.commit) {
              return containerEl.commit(enteringEl, leavingEl, {
                duration: direction === void 0 ? 0 : void 0,
                direction,
                showGoBack,
                progressAnimation,
                animationBuilder
              });
            }
          }
          return Promise.resolve(false);
        }
        async wait(task) {
          if (this.runningTask !== void 0) {
            await this.runningTask;
            this.runningTask = void 0;
          }
          const promise = this.runningTask = task();
          promise.finally(() => this.runningTask = void 0);
          return promise;
        }
      };
      cleanupAsync = (activeRoute, views, viewsSnapshot, location2, zone) => {
        if (typeof requestAnimationFrame === "function") {
          return new Promise((resolve) => {
            requestAnimationFrame(() => {
              cleanup(activeRoute, views, viewsSnapshot, location2, zone);
              resolve();
            });
          });
        }
        return Promise.resolve();
      };
      cleanup = (activeRoute, views, viewsSnapshot, location2, zone) => {
        zone.run(() => viewsSnapshot.filter((view) => !views.includes(view)).forEach(destroyView));
        views.forEach((view) => {
          const locationWithoutParams = location2.path().split("?")[0];
          const locationWithoutFragment = locationWithoutParams.split("#")[0];
          if (view !== activeRoute && view.url !== locationWithoutFragment) {
            const element2 = view.element;
            element2.setAttribute("aria-hidden", "true");
            element2.classList.add("ion-page-hidden");
            view.ref.changeDetectorRef.detach();
          }
        });
      };
      IonRouterOutlet = class _IonRouterOutlet {
        parentOutlet;
        nativeEl;
        activatedView = null;
        tabsPrefix;
        _swipeGesture;
        stackCtrl;
        // Maintain map of activated route proxies for each component instance
        proxyMap = /* @__PURE__ */ new WeakMap();
        // Keep the latest activated route in a subject for the proxy routes to switch map to
        currentActivatedRoute$ = new BehaviorSubject(null);
        activated = null;
        /** @internal */
        get activatedComponentRef() {
          return this.activated;
        }
        _activatedRoute = null;
        /**
         * The name of the outlet
         */
        name = PRIMARY_OUTLET;
        /** @internal */
        stackWillChange = new EventEmitter();
        /** @internal */
        stackDidChange = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-rename
        activateEvents = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-rename
        deactivateEvents = new EventEmitter();
        parentContexts = inject(ChildrenOutletContexts);
        location = inject(ViewContainerRef);
        environmentInjector = inject(EnvironmentInjector);
        inputBinder = inject(INPUT_BINDER2, { optional: true });
        /** @nodoc */
        supportsBindingToComponentInputs = true;
        // Ionic providers
        config = inject(Config2);
        navCtrl = inject(NavController);
        set animation(animation) {
          this.nativeEl.animation = animation;
        }
        set animated(animated) {
          this.nativeEl.animated = animated;
        }
        set swipeGesture(swipe) {
          this._swipeGesture = swipe;
          this.nativeEl.swipeHandler = swipe ? {
            canStart: () => this.stackCtrl.canGoBack(1) && !this.stackCtrl.hasRunningTask(),
            onStart: () => this.stackCtrl.startBackTransition(),
            onEnd: (shouldContinue) => this.stackCtrl.endBackTransition(shouldContinue)
          } : void 0;
        }
        constructor(name, tabs, commonLocation, elementRef, router, zone, activatedRoute, parentOutlet) {
          this.parentOutlet = parentOutlet;
          this.nativeEl = elementRef.nativeElement;
          this.name = name || PRIMARY_OUTLET;
          this.tabsPrefix = tabs === "true" ? getUrl2(router, activatedRoute) : void 0;
          this.stackCtrl = new StackController(this.tabsPrefix, this.nativeEl, router, this.navCtrl, zone, commonLocation);
          this.parentContexts.onChildOutletCreated(this.name, this);
        }
        ngOnDestroy() {
          this.stackCtrl.destroy();
          this.inputBinder?.unsubscribeFromRouteData(this);
        }
        getContext() {
          return this.parentContexts.getContext(this.name);
        }
        ngOnInit() {
          this.initializeOutletWithName();
        }
        // Note: Ionic deviates from the Angular Router implementation here
        initializeOutletWithName() {
          if (!this.activated) {
            const context2 = this.getContext();
            if (context2?.route) {
              this.activateWith(context2.route, context2.injector);
            }
          }
          new Promise((resolve) => componentOnReady(this.nativeEl, resolve)).then(() => {
            if (this._swipeGesture === void 0) {
              this.swipeGesture = this.config.getBoolean("swipeBackEnabled", this.nativeEl.mode === "ios");
            }
          });
        }
        get isActivated() {
          return !!this.activated;
        }
        get component() {
          if (!this.activated) {
            throw new Error("Outlet is not activated");
          }
          return this.activated.instance;
        }
        get activatedRoute() {
          if (!this.activated) {
            throw new Error("Outlet is not activated");
          }
          return this._activatedRoute;
        }
        get activatedRouteData() {
          if (this._activatedRoute) {
            return this._activatedRoute.snapshot.data;
          }
          return {};
        }
        /**
         * Called when the `RouteReuseStrategy` instructs to detach the subtree
         */
        detach() {
          throw new Error("incompatible reuse strategy");
        }
        /**
         * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        attach(_ref, _activatedRoute) {
          throw new Error("incompatible reuse strategy");
        }
        deactivate() {
          if (this.activated) {
            if (this.activatedView) {
              const context2 = this.getContext();
              this.activatedView.savedData = new Map(context2.children["contexts"]);
              const primaryOutlet = this.activatedView.savedData.get("primary");
              if (primaryOutlet && context2.route) {
                primaryOutlet.route = { ...context2.route };
              }
              this.activatedView.savedExtras = {};
              if (context2.route) {
                const contextSnapshot = context2.route.snapshot;
                this.activatedView.savedExtras.queryParams = contextSnapshot.queryParams;
                this.activatedView.savedExtras.fragment = contextSnapshot.fragment;
              }
            }
            const c = this.component;
            this.activatedView = null;
            this.activated = null;
            this._activatedRoute = null;
            this.deactivateEvents.emit(c);
          }
        }
        activateWith(activatedRoute, environmentInjector) {
          if (this.isActivated) {
            throw new Error("Cannot activate an already activated outlet");
          }
          this._activatedRoute = activatedRoute;
          let cmpRef;
          let enteringView = this.stackCtrl.getExistingView(activatedRoute);
          if (enteringView) {
            cmpRef = this.activated = enteringView.ref;
            const saved = enteringView.savedData;
            if (saved) {
              const context2 = this.getContext();
              context2.children["contexts"] = saved;
            }
            this.updateActivatedRouteProxy(cmpRef.instance, activatedRoute);
          } else {
            const snapshot = activatedRoute._futureSnapshot;
            const childContexts = this.parentContexts.getOrCreateContext(this.name).children;
            const component$ = new BehaviorSubject(null);
            const activatedRouteProxy = this.createActivatedRouteProxy(component$, activatedRoute);
            const injector = new OutletInjector2(activatedRouteProxy, childContexts, this.location.injector);
            const component = snapshot.routeConfig.component ?? snapshot.component;
            cmpRef = this.activated = this.outletContent.createComponent(component, {
              index: this.outletContent.length,
              injector,
              environmentInjector: environmentInjector ?? this.environmentInjector
            });
            component$.next(cmpRef.instance);
            enteringView = this.stackCtrl.createView(this.activated, activatedRoute);
            this.proxyMap.set(cmpRef.instance, activatedRouteProxy);
            this.currentActivatedRoute$.next({ component: cmpRef.instance, activatedRoute });
          }
          this.inputBinder?.bindActivatedRouteToOutletComponent(this);
          this.activatedView = enteringView;
          this.navCtrl.setTopOutlet(this);
          const leavingView = this.stackCtrl.getActiveView();
          this.stackWillChange.emit({
            enteringView,
            tabSwitch: isTabSwitch(enteringView, leavingView)
          });
          this.stackCtrl.setActive(enteringView).then((data) => {
            this.activateEvents.emit(cmpRef.instance);
            this.stackDidChange.emit(data);
          });
        }
        /**
         * Returns `true` if there are pages in the stack to go back.
         */
        canGoBack(deep = 1, stackId) {
          return this.stackCtrl.canGoBack(deep, stackId);
        }
        /**
         * Resolves to `true` if it the outlet was able to sucessfully pop the last N pages.
         */
        pop(deep = 1, stackId) {
          return this.stackCtrl.pop(deep, stackId);
        }
        /**
         * Returns the URL of the active page of each stack.
         */
        getLastUrl(stackId) {
          const active = this.stackCtrl.getLastUrl(stackId);
          return active ? active.url : void 0;
        }
        /**
         * Returns the RouteView of the active page of each stack.
         * @internal
         */
        getLastRouteView(stackId) {
          return this.stackCtrl.getLastUrl(stackId);
        }
        /**
         * Returns the root view in the tab stack.
         * @internal
         */
        getRootView(stackId) {
          return this.stackCtrl.getRootUrl(stackId);
        }
        /**
         * Returns the active stack ID. In the context of ion-tabs, it means the active tab.
         */
        getActiveStackId() {
          return this.stackCtrl.getActiveStackId();
        }
        /**
         * Since the activated route can change over the life time of a component in an ion router outlet, we create
         * a proxy so that we can update the values over time as a user navigates back to components already in the stack.
         */
        createActivatedRouteProxy(component$, activatedRoute) {
          const proxy = new ActivatedRoute();
          proxy._futureSnapshot = activatedRoute._futureSnapshot;
          proxy._routerState = activatedRoute._routerState;
          proxy.snapshot = activatedRoute.snapshot;
          proxy.outlet = activatedRoute.outlet;
          proxy.component = activatedRoute.component;
          proxy._paramMap = this.proxyObservable(component$, "paramMap");
          proxy._queryParamMap = this.proxyObservable(component$, "queryParamMap");
          proxy.url = this.proxyObservable(component$, "url");
          proxy.params = this.proxyObservable(component$, "params");
          proxy.queryParams = this.proxyObservable(component$, "queryParams");
          proxy.fragment = this.proxyObservable(component$, "fragment");
          proxy.data = this.proxyObservable(component$, "data");
          return proxy;
        }
        /**
         * Create a wrapped observable that will switch to the latest activated route matched by the given component
         */
        proxyObservable(component$, path) {
          return component$.pipe(
            // First wait until the component instance is pushed
            filter((component) => !!component),
            switchMap((component) => this.currentActivatedRoute$.pipe(filter((current) => current !== null && current.component === component), switchMap((current) => current && current.activatedRoute[path]), distinctUntilChanged()))
          );
        }
        /**
         * Updates the activated route proxy for the given component to the new incoming router state
         */
        updateActivatedRouteProxy(component, activatedRoute) {
          const proxy = this.proxyMap.get(component);
          if (!proxy) {
            throw new Error(`Could not find activated route proxy for view`);
          }
          proxy._futureSnapshot = activatedRoute._futureSnapshot;
          proxy._routerState = activatedRoute._routerState;
          proxy.snapshot = activatedRoute.snapshot;
          proxy.outlet = activatedRoute.outlet;
          proxy.component = activatedRoute.component;
          this.currentActivatedRoute$.next({ component, activatedRoute });
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _IonRouterOutlet, deps: [{ token: "name", attribute: true }, { token: "tabs", attribute: true, optional: true }, { token: Location }, { token: ElementRef }, { token: Router }, { token: NgZone }, { token: ActivatedRoute }, { token: _IonRouterOutlet, optional: true, skipSelf: true }], target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: _IonRouterOutlet, selector: "ion-router-outlet", inputs: { animated: "animated", animation: "animation", mode: "mode", swipeGesture: "swipeGesture", name: "name" }, outputs: { stackWillChange: "stackWillChange", stackDidChange: "stackDidChange", activateEvents: "activate", deactivateEvents: "deactivate" }, exportAs: ["outlet"], ngImport: core_exports });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRouterOutlet, decorators: [{
        type: Directive,
        args: [{
          selector: "ion-router-outlet",
          exportAs: "outlet",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["animated", "animation", "mode", "swipeGesture"]
        }]
      }], ctorParameters: function() {
        return [{ type: void 0, decorators: [{
          type: Attribute,
          args: ["name"]
        }] }, { type: void 0, decorators: [{
          type: Optional
        }, {
          type: Attribute,
          args: ["tabs"]
        }] }, { type: Location }, { type: ElementRef }, { type: Router }, { type: NgZone }, { type: ActivatedRoute }, { type: IonRouterOutlet, decorators: [{
          type: SkipSelf
        }, {
          type: Optional
        }] }];
      }, propDecorators: { name: [{
        type: Input
      }], stackWillChange: [{
        type: Output
      }], stackDidChange: [{
        type: Output
      }], activateEvents: [{
        type: Output,
        args: ["activate"]
      }], deactivateEvents: [{
        type: Output,
        args: ["deactivate"]
      }] } });
      OutletInjector2 = class {
        route;
        childContexts;
        parent;
        constructor(route, childContexts, parent) {
          this.route = route;
          this.childContexts = childContexts;
          this.parent = parent;
        }
        get(token, notFoundValue) {
          if (token === ActivatedRoute) {
            return this.route;
          }
          if (token === ChildrenOutletContexts) {
            return this.childContexts;
          }
          return this.parent.get(token, notFoundValue);
        }
      };
      INPUT_BINDER2 = new InjectionToken("");
      RoutedComponentInputBinder2 = class _RoutedComponentInputBinder {
        outletDataSubscriptions = /* @__PURE__ */ new Map();
        bindActivatedRouteToOutletComponent(outlet) {
          this.unsubscribeFromRouteData(outlet);
          this.subscribeToRouteData(outlet);
        }
        unsubscribeFromRouteData(outlet) {
          this.outletDataSubscriptions.get(outlet)?.unsubscribe();
          this.outletDataSubscriptions.delete(outlet);
        }
        subscribeToRouteData(outlet) {
          const { activatedRoute } = outlet;
          const dataSubscription = combineLatest([activatedRoute.queryParams, activatedRoute.params, activatedRoute.data]).pipe(switchMap(([queryParams, params, data], index) => {
            data = { ...queryParams, ...params, ...data };
            if (index === 0) {
              return of(data);
            }
            return Promise.resolve(data);
          })).subscribe((data) => {
            if (!outlet.isActivated || !outlet.activatedComponentRef || outlet.activatedRoute !== activatedRoute || activatedRoute.component === null) {
              this.unsubscribeFromRouteData(outlet);
              return;
            }
            const mirror = reflectComponentType(activatedRoute.component);
            if (!mirror) {
              this.unsubscribeFromRouteData(outlet);
              return;
            }
            for (const { templateName } of mirror.inputs) {
              outlet.activatedComponentRef.setInput(templateName, data[templateName]);
            }
          });
          this.outletDataSubscriptions.set(outlet, dataSubscription);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _RoutedComponentInputBinder, deps: [], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _RoutedComponentInputBinder });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: RoutedComponentInputBinder2, decorators: [{
        type: Injectable
      }] });
      provideComponentInputBinding = () => {
        return {
          provide: INPUT_BINDER2,
          useFactory: componentInputBindingFactory,
          deps: [Router]
        };
      };
      BACK_BUTTON_INPUTS = ["color", "defaultHref", "disabled", "icon", "mode", "routerAnimation", "text", "type"];
      IonBackButton = class IonBackButton2 {
        routerOutlet;
        navCtrl;
        config;
        r;
        z;
        el;
        constructor(routerOutlet, navCtrl, config4, r, z, c) {
          this.routerOutlet = routerOutlet;
          this.navCtrl = navCtrl;
          this.config = config4;
          this.r = r;
          this.z = z;
          c.detach();
          this.el = this.r.nativeElement;
        }
        /**
         * @internal
         */
        onClick(ev) {
          const defaultHref = this.defaultHref || this.config.get("backButtonDefaultHref");
          if (this.routerOutlet?.canGoBack()) {
            this.navCtrl.setDirection("back", void 0, void 0, this.routerAnimation);
            this.routerOutlet.pop();
            ev.preventDefault();
          } else if (defaultHref != null) {
            this.navCtrl.navigateBack(defaultHref, { animation: this.routerAnimation });
            ev.preventDefault();
          }
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonBackButton2, deps: [{ token: IonRouterOutlet, optional: true }, { token: NavController }, { token: Config2 }, { token: ElementRef }, { token: NgZone }, { token: ChangeDetectorRef }], target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: IonBackButton2, inputs: { color: "color", defaultHref: "defaultHref", disabled: "disabled", icon: "icon", mode: "mode", routerAnimation: "routerAnimation", text: "text", type: "type" }, host: { listeners: { "click": "onClick($event)" } }, ngImport: core_exports });
      };
      IonBackButton = __decorate([
        ProxyCmp({
          inputs: BACK_BUTTON_INPUTS
        })
      ], IonBackButton);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonBackButton, decorators: [{
        type: Directive,
        args: [{
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: BACK_BUTTON_INPUTS
        }]
      }], ctorParameters: function() {
        return [{ type: IonRouterOutlet, decorators: [{
          type: Optional
        }] }, { type: NavController }, { type: Config2 }, { type: ElementRef }, { type: NgZone }, { type: ChangeDetectorRef }];
      }, propDecorators: { onClick: [{
        type: HostListener,
        args: ["click", ["$event"]]
      }] } });
      RouterLinkDelegateDirective = class _RouterLinkDelegateDirective {
        locationStrategy;
        navCtrl;
        elementRef;
        router;
        routerLink;
        routerDirection = "forward";
        routerAnimation;
        constructor(locationStrategy, navCtrl, elementRef, router, routerLink) {
          this.locationStrategy = locationStrategy;
          this.navCtrl = navCtrl;
          this.elementRef = elementRef;
          this.router = router;
          this.routerLink = routerLink;
        }
        ngOnInit() {
          this.updateTargetUrlAndHref();
        }
        ngOnChanges() {
          this.updateTargetUrlAndHref();
        }
        updateTargetUrlAndHref() {
          if (this.routerLink?.urlTree) {
            const href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.routerLink.urlTree));
            this.elementRef.nativeElement.href = href;
          }
        }
        /**
         * @internal
         */
        onClick(ev) {
          this.navCtrl.setDirection(this.routerDirection, void 0, void 0, this.routerAnimation);
          ev.preventDefault();
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _RouterLinkDelegateDirective, deps: [{ token: LocationStrategy }, { token: NavController }, { token: ElementRef }, { token: Router }, { token: RouterLink, optional: true }], target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: _RouterLinkDelegateDirective, selector: ":not(a):not(area)[routerLink]", inputs: { routerDirection: "routerDirection", routerAnimation: "routerAnimation" }, host: { listeners: { "click": "onClick($event)" } }, usesOnChanges: true, ngImport: core_exports });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: RouterLinkDelegateDirective, decorators: [{
        type: Directive,
        args: [{
          selector: ":not(a):not(area)[routerLink]"
        }]
      }], ctorParameters: function() {
        return [{ type: LocationStrategy }, { type: NavController }, { type: ElementRef }, { type: Router }, { type: RouterLink, decorators: [{
          type: Optional
        }] }];
      }, propDecorators: { routerDirection: [{
        type: Input
      }], routerAnimation: [{
        type: Input
      }], onClick: [{
        type: HostListener,
        args: ["click", ["$event"]]
      }] } });
      RouterLinkWithHrefDelegateDirective = class _RouterLinkWithHrefDelegateDirective {
        locationStrategy;
        navCtrl;
        elementRef;
        router;
        routerLink;
        routerDirection = "forward";
        routerAnimation;
        constructor(locationStrategy, navCtrl, elementRef, router, routerLink) {
          this.locationStrategy = locationStrategy;
          this.navCtrl = navCtrl;
          this.elementRef = elementRef;
          this.router = router;
          this.routerLink = routerLink;
        }
        ngOnInit() {
          this.updateTargetUrlAndHref();
        }
        ngOnChanges() {
          this.updateTargetUrlAndHref();
        }
        updateTargetUrlAndHref() {
          if (this.routerLink?.urlTree) {
            const href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.routerLink.urlTree));
            this.elementRef.nativeElement.href = href;
          }
        }
        /**
         * @internal
         */
        onClick() {
          this.navCtrl.setDirection(this.routerDirection, void 0, void 0, this.routerAnimation);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _RouterLinkWithHrefDelegateDirective, deps: [{ token: LocationStrategy }, { token: NavController }, { token: ElementRef }, { token: Router }, { token: RouterLink, optional: true }], target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: _RouterLinkWithHrefDelegateDirective, selector: "a[routerLink],area[routerLink]", inputs: { routerDirection: "routerDirection", routerAnimation: "routerAnimation" }, host: { listeners: { "click": "onClick()" } }, usesOnChanges: true, ngImport: core_exports });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: RouterLinkWithHrefDelegateDirective, decorators: [{
        type: Directive,
        args: [{
          selector: "a[routerLink],area[routerLink]"
        }]
      }], ctorParameters: function() {
        return [{ type: LocationStrategy }, { type: NavController }, { type: ElementRef }, { type: Router }, { type: RouterLink, decorators: [{
          type: Optional
        }] }];
      }, propDecorators: { routerDirection: [{
        type: Input
      }], routerAnimation: [{
        type: Input
      }], onClick: [{
        type: HostListener,
        args: ["click"]
      }] } });
      NAV_INPUTS = ["animated", "animation", "root", "rootParams", "swipeGesture"];
      NAV_METHODS = [
        "push",
        "insert",
        "insertPages",
        "pop",
        "popTo",
        "popToRoot",
        "removeIndex",
        "setRoot",
        "setPages",
        "getActive",
        "getByIndex",
        "canGoBack",
        "getPrevious"
      ];
      IonNav = class IonNav2 {
        z;
        el;
        constructor(ref, environmentInjector, injector, angularDelegate, z, c) {
          this.z = z;
          c.detach();
          this.el = ref.nativeElement;
          ref.nativeElement.delegate = angularDelegate.create(environmentInjector, injector);
          proxyOutputs(this, this.el, ["ionNavDidChange", "ionNavWillChange"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonNav2, deps: [{ token: ElementRef }, { token: EnvironmentInjector }, { token: Injector }, { token: AngularDelegate }, { token: NgZone }, { token: ChangeDetectorRef }], target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: IonNav2, inputs: { animated: "animated", animation: "animation", root: "root", rootParams: "rootParams", swipeGesture: "swipeGesture" }, ngImport: core_exports });
      };
      IonNav = __decorate([
        ProxyCmp({
          inputs: NAV_INPUTS,
          methods: NAV_METHODS
        })
      ], IonNav);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonNav, decorators: [{
        type: Directive,
        args: [{
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: NAV_INPUTS
        }]
      }], ctorParameters: function() {
        return [{ type: ElementRef }, { type: EnvironmentInjector }, { type: Injector }, { type: AngularDelegate }, { type: NgZone }, { type: ChangeDetectorRef }];
      } });
      IonTabs = class _IonTabs {
        navCtrl;
        tabsInner;
        /**
         * Emitted before the tab view is changed.
         */
        ionTabsWillChange = new EventEmitter();
        /**
         * Emitted after the tab view is changed.
         */
        ionTabsDidChange = new EventEmitter();
        tabBarSlot = "bottom";
        constructor(navCtrl) {
          this.navCtrl = navCtrl;
        }
        ngAfterContentInit() {
          this.detectSlotChanges();
        }
        ngAfterContentChecked() {
          this.detectSlotChanges();
        }
        /**
         * @internal
         */
        onStackWillChange({ enteringView, tabSwitch }) {
          const stackId = enteringView.stackId;
          if (tabSwitch && stackId !== void 0) {
            this.ionTabsWillChange.emit({ tab: stackId });
          }
        }
        /**
         * @internal
         */
        onStackDidChange({ enteringView, tabSwitch }) {
          const stackId = enteringView.stackId;
          if (tabSwitch && stackId !== void 0) {
            if (this.tabBar) {
              this.tabBar.selectedTab = stackId;
            }
            this.ionTabsDidChange.emit({ tab: stackId });
          }
        }
        /**
         * When a tab button is clicked, there are several scenarios:
         * 1. If the selected tab is currently active (the tab button has been clicked
         *    again), then it should go to the root view for that tab.
         *
         *   a. Get the saved root view from the router outlet. If the saved root view
         *      matches the tabRootUrl, set the route view to this view including the
         *      navigation extras.
         *   b. If the saved root view from the router outlet does
         *      not match, navigate to the tabRootUrl. No navigation extras are
         *      included.
         *
         * 2. If the current tab tab is not currently selected, get the last route
         *    view from the router outlet.
         *
         *   a. If the last route view exists, navigate to that view including any
         *      navigation extras
         *   b. If the last route view doesn't exist, then navigate
         *      to the default tabRootUrl
         */
        select(tabOrEvent) {
          const isTabString = typeof tabOrEvent === "string";
          const tab = isTabString ? tabOrEvent : tabOrEvent.detail.tab;
          const alreadySelected = this.outlet.getActiveStackId() === tab;
          const tabRootUrl = `${this.outlet.tabsPrefix}/${tab}`;
          if (!isTabString) {
            tabOrEvent.stopPropagation();
          }
          if (alreadySelected) {
            const activeStackId = this.outlet.getActiveStackId();
            const activeView = this.outlet.getLastRouteView(activeStackId);
            if (activeView?.url === tabRootUrl) {
              return;
            }
            const rootView = this.outlet.getRootView(tab);
            const navigationExtras = rootView && tabRootUrl === rootView.url && rootView.savedExtras;
            return this.navCtrl.navigateRoot(tabRootUrl, {
              ...navigationExtras,
              animated: true,
              animationDirection: "back"
            });
          } else {
            const lastRoute = this.outlet.getLastRouteView(tab);
            const url = lastRoute?.url || tabRootUrl;
            const navigationExtras = lastRoute?.savedExtras;
            return this.navCtrl.navigateRoot(url, {
              ...navigationExtras,
              animated: true,
              animationDirection: "back"
            });
          }
        }
        getSelected() {
          return this.outlet.getActiveStackId();
        }
        /**
         * Detects changes to the slot attribute of the tab bar.
         *
         * If the slot attribute has changed, then the tab bar
         * should be relocated to the new slot position.
         */
        detectSlotChanges() {
          this.tabBars.forEach((tabBar) => {
            const currentSlot = tabBar.el.getAttribute("slot");
            if (currentSlot !== this.tabBarSlot) {
              this.tabBarSlot = currentSlot;
              this.relocateTabBar();
            }
          });
        }
        /**
         * Relocates the tab bar to the new slot position.
         */
        relocateTabBar() {
          const tabBar = this.tabBar.el;
          if (this.tabBarSlot === "top") {
            this.tabsInner.nativeElement.before(tabBar);
          } else {
            this.tabsInner.nativeElement.after(tabBar);
          }
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _IonTabs, deps: [{ token: NavController }], target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: _IonTabs, selector: "ion-tabs", outputs: { ionTabsWillChange: "ionTabsWillChange", ionTabsDidChange: "ionTabsDidChange" }, host: { listeners: { "ionTabButtonClick": "select($event)" } }, viewQueries: [{ propertyName: "tabsInner", first: true, predicate: ["tabsInner"], descendants: true, read: ElementRef, static: true }], ngImport: core_exports });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonTabs, decorators: [{
        type: Directive,
        args: [{
          selector: "ion-tabs"
        }]
      }], ctorParameters: function() {
        return [{ type: NavController }];
      }, propDecorators: { tabsInner: [{
        type: ViewChild,
        args: ["tabsInner", { read: ElementRef, static: true }]
      }], ionTabsWillChange: [{
        type: Output
      }], ionTabsDidChange: [{
        type: Output
      }], select: [{
        type: HostListener,
        args: ["ionTabButtonClick", ["$event"]]
      }] } });
      raf2 = (h2) => {
        if (typeof __zone_symbol__requestAnimationFrame === "function") {
          return __zone_symbol__requestAnimationFrame(h2);
        }
        if (typeof requestAnimationFrame === "function") {
          return requestAnimationFrame(h2);
        }
        return setTimeout(h2);
      };
      ValueAccessor = class _ValueAccessor {
        injector;
        elementRef;
        onChange = () => {
        };
        onTouched = () => {
        };
        lastValue;
        statusChanges;
        constructor(injector, elementRef) {
          this.injector = injector;
          this.elementRef = elementRef;
        }
        writeValue(value) {
          this.elementRef.nativeElement.value = this.lastValue = value;
          setIonicClasses(this.elementRef);
        }
        /**
         * Notifies the ControlValueAccessor of a change in the value of the control.
         *
         * This is called by each of the ValueAccessor directives when we want to update
         * the status and validity of the form control. For example with text components this
         * is called when the ionInput event is fired. For select components this is called
         * when the ionChange event is fired.
         *
         * This also updates the Ionic form status classes on the element.
         *
         * @param el The component element.
         * @param value The new value of the control.
         */
        handleValueChange(el, value) {
          if (el === this.elementRef.nativeElement) {
            if (value !== this.lastValue) {
              this.lastValue = value;
              this.onChange(value);
            }
            setIonicClasses(this.elementRef);
          }
        }
        _handleBlurEvent(el) {
          if (el === this.elementRef.nativeElement) {
            this.onTouched();
            setIonicClasses(this.elementRef);
          }
        }
        registerOnChange(fn2) {
          this.onChange = fn2;
        }
        registerOnTouched(fn2) {
          this.onTouched = fn2;
        }
        setDisabledState(isDisabled) {
          this.elementRef.nativeElement.disabled = isDisabled;
        }
        ngOnDestroy() {
          if (this.statusChanges) {
            this.statusChanges.unsubscribe();
          }
        }
        ngAfterViewInit() {
          let ngControl;
          try {
            ngControl = this.injector.get(NgControl);
          } catch {
          }
          if (!ngControl) {
            return;
          }
          if (ngControl.statusChanges) {
            this.statusChanges = ngControl.statusChanges.subscribe(() => setIonicClasses(this.elementRef));
          }
          const formControl = ngControl.control;
          if (formControl) {
            const methodsToPatch = ["markAsTouched", "markAllAsTouched", "markAsUntouched", "markAsDirty", "markAsPristine"];
            methodsToPatch.forEach((method) => {
              if (typeof formControl[method] !== "undefined") {
                const oldFn = formControl[method].bind(formControl);
                formControl[method] = (...params) => {
                  oldFn(...params);
                  setIonicClasses(this.elementRef);
                };
              }
            });
          }
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _ValueAccessor, deps: [{ token: Injector }, { token: ElementRef }], target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: _ValueAccessor, host: { listeners: { "ionBlur": "_handleBlurEvent($event.target)" } }, ngImport: core_exports });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: ValueAccessor, decorators: [{
        type: Directive
      }], ctorParameters: function() {
        return [{ type: Injector }, { type: ElementRef }];
      }, propDecorators: { _handleBlurEvent: [{
        type: HostListener,
        args: ["ionBlur", ["$event.target"]]
      }] } });
      setIonicClasses = (element2) => {
        raf2(() => {
          const input2 = element2.nativeElement;
          const hasValue = input2.value != null && input2.value.toString().length > 0;
          const classes = getClasses(input2);
          setClasses(input2, classes);
          const item = input2.closest("ion-item");
          if (item) {
            if (hasValue) {
              setClasses(item, [...classes, "item-has-value"]);
            } else {
              setClasses(item, classes);
            }
          }
        });
      };
      getClasses = (element2) => {
        const classList = element2.classList;
        const classes = [];
        for (let i = 0; i < classList.length; i++) {
          const item = classList.item(i);
          if (item !== null && startsWith(item, "ng-")) {
            classes.push(`ion-${item.substring(3)}`);
          }
        }
        return classes;
      };
      setClasses = (element2, classes) => {
        const classList = element2.classList;
        classList.remove("ion-valid", "ion-invalid", "ion-touched", "ion-untouched", "ion-dirty", "ion-pristine");
        classList.add(...classes);
      };
      startsWith = (input2, search) => {
        return input2.substring(0, search.length) === search;
      };
      IonicRouteStrategy = class {
        /**
         * Whether the given route should detach for later reuse.
         */
        shouldDetach(_route) {
          return false;
        }
        /**
         * Returns `false`, meaning the route (and its subtree) is never reattached
         */
        shouldAttach(_route) {
          return false;
        }
        /**
         * A no-op; the route is never stored since this strategy never detaches routes for later re-use.
         */
        store(_route, _detachedTree) {
          return;
        }
        /**
         * Returns `null` because this strategy does not store routes for later re-use.
         */
        retrieve(_route) {
          return null;
        }
        /**
         * Determines if a route should be reused.
         * This strategy returns `true` when the future route config and
         * current route config are identical and all route parameters are identical.
         */
        shouldReuseRoute(future, curr) {
          if (future.routeConfig !== curr.routeConfig) {
            return false;
          }
          const futureParams = future.params;
          const currentParams = curr.params;
          const keysA = Object.keys(futureParams);
          const keysB = Object.keys(currentParams);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (const key of keysA) {
            if (currentParams[key] !== futureParams[key]) {
              return false;
            }
          }
          return true;
        }
      };
      OverlayBaseController = class {
        ctrl;
        constructor(ctrl) {
          this.ctrl = ctrl;
        }
        /**
         * Creates a new overlay
         */
        create(opts) {
          return this.ctrl.create(opts || {});
        }
        /**
         * When `id` is not provided, it dismisses the top overlay.
         */
        dismiss(data, role, id) {
          return this.ctrl.dismiss(data, role, id);
        }
        /**
         * Returns the top overlay.
         */
        getTop() {
          return this.ctrl.getTop();
        }
      };
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/index-a5d50daf.js
  var win, doc;
  var init_index_a5d50daf = __esm({
    "node_modules/@ionic/core/dist/esm-es5/index-a5d50daf.js"() {
      win = typeof window !== "undefined" ? window : void 0;
      doc = typeof document !== "undefined" ? document : void 0;
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/animation-eab5a4ca.js
  var animationPrefix, getAnimationPrefix, setStyleProperty, addClassToArray, createAnimation;
  var init_animation_eab5a4ca = __esm({
    "node_modules/@ionic/core/dist/esm-es5/animation-eab5a4ca.js"() {
      init_tslib_es6();
      init_index_a5d50daf();
      getAnimationPrefix = function(r) {
        if (animationPrefix === void 0) {
          var n = r.style.animationName !== void 0;
          var e2 = r.style.webkitAnimationName !== void 0;
          animationPrefix = !n && e2 ? "-webkit-" : "";
        }
        return animationPrefix;
      };
      setStyleProperty = function(r, n, e2) {
        var i = n.startsWith("animation") ? getAnimationPrefix(r) : "";
        r.style.setProperty(i + n, e2);
      };
      addClassToArray = function(r, n) {
        if (r === void 0) {
          r = [];
        }
        if (n !== void 0) {
          var e2 = Array.isArray(n) ? n : [n];
          return __spreadArray(__spreadArray([], r, true), e2, true);
        }
        return r;
      };
      createAnimation = function(r) {
        var n;
        var e2;
        var i;
        var t;
        var a;
        var f;
        var u2 = [];
        var o = [];
        var v = [];
        var d = false;
        var c;
        var s = {};
        var l = [];
        var y = [];
        var m = {};
        var p = 0;
        var A = false;
        var g = false;
        var C;
        var b;
        var _;
        var P = true;
        var S = false;
        var T = true;
        var x;
        var E = false;
        var w = r;
        var h2 = [];
        var k = [];
        var R = [];
        var D = [];
        var F = [];
        var W = [];
        var I = [];
        var K = [];
        var M = [];
        var j = [];
        var q = [];
        var z = typeof AnimationEffect === "function" || win !== void 0 && typeof win.AnimationEffect === "function";
        var B = typeof Element === "function" && typeof Element.prototype.animate === "function" && z;
        var G = function() {
          return q;
        };
        var H2 = function(r2) {
          F.forEach(function(n2) {
            n2.destroy(r2);
          });
          J(r2);
          D.length = 0;
          F.length = 0;
          u2.length = 0;
          V();
          d = false;
          T = true;
          return x;
        };
        var J = function(r2) {
          X();
          if (r2) {
            Y();
          }
        };
        var L = function() {
          A = false;
          g = false;
          T = true;
          C = void 0;
          b = void 0;
          _ = void 0;
          p = 0;
          S = false;
          P = true;
          E = false;
        };
        var N = function() {
          return p !== 0 && !E;
        };
        var O = function(r2, n2) {
          var e3 = n2.findIndex(function(n3) {
            return n3.c === r2;
          });
          if (e3 > -1) {
            n2.splice(e3, 1);
          }
        };
        var Q = function(r2, n2) {
          R.push({ c: r2, o: n2 });
          return x;
        };
        var U = function(r2, n2) {
          var e3 = (n2 === null || n2 === void 0 ? void 0 : n2.oneTimeCallback) ? k : h2;
          e3.push({ c: r2, o: n2 });
          return x;
        };
        var V = function() {
          h2.length = 0;
          k.length = 0;
          return x;
        };
        var X = function() {
          if (B) {
            q.forEach(function(r2) {
              r2.cancel();
            });
            q.length = 0;
          }
        };
        var Y = function() {
          W.forEach(function(r2) {
            if (r2 === null || r2 === void 0 ? void 0 : r2.parentNode) {
              r2.parentNode.removeChild(r2);
            }
          });
          W.length = 0;
        };
        var Z = function(r2) {
          I.push(r2);
          return x;
        };
        var $ = function(r2) {
          K.push(r2);
          return x;
        };
        var rr = function(r2) {
          M.push(r2);
          return x;
        };
        var nr = function(r2) {
          j.push(r2);
          return x;
        };
        var er = function(r2) {
          o = addClassToArray(o, r2);
          return x;
        };
        var ir = function(r2) {
          v = addClassToArray(v, r2);
          return x;
        };
        var tr = function(r2) {
          if (r2 === void 0) {
            r2 = {};
          }
          s = r2;
          return x;
        };
        var ar = function(r2) {
          if (r2 === void 0) {
            r2 = [];
          }
          for (var n2 = 0, e3 = r2; n2 < e3.length; n2++) {
            var i2 = e3[n2];
            s[i2] = "";
          }
          return x;
        };
        var fr = function(r2) {
          l = addClassToArray(l, r2);
          return x;
        };
        var ur = function(r2) {
          y = addClassToArray(y, r2);
          return x;
        };
        var or = function(r2) {
          if (r2 === void 0) {
            r2 = {};
          }
          m = r2;
          return x;
        };
        var vr = function(r2) {
          if (r2 === void 0) {
            r2 = [];
          }
          for (var n2 = 0, e3 = r2; n2 < e3.length; n2++) {
            var i2 = e3[n2];
            m[i2] = "";
          }
          return x;
        };
        var dr = function() {
          if (a !== void 0) {
            return a;
          }
          if (c) {
            return c.getFill();
          }
          return "both";
        };
        var cr = function() {
          if (C !== void 0) {
            return C;
          }
          if (f !== void 0) {
            return f;
          }
          if (c) {
            return c.getDirection();
          }
          return "normal";
        };
        var sr = function() {
          if (A) {
            return "linear";
          }
          if (i !== void 0) {
            return i;
          }
          if (c) {
            return c.getEasing();
          }
          return "linear";
        };
        var lr = function() {
          if (g) {
            return 0;
          }
          if (b !== void 0) {
            return b;
          }
          if (e2 !== void 0) {
            return e2;
          }
          if (c) {
            return c.getDuration();
          }
          return 0;
        };
        var yr = function() {
          if (t !== void 0) {
            return t;
          }
          if (c) {
            return c.getIterations();
          }
          return 1;
        };
        var mr = function() {
          if (_ !== void 0) {
            return _;
          }
          if (n !== void 0) {
            return n;
          }
          if (c) {
            return c.getDelay();
          }
          return 0;
        };
        var pr = function() {
          return u2;
        };
        var Ar = function(r2) {
          f = r2;
          Kr(true);
          return x;
        };
        var gr = function(r2) {
          a = r2;
          Kr(true);
          return x;
        };
        var Cr = function(r2) {
          n = r2;
          Kr(true);
          return x;
        };
        var br = function(r2) {
          i = r2;
          Kr(true);
          return x;
        };
        var _r = function(r2) {
          if (!B && r2 === 0) {
            r2 = 1;
          }
          e2 = r2;
          Kr(true);
          return x;
        };
        var Pr = function(r2) {
          t = r2;
          Kr(true);
          return x;
        };
        var Sr = function(r2) {
          c = r2;
          return x;
        };
        var Tr = function(r2) {
          if (r2 != null) {
            if (r2.nodeType === 1) {
              D.push(r2);
            } else if (r2.length >= 0) {
              for (var n2 = 0; n2 < r2.length; n2++) {
                D.push(r2[n2]);
              }
            } else {
              console.error("Invalid addElement value");
            }
          }
          return x;
        };
        var xr = function(r2) {
          if (r2 != null) {
            if (Array.isArray(r2)) {
              for (var n2 = 0, e3 = r2; n2 < e3.length; n2++) {
                var i2 = e3[n2];
                i2.parent(x);
                F.push(i2);
              }
            } else {
              r2.parent(x);
              F.push(r2);
            }
          }
          return x;
        };
        var Er = function(r2) {
          var n2 = u2 !== r2;
          u2 = r2;
          if (n2) {
            wr(u2);
          }
          return x;
        };
        var wr = function(r2) {
          if (B) {
            G().forEach(function(n2) {
              var e3 = n2.effect;
              if (e3.setKeyframes) {
                e3.setKeyframes(r2);
              } else {
                var i2 = new KeyframeEffect(e3.target, r2, e3.getTiming());
                n2.effect = i2;
              }
            });
          }
        };
        var hr = function() {
          I.forEach(function(r3) {
            return r3();
          });
          K.forEach(function(r3) {
            return r3();
          });
          var r2 = o;
          var n2 = v;
          var e3 = s;
          D.forEach(function(i2) {
            var t2 = i2.classList;
            r2.forEach(function(r3) {
              return t2.add(r3);
            });
            n2.forEach(function(r3) {
              return t2.remove(r3);
            });
            for (var a2 in e3) {
              if (e3.hasOwnProperty(a2)) {
                setStyleProperty(i2, a2, e3[a2]);
              }
            }
          });
        };
        var kr = function() {
          M.forEach(function(r3) {
            return r3();
          });
          j.forEach(function(r3) {
            return r3();
          });
          var r2 = P ? 1 : 0;
          var n2 = l;
          var e3 = y;
          var i2 = m;
          D.forEach(function(r3) {
            var t2 = r3.classList;
            n2.forEach(function(r4) {
              return t2.add(r4);
            });
            e3.forEach(function(r4) {
              return t2.remove(r4);
            });
            for (var a2 in i2) {
              if (i2.hasOwnProperty(a2)) {
                setStyleProperty(r3, a2, i2[a2]);
              }
            }
          });
          b = void 0;
          C = void 0;
          _ = void 0;
          h2.forEach(function(n3) {
            return n3.c(r2, x);
          });
          k.forEach(function(n3) {
            return n3.c(r2, x);
          });
          k.length = 0;
          T = true;
          if (P) {
            S = true;
          }
          P = true;
        };
        var Rr = function() {
          if (p === 0) {
            return;
          }
          p--;
          if (p === 0) {
            kr();
            if (c) {
              c.animationFinish();
            }
          }
        };
        var Dr = function() {
          D.forEach(function(r2) {
            var n2 = r2.animate(u2, { id: w, delay: mr(), duration: lr(), easing: sr(), iterations: yr(), fill: dr(), direction: cr() });
            n2.pause();
            q.push(n2);
          });
          if (q.length > 0) {
            q[0].onfinish = function() {
              Rr();
            };
          }
        };
        var Fr = function() {
          hr();
          if (u2.length > 0) {
            if (B) {
              Dr();
            }
          }
          d = true;
        };
        var Wr = function(r2) {
          r2 = Math.min(Math.max(r2, 0), 0.9999);
          if (B) {
            q.forEach(function(n2) {
              n2.currentTime = n2.effect.getComputedTiming().delay + lr() * r2;
              n2.pause();
            });
          }
        };
        var Ir = function(r2) {
          q.forEach(function(r3) {
            r3.effect.updateTiming({ delay: mr(), duration: lr(), easing: sr(), iterations: yr(), fill: dr(), direction: cr() });
          });
          if (r2 !== void 0) {
            Wr(r2);
          }
        };
        var Kr = function(r2, n2, e3) {
          if (r2 === void 0) {
            r2 = false;
          }
          if (n2 === void 0) {
            n2 = true;
          }
          if (r2) {
            F.forEach(function(i2) {
              i2.update(r2, n2, e3);
            });
          }
          if (B) {
            Ir(e3);
          }
          return x;
        };
        var Mr = function(r2, n2) {
          if (r2 === void 0) {
            r2 = false;
          }
          F.forEach(function(e3) {
            e3.progressStart(r2, n2);
          });
          zr();
          A = r2;
          if (!d) {
            Fr();
          }
          Kr(false, true, n2);
          return x;
        };
        var jr = function(r2) {
          F.forEach(function(n2) {
            n2.progressStep(r2);
          });
          Wr(r2);
          return x;
        };
        var qr = function(r2, n2, e3) {
          A = false;
          F.forEach(function(i2) {
            i2.progressEnd(r2, n2, e3);
          });
          if (e3 !== void 0) {
            b = e3;
          }
          S = false;
          P = true;
          if (r2 === 0) {
            C = cr() === "reverse" ? "normal" : "reverse";
            if (C === "reverse") {
              P = false;
            }
            if (B) {
              Kr();
              Wr(1 - n2);
            } else {
              _ = (1 - n2) * lr() * -1;
              Kr(false, false);
            }
          } else if (r2 === 1) {
            if (B) {
              Kr();
              Wr(n2);
            } else {
              _ = n2 * lr() * -1;
              Kr(false, false);
            }
          }
          if (r2 !== void 0 && !c) {
            Lr();
          }
          return x;
        };
        var zr = function() {
          if (d) {
            if (B) {
              q.forEach(function(r2) {
                r2.pause();
              });
            } else {
              D.forEach(function(r2) {
                setStyleProperty(r2, "animation-play-state", "paused");
              });
            }
            E = true;
          }
        };
        var Br = function() {
          F.forEach(function(r2) {
            r2.pause();
          });
          zr();
          return x;
        };
        var Gr = function() {
          Rr();
        };
        var Hr = function() {
          q.forEach(function(r2) {
            r2.play();
          });
          if (u2.length === 0 || D.length === 0) {
            Rr();
          }
        };
        var Jr = function() {
          if (B) {
            Wr(0);
            Ir();
          }
        };
        var Lr = function(r2) {
          return new Promise(function(n2) {
            if (r2 === null || r2 === void 0 ? void 0 : r2.sync) {
              g = true;
              U(function() {
                return g = false;
              }, { oneTimeCallback: true });
            }
            if (!d) {
              Fr();
            }
            if (S) {
              Jr();
              S = false;
            }
            if (T) {
              p = F.length + 1;
              T = false;
            }
            var e3 = function() {
              O(i2, k);
              n2();
            };
            var i2 = function() {
              O(e3, R);
              n2();
            };
            U(i2, { oneTimeCallback: true });
            Q(e3, { oneTimeCallback: true });
            F.forEach(function(r3) {
              r3.play();
            });
            if (B) {
              Hr();
            } else {
              Gr();
            }
            E = false;
          });
        };
        var Nr = function() {
          F.forEach(function(r2) {
            r2.stop();
          });
          if (d) {
            X();
            d = false;
          }
          L();
          R.forEach(function(r2) {
            return r2.c(0, x);
          });
          R.length = 0;
        };
        var Or = function(r2, n2) {
          var e3;
          var i2 = u2[0];
          if (i2 !== void 0 && (i2.offset === void 0 || i2.offset === 0)) {
            i2[r2] = n2;
          } else {
            u2 = __spreadArray([(e3 = { offset: 0 }, e3[r2] = n2, e3)], u2, true);
          }
          return x;
        };
        var Qr = function(r2, n2) {
          var e3;
          var i2 = u2[u2.length - 1];
          if (i2 !== void 0 && (i2.offset === void 0 || i2.offset === 1)) {
            i2[r2] = n2;
          } else {
            u2 = __spreadArray(__spreadArray([], u2, true), [(e3 = { offset: 1 }, e3[r2] = n2, e3)], false);
          }
          return x;
        };
        var Ur = function(r2, n2, e3) {
          return Or(r2, n2).to(r2, e3);
        };
        return x = { parentAnimation: c, elements: D, childAnimations: F, id: w, animationFinish: Rr, from: Or, to: Qr, fromTo: Ur, parent: Sr, play: Lr, pause: Br, stop: Nr, destroy: H2, keyframes: Er, addAnimation: xr, addElement: Tr, update: Kr, fill: gr, direction: Ar, iterations: Pr, duration: _r, easing: br, delay: Cr, getWebAnimations: G, getKeyframes: pr, getFill: dr, getDirection: cr, getDelay: mr, getIterations: yr, getEasing: sr, getDuration: lr, afterAddRead: rr, afterAddWrite: nr, afterClearStyles: vr, afterStyles: or, afterRemoveClass: ur, afterAddClass: fr, beforeAddRead: Z, beforeAddWrite: $, beforeClearStyles: ar, beforeStyles: tr, beforeRemoveClass: ir, beforeAddClass: er, onFinish: U, isRunning: N, progressStart: Mr, progressStep: jr, progressEnd: qr };
      };
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/index-5dc2b88e.js
  function getNamespaceURI(t) {
    return t === XLINK_NS$1 ? null : t;
  }
  function cloneAttributes(t, e2) {
    if (e2 === void 0) {
      e2 = false;
    }
    var n = new MockAttributeMap(t.caseInsensitive);
    if (t != null) {
      var i = t.length;
      if (e2 && i > 1) {
        var r = [];
        for (var s = 0; s < i; s++) {
          var a = t.item(s);
          var u2 = new MockAttr(a.name, a.value, a.namespaceURI);
          r.push(u2);
        }
        r.sort(sortAttributes).forEach(function(t2) {
          n.setNamedItemNS(t2);
        });
      } else {
        for (var s = 0; s < i; s++) {
          var a = t.item(s);
          var u2 = new MockAttr(a.name, a.value, a.namespaceURI);
          n.setNamedItemNS(u2);
        }
      }
    }
    return n;
  }
  function sortAttributes(t, e2) {
    if (t.name < e2.name)
      return -1;
    if (t.name > e2.name)
      return 1;
    return 0;
  }
  function validateClass(t) {
    if (t === "") {
      throw new Error("The token provided must not be empty.");
    }
    if (/\s/.test(t)) {
      throw new Error("The token provided ('".concat(t, "') contains HTML space characters, which are not valid in tokens."));
    }
  }
  function getItems(t) {
    var e2 = t.getAttribute("class");
    if (typeof e2 === "string" && e2.length > 0) {
      return e2.trim().split(" ").filter(function(t2) {
        return t2.length > 0;
      });
    }
    return [];
  }
  function createCSSStyleDeclaration() {
    return new Proxy(new MockCSSStyleDeclaration(), cssProxyHandler);
  }
  function cssCaseToJsCase(t) {
    if (t.length > 1 && t.includes("-") === true) {
      t = t.toLowerCase().split("-").map(function(t2) {
        return t2.charAt(0).toUpperCase() + t2.slice(1);
      }).join("");
      t = t.slice(0, 1).toLowerCase() + t.slice(1);
    }
    return t;
  }
  function jsCaseToCssCase(t) {
    if (t.length > 1 && t.includes("-") === false && /[A-Z]/.test(t) === true) {
      t = t.replace(/([A-Z])/g, function(t2) {
        return " " + t2[0];
      }).trim().replace(/ /g, "-").toLowerCase();
    }
    return t;
  }
  function createCustomElement(t, e2, n) {
    var i = t.get(n);
    if (i != null) {
      var r = new i(e2);
      r.nodeName = n.toUpperCase();
      upgradedElements.add(r);
      return r;
    }
    var s = new Proxy({}, { get: function(t2, e3) {
      var n2 = proxyElements.get(s);
      if (n2 != null) {
        return n2[e3];
      }
      return t2[e3];
    }, set: function(t2, e3, n2) {
      var i2 = proxyElements.get(s);
      if (i2 != null) {
        i2[e3] = n2;
      } else {
        t2[e3] = n2;
      }
      return true;
    }, has: function(t2, e3) {
      var n2 = proxyElements.get(s);
      if (e3 in n2) {
        return true;
      }
      if (e3 in t2) {
        return true;
      }
      return false;
    } });
    var a = new MockHTMLElement(e2, n);
    proxyElements.set(s, a);
    return s;
  }
  function connectNode(t, e2) {
    e2.ownerDocument = t;
    if (e2.nodeType === 1) {
      if (t != null && e2.nodeName.includes("-")) {
        var n = t.defaultView;
        if (n != null && typeof e2.connectedCallback === "function" && e2.isConnected) {
          fireConnectedCallback$1(e2);
        }
        var i = e2.shadowRoot;
        if (i != null) {
          i.childNodes.forEach(function(e3) {
            connectNode(t, e3);
          });
        }
      }
      e2.childNodes.forEach(function(e3) {
        connectNode(t, e3);
      });
    } else {
      e2.childNodes.forEach(function(e3) {
        e3.ownerDocument = t;
      });
    }
  }
  function fireConnectedCallback$1(t) {
    if (typeof t.connectedCallback === "function") {
      if (tempDisableCallbacks.has(t.ownerDocument) === false) {
        try {
          t.connectedCallback();
        } catch (t2) {
          console.error(t2);
        }
      }
    }
  }
  function disconnectNode(t) {
    if (t.nodeType === 1) {
      if (t.nodeName.includes("-") === true && typeof t.disconnectedCallback === "function") {
        if (tempDisableCallbacks.has(t.ownerDocument) === false) {
          try {
            t.disconnectedCallback();
          } catch (t2) {
            console.error(t2);
          }
        }
      }
      t.childNodes.forEach(disconnectNode);
    }
  }
  function attributeChanged(t, e2, n, i) {
    e2 = e2.toLowerCase();
    var r = t.constructor.observedAttributes;
    if (Array.isArray(r) === true && r.some(function(t2) {
      return t2.toLowerCase() === e2;
    }) === true) {
      try {
        t.attributeChangedCallback(e2, n, i);
      } catch (t2) {
        console.error(t2);
      }
    }
  }
  function checkAttributeChanged(t) {
    return t.nodeName.includes("-") === true && typeof t.attributeChangedCallback === "function";
  }
  function dataset(t) {
    var e2 = {};
    var n = t.attributes;
    var i = n.length;
    for (var r = 0; r < i; r++) {
      var s = n.item(r);
      var a = s.nodeName;
      if (a.startsWith("data-")) {
        e2[dashToPascalCase(a)] = s.nodeValue;
      }
    }
    return new Proxy(e2, { get: function(t2, n2) {
      return e2[n2];
    }, set: function(e3, n2, i2) {
      var r2 = toDataAttribute(n2);
      t.setAttribute(r2, i2);
      return true;
    } });
  }
  function toDataAttribute(t) {
    return "data-" + String(t).replace(/([A-Z0-9])/g, function(t2) {
      return " " + t2[0];
    }).trim().replace(/ /g, "-").toLowerCase();
  }
  function dashToPascalCase(t) {
    t = String(t).slice(5);
    return t.split("-").map(function(t2, e2) {
      if (e2 === 0) {
        return t2.charAt(0).toLowerCase() + t2.slice(1);
      }
      return t2.charAt(0).toUpperCase() + t2.slice(1);
    }).join("");
  }
  function addEventListener(t, e2, n) {
    var i = t;
    if (i.__listeners == null) {
      i.__listeners = [];
    }
    i.__listeners.push(new MockEventListener(e2, n));
  }
  function removeEventListener(t, e2, n) {
    var i = t;
    if (i != null && Array.isArray(i.__listeners) === true) {
      var r = i.__listeners.find(function(t2) {
        return t2.type === e2 && t2.handler === n;
      });
      if (r != null) {
        var s = i.__listeners.indexOf(r);
        i.__listeners.splice(s, 1);
      }
    }
  }
  function resetEventListeners(t) {
    if (t != null && t.__listeners != null) {
      t.__listeners = null;
    }
  }
  function triggerEventListener(t, e2) {
    if (t == null || e2.cancelBubble === true) {
      return;
    }
    var n = t;
    e2.currentTarget = t;
    if (Array.isArray(n.__listeners) === true) {
      var i = n.__listeners.filter(function(t2) {
        return t2.type === e2.type;
      });
      i.forEach(function(t2) {
        try {
          t2.handler.call(n, e2);
        } catch (t3) {
          console.error(t3);
        }
      });
    }
    if (e2.bubbles === false) {
      return;
    }
    if (t.nodeName === "#document") {
      triggerEventListener(t.defaultView, e2);
    } else if (t.parentElement == null && t.tagName === "HTML") {
      triggerEventListener(t.ownerDocument, e2);
    } else {
      triggerEventListener(t.parentElement, e2);
    }
  }
  function dispatchEvent(t, e2) {
    e2.target = t;
    triggerEventListener(t, e2);
    return true;
  }
  function parseDocumentUtil(t, e2) {
    var n = parse2(e2.trim(), getParser(t));
    n.documentElement = n.firstElementChild;
    n.head = n.documentElement.firstElementChild;
    n.body = n.head.nextElementSibling;
    return n;
  }
  function parseFragmentUtil(t, e2) {
    if (typeof e2 === "string") {
      e2 = e2.trim();
    } else {
      e2 = "";
    }
    var n = parseFragment(e2, getParser(t));
    return n;
  }
  function getParser(t) {
    var e2 = docParser.get(t);
    if (e2 != null) {
      return e2;
    }
    var n = { createDocument: function() {
      var e3 = t.createElement("#document");
      e3["x-mode"] = "no-quirks";
      return e3;
    }, setNodeSourceCodeLocation: function(t2, e3) {
      t2.sourceCodeLocation = e3;
    }, getNodeSourceCodeLocation: function(t2) {
      return t2.sourceCodeLocation;
    }, createDocumentFragment: function() {
      return t.createDocumentFragment();
    }, createElement: function(e3, n2, i) {
      var r = t.createElementNS(n2, e3);
      for (var s = 0; s < i.length; s++) {
        var a = i[s];
        if (a.namespace == null || a.namespace === "http://www.w3.org/1999/xhtml") {
          r.setAttribute(a.name, a.value);
        } else {
          r.setAttributeNS(a.namespace, a.name, a.value);
        }
      }
      return r;
    }, createCommentNode: function(e3) {
      return t.createComment(e3);
    }, appendChild: function(t2, e3) {
      t2.appendChild(e3);
    }, insertBefore: function(t2, e3, n2) {
      t2.insertBefore(e3, n2);
    }, setTemplateContent: function(t2, e3) {
      t2.content = e3;
    }, getTemplateContent: function(t2) {
      return t2.content;
    }, setDocumentType: function(e3, n2, i, r) {
      var s = e3.childNodes.find(function(t2) {
        return t2.nodeType === 10;
      });
      if (s == null) {
        s = t.createDocumentTypeNode();
        e3.insertBefore(s, e3.firstChild);
      }
      s.nodeValue = "!DOCTYPE";
      s["x-name"] = n2;
      s["x-publicId"] = i;
      s["x-systemId"] = r;
    }, setDocumentMode: function(t2, e3) {
      t2["x-mode"] = e3;
    }, getDocumentMode: function(t2) {
      return t2["x-mode"];
    }, detachNode: function(t2) {
      t2.remove();
    }, insertText: function(e3, n2) {
      var i = e3.lastChild;
      if (i != null && i.nodeType === 3) {
        i.nodeValue += n2;
      } else {
        e3.appendChild(t.createTextNode(n2));
      }
    }, insertTextBefore: function(e3, n2, i) {
      var r = e3.childNodes[e3.childNodes.indexOf(i) - 1];
      if (r != null && r.nodeType === 3) {
        r.nodeValue += n2;
      } else {
        e3.insertBefore(t.createTextNode(n2), i);
      }
    }, adoptAttributes: function(t2, e3) {
      for (var n2 = 0; n2 < e3.length; n2++) {
        var i = e3[n2];
        if (t2.hasAttributeNS(i.namespace, i.name) === false) {
          t2.setAttributeNS(i.namespace, i.name, i.value);
        }
      }
    }, getFirstChild: function(t2) {
      return t2.childNodes[0];
    }, getChildNodes: function(t2) {
      return t2.childNodes;
    }, getParentNode: function(t2) {
      return t2.parentNode;
    }, getAttrList: function(t2) {
      var e3 = t2.attributes.__items.map(function(t3) {
        return { name: t3.name, value: t3.value, namespace: t3.namespaceURI, prefix: null };
      });
      return e3;
    }, getTagName: function(t2) {
      if (t2.namespaceURI === "http://www.w3.org/1999/xhtml") {
        return t2.nodeName.toLowerCase();
      } else {
        return t2.nodeName;
      }
    }, getNamespaceURI: function(t2) {
      return t2.namespaceURI;
    }, getTextNodeContent: function(t2) {
      return t2.nodeValue;
    }, getCommentNodeContent: function(t2) {
      return t2.nodeValue;
    }, getDocumentTypeNodeName: function(t2) {
      return t2["x-name"];
    }, getDocumentTypeNodePublicId: function(t2) {
      return t2["x-publicId"];
    }, getDocumentTypeNodeSystemId: function(t2) {
      return t2["x-systemId"];
    }, isTextNode: function(t2) {
      return t2.nodeType === 3;
    }, isCommentNode: function(t2) {
      return t2.nodeType === 8;
    }, isDocumentTypeNode: function(t2) {
      return t2.nodeType === 10;
    }, isElementNode: function(t2) {
      return t2.nodeType === 1;
    } };
    e2 = { treeAdapter: n };
    docParser.set(t, e2);
    return e2;
  }
  function matches(t, e2) {
    try {
      var n = jquery_default.find(t, void 0, void 0, [e2]);
      return n.length > 0;
    } catch (e3) {
      updateSelectorError(t, e3);
      throw e3;
    }
  }
  function selectOne(t, e2) {
    try {
      var n = jquery_default.find(t, e2, void 0, void 0);
      return n[0] || null;
    } catch (e3) {
      updateSelectorError(t, e3);
      throw e3;
    }
  }
  function selectAll(t, e2) {
    try {
      return jquery_default.find(t, e2, void 0, void 0);
    } catch (e3) {
      updateSelectorError(t, e3);
      throw e3;
    }
  }
  function updateSelectorError(t, e2) {
    var n = PROBLEMATIC_SELECTORS.filter(function(e3) {
      return t.includes(e3);
    });
    if (n.length > 0 && e2.message) {
      e2.message = "At present jQuery does not support the ".concat(humanReadableList(n), " ").concat(n.length === 1 ? "selector" : "selectors", ".\nIf you need this in your test, consider writing an end-to-end test instead.\n") + e2.message;
    }
  }
  function humanReadableList(t) {
    if (t.length <= 1) {
      return t.join("");
    }
    return "".concat(t.slice(0, t.length - 1).join(", "), " and ").concat(t[t.length - 1]);
  }
  function serializeNodeToHtml(t, e2) {
    if (e2 === void 0) {
      e2 = {};
    }
    var n = { currentLineWidth: 0, indent: 0, isWithinBody: false, text: [] };
    if (e2.prettyHtml) {
      if (typeof e2.indentSpaces !== "number") {
        e2.indentSpaces = 2;
      }
      if (typeof e2.newLines !== "boolean") {
        e2.newLines = true;
      }
      e2.approximateLineWidth = -1;
    } else {
      e2.prettyHtml = false;
      if (typeof e2.newLines !== "boolean") {
        e2.newLines = false;
      }
      if (typeof e2.indentSpaces !== "number") {
        e2.indentSpaces = 0;
      }
    }
    if (typeof e2.approximateLineWidth !== "number") {
      e2.approximateLineWidth = -1;
    }
    if (typeof e2.removeEmptyAttributes !== "boolean") {
      e2.removeEmptyAttributes = true;
    }
    if (typeof e2.removeAttributeQuotes !== "boolean") {
      e2.removeAttributeQuotes = false;
    }
    if (typeof e2.removeBooleanAttributeQuotes !== "boolean") {
      e2.removeBooleanAttributeQuotes = false;
    }
    if (typeof e2.removeHtmlComments !== "boolean") {
      e2.removeHtmlComments = false;
    }
    if (typeof e2.serializeShadowRoot !== "boolean") {
      e2.serializeShadowRoot = false;
    }
    if (e2.outerHtml) {
      serializeToHtml(t, e2, n, false);
    } else {
      for (var i = 0, r = t.childNodes.length; i < r; i++) {
        serializeToHtml(t.childNodes[i], e2, n, false);
      }
    }
    if (n.text[0] === "\n") {
      n.text.shift();
    }
    if (n.text[n.text.length - 1] === "\n") {
      n.text.pop();
    }
    return n.text.join("");
  }
  function serializeToHtml(t, e2, n, i) {
    var r, s, a, u2, o, c, f, l, h2, d, v, b, m, p, g, E;
    if (t.nodeType === 1 || i) {
      var k = i ? "mock:shadow-root" : getTagName(t);
      if (k === "body") {
        n.isWithinBody = true;
      }
      var T = e2.excludeTags != null && e2.excludeTags.includes(k);
      if (T === false) {
        var w = e2.newLines || ((r = e2.indentSpaces) != null ? r : 0) > 0 ? isWithinWhitespaceSensitive(t) : false;
        if (e2.newLines && !w) {
          n.text.push("\n");
          n.currentLineWidth = 0;
        }
        if (((s = e2.indentSpaces) != null ? s : 0) > 0 && !w) {
          for (var S = 0; S < n.indent; S++) {
            n.text.push(" ");
          }
          n.currentLineWidth += n.indent;
        }
        n.text.push("<" + k);
        n.currentLineWidth += k.length + 1;
        var _ = t.attributes.length;
        var y = e2.prettyHtml && _ > 1 ? cloneAttributes(t.attributes, true) : t.attributes;
        for (var S = 0; S < _; S++) {
          var A = y.item(S);
          var N = A.name;
          if (N === "style") {
            continue;
          }
          var M = A.value;
          if (e2.removeEmptyAttributes && M === "" && REMOVE_EMPTY_ATTR.has(N)) {
            continue;
          }
          var C = A.namespaceURI;
          if (C == null) {
            n.currentLineWidth += N.length + 1;
            if (e2.approximateLineWidth && e2.approximateLineWidth > 0 && n.currentLineWidth > e2.approximateLineWidth) {
              n.text.push("\n" + N);
              n.currentLineWidth = 0;
            } else {
              n.text.push(" " + N);
            }
          } else if (C === "http://www.w3.org/XML/1998/namespace") {
            n.text.push(" xml:" + N);
            n.currentLineWidth += N.length + 5;
          } else if (C === "http://www.w3.org/2000/xmlns/") {
            if (N !== "xmlns") {
              n.text.push(" xmlns:" + N);
              n.currentLineWidth += N.length + 7;
            } else {
              n.text.push(" " + N);
              n.currentLineWidth += N.length + 1;
            }
          } else if (C === XLINK_NS$1) {
            n.text.push(" xlink:" + N);
            n.currentLineWidth += N.length + 7;
          } else {
            n.text.push(" " + C + ":" + N);
            n.currentLineWidth += C.length + N.length + 2;
          }
          if (e2.prettyHtml && N === "class") {
            M = A.value = M.split(" ").filter(function(t2) {
              return t2 !== "";
            }).sort().join(" ").trim();
          }
          if (M === "") {
            if (e2.removeBooleanAttributeQuotes && BOOLEAN_ATTR.has(N)) {
              continue;
            }
            if (e2.removeEmptyAttributes && N.startsWith("data-")) {
              continue;
            }
          }
          if (e2.removeAttributeQuotes && CAN_REMOVE_ATTR_QUOTES.test(M)) {
            n.text.push("=" + escapeString(M, true));
            n.currentLineWidth += M.length + 1;
          } else {
            n.text.push('="' + escapeString(M, true) + '"');
            n.currentLineWidth += M.length + 3;
          }
        }
        if (t.hasAttribute("style")) {
          var O = t.style.cssText;
          if (e2.approximateLineWidth && e2.approximateLineWidth > 0 && n.currentLineWidth + O.length + 10 > e2.approximateLineWidth) {
            n.text.push('\nstyle="'.concat(O, '">'));
            n.currentLineWidth = 0;
          } else {
            n.text.push(' style="'.concat(O, '">'));
            n.currentLineWidth += O.length + 10;
          }
        } else {
          n.text.push(">");
          n.currentLineWidth += 1;
        }
      }
      if (EMPTY_ELEMENTS.has(k) === false) {
        if (e2.serializeShadowRoot && t.shadowRoot != null) {
          n.indent = n.indent + ((a = e2.indentSpaces) != null ? a : 0);
          serializeToHtml(t.shadowRoot, e2, n, true);
          n.indent = n.indent - ((u2 = e2.indentSpaces) != null ? u2 : 0);
          if (e2.newLines && (t.childNodes.length === 0 || t.childNodes.length === 1 && t.childNodes[0].nodeType === 3 && ((o = t.childNodes[0].nodeValue) == null ? void 0 : o.trim()) === "")) {
            n.text.push("\n");
            n.currentLineWidth = 0;
            for (var S = 0; S < n.indent; S++) {
              n.text.push(" ");
            }
            n.currentLineWidth += n.indent;
          }
        }
        if (e2.excludeTagContent == null || e2.excludeTagContent.includes(k) === false) {
          var D = k === "template" ? t.content.childNodes : t.childNodes;
          var R = D.length;
          if (R > 0) {
            if (R === 1 && D[0].nodeType === 3 && (typeof D[0].nodeValue !== "string" || D[0].nodeValue.trim() === ""))
              ;
            else {
              var w = e2.newLines || ((c = e2.indentSpaces) != null ? c : 0) > 0 ? isWithinWhitespaceSensitive(t) : false;
              if (!w && ((f = e2.indentSpaces) != null ? f : 0) > 0 && T === false) {
                n.indent = n.indent + ((l = e2.indentSpaces) != null ? l : 0);
              }
              for (var S = 0; S < R; S++) {
                serializeToHtml(D[S], e2, n, false);
              }
              if (T === false) {
                if (e2.newLines && !w) {
                  n.text.push("\n");
                  n.currentLineWidth = 0;
                }
                if (((h2 = e2.indentSpaces) != null ? h2 : 0) > 0 && !w) {
                  n.indent = n.indent - ((d = e2.indentSpaces) != null ? d : 0);
                  for (var S = 0; S < n.indent; S++) {
                    n.text.push(" ");
                  }
                  n.currentLineWidth += n.indent;
                }
              }
            }
          }
          if (T === false) {
            n.text.push("</" + k + ">");
            n.currentLineWidth += k.length + 3;
          }
        }
      }
      if (((v = e2.approximateLineWidth) != null ? v : 0) > 0 && STRUCTURE_ELEMENTS.has(k)) {
        n.text.push("\n");
        n.currentLineWidth = 0;
      }
      if (k === "body") {
        n.isWithinBody = false;
      }
    } else if (t.nodeType === 3) {
      var L = t.nodeValue;
      if (typeof L === "string") {
        var I = L.trim();
        if (I === "") {
          if (isWithinWhitespaceSensitive(t)) {
            n.text.push(L);
            n.currentLineWidth += L.length;
          } else if (((b = e2.approximateLineWidth) != null ? b : 0) > 0 && !n.isWithinBody)
            ;
          else if (!e2.prettyHtml) {
            n.currentLineWidth += 1;
            if (e2.approximateLineWidth && e2.approximateLineWidth > 0 && n.currentLineWidth > e2.approximateLineWidth) {
              n.text.push("\n");
              n.currentLineWidth = 0;
            } else {
              n.text.push(" ");
            }
          }
        } else {
          var w = e2.newLines || ((m = e2.indentSpaces) != null ? m : 0) > 0 || e2.prettyHtml ? isWithinWhitespaceSensitive(t) : false;
          if (e2.newLines && !w) {
            n.text.push("\n");
            n.currentLineWidth = 0;
          }
          if (((p = e2.indentSpaces) != null ? p : 0) > 0 && !w) {
            for (var S = 0; S < n.indent; S++) {
              n.text.push(" ");
            }
            n.currentLineWidth += n.indent;
          }
          var x = L.length;
          if (x > 0) {
            var P = t.parentNode != null && t.parentNode.nodeType === 1 ? t.parentNode.nodeName : null;
            if (typeof P === "string" && NON_ESCAPABLE_CONTENT.has(P)) {
              if (isWithinWhitespaceSensitive(t)) {
                n.text.push(L);
              } else {
                n.text.push(I);
                x = I.length;
              }
              n.currentLineWidth += x;
            } else {
              if (e2.prettyHtml && !w) {
                n.text.push(escapeString(L.replace(/\s\s+/g, " ").trim(), false));
                n.currentLineWidth += x;
              } else {
                if (isWithinWhitespaceSensitive(t)) {
                  n.currentLineWidth += x;
                } else {
                  if (/\s/.test(L.charAt(0))) {
                    L = " " + L.trimLeft();
                  }
                  x = L.length;
                  if (x > 1) {
                    if (/\s/.test(L.charAt(x - 1))) {
                      if (e2.approximateLineWidth && e2.approximateLineWidth > 0 && n.currentLineWidth + x > e2.approximateLineWidth) {
                        L = L.trimRight() + "\n";
                        n.currentLineWidth = 0;
                      } else {
                        L = L.trimRight() + " ";
                      }
                    }
                  }
                  n.currentLineWidth += x;
                }
                n.text.push(escapeString(L, false));
              }
            }
          }
        }
      }
    } else if (t.nodeType === 8) {
      var H2 = t.nodeValue;
      if (e2.removeHtmlComments) {
        var j = (H2 == null ? void 0 : H2.startsWith(CONTENT_REF_ID$1 + ".")) || (H2 == null ? void 0 : H2.startsWith(ORG_LOCATION_ID$1 + ".")) || (H2 == null ? void 0 : H2.startsWith(SLOT_NODE_ID$1 + ".")) || (H2 == null ? void 0 : H2.startsWith(TEXT_NODE_ID$1 + "."));
        if (!j) {
          return;
        }
      }
      var w = e2.newLines || ((g = e2.indentSpaces) != null ? g : 0) > 0 ? isWithinWhitespaceSensitive(t) : false;
      if (e2.newLines && !w) {
        n.text.push("\n");
        n.currentLineWidth = 0;
      }
      if (((E = e2.indentSpaces) != null ? E : 0) > 0 && !w) {
        for (var S = 0; S < n.indent; S++) {
          n.text.push(" ");
        }
        n.currentLineWidth += n.indent;
      }
      n.text.push("<!--" + H2 + "-->");
      n.currentLineWidth += H2.length + 7;
    } else if (t.nodeType === 10) {
      n.text.push("<!doctype html>");
    }
  }
  function getTagName(t) {
    if (t.namespaceURI === "http://www.w3.org/1999/xhtml") {
      return t.nodeName.toLowerCase();
    } else {
      return t.nodeName;
    }
  }
  function escapeString(t, e2) {
    t = t.replace(AMP_REGEX, "&amp;").replace(NBSP_REGEX, "&nbsp;");
    if (e2) {
      return t.replace(DOUBLE_QUOTE_REGEX, "&quot;");
    }
    return t.replace(LT_REGEX, "&lt;").replace(GT_REGEX, "&gt;");
  }
  function isWithinWhitespaceSensitive(t) {
    var e2 = t;
    while (e2 != null) {
      if (WHITESPACE_SENSITIVE.has(e2.nodeName)) {
        return true;
      }
      e2 = e2.parentNode;
    }
    return false;
  }
  function getElementsByClassName(t, e2, n) {
    var i = t.children;
    for (var r = 0, s = i.length; r < s; r++) {
      var a = i[r];
      for (var u2 = 0, o = e2.length; u2 < o; u2++) {
        if (a.classList.contains(e2[u2])) {
          n.push(a);
        }
      }
      getElementsByClassName(a, e2, n);
    }
  }
  function getElementsByTagName(t, e2, n) {
    var i;
    var r = t.children;
    for (var s = 0, a = r.length; s < a; s++) {
      var u2 = r[s];
      if (e2 === "*" || ((i = u2.nodeName) != null ? i : "").toLowerCase() === e2) {
        n.push(u2);
      }
      getElementsByTagName(u2, e2, n);
    }
  }
  function resetElement(t) {
    resetEventListeners(t);
    delete t.__attributeMap;
    delete t.__shadowRoot;
    delete t.__style;
  }
  function insertBefore(t, e2, n) {
    if (e2 !== n) {
      e2.remove();
      e2.parentNode = t;
      e2.ownerDocument = t.ownerDocument;
      if (n != null) {
        var i = t.childNodes.indexOf(n);
        if (i > -1) {
          t.childNodes.splice(i, 0, e2);
        } else {
          throw new Error("referenceNode not found in parentNode.childNodes");
        }
      } else {
        t.childNodes.push(e2);
      }
      connectNode(t.ownerDocument, e2);
    }
    return e2;
  }
  function getTextContent(t, e2) {
    for (var n = 0, i = t.length; n < i; n++) {
      var r = t[n];
      if (r.nodeType === 3) {
        e2.push(r.nodeValue);
      } else if (r.nodeType === 1) {
        getTextContent(r.childNodes, e2);
      }
    }
  }
  function setTextContent(t, e2) {
    for (var n = t.childNodes.length - 1; n >= 0; n--) {
      t.removeChild(t.childNodes[n]);
    }
    var i = new MockTextNode(t.ownerDocument, e2);
    t.appendChild(i);
  }
  function getStyleElementText(t) {
    var e2 = [];
    for (var n = 0; n < t.childNodes.length; n++) {
      e2.push(t.childNodes[n].nodeValue);
    }
    return e2.join("");
  }
  function setStyleElementText(t, e2) {
    var n = t.sheet;
    n.cssRules.length = 0;
    n.insertRule(e2);
    updateStyleTextNode(t);
  }
  function updateStyleTextNode(t) {
    var e2 = t.childNodes.length;
    if (e2 > 1) {
      for (var n = e2 - 1; n >= 1; n--) {
        t.removeChild(t.childNodes[n]);
      }
    } else if (e2 < 1) {
      t.appendChild(t.ownerDocument.createTextNode(""));
    }
    var i = t.childNodes[0];
    i.nodeValue = t.sheet.cssRules.map(function(t2) {
      return t2.cssText;
    }).join("\n");
  }
  function createElement(t, e2) {
    if (typeof e2 !== "string" || e2 === "" || !/^[a-z0-9-_:]+$/i.test(e2)) {
      throw new Error("The tag name provided (".concat(e2, ") is not a valid name."));
    }
    e2 = e2.toLowerCase();
    switch (e2) {
      case "a":
        return new MockAnchorElement(t);
      case "base":
        return new MockBaseElement(t);
      case "button":
        return new MockButtonElement(t);
      case "canvas":
        return new MockCanvasElement(t);
      case "form":
        return new MockFormElement(t);
      case "img":
        return new MockImageElement(t);
      case "input":
        return new MockInputElement(t);
      case "link":
        return new MockLinkElement(t);
      case "meta":
        return new MockMetaElement(t);
      case "script":
        return new MockScriptElement(t);
      case "style":
        return new MockStyleElement(t);
      case "template":
        return new MockTemplateElement(t);
      case "title":
        return new MockTitleElement(t);
      case "ul":
        return new MockUListElement(t);
    }
    if (t != null && e2.includes("-")) {
      var n = t.defaultView;
      if (n != null && n.customElements != null) {
        return createCustomElement(n.customElements, t, e2);
      }
    }
    return new MockHTMLElement(t, e2);
  }
  function createElementNS(t, e2, n) {
    if (e2 === "http://www.w3.org/1999/xhtml") {
      return createElement(t, n);
    } else if (e2 === "http://www.w3.org/2000/svg") {
      switch (n.toLowerCase()) {
        case "text":
        case "tspan":
        case "tref":
        case "altglyph":
        case "textpath":
          return new MockSVGTextContentElement(t, n);
        case "circle":
        case "ellipse":
        case "image":
        case "line":
        case "path":
        case "polygon":
        case "polyline":
        case "rect":
        case "use":
          return new MockSVGGraphicsElement(t, n);
        case "svg":
          return new MockSVGSVGElement(t, n);
        default:
          return new MockSVGElement(t, n);
      }
    } else {
      return new MockElement(t, n, e2);
    }
  }
  function fullUrl(t, e2) {
    var n = t.getAttribute(e2) || "";
    if (t.ownerDocument != null) {
      var i = t.ownerDocument.defaultView;
      if (i != null) {
        var r = i.location;
        if (r != null) {
          try {
            var s = new URL(n, r.href);
            return s.href;
          } catch (t2) {
          }
        }
      }
    }
    return n.replace(/\'|\"/g, "").trim();
  }
  function patchPropAttributes(t, e2, n) {
    if (n === void 0) {
      n = {};
    }
    Object.keys(e2).forEach(function(i) {
      var r = e2[i];
      var s = n[i];
      if (r === Boolean) {
        Object.defineProperty(t, i, { get: function() {
          return this.hasAttribute(i);
        }, set: function(t2) {
          if (t2) {
            this.setAttribute(i, "");
          } else {
            this.removeAttribute(i);
          }
        } });
      } else if (r === Number) {
        Object.defineProperty(t, i, { get: function() {
          var t2 = this.getAttribute(i);
          return t2 ? parseInt(t2, 10) : s === void 0 ? 0 : s;
        }, set: function(t2) {
          this.setAttribute(i, t2);
        } });
      } else {
        Object.defineProperty(t, i, { get: function() {
          return this.hasAttribute(i) ? this.getAttribute(i) : s || "";
        }, set: function(t2) {
          this.setAttribute(i, t2);
        } });
      }
    });
  }
  function parseHtmlToDocument(t, e2) {
    if (e2 === void 0) {
      e2 = null;
    }
    if (e2 == null) {
      if (sharedDocument == null) {
        sharedDocument = new MockDocument();
      }
      e2 = sharedDocument;
    }
    return parseDocumentUtil(e2, t);
  }
  function createConsole() {
    return { debug: consoleNoop, error: consoleNoop, info: consoleNoop, log: consoleNoop, warn: consoleNoop, dir: consoleNoop, dirxml: consoleNoop, table: consoleNoop, trace: consoleNoop, group: consoleNoop, groupCollapsed: consoleNoop, groupEnd: consoleNoop, clear: consoleNoop, count: consoleNoop, countReset: consoleNoop, assert: consoleNoop, profile: consoleNoop, profileEnd: consoleNoop, time: consoleNoop, timeLog: consoleNoop, timeEnd: consoleNoop, timeStamp: consoleNoop, context: consoleNoop, memory: consoleNoop };
  }
  function addGlobalsToWindowPrototype(t) {
    GLOBAL_CONSTRUCTORS.forEach(function(e2) {
      var n = e2[0], i = e2[1];
      Object.defineProperty(t, n, { get: function() {
        return this["__" + n] || i;
      }, set: function(t2) {
        this["__" + n] = t2;
      }, configurable: true, enumerable: true });
    });
  }
  function resetPerformance(t) {
    if (t != null) {
      try {
        t.timeOrigin = Date.now();
      } catch (t2) {
      }
    }
  }
  function resetWindowDefaults(t) {
    t.__clearInterval = nativeClearInterval;
    t.__clearTimeout = nativeClearTimeout;
    t.__setInterval = nativeSetInterval;
    t.__setTimeout = nativeSetTimeout;
    t.__maxTimeout = 3e4;
    t.__allowInterval = true;
    t.URL = nativeURL;
  }
  function resetWindow(t) {
    if (t != null) {
      if (t.__timeouts) {
        t.__timeouts.forEach(function(t2) {
          nativeClearInterval(t2);
          nativeClearTimeout(t2);
        });
        t.__timeouts.clear();
      }
      if (t.customElements && t.customElements.clear) {
        t.customElements.clear();
      }
      resetDocument(t.document);
      resetPerformance(t.performance);
      for (var e2 in t) {
        if (t.hasOwnProperty(e2) && e2 !== "document" && e2 !== "performance" && e2 !== "customElements") {
          delete t[e2];
        }
      }
      resetWindowDefaults(t);
      resetWindowDimensions(t);
      resetEventListeners(t);
      if (t.document != null) {
        try {
          t.document.defaultView = t;
        } catch (t2) {
        }
      }
      t.fetch = null;
      t.Headers = null;
      t.Request = null;
      t.Response = null;
      t.FetchError = null;
    }
  }
  function resetWindowDimensions(t) {
    try {
      t.devicePixelRatio = 1;
      t.innerHeight = 768;
      t.innerWidth = 1366;
      t.pageXOffset = 0;
      t.pageYOffset = 0;
      t.screenLeft = 0;
      t.screenTop = 0;
      t.screenX = 0;
      t.screenY = 0;
      t.scrollX = 0;
      t.scrollY = 0;
      t.screen = { availHeight: t.innerHeight, availLeft: 0, availTop: 0, availWidth: t.innerWidth, colorDepth: 24, height: t.innerHeight, keepAwake: false, orientation: { angle: 0, type: "portrait-primary" }, pixelDepth: 24, width: t.innerWidth };
    } catch (t2) {
    }
  }
  function resetDocument(t) {
    if (t != null) {
      resetEventListeners(t);
      var e2 = t.documentElement;
      if (e2 != null) {
        resetElement(e2);
        for (var n = 0, i = e2.childNodes.length; n < i; n++) {
          var r = e2.childNodes[n];
          resetElement(r);
          r.childNodes.length = 0;
        }
      }
      for (var s in t) {
        if (t.hasOwnProperty(s) && !DOC_KEY_KEEPERS.has(s)) {
          delete t[s];
        }
      }
      try {
        t.nodeName = "#document";
      } catch (t2) {
      }
      try {
        t.nodeType = 9;
      } catch (t2) {
      }
      try {
        t.cookie = "";
      } catch (t2) {
      }
      try {
        t.referrer = "";
      } catch (t2) {
      }
    }
  }
  function getElementById(t, e2) {
    var n = t.children;
    for (var i = 0, r = n.length; i < r; i++) {
      var s = n[i];
      if (s.id === e2) {
        return s;
      }
      var a = getElementById(s, e2);
      if (a != null) {
        return a;
      }
    }
    return null;
  }
  function getElementsByName(t, e2, n) {
    if (n === void 0) {
      n = [];
    }
    var i = t.children;
    for (var r = 0, s = i.length; r < s; r++) {
      var a = i[r];
      if (a.name && a.name.toLowerCase() === e2) {
        n.push(a);
      }
      getElementsByName(a, e2, n);
    }
    return n;
  }
  function setOwnerDocument(t, e2) {
    for (var n = 0, i = t.childNodes.length; n < i; n++) {
      t.childNodes[n].ownerDocument = e2;
      if (t.childNodes[n].nodeType === 1) {
        setOwnerDocument(t.childNodes[n], e2);
      }
    }
  }
  function queryNonceMetaTagContent(t) {
    var e2, n, i;
    return (i = (n = (e2 = t.head) == null ? void 0 : e2.querySelector('meta[name="csp-nonce"]')) == null ? void 0 : n.getAttribute("content")) != null ? i : void 0;
  }
  function map2(t, e2) {
    if (t.isOk) {
      var n = e2(t.value);
      if (n instanceof Promise) {
        return n.then(function(t2) {
          return ok(t2);
        });
      } else {
        return ok(n);
      }
    }
    if (t.isErr) {
      var i = t.value;
      return err(i);
    }
    throw "should never get here";
  }
  function sortedAttrNames(t) {
    return t.includes("ref") ? __spreadArray(__spreadArray([], t.filter(function(t2) {
      return t2 !== "ref";
    }), true), ["ref"], false) : t;
  }
  var NAMESPACE, BUILD, CONTENT_REF_ID$1, ORG_LOCATION_ID$1, SLOT_NODE_ID$1, TEXT_NODE_ID$1, XLINK_NS$1, attrHandler, createAttributeProxy, MockAttributeMap, MockAttr, NODE_TYPES, MockClassList, MockCSSStyleDeclaration, cssProxyHandler, MockCustomElementRegistry, proxyElements, upgradedElements, tempDisableCallbacks, MockEvent, MockCustomEvent, MockKeyboardEvent, MockMouseEvent, MockUIEvent, MockFocusEvent, MockEventListener, e, parse2, parseFragment, docParser, jquery_default, PROBLEMATIC_SELECTORS, AMP_REGEX, NBSP_REGEX, DOUBLE_QUOTE_REGEX, LT_REGEX, GT_REGEX, CAN_REMOVE_ATTR_QUOTES, NON_ESCAPABLE_CONTENT, WHITESPACE_SENSITIVE, EMPTY_ELEMENTS, REMOVE_EMPTY_ATTR, BOOLEAN_ATTR, STRUCTURE_ELEMENTS, MockNode2, MockNodeList, MockElement, MockHTMLElement, MockTextNode, MockComment, MockDocumentFragment, MockDocumentTypeNode, MockCSSRule, MockCSSStyleSheet, MockAnchorElement, MockButtonElement, MockImageElement, MockInputElement, MockFormElement, MockLinkElement, MockMetaElement, MockScriptElement, MockDOMMatrix, MockDOMPoint, MockSVGRect, MockStyleElement, MockSVGElement, MockSVGGraphicsElement, MockSVGSVGElement, MockSVGTextContentElement, MockBaseElement, MockTemplateElement, MockTitleElement, MockUListElement, MockCanvasElement, sharedDocument, consoleNoop, MockHeaders, MockDOMParser, MockRequest, MockResponse, GLOBAL_CONSTRUCTORS, MockHistory, MockIntersectionObserver, MockLocation, MockNavigator, MockPerformance, MockStorage, nativeClearInterval, nativeClearTimeout, nativeSetInterval, nativeSetTimeout, nativeURL, MockWindow, MockDocument, DOC_KEY_KEEPERS, __defProp2, __export2, EMPTY_OBJ2, SVG_NS, HTML_NS, isDef, isComplexType, result_exports, ok, err, unwrap, unwrapErr, createTime, uniqueTime, CONTENT_REF_ID, ORG_LOCATION_ID, SLOT_NODE_ID, TEXT_NODE_ID, HYDRATE_ID, HYDRATED_STYLE_ID, HYDRATE_CHILD_ID, HYDRATED_CSS, SLOT_FB_CSS, XLINK_NS, h, newVNode, Host2, isHost, vdomFnUtils, convertToPublic, convertToPrivate, initializeClientHydrate, clientHydrate, initializeDocumentHydrate, computeMode, setMode, getMode, parsePropertyValue, emitEvent, rootAppliedStyles, registerStyle, addStyle, attachStyles, getScopeId, convertScopedToShadow, setAccessor, parseClassListRegex, parseClassList, CAPTURE_EVENT_SUFFIX, CAPTURE_EVENT_REGEX, updateElement, scopeId, contentRef, hostTagName, useNativeShadowDom, checkSlotFallbackVisibility, checkSlotRelocate, isSvgMode, createElm, relocateToHostRoot, putBackInOriginalLocation, addVnodes, removeVnodes, updateChildren, isSameVnode, referenceNode, parentReferenceNode, patch, updateFallbackSlotVisibility, relocateNodes, markSlotContentForRelocation, isNodeLocatedInSlot, nullifyVNodeRefs, renderVdom, attachToAncestor, scheduleUpdate, dispatchHooks, enqueue, isPromisey, updateComponent, callRender, postUpdateComponent, appDidLoad, safeCall, addHydratedFlag, getValue, setValue, proxyComponent, initializeComponent, fireConnectedCallback, connectedCallback, setContentReference, disconnectInstance, disconnectedCallback, patchPseudoShadowDom, patchCloneNode, patchSlotAppendChild, patchSlotRemoveChild, patchSlotPrepend, patchSlotAppend, patchSlotInsertAdjacentHTML, patchSlotInsertAdjacentText, patchSlotInsertAdjacentElement, patchTextContent, patchChildSlotNodes, getAllChildSlotNodes, getSlotName, getHostSlotNode, getHostSlotChildNodes, bootstrapLazy, addHostEventListeners, hostListenerProxy, getHostListenerTarget, hostListenerOpts, hostRefs, getHostRef, registerHost, isMemberInElement, consoleError, cmpModules, loadModule, styles, modeResolutionChain, win2, doc2, H, plt, setPlatformHelpers, supportsShadow, supportsListenerOptions, promiseResolve, supportsConstructableStylesheets, queuePending, queueDomReads, queueDomWrites, queueTask, consume, flush, nextTick, readTask, writeTask;
  var init_index_5dc2b88e = __esm({
    "node_modules/@ionic/core/dist/esm-es5/index-5dc2b88e.js"() {
      init_tslib_es6();
      NAMESPACE = "ionic";
      BUILD = { allRenderFn: false, appendChildSlotFix: true, asyncLoading: true, asyncQueue: false, attachStyles: true, cloneNodeFix: true, cmpDidLoad: true, cmpDidRender: true, cmpDidUnload: false, cmpDidUpdate: true, cmpShouldUpdate: false, cmpWillLoad: true, cmpWillRender: true, cmpWillUpdate: false, connectedCallback: true, constructableCSS: true, cssAnnotations: true, devTools: false, disconnectedCallback: true, element: false, event: true, experimentalScopedSlotChanges: true, experimentalSlotFixes: true, formAssociated: false, hasRenderFn: true, hostListener: true, hostListenerTarget: true, hostListenerTargetBody: true, hostListenerTargetDocument: true, hostListenerTargetParent: false, hostListenerTargetWindow: true, hotModuleReplacement: false, hydrateClientSide: true, hydrateServerSide: false, hydratedAttribute: false, hydratedClass: true, initializeNextTick: false, invisiblePrehydration: true, isDebug: false, isDev: false, isTesting: false, lazyLoad: true, lifecycle: true, lifecycleDOMEvents: false, member: true, method: true, mode: true, observeAttribute: true, profile: false, prop: true, propBoolean: true, propMutable: true, propNumber: true, propString: true, reflect: true, scoped: true, scopedSlotTextContentFix: true, scriptDataOpts: false, shadowDelegatesFocus: true, shadowDom: true, slot: true, slotChildNodesFix: true, slotRelocation: true, state: true, style: true, svg: true, taskQueue: true, transformTagName: false, updatable: true, vdomAttribute: true, vdomClass: true, vdomFunctional: true, vdomKey: true, vdomListener: true, vdomPropOrAttr: true, vdomRef: true, vdomRender: true, vdomStyle: true, vdomText: true, vdomXlink: true, watchCallback: true };
      CONTENT_REF_ID$1 = "r";
      ORG_LOCATION_ID$1 = "o";
      SLOT_NODE_ID$1 = "s";
      TEXT_NODE_ID$1 = "t";
      XLINK_NS$1 = "http://www.w3.org/1999/xlink";
      attrHandler = { get: function(t, e2) {
        if (e2 in t) {
          return t[e2];
        }
        if (typeof e2 !== "symbol" && !isNaN(e2)) {
          return t.__items[e2];
        }
        return void 0;
      } };
      createAttributeProxy = function(t) {
        return new Proxy(new MockAttributeMap(t), attrHandler);
      };
      MockAttributeMap = function() {
        function t(t2) {
          if (t2 === void 0) {
            t2 = false;
          }
          this.caseInsensitive = t2;
          this.__items = [];
        }
        Object.defineProperty(t.prototype, "length", { get: function() {
          return this.__items.length;
        }, enumerable: false, configurable: true });
        t.prototype.item = function(t2) {
          return this.__items[t2] || null;
        };
        t.prototype.setNamedItem = function(t2) {
          t2.namespaceURI = null;
          this.setNamedItemNS(t2);
        };
        t.prototype.setNamedItemNS = function(t2) {
          if (t2 != null && t2.value != null) {
            t2.value = String(t2.value);
          }
          var e2 = this.__items.find(function(e3) {
            return e3.name === t2.name && e3.namespaceURI === t2.namespaceURI;
          });
          if (e2 != null) {
            e2.value = t2.value;
          } else {
            this.__items.push(t2);
          }
        };
        t.prototype.getNamedItem = function(t2) {
          if (this.caseInsensitive) {
            t2 = t2.toLowerCase();
          }
          return this.getNamedItemNS(null, t2);
        };
        t.prototype.getNamedItemNS = function(t2, e2) {
          t2 = getNamespaceURI(t2);
          return this.__items.find(function(n) {
            return n.name === e2 && getNamespaceURI(n.namespaceURI) === t2;
          }) || null;
        };
        t.prototype.removeNamedItem = function(t2) {
          this.removeNamedItemNS(t2);
        };
        t.prototype.removeNamedItemNS = function(t2) {
          for (var e2 = 0, n = this.__items.length; e2 < n; e2++) {
            if (this.__items[e2].name === t2.name && this.__items[e2].namespaceURI === t2.namespaceURI) {
              this.__items.splice(e2, 1);
              break;
            }
          }
        };
        t.prototype[Symbol.iterator] = function() {
          var t2 = this;
          var e2 = 0;
          return { next: function() {
            return { done: e2 === t2.length, value: t2.item(e2++) };
          } };
        };
        Object.defineProperty(t.prototype, Symbol.toStringTag, { get: function() {
          return "MockAttributeMap";
        }, enumerable: false, configurable: true });
        return t;
      }();
      MockAttr = function() {
        function t(t2, e2, n) {
          if (n === void 0) {
            n = null;
          }
          this._name = t2;
          this._value = String(e2);
          this._namespaceURI = n;
        }
        Object.defineProperty(t.prototype, "name", { get: function() {
          return this._name;
        }, set: function(t2) {
          this._name = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "value", { get: function() {
          return this._value;
        }, set: function(t2) {
          this._value = String(t2);
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "nodeName", { get: function() {
          return this._name;
        }, set: function(t2) {
          this._name = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "nodeValue", { get: function() {
          return this._value;
        }, set: function(t2) {
          this._value = String(t2);
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "namespaceURI", { get: function() {
          return this._namespaceURI;
        }, set: function(t2) {
          this._namespaceURI = t2;
        }, enumerable: false, configurable: true });
        return t;
      }();
      NODE_TYPES = function(t) {
        t[t["ELEMENT_NODE"] = 1] = "ELEMENT_NODE";
        t[t["ATTRIBUTE_NODE"] = 2] = "ATTRIBUTE_NODE";
        t[t["TEXT_NODE"] = 3] = "TEXT_NODE";
        t[t["CDATA_SECTION_NODE"] = 4] = "CDATA_SECTION_NODE";
        t[t["ENTITY_REFERENCE_NODE"] = 5] = "ENTITY_REFERENCE_NODE";
        t[t["ENTITY_NODE"] = 6] = "ENTITY_NODE";
        t[t["PROCESSING_INSTRUCTION_NODE"] = 7] = "PROCESSING_INSTRUCTION_NODE";
        t[t["COMMENT_NODE"] = 8] = "COMMENT_NODE";
        t[t["DOCUMENT_NODE"] = 9] = "DOCUMENT_NODE";
        t[t["DOCUMENT_TYPE_NODE"] = 10] = "DOCUMENT_TYPE_NODE";
        t[t["DOCUMENT_FRAGMENT_NODE"] = 11] = "DOCUMENT_FRAGMENT_NODE";
        t[t["NOTATION_NODE"] = 12] = "NOTATION_NODE";
        return t;
      }(NODE_TYPES || {});
      MockClassList = function() {
        function t(t2) {
          this.elm = t2;
        }
        t.prototype.add = function() {
          var t2 = [];
          for (var e2 = 0; e2 < arguments.length; e2++) {
            t2[e2] = arguments[e2];
          }
          var n = getItems(this.elm);
          var i = false;
          t2.forEach(function(t3) {
            t3 = String(t3);
            validateClass(t3);
            if (n.includes(t3) === false) {
              n.push(t3);
              i = true;
            }
          });
          if (i) {
            this.elm.setAttributeNS(null, "class", n.join(" "));
          }
        };
        t.prototype.remove = function() {
          var t2 = [];
          for (var e2 = 0; e2 < arguments.length; e2++) {
            t2[e2] = arguments[e2];
          }
          var n = getItems(this.elm);
          var i = false;
          t2.forEach(function(t3) {
            t3 = String(t3);
            validateClass(t3);
            var e3 = n.indexOf(t3);
            if (e3 > -1) {
              n.splice(e3, 1);
              i = true;
            }
          });
          if (i) {
            this.elm.setAttributeNS(null, "class", n.filter(function(t3) {
              return t3.length > 0;
            }).join(" "));
          }
        };
        t.prototype.contains = function(t2) {
          t2 = String(t2);
          return getItems(this.elm).includes(t2);
        };
        t.prototype.toggle = function(t2) {
          t2 = String(t2);
          if (this.contains(t2) === true) {
            this.remove(t2);
          } else {
            this.add(t2);
          }
        };
        Object.defineProperty(t.prototype, "length", { get: function() {
          return getItems(this.elm).length;
        }, enumerable: false, configurable: true });
        t.prototype.item = function(t2) {
          return getItems(this.elm)[t2];
        };
        t.prototype.toString = function() {
          return getItems(this.elm).join(" ");
        };
        return t;
      }();
      MockCSSStyleDeclaration = function() {
        function t() {
          this._styles = /* @__PURE__ */ new Map();
        }
        t.prototype.setProperty = function(t2, e2) {
          t2 = jsCaseToCssCase(t2);
          if (e2 == null || e2 === "") {
            this._styles.delete(t2);
          } else {
            this._styles.set(t2, String(e2));
          }
        };
        t.prototype.getPropertyValue = function(t2) {
          t2 = jsCaseToCssCase(t2);
          return String(this._styles.get(t2) || "");
        };
        t.prototype.removeProperty = function(t2) {
          t2 = jsCaseToCssCase(t2);
          this._styles.delete(t2);
        };
        Object.defineProperty(t.prototype, "length", { get: function() {
          return this._styles.size;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "cssText", { get: function() {
          var t2 = [];
          this._styles.forEach(function(e2, n) {
            t2.push("".concat(n, ": ").concat(e2, ";"));
          });
          return t2.join(" ").trim();
        }, set: function(t2) {
          var e2 = this;
          if (t2 == null || t2 === "") {
            this._styles.clear();
            return;
          }
          t2.split(";").forEach(function(t3) {
            t3 = t3.trim();
            if (t3.length > 0) {
              var n = t3.split(":");
              if (n.length > 1) {
                var i = n[0].trim();
                var r = n.slice(1).join(":").trim();
                if (i !== "" && r !== "") {
                  e2._styles.set(jsCaseToCssCase(i), r);
                }
              }
            }
          });
        }, enumerable: false, configurable: true });
        return t;
      }();
      cssProxyHandler = { get: function(t, e2) {
        if (e2 in t) {
          return t[e2];
        }
        e2 = cssCaseToJsCase(e2);
        return t.getPropertyValue(e2);
      }, set: function(t, e2, n) {
        if (e2 in t) {
          t[e2] = n;
        } else {
          t.setProperty(e2, n);
        }
        return true;
      } };
      MockCustomElementRegistry = function() {
        function t(t2) {
          this.win = t2;
        }
        t.prototype.define = function(t2, e2, n) {
          var i = this;
          if (t2.toLowerCase() !== t2) {
            throw new Error(`Failed to execute 'define' on 'CustomElementRegistry': "`.concat(t2, '" is not a valid custom element name'));
          }
          if (this.__registry == null) {
            this.__registry = /* @__PURE__ */ new Map();
          }
          this.__registry.set(t2, { cstr: e2, options: n });
          if (this.__whenDefined != null) {
            var r = this.__whenDefined.get(t2);
            if (r != null) {
              r.forEach(function(t3) {
                t3();
              });
              r.length = 0;
              this.__whenDefined.delete(t2);
            }
          }
          var s = this.win.document;
          if (s != null) {
            var a = s.querySelectorAll(t2);
            a.forEach(function(e3) {
              if (upgradedElements.has(e3) === false) {
                tempDisableCallbacks.add(s);
                var n2 = createCustomElement(i, s, t2);
                for (var r2 = 0; r2 < e3.childNodes.length; r2++) {
                  var a2 = e3.childNodes[r2];
                  a2.remove();
                  n2.appendChild(a2);
                }
                tempDisableCallbacks.delete(s);
                if (proxyElements.has(e3)) {
                  proxyElements.set(e3, n2);
                }
              }
              fireConnectedCallback$1(e3);
            });
          }
        };
        t.prototype.get = function(t2) {
          if (this.__registry != null) {
            var e2 = this.__registry.get(t2.toLowerCase());
            if (e2 != null) {
              return e2.cstr;
            }
          }
          return void 0;
        };
        t.prototype.getName = function(t2) {
          for (var e2 = 0, n = this.__registry.entries(); e2 < n.length; e2++) {
            var i = n[e2], r = i[0], s = i[1];
            if (s.cstr === t2) {
              return r;
            }
          }
          return void 0;
        };
        t.prototype.upgrade = function(t2) {
        };
        t.prototype.clear = function() {
          if (this.__registry != null) {
            this.__registry.clear();
          }
          if (this.__whenDefined != null) {
            this.__whenDefined.clear();
          }
        };
        t.prototype.whenDefined = function(t2) {
          var e2 = this;
          t2 = t2.toLowerCase();
          if (this.__registry != null && this.__registry.has(t2) === true) {
            return Promise.resolve(this.__registry.get(t2).cstr);
          }
          return new Promise(function(n) {
            if (e2.__whenDefined == null) {
              e2.__whenDefined = /* @__PURE__ */ new Map();
            }
            var i = e2.__whenDefined.get(t2);
            if (i == null) {
              i = [];
              e2.__whenDefined.set(t2, i);
            }
            i.push(n);
          });
        };
        return t;
      }();
      proxyElements = /* @__PURE__ */ new WeakMap();
      upgradedElements = /* @__PURE__ */ new WeakSet();
      tempDisableCallbacks = /* @__PURE__ */ new Set();
      MockEvent = function() {
        function t(t2, e2) {
          this.bubbles = false;
          this.cancelBubble = false;
          this.cancelable = false;
          this.composed = false;
          this.currentTarget = null;
          this.defaultPrevented = false;
          this.srcElement = null;
          this.target = null;
          if (typeof t2 !== "string") {
            throw new Error("Event type required");
          }
          this.type = t2;
          this.timeStamp = Date.now();
          if (e2 != null) {
            Object.assign(this, e2);
          }
        }
        t.prototype.preventDefault = function() {
          this.defaultPrevented = true;
        };
        t.prototype.stopPropagation = function() {
          this.cancelBubble = true;
        };
        t.prototype.stopImmediatePropagation = function() {
          this.cancelBubble = true;
        };
        t.prototype.composedPath = function() {
          var t2 = [];
          var e2 = this.target;
          while (e2) {
            t2.push(e2);
            if (!e2.parentElement && e2.nodeName === "#document") {
              t2.push(e2.defaultView);
              break;
            }
            if (e2.parentElement == null && e2.tagName === "HTML") {
              e2 = e2.ownerDocument;
            } else {
              e2 = e2.parentElement;
            }
          }
          return t2;
        };
        return t;
      }();
      MockCustomEvent = function(t) {
        __extends(e2, t);
        function e2(e3, n) {
          var i = t.call(this, e3) || this;
          i.detail = null;
          if (n != null) {
            Object.assign(i, n);
          }
          return i;
        }
        return e2;
      }(MockEvent);
      MockKeyboardEvent = function(t) {
        __extends(e2, t);
        function e2(e3, n) {
          var i = t.call(this, e3) || this;
          i.code = "";
          i.key = "";
          i.altKey = false;
          i.ctrlKey = false;
          i.metaKey = false;
          i.shiftKey = false;
          i.location = 0;
          i.repeat = false;
          if (n != null) {
            Object.assign(i, n);
          }
          return i;
        }
        return e2;
      }(MockEvent);
      MockMouseEvent = function(t) {
        __extends(e2, t);
        function e2(e3, n) {
          var i = t.call(this, e3) || this;
          i.screenX = 0;
          i.screenY = 0;
          i.clientX = 0;
          i.clientY = 0;
          i.ctrlKey = false;
          i.shiftKey = false;
          i.altKey = false;
          i.metaKey = false;
          i.button = 0;
          i.buttons = 0;
          i.relatedTarget = null;
          if (n != null) {
            Object.assign(i, n);
          }
          return i;
        }
        return e2;
      }(MockEvent);
      MockUIEvent = function(t) {
        __extends(e2, t);
        function e2(e3, n) {
          var i = t.call(this, e3) || this;
          i.detail = null;
          i.view = null;
          if (n != null) {
            Object.assign(i, n);
          }
          return i;
        }
        return e2;
      }(MockEvent);
      MockFocusEvent = function(t) {
        __extends(e2, t);
        function e2(e3, n) {
          var i = t.call(this, e3) || this;
          i.relatedTarget = null;
          if (n != null) {
            Object.assign(i, n);
          }
          return i;
        }
        return e2;
      }(MockUIEvent);
      MockEventListener = /* @__PURE__ */ function() {
        function t(t2, e2) {
          this.type = t2;
          this.handler = e2;
        }
        return t;
      }();
      e = function(t) {
        var e2;
        var n = /* @__PURE__ */ new Set([65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110, 1114111]), i = "\uFFFD";
        var r;
        !function(t2) {
          t2[t2.EOF = -1] = "EOF", t2[t2.NULL = 0] = "NULL", t2[t2.TABULATION = 9] = "TABULATION", t2[t2.CARRIAGE_RETURN = 13] = "CARRIAGE_RETURN", t2[t2.LINE_FEED = 10] = "LINE_FEED", t2[t2.FORM_FEED = 12] = "FORM_FEED", t2[t2.SPACE = 32] = "SPACE", t2[t2.EXCLAMATION_MARK = 33] = "EXCLAMATION_MARK", t2[t2.QUOTATION_MARK = 34] = "QUOTATION_MARK", t2[t2.NUMBER_SIGN = 35] = "NUMBER_SIGN", t2[t2.AMPERSAND = 38] = "AMPERSAND", t2[t2.APOSTROPHE = 39] = "APOSTROPHE", t2[t2.HYPHEN_MINUS = 45] = "HYPHEN_MINUS", t2[t2.SOLIDUS = 47] = "SOLIDUS", t2[t2.DIGIT_0 = 48] = "DIGIT_0", t2[t2.DIGIT_9 = 57] = "DIGIT_9", t2[t2.SEMICOLON = 59] = "SEMICOLON", t2[t2.LESS_THAN_SIGN = 60] = "LESS_THAN_SIGN", t2[t2.EQUALS_SIGN = 61] = "EQUALS_SIGN", t2[t2.GREATER_THAN_SIGN = 62] = "GREATER_THAN_SIGN", t2[t2.QUESTION_MARK = 63] = "QUESTION_MARK", t2[t2.LATIN_CAPITAL_A = 65] = "LATIN_CAPITAL_A", t2[t2.LATIN_CAPITAL_F = 70] = "LATIN_CAPITAL_F", t2[t2.LATIN_CAPITAL_X = 88] = "LATIN_CAPITAL_X", t2[t2.LATIN_CAPITAL_Z = 90] = "LATIN_CAPITAL_Z", t2[t2.RIGHT_SQUARE_BRACKET = 93] = "RIGHT_SQUARE_BRACKET", t2[t2.GRAVE_ACCENT = 96] = "GRAVE_ACCENT", t2[t2.LATIN_SMALL_A = 97] = "LATIN_SMALL_A", t2[t2.LATIN_SMALL_F = 102] = "LATIN_SMALL_F", t2[t2.LATIN_SMALL_X = 120] = "LATIN_SMALL_X", t2[t2.LATIN_SMALL_Z = 122] = "LATIN_SMALL_Z", t2[t2.REPLACEMENT_CHARACTER = 65533] = "REPLACEMENT_CHARACTER";
        }(r = r || (r = {}));
        var s = "[CDATA[", a = "doctype", u2 = "script";
        function o(t2) {
          return t2 >= 55296 && t2 <= 57343;
        }
        function c(t2) {
          return 32 !== t2 && 10 !== t2 && 13 !== t2 && 9 !== t2 && 12 !== t2 && t2 >= 1 && t2 <= 31 || t2 >= 127 && t2 <= 159;
        }
        function f(t2) {
          return t2 >= 64976 && t2 <= 65007 || n.has(t2);
        }
        var l, h2;
        !function(t2) {
          t2.controlCharacterInInputStream = "control-character-in-input-stream", t2.noncharacterInInputStream = "noncharacter-in-input-stream", t2.surrogateInInputStream = "surrogate-in-input-stream", t2.nonVoidHtmlElementStartTagWithTrailingSolidus = "non-void-html-element-start-tag-with-trailing-solidus", t2.endTagWithAttributes = "end-tag-with-attributes", t2.endTagWithTrailingSolidus = "end-tag-with-trailing-solidus", t2.unexpectedSolidusInTag = "unexpected-solidus-in-tag", t2.unexpectedNullCharacter = "unexpected-null-character", t2.unexpectedQuestionMarkInsteadOfTagName = "unexpected-question-mark-instead-of-tag-name", t2.invalidFirstCharacterOfTagName = "invalid-first-character-of-tag-name", t2.unexpectedEqualsSignBeforeAttributeName = "unexpected-equals-sign-before-attribute-name", t2.missingEndTagName = "missing-end-tag-name", t2.unexpectedCharacterInAttributeName = "unexpected-character-in-attribute-name", t2.unknownNamedCharacterReference = "unknown-named-character-reference", t2.missingSemicolonAfterCharacterReference = "missing-semicolon-after-character-reference", t2.unexpectedCharacterAfterDoctypeSystemIdentifier = "unexpected-character-after-doctype-system-identifier", t2.unexpectedCharacterInUnquotedAttributeValue = "unexpected-character-in-unquoted-attribute-value", t2.eofBeforeTagName = "eof-before-tag-name", t2.eofInTag = "eof-in-tag", t2.missingAttributeValue = "missing-attribute-value", t2.missingWhitespaceBetweenAttributes = "missing-whitespace-between-attributes", t2.missingWhitespaceAfterDoctypePublicKeyword = "missing-whitespace-after-doctype-public-keyword", t2.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers = "missing-whitespace-between-doctype-public-and-system-identifiers", t2.missingWhitespaceAfterDoctypeSystemKeyword = "missing-whitespace-after-doctype-system-keyword", t2.missingQuoteBeforeDoctypePublicIdentifier = "missing-quote-before-doctype-public-identifier", t2.missingQuoteBeforeDoctypeSystemIdentifier = "missing-quote-before-doctype-system-identifier", t2.missingDoctypePublicIdentifier = "missing-doctype-public-identifier", t2.missingDoctypeSystemIdentifier = "missing-doctype-system-identifier", t2.abruptDoctypePublicIdentifier = "abrupt-doctype-public-identifier", t2.abruptDoctypeSystemIdentifier = "abrupt-doctype-system-identifier", t2.cdataInHtmlContent = "cdata-in-html-content", t2.incorrectlyOpenedComment = "incorrectly-opened-comment", t2.eofInScriptHtmlCommentLikeText = "eof-in-script-html-comment-like-text", t2.eofInDoctype = "eof-in-doctype", t2.nestedComment = "nested-comment", t2.abruptClosingOfEmptyComment = "abrupt-closing-of-empty-comment", t2.eofInComment = "eof-in-comment", t2.incorrectlyClosedComment = "incorrectly-closed-comment", t2.eofInCdata = "eof-in-cdata", t2.absenceOfDigitsInNumericCharacterReference = "absence-of-digits-in-numeric-character-reference", t2.nullCharacterReference = "null-character-reference", t2.surrogateCharacterReference = "surrogate-character-reference", t2.characterReferenceOutsideUnicodeRange = "character-reference-outside-unicode-range", t2.controlCharacterReference = "control-character-reference", t2.noncharacterCharacterReference = "noncharacter-character-reference", t2.missingWhitespaceBeforeDoctypeName = "missing-whitespace-before-doctype-name", t2.missingDoctypeName = "missing-doctype-name", t2.invalidCharacterSequenceAfterDoctypeName = "invalid-character-sequence-after-doctype-name", t2.duplicateAttribute = "duplicate-attribute", t2.nonConformingDoctype = "non-conforming-doctype", t2.missingDoctype = "missing-doctype", t2.misplacedDoctype = "misplaced-doctype", t2.endTagWithoutMatchingOpenElement = "end-tag-without-matching-open-element", t2.closingOfElementWithOpenChildElements = "closing-of-element-with-open-child-elements", t2.disallowedContentInNoscriptInHead = "disallowed-content-in-noscript-in-head", t2.openElementsLeftAfterEof = "open-elements-left-after-eof", t2.abandonedHeadElementChild = "abandoned-head-element-child", t2.misplacedStartTagForHeadElement = "misplaced-start-tag-for-head-element", t2.nestedNoscriptInHead = "nested-noscript-in-head", t2.eofInElementThatCanContainOnlyText = "eof-in-element-that-can-contain-only-text";
        }(l = l || (l = {}));
        var d = function() {
          function t2(t3) {
            this.handler = t3, this.html = "", this.pos = -1, this.lastGapPos = -2, this.gapStack = [], this.skipNextNewLine = false, this.lastChunkWritten = false, this.endOfChunkHit = false, this.bufferWaterline = 65536, this.isEol = false, this.lineStartPos = 0, this.droppedBufferSize = 0, this.line = 1, this.lastErrOffset = -1;
          }
          Object.defineProperty(t2.prototype, "col", { get: function() {
            return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);
          }, enumerable: false, configurable: true });
          Object.defineProperty(t2.prototype, "offset", { get: function() {
            return this.droppedBufferSize + this.pos;
          }, enumerable: false, configurable: true });
          t2.prototype.getError = function(t3) {
            var e3 = this, n2 = e3.line, i2 = e3.col, r2 = e3.offset;
            return { code: t3, startLine: n2, endLine: n2, startCol: i2, endCol: i2, startOffset: r2, endOffset: r2 };
          };
          t2.prototype._err = function(t3) {
            this.handler.onParseError && this.lastErrOffset !== this.offset && (this.lastErrOffset = this.offset, this.handler.onParseError(this.getError(t3)));
          };
          t2.prototype._addGap = function() {
            this.gapStack.push(this.lastGapPos), this.lastGapPos = this.pos;
          };
          t2.prototype._processSurrogate = function(t3) {
            if (this.pos !== this.html.length - 1) {
              var e3 = this.html.charCodeAt(this.pos + 1);
              if (function(t4) {
                return t4 >= 56320 && t4 <= 57343;
              }(e3))
                return this.pos++, this._addGap(), 1024 * (t3 - 55296) + 9216 + e3;
            } else if (!this.lastChunkWritten)
              return this.endOfChunkHit = true, r.EOF;
            return this._err(l.surrogateInInputStream), t3;
          };
          t2.prototype.willDropParsedChunk = function() {
            return this.pos > this.bufferWaterline;
          };
          t2.prototype.dropParsedChunk = function() {
            this.willDropParsedChunk() && (this.html = this.html.substring(this.pos), this.lineStartPos -= this.pos, this.droppedBufferSize += this.pos, this.pos = 0, this.lastGapPos = -2, this.gapStack.length = 0);
          };
          t2.prototype.write = function(t3, e3) {
            this.html.length > 0 ? this.html += t3 : this.html = t3, this.endOfChunkHit = false, this.lastChunkWritten = e3;
          };
          t2.prototype.insertHtmlAtCurrentPos = function(t3) {
            this.html = this.html.substring(0, this.pos + 1) + t3 + this.html.substring(this.pos + 1), this.endOfChunkHit = false;
          };
          t2.prototype.startsWith = function(t3, e3) {
            if (this.pos + t3.length > this.html.length)
              return this.endOfChunkHit = !this.lastChunkWritten, false;
            if (e3)
              return this.html.startsWith(t3, this.pos);
            for (var n2 = 0; n2 < t3.length; n2++)
              if ((32 | this.html.charCodeAt(this.pos + n2)) !== t3.charCodeAt(n2))
                return false;
            return true;
          };
          t2.prototype.peek = function(t3) {
            var e3 = this.pos + t3;
            if (e3 >= this.html.length)
              return this.endOfChunkHit = !this.lastChunkWritten, r.EOF;
            var n2 = this.html.charCodeAt(e3);
            return n2 === r.CARRIAGE_RETURN ? r.LINE_FEED : n2;
          };
          t2.prototype.advance = function() {
            if (this.pos++, this.isEol && (this.isEol = false, this.line++, this.lineStartPos = this.pos), this.pos >= this.html.length)
              return this.endOfChunkHit = !this.lastChunkWritten, r.EOF;
            var t3 = this.html.charCodeAt(this.pos);
            return t3 === r.CARRIAGE_RETURN ? (this.isEol = true, this.skipNextNewLine = true, r.LINE_FEED) : t3 === r.LINE_FEED && (this.isEol = true, this.skipNextNewLine) ? (this.line--, this.skipNextNewLine = false, this._addGap(), this.advance()) : (this.skipNextNewLine = false, o(t3) && (t3 = this._processSurrogate(t3)), null === this.handler.onParseError || t3 > 31 && t3 < 127 || t3 === r.LINE_FEED || t3 === r.CARRIAGE_RETURN || t3 > 159 && t3 < 64976 || this._checkForProblematicCharacters(t3), t3);
          };
          t2.prototype._checkForProblematicCharacters = function(t3) {
            c(t3) ? this._err(l.controlCharacterInInputStream) : f(t3) && this._err(l.noncharacterInInputStream);
          };
          t2.prototype.retreat = function(t3) {
            for (this.pos -= t3; this.pos < this.lastGapPos; )
              this.lastGapPos = this.gapStack.pop(), this.pos--;
            this.isEol = false;
          };
          return t2;
        }();
        function v(t2, e3) {
          for (var n2 = t2.attrs.length - 1; n2 >= 0; n2--)
            if (t2.attrs[n2].name === e3)
              return t2.attrs[n2].value;
          return null;
        }
        !function(t2) {
          t2[t2.CHARACTER = 0] = "CHARACTER", t2[t2.NULL_CHARACTER = 1] = "NULL_CHARACTER", t2[t2.WHITESPACE_CHARACTER = 2] = "WHITESPACE_CHARACTER", t2[t2.START_TAG = 3] = "START_TAG", t2[t2.END_TAG = 4] = "END_TAG", t2[t2.COMMENT = 5] = "COMMENT", t2[t2.DOCTYPE = 6] = "DOCTYPE", t2[t2.EOF = 7] = "EOF", t2[t2.HIBERNATION = 8] = "HIBERNATION";
        }(h2 = h2 || (h2 = {}));
        var b = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {}, m = {}, p = {};
        Object.defineProperty(p, "__esModule", { value: true }), p.default = new Uint16Array('\u1D41<\xD5\u0131\u028A\u049D\u057B\u05D0\u0675\u06DE\u07A2\u07D6\u080F\u0A4A\u0A91\u0DA1\u0E6D\u0F09\u0F26\u10CA\u1228\u12E1\u1415\u149D\u14C3\u14DF\u1525\0\0\0\0\0\0\u156B\u16CD\u198D\u1C12\u1DDD\u1F7E\u2060\u21B0\u228D\u23C0\u23FB\u2442\u2824\u2912\u2D08\u2E48\u2FCE\u3016\u32BA\u3639\u37AC\u38FE\u3A28\u3A71\u3AE0\u3B2E\u0800EMabcfglmnoprstu\\bfms\x7F\x84\x8B\x90\x95\x98\xA6\xB3\xB9\xC8\xCFlig\u803B\xC6\u40C6P\u803B&\u4026cute\u803B\xC1\u40C1reve;\u4102\u0100iyx}rc\u803B\xC2\u40C2;\u4410r;\uC000\u{1D504}rave\u803B\xC0\u40C0pha;\u4391acr;\u4100d;\u6A53\u0100gp\x9D\xA1on;\u4104f;\uC000\u{1D538}plyFunction;\u6061ing\u803B\xC5\u40C5\u0100cs\xBE\xC3r;\uC000\u{1D49C}ign;\u6254ilde\u803B\xC3\u40C3ml\u803B\xC4\u40C4\u0400aceforsu\xE5\xFB\xFE\u0117\u011C\u0122\u0127\u012A\u0100cr\xEA\xF2kslash;\u6216\u0176\xF6\xF8;\u6AE7ed;\u6306y;\u4411\u0180crt\u0105\u010B\u0114ause;\u6235noullis;\u612Ca;\u4392r;\uC000\u{1D505}pf;\uC000\u{1D539}eve;\u42D8c\xF2\u0113mpeq;\u624E\u0700HOacdefhilorsu\u014D\u0151\u0156\u0180\u019E\u01A2\u01B5\u01B7\u01BA\u01DC\u0215\u0273\u0278\u027Ecy;\u4427PY\u803B\xA9\u40A9\u0180cpy\u015D\u0162\u017Aute;\u4106\u0100;i\u0167\u0168\u62D2talDifferentialD;\u6145leys;\u612D\u0200aeio\u0189\u018E\u0194\u0198ron;\u410Cdil\u803B\xC7\u40C7rc;\u4108nint;\u6230ot;\u410A\u0100dn\u01A7\u01ADilla;\u40B8terDot;\u40B7\xF2\u017Fi;\u43A7rcle\u0200DMPT\u01C7\u01CB\u01D1\u01D6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01E2\u01F8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020FoubleQuote;\u601Duote;\u6019\u0200lnpu\u021E\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6A74\u0180git\u022F\u0236\u023Aruent;\u6261nt;\u622FourIntegral;\u622E\u0100fr\u024C\u024E;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6A2Fcr;\uC000\u{1D49E}p\u0100;C\u0284\u0285\u62D3ap;\u624D\u0580DJSZacefios\u02A0\u02AC\u02B0\u02B4\u02B8\u02CB\u02D7\u02E1\u02E6\u0333\u048D\u0100;o\u0179\u02A5trahd;\u6911cy;\u4402cy;\u4405cy;\u440F\u0180grs\u02BF\u02C4\u02C7ger;\u6021r;\u61A1hv;\u6AE4\u0100ay\u02D0\u02D5ron;\u410E;\u4414l\u0100;t\u02DD\u02DE\u6207a;\u4394r;\uC000\u{1D507}\u0100af\u02EB\u0327\u0100cm\u02F0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031Ccute;\u40B4o\u0174\u030B\u030D;\u42D9bleAcute;\u42DDrave;\u4060ilde;\u42DCond;\u62C4ferentialD;\u6146\u0470\u033D\0\0\0\u0342\u0354\0\u0405f;\uC000\u{1D53B}\u0180;DE\u0348\u0349\u034D\u40A8ot;\u60DCqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03CF\u03E2\u03F8ontourIntegra\xEC\u0239o\u0274\u0379\0\0\u037B\xBB\u0349nArrow;\u61D3\u0100eo\u0387\u03A4ft\u0180ART\u0390\u0396\u03A1rrow;\u61D0ightArrow;\u61D4e\xE5\u02CAng\u0100LR\u03AB\u03C4eft\u0100AR\u03B3\u03B9rrow;\u67F8ightArrow;\u67FAightArrow;\u67F9ight\u0100AT\u03D8\u03DErrow;\u61D2ee;\u62A8p\u0241\u03E9\0\0\u03EFrrow;\u61D1ownArrow;\u61D5erticalBar;\u6225n\u0300ABLRTa\u0412\u042A\u0430\u045E\u047F\u037Crrow\u0180;BU\u041D\u041E\u0422\u6193ar;\u6913pArrow;\u61F5reve;\u4311eft\u02D2\u043A\0\u0446\0\u0450ightVector;\u6950eeVector;\u695Eector\u0100;B\u0459\u045A\u61BDar;\u6956ight\u01D4\u0467\0\u0471eeVector;\u695Fector\u0100;B\u047A\u047B\u61C1ar;\u6957ee\u0100;A\u0486\u0487\u62A4rrow;\u61A7\u0100ct\u0492\u0497r;\uC000\u{1D49F}rok;\u4110\u0800NTacdfglmopqstux\u04BD\u04C0\u04C4\u04CB\u04DE\u04E2\u04E7\u04EE\u04F5\u0521\u052F\u0536\u0552\u055D\u0560\u0565G;\u414AH\u803B\xD0\u40D0cute\u803B\xC9\u40C9\u0180aiy\u04D2\u04D7\u04DCron;\u411Arc\u803B\xCA\u40CA;\u442Dot;\u4116r;\uC000\u{1D508}rave\u803B\xC8\u40C8ement;\u6208\u0100ap\u04FA\u04FEcr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65FBerySmallSquare;\u65AB\u0100gp\u0526\u052Aon;\u4118f;\uC000\u{1D53C}silon;\u4395u\u0100ai\u053C\u0549l\u0100;T\u0542\u0543\u6A75ilde;\u6242librium;\u61CC\u0100ci\u0557\u055Ar;\u6130m;\u6A73a;\u4397ml\u803B\xCB\u40CB\u0100ip\u056A\u056Fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058D\u05B2\u05CCy;\u4424r;\uC000\u{1D509}lled\u0253\u0597\0\0\u05A3mallSquare;\u65FCerySmallSquare;\u65AA\u0370\u05BA\0\u05BF\0\0\u05C4f;\uC000\u{1D53D}All;\u6200riertrf;\u6131c\xF2\u05CB\u0600JTabcdfgorst\u05E8\u05EC\u05EF\u05FA\u0600\u0612\u0616\u061B\u061D\u0623\u066C\u0672cy;\u4403\u803B>\u403Emma\u0100;d\u05F7\u05F8\u4393;\u43DCreve;\u411E\u0180eiy\u0607\u060C\u0610dil;\u4122rc;\u411C;\u4413ot;\u4120r;\uC000\u{1D50A};\u62D9pf;\uC000\u{1D53E}eater\u0300EFGLST\u0635\u0644\u064E\u0656\u065B\u0666qual\u0100;L\u063E\u063F\u6265ess;\u62DBullEqual;\u6267reater;\u6AA2ess;\u6277lantEqual;\u6A7Eilde;\u6273cr;\uC000\u{1D4A2};\u626B\u0400Aacfiosu\u0685\u068B\u0696\u069B\u069E\u06AA\u06BE\u06CARDcy;\u442A\u0100ct\u0690\u0694ek;\u42C7;\u405Eirc;\u4124r;\u610ClbertSpace;\u610B\u01F0\u06AF\0\u06B2f;\u610DizontalLine;\u6500\u0100ct\u06C3\u06C5\xF2\u06A9rok;\u4126mp\u0144\u06D0\u06D8ownHum\xF0\u012Fqual;\u624F\u0700EJOacdfgmnostu\u06FA\u06FE\u0703\u0707\u070E\u071A\u071E\u0721\u0728\u0744\u0778\u078B\u078F\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803B\xCD\u40CD\u0100iy\u0713\u0718rc\u803B\xCE\u40CE;\u4418ot;\u4130r;\u6111rave\u803B\xCC\u40CC\u0180;ap\u0720\u072F\u073F\u0100cg\u0734\u0737r;\u412AinaryI;\u6148lie\xF3\u03DD\u01F4\u0749\0\u0762\u0100;e\u074D\u074E\u622C\u0100gr\u0753\u0758ral;\u622Bsection;\u62C2isible\u0100CT\u076C\u0772omma;\u6063imes;\u6062\u0180gpt\u077F\u0783\u0788on;\u412Ef;\uC000\u{1D540}a;\u4399cr;\u6110ilde;\u4128\u01EB\u079A\0\u079Ecy;\u4406l\u803B\xCF\u40CF\u0280cfosu\u07AC\u07B7\u07BC\u07C2\u07D0\u0100iy\u07B1\u07B5rc;\u4134;\u4419r;\uC000\u{1D50D}pf;\uC000\u{1D541}\u01E3\u07C7\0\u07CCr;\uC000\u{1D4A5}rcy;\u4408kcy;\u4404\u0380HJacfos\u07E4\u07E8\u07EC\u07F1\u07FD\u0802\u0808cy;\u4425cy;\u440Cppa;\u439A\u0100ey\u07F6\u07FBdil;\u4136;\u441Ar;\uC000\u{1D50E}pf;\uC000\u{1D542}cr;\uC000\u{1D4A6}\u0580JTaceflmost\u0825\u0829\u082C\u0850\u0863\u09B3\u09B8\u09C7\u09CD\u0A37\u0A47cy;\u4409\u803B<\u403C\u0280cmnpr\u0837\u083C\u0841\u0844\u084Dute;\u4139bda;\u439Bg;\u67EAlacetrf;\u6112r;\u619E\u0180aey\u0857\u085C\u0861ron;\u413Ddil;\u413B;\u441B\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087E\u08A9\u08B1\u08E0\u08E6\u08FC\u092F\u095B\u0390\u096A\u0100nr\u0883\u088FgleBracket;\u67E8row\u0180;BR\u0899\u089A\u089E\u6190ar;\u61E4ightArrow;\u61C6eiling;\u6308o\u01F5\u08B7\0\u08C3bleBracket;\u67E6n\u01D4\u08C8\0\u08D2eeVector;\u6961ector\u0100;B\u08DB\u08DC\u61C3ar;\u6959loor;\u630Aight\u0100AV\u08EF\u08F5rrow;\u6194ector;\u694E\u0100er\u0901\u0917e\u0180;AV\u0909\u090A\u0910\u62A3rrow;\u61A4ector;\u695Aiangle\u0180;BE\u0924\u0925\u0929\u62B2ar;\u69CFqual;\u62B4p\u0180DTV\u0937\u0942\u094CownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61BFar;\u6958ector\u0100;B\u0965\u0966\u61BCar;\u6952ight\xE1\u039Cs\u0300EFGLST\u097E\u098B\u0995\u099D\u09A2\u09ADqualGreater;\u62DAullEqual;\u6266reater;\u6276ess;\u6AA1lantEqual;\u6A7Dilde;\u6272r;\uC000\u{1D50F}\u0100;e\u09BD\u09BE\u62D8ftarrow;\u61DAidot;\u413F\u0180npw\u09D4\u0A16\u0A1Bg\u0200LRlr\u09DE\u09F7\u0A02\u0A10eft\u0100AR\u09E6\u09ECrrow;\u67F5ightArrow;\u67F7ightArrow;\u67F6eft\u0100ar\u03B3\u0A0Aight\xE1\u03BFight\xE1\u03CAf;\uC000\u{1D543}er\u0100LR\u0A22\u0A2CeftArrow;\u6199ightArrow;\u6198\u0180cht\u0A3E\u0A40\u0A42\xF2\u084C;\u61B0rok;\u4141;\u626A\u0400acefiosu\u0A5A\u0A5D\u0A60\u0A77\u0A7C\u0A85\u0A8B\u0A8Ep;\u6905y;\u441C\u0100dl\u0A65\u0A6FiumSpace;\u605Flintrf;\u6133r;\uC000\u{1D510}nusPlus;\u6213pf;\uC000\u{1D544}c\xF2\u0A76;\u439C\u0480Jacefostu\u0AA3\u0AA7\u0AAD\u0AC0\u0B14\u0B19\u0D91\u0D97\u0D9Ecy;\u440Acute;\u4143\u0180aey\u0AB4\u0AB9\u0ABEron;\u4147dil;\u4145;\u441D\u0180gsw\u0AC7\u0AF0\u0B0Eative\u0180MTV\u0AD3\u0ADF\u0AE8ediumSpace;\u600Bhi\u0100cn\u0AE6\u0AD8\xEB\u0AD9eryThi\xEE\u0AD9ted\u0100GL\u0AF8\u0B06reaterGreate\xF2\u0673essLes\xF3\u0A48Line;\u400Ar;\uC000\u{1D511}\u0200Bnpt\u0B22\u0B28\u0B37\u0B3Areak;\u6060BreakingSpace;\u40A0f;\u6115\u0680;CDEGHLNPRSTV\u0B55\u0B56\u0B6A\u0B7C\u0BA1\u0BEB\u0C04\u0C5E\u0C84\u0CA6\u0CD8\u0D61\u0D85\u6AEC\u0100ou\u0B5B\u0B64ngruent;\u6262pCap;\u626DoubleVerticalBar;\u6226\u0180lqx\u0B83\u0B8A\u0B9Bement;\u6209ual\u0100;T\u0B92\u0B93\u6260ilde;\uC000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0BB6\u0BB7\u0BBD\u0BC9\u0BD3\u0BD8\u0BE5\u626Fqual;\u6271ullEqual;\uC000\u2267\u0338reater;\uC000\u226B\u0338ess;\u6279lantEqual;\uC000\u2A7E\u0338ilde;\u6275ump\u0144\u0BF2\u0BFDownHump;\uC000\u224E\u0338qual;\uC000\u224F\u0338e\u0100fs\u0C0A\u0C27tTriangle\u0180;BE\u0C1A\u0C1B\u0C21\u62EAar;\uC000\u29CF\u0338qual;\u62ECs\u0300;EGLST\u0C35\u0C36\u0C3C\u0C44\u0C4B\u0C58\u626Equal;\u6270reater;\u6278ess;\uC000\u226A\u0338lantEqual;\uC000\u2A7D\u0338ilde;\u6274ested\u0100GL\u0C68\u0C79reaterGreater;\uC000\u2AA2\u0338essLess;\uC000\u2AA1\u0338recedes\u0180;ES\u0C92\u0C93\u0C9B\u6280qual;\uC000\u2AAF\u0338lantEqual;\u62E0\u0100ei\u0CAB\u0CB9verseElement;\u620CghtTriangle\u0180;BE\u0CCB\u0CCC\u0CD2\u62EBar;\uC000\u29D0\u0338qual;\u62ED\u0100qu\u0CDD\u0D0CuareSu\u0100bp\u0CE8\u0CF9set\u0100;E\u0CF0\u0CF3\uC000\u228F\u0338qual;\u62E2erset\u0100;E\u0D03\u0D06\uC000\u2290\u0338qual;\u62E3\u0180bcp\u0D13\u0D24\u0D4Eset\u0100;E\u0D1B\u0D1E\uC000\u2282\u20D2qual;\u6288ceeds\u0200;EST\u0D32\u0D33\u0D3B\u0D46\u6281qual;\uC000\u2AB0\u0338lantEqual;\u62E1ilde;\uC000\u227F\u0338erset\u0100;E\u0D58\u0D5B\uC000\u2283\u20D2qual;\u6289ilde\u0200;EFT\u0D6E\u0D6F\u0D75\u0D7F\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uC000\u{1D4A9}ilde\u803B\xD1\u40D1;\u439D\u0700Eacdfgmoprstuv\u0DBD\u0DC2\u0DC9\u0DD5\u0DDB\u0DE0\u0DE7\u0DFC\u0E02\u0E20\u0E22\u0E32\u0E3F\u0E44lig;\u4152cute\u803B\xD3\u40D3\u0100iy\u0DCE\u0DD3rc\u803B\xD4\u40D4;\u441Eblac;\u4150r;\uC000\u{1D512}rave\u803B\xD2\u40D2\u0180aei\u0DEE\u0DF2\u0DF6cr;\u414Cga;\u43A9cron;\u439Fpf;\uC000\u{1D546}enCurly\u0100DQ\u0E0E\u0E1AoubleQuote;\u601Cuote;\u6018;\u6A54\u0100cl\u0E27\u0E2Cr;\uC000\u{1D4AA}ash\u803B\xD8\u40D8i\u016C\u0E37\u0E3Cde\u803B\xD5\u40D5es;\u6A37ml\u803B\xD6\u40D6er\u0100BP\u0E4B\u0E60\u0100ar\u0E50\u0E53r;\u603Eac\u0100ek\u0E5A\u0E5C;\u63DEet;\u63B4arenthesis;\u63DC\u0480acfhilors\u0E7F\u0E87\u0E8A\u0E8F\u0E92\u0E94\u0E9D\u0EB0\u0EFCrtialD;\u6202y;\u441Fr;\uC000\u{1D513}i;\u43A6;\u43A0usMinus;\u40B1\u0100ip\u0EA2\u0EADncareplan\xE5\u069Df;\u6119\u0200;eio\u0EB9\u0EBA\u0EE0\u0EE4\u6ABBcedes\u0200;EST\u0EC8\u0EC9\u0ECF\u0EDA\u627Aqual;\u6AAFlantEqual;\u627Cilde;\u627Eme;\u6033\u0100dp\u0EE9\u0EEEuct;\u620Fortion\u0100;a\u0225\u0EF9l;\u621D\u0100ci\u0F01\u0F06r;\uC000\u{1D4AB};\u43A8\u0200Ufos\u0F11\u0F16\u0F1B\u0F1FOT\u803B"\u4022r;\uC000\u{1D514}pf;\u611Acr;\uC000\u{1D4AC}\u0600BEacefhiorsu\u0F3E\u0F43\u0F47\u0F60\u0F73\u0FA7\u0FAA\u0FAD\u1096\u10A9\u10B4\u10BEarr;\u6910G\u803B\xAE\u40AE\u0180cnr\u0F4E\u0F53\u0F56ute;\u4154g;\u67EBr\u0100;t\u0F5C\u0F5D\u61A0l;\u6916\u0180aey\u0F67\u0F6C\u0F71ron;\u4158dil;\u4156;\u4420\u0100;v\u0F78\u0F79\u611Cerse\u0100EU\u0F82\u0F99\u0100lq\u0F87\u0F8Eement;\u620Builibrium;\u61CBpEquilibrium;\u696Fr\xBB\u0F79o;\u43A1ght\u0400ACDFTUVa\u0FC1\u0FEB\u0FF3\u1022\u1028\u105B\u1087\u03D8\u0100nr\u0FC6\u0FD2gleBracket;\u67E9row\u0180;BL\u0FDC\u0FDD\u0FE1\u6192ar;\u61E5eftArrow;\u61C4eiling;\u6309o\u01F5\u0FF9\0\u1005bleBracket;\u67E7n\u01D4\u100A\0\u1014eeVector;\u695Dector\u0100;B\u101D\u101E\u61C2ar;\u6955loor;\u630B\u0100er\u102D\u1043e\u0180;AV\u1035\u1036\u103C\u62A2rrow;\u61A6ector;\u695Biangle\u0180;BE\u1050\u1051\u1055\u62B3ar;\u69D0qual;\u62B5p\u0180DTV\u1063\u106E\u1078ownVector;\u694FeeVector;\u695Cector\u0100;B\u1082\u1083\u61BEar;\u6954ector\u0100;B\u1091\u1092\u61C0ar;\u6953\u0100pu\u109B\u109Ef;\u611DndImplies;\u6970ightarrow;\u61DB\u0100ch\u10B9\u10BCr;\u611B;\u61B1leDelayed;\u69F4\u0680HOacfhimoqstu\u10E4\u10F1\u10F7\u10FD\u1119\u111E\u1151\u1156\u1161\u1167\u11B5\u11BB\u11BF\u0100Cc\u10E9\u10EEHcy;\u4429y;\u4428FTcy;\u442Ccute;\u415A\u0280;aeiy\u1108\u1109\u110E\u1113\u1117\u6ABCron;\u4160dil;\u415Erc;\u415C;\u4421r;\uC000\u{1D516}ort\u0200DLRU\u112A\u1134\u113E\u1149ownArrow\xBB\u041EeftArrow\xBB\u089AightArrow\xBB\u0FDDpArrow;\u6191gma;\u43A3allCircle;\u6218pf;\uC000\u{1D54A}\u0272\u116D\0\0\u1170t;\u621Aare\u0200;ISU\u117B\u117C\u1189\u11AF\u65A1ntersection;\u6293u\u0100bp\u118F\u119Eset\u0100;E\u1197\u1198\u628Fqual;\u6291erset\u0100;E\u11A8\u11A9\u6290qual;\u6292nion;\u6294cr;\uC000\u{1D4AE}ar;\u62C6\u0200bcmp\u11C8\u11DB\u1209\u120B\u0100;s\u11CD\u11CE\u62D0et\u0100;E\u11CD\u11D5qual;\u6286\u0100ch\u11E0\u1205eeds\u0200;EST\u11ED\u11EE\u11F4\u11FF\u627Bqual;\u6AB0lantEqual;\u627Dilde;\u627FTh\xE1\u0F8C;\u6211\u0180;es\u1212\u1213\u1223\u62D1rset\u0100;E\u121C\u121D\u6283qual;\u6287et\xBB\u1213\u0580HRSacfhiors\u123E\u1244\u1249\u1255\u125E\u1271\u1276\u129F\u12C2\u12C8\u12D1ORN\u803B\xDE\u40DEADE;\u6122\u0100Hc\u124E\u1252cy;\u440By;\u4426\u0100bu\u125A\u125C;\u4009;\u43A4\u0180aey\u1265\u126A\u126Fron;\u4164dil;\u4162;\u4422r;\uC000\u{1D517}\u0100ei\u127B\u1289\u01F2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128E\u1298kSpace;\uC000\u205F\u200ASpace;\u6009lde\u0200;EFT\u12AB\u12AC\u12B2\u12BC\u623Cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uC000\u{1D54B}ipleDot;\u60DB\u0100ct\u12D6\u12DBr;\uC000\u{1D4AF}rok;\u4166\u0AE1\u12F7\u130E\u131A\u1326\0\u132C\u1331\0\0\0\0\0\u1338\u133D\u1377\u1385\0\u13FF\u1404\u140A\u1410\u0100cr\u12FB\u1301ute\u803B\xDA\u40DAr\u0100;o\u1307\u1308\u619Fcir;\u6949r\u01E3\u1313\0\u1316y;\u440Eve;\u416C\u0100iy\u131E\u1323rc\u803B\xDB\u40DB;\u4423blac;\u4170r;\uC000\u{1D518}rave\u803B\xD9\u40D9acr;\u416A\u0100di\u1341\u1369er\u0100BP\u1348\u135D\u0100ar\u134D\u1350r;\u405Fac\u0100ek\u1357\u1359;\u63DFet;\u63B5arenthesis;\u63DDon\u0100;P\u1370\u1371\u62C3lus;\u628E\u0100gp\u137B\u137Fon;\u4172f;\uC000\u{1D54C}\u0400ADETadps\u1395\u13AE\u13B8\u13C4\u03E8\u13D2\u13D7\u13F3rrow\u0180;BD\u1150\u13A0\u13A4ar;\u6912ownArrow;\u61C5ownArrow;\u6195quilibrium;\u696Eee\u0100;A\u13CB\u13CC\u62A5rrow;\u61A5own\xE1\u03F3er\u0100LR\u13DE\u13E8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13F9\u13FA\u43D2on;\u43A5ing;\u416Ecr;\uC000\u{1D4B0}ilde;\u4168ml\u803B\xDC\u40DC\u0480Dbcdefosv\u1427\u142C\u1430\u1433\u143E\u1485\u148A\u1490\u1496ash;\u62ABar;\u6AEBy;\u4412ash\u0100;l\u143B\u143C\u62A9;\u6AE6\u0100er\u1443\u1445;\u62C1\u0180bty\u144C\u1450\u147Aar;\u6016\u0100;i\u144F\u1455cal\u0200BLST\u1461\u1465\u146A\u1474ar;\u6223ine;\u407Ceparator;\u6758ilde;\u6240ThinSpace;\u600Ar;\uC000\u{1D519}pf;\uC000\u{1D54D}cr;\uC000\u{1D4B1}dash;\u62AA\u0280cefos\u14A7\u14AC\u14B1\u14B6\u14BCirc;\u4174dge;\u62C0r;\uC000\u{1D51A}pf;\uC000\u{1D54E}cr;\uC000\u{1D4B2}\u0200fios\u14CB\u14D0\u14D2\u14D8r;\uC000\u{1D51B};\u439Epf;\uC000\u{1D54F}cr;\uC000\u{1D4B3}\u0480AIUacfosu\u14F1\u14F5\u14F9\u14FD\u1504\u150F\u1514\u151A\u1520cy;\u442Fcy;\u4407cy;\u442Ecute\u803B\xDD\u40DD\u0100iy\u1509\u150Drc;\u4176;\u442Br;\uC000\u{1D51C}pf;\uC000\u{1D550}cr;\uC000\u{1D4B4}ml;\u4178\u0400Hacdefos\u1535\u1539\u153F\u154B\u154F\u155D\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417D;\u4417ot;\u417B\u01F2\u1554\0\u155BoWidt\xE8\u0AD9a;\u4396r;\u6128pf;\u6124cr;\uC000\u{1D4B5}\u0BE1\u1583\u158A\u1590\0\u15B0\u15B6\u15BF\0\0\0\0\u15C6\u15DB\u15EB\u165F\u166D\0\u1695\u169B\u16B2\u16B9\0\u16BEcute\u803B\xE1\u40E1reve;\u4103\u0300;Ediuy\u159C\u159D\u15A1\u15A3\u15A8\u15AD\u623E;\uC000\u223E\u0333;\u623Frc\u803B\xE2\u40E2te\u80BB\xB4\u0306;\u4430lig\u803B\xE6\u40E6\u0100;r\xB2\u15BA;\uC000\u{1D51E}rave\u803B\xE0\u40E0\u0100ep\u15CA\u15D6\u0100fp\u15CF\u15D4sym;\u6135\xE8\u15D3ha;\u43B1\u0100ap\u15DFc\u0100cl\u15E4\u15E7r;\u4101g;\u6A3F\u0264\u15F0\0\0\u160A\u0280;adsv\u15FA\u15FB\u15FF\u1601\u1607\u6227nd;\u6A55;\u6A5Clope;\u6A58;\u6A5A\u0380;elmrsz\u1618\u1619\u161B\u161E\u163F\u164F\u1659\u6220;\u69A4e\xBB\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163A\u163C\u163E;\u69A8;\u69A9;\u69AA;\u69AB;\u69AC;\u69AD;\u69AE;\u69AFt\u0100;v\u1645\u1646\u621Fb\u0100;d\u164C\u164D\u62BE;\u699D\u0100pt\u1654\u1657h;\u6222\xBB\xB9arr;\u637C\u0100gp\u1663\u1667on;\u4105f;\uC000\u{1D552}\u0380;Eaeiop\u12C1\u167B\u167D\u1682\u1684\u1687\u168A;\u6A70cir;\u6A6F;\u624Ad;\u624Bs;\u4027rox\u0100;e\u12C1\u1692\xF1\u1683ing\u803B\xE5\u40E5\u0180cty\u16A1\u16A6\u16A8r;\uC000\u{1D4B6};\u402Amp\u0100;e\u12C1\u16AF\xF1\u0288ilde\u803B\xE3\u40E3ml\u803B\xE4\u40E4\u0100ci\u16C2\u16C8onin\xF4\u0272nt;\u6A11\u0800Nabcdefiklnoprsu\u16ED\u16F1\u1730\u173C\u1743\u1748\u1778\u177D\u17E0\u17E6\u1839\u1850\u170D\u193D\u1948\u1970ot;\u6AED\u0100cr\u16F6\u171Ek\u0200ceps\u1700\u1705\u170D\u1713ong;\u624Cpsilon;\u43F6rime;\u6035im\u0100;e\u171A\u171B\u623Dq;\u62CD\u0176\u1722\u1726ee;\u62BDed\u0100;g\u172C\u172D\u6305e\xBB\u172Drk\u0100;t\u135C\u1737brk;\u63B6\u0100oy\u1701\u1741;\u4431quo;\u601E\u0280cmprt\u1753\u175B\u1761\u1764\u1768aus\u0100;e\u010A\u0109ptyv;\u69B0s\xE9\u170Cno\xF5\u0113\u0180ahw\u176F\u1771\u1773;\u43B2;\u6136een;\u626Cr;\uC000\u{1D51F}g\u0380costuvw\u178D\u179D\u17B3\u17C1\u17D5\u17DB\u17DE\u0180aiu\u1794\u1796\u179A\xF0\u0760rc;\u65EFp\xBB\u1371\u0180dpt\u17A4\u17A8\u17ADot;\u6A00lus;\u6A01imes;\u6A02\u0271\u17B9\0\0\u17BEcup;\u6A06ar;\u6605riangle\u0100du\u17CD\u17D2own;\u65BDp;\u65B3plus;\u6A04e\xE5\u1444\xE5\u14ADarow;\u690D\u0180ako\u17ED\u1826\u1835\u0100cn\u17F2\u1823k\u0180lst\u17FA\u05AB\u1802ozenge;\u69EBriangle\u0200;dlr\u1812\u1813\u1818\u181D\u65B4own;\u65BEeft;\u65C2ight;\u65B8k;\u6423\u01B1\u182B\0\u1833\u01B2\u182F\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183E\u184D\u0100;q\u1843\u1846\uC000=\u20E5uiv;\uC000\u2261\u20E5t;\u6310\u0200ptwx\u1859\u185E\u1867\u186Cf;\uC000\u{1D553}\u0100;t\u13CB\u1863om\xBB\u13CCtie;\u62C8\u0600DHUVbdhmptuv\u1885\u1896\u18AA\u18BB\u18D7\u18DB\u18EC\u18FF\u1905\u190A\u1910\u1921\u0200LRlr\u188E\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18A1\u18A2\u18A4\u18A6\u18A8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18B3\u18B5\u18B7\u18B9;\u655D;\u655A;\u655C;\u6559\u0380;HLRhlr\u18CA\u18CB\u18CD\u18CF\u18D1\u18D3\u18D5\u6551;\u656C;\u6563;\u6560;\u656B;\u6562;\u655Fox;\u69C9\u0200LRlr\u18E4\u18E6\u18E8\u18EA;\u6555;\u6552;\u6510;\u650C\u0280;DUdu\u06BD\u18F7\u18F9\u18FB\u18FD;\u6565;\u6568;\u652C;\u6534inus;\u629Flus;\u629Eimes;\u62A0\u0200LRlr\u1919\u191B\u191D\u191F;\u655B;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193B\u6502;\u656A;\u6561;\u655E;\u653C;\u6524;\u651C\u0100ev\u0123\u1942bar\u803B\xA6\u40A6\u0200ceio\u1951\u1956\u195A\u1960r;\uC000\u{1D4B7}mi;\u604Fm\u0100;e\u171A\u171Cl\u0180;bh\u1968\u1969\u196B\u405C;\u69C5sub;\u67C8\u016C\u1974\u197El\u0100;e\u1979\u197A\u6022t\xBB\u197Ap\u0180;Ee\u012F\u1985\u1987;\u6AAE\u0100;q\u06DC\u06DB\u0CE1\u19A7\0\u19E8\u1A11\u1A15\u1A32\0\u1A37\u1A50\0\0\u1AB4\0\0\u1AC1\0\0\u1B21\u1B2E\u1B4D\u1B52\0\u1BFD\0\u1C0C\u0180cpr\u19AD\u19B2\u19DDute;\u4107\u0300;abcds\u19BF\u19C0\u19C4\u19CA\u19D5\u19D9\u6229nd;\u6A44rcup;\u6A49\u0100au\u19CF\u19D2p;\u6A4Bp;\u6A47ot;\u6A40;\uC000\u2229\uFE00\u0100eo\u19E2\u19E5t;\u6041\xEE\u0693\u0200aeiu\u19F0\u19FB\u1A01\u1A05\u01F0\u19F5\0\u19F8s;\u6A4Don;\u410Ddil\u803B\xE7\u40E7rc;\u4109ps\u0100;s\u1A0C\u1A0D\u6A4Cm;\u6A50ot;\u410B\u0180dmn\u1A1B\u1A20\u1A26il\u80BB\xB8\u01ADptyv;\u69B2t\u8100\xA2;e\u1A2D\u1A2E\u40A2r\xE4\u01B2r;\uC000\u{1D520}\u0180cei\u1A3D\u1A40\u1A4Dy;\u4447ck\u0100;m\u1A47\u1A48\u6713ark\xBB\u1A48;\u43C7r\u0380;Ecefms\u1A5F\u1A60\u1A62\u1A6B\u1AA4\u1AAA\u1AAE\u65CB;\u69C3\u0180;el\u1A69\u1A6A\u1A6D\u42C6q;\u6257e\u0261\u1A74\0\0\u1A88rrow\u0100lr\u1A7C\u1A81eft;\u61BAight;\u61BB\u0280RSacd\u1A92\u1A94\u1A96\u1A9A\u1A9F\xBB\u0F47;\u64C8st;\u629Birc;\u629Aash;\u629Dnint;\u6A10id;\u6AEFcir;\u69C2ubs\u0100;u\u1ABB\u1ABC\u6663it\xBB\u1ABC\u02EC\u1AC7\u1AD4\u1AFA\0\u1B0Aon\u0100;e\u1ACD\u1ACE\u403A\u0100;q\xC7\xC6\u026D\u1AD9\0\0\u1AE2a\u0100;t\u1ADE\u1ADF\u402C;\u4040\u0180;fl\u1AE8\u1AE9\u1AEB\u6201\xEE\u1160e\u0100mx\u1AF1\u1AF6ent\xBB\u1AE9e\xF3\u024D\u01E7\u1AFE\0\u1B07\u0100;d\u12BB\u1B02ot;\u6A6Dn\xF4\u0246\u0180fry\u1B10\u1B14\u1B17;\uC000\u{1D554}o\xE4\u0254\u8100\xA9;s\u0155\u1B1Dr;\u6117\u0100ao\u1B25\u1B29rr;\u61B5ss;\u6717\u0100cu\u1B32\u1B37r;\uC000\u{1D4B8}\u0100bp\u1B3C\u1B44\u0100;e\u1B41\u1B42\u6ACF;\u6AD1\u0100;e\u1B49\u1B4A\u6AD0;\u6AD2dot;\u62EF\u0380delprvw\u1B60\u1B6C\u1B77\u1B82\u1BAC\u1BD4\u1BF9arr\u0100lr\u1B68\u1B6A;\u6938;\u6935\u0270\u1B72\0\0\u1B75r;\u62DEc;\u62DFarr\u0100;p\u1B7F\u1B80\u61B6;\u693D\u0300;bcdos\u1B8F\u1B90\u1B96\u1BA1\u1BA5\u1BA8\u622Arcap;\u6A48\u0100au\u1B9B\u1B9Ep;\u6A46p;\u6A4Aot;\u628Dr;\u6A45;\uC000\u222A\uFE00\u0200alrv\u1BB5\u1BBF\u1BDE\u1BE3rr\u0100;m\u1BBC\u1BBD\u61B7;\u693Cy\u0180evw\u1BC7\u1BD4\u1BD8q\u0270\u1BCE\0\0\u1BD2re\xE3\u1B73u\xE3\u1B75ee;\u62CEedge;\u62CFen\u803B\xA4\u40A4earrow\u0100lr\u1BEE\u1BF3eft\xBB\u1B80ight\xBB\u1BBDe\xE4\u1BDD\u0100ci\u1C01\u1C07onin\xF4\u01F7nt;\u6231lcty;\u632D\u0980AHabcdefhijlorstuwz\u1C38\u1C3B\u1C3F\u1C5D\u1C69\u1C75\u1C8A\u1C9E\u1CAC\u1CB7\u1CFB\u1CFF\u1D0D\u1D7B\u1D91\u1DAB\u1DBB\u1DC6\u1DCDr\xF2\u0381ar;\u6965\u0200glrs\u1C48\u1C4D\u1C52\u1C54ger;\u6020eth;\u6138\xF2\u1133h\u0100;v\u1C5A\u1C5B\u6010\xBB\u090A\u016B\u1C61\u1C67arow;\u690Fa\xE3\u0315\u0100ay\u1C6E\u1C73ron;\u410F;\u4434\u0180;ao\u0332\u1C7C\u1C84\u0100gr\u02BF\u1C81r;\u61CAtseq;\u6A77\u0180glm\u1C91\u1C94\u1C98\u803B\xB0\u40B0ta;\u43B4ptyv;\u69B1\u0100ir\u1CA3\u1CA8sht;\u697F;\uC000\u{1D521}ar\u0100lr\u1CB3\u1CB5\xBB\u08DC\xBB\u101E\u0280aegsv\u1CC2\u0378\u1CD6\u1CDC\u1CE0m\u0180;os\u0326\u1CCA\u1CD4nd\u0100;s\u0326\u1CD1uit;\u6666amma;\u43DDin;\u62F2\u0180;io\u1CE7\u1CE8\u1CF8\u40F7de\u8100\xF7;o\u1CE7\u1CF0ntimes;\u62C7n\xF8\u1CF7cy;\u4452c\u026F\u1D06\0\0\u1D0Arn;\u631Eop;\u630D\u0280lptuw\u1D18\u1D1D\u1D22\u1D49\u1D55lar;\u4024f;\uC000\u{1D555}\u0280;emps\u030B\u1D2D\u1D37\u1D3D\u1D42q\u0100;d\u0352\u1D33ot;\u6251inus;\u6238lus;\u6214quare;\u62A1blebarwedg\xE5\xFAn\u0180adh\u112E\u1D5D\u1D67ownarrow\xF3\u1C83arpoon\u0100lr\u1D72\u1D76ef\xF4\u1CB4igh\xF4\u1CB6\u0162\u1D7F\u1D85karo\xF7\u0F42\u026F\u1D8A\0\0\u1D8Ern;\u631Fop;\u630C\u0180cot\u1D98\u1DA3\u1DA6\u0100ry\u1D9D\u1DA1;\uC000\u{1D4B9};\u4455l;\u69F6rok;\u4111\u0100dr\u1DB0\u1DB4ot;\u62F1i\u0100;f\u1DBA\u1816\u65BF\u0100ah\u1DC0\u1DC3r\xF2\u0429a\xF2\u0FA6angle;\u69A6\u0100ci\u1DD2\u1DD5y;\u445Fgrarr;\u67FF\u0900Dacdefglmnopqrstux\u1E01\u1E09\u1E19\u1E38\u0578\u1E3C\u1E49\u1E61\u1E7E\u1EA5\u1EAF\u1EBD\u1EE1\u1F2A\u1F37\u1F44\u1F4E\u1F5A\u0100Do\u1E06\u1D34o\xF4\u1C89\u0100cs\u1E0E\u1E14ute\u803B\xE9\u40E9ter;\u6A6E\u0200aioy\u1E22\u1E27\u1E31\u1E36ron;\u411Br\u0100;c\u1E2D\u1E2E\u6256\u803B\xEA\u40EAlon;\u6255;\u444Dot;\u4117\u0100Dr\u1E41\u1E45ot;\u6252;\uC000\u{1D522}\u0180;rs\u1E50\u1E51\u1E57\u6A9Aave\u803B\xE8\u40E8\u0100;d\u1E5C\u1E5D\u6A96ot;\u6A98\u0200;ils\u1E6A\u1E6B\u1E72\u1E74\u6A99nters;\u63E7;\u6113\u0100;d\u1E79\u1E7A\u6A95ot;\u6A97\u0180aps\u1E85\u1E89\u1E97cr;\u4113ty\u0180;sv\u1E92\u1E93\u1E95\u6205et\xBB\u1E93p\u01001;\u1E9D\u1EA4\u0133\u1EA1\u1EA3;\u6004;\u6005\u6003\u0100gs\u1EAA\u1EAC;\u414Bp;\u6002\u0100gp\u1EB4\u1EB8on;\u4119f;\uC000\u{1D556}\u0180als\u1EC4\u1ECE\u1ED2r\u0100;s\u1ECA\u1ECB\u62D5l;\u69E3us;\u6A71i\u0180;lv\u1EDA\u1EDB\u1EDF\u43B5on\xBB\u1EDB;\u43F5\u0200csuv\u1EEA\u1EF3\u1F0B\u1F23\u0100io\u1EEF\u1E31rc\xBB\u1E2E\u0269\u1EF9\0\0\u1EFB\xED\u0548ant\u0100gl\u1F02\u1F06tr\xBB\u1E5Dess\xBB\u1E7A\u0180aei\u1F12\u1F16\u1F1Als;\u403Dst;\u625Fv\u0100;D\u0235\u1F20D;\u6A78parsl;\u69E5\u0100Da\u1F2F\u1F33ot;\u6253rr;\u6971\u0180cdi\u1F3E\u1F41\u1EF8r;\u612Fo\xF4\u0352\u0100ah\u1F49\u1F4B;\u43B7\u803B\xF0\u40F0\u0100mr\u1F53\u1F57l\u803B\xEB\u40EBo;\u60AC\u0180cip\u1F61\u1F64\u1F67l;\u4021s\xF4\u056E\u0100eo\u1F6C\u1F74ctatio\xEE\u0559nential\xE5\u0579\u09E1\u1F92\0\u1F9E\0\u1FA1\u1FA7\0\0\u1FC6\u1FCC\0\u1FD3\0\u1FE6\u1FEA\u2000\0\u2008\u205Allingdotse\xF1\u1E44y;\u4444male;\u6640\u0180ilr\u1FAD\u1FB3\u1FC1lig;\u8000\uFB03\u0269\u1FB9\0\0\u1FBDg;\u8000\uFB00ig;\u8000\uFB04;\uC000\u{1D523}lig;\u8000\uFB01lig;\uC000fj\u0180alt\u1FD9\u1FDC\u1FE1t;\u666Dig;\u8000\uFB02ns;\u65B1of;\u4192\u01F0\u1FEE\0\u1FF3f;\uC000\u{1D557}\u0100ak\u05BF\u1FF7\u0100;v\u1FFC\u1FFD\u62D4;\u6AD9artint;\u6A0D\u0100ao\u200C\u2055\u0100cs\u2011\u2052\u03B1\u201A\u2030\u2038\u2045\u2048\0\u2050\u03B2\u2022\u2025\u2027\u202A\u202C\0\u202E\u803B\xBD\u40BD;\u6153\u803B\xBC\u40BC;\u6155;\u6159;\u615B\u01B3\u2034\0\u2036;\u6154;\u6156\u02B4\u203E\u2041\0\0\u2043\u803B\xBE\u40BE;\u6157;\u615C5;\u6158\u01B6\u204C\0\u204E;\u615A;\u615D8;\u615El;\u6044wn;\u6322cr;\uC000\u{1D4BB}\u0880Eabcdefgijlnorstv\u2082\u2089\u209F\u20A5\u20B0\u20B4\u20F0\u20F5\u20FA\u20FF\u2103\u2112\u2138\u0317\u213E\u2152\u219E\u0100;l\u064D\u2087;\u6A8C\u0180cmp\u2090\u2095\u209Dute;\u41F5ma\u0100;d\u209C\u1CDA\u43B3;\u6A86reve;\u411F\u0100iy\u20AA\u20AErc;\u411D;\u4433ot;\u4121\u0200;lqs\u063E\u0642\u20BD\u20C9\u0180;qs\u063E\u064C\u20C4lan\xF4\u0665\u0200;cdl\u0665\u20D2\u20D5\u20E5c;\u6AA9ot\u0100;o\u20DC\u20DD\u6A80\u0100;l\u20E2\u20E3\u6A82;\u6A84\u0100;e\u20EA\u20ED\uC000\u22DB\uFE00s;\u6A94r;\uC000\u{1D524}\u0100;g\u0673\u061Bmel;\u6137cy;\u4453\u0200;Eaj\u065A\u210C\u210E\u2110;\u6A92;\u6AA5;\u6AA4\u0200Eaes\u211B\u211D\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6A8Arox\xBB\u2124\u0100;q\u212E\u212F\u6A88\u0100;q\u212E\u211Bim;\u62E7pf;\uC000\u{1D558}\u0100ci\u2143\u2146r;\u610Am\u0180;el\u066B\u214E\u2150;\u6A8E;\u6A90\u8300>;cdlqr\u05EE\u2160\u216A\u216E\u2173\u2179\u0100ci\u2165\u2167;\u6AA7r;\u6A7Aot;\u62D7Par;\u6995uest;\u6A7C\u0280adels\u2184\u216A\u2190\u0656\u219B\u01F0\u2189\0\u218Epro\xF8\u209Er;\u6978q\u0100lq\u063F\u2196les\xF3\u2088i\xED\u066B\u0100en\u21A3\u21ADrtneqq;\uC000\u2269\uFE00\xC5\u21AA\u0500Aabcefkosy\u21C4\u21C7\u21F1\u21F5\u21FA\u2218\u221D\u222F\u2268\u227Dr\xF2\u03A0\u0200ilmr\u21D0\u21D4\u21D7\u21DBrs\xF0\u1484f\xBB\u2024il\xF4\u06A9\u0100dr\u21E0\u21E4cy;\u444A\u0180;cw\u08F4\u21EB\u21EFir;\u6948;\u61ADar;\u610Firc;\u4125\u0180alr\u2201\u220E\u2213rts\u0100;u\u2209\u220A\u6665it\xBB\u220Alip;\u6026con;\u62B9r;\uC000\u{1D525}s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223A\u223E\u2243\u225E\u2263rr;\u61FFtht;\u623Bk\u0100lr\u2249\u2253eftarrow;\u61A9ightarrow;\u61AAf;\uC000\u{1D559}bar;\u6015\u0180clt\u226F\u2274\u2278r;\uC000\u{1D4BD}as\xE8\u21F4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xBB\u1C5B\u0AE1\u22A3\0\u22AA\0\u22B8\u22C5\u22CE\0\u22D5\u22F3\0\0\u22F8\u2322\u2367\u2362\u237F\0\u2386\u23AA\u23B4cute\u803B\xED\u40ED\u0180;iy\u0771\u22B0\u22B5rc\u803B\xEE\u40EE;\u4438\u0100cx\u22BC\u22BFy;\u4435cl\u803B\xA1\u40A1\u0100fr\u039F\u22C9;\uC000\u{1D526}rave\u803B\xEC\u40EC\u0200;ino\u073E\u22DD\u22E9\u22EE\u0100in\u22E2\u22E6nt;\u6A0Ct;\u622Dfin;\u69DCta;\u6129lig;\u4133\u0180aop\u22FE\u231A\u231D\u0180cgt\u2305\u2308\u2317r;\u412B\u0180elp\u071F\u230F\u2313in\xE5\u078Ear\xF4\u0720h;\u4131f;\u62B7ed;\u41B5\u0280;cfot\u04F4\u232C\u2331\u233D\u2341are;\u6105in\u0100;t\u2338\u2339\u621Eie;\u69DDdo\xF4\u2319\u0280;celp\u0757\u234C\u2350\u235B\u2361al;\u62BA\u0100gr\u2355\u2359er\xF3\u1563\xE3\u234Darhk;\u6A17rod;\u6A3C\u0200cgpt\u236F\u2372\u2376\u237By;\u4451on;\u412Ff;\uC000\u{1D55A}a;\u43B9uest\u803B\xBF\u40BF\u0100ci\u238A\u238Fr;\uC000\u{1D4BE}n\u0280;Edsv\u04F4\u239B\u239D\u23A1\u04F3;\u62F9ot;\u62F5\u0100;v\u23A6\u23A7\u62F4;\u62F3\u0100;i\u0777\u23AElde;\u4129\u01EB\u23B8\0\u23BCcy;\u4456l\u803B\xEF\u40EF\u0300cfmosu\u23CC\u23D7\u23DC\u23E1\u23E7\u23F5\u0100iy\u23D1\u23D5rc;\u4135;\u4439r;\uC000\u{1D527}ath;\u4237pf;\uC000\u{1D55B}\u01E3\u23EC\0\u23F1r;\uC000\u{1D4BF}rcy;\u4458kcy;\u4454\u0400acfghjos\u240B\u2416\u2422\u2427\u242D\u2431\u2435\u243Bppa\u0100;v\u2413\u2414\u43BA;\u43F0\u0100ey\u241B\u2420dil;\u4137;\u443Ar;\uC000\u{1D528}reen;\u4138cy;\u4445cy;\u445Cpf;\uC000\u{1D55C}cr;\uC000\u{1D4C0}\u0B80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248D\u2491\u250E\u253D\u255A\u2580\u264E\u265E\u2665\u2679\u267D\u269A\u26B2\u26D8\u275D\u2768\u278B\u27C0\u2801\u2812\u0180art\u2477\u247A\u247Cr\xF2\u09C6\xF2\u0395ail;\u691Barr;\u690E\u0100;g\u0994\u248B;\u6A8Bar;\u6962\u0963\u24A5\0\u24AA\0\u24B1\0\0\0\0\0\u24B5\u24BA\0\u24C6\u24C8\u24CD\0\u24F9ute;\u413Amptyv;\u69B4ra\xEE\u084Cbda;\u43BBg\u0180;dl\u088E\u24C1\u24C3;\u6991\xE5\u088E;\u6A85uo\u803B\xAB\u40ABr\u0400;bfhlpst\u0899\u24DE\u24E6\u24E9\u24EB\u24EE\u24F1\u24F5\u0100;f\u089D\u24E3s;\u691Fs;\u691D\xEB\u2252p;\u61ABl;\u6939im;\u6973l;\u61A2\u0180;ae\u24FF\u2500\u2504\u6AABil;\u6919\u0100;s\u2509\u250A\u6AAD;\uC000\u2AAD\uFE00\u0180abr\u2515\u2519\u251Drr;\u690Crk;\u6772\u0100ak\u2522\u252Cc\u0100ek\u2528\u252A;\u407B;\u405B\u0100es\u2531\u2533;\u698Bl\u0100du\u2539\u253B;\u698F;\u698D\u0200aeuy\u2546\u254B\u2556\u2558ron;\u413E\u0100di\u2550\u2554il;\u413C\xEC\u08B0\xE2\u2529;\u443B\u0200cqrs\u2563\u2566\u256D\u257Da;\u6936uo\u0100;r\u0E19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694Bh;\u61B2\u0280;fgqs\u258B\u258C\u0989\u25F3\u25FF\u6264t\u0280ahlrt\u2598\u25A4\u25B7\u25C2\u25E8rrow\u0100;t\u0899\u25A1a\xE9\u24F6arpoon\u0100du\u25AF\u25B4own\xBB\u045Ap\xBB\u0966eftarrows;\u61C7ight\u0180ahs\u25CD\u25D6\u25DErrow\u0100;s\u08F4\u08A7arpoon\xF3\u0F98quigarro\xF7\u21F0hreetimes;\u62CB\u0180;qs\u258B\u0993\u25FAlan\xF4\u09AC\u0280;cdgs\u09AC\u260A\u260D\u261D\u2628c;\u6AA8ot\u0100;o\u2614\u2615\u6A7F\u0100;r\u261A\u261B\u6A81;\u6A83\u0100;e\u2622\u2625\uC000\u22DA\uFE00s;\u6A93\u0280adegs\u2633\u2639\u263D\u2649\u264Bppro\xF8\u24C6ot;\u62D6q\u0100gq\u2643\u2645\xF4\u0989gt\xF2\u248C\xF4\u099Bi\xED\u09B2\u0180ilr\u2655\u08E1\u265Asht;\u697C;\uC000\u{1D529}\u0100;E\u099C\u2663;\u6A91\u0161\u2669\u2676r\u0100du\u25B2\u266E\u0100;l\u0965\u2673;\u696Alk;\u6584cy;\u4459\u0280;acht\u0A48\u2688\u268B\u2691\u2696r\xF2\u25C1orne\xF2\u1D08ard;\u696Bri;\u65FA\u0100io\u269F\u26A4dot;\u4140ust\u0100;a\u26AC\u26AD\u63B0che\xBB\u26AD\u0200Eaes\u26BB\u26BD\u26C9\u26D4;\u6268p\u0100;p\u26C3\u26C4\u6A89rox\xBB\u26C4\u0100;q\u26CE\u26CF\u6A87\u0100;q\u26CE\u26BBim;\u62E6\u0400abnoptwz\u26E9\u26F4\u26F7\u271A\u272F\u2741\u2747\u2750\u0100nr\u26EE\u26F1g;\u67ECr;\u61FDr\xEB\u08C1g\u0180lmr\u26FF\u270D\u2714eft\u0100ar\u09E6\u2707ight\xE1\u09F2apsto;\u67FCight\xE1\u09FDparrow\u0100lr\u2725\u2729ef\xF4\u24EDight;\u61AC\u0180afl\u2736\u2739\u273Dr;\u6985;\uC000\u{1D55D}us;\u6A2Dimes;\u6A34\u0161\u274B\u274Fst;\u6217\xE1\u134E\u0180;ef\u2757\u2758\u1800\u65CAnge\xBB\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277C\u2785\u2787r\xF2\u08A8orne\xF2\u1D8Car\u0100;d\u0F98\u2783;\u696D;\u600Eri;\u62BF\u0300achiqt\u2798\u279D\u0A40\u27A2\u27AE\u27BBquo;\u6039r;\uC000\u{1D4C1}m\u0180;eg\u09B2\u27AA\u27AC;\u6A8D;\u6A8F\u0100bu\u252A\u27B3o\u0100;r\u0E1F\u27B9;\u601Arok;\u4142\u8400<;cdhilqr\u082B\u27D2\u2639\u27DC\u27E0\u27E5\u27EA\u27F0\u0100ci\u27D7\u27D9;\u6AA6r;\u6A79re\xE5\u25F2mes;\u62C9arr;\u6976uest;\u6A7B\u0100Pi\u27F5\u27F9ar;\u6996\u0180;ef\u2800\u092D\u181B\u65C3r\u0100du\u2807\u280Dshar;\u694Ahar;\u6966\u0100en\u2817\u2821rtneqq;\uC000\u2268\uFE00\xC5\u281E\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288E\u2893\u28A0\u28A5\u28A8\u28DA\u28E2\u28E4\u0A83\u28F3\u2902Dot;\u623A\u0200clpr\u284E\u2852\u2863\u287Dr\u803B\xAF\u40AF\u0100et\u2857\u2859;\u6642\u0100;e\u285E\u285F\u6720se\xBB\u285F\u0100;s\u103B\u2868to\u0200;dlu\u103B\u2873\u2877\u287Bow\xEE\u048Cef\xF4\u090F\xF0\u13D1ker;\u65AE\u0100oy\u2887\u288Cmma;\u6A29;\u443Cash;\u6014asuredangle\xBB\u1626r;\uC000\u{1D52A}o;\u6127\u0180cdn\u28AF\u28B4\u28C9ro\u803B\xB5\u40B5\u0200;acd\u1464\u28BD\u28C0\u28C4s\xF4\u16A7ir;\u6AF0ot\u80BB\xB7\u01B5us\u0180;bd\u28D2\u1903\u28D3\u6212\u0100;u\u1D3C\u28D8;\u6A2A\u0163\u28DE\u28E1p;\u6ADB\xF2\u2212\xF0\u0A81\u0100dp\u28E9\u28EEels;\u62A7f;\uC000\u{1D55E}\u0100ct\u28F8\u28FDr;\uC000\u{1D4C2}pos\xBB\u159D\u0180;lm\u2909\u290A\u290D\u43BCtimap;\u62B8\u0C00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297E\u2989\u2998\u29DA\u29E9\u2A15\u2A1A\u2A58\u2A5D\u2A83\u2A95\u2AA4\u2AA8\u2B04\u2B07\u2B44\u2B7F\u2BAE\u2C34\u2C67\u2C7C\u2CE9\u0100gt\u2947\u294B;\uC000\u22D9\u0338\u0100;v\u2950\u0BCF\uC000\u226B\u20D2\u0180elt\u295A\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61CDightarrow;\u61CE;\uC000\u22D8\u0338\u0100;v\u297B\u0C47\uC000\u226A\u20D2ightarrow;\u61CF\u0100Dd\u298E\u2993ash;\u62AFash;\u62AE\u0280bcnpt\u29A3\u29A7\u29AC\u29B1\u29CCla\xBB\u02DEute;\u4144g;\uC000\u2220\u20D2\u0280;Eiop\u0D84\u29BC\u29C0\u29C5\u29C8;\uC000\u2A70\u0338d;\uC000\u224B\u0338s;\u4149ro\xF8\u0D84ur\u0100;a\u29D3\u29D4\u666El\u0100;s\u29D3\u0B38\u01F3\u29DF\0\u29E3p\u80BB\xA0\u0B37mp\u0100;e\u0BF9\u0C00\u0280aeouy\u29F4\u29FE\u2A03\u2A10\u2A13\u01F0\u29F9\0\u29FB;\u6A43on;\u4148dil;\u4146ng\u0100;d\u0D7E\u2A0Aot;\uC000\u2A6D\u0338p;\u6A42;\u443Dash;\u6013\u0380;Aadqsx\u0B92\u2A29\u2A2D\u2A3B\u2A41\u2A45\u2A50rr;\u61D7r\u0100hr\u2A33\u2A36k;\u6924\u0100;o\u13F2\u13F0ot;\uC000\u2250\u0338ui\xF6\u0B63\u0100ei\u2A4A\u2A4Ear;\u6928\xED\u0B98ist\u0100;s\u0BA0\u0B9Fr;\uC000\u{1D52B}\u0200Eest\u0BC5\u2A66\u2A79\u2A7C\u0180;qs\u0BBC\u2A6D\u0BE1\u0180;qs\u0BBC\u0BC5\u2A74lan\xF4\u0BE2i\xED\u0BEA\u0100;r\u0BB6\u2A81\xBB\u0BB7\u0180Aap\u2A8A\u2A8D\u2A91r\xF2\u2971rr;\u61AEar;\u6AF2\u0180;sv\u0F8D\u2A9C\u0F8C\u0100;d\u2AA1\u2AA2\u62FC;\u62FAcy;\u445A\u0380AEadest\u2AB7\u2ABA\u2ABE\u2AC2\u2AC5\u2AF6\u2AF9r\xF2\u2966;\uC000\u2266\u0338rr;\u619Ar;\u6025\u0200;fqs\u0C3B\u2ACE\u2AE3\u2AEFt\u0100ar\u2AD4\u2AD9rro\xF7\u2AC1ightarro\xF7\u2A90\u0180;qs\u0C3B\u2ABA\u2AEAlan\xF4\u0C55\u0100;s\u0C55\u2AF4\xBB\u0C36i\xED\u0C5D\u0100;r\u0C35\u2AFEi\u0100;e\u0C1A\u0C25i\xE4\u0D90\u0100pt\u2B0C\u2B11f;\uC000\u{1D55F}\u8180\xAC;in\u2B19\u2B1A\u2B36\u40ACn\u0200;Edv\u0B89\u2B24\u2B28\u2B2E;\uC000\u22F9\u0338ot;\uC000\u22F5\u0338\u01E1\u0B89\u2B33\u2B35;\u62F7;\u62F6i\u0100;v\u0CB8\u2B3C\u01E1\u0CB8\u2B41\u2B43;\u62FE;\u62FD\u0180aor\u2B4B\u2B63\u2B69r\u0200;ast\u0B7B\u2B55\u2B5A\u2B5Flle\xEC\u0B7Bl;\uC000\u2AFD\u20E5;\uC000\u2202\u0338lint;\u6A14\u0180;ce\u0C92\u2B70\u2B73u\xE5\u0CA5\u0100;c\u0C98\u2B78\u0100;e\u0C92\u2B7D\xF1\u0C98\u0200Aait\u2B88\u2B8B\u2B9D\u2BA7r\xF2\u2988rr\u0180;cw\u2B94\u2B95\u2B99\u619B;\uC000\u2933\u0338;\uC000\u219D\u0338ghtarrow\xBB\u2B95ri\u0100;e\u0CCB\u0CD6\u0380chimpqu\u2BBD\u2BCD\u2BD9\u2B04\u0B78\u2BE4\u2BEF\u0200;cer\u0D32\u2BC6\u0D37\u2BC9u\xE5\u0D45;\uC000\u{1D4C3}ort\u026D\u2B05\0\0\u2BD6ar\xE1\u2B56m\u0100;e\u0D6E\u2BDF\u0100;q\u0D74\u0D73su\u0100bp\u2BEB\u2BED\xE5\u0CF8\xE5\u0D0B\u0180bcp\u2BF6\u2C11\u2C19\u0200;Ees\u2BFF\u2C00\u0D22\u2C04\u6284;\uC000\u2AC5\u0338et\u0100;e\u0D1B\u2C0Bq\u0100;q\u0D23\u2C00c\u0100;e\u0D32\u2C17\xF1\u0D38\u0200;Ees\u2C22\u2C23\u0D5F\u2C27\u6285;\uC000\u2AC6\u0338et\u0100;e\u0D58\u2C2Eq\u0100;q\u0D60\u2C23\u0200gilr\u2C3D\u2C3F\u2C45\u2C47\xEC\u0BD7lde\u803B\xF1\u40F1\xE7\u0C43iangle\u0100lr\u2C52\u2C5Ceft\u0100;e\u0C1A\u2C5A\xF1\u0C26ight\u0100;e\u0CCB\u2C65\xF1\u0CD7\u0100;m\u2C6C\u2C6D\u43BD\u0180;es\u2C74\u2C75\u2C79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2C8F\u2C94\u2C99\u2C9E\u2CA3\u2CB0\u2CB6\u2CD3\u2CE3ash;\u62ADarr;\u6904p;\uC000\u224D\u20D2ash;\u62AC\u0100et\u2CA8\u2CAC;\uC000\u2265\u20D2;\uC000>\u20D2nfin;\u69DE\u0180Aet\u2CBD\u2CC1\u2CC5rr;\u6902;\uC000\u2264\u20D2\u0100;r\u2CCA\u2CCD\uC000<\u20D2ie;\uC000\u22B4\u20D2\u0100At\u2CD8\u2CDCrr;\u6903rie;\uC000\u22B5\u20D2im;\uC000\u223C\u20D2\u0180Aan\u2CF0\u2CF4\u2D02rr;\u61D6r\u0100hr\u2CFA\u2CFDk;\u6923\u0100;o\u13E7\u13E5ear;\u6927\u1253\u1A95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2D2D\0\u2D38\u2D48\u2D60\u2D65\u2D72\u2D84\u1B07\0\0\u2D8D\u2DAB\0\u2DC8\u2DCE\0\u2DDC\u2E19\u2E2B\u2E3E\u2E43\u0100cs\u2D31\u1A97ute\u803B\xF3\u40F3\u0100iy\u2D3C\u2D45r\u0100;c\u1A9E\u2D42\u803B\xF4\u40F4;\u443E\u0280abios\u1AA0\u2D52\u2D57\u01C8\u2D5Alac;\u4151v;\u6A38old;\u69BClig;\u4153\u0100cr\u2D69\u2D6Dir;\u69BF;\uC000\u{1D52C}\u036F\u2D79\0\0\u2D7C\0\u2D82n;\u42DBave\u803B\xF2\u40F2;\u69C1\u0100bm\u2D88\u0DF4ar;\u69B5\u0200acit\u2D95\u2D98\u2DA5\u2DA8r\xF2\u1A80\u0100ir\u2D9D\u2DA0r;\u69BEoss;\u69BBn\xE5\u0E52;\u69C0\u0180aei\u2DB1\u2DB5\u2DB9cr;\u414Dga;\u43C9\u0180cdn\u2DC0\u2DC5\u01CDron;\u43BF;\u69B6pf;\uC000\u{1D560}\u0180ael\u2DD4\u2DD7\u01D2r;\u69B7rp;\u69B9\u0380;adiosv\u2DEA\u2DEB\u2DEE\u2E08\u2E0D\u2E10\u2E16\u6228r\xF2\u1A86\u0200;efm\u2DF7\u2DF8\u2E02\u2E05\u6A5Dr\u0100;o\u2DFE\u2DFF\u6134f\xBB\u2DFF\u803B\xAA\u40AA\u803B\xBA\u40BAgof;\u62B6r;\u6A56lope;\u6A57;\u6A5B\u0180clo\u2E1F\u2E21\u2E27\xF2\u2E01ash\u803B\xF8\u40F8l;\u6298i\u016C\u2E2F\u2E34de\u803B\xF5\u40F5es\u0100;a\u01DB\u2E3As;\u6A36ml\u803B\xF6\u40F6bar;\u633D\u0AE1\u2E5E\0\u2E7D\0\u2E80\u2E9D\0\u2EA2\u2EB9\0\0\u2ECB\u0E9C\0\u2F13\0\0\u2F2B\u2FBC\0\u2FC8r\u0200;ast\u0403\u2E67\u2E72\u0E85\u8100\xB6;l\u2E6D\u2E6E\u40B6le\xEC\u0403\u0269\u2E78\0\0\u2E7Bm;\u6AF3;\u6AFDy;\u443Fr\u0280cimpt\u2E8B\u2E8F\u2E93\u1865\u2E97nt;\u4025od;\u402Eil;\u6030enk;\u6031r;\uC000\u{1D52D}\u0180imo\u2EA8\u2EB0\u2EB4\u0100;v\u2EAD\u2EAE\u43C6;\u43D5ma\xF4\u0A76ne;\u660E\u0180;tv\u2EBF\u2EC0\u2EC8\u43C0chfork\xBB\u1FFD;\u43D6\u0100au\u2ECF\u2EDFn\u0100ck\u2ED5\u2EDDk\u0100;h\u21F4\u2EDB;\u610E\xF6\u21F4s\u0480;abcdemst\u2EF3\u2EF4\u1908\u2EF9\u2EFD\u2F04\u2F06\u2F0A\u2F0E\u402Bcir;\u6A23ir;\u6A22\u0100ou\u1D40\u2F02;\u6A25;\u6A72n\u80BB\xB1\u0E9Dim;\u6A26wo;\u6A27\u0180ipu\u2F19\u2F20\u2F25ntint;\u6A15f;\uC000\u{1D561}nd\u803B\xA3\u40A3\u0500;Eaceinosu\u0EC8\u2F3F\u2F41\u2F44\u2F47\u2F81\u2F89\u2F92\u2F7E\u2FB6;\u6AB3p;\u6AB7u\xE5\u0ED9\u0100;c\u0ECE\u2F4C\u0300;acens\u0EC8\u2F59\u2F5F\u2F66\u2F68\u2F7Eppro\xF8\u2F43urlye\xF1\u0ED9\xF1\u0ECE\u0180aes\u2F6F\u2F76\u2F7Approx;\u6AB9qq;\u6AB5im;\u62E8i\xED\u0EDFme\u0100;s\u2F88\u0EAE\u6032\u0180Eas\u2F78\u2F90\u2F7A\xF0\u2F75\u0180dfp\u0EEC\u2F99\u2FAF\u0180als\u2FA0\u2FA5\u2FAAlar;\u632Eine;\u6312urf;\u6313\u0100;t\u0EFB\u2FB4\xEF\u0EFBrel;\u62B0\u0100ci\u2FC0\u2FC5r;\uC000\u{1D4C5};\u43C8ncsp;\u6008\u0300fiopsu\u2FDA\u22E2\u2FDF\u2FE5\u2FEB\u2FF1r;\uC000\u{1D52E}pf;\uC000\u{1D562}rime;\u6057cr;\uC000\u{1D4C6}\u0180aeo\u2FF8\u3009\u3013t\u0100ei\u2FFE\u3005rnion\xF3\u06B0nt;\u6A16st\u0100;e\u3010\u3011\u403F\xF1\u1F19\xF4\u0F14\u0A80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30E0\u310E\u312B\u3147\u3162\u3172\u318E\u3206\u3215\u3224\u3229\u3258\u326E\u3272\u3290\u32B0\u32B7\u0180art\u3047\u304A\u304Cr\xF2\u10B3\xF2\u03DDail;\u691Car\xF2\u1C65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307F\u308F\u3094\u30CC\u0100eu\u306D\u3071;\uC000\u223D\u0331te;\u4155i\xE3\u116Emptyv;\u69B3g\u0200;del\u0FD1\u3089\u308B\u308D;\u6992;\u69A5\xE5\u0FD1uo\u803B\xBB\u40BBr\u0580;abcfhlpstw\u0FDC\u30AC\u30AF\u30B7\u30B9\u30BC\u30BE\u30C0\u30C3\u30C7\u30CAp;\u6975\u0100;f\u0FE0\u30B4s;\u6920;\u6933s;\u691E\xEB\u225D\xF0\u272El;\u6945im;\u6974l;\u61A3;\u619D\u0100ai\u30D1\u30D5il;\u691Ao\u0100;n\u30DB\u30DC\u6236al\xF3\u0F1E\u0180abr\u30E7\u30EA\u30EEr\xF2\u17E5rk;\u6773\u0100ak\u30F3\u30FDc\u0100ek\u30F9\u30FB;\u407D;\u405D\u0100es\u3102\u3104;\u698Cl\u0100du\u310A\u310C;\u698E;\u6990\u0200aeuy\u3117\u311C\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xEC\u0FF2\xE2\u30FA;\u4440\u0200clqs\u3134\u3137\u313D\u3144a;\u6937dhar;\u6969uo\u0100;r\u020E\u020Dh;\u61B3\u0180acg\u314E\u315F\u0F44l\u0200;ips\u0F78\u3158\u315B\u109Cn\xE5\u10BBar\xF4\u0FA9t;\u65AD\u0180ilr\u3169\u1023\u316Esht;\u697D;\uC000\u{1D52F}\u0100ao\u3177\u3186r\u0100du\u317D\u317F\xBB\u047B\u0100;l\u1091\u3184;\u696C\u0100;v\u318B\u318C\u43C1;\u43F1\u0180gns\u3195\u31F9\u31FCht\u0300ahlrst\u31A4\u31B0\u31C2\u31D8\u31E4\u31EErrow\u0100;t\u0FDC\u31ADa\xE9\u30C8arpoon\u0100du\u31BB\u31BFow\xEE\u317Ep\xBB\u1092eft\u0100ah\u31CA\u31D0rrow\xF3\u0FEAarpoon\xF3\u0551ightarrows;\u61C9quigarro\xF7\u30CBhreetimes;\u62CCg;\u42DAingdotse\xF1\u1F32\u0180ahm\u320D\u3210\u3213r\xF2\u0FEAa\xF2\u0551;\u600Foust\u0100;a\u321E\u321F\u63B1che\xBB\u321Fmid;\u6AEE\u0200abpt\u3232\u323D\u3240\u3252\u0100nr\u3237\u323Ag;\u67EDr;\u61FEr\xEB\u1003\u0180afl\u3247\u324A\u324Er;\u6986;\uC000\u{1D563}us;\u6A2Eimes;\u6A35\u0100ap\u325D\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6A12ar\xF2\u31E3\u0200achq\u327B\u3280\u10BC\u3285quo;\u603Ar;\uC000\u{1D4C7}\u0100bu\u30FB\u328Ao\u0100;r\u0214\u0213\u0180hir\u3297\u329B\u32A0re\xE5\u31F8mes;\u62CAi\u0200;efl\u32AA\u1059\u1821\u32AB\u65B9tri;\u69CEluhar;\u6968;\u611E\u0D61\u32D5\u32DB\u32DF\u332C\u3338\u3371\0\u337A\u33A4\0\0\u33EC\u33F0\0\u3428\u3448\u345A\u34AD\u34B1\u34CA\u34F1\0\u3616\0\0\u3633cute;\u415Bqu\xEF\u27BA\u0500;Eaceinpsy\u11ED\u32F3\u32F5\u32FF\u3302\u330B\u330F\u331F\u3326\u3329;\u6AB4\u01F0\u32FA\0\u32FC;\u6AB8on;\u4161u\xE5\u11FE\u0100;d\u11F3\u3307il;\u415Frc;\u415D\u0180Eas\u3316\u3318\u331B;\u6AB6p;\u6ABAim;\u62E9olint;\u6A13i\xED\u1204;\u4441ot\u0180;be\u3334\u1D47\u3335\u62C5;\u6A66\u0380Aacmstx\u3346\u334A\u3357\u335B\u335E\u3363\u336Drr;\u61D8r\u0100hr\u3350\u3352\xEB\u2228\u0100;o\u0A36\u0A34t\u803B\xA7\u40A7i;\u403Bwar;\u6929m\u0100in\u3369\xF0nu\xF3\xF1t;\u6736r\u0100;o\u3376\u2055\uC000\u{1D530}\u0200acoy\u3382\u3386\u3391\u33A0rp;\u666F\u0100hy\u338B\u338Fcy;\u4449;\u4448rt\u026D\u3399\0\0\u339Ci\xE4\u1464ara\xEC\u2E6F\u803B\xAD\u40AD\u0100gm\u33A8\u33B4ma\u0180;fv\u33B1\u33B2\u33B2\u43C3;\u43C2\u0400;deglnpr\u12AB\u33C5\u33C9\u33CE\u33D6\u33DE\u33E1\u33E6ot;\u6A6A\u0100;q\u12B1\u12B0\u0100;E\u33D3\u33D4\u6A9E;\u6AA0\u0100;E\u33DB\u33DC\u6A9D;\u6A9Fe;\u6246lus;\u6A24arr;\u6972ar\xF2\u113D\u0200aeit\u33F8\u3408\u340F\u3417\u0100ls\u33FD\u3404lsetm\xE9\u336Ahp;\u6A33parsl;\u69E4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341C\u341D\u6AAA\u0100;s\u3422\u3423\u6AAC;\uC000\u2AAC\uFE00\u0180flp\u342E\u3433\u3442tcy;\u444C\u0100;b\u3438\u3439\u402F\u0100;a\u343E\u343F\u69C4r;\u633Ff;\uC000\u{1D564}a\u0100dr\u344D\u0402es\u0100;u\u3454\u3455\u6660it\xBB\u3455\u0180csu\u3460\u3479\u349F\u0100au\u3465\u346Fp\u0100;s\u1188\u346B;\uC000\u2293\uFE00p\u0100;s\u11B4\u3475;\uC000\u2294\uFE00u\u0100bp\u347F\u348F\u0180;es\u1197\u119C\u3486et\u0100;e\u1197\u348D\xF1\u119D\u0180;es\u11A8\u11AD\u3496et\u0100;e\u11A8\u349D\xF1\u11AE\u0180;af\u117B\u34A6\u05B0r\u0165\u34AB\u05B1\xBB\u117Car\xF2\u1148\u0200cemt\u34B9\u34BE\u34C2\u34C5r;\uC000\u{1D4C8}tm\xEE\xF1i\xEC\u3415ar\xE6\u11BE\u0100ar\u34CE\u34D5r\u0100;f\u34D4\u17BF\u6606\u0100an\u34DA\u34EDight\u0100ep\u34E3\u34EApsilo\xEE\u1EE0h\xE9\u2EAFs\xBB\u2852\u0280bcmnp\u34FB\u355E\u1209\u358B\u358E\u0480;Edemnprs\u350E\u350F\u3511\u3515\u351E\u3523\u352C\u3531\u3536\u6282;\u6AC5ot;\u6ABD\u0100;d\u11DA\u351Aot;\u6AC3ult;\u6AC1\u0100Ee\u3528\u352A;\u6ACB;\u628Alus;\u6ABFarr;\u6979\u0180eiu\u353D\u3552\u3555t\u0180;en\u350E\u3545\u354Bq\u0100;q\u11DA\u350Feq\u0100;q\u352B\u3528m;\u6AC7\u0100bp\u355A\u355C;\u6AD5;\u6AD3c\u0300;acens\u11ED\u356C\u3572\u3579\u357B\u3326ppro\xF8\u32FAurlye\xF1\u11FE\xF1\u11F3\u0180aes\u3582\u3588\u331Bppro\xF8\u331Aq\xF1\u3317g;\u666A\u0680123;Edehlmnps\u35A9\u35AC\u35AF\u121C\u35B2\u35B4\u35C0\u35C9\u35D5\u35DA\u35DF\u35E8\u35ED\u803B\xB9\u40B9\u803B\xB2\u40B2\u803B\xB3\u40B3;\u6AC6\u0100os\u35B9\u35BCt;\u6ABEub;\u6AD8\u0100;d\u1222\u35C5ot;\u6AC4s\u0100ou\u35CF\u35D2l;\u67C9b;\u6AD7arr;\u697Bult;\u6AC2\u0100Ee\u35E4\u35E6;\u6ACC;\u628Blus;\u6AC0\u0180eiu\u35F4\u3609\u360Ct\u0180;en\u121C\u35FC\u3602q\u0100;q\u1222\u35B2eq\u0100;q\u35E7\u35E4m;\u6AC8\u0100bp\u3611\u3613;\u6AD4;\u6AD6\u0180Aan\u361C\u3620\u362Drr;\u61D9r\u0100hr\u3626\u3628\xEB\u222E\u0100;o\u0A2B\u0A29war;\u692Alig\u803B\xDF\u40DF\u0BE1\u3651\u365D\u3660\u12CE\u3673\u3679\0\u367E\u36C2\0\0\0\0\0\u36DB\u3703\0\u3709\u376C\0\0\0\u3787\u0272\u3656\0\0\u365Bget;\u6316;\u43C4r\xEB\u0E5F\u0180aey\u3666\u366B\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uC000\u{1D531}\u0200eiko\u3686\u369D\u36B5\u36BC\u01F2\u368B\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369B\u43B8ym;\u43D1\u0100cn\u36A2\u36B2k\u0100as\u36A8\u36AEppro\xF8\u12C1im\xBB\u12ACs\xF0\u129E\u0100as\u36BA\u36AE\xF0\u12C1rn\u803B\xFE\u40FE\u01EC\u031F\u36C6\u22E7es\u8180\xD7;bd\u36CF\u36D0\u36D8\u40D7\u0100;a\u190F\u36D5r;\u6A31;\u6A30\u0180eps\u36E1\u36E3\u3700\xE1\u2A4D\u0200;bcf\u0486\u36EC\u36F0\u36F4ot;\u6336ir;\u6AF1\u0100;o\u36F9\u36FC\uC000\u{1D565}rk;\u6ADA\xE1\u3362rime;\u6034\u0180aip\u370F\u3712\u3764d\xE5\u1248\u0380adempst\u3721\u374D\u3740\u3751\u3757\u375C\u375Fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65B5own\xBB\u1DBBeft\u0100;e\u2800\u373E\xF1\u092E;\u625Cight\u0100;e\u32AA\u374B\xF1\u105Aot;\u65ECinus;\u6A3Alus;\u6A39b;\u69CDime;\u6A3Bezium;\u63E2\u0180cht\u3772\u377D\u3781\u0100ry\u3777\u377B;\uC000\u{1D4C9};\u4446cy;\u445Brok;\u4167\u0100io\u378B\u378Ex\xF4\u1777head\u0100lr\u3797\u37A0eftarro\xF7\u084Fightarrow\xBB\u0F5D\u0900AHabcdfghlmoprstuw\u37D0\u37D3\u37D7\u37E4\u37F0\u37FC\u380E\u381C\u3823\u3834\u3851\u385D\u386B\u38A9\u38CC\u38D2\u38EA\u38F6r\xF2\u03EDar;\u6963\u0100cr\u37DC\u37E2ute\u803B\xFA\u40FA\xF2\u1150r\u01E3\u37EA\0\u37EDy;\u445Eve;\u416D\u0100iy\u37F5\u37FArc\u803B\xFB\u40FB;\u4443\u0180abh\u3803\u3806\u380Br\xF2\u13ADlac;\u4171a\xF2\u13C3\u0100ir\u3813\u3818sht;\u697E;\uC000\u{1D532}rave\u803B\xF9\u40F9\u0161\u3827\u3831r\u0100lr\u382C\u382E\xBB\u0957\xBB\u1083lk;\u6580\u0100ct\u3839\u384D\u026F\u383F\0\0\u384Arn\u0100;e\u3845\u3846\u631Cr\xBB\u3846op;\u630Fri;\u65F8\u0100al\u3856\u385Acr;\u416B\u80BB\xA8\u0349\u0100gp\u3862\u3866on;\u4173f;\uC000\u{1D566}\u0300adhlsu\u114B\u3878\u387D\u1372\u3891\u38A0own\xE1\u13B3arpoon\u0100lr\u3888\u388Cef\xF4\u382Digh\xF4\u382Fi\u0180;hl\u3899\u389A\u389C\u43C5\xBB\u13FAon\xBB\u389Aparrows;\u61C8\u0180cit\u38B0\u38C4\u38C8\u026F\u38B6\0\0\u38C1rn\u0100;e\u38BC\u38BD\u631Dr\xBB\u38BDop;\u630Eng;\u416Fri;\u65F9cr;\uC000\u{1D4CA}\u0180dir\u38D9\u38DD\u38E2ot;\u62F0lde;\u4169i\u0100;f\u3730\u38E8\xBB\u1813\u0100am\u38EF\u38F2r\xF2\u38A8l\u803B\xFC\u40FCangle;\u69A7\u0780ABDacdeflnoprsz\u391C\u391F\u3929\u392D\u39B5\u39B8\u39BD\u39DF\u39E4\u39E8\u39F3\u39F9\u39FD\u3A01\u3A20r\xF2\u03F7ar\u0100;v\u3926\u3927\u6AE8;\u6AE9as\xE8\u03E1\u0100nr\u3932\u3937grt;\u699C\u0380eknprst\u34E3\u3946\u394B\u3952\u395D\u3964\u3996app\xE1\u2415othin\xE7\u1E96\u0180hir\u34EB\u2EC8\u3959op\xF4\u2FB5\u0100;h\u13B7\u3962\xEF\u318D\u0100iu\u3969\u396Dgm\xE1\u33B3\u0100bp\u3972\u3984setneq\u0100;q\u397D\u3980\uC000\u228A\uFE00;\uC000\u2ACB\uFE00setneq\u0100;q\u398F\u3992\uC000\u228B\uFE00;\uC000\u2ACC\uFE00\u0100hr\u399B\u399Fet\xE1\u369Ciangle\u0100lr\u39AA\u39AFeft\xBB\u0925ight\xBB\u1051y;\u4432ash\xBB\u1036\u0180elr\u39C4\u39D2\u39D7\u0180;be\u2DEA\u39CB\u39CFar;\u62BBq;\u625Alip;\u62EE\u0100bt\u39DC\u1468a\xF2\u1469r;\uC000\u{1D533}tr\xE9\u39AEsu\u0100bp\u39EF\u39F1\xBB\u0D1C\xBB\u0D59pf;\uC000\u{1D567}ro\xF0\u0EFBtr\xE9\u39B4\u0100cu\u3A06\u3A0Br;\uC000\u{1D4CB}\u0100bp\u3A10\u3A18n\u0100Ee\u3980\u3A16\xBB\u397En\u0100Ee\u3992\u3A1E\xBB\u3990igzag;\u699A\u0380cefoprs\u3A36\u3A3B\u3A56\u3A5B\u3A54\u3A61\u3A6Airc;\u4175\u0100di\u3A40\u3A51\u0100bg\u3A45\u3A49ar;\u6A5Fe\u0100;q\u15FA\u3A4F;\u6259erp;\u6118r;\uC000\u{1D534}pf;\uC000\u{1D568}\u0100;e\u1479\u3A66at\xE8\u1479cr;\uC000\u{1D4CC}\u0AE3\u178E\u3A87\0\u3A8B\0\u3A90\u3A9B\0\0\u3A9D\u3AA8\u3AAB\u3AAF\0\0\u3AC3\u3ACE\0\u3AD8\u17DC\u17DFtr\xE9\u17D1r;\uC000\u{1D535}\u0100Aa\u3A94\u3A97r\xF2\u03C3r\xF2\u09F6;\u43BE\u0100Aa\u3AA1\u3AA4r\xF2\u03B8r\xF2\u09EBa\xF0\u2713is;\u62FB\u0180dpt\u17A4\u3AB5\u3ABE\u0100fl\u3ABA\u17A9;\uC000\u{1D569}im\xE5\u17B2\u0100Aa\u3AC7\u3ACAr\xF2\u03CEr\xF2\u0A01\u0100cq\u3AD2\u17B8r;\uC000\u{1D4CD}\u0100pt\u17D6\u3ADCr\xE9\u17D4\u0400acefiosu\u3AF0\u3AFD\u3B08\u3B0C\u3B11\u3B15\u3B1B\u3B21c\u0100uy\u3AF6\u3AFBte\u803B\xFD\u40FD;\u444F\u0100iy\u3B02\u3B06rc;\u4177;\u444Bn\u803B\xA5\u40A5r;\uC000\u{1D536}cy;\u4457pf;\uC000\u{1D56A}cr;\uC000\u{1D4CE}\u0100cm\u3B26\u3B29y;\u444El\u803B\xFF\u40FF\u0500acdefhiosw\u3B42\u3B48\u3B54\u3B58\u3B64\u3B69\u3B6D\u3B74\u3B7A\u3B80cute;\u417A\u0100ay\u3B4D\u3B52ron;\u417E;\u4437ot;\u417C\u0100et\u3B5D\u3B61tr\xE6\u155Fa;\u43B6r;\uC000\u{1D537}cy;\u4436grarr;\u61DDpf;\uC000\u{1D56B}cr;\uC000\u{1D4CF}\u0100jn\u3B85\u3B87;\u600Dj;\u600C'.split("").map(function(t2) {
          return t2.charCodeAt(0);
        }));
        var g = {};
        Object.defineProperty(g, "__esModule", { value: true }), g.default = new Uint16Array("\u0200aglq	\x1B\u026D\0\0p;\u4026os;\u4027t;\u403Et;\u403Cuot;\u4022".split("").map(function(t2) {
          return t2.charCodeAt(0);
        }));
        var E, k, T, w, S, _ = {};
        !function(t2) {
          var e3;
          Object.defineProperty(t2, "__esModule", { value: true }), t2.replaceCodePoint = t2.fromCodePoint = void 0;
          var n2 = /* @__PURE__ */ new Map([[0, 65533], [128, 8364], [130, 8218], [131, 402], [132, 8222], [133, 8230], [134, 8224], [135, 8225], [136, 710], [137, 8240], [138, 352], [139, 8249], [140, 338], [142, 381], [145, 8216], [146, 8217], [147, 8220], [148, 8221], [149, 8226], [150, 8211], [151, 8212], [152, 732], [153, 8482], [154, 353], [155, 8250], [156, 339], [158, 382], [159, 376]]);
          function i2(t3) {
            var e4;
            return t3 >= 55296 && t3 <= 57343 || t3 > 1114111 ? 65533 : null !== (e4 = n2.get(t3)) && void 0 !== e4 ? e4 : t3;
          }
          t2.fromCodePoint = null !== (e3 = String.fromCodePoint) && void 0 !== e3 ? e3 : function(t3) {
            var e4 = "";
            return t3 > 65535 && (t3 -= 65536, e4 += String.fromCharCode(t3 >>> 10 & 1023 | 55296), t3 = 56320 | 1023 & t3), e4 + String.fromCharCode(t3);
          }, t2.replaceCodePoint = i2, t2.default = function(e4) {
            return (0, t2.fromCodePoint)(i2(e4));
          };
        }(_), function(t2) {
          var e3 = b && b.__createBinding || (Object.create ? function(t3, e4, n3, i3) {
            void 0 === i3 && (i3 = n3);
            var r3 = Object.getOwnPropertyDescriptor(e4, n3);
            r3 && !("get" in r3 ? !e4.__esModule : r3.writable || r3.configurable) || (r3 = { enumerable: true, get: function() {
              return e4[n3];
            } }), Object.defineProperty(t3, i3, r3);
          } : function(t3, e4, n3, i3) {
            void 0 === i3 && (i3 = n3), t3[i3] = e4[n3];
          }), n2 = b && b.__setModuleDefault || (Object.create ? function(t3, e4) {
            Object.defineProperty(t3, "default", { enumerable: true, value: e4 });
          } : function(t3, e4) {
            t3.default = e4;
          }), i2 = b && b.__importStar || function(t3) {
            if (t3 && t3.__esModule)
              return t3;
            var i3 = {};
            if (null != t3)
              for (var r3 in t3)
                "default" !== r3 && Object.prototype.hasOwnProperty.call(t3, r3) && e3(i3, t3, r3);
            return n2(i3, t3), i3;
          }, r2 = b && b.__importDefault || function(t3) {
            return t3 && t3.__esModule ? t3 : { default: t3 };
          };
          Object.defineProperty(t2, "__esModule", { value: true }), t2.decodeXML = t2.decodeHTMLStrict = t2.decodeHTMLAttribute = t2.decodeHTML = t2.determineBranch = t2.EntityDecoder = t2.DecodingMode = t2.BinTrieFlags = t2.fromCodePoint = t2.replaceCodePoint = t2.decodeCodePoint = t2.xmlDecodeTree = t2.htmlDecodeTree = void 0;
          var s2 = r2(p);
          t2.htmlDecodeTree = s2.default;
          var a2 = r2(g);
          t2.xmlDecodeTree = a2.default;
          var u3 = i2(_);
          t2.decodeCodePoint = u3.default;
          var o2, c2, f2, l2, h3 = _;
          function d2(t3) {
            return t3 >= o2.ZERO && t3 <= o2.NINE;
          }
          Object.defineProperty(t2, "replaceCodePoint", { enumerable: true, get: function() {
            return h3.replaceCodePoint;
          } }), Object.defineProperty(t2, "fromCodePoint", { enumerable: true, get: function() {
            return h3.fromCodePoint;
          } }), function(t3) {
            t3[t3.NUM = 35] = "NUM", t3[t3.SEMI = 59] = "SEMI", t3[t3.EQUALS = 61] = "EQUALS", t3[t3.ZERO = 48] = "ZERO", t3[t3.NINE = 57] = "NINE", t3[t3.LOWER_A = 97] = "LOWER_A", t3[t3.LOWER_F = 102] = "LOWER_F", t3[t3.LOWER_X = 120] = "LOWER_X", t3[t3.LOWER_Z = 122] = "LOWER_Z", t3[t3.UPPER_A = 65] = "UPPER_A", t3[t3.UPPER_F = 70] = "UPPER_F", t3[t3.UPPER_Z = 90] = "UPPER_Z";
          }(o2 || (o2 = {})), function(t3) {
            t3[t3.VALUE_LENGTH = 49152] = "VALUE_LENGTH", t3[t3.BRANCH_LENGTH = 16256] = "BRANCH_LENGTH", t3[t3.JUMP_TABLE = 127] = "JUMP_TABLE";
          }(c2 = t2.BinTrieFlags || (t2.BinTrieFlags = {})), function(t3) {
            t3[t3.EntityStart = 0] = "EntityStart", t3[t3.NumericStart = 1] = "NumericStart", t3[t3.NumericDecimal = 2] = "NumericDecimal", t3[t3.NumericHex = 3] = "NumericHex", t3[t3.NamedEntity = 4] = "NamedEntity";
          }(f2 || (f2 = {})), function(t3) {
            t3[t3.Legacy = 0] = "Legacy", t3[t3.Strict = 1] = "Strict", t3[t3.Attribute = 2] = "Attribute";
          }(l2 = t2.DecodingMode || (t2.DecodingMode = {}));
          var v2 = function() {
            function t3(t4, e4, n3) {
              this.decodeTree = t4, this.emitCodePoint = e4, this.errors = n3, this.state = f2.EntityStart, this.consumed = 1, this.result = 0, this.treeIndex = 0, this.excess = 1, this.decodeMode = l2.Strict;
            }
            return t3.prototype.startEntity = function(t4) {
              this.decodeMode = t4, this.state = f2.EntityStart, this.result = 0, this.treeIndex = 0, this.excess = 1, this.consumed = 1;
            }, t3.prototype.write = function(t4, e4) {
              switch (this.state) {
                case f2.EntityStart:
                  return t4.charCodeAt(e4) === o2.NUM ? (this.state = f2.NumericStart, this.consumed += 1, this.stateNumericStart(t4, e4 + 1)) : (this.state = f2.NamedEntity, this.stateNamedEntity(t4, e4));
                case f2.NumericStart:
                  return this.stateNumericStart(t4, e4);
                case f2.NumericDecimal:
                  return this.stateNumericDecimal(t4, e4);
                case f2.NumericHex:
                  return this.stateNumericHex(t4, e4);
                case f2.NamedEntity:
                  return this.stateNamedEntity(t4, e4);
              }
            }, t3.prototype.stateNumericStart = function(t4, e4) {
              return e4 >= t4.length ? -1 : (32 | t4.charCodeAt(e4)) === o2.LOWER_X ? (this.state = f2.NumericHex, this.consumed += 1, this.stateNumericHex(t4, e4 + 1)) : (this.state = f2.NumericDecimal, this.stateNumericDecimal(t4, e4));
            }, t3.prototype.addToNumericResult = function(t4, e4, n3, i3) {
              if (e4 !== n3) {
                var r3 = n3 - e4;
                this.result = this.result * Math.pow(i3, r3) + parseInt(t4.substr(e4, r3), i3), this.consumed += r3;
              }
            }, t3.prototype.stateNumericHex = function(t4, e4) {
              for (var n3, i3 = e4; e4 < t4.length; ) {
                var r3 = t4.charCodeAt(e4);
                if (!(d2(r3) || (n3 = r3, n3 >= o2.UPPER_A && n3 <= o2.UPPER_F || n3 >= o2.LOWER_A && n3 <= o2.LOWER_F)))
                  return this.addToNumericResult(t4, i3, e4, 16), this.emitNumericEntity(r3, 3);
                e4 += 1;
              }
              return this.addToNumericResult(t4, i3, e4, 16), -1;
            }, t3.prototype.stateNumericDecimal = function(t4, e4) {
              for (var n3 = e4; e4 < t4.length; ) {
                var i3 = t4.charCodeAt(e4);
                if (!d2(i3))
                  return this.addToNumericResult(t4, n3, e4, 10), this.emitNumericEntity(i3, 2);
                e4 += 1;
              }
              return this.addToNumericResult(t4, n3, e4, 10), -1;
            }, t3.prototype.emitNumericEntity = function(t4, e4) {
              var n3;
              if (this.consumed <= e4)
                return null === (n3 = this.errors) || void 0 === n3 || n3.absenceOfDigitsInNumericCharacterReference(this.consumed), 0;
              if (t4 === o2.SEMI)
                this.consumed += 1;
              else if (this.decodeMode === l2.Strict)
                return 0;
              return this.emitCodePoint((0, u3.replaceCodePoint)(this.result), this.consumed), this.errors && (t4 !== o2.SEMI && this.errors.missingSemicolonAfterCharacterReference(), this.errors.validateNumericCharacterReference(this.result)), this.consumed;
            }, t3.prototype.stateNamedEntity = function(t4, e4) {
              for (var n3 = this.decodeTree, i3 = n3[this.treeIndex], r3 = (i3 & c2.VALUE_LENGTH) >> 14; e4 < t4.length; e4++, this.excess++) {
                var s3 = t4.charCodeAt(e4);
                if (this.treeIndex = E2(n3, i3, this.treeIndex + Math.max(1, r3), s3), this.treeIndex < 0)
                  return 0 === this.result || this.decodeMode === l2.Attribute && (0 === r3 || ((a3 = s3) === o2.EQUALS || function(t5) {
                    return t5 >= o2.UPPER_A && t5 <= o2.UPPER_Z || t5 >= o2.LOWER_A && t5 <= o2.LOWER_Z || d2(t5);
                  }(a3))) ? 0 : this.emitNotTerminatedNamedEntity();
                if (0 != (r3 = ((i3 = n3[this.treeIndex]) & c2.VALUE_LENGTH) >> 14)) {
                  if (s3 === o2.SEMI)
                    return this.emitNamedEntityData(this.treeIndex, r3, this.consumed + this.excess);
                  this.decodeMode !== l2.Strict && (this.result = this.treeIndex, this.consumed += this.excess, this.excess = 0);
                }
              }
              var a3;
              return -1;
            }, t3.prototype.emitNotTerminatedNamedEntity = function() {
              var t4, e4 = this.result, n3 = (this.decodeTree[e4] & c2.VALUE_LENGTH) >> 14;
              return this.emitNamedEntityData(e4, n3, this.consumed), null === (t4 = this.errors) || void 0 === t4 || t4.missingSemicolonAfterCharacterReference(), this.consumed;
            }, t3.prototype.emitNamedEntityData = function(t4, e4, n3) {
              var i3 = this.decodeTree;
              return this.emitCodePoint(1 === e4 ? i3[t4] & ~c2.VALUE_LENGTH : i3[t4 + 1], n3), 3 === e4 && this.emitCodePoint(i3[t4 + 2], n3), n3;
            }, t3.prototype.end = function() {
              var t4;
              switch (this.state) {
                case f2.NamedEntity:
                  return 0 === this.result || this.decodeMode === l2.Attribute && this.result !== this.treeIndex ? 0 : this.emitNotTerminatedNamedEntity();
                case f2.NumericDecimal:
                  return this.emitNumericEntity(0, 2);
                case f2.NumericHex:
                  return this.emitNumericEntity(0, 3);
                case f2.NumericStart:
                  return null === (t4 = this.errors) || void 0 === t4 || t4.absenceOfDigitsInNumericCharacterReference(this.consumed), 0;
                case f2.EntityStart:
                  return 0;
              }
            }, t3;
          }();
          function m2(t3) {
            var e4 = "", n3 = new v2(t3, function(t4) {
              return e4 += (0, u3.fromCodePoint)(t4);
            });
            return function(t4, i3) {
              for (var r3 = 0, s3 = 0; (s3 = t4.indexOf("&", s3)) >= 0; ) {
                e4 += t4.slice(r3, s3), n3.startEntity(i3);
                var a3 = n3.write(t4, s3 + 1);
                if (a3 < 0) {
                  r3 = s3 + n3.end();
                  break;
                }
                r3 = s3 + a3, s3 = 0 === a3 ? r3 + 1 : r3;
              }
              var u4 = e4 + t4.slice(r3);
              return e4 = "", u4;
            };
          }
          function E2(t3, e4, n3, i3) {
            var r3 = (e4 & c2.BRANCH_LENGTH) >> 7, s3 = e4 & c2.JUMP_TABLE;
            if (0 === r3)
              return 0 !== s3 && i3 === s3 ? n3 : -1;
            if (s3) {
              var a3 = i3 - s3;
              return a3 < 0 || a3 >= r3 ? -1 : t3[n3 + a3] - 1;
            }
            for (var u4 = n3, o3 = u4 + r3 - 1; u4 <= o3; ) {
              var f3 = u4 + o3 >>> 1, l3 = t3[f3];
              if (l3 < i3)
                u4 = f3 + 1;
              else {
                if (!(l3 > i3))
                  return t3[f3 + r3];
                o3 = f3 - 1;
              }
            }
            return -1;
          }
          t2.EntityDecoder = v2, t2.determineBranch = E2;
          var k2 = m2(s2.default), T2 = m2(a2.default);
          t2.decodeHTML = function(t3, e4) {
            return void 0 === e4 && (e4 = l2.Legacy), k2(t3, e4);
          }, t2.decodeHTMLAttribute = function(t3) {
            return k2(t3, l2.Attribute);
          }, t2.decodeHTMLStrict = function(t3) {
            return k2(t3, l2.Strict);
          }, t2.decodeXML = function(t3) {
            return T2(t3, l2.Strict);
          };
        }(m), function(t2) {
          t2.HTML = "http://www.w3.org/1999/xhtml", t2.MATHML = "http://www.w3.org/1998/Math/MathML", t2.SVG = "http://www.w3.org/2000/svg", t2.XLINK = "http://www.w3.org/1999/xlink", t2.XML = "http://www.w3.org/XML/1998/namespace", t2.XMLNS = "http://www.w3.org/2000/xmlns/";
        }(E = E || (E = {})), function(t2) {
          t2.TYPE = "type", t2.ACTION = "action", t2.ENCODING = "encoding", t2.PROMPT = "prompt", t2.NAME = "name", t2.COLOR = "color", t2.FACE = "face", t2.SIZE = "size";
        }(k = k || (k = {})), function(t2) {
          t2.NO_QUIRKS = "no-quirks", t2.QUIRKS = "quirks", t2.LIMITED_QUIRKS = "limited-quirks";
        }(T = T || (T = {})), function(t2) {
          t2.A = "a", t2.ADDRESS = "address", t2.ANNOTATION_XML = "annotation-xml", t2.APPLET = "applet", t2.AREA = "area", t2.ARTICLE = "article", t2.ASIDE = "aside", t2.B = "b", t2.BASE = "base", t2.BASEFONT = "basefont", t2.BGSOUND = "bgsound", t2.BIG = "big", t2.BLOCKQUOTE = "blockquote", t2.BODY = "body", t2.BR = "br", t2.BUTTON = "button", t2.CAPTION = "caption", t2.CENTER = "center", t2.CODE = "code", t2.COL = "col", t2.COLGROUP = "colgroup", t2.DD = "dd", t2.DESC = "desc", t2.DETAILS = "details", t2.DIALOG = "dialog", t2.DIR = "dir", t2.DIV = "div", t2.DL = "dl", t2.DT = "dt", t2.EM = "em", t2.EMBED = "embed", t2.FIELDSET = "fieldset", t2.FIGCAPTION = "figcaption", t2.FIGURE = "figure", t2.FONT = "font", t2.FOOTER = "footer", t2.FOREIGN_OBJECT = "foreignObject", t2.FORM = "form", t2.FRAME = "frame", t2.FRAMESET = "frameset", t2.H1 = "h1", t2.H2 = "h2", t2.H3 = "h3", t2.H4 = "h4", t2.H5 = "h5", t2.H6 = "h6", t2.HEAD = "head", t2.HEADER = "header", t2.HGROUP = "hgroup", t2.HR = "hr", t2.HTML = "html", t2.I = "i", t2.IMG = "img", t2.IMAGE = "image", t2.INPUT = "input", t2.IFRAME = "iframe", t2.KEYGEN = "keygen", t2.LABEL = "label", t2.LI = "li", t2.LINK = "link", t2.LISTING = "listing", t2.MAIN = "main", t2.MALIGNMARK = "malignmark", t2.MARQUEE = "marquee", t2.MATH = "math", t2.MENU = "menu", t2.META = "meta", t2.MGLYPH = "mglyph", t2.MI = "mi", t2.MO = "mo", t2.MN = "mn", t2.MS = "ms", t2.MTEXT = "mtext", t2.NAV = "nav", t2.NOBR = "nobr", t2.NOFRAMES = "noframes", t2.NOEMBED = "noembed", t2.NOSCRIPT = "noscript", t2.OBJECT = "object", t2.OL = "ol", t2.OPTGROUP = "optgroup", t2.OPTION = "option", t2.P = "p", t2.PARAM = "param", t2.PLAINTEXT = "plaintext", t2.PRE = "pre", t2.RB = "rb", t2.RP = "rp", t2.RT = "rt", t2.RTC = "rtc", t2.RUBY = "ruby", t2.S = "s", t2.SCRIPT = "script", t2.SECTION = "section", t2.SELECT = "select", t2.SOURCE = "source", t2.SMALL = "small", t2.SPAN = "span", t2.STRIKE = "strike", t2.STRONG = "strong", t2.STYLE = "style", t2.SUB = "sub", t2.SUMMARY = "summary", t2.SUP = "sup", t2.TABLE = "table", t2.TBODY = "tbody", t2.TEMPLATE = "template", t2.TEXTAREA = "textarea", t2.TFOOT = "tfoot", t2.TD = "td", t2.TH = "th", t2.THEAD = "thead", t2.TITLE = "title", t2.TR = "tr", t2.TRACK = "track", t2.TT = "tt", t2.U = "u", t2.UL = "ul", t2.SVG = "svg", t2.VAR = "var", t2.WBR = "wbr", t2.XMP = "xmp";
        }(w = w || (w = {})), function(t2) {
          t2[t2.UNKNOWN = 0] = "UNKNOWN", t2[t2.A = 1] = "A", t2[t2.ADDRESS = 2] = "ADDRESS", t2[t2.ANNOTATION_XML = 3] = "ANNOTATION_XML", t2[t2.APPLET = 4] = "APPLET", t2[t2.AREA = 5] = "AREA", t2[t2.ARTICLE = 6] = "ARTICLE", t2[t2.ASIDE = 7] = "ASIDE", t2[t2.B = 8] = "B", t2[t2.BASE = 9] = "BASE", t2[t2.BASEFONT = 10] = "BASEFONT", t2[t2.BGSOUND = 11] = "BGSOUND", t2[t2.BIG = 12] = "BIG", t2[t2.BLOCKQUOTE = 13] = "BLOCKQUOTE", t2[t2.BODY = 14] = "BODY", t2[t2.BR = 15] = "BR", t2[t2.BUTTON = 16] = "BUTTON", t2[t2.CAPTION = 17] = "CAPTION", t2[t2.CENTER = 18] = "CENTER", t2[t2.CODE = 19] = "CODE", t2[t2.COL = 20] = "COL", t2[t2.COLGROUP = 21] = "COLGROUP", t2[t2.DD = 22] = "DD", t2[t2.DESC = 23] = "DESC", t2[t2.DETAILS = 24] = "DETAILS", t2[t2.DIALOG = 25] = "DIALOG", t2[t2.DIR = 26] = "DIR", t2[t2.DIV = 27] = "DIV", t2[t2.DL = 28] = "DL", t2[t2.DT = 29] = "DT", t2[t2.EM = 30] = "EM", t2[t2.EMBED = 31] = "EMBED", t2[t2.FIELDSET = 32] = "FIELDSET", t2[t2.FIGCAPTION = 33] = "FIGCAPTION", t2[t2.FIGURE = 34] = "FIGURE", t2[t2.FONT = 35] = "FONT", t2[t2.FOOTER = 36] = "FOOTER", t2[t2.FOREIGN_OBJECT = 37] = "FOREIGN_OBJECT", t2[t2.FORM = 38] = "FORM", t2[t2.FRAME = 39] = "FRAME", t2[t2.FRAMESET = 40] = "FRAMESET", t2[t2.H1 = 41] = "H1", t2[t2.H2 = 42] = "H2", t2[t2.H3 = 43] = "H3", t2[t2.H4 = 44] = "H4", t2[t2.H5 = 45] = "H5", t2[t2.H6 = 46] = "H6", t2[t2.HEAD = 47] = "HEAD", t2[t2.HEADER = 48] = "HEADER", t2[t2.HGROUP = 49] = "HGROUP", t2[t2.HR = 50] = "HR", t2[t2.HTML = 51] = "HTML", t2[t2.I = 52] = "I", t2[t2.IMG = 53] = "IMG", t2[t2.IMAGE = 54] = "IMAGE", t2[t2.INPUT = 55] = "INPUT", t2[t2.IFRAME = 56] = "IFRAME", t2[t2.KEYGEN = 57] = "KEYGEN", t2[t2.LABEL = 58] = "LABEL", t2[t2.LI = 59] = "LI", t2[t2.LINK = 60] = "LINK", t2[t2.LISTING = 61] = "LISTING", t2[t2.MAIN = 62] = "MAIN", t2[t2.MALIGNMARK = 63] = "MALIGNMARK", t2[t2.MARQUEE = 64] = "MARQUEE", t2[t2.MATH = 65] = "MATH", t2[t2.MENU = 66] = "MENU", t2[t2.META = 67] = "META", t2[t2.MGLYPH = 68] = "MGLYPH", t2[t2.MI = 69] = "MI", t2[t2.MO = 70] = "MO", t2[t2.MN = 71] = "MN", t2[t2.MS = 72] = "MS", t2[t2.MTEXT = 73] = "MTEXT", t2[t2.NAV = 74] = "NAV", t2[t2.NOBR = 75] = "NOBR", t2[t2.NOFRAMES = 76] = "NOFRAMES", t2[t2.NOEMBED = 77] = "NOEMBED", t2[t2.NOSCRIPT = 78] = "NOSCRIPT", t2[t2.OBJECT = 79] = "OBJECT", t2[t2.OL = 80] = "OL", t2[t2.OPTGROUP = 81] = "OPTGROUP", t2[t2.OPTION = 82] = "OPTION", t2[t2.P = 83] = "P", t2[t2.PARAM = 84] = "PARAM", t2[t2.PLAINTEXT = 85] = "PLAINTEXT", t2[t2.PRE = 86] = "PRE", t2[t2.RB = 87] = "RB", t2[t2.RP = 88] = "RP", t2[t2.RT = 89] = "RT", t2[t2.RTC = 90] = "RTC", t2[t2.RUBY = 91] = "RUBY", t2[t2.S = 92] = "S", t2[t2.SCRIPT = 93] = "SCRIPT", t2[t2.SECTION = 94] = "SECTION", t2[t2.SELECT = 95] = "SELECT", t2[t2.SOURCE = 96] = "SOURCE", t2[t2.SMALL = 97] = "SMALL", t2[t2.SPAN = 98] = "SPAN", t2[t2.STRIKE = 99] = "STRIKE", t2[t2.STRONG = 100] = "STRONG", t2[t2.STYLE = 101] = "STYLE", t2[t2.SUB = 102] = "SUB", t2[t2.SUMMARY = 103] = "SUMMARY", t2[t2.SUP = 104] = "SUP", t2[t2.TABLE = 105] = "TABLE", t2[t2.TBODY = 106] = "TBODY", t2[t2.TEMPLATE = 107] = "TEMPLATE", t2[t2.TEXTAREA = 108] = "TEXTAREA", t2[t2.TFOOT = 109] = "TFOOT", t2[t2.TD = 110] = "TD", t2[t2.TH = 111] = "TH", t2[t2.THEAD = 112] = "THEAD", t2[t2.TITLE = 113] = "TITLE", t2[t2.TR = 114] = "TR", t2[t2.TRACK = 115] = "TRACK", t2[t2.TT = 116] = "TT", t2[t2.U = 117] = "U", t2[t2.UL = 118] = "UL", t2[t2.SVG = 119] = "SVG", t2[t2.VAR = 120] = "VAR", t2[t2.WBR = 121] = "WBR", t2[t2.XMP = 122] = "XMP";
        }(S = S || (S = {}));
        var y = /* @__PURE__ */ new Map([[w.A, S.A], [w.ADDRESS, S.ADDRESS], [w.ANNOTATION_XML, S.ANNOTATION_XML], [w.APPLET, S.APPLET], [w.AREA, S.AREA], [w.ARTICLE, S.ARTICLE], [w.ASIDE, S.ASIDE], [w.B, S.B], [w.BASE, S.BASE], [w.BASEFONT, S.BASEFONT], [w.BGSOUND, S.BGSOUND], [w.BIG, S.BIG], [w.BLOCKQUOTE, S.BLOCKQUOTE], [w.BODY, S.BODY], [w.BR, S.BR], [w.BUTTON, S.BUTTON], [w.CAPTION, S.CAPTION], [w.CENTER, S.CENTER], [w.CODE, S.CODE], [w.COL, S.COL], [w.COLGROUP, S.COLGROUP], [w.DD, S.DD], [w.DESC, S.DESC], [w.DETAILS, S.DETAILS], [w.DIALOG, S.DIALOG], [w.DIR, S.DIR], [w.DIV, S.DIV], [w.DL, S.DL], [w.DT, S.DT], [w.EM, S.EM], [w.EMBED, S.EMBED], [w.FIELDSET, S.FIELDSET], [w.FIGCAPTION, S.FIGCAPTION], [w.FIGURE, S.FIGURE], [w.FONT, S.FONT], [w.FOOTER, S.FOOTER], [w.FOREIGN_OBJECT, S.FOREIGN_OBJECT], [w.FORM, S.FORM], [w.FRAME, S.FRAME], [w.FRAMESET, S.FRAMESET], [w.H1, S.H1], [w.H2, S.H2], [w.H3, S.H3], [w.H4, S.H4], [w.H5, S.H5], [w.H6, S.H6], [w.HEAD, S.HEAD], [w.HEADER, S.HEADER], [w.HGROUP, S.HGROUP], [w.HR, S.HR], [w.HTML, S.HTML], [w.I, S.I], [w.IMG, S.IMG], [w.IMAGE, S.IMAGE], [w.INPUT, S.INPUT], [w.IFRAME, S.IFRAME], [w.KEYGEN, S.KEYGEN], [w.LABEL, S.LABEL], [w.LI, S.LI], [w.LINK, S.LINK], [w.LISTING, S.LISTING], [w.MAIN, S.MAIN], [w.MALIGNMARK, S.MALIGNMARK], [w.MARQUEE, S.MARQUEE], [w.MATH, S.MATH], [w.MENU, S.MENU], [w.META, S.META], [w.MGLYPH, S.MGLYPH], [w.MI, S.MI], [w.MO, S.MO], [w.MN, S.MN], [w.MS, S.MS], [w.MTEXT, S.MTEXT], [w.NAV, S.NAV], [w.NOBR, S.NOBR], [w.NOFRAMES, S.NOFRAMES], [w.NOEMBED, S.NOEMBED], [w.NOSCRIPT, S.NOSCRIPT], [w.OBJECT, S.OBJECT], [w.OL, S.OL], [w.OPTGROUP, S.OPTGROUP], [w.OPTION, S.OPTION], [w.P, S.P], [w.PARAM, S.PARAM], [w.PLAINTEXT, S.PLAINTEXT], [w.PRE, S.PRE], [w.RB, S.RB], [w.RP, S.RP], [w.RT, S.RT], [w.RTC, S.RTC], [w.RUBY, S.RUBY], [w.S, S.S], [w.SCRIPT, S.SCRIPT], [w.SECTION, S.SECTION], [w.SELECT, S.SELECT], [w.SOURCE, S.SOURCE], [w.SMALL, S.SMALL], [w.SPAN, S.SPAN], [w.STRIKE, S.STRIKE], [w.STRONG, S.STRONG], [w.STYLE, S.STYLE], [w.SUB, S.SUB], [w.SUMMARY, S.SUMMARY], [w.SUP, S.SUP], [w.TABLE, S.TABLE], [w.TBODY, S.TBODY], [w.TEMPLATE, S.TEMPLATE], [w.TEXTAREA, S.TEXTAREA], [w.TFOOT, S.TFOOT], [w.TD, S.TD], [w.TH, S.TH], [w.THEAD, S.THEAD], [w.TITLE, S.TITLE], [w.TR, S.TR], [w.TRACK, S.TRACK], [w.TT, S.TT], [w.U, S.U], [w.UL, S.UL], [w.SVG, S.SVG], [w.VAR, S.VAR], [w.WBR, S.WBR], [w.XMP, S.XMP]]);
        function A(t2) {
          var e3;
          return null !== (e3 = y.get(t2)) && void 0 !== e3 ? e3 : S.UNKNOWN;
        }
        var N = S, M = (e2 = {}, e2[E.HTML] = /* @__PURE__ */ new Set([N.ADDRESS, N.APPLET, N.AREA, N.ARTICLE, N.ASIDE, N.BASE, N.BASEFONT, N.BGSOUND, N.BLOCKQUOTE, N.BODY, N.BR, N.BUTTON, N.CAPTION, N.CENTER, N.COL, N.COLGROUP, N.DD, N.DETAILS, N.DIR, N.DIV, N.DL, N.DT, N.EMBED, N.FIELDSET, N.FIGCAPTION, N.FIGURE, N.FOOTER, N.FORM, N.FRAME, N.FRAMESET, N.H1, N.H2, N.H3, N.H4, N.H5, N.H6, N.HEAD, N.HEADER, N.HGROUP, N.HR, N.HTML, N.IFRAME, N.IMG, N.INPUT, N.LI, N.LINK, N.LISTING, N.MAIN, N.MARQUEE, N.MENU, N.META, N.NAV, N.NOEMBED, N.NOFRAMES, N.NOSCRIPT, N.OBJECT, N.OL, N.P, N.PARAM, N.PLAINTEXT, N.PRE, N.SCRIPT, N.SECTION, N.SELECT, N.SOURCE, N.STYLE, N.SUMMARY, N.TABLE, N.TBODY, N.TD, N.TEMPLATE, N.TEXTAREA, N.TFOOT, N.TH, N.THEAD, N.TITLE, N.TR, N.TRACK, N.UL, N.WBR, N.XMP]), e2[E.MATHML] = /* @__PURE__ */ new Set([N.MI, N.MO, N.MN, N.MS, N.MTEXT, N.ANNOTATION_XML]), e2[E.SVG] = /* @__PURE__ */ new Set([N.TITLE, N.FOREIGN_OBJECT, N.DESC]), e2[E.XLINK] = /* @__PURE__ */ new Set(), e2[E.XML] = /* @__PURE__ */ new Set(), e2[E.XMLNS] = /* @__PURE__ */ new Set(), e2);
        function C(t2) {
          return t2 === N.H1 || t2 === N.H2 || t2 === N.H3 || t2 === N.H4 || t2 === N.H5 || t2 === N.H6;
        }
        var O = /* @__PURE__ */ new Map([[128, 8364], [130, 8218], [131, 402], [132, 8222], [133, 8230], [134, 8224], [135, 8225], [136, 710], [137, 8240], [138, 352], [139, 8249], [140, 338], [142, 381], [145, 8216], [146, 8217], [147, 8220], [148, 8221], [149, 8226], [150, 8211], [151, 8212], [152, 732], [153, 8482], [154, 353], [155, 8250], [156, 339], [158, 382], [159, 376]]);
        var D;
        !function(t2) {
          t2[t2.DATA = 0] = "DATA", t2[t2.RCDATA = 1] = "RCDATA", t2[t2.RAWTEXT = 2] = "RAWTEXT", t2[t2.SCRIPT_DATA = 3] = "SCRIPT_DATA", t2[t2.PLAINTEXT = 4] = "PLAINTEXT", t2[t2.TAG_OPEN = 5] = "TAG_OPEN", t2[t2.END_TAG_OPEN = 6] = "END_TAG_OPEN", t2[t2.TAG_NAME = 7] = "TAG_NAME", t2[t2.RCDATA_LESS_THAN_SIGN = 8] = "RCDATA_LESS_THAN_SIGN", t2[t2.RCDATA_END_TAG_OPEN = 9] = "RCDATA_END_TAG_OPEN", t2[t2.RCDATA_END_TAG_NAME = 10] = "RCDATA_END_TAG_NAME", t2[t2.RAWTEXT_LESS_THAN_SIGN = 11] = "RAWTEXT_LESS_THAN_SIGN", t2[t2.RAWTEXT_END_TAG_OPEN = 12] = "RAWTEXT_END_TAG_OPEN", t2[t2.RAWTEXT_END_TAG_NAME = 13] = "RAWTEXT_END_TAG_NAME", t2[t2.SCRIPT_DATA_LESS_THAN_SIGN = 14] = "SCRIPT_DATA_LESS_THAN_SIGN", t2[t2.SCRIPT_DATA_END_TAG_OPEN = 15] = "SCRIPT_DATA_END_TAG_OPEN", t2[t2.SCRIPT_DATA_END_TAG_NAME = 16] = "SCRIPT_DATA_END_TAG_NAME", t2[t2.SCRIPT_DATA_ESCAPE_START = 17] = "SCRIPT_DATA_ESCAPE_START", t2[t2.SCRIPT_DATA_ESCAPE_START_DASH = 18] = "SCRIPT_DATA_ESCAPE_START_DASH", t2[t2.SCRIPT_DATA_ESCAPED = 19] = "SCRIPT_DATA_ESCAPED", t2[t2.SCRIPT_DATA_ESCAPED_DASH = 20] = "SCRIPT_DATA_ESCAPED_DASH", t2[t2.SCRIPT_DATA_ESCAPED_DASH_DASH = 21] = "SCRIPT_DATA_ESCAPED_DASH_DASH", t2[t2.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN = 22] = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN", t2[t2.SCRIPT_DATA_ESCAPED_END_TAG_OPEN = 23] = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN", t2[t2.SCRIPT_DATA_ESCAPED_END_TAG_NAME = 24] = "SCRIPT_DATA_ESCAPED_END_TAG_NAME", t2[t2.SCRIPT_DATA_DOUBLE_ESCAPE_START = 25] = "SCRIPT_DATA_DOUBLE_ESCAPE_START", t2[t2.SCRIPT_DATA_DOUBLE_ESCAPED = 26] = "SCRIPT_DATA_DOUBLE_ESCAPED", t2[t2.SCRIPT_DATA_DOUBLE_ESCAPED_DASH = 27] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH", t2[t2.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH = 28] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH", t2[t2.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN = 29] = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN", t2[t2.SCRIPT_DATA_DOUBLE_ESCAPE_END = 30] = "SCRIPT_DATA_DOUBLE_ESCAPE_END", t2[t2.BEFORE_ATTRIBUTE_NAME = 31] = "BEFORE_ATTRIBUTE_NAME", t2[t2.ATTRIBUTE_NAME = 32] = "ATTRIBUTE_NAME", t2[t2.AFTER_ATTRIBUTE_NAME = 33] = "AFTER_ATTRIBUTE_NAME", t2[t2.BEFORE_ATTRIBUTE_VALUE = 34] = "BEFORE_ATTRIBUTE_VALUE", t2[t2.ATTRIBUTE_VALUE_DOUBLE_QUOTED = 35] = "ATTRIBUTE_VALUE_DOUBLE_QUOTED", t2[t2.ATTRIBUTE_VALUE_SINGLE_QUOTED = 36] = "ATTRIBUTE_VALUE_SINGLE_QUOTED", t2[t2.ATTRIBUTE_VALUE_UNQUOTED = 37] = "ATTRIBUTE_VALUE_UNQUOTED", t2[t2.AFTER_ATTRIBUTE_VALUE_QUOTED = 38] = "AFTER_ATTRIBUTE_VALUE_QUOTED", t2[t2.SELF_CLOSING_START_TAG = 39] = "SELF_CLOSING_START_TAG", t2[t2.BOGUS_COMMENT = 40] = "BOGUS_COMMENT", t2[t2.MARKUP_DECLARATION_OPEN = 41] = "MARKUP_DECLARATION_OPEN", t2[t2.COMMENT_START = 42] = "COMMENT_START", t2[t2.COMMENT_START_DASH = 43] = "COMMENT_START_DASH", t2[t2.COMMENT = 44] = "COMMENT", t2[t2.COMMENT_LESS_THAN_SIGN = 45] = "COMMENT_LESS_THAN_SIGN", t2[t2.COMMENT_LESS_THAN_SIGN_BANG = 46] = "COMMENT_LESS_THAN_SIGN_BANG", t2[t2.COMMENT_LESS_THAN_SIGN_BANG_DASH = 47] = "COMMENT_LESS_THAN_SIGN_BANG_DASH", t2[t2.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH = 48] = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH", t2[t2.COMMENT_END_DASH = 49] = "COMMENT_END_DASH", t2[t2.COMMENT_END = 50] = "COMMENT_END", t2[t2.COMMENT_END_BANG = 51] = "COMMENT_END_BANG", t2[t2.DOCTYPE = 52] = "DOCTYPE", t2[t2.BEFORE_DOCTYPE_NAME = 53] = "BEFORE_DOCTYPE_NAME", t2[t2.DOCTYPE_NAME = 54] = "DOCTYPE_NAME", t2[t2.AFTER_DOCTYPE_NAME = 55] = "AFTER_DOCTYPE_NAME", t2[t2.AFTER_DOCTYPE_PUBLIC_KEYWORD = 56] = "AFTER_DOCTYPE_PUBLIC_KEYWORD", t2[t2.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER = 57] = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER", t2[t2.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED = 58] = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED", t2[t2.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED = 59] = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED", t2[t2.AFTER_DOCTYPE_PUBLIC_IDENTIFIER = 60] = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER", t2[t2.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS = 61] = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS", t2[t2.AFTER_DOCTYPE_SYSTEM_KEYWORD = 62] = "AFTER_DOCTYPE_SYSTEM_KEYWORD", t2[t2.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER = 63] = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER", t2[t2.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED = 64] = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED", t2[t2.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED = 65] = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED", t2[t2.AFTER_DOCTYPE_SYSTEM_IDENTIFIER = 66] = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER", t2[t2.BOGUS_DOCTYPE = 67] = "BOGUS_DOCTYPE", t2[t2.CDATA_SECTION = 68] = "CDATA_SECTION", t2[t2.CDATA_SECTION_BRACKET = 69] = "CDATA_SECTION_BRACKET", t2[t2.CDATA_SECTION_END = 70] = "CDATA_SECTION_END", t2[t2.CHARACTER_REFERENCE = 71] = "CHARACTER_REFERENCE", t2[t2.NAMED_CHARACTER_REFERENCE = 72] = "NAMED_CHARACTER_REFERENCE", t2[t2.AMBIGUOUS_AMPERSAND = 73] = "AMBIGUOUS_AMPERSAND", t2[t2.NUMERIC_CHARACTER_REFERENCE = 74] = "NUMERIC_CHARACTER_REFERENCE", t2[t2.HEXADEMICAL_CHARACTER_REFERENCE_START = 75] = "HEXADEMICAL_CHARACTER_REFERENCE_START", t2[t2.HEXADEMICAL_CHARACTER_REFERENCE = 76] = "HEXADEMICAL_CHARACTER_REFERENCE", t2[t2.DECIMAL_CHARACTER_REFERENCE = 77] = "DECIMAL_CHARACTER_REFERENCE", t2[t2.NUMERIC_CHARACTER_REFERENCE_END = 78] = "NUMERIC_CHARACTER_REFERENCE_END";
        }(D || (D = {}));
        var R = { DATA: D.DATA, RCDATA: D.RCDATA, RAWTEXT: D.RAWTEXT, SCRIPT_DATA: D.SCRIPT_DATA, PLAINTEXT: D.PLAINTEXT, CDATA_SECTION: D.CDATA_SECTION };
        function L(t2) {
          return t2 >= r.DIGIT_0 && t2 <= r.DIGIT_9;
        }
        function I(t2) {
          return t2 >= r.LATIN_CAPITAL_A && t2 <= r.LATIN_CAPITAL_Z;
        }
        function x(t2) {
          return function(t3) {
            return t3 >= r.LATIN_SMALL_A && t3 <= r.LATIN_SMALL_Z;
          }(t2) || I(t2);
        }
        function P(t2) {
          return x(t2) || L(t2);
        }
        function H2(t2) {
          return t2 >= r.LATIN_CAPITAL_A && t2 <= r.LATIN_CAPITAL_F;
        }
        function j(t2) {
          return t2 >= r.LATIN_SMALL_A && t2 <= r.LATIN_SMALL_F;
        }
        function U(t2) {
          return t2 + 32;
        }
        function B(t2) {
          return t2 === r.SPACE || t2 === r.LINE_FEED || t2 === r.TABULATION || t2 === r.FORM_FEED;
        }
        function q(t2) {
          return B(t2) || t2 === r.SOLIDUS || t2 === r.GREATER_THAN_SIGN;
        }
        var F = function() {
          function t2(t3, e3) {
            this.options = t3, this.handler = e3, this.paused = false, this.inLoop = false, this.inForeignNode = false, this.lastStartTagName = "", this.active = false, this.state = D.DATA, this.returnState = D.DATA, this.charRefCode = -1, this.consumedAfterSnapshot = -1, this.currentCharacterToken = null, this.currentToken = null, this.currentAttr = { name: "", value: "" }, this.preprocessor = new d(e3), this.currentLocation = this.getCurrentLocation(-1);
          }
          t2.prototype._err = function(t3) {
            var e3, n2;
            null === (n2 = (e3 = this.handler).onParseError) || void 0 === n2 || n2.call(e3, this.preprocessor.getError(t3));
          };
          t2.prototype.getCurrentLocation = function(t3) {
            return this.options.sourceCodeLocationInfo ? { startLine: this.preprocessor.line, startCol: this.preprocessor.col - t3, startOffset: this.preprocessor.offset - t3, endLine: -1, endCol: -1, endOffset: -1 } : null;
          };
          t2.prototype._runParsingLoop = function() {
            if (!this.inLoop) {
              for (this.inLoop = true; this.active && !this.paused; ) {
                this.consumedAfterSnapshot = 0;
                var t3 = this._consume();
                this._ensureHibernation() || this._callState(t3);
              }
              this.inLoop = false;
            }
          };
          t2.prototype.pause = function() {
            this.paused = true;
          };
          t2.prototype.resume = function(t3) {
            if (!this.paused)
              throw new Error("Parser was already resumed");
            this.paused = false, this.inLoop || (this._runParsingLoop(), this.paused || null == t3 || t3());
          };
          t2.prototype.write = function(t3, e3, n2) {
            this.active = true, this.preprocessor.write(t3, e3), this._runParsingLoop(), this.paused || null == n2 || n2();
          };
          t2.prototype.insertHtmlAtCurrentPos = function(t3) {
            this.active = true, this.preprocessor.insertHtmlAtCurrentPos(t3), this._runParsingLoop();
          };
          t2.prototype._ensureHibernation = function() {
            return !!this.preprocessor.endOfChunkHit && (this._unconsume(this.consumedAfterSnapshot), this.active = false, true);
          };
          t2.prototype._consume = function() {
            return this.consumedAfterSnapshot++, this.preprocessor.advance();
          };
          t2.prototype._unconsume = function(t3) {
            this.consumedAfterSnapshot -= t3, this.preprocessor.retreat(t3);
          };
          t2.prototype._reconsumeInState = function(t3, e3) {
            this.state = t3, this._callState(e3);
          };
          t2.prototype._advanceBy = function(t3) {
            this.consumedAfterSnapshot += t3;
            for (var e3 = 0; e3 < t3; e3++)
              this.preprocessor.advance();
          };
          t2.prototype._consumeSequenceIfMatch = function(t3, e3) {
            return !!this.preprocessor.startsWith(t3, e3) && (this._advanceBy(t3.length - 1), true);
          };
          t2.prototype._createStartTagToken = function() {
            this.currentToken = { type: h2.START_TAG, tagName: "", tagID: S.UNKNOWN, selfClosing: false, ackSelfClosing: false, attrs: [], location: this.getCurrentLocation(1) };
          };
          t2.prototype._createEndTagToken = function() {
            this.currentToken = { type: h2.END_TAG, tagName: "", tagID: S.UNKNOWN, selfClosing: false, ackSelfClosing: false, attrs: [], location: this.getCurrentLocation(2) };
          };
          t2.prototype._createCommentToken = function(t3) {
            this.currentToken = { type: h2.COMMENT, data: "", location: this.getCurrentLocation(t3) };
          };
          t2.prototype._createDoctypeToken = function(t3) {
            this.currentToken = { type: h2.DOCTYPE, name: t3, forceQuirks: false, publicId: null, systemId: null, location: this.currentLocation };
          };
          t2.prototype._createCharacterToken = function(t3, e3) {
            this.currentCharacterToken = { type: t3, chars: e3, location: this.currentLocation };
          };
          t2.prototype._createAttr = function(t3) {
            this.currentAttr = { name: t3, value: "" }, this.currentLocation = this.getCurrentLocation(0);
          };
          t2.prototype._leaveAttrName = function() {
            var t3, e3;
            var n2 = this.currentToken;
            null === v(n2, this.currentAttr.name) ? (n2.attrs.push(this.currentAttr), n2.location && this.currentLocation && ((null !== (t3 = (e3 = n2.location).attrs) && void 0 !== t3 ? t3 : e3.attrs = /* @__PURE__ */ Object.create(null))[this.currentAttr.name] = this.currentLocation, this._leaveAttrValue())) : this._err(l.duplicateAttribute);
          };
          t2.prototype._leaveAttrValue = function() {
            this.currentLocation && (this.currentLocation.endLine = this.preprocessor.line, this.currentLocation.endCol = this.preprocessor.col, this.currentLocation.endOffset = this.preprocessor.offset);
          };
          t2.prototype.prepareToken = function(t3) {
            this._emitCurrentCharacterToken(t3.location), this.currentToken = null, t3.location && (t3.location.endLine = this.preprocessor.line, t3.location.endCol = this.preprocessor.col + 1, t3.location.endOffset = this.preprocessor.offset + 1), this.currentLocation = this.getCurrentLocation(-1);
          };
          t2.prototype.emitCurrentTagToken = function() {
            var t3 = this.currentToken;
            this.prepareToken(t3), t3.tagID = A(t3.tagName), t3.type === h2.START_TAG ? (this.lastStartTagName = t3.tagName, this.handler.onStartTag(t3)) : (t3.attrs.length > 0 && this._err(l.endTagWithAttributes), t3.selfClosing && this._err(l.endTagWithTrailingSolidus), this.handler.onEndTag(t3)), this.preprocessor.dropParsedChunk();
          };
          t2.prototype.emitCurrentComment = function(t3) {
            this.prepareToken(t3), this.handler.onComment(t3), this.preprocessor.dropParsedChunk();
          };
          t2.prototype.emitCurrentDoctype = function(t3) {
            this.prepareToken(t3), this.handler.onDoctype(t3), this.preprocessor.dropParsedChunk();
          };
          t2.prototype._emitCurrentCharacterToken = function(t3) {
            if (this.currentCharacterToken) {
              switch (t3 && this.currentCharacterToken.location && (this.currentCharacterToken.location.endLine = t3.startLine, this.currentCharacterToken.location.endCol = t3.startCol, this.currentCharacterToken.location.endOffset = t3.startOffset), this.currentCharacterToken.type) {
                case h2.CHARACTER:
                  this.handler.onCharacter(this.currentCharacterToken);
                  break;
                case h2.NULL_CHARACTER:
                  this.handler.onNullCharacter(this.currentCharacterToken);
                  break;
                case h2.WHITESPACE_CHARACTER:
                  this.handler.onWhitespaceCharacter(this.currentCharacterToken);
              }
              this.currentCharacterToken = null;
            }
          };
          t2.prototype._emitEOFToken = function() {
            var t3 = this.getCurrentLocation(0);
            t3 && (t3.endLine = t3.startLine, t3.endCol = t3.startCol, t3.endOffset = t3.startOffset), this._emitCurrentCharacterToken(t3), this.handler.onEof({ type: h2.EOF, location: t3 }), this.active = false;
          };
          t2.prototype._appendCharToCurrentCharacterToken = function(t3, e3) {
            if (this.currentCharacterToken) {
              if (this.currentCharacterToken.type === t3)
                return void (this.currentCharacterToken.chars += e3);
              this.currentLocation = this.getCurrentLocation(0), this._emitCurrentCharacterToken(this.currentLocation), this.preprocessor.dropParsedChunk();
            }
            this._createCharacterToken(t3, e3);
          };
          t2.prototype._emitCodePoint = function(t3) {
            var e3 = B(t3) ? h2.WHITESPACE_CHARACTER : t3 === r.NULL ? h2.NULL_CHARACTER : h2.CHARACTER;
            this._appendCharToCurrentCharacterToken(e3, String.fromCodePoint(t3));
          };
          t2.prototype._emitChars = function(t3) {
            this._appendCharToCurrentCharacterToken(h2.CHARACTER, t3);
          };
          t2.prototype._matchNamedCharacterReference = function(t3) {
            var e3 = null, n2 = 0, i2 = false;
            for (var s2 = 0, a2 = m.htmlDecodeTree[0]; s2 >= 0 && (s2 = m.determineBranch(m.htmlDecodeTree, a2, s2 + 1, t3), !(s2 < 0)); t3 = this._consume()) {
              n2 += 1, a2 = m.htmlDecodeTree[s2];
              var u3 = a2 & m.BinTrieFlags.VALUE_LENGTH;
              if (u3) {
                var o2 = (u3 >> 14) - 1;
                if (t3 !== r.SEMICOLON && this._isCharacterReferenceInAttribute() && ((c2 = this.preprocessor.peek(1)) === r.EQUALS_SIGN || P(c2)) ? (e3 = [r.AMPERSAND], s2 += o2) : (e3 = 0 === o2 ? [m.htmlDecodeTree[s2] & ~m.BinTrieFlags.VALUE_LENGTH] : 1 === o2 ? [m.htmlDecodeTree[++s2]] : [m.htmlDecodeTree[++s2], m.htmlDecodeTree[++s2]], n2 = 0, i2 = t3 !== r.SEMICOLON), 0 === o2) {
                  this._consume();
                  break;
                }
              }
            }
            var c2;
            return this._unconsume(n2), i2 && !this.preprocessor.endOfChunkHit && this._err(l.missingSemicolonAfterCharacterReference), this._unconsume(1), e3;
          };
          t2.prototype._isCharacterReferenceInAttribute = function() {
            return this.returnState === D.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === D.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === D.ATTRIBUTE_VALUE_UNQUOTED;
          };
          t2.prototype._flushCodePointConsumedAsCharacterReference = function(t3) {
            this._isCharacterReferenceInAttribute() ? this.currentAttr.value += String.fromCodePoint(t3) : this._emitCodePoint(t3);
          };
          t2.prototype._callState = function(t3) {
            switch (this.state) {
              case D.DATA:
                this._stateData(t3);
                break;
              case D.RCDATA:
                this._stateRcdata(t3);
                break;
              case D.RAWTEXT:
                this._stateRawtext(t3);
                break;
              case D.SCRIPT_DATA:
                this._stateScriptData(t3);
                break;
              case D.PLAINTEXT:
                this._statePlaintext(t3);
                break;
              case D.TAG_OPEN:
                this._stateTagOpen(t3);
                break;
              case D.END_TAG_OPEN:
                this._stateEndTagOpen(t3);
                break;
              case D.TAG_NAME:
                this._stateTagName(t3);
                break;
              case D.RCDATA_LESS_THAN_SIGN:
                this._stateRcdataLessThanSign(t3);
                break;
              case D.RCDATA_END_TAG_OPEN:
                this._stateRcdataEndTagOpen(t3);
                break;
              case D.RCDATA_END_TAG_NAME:
                this._stateRcdataEndTagName(t3);
                break;
              case D.RAWTEXT_LESS_THAN_SIGN:
                this._stateRawtextLessThanSign(t3);
                break;
              case D.RAWTEXT_END_TAG_OPEN:
                this._stateRawtextEndTagOpen(t3);
                break;
              case D.RAWTEXT_END_TAG_NAME:
                this._stateRawtextEndTagName(t3);
                break;
              case D.SCRIPT_DATA_LESS_THAN_SIGN:
                this._stateScriptDataLessThanSign(t3);
                break;
              case D.SCRIPT_DATA_END_TAG_OPEN:
                this._stateScriptDataEndTagOpen(t3);
                break;
              case D.SCRIPT_DATA_END_TAG_NAME:
                this._stateScriptDataEndTagName(t3);
                break;
              case D.SCRIPT_DATA_ESCAPE_START:
                this._stateScriptDataEscapeStart(t3);
                break;
              case D.SCRIPT_DATA_ESCAPE_START_DASH:
                this._stateScriptDataEscapeStartDash(t3);
                break;
              case D.SCRIPT_DATA_ESCAPED:
                this._stateScriptDataEscaped(t3);
                break;
              case D.SCRIPT_DATA_ESCAPED_DASH:
                this._stateScriptDataEscapedDash(t3);
                break;
              case D.SCRIPT_DATA_ESCAPED_DASH_DASH:
                this._stateScriptDataEscapedDashDash(t3);
                break;
              case D.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:
                this._stateScriptDataEscapedLessThanSign(t3);
                break;
              case D.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:
                this._stateScriptDataEscapedEndTagOpen(t3);
                break;
              case D.SCRIPT_DATA_ESCAPED_END_TAG_NAME:
                this._stateScriptDataEscapedEndTagName(t3);
                break;
              case D.SCRIPT_DATA_DOUBLE_ESCAPE_START:
                this._stateScriptDataDoubleEscapeStart(t3);
                break;
              case D.SCRIPT_DATA_DOUBLE_ESCAPED:
                this._stateScriptDataDoubleEscaped(t3);
                break;
              case D.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:
                this._stateScriptDataDoubleEscapedDash(t3);
                break;
              case D.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:
                this._stateScriptDataDoubleEscapedDashDash(t3);
                break;
              case D.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:
                this._stateScriptDataDoubleEscapedLessThanSign(t3);
                break;
              case D.SCRIPT_DATA_DOUBLE_ESCAPE_END:
                this._stateScriptDataDoubleEscapeEnd(t3);
                break;
              case D.BEFORE_ATTRIBUTE_NAME:
                this._stateBeforeAttributeName(t3);
                break;
              case D.ATTRIBUTE_NAME:
                this._stateAttributeName(t3);
                break;
              case D.AFTER_ATTRIBUTE_NAME:
                this._stateAfterAttributeName(t3);
                break;
              case D.BEFORE_ATTRIBUTE_VALUE:
                this._stateBeforeAttributeValue(t3);
                break;
              case D.ATTRIBUTE_VALUE_DOUBLE_QUOTED:
                this._stateAttributeValueDoubleQuoted(t3);
                break;
              case D.ATTRIBUTE_VALUE_SINGLE_QUOTED:
                this._stateAttributeValueSingleQuoted(t3);
                break;
              case D.ATTRIBUTE_VALUE_UNQUOTED:
                this._stateAttributeValueUnquoted(t3);
                break;
              case D.AFTER_ATTRIBUTE_VALUE_QUOTED:
                this._stateAfterAttributeValueQuoted(t3);
                break;
              case D.SELF_CLOSING_START_TAG:
                this._stateSelfClosingStartTag(t3);
                break;
              case D.BOGUS_COMMENT:
                this._stateBogusComment(t3);
                break;
              case D.MARKUP_DECLARATION_OPEN:
                this._stateMarkupDeclarationOpen(t3);
                break;
              case D.COMMENT_START:
                this._stateCommentStart(t3);
                break;
              case D.COMMENT_START_DASH:
                this._stateCommentStartDash(t3);
                break;
              case D.COMMENT:
                this._stateComment(t3);
                break;
              case D.COMMENT_LESS_THAN_SIGN:
                this._stateCommentLessThanSign(t3);
                break;
              case D.COMMENT_LESS_THAN_SIGN_BANG:
                this._stateCommentLessThanSignBang(t3);
                break;
              case D.COMMENT_LESS_THAN_SIGN_BANG_DASH:
                this._stateCommentLessThanSignBangDash(t3);
                break;
              case D.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:
                this._stateCommentLessThanSignBangDashDash(t3);
                break;
              case D.COMMENT_END_DASH:
                this._stateCommentEndDash(t3);
                break;
              case D.COMMENT_END:
                this._stateCommentEnd(t3);
                break;
              case D.COMMENT_END_BANG:
                this._stateCommentEndBang(t3);
                break;
              case D.DOCTYPE:
                this._stateDoctype(t3);
                break;
              case D.BEFORE_DOCTYPE_NAME:
                this._stateBeforeDoctypeName(t3);
                break;
              case D.DOCTYPE_NAME:
                this._stateDoctypeName(t3);
                break;
              case D.AFTER_DOCTYPE_NAME:
                this._stateAfterDoctypeName(t3);
                break;
              case D.AFTER_DOCTYPE_PUBLIC_KEYWORD:
                this._stateAfterDoctypePublicKeyword(t3);
                break;
              case D.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:
                this._stateBeforeDoctypePublicIdentifier(t3);
                break;
              case D.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:
                this._stateDoctypePublicIdentifierDoubleQuoted(t3);
                break;
              case D.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:
                this._stateDoctypePublicIdentifierSingleQuoted(t3);
                break;
              case D.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:
                this._stateAfterDoctypePublicIdentifier(t3);
                break;
              case D.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:
                this._stateBetweenDoctypePublicAndSystemIdentifiers(t3);
                break;
              case D.AFTER_DOCTYPE_SYSTEM_KEYWORD:
                this._stateAfterDoctypeSystemKeyword(t3);
                break;
              case D.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:
                this._stateBeforeDoctypeSystemIdentifier(t3);
                break;
              case D.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:
                this._stateDoctypeSystemIdentifierDoubleQuoted(t3);
                break;
              case D.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:
                this._stateDoctypeSystemIdentifierSingleQuoted(t3);
                break;
              case D.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:
                this._stateAfterDoctypeSystemIdentifier(t3);
                break;
              case D.BOGUS_DOCTYPE:
                this._stateBogusDoctype(t3);
                break;
              case D.CDATA_SECTION:
                this._stateCdataSection(t3);
                break;
              case D.CDATA_SECTION_BRACKET:
                this._stateCdataSectionBracket(t3);
                break;
              case D.CDATA_SECTION_END:
                this._stateCdataSectionEnd(t3);
                break;
              case D.CHARACTER_REFERENCE:
                this._stateCharacterReference(t3);
                break;
              case D.NAMED_CHARACTER_REFERENCE:
                this._stateNamedCharacterReference(t3);
                break;
              case D.AMBIGUOUS_AMPERSAND:
                this._stateAmbiguousAmpersand(t3);
                break;
              case D.NUMERIC_CHARACTER_REFERENCE:
                this._stateNumericCharacterReference(t3);
                break;
              case D.HEXADEMICAL_CHARACTER_REFERENCE_START:
                this._stateHexademicalCharacterReferenceStart(t3);
                break;
              case D.HEXADEMICAL_CHARACTER_REFERENCE:
                this._stateHexademicalCharacterReference(t3);
                break;
              case D.DECIMAL_CHARACTER_REFERENCE:
                this._stateDecimalCharacterReference(t3);
                break;
              case D.NUMERIC_CHARACTER_REFERENCE_END:
                this._stateNumericCharacterReferenceEnd(t3);
                break;
              default:
                throw new Error("Unknown state");
            }
          };
          t2.prototype._stateData = function(t3) {
            switch (t3) {
              case r.LESS_THAN_SIGN:
                this.state = D.TAG_OPEN;
                break;
              case r.AMPERSAND:
                this.returnState = D.DATA, this.state = D.CHARACTER_REFERENCE;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this._emitCodePoint(t3);
                break;
              case r.EOF:
                this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(t3);
            }
          };
          t2.prototype._stateRcdata = function(t3) {
            switch (t3) {
              case r.AMPERSAND:
                this.returnState = D.RCDATA, this.state = D.CHARACTER_REFERENCE;
                break;
              case r.LESS_THAN_SIGN:
                this.state = D.RCDATA_LESS_THAN_SIGN;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this._emitChars(i);
                break;
              case r.EOF:
                this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(t3);
            }
          };
          t2.prototype._stateRawtext = function(t3) {
            switch (t3) {
              case r.LESS_THAN_SIGN:
                this.state = D.RAWTEXT_LESS_THAN_SIGN;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this._emitChars(i);
                break;
              case r.EOF:
                this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(t3);
            }
          };
          t2.prototype._stateScriptData = function(t3) {
            switch (t3) {
              case r.LESS_THAN_SIGN:
                this.state = D.SCRIPT_DATA_LESS_THAN_SIGN;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this._emitChars(i);
                break;
              case r.EOF:
                this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(t3);
            }
          };
          t2.prototype._statePlaintext = function(t3) {
            switch (t3) {
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this._emitChars(i);
                break;
              case r.EOF:
                this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(t3);
            }
          };
          t2.prototype._stateTagOpen = function(t3) {
            if (x(t3))
              this._createStartTagToken(), this.state = D.TAG_NAME, this._stateTagName(t3);
            else
              switch (t3) {
                case r.EXCLAMATION_MARK:
                  this.state = D.MARKUP_DECLARATION_OPEN;
                  break;
                case r.SOLIDUS:
                  this.state = D.END_TAG_OPEN;
                  break;
                case r.QUESTION_MARK:
                  this._err(l.unexpectedQuestionMarkInsteadOfTagName), this._createCommentToken(1), this.state = D.BOGUS_COMMENT, this._stateBogusComment(t3);
                  break;
                case r.EOF:
                  this._err(l.eofBeforeTagName), this._emitChars("<"), this._emitEOFToken();
                  break;
                default:
                  this._err(l.invalidFirstCharacterOfTagName), this._emitChars("<"), this.state = D.DATA, this._stateData(t3);
              }
          };
          t2.prototype._stateEndTagOpen = function(t3) {
            if (x(t3))
              this._createEndTagToken(), this.state = D.TAG_NAME, this._stateTagName(t3);
            else
              switch (t3) {
                case r.GREATER_THAN_SIGN:
                  this._err(l.missingEndTagName), this.state = D.DATA;
                  break;
                case r.EOF:
                  this._err(l.eofBeforeTagName), this._emitChars("</"), this._emitEOFToken();
                  break;
                default:
                  this._err(l.invalidFirstCharacterOfTagName), this._createCommentToken(2), this.state = D.BOGUS_COMMENT, this._stateBogusComment(t3);
              }
          };
          t2.prototype._stateTagName = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this.state = D.BEFORE_ATTRIBUTE_NAME;
                break;
              case r.SOLIDUS:
                this.state = D.SELF_CLOSING_START_TAG;
                break;
              case r.GREATER_THAN_SIGN:
                this.state = D.DATA, this.emitCurrentTagToken();
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), e3.tagName += i;
                break;
              case r.EOF:
                this._err(l.eofInTag), this._emitEOFToken();
                break;
              default:
                e3.tagName += String.fromCodePoint(I(t3) ? U(t3) : t3);
            }
          };
          t2.prototype._stateRcdataLessThanSign = function(t3) {
            t3 === r.SOLIDUS ? this.state = D.RCDATA_END_TAG_OPEN : (this._emitChars("<"), this.state = D.RCDATA, this._stateRcdata(t3));
          };
          t2.prototype._stateRcdataEndTagOpen = function(t3) {
            x(t3) ? (this.state = D.RCDATA_END_TAG_NAME, this._stateRcdataEndTagName(t3)) : (this._emitChars("</"), this.state = D.RCDATA, this._stateRcdata(t3));
          };
          t2.prototype.handleSpecialEndTag = function(t3) {
            if (!this.preprocessor.startsWith(this.lastStartTagName, false))
              return !this._ensureHibernation();
            switch (this._createEndTagToken(), this.currentToken.tagName = this.lastStartTagName, this.preprocessor.peek(this.lastStartTagName.length)) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                return this._advanceBy(this.lastStartTagName.length), this.state = D.BEFORE_ATTRIBUTE_NAME, false;
              case r.SOLIDUS:
                return this._advanceBy(this.lastStartTagName.length), this.state = D.SELF_CLOSING_START_TAG, false;
              case r.GREATER_THAN_SIGN:
                return this._advanceBy(this.lastStartTagName.length), this.emitCurrentTagToken(), this.state = D.DATA, false;
              default:
                return !this._ensureHibernation();
            }
          };
          t2.prototype._stateRcdataEndTagName = function(t3) {
            this.handleSpecialEndTag(t3) && (this._emitChars("</"), this.state = D.RCDATA, this._stateRcdata(t3));
          };
          t2.prototype._stateRawtextLessThanSign = function(t3) {
            t3 === r.SOLIDUS ? this.state = D.RAWTEXT_END_TAG_OPEN : (this._emitChars("<"), this.state = D.RAWTEXT, this._stateRawtext(t3));
          };
          t2.prototype._stateRawtextEndTagOpen = function(t3) {
            x(t3) ? (this.state = D.RAWTEXT_END_TAG_NAME, this._stateRawtextEndTagName(t3)) : (this._emitChars("</"), this.state = D.RAWTEXT, this._stateRawtext(t3));
          };
          t2.prototype._stateRawtextEndTagName = function(t3) {
            this.handleSpecialEndTag(t3) && (this._emitChars("</"), this.state = D.RAWTEXT, this._stateRawtext(t3));
          };
          t2.prototype._stateScriptDataLessThanSign = function(t3) {
            switch (t3) {
              case r.SOLIDUS:
                this.state = D.SCRIPT_DATA_END_TAG_OPEN;
                break;
              case r.EXCLAMATION_MARK:
                this.state = D.SCRIPT_DATA_ESCAPE_START, this._emitChars("<!");
                break;
              default:
                this._emitChars("<"), this.state = D.SCRIPT_DATA, this._stateScriptData(t3);
            }
          };
          t2.prototype._stateScriptDataEndTagOpen = function(t3) {
            x(t3) ? (this.state = D.SCRIPT_DATA_END_TAG_NAME, this._stateScriptDataEndTagName(t3)) : (this._emitChars("</"), this.state = D.SCRIPT_DATA, this._stateScriptData(t3));
          };
          t2.prototype._stateScriptDataEndTagName = function(t3) {
            this.handleSpecialEndTag(t3) && (this._emitChars("</"), this.state = D.SCRIPT_DATA, this._stateScriptData(t3));
          };
          t2.prototype._stateScriptDataEscapeStart = function(t3) {
            t3 === r.HYPHEN_MINUS ? (this.state = D.SCRIPT_DATA_ESCAPE_START_DASH, this._emitChars("-")) : (this.state = D.SCRIPT_DATA, this._stateScriptData(t3));
          };
          t2.prototype._stateScriptDataEscapeStartDash = function(t3) {
            t3 === r.HYPHEN_MINUS ? (this.state = D.SCRIPT_DATA_ESCAPED_DASH_DASH, this._emitChars("-")) : (this.state = D.SCRIPT_DATA, this._stateScriptData(t3));
          };
          t2.prototype._stateScriptDataEscaped = function(t3) {
            switch (t3) {
              case r.HYPHEN_MINUS:
                this.state = D.SCRIPT_DATA_ESCAPED_DASH, this._emitChars("-");
                break;
              case r.LESS_THAN_SIGN:
                this.state = D.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this._emitChars(i);
                break;
              case r.EOF:
                this._err(l.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(t3);
            }
          };
          t2.prototype._stateScriptDataEscapedDash = function(t3) {
            switch (t3) {
              case r.HYPHEN_MINUS:
                this.state = D.SCRIPT_DATA_ESCAPED_DASH_DASH, this._emitChars("-");
                break;
              case r.LESS_THAN_SIGN:
                this.state = D.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this.state = D.SCRIPT_DATA_ESCAPED, this._emitChars(i);
                break;
              case r.EOF:
                this._err(l.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
                break;
              default:
                this.state = D.SCRIPT_DATA_ESCAPED, this._emitCodePoint(t3);
            }
          };
          t2.prototype._stateScriptDataEscapedDashDash = function(t3) {
            switch (t3) {
              case r.HYPHEN_MINUS:
                this._emitChars("-");
                break;
              case r.LESS_THAN_SIGN:
                this.state = D.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                break;
              case r.GREATER_THAN_SIGN:
                this.state = D.SCRIPT_DATA, this._emitChars(">");
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this.state = D.SCRIPT_DATA_ESCAPED, this._emitChars(i);
                break;
              case r.EOF:
                this._err(l.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
                break;
              default:
                this.state = D.SCRIPT_DATA_ESCAPED, this._emitCodePoint(t3);
            }
          };
          t2.prototype._stateScriptDataEscapedLessThanSign = function(t3) {
            t3 === r.SOLIDUS ? this.state = D.SCRIPT_DATA_ESCAPED_END_TAG_OPEN : x(t3) ? (this._emitChars("<"), this.state = D.SCRIPT_DATA_DOUBLE_ESCAPE_START, this._stateScriptDataDoubleEscapeStart(t3)) : (this._emitChars("<"), this.state = D.SCRIPT_DATA_ESCAPED, this._stateScriptDataEscaped(t3));
          };
          t2.prototype._stateScriptDataEscapedEndTagOpen = function(t3) {
            x(t3) ? (this.state = D.SCRIPT_DATA_ESCAPED_END_TAG_NAME, this._stateScriptDataEscapedEndTagName(t3)) : (this._emitChars("</"), this.state = D.SCRIPT_DATA_ESCAPED, this._stateScriptDataEscaped(t3));
          };
          t2.prototype._stateScriptDataEscapedEndTagName = function(t3) {
            this.handleSpecialEndTag(t3) && (this._emitChars("</"), this.state = D.SCRIPT_DATA_ESCAPED, this._stateScriptDataEscaped(t3));
          };
          t2.prototype._stateScriptDataDoubleEscapeStart = function(t3) {
            if (this.preprocessor.startsWith(u2, false) && q(this.preprocessor.peek(6))) {
              this._emitCodePoint(t3);
              for (var e3 = 0; e3 < 6; e3++)
                this._emitCodePoint(this._consume());
              this.state = D.SCRIPT_DATA_DOUBLE_ESCAPED;
            } else
              this._ensureHibernation() || (this.state = D.SCRIPT_DATA_ESCAPED, this._stateScriptDataEscaped(t3));
          };
          t2.prototype._stateScriptDataDoubleEscaped = function(t3) {
            switch (t3) {
              case r.HYPHEN_MINUS:
                this.state = D.SCRIPT_DATA_DOUBLE_ESCAPED_DASH, this._emitChars("-");
                break;
              case r.LESS_THAN_SIGN:
                this.state = D.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN, this._emitChars("<");
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this._emitChars(i);
                break;
              case r.EOF:
                this._err(l.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(t3);
            }
          };
          t2.prototype._stateScriptDataDoubleEscapedDash = function(t3) {
            switch (t3) {
              case r.HYPHEN_MINUS:
                this.state = D.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH, this._emitChars("-");
                break;
              case r.LESS_THAN_SIGN:
                this.state = D.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN, this._emitChars("<");
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this.state = D.SCRIPT_DATA_DOUBLE_ESCAPED, this._emitChars(i);
                break;
              case r.EOF:
                this._err(l.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
                break;
              default:
                this.state = D.SCRIPT_DATA_DOUBLE_ESCAPED, this._emitCodePoint(t3);
            }
          };
          t2.prototype._stateScriptDataDoubleEscapedDashDash = function(t3) {
            switch (t3) {
              case r.HYPHEN_MINUS:
                this._emitChars("-");
                break;
              case r.LESS_THAN_SIGN:
                this.state = D.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN, this._emitChars("<");
                break;
              case r.GREATER_THAN_SIGN:
                this.state = D.SCRIPT_DATA, this._emitChars(">");
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this.state = D.SCRIPT_DATA_DOUBLE_ESCAPED, this._emitChars(i);
                break;
              case r.EOF:
                this._err(l.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
                break;
              default:
                this.state = D.SCRIPT_DATA_DOUBLE_ESCAPED, this._emitCodePoint(t3);
            }
          };
          t2.prototype._stateScriptDataDoubleEscapedLessThanSign = function(t3) {
            t3 === r.SOLIDUS ? (this.state = D.SCRIPT_DATA_DOUBLE_ESCAPE_END, this._emitChars("/")) : (this.state = D.SCRIPT_DATA_DOUBLE_ESCAPED, this._stateScriptDataDoubleEscaped(t3));
          };
          t2.prototype._stateScriptDataDoubleEscapeEnd = function(t3) {
            if (this.preprocessor.startsWith(u2, false) && q(this.preprocessor.peek(6))) {
              this._emitCodePoint(t3);
              for (var e3 = 0; e3 < 6; e3++)
                this._emitCodePoint(this._consume());
              this.state = D.SCRIPT_DATA_ESCAPED;
            } else
              this._ensureHibernation() || (this.state = D.SCRIPT_DATA_DOUBLE_ESCAPED, this._stateScriptDataDoubleEscaped(t3));
          };
          t2.prototype._stateBeforeAttributeName = function(t3) {
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.SOLIDUS:
              case r.GREATER_THAN_SIGN:
              case r.EOF:
                this.state = D.AFTER_ATTRIBUTE_NAME, this._stateAfterAttributeName(t3);
                break;
              case r.EQUALS_SIGN:
                this._err(l.unexpectedEqualsSignBeforeAttributeName), this._createAttr("="), this.state = D.ATTRIBUTE_NAME;
                break;
              default:
                this._createAttr(""), this.state = D.ATTRIBUTE_NAME, this._stateAttributeName(t3);
            }
          };
          t2.prototype._stateAttributeName = function(t3) {
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
              case r.SOLIDUS:
              case r.GREATER_THAN_SIGN:
              case r.EOF:
                this._leaveAttrName(), this.state = D.AFTER_ATTRIBUTE_NAME, this._stateAfterAttributeName(t3);
                break;
              case r.EQUALS_SIGN:
                this._leaveAttrName(), this.state = D.BEFORE_ATTRIBUTE_VALUE;
                break;
              case r.QUOTATION_MARK:
              case r.APOSTROPHE:
              case r.LESS_THAN_SIGN:
                this._err(l.unexpectedCharacterInAttributeName), this.currentAttr.name += String.fromCodePoint(t3);
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this.currentAttr.name += i;
                break;
              default:
                this.currentAttr.name += String.fromCodePoint(I(t3) ? U(t3) : t3);
            }
          };
          t2.prototype._stateAfterAttributeName = function(t3) {
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.SOLIDUS:
                this.state = D.SELF_CLOSING_START_TAG;
                break;
              case r.EQUALS_SIGN:
                this.state = D.BEFORE_ATTRIBUTE_VALUE;
                break;
              case r.GREATER_THAN_SIGN:
                this.state = D.DATA, this.emitCurrentTagToken();
                break;
              case r.EOF:
                this._err(l.eofInTag), this._emitEOFToken();
                break;
              default:
                this._createAttr(""), this.state = D.ATTRIBUTE_NAME, this._stateAttributeName(t3);
            }
          };
          t2.prototype._stateBeforeAttributeValue = function(t3) {
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.QUOTATION_MARK:
                this.state = D.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
                break;
              case r.APOSTROPHE:
                this.state = D.ATTRIBUTE_VALUE_SINGLE_QUOTED;
                break;
              case r.GREATER_THAN_SIGN:
                this._err(l.missingAttributeValue), this.state = D.DATA, this.emitCurrentTagToken();
                break;
              default:
                this.state = D.ATTRIBUTE_VALUE_UNQUOTED, this._stateAttributeValueUnquoted(t3);
            }
          };
          t2.prototype._stateAttributeValueDoubleQuoted = function(t3) {
            switch (t3) {
              case r.QUOTATION_MARK:
                this.state = D.AFTER_ATTRIBUTE_VALUE_QUOTED;
                break;
              case r.AMPERSAND:
                this.returnState = D.ATTRIBUTE_VALUE_DOUBLE_QUOTED, this.state = D.CHARACTER_REFERENCE;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this.currentAttr.value += i;
                break;
              case r.EOF:
                this._err(l.eofInTag), this._emitEOFToken();
                break;
              default:
                this.currentAttr.value += String.fromCodePoint(t3);
            }
          };
          t2.prototype._stateAttributeValueSingleQuoted = function(t3) {
            switch (t3) {
              case r.APOSTROPHE:
                this.state = D.AFTER_ATTRIBUTE_VALUE_QUOTED;
                break;
              case r.AMPERSAND:
                this.returnState = D.ATTRIBUTE_VALUE_SINGLE_QUOTED, this.state = D.CHARACTER_REFERENCE;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this.currentAttr.value += i;
                break;
              case r.EOF:
                this._err(l.eofInTag), this._emitEOFToken();
                break;
              default:
                this.currentAttr.value += String.fromCodePoint(t3);
            }
          };
          t2.prototype._stateAttributeValueUnquoted = function(t3) {
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this._leaveAttrValue(), this.state = D.BEFORE_ATTRIBUTE_NAME;
                break;
              case r.AMPERSAND:
                this.returnState = D.ATTRIBUTE_VALUE_UNQUOTED, this.state = D.CHARACTER_REFERENCE;
                break;
              case r.GREATER_THAN_SIGN:
                this._leaveAttrValue(), this.state = D.DATA, this.emitCurrentTagToken();
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), this.currentAttr.value += i;
                break;
              case r.QUOTATION_MARK:
              case r.APOSTROPHE:
              case r.LESS_THAN_SIGN:
              case r.EQUALS_SIGN:
              case r.GRAVE_ACCENT:
                this._err(l.unexpectedCharacterInUnquotedAttributeValue), this.currentAttr.value += String.fromCodePoint(t3);
                break;
              case r.EOF:
                this._err(l.eofInTag), this._emitEOFToken();
                break;
              default:
                this.currentAttr.value += String.fromCodePoint(t3);
            }
          };
          t2.prototype._stateAfterAttributeValueQuoted = function(t3) {
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this._leaveAttrValue(), this.state = D.BEFORE_ATTRIBUTE_NAME;
                break;
              case r.SOLIDUS:
                this._leaveAttrValue(), this.state = D.SELF_CLOSING_START_TAG;
                break;
              case r.GREATER_THAN_SIGN:
                this._leaveAttrValue(), this.state = D.DATA, this.emitCurrentTagToken();
                break;
              case r.EOF:
                this._err(l.eofInTag), this._emitEOFToken();
                break;
              default:
                this._err(l.missingWhitespaceBetweenAttributes), this.state = D.BEFORE_ATTRIBUTE_NAME, this._stateBeforeAttributeName(t3);
            }
          };
          t2.prototype._stateSelfClosingStartTag = function(t3) {
            switch (t3) {
              case r.GREATER_THAN_SIGN:
                this.currentToken.selfClosing = true, this.state = D.DATA, this.emitCurrentTagToken();
                break;
              case r.EOF:
                this._err(l.eofInTag), this._emitEOFToken();
                break;
              default:
                this._err(l.unexpectedSolidusInTag), this.state = D.BEFORE_ATTRIBUTE_NAME, this._stateBeforeAttributeName(t3);
            }
          };
          t2.prototype._stateBogusComment = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.GREATER_THAN_SIGN:
                this.state = D.DATA, this.emitCurrentComment(e3);
                break;
              case r.EOF:
                this.emitCurrentComment(e3), this._emitEOFToken();
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), e3.data += i;
                break;
              default:
                e3.data += String.fromCodePoint(t3);
            }
          };
          t2.prototype._stateMarkupDeclarationOpen = function(t3) {
            this._consumeSequenceIfMatch("--", true) ? (this._createCommentToken(3), this.state = D.COMMENT_START) : this._consumeSequenceIfMatch(a, false) ? (this.currentLocation = this.getCurrentLocation(8), this.state = D.DOCTYPE) : this._consumeSequenceIfMatch(s, true) ? this.inForeignNode ? this.state = D.CDATA_SECTION : (this._err(l.cdataInHtmlContent), this._createCommentToken(8), this.currentToken.data = "[CDATA[", this.state = D.BOGUS_COMMENT) : this._ensureHibernation() || (this._err(l.incorrectlyOpenedComment), this._createCommentToken(2), this.state = D.BOGUS_COMMENT, this._stateBogusComment(t3));
          };
          t2.prototype._stateCommentStart = function(t3) {
            switch (t3) {
              case r.HYPHEN_MINUS:
                this.state = D.COMMENT_START_DASH;
                break;
              case r.GREATER_THAN_SIGN: {
                this._err(l.abruptClosingOfEmptyComment), this.state = D.DATA;
                var e3 = this.currentToken;
                this.emitCurrentComment(e3);
                break;
              }
              default:
                this.state = D.COMMENT, this._stateComment(t3);
            }
          };
          t2.prototype._stateCommentStartDash = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.HYPHEN_MINUS:
                this.state = D.COMMENT_END;
                break;
              case r.GREATER_THAN_SIGN:
                this._err(l.abruptClosingOfEmptyComment), this.state = D.DATA, this.emitCurrentComment(e3);
                break;
              case r.EOF:
                this._err(l.eofInComment), this.emitCurrentComment(e3), this._emitEOFToken();
                break;
              default:
                e3.data += "-", this.state = D.COMMENT, this._stateComment(t3);
            }
          };
          t2.prototype._stateComment = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.HYPHEN_MINUS:
                this.state = D.COMMENT_END_DASH;
                break;
              case r.LESS_THAN_SIGN:
                e3.data += "<", this.state = D.COMMENT_LESS_THAN_SIGN;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), e3.data += i;
                break;
              case r.EOF:
                this._err(l.eofInComment), this.emitCurrentComment(e3), this._emitEOFToken();
                break;
              default:
                e3.data += String.fromCodePoint(t3);
            }
          };
          t2.prototype._stateCommentLessThanSign = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.EXCLAMATION_MARK:
                e3.data += "!", this.state = D.COMMENT_LESS_THAN_SIGN_BANG;
                break;
              case r.LESS_THAN_SIGN:
                e3.data += "<";
                break;
              default:
                this.state = D.COMMENT, this._stateComment(t3);
            }
          };
          t2.prototype._stateCommentLessThanSignBang = function(t3) {
            t3 === r.HYPHEN_MINUS ? this.state = D.COMMENT_LESS_THAN_SIGN_BANG_DASH : (this.state = D.COMMENT, this._stateComment(t3));
          };
          t2.prototype._stateCommentLessThanSignBangDash = function(t3) {
            t3 === r.HYPHEN_MINUS ? this.state = D.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH : (this.state = D.COMMENT_END_DASH, this._stateCommentEndDash(t3));
          };
          t2.prototype._stateCommentLessThanSignBangDashDash = function(t3) {
            t3 !== r.GREATER_THAN_SIGN && t3 !== r.EOF && this._err(l.nestedComment), this.state = D.COMMENT_END, this._stateCommentEnd(t3);
          };
          t2.prototype._stateCommentEndDash = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.HYPHEN_MINUS:
                this.state = D.COMMENT_END;
                break;
              case r.EOF:
                this._err(l.eofInComment), this.emitCurrentComment(e3), this._emitEOFToken();
                break;
              default:
                e3.data += "-", this.state = D.COMMENT, this._stateComment(t3);
            }
          };
          t2.prototype._stateCommentEnd = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.GREATER_THAN_SIGN:
                this.state = D.DATA, this.emitCurrentComment(e3);
                break;
              case r.EXCLAMATION_MARK:
                this.state = D.COMMENT_END_BANG;
                break;
              case r.HYPHEN_MINUS:
                e3.data += "-";
                break;
              case r.EOF:
                this._err(l.eofInComment), this.emitCurrentComment(e3), this._emitEOFToken();
                break;
              default:
                e3.data += "--", this.state = D.COMMENT, this._stateComment(t3);
            }
          };
          t2.prototype._stateCommentEndBang = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.HYPHEN_MINUS:
                e3.data += "--!", this.state = D.COMMENT_END_DASH;
                break;
              case r.GREATER_THAN_SIGN:
                this._err(l.incorrectlyClosedComment), this.state = D.DATA, this.emitCurrentComment(e3);
                break;
              case r.EOF:
                this._err(l.eofInComment), this.emitCurrentComment(e3), this._emitEOFToken();
                break;
              default:
                e3.data += "--!", this.state = D.COMMENT, this._stateComment(t3);
            }
          };
          t2.prototype._stateDoctype = function(t3) {
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this.state = D.BEFORE_DOCTYPE_NAME;
                break;
              case r.GREATER_THAN_SIGN:
                this.state = D.BEFORE_DOCTYPE_NAME, this._stateBeforeDoctypeName(t3);
                break;
              case r.EOF: {
                this._err(l.eofInDoctype), this._createDoctypeToken(null);
                var e3 = this.currentToken;
                e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              }
              default:
                this._err(l.missingWhitespaceBeforeDoctypeName), this.state = D.BEFORE_DOCTYPE_NAME, this._stateBeforeDoctypeName(t3);
            }
          };
          t2.prototype._stateBeforeDoctypeName = function(t3) {
            if (I(t3))
              this._createDoctypeToken(String.fromCharCode(U(t3))), this.state = D.DOCTYPE_NAME;
            else
              switch (t3) {
                case r.SPACE:
                case r.LINE_FEED:
                case r.TABULATION:
                case r.FORM_FEED:
                  break;
                case r.NULL:
                  this._err(l.unexpectedNullCharacter), this._createDoctypeToken(i), this.state = D.DOCTYPE_NAME;
                  break;
                case r.GREATER_THAN_SIGN: {
                  this._err(l.missingDoctypeName), this._createDoctypeToken(null);
                  var e3 = this.currentToken;
                  e3.forceQuirks = true, this.emitCurrentDoctype(e3), this.state = D.DATA;
                  break;
                }
                case r.EOF: {
                  this._err(l.eofInDoctype), this._createDoctypeToken(null);
                  var e3 = this.currentToken;
                  e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                  break;
                }
                default:
                  this._createDoctypeToken(String.fromCodePoint(t3)), this.state = D.DOCTYPE_NAME;
              }
          };
          t2.prototype._stateDoctypeName = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this.state = D.AFTER_DOCTYPE_NAME;
                break;
              case r.GREATER_THAN_SIGN:
                this.state = D.DATA, this.emitCurrentDoctype(e3);
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), e3.name += i;
                break;
              case r.EOF:
                this._err(l.eofInDoctype), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              default:
                e3.name += String.fromCodePoint(I(t3) ? U(t3) : t3);
            }
          };
          t2.prototype._stateAfterDoctypeName = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.GREATER_THAN_SIGN:
                this.state = D.DATA, this.emitCurrentDoctype(e3);
                break;
              case r.EOF:
                this._err(l.eofInDoctype), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              default:
                this._consumeSequenceIfMatch("public", false) ? this.state = D.AFTER_DOCTYPE_PUBLIC_KEYWORD : this._consumeSequenceIfMatch("system", false) ? this.state = D.AFTER_DOCTYPE_SYSTEM_KEYWORD : this._ensureHibernation() || (this._err(l.invalidCharacterSequenceAfterDoctypeName), e3.forceQuirks = true, this.state = D.BOGUS_DOCTYPE, this._stateBogusDoctype(t3));
            }
          };
          t2.prototype._stateAfterDoctypePublicKeyword = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this.state = D.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;
                break;
              case r.QUOTATION_MARK:
                this._err(l.missingWhitespaceAfterDoctypePublicKeyword), e3.publicId = "", this.state = D.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
                break;
              case r.APOSTROPHE:
                this._err(l.missingWhitespaceAfterDoctypePublicKeyword), e3.publicId = "", this.state = D.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
                break;
              case r.GREATER_THAN_SIGN:
                this._err(l.missingDoctypePublicIdentifier), e3.forceQuirks = true, this.state = D.DATA, this.emitCurrentDoctype(e3);
                break;
              case r.EOF:
                this._err(l.eofInDoctype), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              default:
                this._err(l.missingQuoteBeforeDoctypePublicIdentifier), e3.forceQuirks = true, this.state = D.BOGUS_DOCTYPE, this._stateBogusDoctype(t3);
            }
          };
          t2.prototype._stateBeforeDoctypePublicIdentifier = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.QUOTATION_MARK:
                e3.publicId = "", this.state = D.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
                break;
              case r.APOSTROPHE:
                e3.publicId = "", this.state = D.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
                break;
              case r.GREATER_THAN_SIGN:
                this._err(l.missingDoctypePublicIdentifier), e3.forceQuirks = true, this.state = D.DATA, this.emitCurrentDoctype(e3);
                break;
              case r.EOF:
                this._err(l.eofInDoctype), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              default:
                this._err(l.missingQuoteBeforeDoctypePublicIdentifier), e3.forceQuirks = true, this.state = D.BOGUS_DOCTYPE, this._stateBogusDoctype(t3);
            }
          };
          t2.prototype._stateDoctypePublicIdentifierDoubleQuoted = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.QUOTATION_MARK:
                this.state = D.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), e3.publicId += i;
                break;
              case r.GREATER_THAN_SIGN:
                this._err(l.abruptDoctypePublicIdentifier), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this.state = D.DATA;
                break;
              case r.EOF:
                this._err(l.eofInDoctype), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              default:
                e3.publicId += String.fromCodePoint(t3);
            }
          };
          t2.prototype._stateDoctypePublicIdentifierSingleQuoted = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.APOSTROPHE:
                this.state = D.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), e3.publicId += i;
                break;
              case r.GREATER_THAN_SIGN:
                this._err(l.abruptDoctypePublicIdentifier), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this.state = D.DATA;
                break;
              case r.EOF:
                this._err(l.eofInDoctype), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              default:
                e3.publicId += String.fromCodePoint(t3);
            }
          };
          t2.prototype._stateAfterDoctypePublicIdentifier = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this.state = D.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;
                break;
              case r.GREATER_THAN_SIGN:
                this.state = D.DATA, this.emitCurrentDoctype(e3);
                break;
              case r.QUOTATION_MARK:
                this._err(l.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers), e3.systemId = "", this.state = D.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                break;
              case r.APOSTROPHE:
                this._err(l.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers), e3.systemId = "", this.state = D.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                break;
              case r.EOF:
                this._err(l.eofInDoctype), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              default:
                this._err(l.missingQuoteBeforeDoctypeSystemIdentifier), e3.forceQuirks = true, this.state = D.BOGUS_DOCTYPE, this._stateBogusDoctype(t3);
            }
          };
          t2.prototype._stateBetweenDoctypePublicAndSystemIdentifiers = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.GREATER_THAN_SIGN:
                this.emitCurrentDoctype(e3), this.state = D.DATA;
                break;
              case r.QUOTATION_MARK:
                e3.systemId = "", this.state = D.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                break;
              case r.APOSTROPHE:
                e3.systemId = "", this.state = D.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                break;
              case r.EOF:
                this._err(l.eofInDoctype), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              default:
                this._err(l.missingQuoteBeforeDoctypeSystemIdentifier), e3.forceQuirks = true, this.state = D.BOGUS_DOCTYPE, this._stateBogusDoctype(t3);
            }
          };
          t2.prototype._stateAfterDoctypeSystemKeyword = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                this.state = D.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;
                break;
              case r.QUOTATION_MARK:
                this._err(l.missingWhitespaceAfterDoctypeSystemKeyword), e3.systemId = "", this.state = D.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                break;
              case r.APOSTROPHE:
                this._err(l.missingWhitespaceAfterDoctypeSystemKeyword), e3.systemId = "", this.state = D.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                break;
              case r.GREATER_THAN_SIGN:
                this._err(l.missingDoctypeSystemIdentifier), e3.forceQuirks = true, this.state = D.DATA, this.emitCurrentDoctype(e3);
                break;
              case r.EOF:
                this._err(l.eofInDoctype), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              default:
                this._err(l.missingQuoteBeforeDoctypeSystemIdentifier), e3.forceQuirks = true, this.state = D.BOGUS_DOCTYPE, this._stateBogusDoctype(t3);
            }
          };
          t2.prototype._stateBeforeDoctypeSystemIdentifier = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.QUOTATION_MARK:
                e3.systemId = "", this.state = D.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                break;
              case r.APOSTROPHE:
                e3.systemId = "", this.state = D.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                break;
              case r.GREATER_THAN_SIGN:
                this._err(l.missingDoctypeSystemIdentifier), e3.forceQuirks = true, this.state = D.DATA, this.emitCurrentDoctype(e3);
                break;
              case r.EOF:
                this._err(l.eofInDoctype), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              default:
                this._err(l.missingQuoteBeforeDoctypeSystemIdentifier), e3.forceQuirks = true, this.state = D.BOGUS_DOCTYPE, this._stateBogusDoctype(t3);
            }
          };
          t2.prototype._stateDoctypeSystemIdentifierDoubleQuoted = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.QUOTATION_MARK:
                this.state = D.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), e3.systemId += i;
                break;
              case r.GREATER_THAN_SIGN:
                this._err(l.abruptDoctypeSystemIdentifier), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this.state = D.DATA;
                break;
              case r.EOF:
                this._err(l.eofInDoctype), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              default:
                e3.systemId += String.fromCodePoint(t3);
            }
          };
          t2.prototype._stateDoctypeSystemIdentifierSingleQuoted = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.APOSTROPHE:
                this.state = D.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter), e3.systemId += i;
                break;
              case r.GREATER_THAN_SIGN:
                this._err(l.abruptDoctypeSystemIdentifier), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this.state = D.DATA;
                break;
              case r.EOF:
                this._err(l.eofInDoctype), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              default:
                e3.systemId += String.fromCodePoint(t3);
            }
          };
          t2.prototype._stateAfterDoctypeSystemIdentifier = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.SPACE:
              case r.LINE_FEED:
              case r.TABULATION:
              case r.FORM_FEED:
                break;
              case r.GREATER_THAN_SIGN:
                this.emitCurrentDoctype(e3), this.state = D.DATA;
                break;
              case r.EOF:
                this._err(l.eofInDoctype), e3.forceQuirks = true, this.emitCurrentDoctype(e3), this._emitEOFToken();
                break;
              default:
                this._err(l.unexpectedCharacterAfterDoctypeSystemIdentifier), this.state = D.BOGUS_DOCTYPE, this._stateBogusDoctype(t3);
            }
          };
          t2.prototype._stateBogusDoctype = function(t3) {
            var e3 = this.currentToken;
            switch (t3) {
              case r.GREATER_THAN_SIGN:
                this.emitCurrentDoctype(e3), this.state = D.DATA;
                break;
              case r.NULL:
                this._err(l.unexpectedNullCharacter);
                break;
              case r.EOF:
                this.emitCurrentDoctype(e3), this._emitEOFToken();
            }
          };
          t2.prototype._stateCdataSection = function(t3) {
            switch (t3) {
              case r.RIGHT_SQUARE_BRACKET:
                this.state = D.CDATA_SECTION_BRACKET;
                break;
              case r.EOF:
                this._err(l.eofInCdata), this._emitEOFToken();
                break;
              default:
                this._emitCodePoint(t3);
            }
          };
          t2.prototype._stateCdataSectionBracket = function(t3) {
            t3 === r.RIGHT_SQUARE_BRACKET ? this.state = D.CDATA_SECTION_END : (this._emitChars("]"), this.state = D.CDATA_SECTION, this._stateCdataSection(t3));
          };
          t2.prototype._stateCdataSectionEnd = function(t3) {
            switch (t3) {
              case r.GREATER_THAN_SIGN:
                this.state = D.DATA;
                break;
              case r.RIGHT_SQUARE_BRACKET:
                this._emitChars("]");
                break;
              default:
                this._emitChars("]]"), this.state = D.CDATA_SECTION, this._stateCdataSection(t3);
            }
          };
          t2.prototype._stateCharacterReference = function(t3) {
            t3 === r.NUMBER_SIGN ? this.state = D.NUMERIC_CHARACTER_REFERENCE : P(t3) ? (this.state = D.NAMED_CHARACTER_REFERENCE, this._stateNamedCharacterReference(t3)) : (this._flushCodePointConsumedAsCharacterReference(r.AMPERSAND), this._reconsumeInState(this.returnState, t3));
          };
          t2.prototype._stateNamedCharacterReference = function(t3) {
            var e3 = this._matchNamedCharacterReference(t3);
            if (this._ensureHibernation())
              ;
            else if (e3) {
              for (var n2 = 0; n2 < e3.length; n2++)
                this._flushCodePointConsumedAsCharacterReference(e3[n2]);
              this.state = this.returnState;
            } else
              this._flushCodePointConsumedAsCharacterReference(r.AMPERSAND), this.state = D.AMBIGUOUS_AMPERSAND;
          };
          t2.prototype._stateAmbiguousAmpersand = function(t3) {
            P(t3) ? this._flushCodePointConsumedAsCharacterReference(t3) : (t3 === r.SEMICOLON && this._err(l.unknownNamedCharacterReference), this._reconsumeInState(this.returnState, t3));
          };
          t2.prototype._stateNumericCharacterReference = function(t3) {
            this.charRefCode = 0, t3 === r.LATIN_SMALL_X || t3 === r.LATIN_CAPITAL_X ? this.state = D.HEXADEMICAL_CHARACTER_REFERENCE_START : L(t3) ? (this.state = D.DECIMAL_CHARACTER_REFERENCE, this._stateDecimalCharacterReference(t3)) : (this._err(l.absenceOfDigitsInNumericCharacterReference), this._flushCodePointConsumedAsCharacterReference(r.AMPERSAND), this._flushCodePointConsumedAsCharacterReference(r.NUMBER_SIGN), this._reconsumeInState(this.returnState, t3));
          };
          t2.prototype._stateHexademicalCharacterReferenceStart = function(t3) {
            !function(t4) {
              return L(t4) || H2(t4) || j(t4);
            }(t3) ? (this._err(l.absenceOfDigitsInNumericCharacterReference), this._flushCodePointConsumedAsCharacterReference(r.AMPERSAND), this._flushCodePointConsumedAsCharacterReference(r.NUMBER_SIGN), this._unconsume(2), this.state = this.returnState) : (this.state = D.HEXADEMICAL_CHARACTER_REFERENCE, this._stateHexademicalCharacterReference(t3));
          };
          t2.prototype._stateHexademicalCharacterReference = function(t3) {
            H2(t3) ? this.charRefCode = 16 * this.charRefCode + t3 - 55 : j(t3) ? this.charRefCode = 16 * this.charRefCode + t3 - 87 : L(t3) ? this.charRefCode = 16 * this.charRefCode + t3 - 48 : t3 === r.SEMICOLON ? this.state = D.NUMERIC_CHARACTER_REFERENCE_END : (this._err(l.missingSemicolonAfterCharacterReference), this.state = D.NUMERIC_CHARACTER_REFERENCE_END, this._stateNumericCharacterReferenceEnd(t3));
          };
          t2.prototype._stateDecimalCharacterReference = function(t3) {
            L(t3) ? this.charRefCode = 10 * this.charRefCode + t3 - 48 : t3 === r.SEMICOLON ? this.state = D.NUMERIC_CHARACTER_REFERENCE_END : (this._err(l.missingSemicolonAfterCharacterReference), this.state = D.NUMERIC_CHARACTER_REFERENCE_END, this._stateNumericCharacterReferenceEnd(t3));
          };
          t2.prototype._stateNumericCharacterReferenceEnd = function(t3) {
            if (this.charRefCode === r.NULL)
              this._err(l.nullCharacterReference), this.charRefCode = r.REPLACEMENT_CHARACTER;
            else if (this.charRefCode > 1114111)
              this._err(l.characterReferenceOutsideUnicodeRange), this.charRefCode = r.REPLACEMENT_CHARACTER;
            else if (o(this.charRefCode))
              this._err(l.surrogateCharacterReference), this.charRefCode = r.REPLACEMENT_CHARACTER;
            else if (f(this.charRefCode))
              this._err(l.noncharacterCharacterReference);
            else if (c(this.charRefCode) || this.charRefCode === r.CARRIAGE_RETURN) {
              this._err(l.controlCharacterReference);
              var e3 = O.get(this.charRefCode);
              void 0 !== e3 && (this.charRefCode = e3);
            }
            this._flushCodePointConsumedAsCharacterReference(this.charRefCode), this._reconsumeInState(this.returnState, t3);
          };
          return t2;
        }();
        var G = /* @__PURE__ */ new Set([S.DD, S.DT, S.LI, S.OPTGROUP, S.OPTION, S.P, S.RB, S.RP, S.RT, S.RTC]), $ = new Set(__spreadArray(__spreadArray([], G, true), [S.CAPTION, S.COLGROUP, S.TBODY, S.TD, S.TFOOT, S.TH, S.THEAD, S.TR], false)), V = /* @__PURE__ */ new Map([[S.APPLET, E.HTML], [S.CAPTION, E.HTML], [S.HTML, E.HTML], [S.MARQUEE, E.HTML], [S.OBJECT, E.HTML], [S.TABLE, E.HTML], [S.TD, E.HTML], [S.TEMPLATE, E.HTML], [S.TH, E.HTML], [S.ANNOTATION_XML, E.MATHML], [S.MI, E.MATHML], [S.MN, E.MATHML], [S.MO, E.MATHML], [S.MS, E.MATHML], [S.MTEXT, E.MATHML], [S.DESC, E.SVG], [S.FOREIGN_OBJECT, E.SVG], [S.TITLE, E.SVG]]), Y = [S.H1, S.H2, S.H3, S.H4, S.H5, S.H6], W = [S.TR, S.TEMPLATE, S.HTML], X = [S.TBODY, S.TFOOT, S.THEAD, S.TEMPLATE, S.HTML], z = [S.TABLE, S.TEMPLATE, S.HTML], K = [S.TD, S.TH];
        var Q = function() {
          function t2(t3, e3, n2) {
            this.treeAdapter = e3, this.handler = n2, this.items = [], this.tagIDs = [], this.stackTop = -1, this.tmplCount = 0, this.currentTagId = S.UNKNOWN, this.current = t3;
          }
          Object.defineProperty(t2.prototype, "currentTmplContentOrNode", { get: function() {
            return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;
          }, enumerable: false, configurable: true });
          t2.prototype._indexOf = function(t3) {
            return this.items.lastIndexOf(t3, this.stackTop);
          };
          t2.prototype._isInTemplate = function() {
            return this.currentTagId === S.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === E.HTML;
          };
          t2.prototype._updateCurrentElement = function() {
            this.current = this.items[this.stackTop], this.currentTagId = this.tagIDs[this.stackTop];
          };
          t2.prototype.push = function(t3, e3) {
            this.stackTop++, this.items[this.stackTop] = t3, this.current = t3, this.tagIDs[this.stackTop] = e3, this.currentTagId = e3, this._isInTemplate() && this.tmplCount++, this.handler.onItemPush(t3, e3, true);
          };
          t2.prototype.pop = function() {
            var t3 = this.current;
            this.tmplCount > 0 && this._isInTemplate() && this.tmplCount--, this.stackTop--, this._updateCurrentElement(), this.handler.onItemPop(t3, true);
          };
          t2.prototype.replace = function(t3, e3) {
            var n2 = this._indexOf(t3);
            this.items[n2] = e3, n2 === this.stackTop && (this.current = e3);
          };
          t2.prototype.insertAfter = function(t3, e3, n2) {
            var i2 = this._indexOf(t3) + 1;
            this.items.splice(i2, 0, e3), this.tagIDs.splice(i2, 0, n2), this.stackTop++, i2 === this.stackTop && this._updateCurrentElement(), this.handler.onItemPush(this.current, this.currentTagId, i2 === this.stackTop);
          };
          t2.prototype.popUntilTagNamePopped = function(t3) {
            var e3 = this.stackTop + 1;
            do {
              e3 = this.tagIDs.lastIndexOf(t3, e3 - 1);
            } while (e3 > 0 && this.treeAdapter.getNamespaceURI(this.items[e3]) !== E.HTML);
            this.shortenToLength(e3 < 0 ? 0 : e3);
          };
          t2.prototype.shortenToLength = function(t3) {
            for (; this.stackTop >= t3; ) {
              var e3 = this.current;
              this.tmplCount > 0 && this._isInTemplate() && (this.tmplCount -= 1), this.stackTop--, this._updateCurrentElement(), this.handler.onItemPop(e3, this.stackTop < t3);
            }
          };
          t2.prototype.popUntilElementPopped = function(t3) {
            var e3 = this._indexOf(t3);
            this.shortenToLength(e3 < 0 ? 0 : e3);
          };
          t2.prototype.popUntilPopped = function(t3, e3) {
            var n2 = this._indexOfTagNames(t3, e3);
            this.shortenToLength(n2 < 0 ? 0 : n2);
          };
          t2.prototype.popUntilNumberedHeaderPopped = function() {
            this.popUntilPopped(Y, E.HTML);
          };
          t2.prototype.popUntilTableCellPopped = function() {
            this.popUntilPopped(K, E.HTML);
          };
          t2.prototype.popAllUpToHtmlElement = function() {
            this.tmplCount = 0, this.shortenToLength(1);
          };
          t2.prototype._indexOfTagNames = function(t3, e3) {
            for (var n2 = this.stackTop; n2 >= 0; n2--)
              if (t3.includes(this.tagIDs[n2]) && this.treeAdapter.getNamespaceURI(this.items[n2]) === e3)
                return n2;
            return -1;
          };
          t2.prototype.clearBackTo = function(t3, e3) {
            var n2 = this._indexOfTagNames(t3, e3);
            this.shortenToLength(n2 + 1);
          };
          t2.prototype.clearBackToTableContext = function() {
            this.clearBackTo(z, E.HTML);
          };
          t2.prototype.clearBackToTableBodyContext = function() {
            this.clearBackTo(X, E.HTML);
          };
          t2.prototype.clearBackToTableRowContext = function() {
            this.clearBackTo(W, E.HTML);
          };
          t2.prototype.remove = function(t3) {
            var e3 = this._indexOf(t3);
            e3 >= 0 && (e3 === this.stackTop ? this.pop() : (this.items.splice(e3, 1), this.tagIDs.splice(e3, 1), this.stackTop--, this._updateCurrentElement(), this.handler.onItemPop(t3, false)));
          };
          t2.prototype.tryPeekProperlyNestedBodyElement = function() {
            return this.stackTop >= 1 && this.tagIDs[1] === S.BODY ? this.items[1] : null;
          };
          t2.prototype.contains = function(t3) {
            return this._indexOf(t3) > -1;
          };
          t2.prototype.getCommonAncestor = function(t3) {
            var e3 = this._indexOf(t3) - 1;
            return e3 >= 0 ? this.items[e3] : null;
          };
          t2.prototype.isRootHtmlElementCurrent = function() {
            return 0 === this.stackTop && this.tagIDs[0] === S.HTML;
          };
          t2.prototype.hasInScope = function(t3) {
            for (var e3 = this.stackTop; e3 >= 0; e3--) {
              var n2 = this.tagIDs[e3], i2 = this.treeAdapter.getNamespaceURI(this.items[e3]);
              if (n2 === t3 && i2 === E.HTML)
                return true;
              if (V.get(n2) === i2)
                return false;
            }
            return true;
          };
          t2.prototype.hasNumberedHeaderInScope = function() {
            for (var t3 = this.stackTop; t3 >= 0; t3--) {
              var e3 = this.tagIDs[t3], n2 = this.treeAdapter.getNamespaceURI(this.items[t3]);
              if (C(e3) && n2 === E.HTML)
                return true;
              if (V.get(e3) === n2)
                return false;
            }
            return true;
          };
          t2.prototype.hasInListItemScope = function(t3) {
            for (var e3 = this.stackTop; e3 >= 0; e3--) {
              var n2 = this.tagIDs[e3], i2 = this.treeAdapter.getNamespaceURI(this.items[e3]);
              if (n2 === t3 && i2 === E.HTML)
                return true;
              if ((n2 === S.UL || n2 === S.OL) && i2 === E.HTML || V.get(n2) === i2)
                return false;
            }
            return true;
          };
          t2.prototype.hasInButtonScope = function(t3) {
            for (var e3 = this.stackTop; e3 >= 0; e3--) {
              var n2 = this.tagIDs[e3], i2 = this.treeAdapter.getNamespaceURI(this.items[e3]);
              if (n2 === t3 && i2 === E.HTML)
                return true;
              if (n2 === S.BUTTON && i2 === E.HTML || V.get(n2) === i2)
                return false;
            }
            return true;
          };
          t2.prototype.hasInTableScope = function(t3) {
            for (var e3 = this.stackTop; e3 >= 0; e3--) {
              var n2 = this.tagIDs[e3];
              if (this.treeAdapter.getNamespaceURI(this.items[e3]) === E.HTML) {
                if (n2 === t3)
                  return true;
                if (n2 === S.TABLE || n2 === S.TEMPLATE || n2 === S.HTML)
                  return false;
              }
            }
            return true;
          };
          t2.prototype.hasTableBodyContextInTableScope = function() {
            for (var t3 = this.stackTop; t3 >= 0; t3--) {
              var e3 = this.tagIDs[t3];
              if (this.treeAdapter.getNamespaceURI(this.items[t3]) === E.HTML) {
                if (e3 === S.TBODY || e3 === S.THEAD || e3 === S.TFOOT)
                  return true;
                if (e3 === S.TABLE || e3 === S.HTML)
                  return false;
              }
            }
            return true;
          };
          t2.prototype.hasInSelectScope = function(t3) {
            for (var e3 = this.stackTop; e3 >= 0; e3--) {
              var n2 = this.tagIDs[e3];
              if (this.treeAdapter.getNamespaceURI(this.items[e3]) === E.HTML) {
                if (n2 === t3)
                  return true;
                if (n2 !== S.OPTION && n2 !== S.OPTGROUP)
                  return false;
              }
            }
            return true;
          };
          t2.prototype.generateImpliedEndTags = function() {
            for (; G.has(this.currentTagId); )
              this.pop();
          };
          t2.prototype.generateImpliedEndTagsThoroughly = function() {
            for (; $.has(this.currentTagId); )
              this.pop();
          };
          t2.prototype.generateImpliedEndTagsWithExclusion = function(t3) {
            for (; this.currentTagId !== t3 && $.has(this.currentTagId); )
              this.pop();
          };
          return t2;
        }();
        var J;
        !function(t2) {
          t2[t2.Marker = 0] = "Marker", t2[t2.Element = 1] = "Element";
        }(J = J || (J = {}));
        var Z = { type: J.Marker };
        var tt = function() {
          function t2(t3) {
            this.treeAdapter = t3, this.entries = [], this.bookmark = null;
          }
          t2.prototype._getNoahArkConditionCandidates = function(t3, e3) {
            var n2 = [], i2 = e3.length, r2 = this.treeAdapter.getTagName(t3), s2 = this.treeAdapter.getNamespaceURI(t3);
            for (var a2 = 0; a2 < this.entries.length; a2++) {
              var u3 = this.entries[a2];
              if (u3.type === J.Marker)
                break;
              var o2 = u3.element;
              if (this.treeAdapter.getTagName(o2) === r2 && this.treeAdapter.getNamespaceURI(o2) === s2) {
                var c2 = this.treeAdapter.getAttrList(o2);
                c2.length === i2 && n2.push({ idx: a2, attrs: c2 });
              }
            }
            return n2;
          };
          t2.prototype._ensureNoahArkCondition = function(t3) {
            if (this.entries.length < 3)
              return;
            var e3 = this.treeAdapter.getAttrList(t3), n2 = this._getNoahArkConditionCandidates(t3, e3);
            if (n2.length < 3)
              return;
            var i2 = new Map(e3.map(function(t4) {
              return [t4.name, t4.value];
            }));
            var r2 = 0;
            for (var s2 = 0; s2 < n2.length; s2++) {
              var a2 = n2[s2];
              a2.attrs.every(function(t4) {
                return i2.get(t4.name) === t4.value;
              }) && (r2 += 1, r2 >= 3 && this.entries.splice(a2.idx, 1));
            }
          };
          t2.prototype.insertMarker = function() {
            this.entries.unshift(Z);
          };
          t2.prototype.pushElement = function(t3, e3) {
            this._ensureNoahArkCondition(t3), this.entries.unshift({ type: J.Element, element: t3, token: e3 });
          };
          t2.prototype.insertElementAfterBookmark = function(t3, e3) {
            var n2 = this.entries.indexOf(this.bookmark);
            this.entries.splice(n2, 0, { type: J.Element, element: t3, token: e3 });
          };
          t2.prototype.removeEntry = function(t3) {
            var e3 = this.entries.indexOf(t3);
            e3 >= 0 && this.entries.splice(e3, 1);
          };
          t2.prototype.clearToLastMarker = function() {
            var t3 = this.entries.indexOf(Z);
            t3 >= 0 ? this.entries.splice(0, t3 + 1) : this.entries.length = 0;
          };
          t2.prototype.getElementEntryInScopeWithTagName = function(t3) {
            var e3 = this;
            var n2 = this.entries.find(function(n3) {
              return n3.type === J.Marker || e3.treeAdapter.getTagName(n3.element) === t3;
            });
            return n2 && n2.type === J.Element ? n2 : null;
          };
          t2.prototype.getElementEntry = function(t3) {
            return this.entries.find(function(e3) {
              return e3.type === J.Element && e3.element === t3;
            });
          };
          return t2;
        }();
        function et(t2) {
          return { nodeName: "#text", value: t2, parentNode: null };
        }
        var nt = { createDocument: function() {
          return { nodeName: "#document", mode: T.NO_QUIRKS, childNodes: [] };
        }, createDocumentFragment: function() {
          return { nodeName: "#document-fragment", childNodes: [] };
        }, createElement: function(t2, e3, n2) {
          return { nodeName: t2, tagName: t2, attrs: n2, namespaceURI: e3, childNodes: [], parentNode: null };
        }, createCommentNode: function(t2) {
          return { nodeName: "#comment", data: t2, parentNode: null };
        }, appendChild: function(t2, e3) {
          t2.childNodes.push(e3), e3.parentNode = t2;
        }, insertBefore: function(t2, e3, n2) {
          var i2 = t2.childNodes.indexOf(n2);
          t2.childNodes.splice(i2, 0, e3), e3.parentNode = t2;
        }, setTemplateContent: function(t2, e3) {
          t2.content = e3;
        }, getTemplateContent: function(t2) {
          return t2.content;
        }, setDocumentType: function(t2, e3, n2, i2) {
          var r2 = t2.childNodes.find(function(t3) {
            return "#documentType" === t3.nodeName;
          });
          if (r2)
            r2.name = e3, r2.publicId = n2, r2.systemId = i2;
          else {
            var s2 = { nodeName: "#documentType", name: e3, publicId: n2, systemId: i2, parentNode: null };
            nt.appendChild(t2, s2);
          }
        }, setDocumentMode: function(t2, e3) {
          t2.mode = e3;
        }, getDocumentMode: function(t2) {
          return t2.mode;
        }, detachNode: function(t2) {
          if (t2.parentNode) {
            var e3 = t2.parentNode.childNodes.indexOf(t2);
            t2.parentNode.childNodes.splice(e3, 1), t2.parentNode = null;
          }
        }, insertText: function(t2, e3) {
          if (t2.childNodes.length > 0) {
            var n2 = t2.childNodes[t2.childNodes.length - 1];
            if (nt.isTextNode(n2))
              return void (n2.value += e3);
          }
          nt.appendChild(t2, et(e3));
        }, insertTextBefore: function(t2, e3, n2) {
          var i2 = t2.childNodes[t2.childNodes.indexOf(n2) - 1];
          i2 && nt.isTextNode(i2) ? i2.value += e3 : nt.insertBefore(t2, et(e3), n2);
        }, adoptAttributes: function(t2, e3) {
          var n2 = new Set(t2.attrs.map(function(t3) {
            return t3.name;
          }));
          for (var i2 = 0; i2 < e3.length; i2++)
            n2.has(e3[i2].name) || t2.attrs.push(e3[i2]);
        }, getFirstChild: function(t2) {
          return t2.childNodes[0];
        }, getChildNodes: function(t2) {
          return t2.childNodes;
        }, getParentNode: function(t2) {
          return t2.parentNode;
        }, getAttrList: function(t2) {
          return t2.attrs;
        }, getTagName: function(t2) {
          return t2.tagName;
        }, getNamespaceURI: function(t2) {
          return t2.namespaceURI;
        }, getTextNodeContent: function(t2) {
          return t2.value;
        }, getCommentNodeContent: function(t2) {
          return t2.data;
        }, getDocumentTypeNodeName: function(t2) {
          return t2.name;
        }, getDocumentTypeNodePublicId: function(t2) {
          return t2.publicId;
        }, getDocumentTypeNodeSystemId: function(t2) {
          return t2.systemId;
        }, isTextNode: function(t2) {
          return "#text" === t2.nodeName;
        }, isCommentNode: function(t2) {
          return "#comment" === t2.nodeName;
        }, isDocumentTypeNode: function(t2) {
          return "#documentType" === t2.nodeName;
        }, isElementNode: function(t2) {
          return Object.prototype.hasOwnProperty.call(t2, "tagName");
        }, setNodeSourceCodeLocation: function(t2, e3) {
          t2.sourceCodeLocation = e3;
        }, getNodeSourceCodeLocation: function(t2) {
          return t2.sourceCodeLocation;
        }, updateNodeSourceCodeLocation: function(t2, e3) {
          t2.sourceCodeLocation = __assign(__assign({}, t2.sourceCodeLocation), e3);
        } }, it = "html", rt = ["+//silmaril//dtd html pro v0r11 19970101//", "-//as//dtd html 3.0 aswedit + extensions//", "-//advasoft ltd//dtd html 3.0 aswedit + extensions//", "-//ietf//dtd html 2.0 level 1//", "-//ietf//dtd html 2.0 level 2//", "-//ietf//dtd html 2.0 strict level 1//", "-//ietf//dtd html 2.0 strict level 2//", "-//ietf//dtd html 2.0 strict//", "-//ietf//dtd html 2.0//", "-//ietf//dtd html 2.1e//", "-//ietf//dtd html 3.0//", "-//ietf//dtd html 3.2 final//", "-//ietf//dtd html 3.2//", "-//ietf//dtd html 3//", "-//ietf//dtd html level 0//", "-//ietf//dtd html level 1//", "-//ietf//dtd html level 2//", "-//ietf//dtd html level 3//", "-//ietf//dtd html strict level 0//", "-//ietf//dtd html strict level 1//", "-//ietf//dtd html strict level 2//", "-//ietf//dtd html strict level 3//", "-//ietf//dtd html strict//", "-//ietf//dtd html//", "-//metrius//dtd metrius presentational//", "-//microsoft//dtd internet explorer 2.0 html strict//", "-//microsoft//dtd internet explorer 2.0 html//", "-//microsoft//dtd internet explorer 2.0 tables//", "-//microsoft//dtd internet explorer 3.0 html strict//", "-//microsoft//dtd internet explorer 3.0 html//", "-//microsoft//dtd internet explorer 3.0 tables//", "-//netscape comm. corp.//dtd html//", "-//netscape comm. corp.//dtd strict html//", "-//o'reilly and associates//dtd html 2.0//", "-//o'reilly and associates//dtd html extended 1.0//", "-//o'reilly and associates//dtd html extended relaxed 1.0//", "-//sq//dtd html 2.0 hotmetal + extensions//", "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//", "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//", "-//spyglass//dtd html 2.0 extended//", "-//sun microsystems corp.//dtd hotjava html//", "-//sun microsystems corp.//dtd hotjava strict html//", "-//w3c//dtd html 3 1995-03-24//", "-//w3c//dtd html 3.2 draft//", "-//w3c//dtd html 3.2 final//", "-//w3c//dtd html 3.2//", "-//w3c//dtd html 3.2s draft//", "-//w3c//dtd html 4.0 frameset//", "-//w3c//dtd html 4.0 transitional//", "-//w3c//dtd html experimental 19960712//", "-//w3c//dtd html experimental 970421//", "-//w3c//dtd w3 html//", "-//w3o//dtd w3 html 3.0//", "-//webtechs//dtd mozilla html 2.0//", "-//webtechs//dtd mozilla html//"], st = __spreadArray(__spreadArray([], rt, true), ["-//w3c//dtd html 4.01 frameset//", "-//w3c//dtd html 4.01 transitional//"], false), at = /* @__PURE__ */ new Set(["-//w3o//dtd w3 html strict 3.0//en//", "-/w3c/dtd html 4.0 transitional/en", "html"]), ut = ["-//w3c//dtd xhtml 1.0 frameset//", "-//w3c//dtd xhtml 1.0 transitional//"], ot = __spreadArray(__spreadArray([], ut, true), ["-//w3c//dtd html 4.01 frameset//", "-//w3c//dtd html 4.01 transitional//"], false);
        function ct(t2, e3) {
          return e3.some(function(e4) {
            return t2.startsWith(e4);
          });
        }
        var ft = "text/html", lt = "application/xhtml+xml", ht = "definitionurl", dt = "definitionURL", vt = new Map(["attributeName", "attributeType", "baseFrequency", "baseProfile", "calcMode", "clipPathUnits", "diffuseConstant", "edgeMode", "filterUnits", "glyphRef", "gradientTransform", "gradientUnits", "kernelMatrix", "kernelUnitLength", "keyPoints", "keySplines", "keyTimes", "lengthAdjust", "limitingConeAngle", "markerHeight", "markerUnits", "markerWidth", "maskContentUnits", "maskUnits", "numOctaves", "pathLength", "patternContentUnits", "patternTransform", "patternUnits", "pointsAtX", "pointsAtY", "pointsAtZ", "preserveAlpha", "preserveAspectRatio", "primitiveUnits", "refX", "refY", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "specularConstant", "specularExponent", "spreadMethod", "startOffset", "stdDeviation", "stitchTiles", "surfaceScale", "systemLanguage", "tableValues", "targetX", "targetY", "textLength", "viewBox", "viewTarget", "xChannelSelector", "yChannelSelector", "zoomAndPan"].map(function(t2) {
          return [t2.toLowerCase(), t2];
        })), bt = /* @__PURE__ */ new Map([["xlink:actuate", { prefix: "xlink", name: "actuate", namespace: E.XLINK }], ["xlink:arcrole", { prefix: "xlink", name: "arcrole", namespace: E.XLINK }], ["xlink:href", { prefix: "xlink", name: "href", namespace: E.XLINK }], ["xlink:role", { prefix: "xlink", name: "role", namespace: E.XLINK }], ["xlink:show", { prefix: "xlink", name: "show", namespace: E.XLINK }], ["xlink:title", { prefix: "xlink", name: "title", namespace: E.XLINK }], ["xlink:type", { prefix: "xlink", name: "type", namespace: E.XLINK }], ["xml:base", { prefix: "xml", name: "base", namespace: E.XML }], ["xml:lang", { prefix: "xml", name: "lang", namespace: E.XML }], ["xml:space", { prefix: "xml", name: "space", namespace: E.XML }], ["xmlns", { prefix: "", name: "xmlns", namespace: E.XMLNS }], ["xmlns:xlink", { prefix: "xmlns", name: "xlink", namespace: E.XMLNS }]]), mt = new Map(["altGlyph", "altGlyphDef", "altGlyphItem", "animateColor", "animateMotion", "animateTransform", "clipPath", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "foreignObject", "glyphRef", "linearGradient", "radialGradient", "textPath"].map(function(t2) {
          return [t2.toLowerCase(), t2];
        })), pt = /* @__PURE__ */ new Set([S.B, S.BIG, S.BLOCKQUOTE, S.BODY, S.BR, S.CENTER, S.CODE, S.DD, S.DIV, S.DL, S.DT, S.EM, S.EMBED, S.H1, S.H2, S.H3, S.H4, S.H5, S.H6, S.HEAD, S.HR, S.I, S.IMG, S.LI, S.LISTING, S.MENU, S.META, S.NOBR, S.OL, S.P, S.PRE, S.RUBY, S.S, S.SMALL, S.SPAN, S.STRONG, S.STRIKE, S.SUB, S.SUP, S.TABLE, S.TT, S.U, S.UL, S.VAR]);
        function gt(t2) {
          for (var e3 = 0; e3 < t2.attrs.length; e3++)
            if (t2.attrs[e3].name === ht) {
              t2.attrs[e3].name = dt;
              break;
            }
        }
        function Et(t2) {
          for (var e3 = 0; e3 < t2.attrs.length; e3++) {
            var n2 = vt.get(t2.attrs[e3].name);
            null != n2 && (t2.attrs[e3].name = n2);
          }
        }
        function kt(t2) {
          for (var e3 = 0; e3 < t2.attrs.length; e3++) {
            var n2 = bt.get(t2.attrs[e3].name);
            n2 && (t2.attrs[e3].prefix = n2.prefix, t2.attrs[e3].name = n2.name, t2.attrs[e3].namespace = n2.namespace);
          }
        }
        var Tt = "hidden", wt = 8, St = 3;
        var _t;
        !function(t2) {
          t2[t2.INITIAL = 0] = "INITIAL", t2[t2.BEFORE_HTML = 1] = "BEFORE_HTML", t2[t2.BEFORE_HEAD = 2] = "BEFORE_HEAD", t2[t2.IN_HEAD = 3] = "IN_HEAD", t2[t2.IN_HEAD_NO_SCRIPT = 4] = "IN_HEAD_NO_SCRIPT", t2[t2.AFTER_HEAD = 5] = "AFTER_HEAD", t2[t2.IN_BODY = 6] = "IN_BODY", t2[t2.TEXT = 7] = "TEXT", t2[t2.IN_TABLE = 8] = "IN_TABLE", t2[t2.IN_TABLE_TEXT = 9] = "IN_TABLE_TEXT", t2[t2.IN_CAPTION = 10] = "IN_CAPTION", t2[t2.IN_COLUMN_GROUP = 11] = "IN_COLUMN_GROUP", t2[t2.IN_TABLE_BODY = 12] = "IN_TABLE_BODY", t2[t2.IN_ROW = 13] = "IN_ROW", t2[t2.IN_CELL = 14] = "IN_CELL", t2[t2.IN_SELECT = 15] = "IN_SELECT", t2[t2.IN_SELECT_IN_TABLE = 16] = "IN_SELECT_IN_TABLE", t2[t2.IN_TEMPLATE = 17] = "IN_TEMPLATE", t2[t2.AFTER_BODY = 18] = "AFTER_BODY", t2[t2.IN_FRAMESET = 19] = "IN_FRAMESET", t2[t2.AFTER_FRAMESET = 20] = "AFTER_FRAMESET", t2[t2.AFTER_AFTER_BODY = 21] = "AFTER_AFTER_BODY", t2[t2.AFTER_AFTER_FRAMESET = 22] = "AFTER_AFTER_FRAMESET";
        }(_t || (_t = {}));
        var yt = { startLine: -1, startCol: -1, startOffset: -1, endLine: -1, endCol: -1, endOffset: -1 }, At = /* @__PURE__ */ new Set([S.TABLE, S.TBODY, S.TFOOT, S.THEAD, S.TR]), Nt = { scriptingEnabled: true, sourceCodeLocationInfo: false, treeAdapter: nt, onParseError: null };
        var Mt = function() {
          function t2(t3, e3, n2, i2) {
            if (n2 === void 0) {
              n2 = null;
            }
            if (i2 === void 0) {
              i2 = null;
            }
            this.fragmentContext = n2, this.scriptHandler = i2, this.currentToken = null, this.stopped = false, this.insertionMode = _t.INITIAL, this.originalInsertionMode = _t.INITIAL, this.headElement = null, this.formElement = null, this.currentNotInHTML = false, this.tmplInsertionModeStack = [], this.pendingCharacterTokens = [], this.hasNonWhitespacePendingCharacterToken = false, this.framesetOk = true, this.skipNextNewLine = false, this.fosterParentingEnabled = false, this.options = __assign(__assign({}, Nt), t3), this.treeAdapter = this.options.treeAdapter, this.onParseError = this.options.onParseError, this.onParseError && (this.options.sourceCodeLocationInfo = true), this.document = null != e3 ? e3 : this.treeAdapter.createDocument(), this.tokenizer = new F(this.options, this), this.activeFormattingElements = new tt(this.treeAdapter), this.fragmentContextID = n2 ? A(this.treeAdapter.getTagName(n2)) : S.UNKNOWN, this._setContextModes(null != n2 ? n2 : this.document, this.fragmentContextID), this.openElements = new Q(this.document, this.treeAdapter, this);
          }
          t2.parse = function(t3, e3) {
            var n2 = new this(e3);
            return n2.tokenizer.write(t3, true), n2.document;
          };
          t2.getFragmentParser = function(t3, e3) {
            var n2 = __assign(__assign({}, Nt), e3);
            null != t3 || (t3 = n2.treeAdapter.createElement(w.TEMPLATE, E.HTML, []));
            var i2 = n2.treeAdapter.createElement("documentmock", E.HTML, []), r2 = new this(n2, i2, t3);
            return r2.fragmentContextID === S.TEMPLATE && r2.tmplInsertionModeStack.unshift(_t.IN_TEMPLATE), r2._initTokenizerForFragmentParsing(), r2._insertFakeRootElement(), r2._resetInsertionMode(), r2._findFormInFragmentContext(), r2;
          };
          t2.prototype.getFragment = function() {
            var t3 = this.treeAdapter.getFirstChild(this.document), e3 = this.treeAdapter.createDocumentFragment();
            return this._adoptNodes(t3, e3), e3;
          };
          t2.prototype._err = function(t3, e3, n2) {
            var i2;
            if (!this.onParseError)
              return;
            var r2 = null !== (i2 = t3.location) && void 0 !== i2 ? i2 : yt, s2 = { code: e3, startLine: r2.startLine, startCol: r2.startCol, startOffset: r2.startOffset, endLine: n2 ? r2.startLine : r2.endLine, endCol: n2 ? r2.startCol : r2.endCol, endOffset: n2 ? r2.startOffset : r2.endOffset };
            this.onParseError(s2);
          };
          t2.prototype.onItemPush = function(t3, e3, n2) {
            var i2, r2;
            null === (r2 = (i2 = this.treeAdapter).onItemPush) || void 0 === r2 || r2.call(i2, t3), n2 && this.openElements.stackTop > 0 && this._setContextModes(t3, e3);
          };
          t2.prototype.onItemPop = function(t3, e3) {
            var n2;
            var i2, r2;
            if (this.options.sourceCodeLocationInfo && this._setEndLocation(t3, this.currentToken), null === (r2 = (i2 = this.treeAdapter).onItemPop) || void 0 === r2 || r2.call(i2, t3, this.openElements.current), e3) {
              var s2 = void 0, a2 = void 0;
              0 === this.openElements.stackTop && this.fragmentContext ? (s2 = this.fragmentContext, a2 = this.fragmentContextID) : (n2 = this.openElements, s2 = n2.current, a2 = n2.currentTagId, n2), this._setContextModes(s2, a2);
            }
          };
          t2.prototype._setContextModes = function(t3, e3) {
            var n2 = t3 === this.document || this.treeAdapter.getNamespaceURI(t3) === E.HTML;
            this.currentNotInHTML = !n2, this.tokenizer.inForeignNode = !n2 && !this._isIntegrationPoint(e3, t3);
          };
          t2.prototype._switchToTextParsing = function(t3, e3) {
            this._insertElement(t3, E.HTML), this.tokenizer.state = e3, this.originalInsertionMode = this.insertionMode, this.insertionMode = _t.TEXT;
          };
          t2.prototype.switchToPlaintextParsing = function() {
            this.insertionMode = _t.TEXT, this.originalInsertionMode = _t.IN_BODY, this.tokenizer.state = R.PLAINTEXT;
          };
          t2.prototype._getAdjustedCurrentElement = function() {
            return 0 === this.openElements.stackTop && this.fragmentContext ? this.fragmentContext : this.openElements.current;
          };
          t2.prototype._findFormInFragmentContext = function() {
            var t3 = this.fragmentContext;
            for (; t3; ) {
              if (this.treeAdapter.getTagName(t3) === w.FORM) {
                this.formElement = t3;
                break;
              }
              t3 = this.treeAdapter.getParentNode(t3);
            }
          };
          t2.prototype._initTokenizerForFragmentParsing = function() {
            if (this.fragmentContext && this.treeAdapter.getNamespaceURI(this.fragmentContext) === E.HTML)
              switch (this.fragmentContextID) {
                case S.TITLE:
                case S.TEXTAREA:
                  this.tokenizer.state = R.RCDATA;
                  break;
                case S.STYLE:
                case S.XMP:
                case S.IFRAME:
                case S.NOEMBED:
                case S.NOFRAMES:
                case S.NOSCRIPT:
                  this.tokenizer.state = R.RAWTEXT;
                  break;
                case S.SCRIPT:
                  this.tokenizer.state = R.SCRIPT_DATA;
                  break;
                case S.PLAINTEXT:
                  this.tokenizer.state = R.PLAINTEXT;
              }
          };
          t2.prototype._setDocumentType = function(t3) {
            var e3 = this;
            var n2 = t3.name || "", i2 = t3.publicId || "", r2 = t3.systemId || "";
            if (this.treeAdapter.setDocumentType(this.document, n2, i2, r2), t3.location) {
              var s2 = this.treeAdapter.getChildNodes(this.document).find(function(t4) {
                return e3.treeAdapter.isDocumentTypeNode(t4);
              });
              s2 && this.treeAdapter.setNodeSourceCodeLocation(s2, t3.location);
            }
          };
          t2.prototype._attachElementToTree = function(t3, e3) {
            if (this.options.sourceCodeLocationInfo) {
              var n2 = e3 && __assign(__assign({}, e3), { startTag: e3 });
              this.treeAdapter.setNodeSourceCodeLocation(t3, n2);
            }
            if (this._shouldFosterParentOnInsertion())
              this._fosterParentElement(t3);
            else {
              var i2 = this.openElements.currentTmplContentOrNode;
              this.treeAdapter.appendChild(i2, t3);
            }
          };
          t2.prototype._appendElement = function(t3, e3) {
            var n2 = this.treeAdapter.createElement(t3.tagName, e3, t3.attrs);
            this._attachElementToTree(n2, t3.location);
          };
          t2.prototype._insertElement = function(t3, e3) {
            var n2 = this.treeAdapter.createElement(t3.tagName, e3, t3.attrs);
            this._attachElementToTree(n2, t3.location), this.openElements.push(n2, t3.tagID);
          };
          t2.prototype._insertFakeElement = function(t3, e3) {
            var n2 = this.treeAdapter.createElement(t3, E.HTML, []);
            this._attachElementToTree(n2, null), this.openElements.push(n2, e3);
          };
          t2.prototype._insertTemplate = function(t3) {
            var e3 = this.treeAdapter.createElement(t3.tagName, E.HTML, t3.attrs), n2 = this.treeAdapter.createDocumentFragment();
            this.treeAdapter.setTemplateContent(e3, n2), this._attachElementToTree(e3, t3.location), this.openElements.push(e3, t3.tagID), this.options.sourceCodeLocationInfo && this.treeAdapter.setNodeSourceCodeLocation(n2, null);
          };
          t2.prototype._insertFakeRootElement = function() {
            var t3 = this.treeAdapter.createElement(w.HTML, E.HTML, []);
            this.options.sourceCodeLocationInfo && this.treeAdapter.setNodeSourceCodeLocation(t3, null), this.treeAdapter.appendChild(this.openElements.current, t3), this.openElements.push(t3, S.HTML);
          };
          t2.prototype._appendCommentNode = function(t3, e3) {
            var n2 = this.treeAdapter.createCommentNode(t3.data);
            this.treeAdapter.appendChild(e3, n2), this.options.sourceCodeLocationInfo && this.treeAdapter.setNodeSourceCodeLocation(n2, t3.location);
          };
          t2.prototype._insertCharacters = function(t3) {
            var e3;
            var n2, i2;
            if (this._shouldFosterParentOnInsertion() ? (e3 = this._findFosterParentingLocation(), n2 = e3.parent, i2 = e3.beforeElement, i2 ? this.treeAdapter.insertTextBefore(n2, t3.chars, i2) : this.treeAdapter.insertText(n2, t3.chars)) : (n2 = this.openElements.currentTmplContentOrNode, this.treeAdapter.insertText(n2, t3.chars)), !t3.location)
              return;
            var r2 = this.treeAdapter.getChildNodes(n2), s2 = i2 ? r2.lastIndexOf(i2) : r2.length, a2 = r2[s2 - 1];
            if (this.treeAdapter.getNodeSourceCodeLocation(a2)) {
              var u3 = t3.location, o2 = u3.endLine, c2 = u3.endCol, f2 = u3.endOffset;
              this.treeAdapter.updateNodeSourceCodeLocation(a2, { endLine: o2, endCol: c2, endOffset: f2 });
            } else
              this.options.sourceCodeLocationInfo && this.treeAdapter.setNodeSourceCodeLocation(a2, t3.location);
          };
          t2.prototype._adoptNodes = function(t3, e3) {
            for (var n2 = this.treeAdapter.getFirstChild(t3); n2; n2 = this.treeAdapter.getFirstChild(t3))
              this.treeAdapter.detachNode(n2), this.treeAdapter.appendChild(e3, n2);
          };
          t2.prototype._setEndLocation = function(t3, e3) {
            if (this.treeAdapter.getNodeSourceCodeLocation(t3) && e3.location) {
              var n2 = e3.location, i2 = this.treeAdapter.getTagName(t3), r2 = e3.type === h2.END_TAG && i2 === e3.tagName ? { endTag: __assign({}, n2), endLine: n2.endLine, endCol: n2.endCol, endOffset: n2.endOffset } : { endLine: n2.startLine, endCol: n2.startCol, endOffset: n2.startOffset };
              this.treeAdapter.updateNodeSourceCodeLocation(t3, r2);
            }
          };
          t2.prototype.shouldProcessStartTagTokenInForeignContent = function(t3) {
            var e3;
            if (!this.currentNotInHTML)
              return false;
            var n2, i2;
            return 0 === this.openElements.stackTop && this.fragmentContext ? (n2 = this.fragmentContext, i2 = this.fragmentContextID) : (e3 = this.openElements, n2 = e3.current, i2 = e3.currentTagId, e3), (t3.tagID !== S.SVG || this.treeAdapter.getTagName(n2) !== w.ANNOTATION_XML || this.treeAdapter.getNamespaceURI(n2) !== E.MATHML) && (this.tokenizer.inForeignNode || (t3.tagID === S.MGLYPH || t3.tagID === S.MALIGNMARK) && !this._isIntegrationPoint(i2, n2, E.HTML));
          };
          t2.prototype._processToken = function(t3) {
            switch (t3.type) {
              case h2.CHARACTER:
                this.onCharacter(t3);
                break;
              case h2.NULL_CHARACTER:
                this.onNullCharacter(t3);
                break;
              case h2.COMMENT:
                this.onComment(t3);
                break;
              case h2.DOCTYPE:
                this.onDoctype(t3);
                break;
              case h2.START_TAG:
                this._processStartTag(t3);
                break;
              case h2.END_TAG:
                this.onEndTag(t3);
                break;
              case h2.EOF:
                this.onEof(t3);
                break;
              case h2.WHITESPACE_CHARACTER:
                this.onWhitespaceCharacter(t3);
            }
          };
          t2.prototype._isIntegrationPoint = function(t3, e3, n2) {
            return function(t4, e4, n3, i2) {
              return (!i2 || i2 === E.HTML) && function(t5, e5, n4) {
                if (e5 === E.MATHML && t5 === S.ANNOTATION_XML) {
                  for (var i3 = 0; i3 < n4.length; i3++)
                    if (n4[i3].name === k.ENCODING) {
                      var r2 = n4[i3].value.toLowerCase();
                      return r2 === ft || r2 === lt;
                    }
                }
                return e5 === E.SVG && (t5 === S.FOREIGN_OBJECT || t5 === S.DESC || t5 === S.TITLE);
              }(t4, e4, n3) || (!i2 || i2 === E.MATHML) && function(t5, e5) {
                return e5 === E.MATHML && (t5 === S.MI || t5 === S.MO || t5 === S.MN || t5 === S.MS || t5 === S.MTEXT);
              }(t4, e4);
            }(t3, this.treeAdapter.getNamespaceURI(e3), this.treeAdapter.getAttrList(e3), n2);
          };
          t2.prototype._reconstructActiveFormattingElements = function() {
            var t3 = this;
            var e3 = this.activeFormattingElements.entries.length;
            if (e3) {
              var n2 = this.activeFormattingElements.entries.findIndex(function(e4) {
                return e4.type === J.Marker || t3.openElements.contains(e4.element);
              });
              for (var i2 = n2 < 0 ? e3 - 1 : n2 - 1; i2 >= 0; i2--) {
                var r2 = this.activeFormattingElements.entries[i2];
                this._insertElement(r2.token, this.treeAdapter.getNamespaceURI(r2.element)), r2.element = this.openElements.current;
              }
            }
          };
          t2.prototype._closeTableCell = function() {
            this.openElements.generateImpliedEndTags(), this.openElements.popUntilTableCellPopped(), this.activeFormattingElements.clearToLastMarker(), this.insertionMode = _t.IN_ROW;
          };
          t2.prototype._closePElement = function() {
            this.openElements.generateImpliedEndTagsWithExclusion(S.P), this.openElements.popUntilTagNamePopped(S.P);
          };
          t2.prototype._resetInsertionMode = function() {
            for (var t3 = this.openElements.stackTop; t3 >= 0; t3--)
              switch (0 === t3 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[t3]) {
                case S.TR:
                  return void (this.insertionMode = _t.IN_ROW);
                case S.TBODY:
                case S.THEAD:
                case S.TFOOT:
                  return void (this.insertionMode = _t.IN_TABLE_BODY);
                case S.CAPTION:
                  return void (this.insertionMode = _t.IN_CAPTION);
                case S.COLGROUP:
                  return void (this.insertionMode = _t.IN_COLUMN_GROUP);
                case S.TABLE:
                  return void (this.insertionMode = _t.IN_TABLE);
                case S.BODY:
                  return void (this.insertionMode = _t.IN_BODY);
                case S.FRAMESET:
                  return void (this.insertionMode = _t.IN_FRAMESET);
                case S.SELECT:
                  return void this._resetInsertionModeForSelect(t3);
                case S.TEMPLATE:
                  return void (this.insertionMode = this.tmplInsertionModeStack[0]);
                case S.HTML:
                  return void (this.insertionMode = this.headElement ? _t.AFTER_HEAD : _t.BEFORE_HEAD);
                case S.TD:
                case S.TH:
                  if (t3 > 0)
                    return void (this.insertionMode = _t.IN_CELL);
                  break;
                case S.HEAD:
                  if (t3 > 0)
                    return void (this.insertionMode = _t.IN_HEAD);
              }
            this.insertionMode = _t.IN_BODY;
          };
          t2.prototype._resetInsertionModeForSelect = function(t3) {
            if (t3 > 0)
              for (var e3 = t3 - 1; e3 > 0; e3--) {
                var n2 = this.openElements.tagIDs[e3];
                if (n2 === S.TEMPLATE)
                  break;
                if (n2 === S.TABLE)
                  return void (this.insertionMode = _t.IN_SELECT_IN_TABLE);
              }
            this.insertionMode = _t.IN_SELECT;
          };
          t2.prototype._isElementCausesFosterParenting = function(t3) {
            return At.has(t3);
          };
          t2.prototype._shouldFosterParentOnInsertion = function() {
            return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);
          };
          t2.prototype._findFosterParentingLocation = function() {
            for (var t3 = this.openElements.stackTop; t3 >= 0; t3--) {
              var e3 = this.openElements.items[t3];
              switch (this.openElements.tagIDs[t3]) {
                case S.TEMPLATE:
                  if (this.treeAdapter.getNamespaceURI(e3) === E.HTML)
                    return { parent: this.treeAdapter.getTemplateContent(e3), beforeElement: null };
                  break;
                case S.TABLE: {
                  var n2 = this.treeAdapter.getParentNode(e3);
                  return n2 ? { parent: n2, beforeElement: e3 } : { parent: this.openElements.items[t3 - 1], beforeElement: null };
                }
              }
            }
            return { parent: this.openElements.items[0], beforeElement: null };
          };
          t2.prototype._fosterParentElement = function(t3) {
            var e3 = this._findFosterParentingLocation();
            e3.beforeElement ? this.treeAdapter.insertBefore(e3.parent, t3, e3.beforeElement) : this.treeAdapter.appendChild(e3.parent, t3);
          };
          t2.prototype._isSpecialElement = function(t3, e3) {
            var n2 = this.treeAdapter.getNamespaceURI(t3);
            return M[n2].has(e3);
          };
          t2.prototype.onCharacter = function(t3) {
            if (this.skipNextNewLine = false, this.tokenizer.inForeignNode)
              !function(t4, e3) {
                t4._insertCharacters(e3), t4.framesetOk = false;
              }(this, t3);
            else
              switch (this.insertionMode) {
                case _t.INITIAL:
                  jt(this, t3);
                  break;
                case _t.BEFORE_HTML:
                  Ut(this, t3);
                  break;
                case _t.BEFORE_HEAD:
                  Bt(this, t3);
                  break;
                case _t.IN_HEAD:
                  Gt(this, t3);
                  break;
                case _t.IN_HEAD_NO_SCRIPT:
                  $t2(this, t3);
                  break;
                case _t.AFTER_HEAD:
                  Vt(this, t3);
                  break;
                case _t.IN_BODY:
                case _t.IN_CAPTION:
                case _t.IN_CELL:
                case _t.IN_TEMPLATE:
                  Xt(this, t3);
                  break;
                case _t.TEXT:
                case _t.IN_SELECT:
                case _t.IN_SELECT_IN_TABLE:
                  this._insertCharacters(t3);
                  break;
                case _t.IN_TABLE:
                case _t.IN_TABLE_BODY:
                case _t.IN_ROW:
                  ie(this, t3);
                  break;
                case _t.IN_TABLE_TEXT:
                  oe(this, t3);
                  break;
                case _t.IN_COLUMN_GROUP:
                  he(this, t3);
                  break;
                case _t.AFTER_BODY:
                  Te(this, t3);
                  break;
                case _t.AFTER_AFTER_BODY:
                  we(this, t3);
              }
          };
          t2.prototype.onNullCharacter = function(t3) {
            if (this.skipNextNewLine = false, this.tokenizer.inForeignNode)
              !function(t4, e3) {
                e3.chars = i, t4._insertCharacters(e3);
              }(this, t3);
            else
              switch (this.insertionMode) {
                case _t.INITIAL:
                  jt(this, t3);
                  break;
                case _t.BEFORE_HTML:
                  Ut(this, t3);
                  break;
                case _t.BEFORE_HEAD:
                  Bt(this, t3);
                  break;
                case _t.IN_HEAD:
                  Gt(this, t3);
                  break;
                case _t.IN_HEAD_NO_SCRIPT:
                  $t2(this, t3);
                  break;
                case _t.AFTER_HEAD:
                  Vt(this, t3);
                  break;
                case _t.TEXT:
                  this._insertCharacters(t3);
                  break;
                case _t.IN_TABLE:
                case _t.IN_TABLE_BODY:
                case _t.IN_ROW:
                  ie(this, t3);
                  break;
                case _t.IN_COLUMN_GROUP:
                  he(this, t3);
                  break;
                case _t.AFTER_BODY:
                  Te(this, t3);
                  break;
                case _t.AFTER_AFTER_BODY:
                  we(this, t3);
              }
          };
          t2.prototype.onComment = function(t3) {
            if (this.skipNextNewLine = false, this.currentNotInHTML)
              Pt(this, t3);
            else
              switch (this.insertionMode) {
                case _t.INITIAL:
                case _t.BEFORE_HTML:
                case _t.BEFORE_HEAD:
                case _t.IN_HEAD:
                case _t.IN_HEAD_NO_SCRIPT:
                case _t.AFTER_HEAD:
                case _t.IN_BODY:
                case _t.IN_TABLE:
                case _t.IN_CAPTION:
                case _t.IN_COLUMN_GROUP:
                case _t.IN_TABLE_BODY:
                case _t.IN_ROW:
                case _t.IN_CELL:
                case _t.IN_SELECT:
                case _t.IN_SELECT_IN_TABLE:
                case _t.IN_TEMPLATE:
                case _t.IN_FRAMESET:
                case _t.AFTER_FRAMESET:
                  Pt(this, t3);
                  break;
                case _t.IN_TABLE_TEXT:
                  ce(this, t3);
                  break;
                case _t.AFTER_BODY:
                  !function(t4, e3) {
                    t4._appendCommentNode(e3, t4.openElements.items[0]);
                  }(this, t3);
                  break;
                case _t.AFTER_AFTER_BODY:
                case _t.AFTER_AFTER_FRAMESET:
                  !function(t4, e3) {
                    t4._appendCommentNode(e3, t4.document);
                  }(this, t3);
              }
          };
          t2.prototype.onDoctype = function(t3) {
            switch (this.skipNextNewLine = false, this.insertionMode) {
              case _t.INITIAL:
                !function(t4, e3) {
                  t4._setDocumentType(e3);
                  var n2 = e3.forceQuirks ? T.QUIRKS : function(t5) {
                    if (t5.name !== it)
                      return T.QUIRKS;
                    var e4 = t5.systemId;
                    if (e4 && "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd" === e4.toLowerCase())
                      return T.QUIRKS;
                    var n3 = t5.publicId;
                    if (null !== n3) {
                      if (n3 = n3.toLowerCase(), at.has(n3))
                        return T.QUIRKS;
                      var i2 = null === e4 ? st : rt;
                      if (ct(n3, i2))
                        return T.QUIRKS;
                      if (i2 = null === e4 ? ut : ot, ct(n3, i2))
                        return T.LIMITED_QUIRKS;
                    }
                    return T.NO_QUIRKS;
                  }(e3);
                  (function(t5) {
                    return t5.name === it && null === t5.publicId && (null === t5.systemId || "about:legacy-compat" === t5.systemId);
                  })(e3) || t4._err(e3, l.nonConformingDoctype), t4.treeAdapter.setDocumentMode(t4.document, n2), t4.insertionMode = _t.BEFORE_HTML;
                }(this, t3);
                break;
              case _t.BEFORE_HEAD:
              case _t.IN_HEAD:
              case _t.IN_HEAD_NO_SCRIPT:
              case _t.AFTER_HEAD:
                this._err(t3, l.misplacedDoctype);
                break;
              case _t.IN_TABLE_TEXT:
                ce(this, t3);
            }
          };
          t2.prototype.onStartTag = function(t3) {
            this.skipNextNewLine = false, this.currentToken = t3, this._processStartTag(t3), t3.selfClosing && !t3.ackSelfClosing && this._err(t3, l.nonVoidHtmlElementStartTagWithTrailingSolidus);
          };
          t2.prototype._processStartTag = function(t3) {
            this.shouldProcessStartTagTokenInForeignContent(t3) ? function(t4, e3) {
              if (function(t5) {
                var e4 = t5.tagID;
                return e4 === S.FONT && t5.attrs.some(function(t6) {
                  var e5 = t6.name;
                  return e5 === k.COLOR || e5 === k.SIZE || e5 === k.FACE;
                }) || pt.has(e4);
              }(e3))
                Se(t4), t4._startTagOutsideForeignContent(e3);
              else {
                var n2 = t4._getAdjustedCurrentElement(), i2 = t4.treeAdapter.getNamespaceURI(n2);
                i2 === E.MATHML ? gt(e3) : i2 === E.SVG && (function(t5) {
                  var e4 = mt.get(t5.tagName);
                  null != e4 && (t5.tagName = e4, t5.tagID = A(t5.tagName));
                }(e3), Et(e3)), kt(e3), e3.selfClosing ? t4._appendElement(e3, i2) : t4._insertElement(e3, i2), e3.ackSelfClosing = true;
              }
            }(this, t3) : this._startTagOutsideForeignContent(t3);
          };
          t2.prototype._startTagOutsideForeignContent = function(t3) {
            switch (this.insertionMode) {
              case _t.INITIAL:
                jt(this, t3);
                break;
              case _t.BEFORE_HTML:
                !function(t4, e3) {
                  e3.tagID === S.HTML ? (t4._insertElement(e3, E.HTML), t4.insertionMode = _t.BEFORE_HEAD) : Ut(t4, e3);
                }(this, t3);
                break;
              case _t.BEFORE_HEAD:
                !function(t4, e3) {
                  switch (e3.tagID) {
                    case S.HTML:
                      Zt(t4, e3);
                      break;
                    case S.HEAD:
                      t4._insertElement(e3, E.HTML), t4.headElement = t4.openElements.current, t4.insertionMode = _t.IN_HEAD;
                      break;
                    default:
                      Bt(t4, e3);
                  }
                }(this, t3);
                break;
              case _t.IN_HEAD:
                qt(this, t3);
                break;
              case _t.IN_HEAD_NO_SCRIPT:
                !function(t4, e3) {
                  switch (e3.tagID) {
                    case S.HTML:
                      Zt(t4, e3);
                      break;
                    case S.BASEFONT:
                    case S.BGSOUND:
                    case S.HEAD:
                    case S.LINK:
                    case S.META:
                    case S.NOFRAMES:
                    case S.STYLE:
                      qt(t4, e3);
                      break;
                    case S.NOSCRIPT:
                      t4._err(e3, l.nestedNoscriptInHead);
                      break;
                    default:
                      $t2(t4, e3);
                  }
                }(this, t3);
                break;
              case _t.AFTER_HEAD:
                !function(t4, e3) {
                  switch (e3.tagID) {
                    case S.HTML:
                      Zt(t4, e3);
                      break;
                    case S.BODY:
                      t4._insertElement(e3, E.HTML), t4.framesetOk = false, t4.insertionMode = _t.IN_BODY;
                      break;
                    case S.FRAMESET:
                      t4._insertElement(e3, E.HTML), t4.insertionMode = _t.IN_FRAMESET;
                      break;
                    case S.BASE:
                    case S.BASEFONT:
                    case S.BGSOUND:
                    case S.LINK:
                    case S.META:
                    case S.NOFRAMES:
                    case S.SCRIPT:
                    case S.STYLE:
                    case S.TEMPLATE:
                    case S.TITLE:
                      t4._err(e3, l.abandonedHeadElementChild), t4.openElements.push(t4.headElement, S.HEAD), qt(t4, e3), t4.openElements.remove(t4.headElement);
                      break;
                    case S.HEAD:
                      t4._err(e3, l.misplacedStartTagForHeadElement);
                      break;
                    default:
                      Vt(t4, e3);
                  }
                }(this, t3);
                break;
              case _t.IN_BODY:
                Zt(this, t3);
                break;
              case _t.IN_TABLE:
                re(this, t3);
                break;
              case _t.IN_TABLE_TEXT:
                ce(this, t3);
                break;
              case _t.IN_CAPTION:
                !function(t4, e3) {
                  var n2 = e3.tagID;
                  fe.has(n2) ? t4.openElements.hasInTableScope(S.CAPTION) && (t4.openElements.generateImpliedEndTags(), t4.openElements.popUntilTagNamePopped(S.CAPTION), t4.activeFormattingElements.clearToLastMarker(), t4.insertionMode = _t.IN_TABLE, re(t4, e3)) : Zt(t4, e3);
                }(this, t3);
                break;
              case _t.IN_COLUMN_GROUP:
                le(this, t3);
                break;
              case _t.IN_TABLE_BODY:
                de(this, t3);
                break;
              case _t.IN_ROW:
                be(this, t3);
                break;
              case _t.IN_CELL:
                !function(t4, e3) {
                  var n2 = e3.tagID;
                  fe.has(n2) ? (t4.openElements.hasInTableScope(S.TD) || t4.openElements.hasInTableScope(S.TH)) && (t4._closeTableCell(), be(t4, e3)) : Zt(t4, e3);
                }(this, t3);
                break;
              case _t.IN_SELECT:
                pe(this, t3);
                break;
              case _t.IN_SELECT_IN_TABLE:
                !function(t4, e3) {
                  var n2 = e3.tagID;
                  n2 === S.CAPTION || n2 === S.TABLE || n2 === S.TBODY || n2 === S.TFOOT || n2 === S.THEAD || n2 === S.TR || n2 === S.TD || n2 === S.TH ? (t4.openElements.popUntilTagNamePopped(S.SELECT), t4._resetInsertionMode(), t4._processStartTag(e3)) : pe(t4, e3);
                }(this, t3);
                break;
              case _t.IN_TEMPLATE:
                !function(t4, e3) {
                  switch (e3.tagID) {
                    case S.BASE:
                    case S.BASEFONT:
                    case S.BGSOUND:
                    case S.LINK:
                    case S.META:
                    case S.NOFRAMES:
                    case S.SCRIPT:
                    case S.STYLE:
                    case S.TEMPLATE:
                    case S.TITLE:
                      qt(t4, e3);
                      break;
                    case S.CAPTION:
                    case S.COLGROUP:
                    case S.TBODY:
                    case S.TFOOT:
                    case S.THEAD:
                      t4.tmplInsertionModeStack[0] = _t.IN_TABLE, t4.insertionMode = _t.IN_TABLE, re(t4, e3);
                      break;
                    case S.COL:
                      t4.tmplInsertionModeStack[0] = _t.IN_COLUMN_GROUP, t4.insertionMode = _t.IN_COLUMN_GROUP, le(t4, e3);
                      break;
                    case S.TR:
                      t4.tmplInsertionModeStack[0] = _t.IN_TABLE_BODY, t4.insertionMode = _t.IN_TABLE_BODY, de(t4, e3);
                      break;
                    case S.TD:
                    case S.TH:
                      t4.tmplInsertionModeStack[0] = _t.IN_ROW, t4.insertionMode = _t.IN_ROW, be(t4, e3);
                      break;
                    default:
                      t4.tmplInsertionModeStack[0] = _t.IN_BODY, t4.insertionMode = _t.IN_BODY, Zt(t4, e3);
                  }
                }(this, t3);
                break;
              case _t.AFTER_BODY:
                !function(t4, e3) {
                  e3.tagID === S.HTML ? Zt(t4, e3) : Te(t4, e3);
                }(this, t3);
                break;
              case _t.IN_FRAMESET:
                !function(t4, e3) {
                  switch (e3.tagID) {
                    case S.HTML:
                      Zt(t4, e3);
                      break;
                    case S.FRAMESET:
                      t4._insertElement(e3, E.HTML);
                      break;
                    case S.FRAME:
                      t4._appendElement(e3, E.HTML), e3.ackSelfClosing = true;
                      break;
                    case S.NOFRAMES:
                      qt(t4, e3);
                  }
                }(this, t3);
                break;
              case _t.AFTER_FRAMESET:
                !function(t4, e3) {
                  switch (e3.tagID) {
                    case S.HTML:
                      Zt(t4, e3);
                      break;
                    case S.NOFRAMES:
                      qt(t4, e3);
                  }
                }(this, t3);
                break;
              case _t.AFTER_AFTER_BODY:
                !function(t4, e3) {
                  e3.tagID === S.HTML ? Zt(t4, e3) : we(t4, e3);
                }(this, t3);
                break;
              case _t.AFTER_AFTER_FRAMESET:
                !function(t4, e3) {
                  switch (e3.tagID) {
                    case S.HTML:
                      Zt(t4, e3);
                      break;
                    case S.NOFRAMES:
                      qt(t4, e3);
                  }
                }(this, t3);
            }
          };
          t2.prototype.onEndTag = function(t3) {
            this.skipNextNewLine = false, this.currentToken = t3, this.currentNotInHTML ? function(t4, e3) {
              if (e3.tagID === S.P || e3.tagID === S.BR)
                return Se(t4), void t4._endTagOutsideForeignContent(e3);
              for (var n2 = t4.openElements.stackTop; n2 > 0; n2--) {
                var i2 = t4.openElements.items[n2];
                if (t4.treeAdapter.getNamespaceURI(i2) === E.HTML) {
                  t4._endTagOutsideForeignContent(e3);
                  break;
                }
                var r2 = t4.treeAdapter.getTagName(i2);
                if (r2.toLowerCase() === e3.tagName) {
                  e3.tagName = r2, t4.openElements.shortenToLength(n2);
                  break;
                }
              }
            }(this, t3) : this._endTagOutsideForeignContent(t3);
          };
          t2.prototype._endTagOutsideForeignContent = function(t3) {
            switch (this.insertionMode) {
              case _t.INITIAL:
                jt(this, t3);
                break;
              case _t.BEFORE_HTML:
                !function(t4, e3) {
                  var n2 = e3.tagID;
                  n2 !== S.HTML && n2 !== S.HEAD && n2 !== S.BODY && n2 !== S.BR || Ut(t4, e3);
                }(this, t3);
                break;
              case _t.BEFORE_HEAD:
                !function(t4, e3) {
                  var n2 = e3.tagID;
                  n2 === S.HEAD || n2 === S.BODY || n2 === S.HTML || n2 === S.BR ? Bt(t4, e3) : t4._err(e3, l.endTagWithoutMatchingOpenElement);
                }(this, t3);
                break;
              case _t.IN_HEAD:
                !function(t4, e3) {
                  switch (e3.tagID) {
                    case S.HEAD:
                      t4.openElements.pop(), t4.insertionMode = _t.AFTER_HEAD;
                      break;
                    case S.BODY:
                    case S.BR:
                    case S.HTML:
                      Gt(t4, e3);
                      break;
                    case S.TEMPLATE:
                      Ft(t4, e3);
                      break;
                    default:
                      t4._err(e3, l.endTagWithoutMatchingOpenElement);
                  }
                }(this, t3);
                break;
              case _t.IN_HEAD_NO_SCRIPT:
                !function(t4, e3) {
                  switch (e3.tagID) {
                    case S.NOSCRIPT:
                      t4.openElements.pop(), t4.insertionMode = _t.IN_HEAD;
                      break;
                    case S.BR:
                      $t2(t4, e3);
                      break;
                    default:
                      t4._err(e3, l.endTagWithoutMatchingOpenElement);
                  }
                }(this, t3);
                break;
              case _t.AFTER_HEAD:
                !function(t4, e3) {
                  switch (e3.tagID) {
                    case S.BODY:
                    case S.HTML:
                    case S.BR:
                      Vt(t4, e3);
                      break;
                    case S.TEMPLATE:
                      Ft(t4, e3);
                      break;
                    default:
                      t4._err(e3, l.endTagWithoutMatchingOpenElement);
                  }
                }(this, t3);
                break;
              case _t.IN_BODY:
                ee(this, t3);
                break;
              case _t.TEXT:
                !function(t4, e3) {
                  var n2;
                  e3.tagID === S.SCRIPT && (null === (n2 = t4.scriptHandler) || void 0 === n2 || n2.call(t4, t4.openElements.current)), t4.openElements.pop(), t4.insertionMode = t4.originalInsertionMode;
                }(this, t3);
                break;
              case _t.IN_TABLE:
                se(this, t3);
                break;
              case _t.IN_TABLE_TEXT:
                ce(this, t3);
                break;
              case _t.IN_CAPTION:
                !function(t4, e3) {
                  var n2 = e3.tagID;
                  switch (n2) {
                    case S.CAPTION:
                    case S.TABLE:
                      t4.openElements.hasInTableScope(S.CAPTION) && (t4.openElements.generateImpliedEndTags(), t4.openElements.popUntilTagNamePopped(S.CAPTION), t4.activeFormattingElements.clearToLastMarker(), t4.insertionMode = _t.IN_TABLE, n2 === S.TABLE && se(t4, e3));
                      break;
                    case S.BODY:
                    case S.COL:
                    case S.COLGROUP:
                    case S.HTML:
                    case S.TBODY:
                    case S.TD:
                    case S.TFOOT:
                    case S.TH:
                    case S.THEAD:
                    case S.TR:
                      break;
                    default:
                      ee(t4, e3);
                  }
                }(this, t3);
                break;
              case _t.IN_COLUMN_GROUP:
                !function(t4, e3) {
                  switch (e3.tagID) {
                    case S.COLGROUP:
                      t4.openElements.currentTagId === S.COLGROUP && (t4.openElements.pop(), t4.insertionMode = _t.IN_TABLE);
                      break;
                    case S.TEMPLATE:
                      Ft(t4, e3);
                      break;
                    case S.COL:
                      break;
                    default:
                      he(t4, e3);
                  }
                }(this, t3);
                break;
              case _t.IN_TABLE_BODY:
                ve(this, t3);
                break;
              case _t.IN_ROW:
                me(this, t3);
                break;
              case _t.IN_CELL:
                !function(t4, e3) {
                  var n2 = e3.tagID;
                  switch (n2) {
                    case S.TD:
                    case S.TH:
                      t4.openElements.hasInTableScope(n2) && (t4.openElements.generateImpliedEndTags(), t4.openElements.popUntilTagNamePopped(n2), t4.activeFormattingElements.clearToLastMarker(), t4.insertionMode = _t.IN_ROW);
                      break;
                    case S.TABLE:
                    case S.TBODY:
                    case S.TFOOT:
                    case S.THEAD:
                    case S.TR:
                      t4.openElements.hasInTableScope(n2) && (t4._closeTableCell(), me(t4, e3));
                      break;
                    case S.BODY:
                    case S.CAPTION:
                    case S.COL:
                    case S.COLGROUP:
                    case S.HTML:
                      break;
                    default:
                      ee(t4, e3);
                  }
                }(this, t3);
                break;
              case _t.IN_SELECT:
                ge(this, t3);
                break;
              case _t.IN_SELECT_IN_TABLE:
                !function(t4, e3) {
                  var n2 = e3.tagID;
                  n2 === S.CAPTION || n2 === S.TABLE || n2 === S.TBODY || n2 === S.TFOOT || n2 === S.THEAD || n2 === S.TR || n2 === S.TD || n2 === S.TH ? t4.openElements.hasInTableScope(n2) && (t4.openElements.popUntilTagNamePopped(S.SELECT), t4._resetInsertionMode(), t4.onEndTag(e3)) : ge(t4, e3);
                }(this, t3);
                break;
              case _t.IN_TEMPLATE:
                !function(t4, e3) {
                  e3.tagID === S.TEMPLATE && Ft(t4, e3);
                }(this, t3);
                break;
              case _t.AFTER_BODY:
                ke(this, t3);
                break;
              case _t.IN_FRAMESET:
                !function(t4, e3) {
                  e3.tagID !== S.FRAMESET || t4.openElements.isRootHtmlElementCurrent() || (t4.openElements.pop(), t4.fragmentContext || t4.openElements.currentTagId === S.FRAMESET || (t4.insertionMode = _t.AFTER_FRAMESET));
                }(this, t3);
                break;
              case _t.AFTER_FRAMESET:
                !function(t4, e3) {
                  e3.tagID === S.HTML && (t4.insertionMode = _t.AFTER_AFTER_FRAMESET);
                }(this, t3);
                break;
              case _t.AFTER_AFTER_BODY:
                we(this, t3);
            }
          };
          t2.prototype.onEof = function(t3) {
            switch (this.insertionMode) {
              case _t.INITIAL:
                jt(this, t3);
                break;
              case _t.BEFORE_HTML:
                Ut(this, t3);
                break;
              case _t.BEFORE_HEAD:
                Bt(this, t3);
                break;
              case _t.IN_HEAD:
                Gt(this, t3);
                break;
              case _t.IN_HEAD_NO_SCRIPT:
                $t2(this, t3);
                break;
              case _t.AFTER_HEAD:
                Vt(this, t3);
                break;
              case _t.IN_BODY:
              case _t.IN_TABLE:
              case _t.IN_CAPTION:
              case _t.IN_COLUMN_GROUP:
              case _t.IN_TABLE_BODY:
              case _t.IN_ROW:
              case _t.IN_CELL:
              case _t.IN_SELECT:
              case _t.IN_SELECT_IN_TABLE:
                ne(this, t3);
                break;
              case _t.TEXT:
                !function(t4, e3) {
                  t4._err(e3, l.eofInElementThatCanContainOnlyText), t4.openElements.pop(), t4.insertionMode = t4.originalInsertionMode, t4.onEof(e3);
                }(this, t3);
                break;
              case _t.IN_TABLE_TEXT:
                ce(this, t3);
                break;
              case _t.IN_TEMPLATE:
                Ee(this, t3);
                break;
              case _t.AFTER_BODY:
              case _t.IN_FRAMESET:
              case _t.AFTER_FRAMESET:
              case _t.AFTER_AFTER_BODY:
              case _t.AFTER_AFTER_FRAMESET:
                Ht(this, t3);
            }
          };
          t2.prototype.onWhitespaceCharacter = function(t3) {
            if (this.skipNextNewLine && (this.skipNextNewLine = false, t3.chars.charCodeAt(0) === r.LINE_FEED)) {
              if (1 === t3.chars.length)
                return;
              t3.chars = t3.chars.substr(1);
            }
            if (this.tokenizer.inForeignNode)
              this._insertCharacters(t3);
            else
              switch (this.insertionMode) {
                case _t.IN_HEAD:
                case _t.IN_HEAD_NO_SCRIPT:
                case _t.AFTER_HEAD:
                case _t.TEXT:
                case _t.IN_COLUMN_GROUP:
                case _t.IN_SELECT:
                case _t.IN_SELECT_IN_TABLE:
                case _t.IN_FRAMESET:
                case _t.AFTER_FRAMESET:
                  this._insertCharacters(t3);
                  break;
                case _t.IN_BODY:
                case _t.IN_CAPTION:
                case _t.IN_CELL:
                case _t.IN_TEMPLATE:
                case _t.AFTER_BODY:
                case _t.AFTER_AFTER_BODY:
                case _t.AFTER_AFTER_FRAMESET:
                  Wt(this, t3);
                  break;
                case _t.IN_TABLE:
                case _t.IN_TABLE_BODY:
                case _t.IN_ROW:
                  ie(this, t3);
                  break;
                case _t.IN_TABLE_TEXT:
                  ue(this, t3);
              }
          };
          return t2;
        }();
        function Ct(t2, e3) {
          var n2 = t2.activeFormattingElements.getElementEntryInScopeWithTagName(e3.tagName);
          return n2 ? t2.openElements.contains(n2.element) ? t2.openElements.hasInScope(e3.tagID) || (n2 = null) : (t2.activeFormattingElements.removeEntry(n2), n2 = null) : te(t2, e3), n2;
        }
        function Ot(t2, e3) {
          var n2 = null, i2 = t2.openElements.stackTop;
          for (; i2 >= 0; i2--) {
            var r2 = t2.openElements.items[i2];
            if (r2 === e3.element)
              break;
            t2._isSpecialElement(r2, t2.openElements.tagIDs[i2]) && (n2 = r2);
          }
          return n2 || (t2.openElements.shortenToLength(i2 < 0 ? 0 : i2), t2.activeFormattingElements.removeEntry(e3)), n2;
        }
        function Dt(t2, e3, n2) {
          var i2 = e3, r2 = t2.openElements.getCommonAncestor(e3);
          for (var s2 = 0, a2 = r2; a2 !== n2; s2++, a2 = r2) {
            r2 = t2.openElements.getCommonAncestor(a2);
            var u3 = t2.activeFormattingElements.getElementEntry(a2), o2 = u3 && s2 >= St;
            !u3 || o2 ? (o2 && t2.activeFormattingElements.removeEntry(u3), t2.openElements.remove(a2)) : (a2 = Rt(t2, u3), i2 === e3 && (t2.activeFormattingElements.bookmark = u3), t2.treeAdapter.detachNode(i2), t2.treeAdapter.appendChild(a2, i2), i2 = a2);
          }
          return i2;
        }
        function Rt(t2, e3) {
          var n2 = t2.treeAdapter.getNamespaceURI(e3.element), i2 = t2.treeAdapter.createElement(e3.token.tagName, n2, e3.token.attrs);
          return t2.openElements.replace(e3.element, i2), e3.element = i2, i2;
        }
        function Lt(t2, e3, n2) {
          var i2 = A(t2.treeAdapter.getTagName(e3));
          if (t2._isElementCausesFosterParenting(i2))
            t2._fosterParentElement(n2);
          else {
            var r2 = t2.treeAdapter.getNamespaceURI(e3);
            i2 === S.TEMPLATE && r2 === E.HTML && (e3 = t2.treeAdapter.getTemplateContent(e3)), t2.treeAdapter.appendChild(e3, n2);
          }
        }
        function It(t2, e3, n2) {
          var i2 = t2.treeAdapter.getNamespaceURI(n2.element), r2 = n2.token, s2 = t2.treeAdapter.createElement(r2.tagName, i2, r2.attrs);
          t2._adoptNodes(e3, s2), t2.treeAdapter.appendChild(e3, s2), t2.activeFormattingElements.insertElementAfterBookmark(s2, r2), t2.activeFormattingElements.removeEntry(n2), t2.openElements.remove(n2.element), t2.openElements.insertAfter(e3, s2, r2.tagID);
        }
        function xt(t2, e3) {
          for (var n2 = 0; n2 < wt; n2++) {
            var i2 = Ct(t2, e3);
            if (!i2)
              break;
            var r2 = Ot(t2, i2);
            if (!r2)
              break;
            t2.activeFormattingElements.bookmark = i2;
            var s2 = Dt(t2, r2, i2.element), a2 = t2.openElements.getCommonAncestor(i2.element);
            t2.treeAdapter.detachNode(s2), a2 && Lt(t2, a2, s2), It(t2, r2, i2);
          }
        }
        function Pt(t2, e3) {
          t2._appendCommentNode(e3, t2.openElements.currentTmplContentOrNode);
        }
        function Ht(t2, e3) {
          if (t2.stopped = true, e3.location) {
            var n2 = t2.fragmentContext ? 0 : 2;
            for (var i2 = t2.openElements.stackTop; i2 >= n2; i2--)
              t2._setEndLocation(t2.openElements.items[i2], e3);
            if (!t2.fragmentContext && t2.openElements.stackTop >= 0) {
              var r2 = t2.openElements.items[0], i2 = t2.treeAdapter.getNodeSourceCodeLocation(r2);
              if (i2 && !i2.endTag && (t2._setEndLocation(r2, e3), t2.openElements.stackTop >= 1)) {
                var s2 = t2.openElements.items[1], a2 = t2.treeAdapter.getNodeSourceCodeLocation(s2);
                a2 && !a2.endTag && t2._setEndLocation(s2, e3);
              }
            }
          }
        }
        function jt(t2, e3) {
          t2._err(e3, l.missingDoctype, true), t2.treeAdapter.setDocumentMode(t2.document, T.QUIRKS), t2.insertionMode = _t.BEFORE_HTML, t2._processToken(e3);
        }
        function Ut(t2, e3) {
          t2._insertFakeRootElement(), t2.insertionMode = _t.BEFORE_HEAD, t2._processToken(e3);
        }
        function Bt(t2, e3) {
          t2._insertFakeElement(w.HEAD, S.HEAD), t2.headElement = t2.openElements.current, t2.insertionMode = _t.IN_HEAD, t2._processToken(e3);
        }
        function qt(t2, e3) {
          switch (e3.tagID) {
            case S.HTML:
              Zt(t2, e3);
              break;
            case S.BASE:
            case S.BASEFONT:
            case S.BGSOUND:
            case S.LINK:
            case S.META:
              t2._appendElement(e3, E.HTML), e3.ackSelfClosing = true;
              break;
            case S.TITLE:
              t2._switchToTextParsing(e3, R.RCDATA);
              break;
            case S.NOSCRIPT:
              t2.options.scriptingEnabled ? t2._switchToTextParsing(e3, R.RAWTEXT) : (t2._insertElement(e3, E.HTML), t2.insertionMode = _t.IN_HEAD_NO_SCRIPT);
              break;
            case S.NOFRAMES:
            case S.STYLE:
              t2._switchToTextParsing(e3, R.RAWTEXT);
              break;
            case S.SCRIPT:
              t2._switchToTextParsing(e3, R.SCRIPT_DATA);
              break;
            case S.TEMPLATE:
              t2._insertTemplate(e3), t2.activeFormattingElements.insertMarker(), t2.framesetOk = false, t2.insertionMode = _t.IN_TEMPLATE, t2.tmplInsertionModeStack.unshift(_t.IN_TEMPLATE);
              break;
            case S.HEAD:
              t2._err(e3, l.misplacedStartTagForHeadElement);
              break;
            default:
              Gt(t2, e3);
          }
        }
        function Ft(t2, e3) {
          t2.openElements.tmplCount > 0 ? (t2.openElements.generateImpliedEndTagsThoroughly(), t2.openElements.currentTagId !== S.TEMPLATE && t2._err(e3, l.closingOfElementWithOpenChildElements), t2.openElements.popUntilTagNamePopped(S.TEMPLATE), t2.activeFormattingElements.clearToLastMarker(), t2.tmplInsertionModeStack.shift(), t2._resetInsertionMode()) : t2._err(e3, l.endTagWithoutMatchingOpenElement);
        }
        function Gt(t2, e3) {
          t2.openElements.pop(), t2.insertionMode = _t.AFTER_HEAD, t2._processToken(e3);
        }
        function $t2(t2, e3) {
          var n2 = e3.type === h2.EOF ? l.openElementsLeftAfterEof : l.disallowedContentInNoscriptInHead;
          t2._err(e3, n2), t2.openElements.pop(), t2.insertionMode = _t.IN_HEAD, t2._processToken(e3);
        }
        function Vt(t2, e3) {
          t2._insertFakeElement(w.BODY, S.BODY), t2.insertionMode = _t.IN_BODY, Yt(t2, e3);
        }
        function Yt(t2, e3) {
          switch (e3.type) {
            case h2.CHARACTER:
              Xt(t2, e3);
              break;
            case h2.WHITESPACE_CHARACTER:
              Wt(t2, e3);
              break;
            case h2.COMMENT:
              Pt(t2, e3);
              break;
            case h2.START_TAG:
              Zt(t2, e3);
              break;
            case h2.END_TAG:
              ee(t2, e3);
              break;
            case h2.EOF:
              ne(t2, e3);
          }
        }
        function Wt(t2, e3) {
          t2._reconstructActiveFormattingElements(), t2._insertCharacters(e3);
        }
        function Xt(t2, e3) {
          t2._reconstructActiveFormattingElements(), t2._insertCharacters(e3), t2.framesetOk = false;
        }
        function zt(t2, e3) {
          t2._reconstructActiveFormattingElements(), t2._appendElement(e3, E.HTML), t2.framesetOk = false, e3.ackSelfClosing = true;
        }
        function Kt(t2) {
          var e3 = v(t2, k.TYPE);
          return null != e3 && e3.toLowerCase() === Tt;
        }
        function Qt(t2, e3) {
          t2._switchToTextParsing(e3, R.RAWTEXT);
        }
        function Jt(t2, e3) {
          t2._reconstructActiveFormattingElements(), t2._insertElement(e3, E.HTML);
        }
        function Zt(t2, e3) {
          switch (e3.tagID) {
            case S.I:
            case S.S:
            case S.B:
            case S.U:
            case S.EM:
            case S.TT:
            case S.BIG:
            case S.CODE:
            case S.FONT:
            case S.SMALL:
            case S.STRIKE:
            case S.STRONG:
              !function(t3, e4) {
                t3._reconstructActiveFormattingElements(), t3._insertElement(e4, E.HTML), t3.activeFormattingElements.pushElement(t3.openElements.current, e4);
              }(t2, e3);
              break;
            case S.A:
              !function(t3, e4) {
                var n2 = t3.activeFormattingElements.getElementEntryInScopeWithTagName(w.A);
                n2 && (xt(t3, e4), t3.openElements.remove(n2.element), t3.activeFormattingElements.removeEntry(n2)), t3._reconstructActiveFormattingElements(), t3._insertElement(e4, E.HTML), t3.activeFormattingElements.pushElement(t3.openElements.current, e4);
              }(t2, e3);
              break;
            case S.H1:
            case S.H2:
            case S.H3:
            case S.H4:
            case S.H5:
            case S.H6:
              !function(t3, e4) {
                t3.openElements.hasInButtonScope(S.P) && t3._closePElement(), C(t3.openElements.currentTagId) && t3.openElements.pop(), t3._insertElement(e4, E.HTML);
              }(t2, e3);
              break;
            case S.P:
            case S.DL:
            case S.OL:
            case S.UL:
            case S.DIV:
            case S.DIR:
            case S.NAV:
            case S.MAIN:
            case S.MENU:
            case S.ASIDE:
            case S.CENTER:
            case S.FIGURE:
            case S.FOOTER:
            case S.HEADER:
            case S.HGROUP:
            case S.DIALOG:
            case S.DETAILS:
            case S.ADDRESS:
            case S.ARTICLE:
            case S.SECTION:
            case S.SUMMARY:
            case S.FIELDSET:
            case S.BLOCKQUOTE:
            case S.FIGCAPTION:
              !function(t3, e4) {
                t3.openElements.hasInButtonScope(S.P) && t3._closePElement(), t3._insertElement(e4, E.HTML);
              }(t2, e3);
              break;
            case S.LI:
            case S.DD:
            case S.DT:
              !function(t3, e4) {
                t3.framesetOk = false;
                var n2 = e4.tagID;
                for (var i2 = t3.openElements.stackTop; i2 >= 0; i2--) {
                  var r2 = t3.openElements.tagIDs[i2];
                  if (n2 === S.LI && r2 === S.LI || (n2 === S.DD || n2 === S.DT) && (r2 === S.DD || r2 === S.DT)) {
                    t3.openElements.generateImpliedEndTagsWithExclusion(r2), t3.openElements.popUntilTagNamePopped(r2);
                    break;
                  }
                  if (r2 !== S.ADDRESS && r2 !== S.DIV && r2 !== S.P && t3._isSpecialElement(t3.openElements.items[i2], r2))
                    break;
                }
                t3.openElements.hasInButtonScope(S.P) && t3._closePElement(), t3._insertElement(e4, E.HTML);
              }(t2, e3);
              break;
            case S.BR:
            case S.IMG:
            case S.WBR:
            case S.AREA:
            case S.EMBED:
            case S.KEYGEN:
              zt(t2, e3);
              break;
            case S.HR:
              !function(t3, e4) {
                t3.openElements.hasInButtonScope(S.P) && t3._closePElement(), t3._appendElement(e4, E.HTML), t3.framesetOk = false, e4.ackSelfClosing = true;
              }(t2, e3);
              break;
            case S.RB:
            case S.RTC:
              !function(t3, e4) {
                t3.openElements.hasInScope(S.RUBY) && t3.openElements.generateImpliedEndTags(), t3._insertElement(e4, E.HTML);
              }(t2, e3);
              break;
            case S.RT:
            case S.RP:
              !function(t3, e4) {
                t3.openElements.hasInScope(S.RUBY) && t3.openElements.generateImpliedEndTagsWithExclusion(S.RTC), t3._insertElement(e4, E.HTML);
              }(t2, e3);
              break;
            case S.PRE:
            case S.LISTING:
              !function(t3, e4) {
                t3.openElements.hasInButtonScope(S.P) && t3._closePElement(), t3._insertElement(e4, E.HTML), t3.skipNextNewLine = true, t3.framesetOk = false;
              }(t2, e3);
              break;
            case S.XMP:
              !function(t3, e4) {
                t3.openElements.hasInButtonScope(S.P) && t3._closePElement(), t3._reconstructActiveFormattingElements(), t3.framesetOk = false, t3._switchToTextParsing(e4, R.RAWTEXT);
              }(t2, e3);
              break;
            case S.SVG:
              !function(t3, e4) {
                t3._reconstructActiveFormattingElements(), Et(e4), kt(e4), e4.selfClosing ? t3._appendElement(e4, E.SVG) : t3._insertElement(e4, E.SVG), e4.ackSelfClosing = true;
              }(t2, e3);
              break;
            case S.HTML:
              !function(t3, e4) {
                0 === t3.openElements.tmplCount && t3.treeAdapter.adoptAttributes(t3.openElements.items[0], e4.attrs);
              }(t2, e3);
              break;
            case S.BASE:
            case S.LINK:
            case S.META:
            case S.STYLE:
            case S.TITLE:
            case S.SCRIPT:
            case S.BGSOUND:
            case S.BASEFONT:
            case S.TEMPLATE:
              qt(t2, e3);
              break;
            case S.BODY:
              !function(t3, e4) {
                var n2 = t3.openElements.tryPeekProperlyNestedBodyElement();
                n2 && 0 === t3.openElements.tmplCount && (t3.framesetOk = false, t3.treeAdapter.adoptAttributes(n2, e4.attrs));
              }(t2, e3);
              break;
            case S.FORM:
              !function(t3, e4) {
                var n2 = t3.openElements.tmplCount > 0;
                t3.formElement && !n2 || (t3.openElements.hasInButtonScope(S.P) && t3._closePElement(), t3._insertElement(e4, E.HTML), n2 || (t3.formElement = t3.openElements.current));
              }(t2, e3);
              break;
            case S.NOBR:
              !function(t3, e4) {
                t3._reconstructActiveFormattingElements(), t3.openElements.hasInScope(S.NOBR) && (xt(t3, e4), t3._reconstructActiveFormattingElements()), t3._insertElement(e4, E.HTML), t3.activeFormattingElements.pushElement(t3.openElements.current, e4);
              }(t2, e3);
              break;
            case S.MATH:
              !function(t3, e4) {
                t3._reconstructActiveFormattingElements(), gt(e4), kt(e4), e4.selfClosing ? t3._appendElement(e4, E.MATHML) : t3._insertElement(e4, E.MATHML), e4.ackSelfClosing = true;
              }(t2, e3);
              break;
            case S.TABLE:
              !function(t3, e4) {
                t3.treeAdapter.getDocumentMode(t3.document) !== T.QUIRKS && t3.openElements.hasInButtonScope(S.P) && t3._closePElement(), t3._insertElement(e4, E.HTML), t3.framesetOk = false, t3.insertionMode = _t.IN_TABLE;
              }(t2, e3);
              break;
            case S.INPUT:
              !function(t3, e4) {
                t3._reconstructActiveFormattingElements(), t3._appendElement(e4, E.HTML), Kt(e4) || (t3.framesetOk = false), e4.ackSelfClosing = true;
              }(t2, e3);
              break;
            case S.PARAM:
            case S.TRACK:
            case S.SOURCE:
              !function(t3, e4) {
                t3._appendElement(e4, E.HTML), e4.ackSelfClosing = true;
              }(t2, e3);
              break;
            case S.IMAGE:
              !function(t3, e4) {
                e4.tagName = w.IMG, e4.tagID = S.IMG, zt(t3, e4);
              }(t2, e3);
              break;
            case S.BUTTON:
              !function(t3, e4) {
                t3.openElements.hasInScope(S.BUTTON) && (t3.openElements.generateImpliedEndTags(), t3.openElements.popUntilTagNamePopped(S.BUTTON)), t3._reconstructActiveFormattingElements(), t3._insertElement(e4, E.HTML), t3.framesetOk = false;
              }(t2, e3);
              break;
            case S.APPLET:
            case S.OBJECT:
            case S.MARQUEE:
              !function(t3, e4) {
                t3._reconstructActiveFormattingElements(), t3._insertElement(e4, E.HTML), t3.activeFormattingElements.insertMarker(), t3.framesetOk = false;
              }(t2, e3);
              break;
            case S.IFRAME:
              !function(t3, e4) {
                t3.framesetOk = false, t3._switchToTextParsing(e4, R.RAWTEXT);
              }(t2, e3);
              break;
            case S.SELECT:
              !function(t3, e4) {
                t3._reconstructActiveFormattingElements(), t3._insertElement(e4, E.HTML), t3.framesetOk = false, t3.insertionMode = t3.insertionMode === _t.IN_TABLE || t3.insertionMode === _t.IN_CAPTION || t3.insertionMode === _t.IN_TABLE_BODY || t3.insertionMode === _t.IN_ROW || t3.insertionMode === _t.IN_CELL ? _t.IN_SELECT_IN_TABLE : _t.IN_SELECT;
              }(t2, e3);
              break;
            case S.OPTION:
            case S.OPTGROUP:
              !function(t3, e4) {
                t3.openElements.currentTagId === S.OPTION && t3.openElements.pop(), t3._reconstructActiveFormattingElements(), t3._insertElement(e4, E.HTML);
              }(t2, e3);
              break;
            case S.NOEMBED:
              Qt(t2, e3);
              break;
            case S.FRAMESET:
              !function(t3, e4) {
                var n2 = t3.openElements.tryPeekProperlyNestedBodyElement();
                t3.framesetOk && n2 && (t3.treeAdapter.detachNode(n2), t3.openElements.popAllUpToHtmlElement(), t3._insertElement(e4, E.HTML), t3.insertionMode = _t.IN_FRAMESET);
              }(t2, e3);
              break;
            case S.TEXTAREA:
              !function(t3, e4) {
                t3._insertElement(e4, E.HTML), t3.skipNextNewLine = true, t3.tokenizer.state = R.RCDATA, t3.originalInsertionMode = t3.insertionMode, t3.framesetOk = false, t3.insertionMode = _t.TEXT;
              }(t2, e3);
              break;
            case S.NOSCRIPT:
              t2.options.scriptingEnabled ? Qt(t2, e3) : Jt(t2, e3);
              break;
            case S.PLAINTEXT:
              !function(t3, e4) {
                t3.openElements.hasInButtonScope(S.P) && t3._closePElement(), t3._insertElement(e4, E.HTML), t3.tokenizer.state = R.PLAINTEXT;
              }(t2, e3);
              break;
            case S.COL:
            case S.TH:
            case S.TD:
            case S.TR:
            case S.HEAD:
            case S.FRAME:
            case S.TBODY:
            case S.TFOOT:
            case S.THEAD:
            case S.CAPTION:
            case S.COLGROUP:
              break;
            default:
              Jt(t2, e3);
          }
        }
        function te(t2, e3) {
          var n2 = e3.tagName, i2 = e3.tagID;
          for (var r2 = t2.openElements.stackTop; r2 > 0; r2--) {
            var s2 = t2.openElements.items[r2], a2 = t2.openElements.tagIDs[r2];
            if (i2 === a2 && (i2 !== S.UNKNOWN || t2.treeAdapter.getTagName(s2) === n2)) {
              t2.openElements.generateImpliedEndTagsWithExclusion(i2), t2.openElements.stackTop >= r2 && t2.openElements.shortenToLength(r2);
              break;
            }
            if (t2._isSpecialElement(s2, a2))
              break;
          }
        }
        function ee(t2, e3) {
          switch (e3.tagID) {
            case S.A:
            case S.B:
            case S.I:
            case S.S:
            case S.U:
            case S.EM:
            case S.TT:
            case S.BIG:
            case S.CODE:
            case S.FONT:
            case S.NOBR:
            case S.SMALL:
            case S.STRIKE:
            case S.STRONG:
              xt(t2, e3);
              break;
            case S.P:
              !function(t3) {
                t3.openElements.hasInButtonScope(S.P) || t3._insertFakeElement(w.P, S.P), t3._closePElement();
              }(t2);
              break;
            case S.DL:
            case S.UL:
            case S.OL:
            case S.DIR:
            case S.DIV:
            case S.NAV:
            case S.PRE:
            case S.MAIN:
            case S.MENU:
            case S.ASIDE:
            case S.BUTTON:
            case S.CENTER:
            case S.FIGURE:
            case S.FOOTER:
            case S.HEADER:
            case S.HGROUP:
            case S.DIALOG:
            case S.ADDRESS:
            case S.ARTICLE:
            case S.DETAILS:
            case S.SECTION:
            case S.SUMMARY:
            case S.LISTING:
            case S.FIELDSET:
            case S.BLOCKQUOTE:
            case S.FIGCAPTION:
              !function(t3, e4) {
                var n2 = e4.tagID;
                t3.openElements.hasInScope(n2) && (t3.openElements.generateImpliedEndTags(), t3.openElements.popUntilTagNamePopped(n2));
              }(t2, e3);
              break;
            case S.LI:
              !function(t3) {
                t3.openElements.hasInListItemScope(S.LI) && (t3.openElements.generateImpliedEndTagsWithExclusion(S.LI), t3.openElements.popUntilTagNamePopped(S.LI));
              }(t2);
              break;
            case S.DD:
            case S.DT:
              !function(t3, e4) {
                var n2 = e4.tagID;
                t3.openElements.hasInScope(n2) && (t3.openElements.generateImpliedEndTagsWithExclusion(n2), t3.openElements.popUntilTagNamePopped(n2));
              }(t2, e3);
              break;
            case S.H1:
            case S.H2:
            case S.H3:
            case S.H4:
            case S.H5:
            case S.H6:
              !function(t3) {
                t3.openElements.hasNumberedHeaderInScope() && (t3.openElements.generateImpliedEndTags(), t3.openElements.popUntilNumberedHeaderPopped());
              }(t2);
              break;
            case S.BR:
              !function(t3) {
                t3._reconstructActiveFormattingElements(), t3._insertFakeElement(w.BR, S.BR), t3.openElements.pop(), t3.framesetOk = false;
              }(t2);
              break;
            case S.BODY:
              !function(t3, e4) {
                if (t3.openElements.hasInScope(S.BODY) && (t3.insertionMode = _t.AFTER_BODY, t3.options.sourceCodeLocationInfo)) {
                  var n2 = t3.openElements.tryPeekProperlyNestedBodyElement();
                  n2 && t3._setEndLocation(n2, e4);
                }
              }(t2, e3);
              break;
            case S.HTML:
              !function(t3, e4) {
                t3.openElements.hasInScope(S.BODY) && (t3.insertionMode = _t.AFTER_BODY, ke(t3, e4));
              }(t2, e3);
              break;
            case S.FORM:
              !function(t3) {
                var e4 = t3.openElements.tmplCount > 0, n2 = t3.formElement;
                e4 || (t3.formElement = null), (n2 || e4) && t3.openElements.hasInScope(S.FORM) && (t3.openElements.generateImpliedEndTags(), e4 ? t3.openElements.popUntilTagNamePopped(S.FORM) : n2 && t3.openElements.remove(n2));
              }(t2);
              break;
            case S.APPLET:
            case S.OBJECT:
            case S.MARQUEE:
              !function(t3, e4) {
                var n2 = e4.tagID;
                t3.openElements.hasInScope(n2) && (t3.openElements.generateImpliedEndTags(), t3.openElements.popUntilTagNamePopped(n2), t3.activeFormattingElements.clearToLastMarker());
              }(t2, e3);
              break;
            case S.TEMPLATE:
              Ft(t2, e3);
              break;
            default:
              te(t2, e3);
          }
        }
        function ne(t2, e3) {
          t2.tmplInsertionModeStack.length > 0 ? Ee(t2, e3) : Ht(t2, e3);
        }
        function ie(t2, e3) {
          if (At.has(t2.openElements.currentTagId))
            switch (t2.pendingCharacterTokens.length = 0, t2.hasNonWhitespacePendingCharacterToken = false, t2.originalInsertionMode = t2.insertionMode, t2.insertionMode = _t.IN_TABLE_TEXT, e3.type) {
              case h2.CHARACTER:
                oe(t2, e3);
                break;
              case h2.WHITESPACE_CHARACTER:
                ue(t2, e3);
            }
          else
            ae(t2, e3);
        }
        function re(t2, e3) {
          switch (e3.tagID) {
            case S.TD:
            case S.TH:
            case S.TR:
              !function(t3, e4) {
                t3.openElements.clearBackToTableContext(), t3._insertFakeElement(w.TBODY, S.TBODY), t3.insertionMode = _t.IN_TABLE_BODY, de(t3, e4);
              }(t2, e3);
              break;
            case S.STYLE:
            case S.SCRIPT:
            case S.TEMPLATE:
              qt(t2, e3);
              break;
            case S.COL:
              !function(t3, e4) {
                t3.openElements.clearBackToTableContext(), t3._insertFakeElement(w.COLGROUP, S.COLGROUP), t3.insertionMode = _t.IN_COLUMN_GROUP, le(t3, e4);
              }(t2, e3);
              break;
            case S.FORM:
              !function(t3, e4) {
                t3.formElement || 0 !== t3.openElements.tmplCount || (t3._insertElement(e4, E.HTML), t3.formElement = t3.openElements.current, t3.openElements.pop());
              }(t2, e3);
              break;
            case S.TABLE:
              !function(t3, e4) {
                t3.openElements.hasInTableScope(S.TABLE) && (t3.openElements.popUntilTagNamePopped(S.TABLE), t3._resetInsertionMode(), t3._processStartTag(e4));
              }(t2, e3);
              break;
            case S.TBODY:
            case S.TFOOT:
            case S.THEAD:
              !function(t3, e4) {
                t3.openElements.clearBackToTableContext(), t3._insertElement(e4, E.HTML), t3.insertionMode = _t.IN_TABLE_BODY;
              }(t2, e3);
              break;
            case S.INPUT:
              !function(t3, e4) {
                Kt(e4) ? t3._appendElement(e4, E.HTML) : ae(t3, e4), e4.ackSelfClosing = true;
              }(t2, e3);
              break;
            case S.CAPTION:
              !function(t3, e4) {
                t3.openElements.clearBackToTableContext(), t3.activeFormattingElements.insertMarker(), t3._insertElement(e4, E.HTML), t3.insertionMode = _t.IN_CAPTION;
              }(t2, e3);
              break;
            case S.COLGROUP:
              !function(t3, e4) {
                t3.openElements.clearBackToTableContext(), t3._insertElement(e4, E.HTML), t3.insertionMode = _t.IN_COLUMN_GROUP;
              }(t2, e3);
              break;
            default:
              ae(t2, e3);
          }
        }
        function se(t2, e3) {
          switch (e3.tagID) {
            case S.TABLE:
              t2.openElements.hasInTableScope(S.TABLE) && (t2.openElements.popUntilTagNamePopped(S.TABLE), t2._resetInsertionMode());
              break;
            case S.TEMPLATE:
              Ft(t2, e3);
              break;
            case S.BODY:
            case S.CAPTION:
            case S.COL:
            case S.COLGROUP:
            case S.HTML:
            case S.TBODY:
            case S.TD:
            case S.TFOOT:
            case S.TH:
            case S.THEAD:
            case S.TR:
              break;
            default:
              ae(t2, e3);
          }
        }
        function ae(t2, e3) {
          var n2 = t2.fosterParentingEnabled;
          t2.fosterParentingEnabled = true, Yt(t2, e3), t2.fosterParentingEnabled = n2;
        }
        function ue(t2, e3) {
          t2.pendingCharacterTokens.push(e3);
        }
        function oe(t2, e3) {
          t2.pendingCharacterTokens.push(e3), t2.hasNonWhitespacePendingCharacterToken = true;
        }
        function ce(t2, e3) {
          var n2 = 0;
          if (t2.hasNonWhitespacePendingCharacterToken)
            for (; n2 < t2.pendingCharacterTokens.length; n2++)
              ae(t2, t2.pendingCharacterTokens[n2]);
          else
            for (; n2 < t2.pendingCharacterTokens.length; n2++)
              t2._insertCharacters(t2.pendingCharacterTokens[n2]);
          t2.insertionMode = t2.originalInsertionMode, t2._processToken(e3);
        }
        var fe = /* @__PURE__ */ new Set([S.CAPTION, S.COL, S.COLGROUP, S.TBODY, S.TD, S.TFOOT, S.TH, S.THEAD, S.TR]);
        function le(t2, e3) {
          switch (e3.tagID) {
            case S.HTML:
              Zt(t2, e3);
              break;
            case S.COL:
              t2._appendElement(e3, E.HTML), e3.ackSelfClosing = true;
              break;
            case S.TEMPLATE:
              qt(t2, e3);
              break;
            default:
              he(t2, e3);
          }
        }
        function he(t2, e3) {
          t2.openElements.currentTagId === S.COLGROUP && (t2.openElements.pop(), t2.insertionMode = _t.IN_TABLE, t2._processToken(e3));
        }
        function de(t2, e3) {
          switch (e3.tagID) {
            case S.TR:
              t2.openElements.clearBackToTableBodyContext(), t2._insertElement(e3, E.HTML), t2.insertionMode = _t.IN_ROW;
              break;
            case S.TH:
            case S.TD:
              t2.openElements.clearBackToTableBodyContext(), t2._insertFakeElement(w.TR, S.TR), t2.insertionMode = _t.IN_ROW, be(t2, e3);
              break;
            case S.CAPTION:
            case S.COL:
            case S.COLGROUP:
            case S.TBODY:
            case S.TFOOT:
            case S.THEAD:
              t2.openElements.hasTableBodyContextInTableScope() && (t2.openElements.clearBackToTableBodyContext(), t2.openElements.pop(), t2.insertionMode = _t.IN_TABLE, re(t2, e3));
              break;
            default:
              re(t2, e3);
          }
        }
        function ve(t2, e3) {
          var n2 = e3.tagID;
          switch (e3.tagID) {
            case S.TBODY:
            case S.TFOOT:
            case S.THEAD:
              t2.openElements.hasInTableScope(n2) && (t2.openElements.clearBackToTableBodyContext(), t2.openElements.pop(), t2.insertionMode = _t.IN_TABLE);
              break;
            case S.TABLE:
              t2.openElements.hasTableBodyContextInTableScope() && (t2.openElements.clearBackToTableBodyContext(), t2.openElements.pop(), t2.insertionMode = _t.IN_TABLE, se(t2, e3));
              break;
            case S.BODY:
            case S.CAPTION:
            case S.COL:
            case S.COLGROUP:
            case S.HTML:
            case S.TD:
            case S.TH:
            case S.TR:
              break;
            default:
              se(t2, e3);
          }
        }
        function be(t2, e3) {
          switch (e3.tagID) {
            case S.TH:
            case S.TD:
              t2.openElements.clearBackToTableRowContext(), t2._insertElement(e3, E.HTML), t2.insertionMode = _t.IN_CELL, t2.activeFormattingElements.insertMarker();
              break;
            case S.CAPTION:
            case S.COL:
            case S.COLGROUP:
            case S.TBODY:
            case S.TFOOT:
            case S.THEAD:
            case S.TR:
              t2.openElements.hasInTableScope(S.TR) && (t2.openElements.clearBackToTableRowContext(), t2.openElements.pop(), t2.insertionMode = _t.IN_TABLE_BODY, de(t2, e3));
              break;
            default:
              re(t2, e3);
          }
        }
        function me(t2, e3) {
          switch (e3.tagID) {
            case S.TR:
              t2.openElements.hasInTableScope(S.TR) && (t2.openElements.clearBackToTableRowContext(), t2.openElements.pop(), t2.insertionMode = _t.IN_TABLE_BODY);
              break;
            case S.TABLE:
              t2.openElements.hasInTableScope(S.TR) && (t2.openElements.clearBackToTableRowContext(), t2.openElements.pop(), t2.insertionMode = _t.IN_TABLE_BODY, ve(t2, e3));
              break;
            case S.TBODY:
            case S.TFOOT:
            case S.THEAD:
              (t2.openElements.hasInTableScope(e3.tagID) || t2.openElements.hasInTableScope(S.TR)) && (t2.openElements.clearBackToTableRowContext(), t2.openElements.pop(), t2.insertionMode = _t.IN_TABLE_BODY, ve(t2, e3));
              break;
            case S.BODY:
            case S.CAPTION:
            case S.COL:
            case S.COLGROUP:
            case S.HTML:
            case S.TD:
            case S.TH:
              break;
            default:
              se(t2, e3);
          }
        }
        function pe(t2, e3) {
          switch (e3.tagID) {
            case S.HTML:
              Zt(t2, e3);
              break;
            case S.OPTION:
              t2.openElements.currentTagId === S.OPTION && t2.openElements.pop(), t2._insertElement(e3, E.HTML);
              break;
            case S.OPTGROUP:
              t2.openElements.currentTagId === S.OPTION && t2.openElements.pop(), t2.openElements.currentTagId === S.OPTGROUP && t2.openElements.pop(), t2._insertElement(e3, E.HTML);
              break;
            case S.INPUT:
            case S.KEYGEN:
            case S.TEXTAREA:
            case S.SELECT:
              t2.openElements.hasInSelectScope(S.SELECT) && (t2.openElements.popUntilTagNamePopped(S.SELECT), t2._resetInsertionMode(), e3.tagID !== S.SELECT && t2._processStartTag(e3));
              break;
            case S.SCRIPT:
            case S.TEMPLATE:
              qt(t2, e3);
          }
        }
        function ge(t2, e3) {
          switch (e3.tagID) {
            case S.OPTGROUP:
              t2.openElements.stackTop > 0 && t2.openElements.currentTagId === S.OPTION && t2.openElements.tagIDs[t2.openElements.stackTop - 1] === S.OPTGROUP && t2.openElements.pop(), t2.openElements.currentTagId === S.OPTGROUP && t2.openElements.pop();
              break;
            case S.OPTION:
              t2.openElements.currentTagId === S.OPTION && t2.openElements.pop();
              break;
            case S.SELECT:
              t2.openElements.hasInSelectScope(S.SELECT) && (t2.openElements.popUntilTagNamePopped(S.SELECT), t2._resetInsertionMode());
              break;
            case S.TEMPLATE:
              Ft(t2, e3);
          }
        }
        function Ee(t2, e3) {
          t2.openElements.tmplCount > 0 ? (t2.openElements.popUntilTagNamePopped(S.TEMPLATE), t2.activeFormattingElements.clearToLastMarker(), t2.tmplInsertionModeStack.shift(), t2._resetInsertionMode(), t2.onEof(e3)) : Ht(t2, e3);
        }
        function ke(t2, e3) {
          var n2;
          if (e3.tagID === S.HTML) {
            if (t2.fragmentContext || (t2.insertionMode = _t.AFTER_AFTER_BODY), t2.options.sourceCodeLocationInfo && t2.openElements.tagIDs[0] === S.HTML) {
              t2._setEndLocation(t2.openElements.items[0], e3);
              var i2 = t2.openElements.items[1];
              i2 && !(null === (n2 = t2.treeAdapter.getNodeSourceCodeLocation(i2)) || void 0 === n2 ? void 0 : n2.endTag) && t2._setEndLocation(i2, e3);
            }
          } else
            Te(t2, e3);
        }
        function Te(t2, e3) {
          t2.insertionMode = _t.IN_BODY, Yt(t2, e3);
        }
        function we(t2, e3) {
          t2.insertionMode = _t.IN_BODY, Yt(t2, e3);
        }
        function Se(t2) {
          for (; t2.treeAdapter.getNamespaceURI(t2.openElements.current) !== E.HTML && !t2._isIntegrationPoint(t2.openElements.currentTagId, t2.openElements.current); )
            t2.openElements.pop();
        }
        return t.parse = function(t2, e3) {
          return Mt.parse(t2, e3);
        }, t.parseFragment = function(t2, e3, n2) {
          "string" == typeof t2 && (n2 = e3, e3 = t2, t2 = null);
          var i2 = Mt.getFragmentParser(t2, n2);
          return i2.tokenizer.write(e3, true), i2.getFragment();
        }, Object.defineProperty(t, "__esModule", { value: true }), t;
      }({});
      parse2 = e.parse;
      parseFragment = e.parseFragment;
      docParser = /* @__PURE__ */ new WeakMap();
      jquery_default = /*!
      * jQuery JavaScript Library v4.0.0-pre+9352011a7.dirty +selector
      * https://jquery.com/
      *
      * Copyright OpenJS Foundation and other contributors
      * Released under the MIT license
      * https://jquery.org/license
      *
      * Date: 2023-12-11T17:55Z
      */
      function(t, e2) {
        {
          return e2(t, true);
        }
      }({ document: { createElement: function() {
        return {};
      }, nodeType: 9, documentElement: { nodeType: 1, nodeName: "HTML" } } }, function(t, e2) {
        if (!t.document) {
          throw new Error("jQuery requires a window with a document");
        }
        var n = [];
        var i = Object.getPrototypeOf;
        var r = n.slice;
        var s = function(t2) {
          return n.concat.apply([], t2);
        };
        var a = n.push;
        var u2 = n.indexOf;
        var o = {};
        var c = o.toString;
        var f = o.hasOwnProperty;
        var l = f.toString;
        var h2 = l.call(Object);
        var d = {};
        function v(t2) {
          if (t2 == null) {
            return t2 + "";
          }
          return typeof t2 === "object" ? o[c.call(t2)] || "object" : typeof t2;
        }
        function b(t2) {
          return t2 != null && t2 === t2.window;
        }
        function m(t2) {
          var e3 = !!t2 && t2.length, n2 = v(t2);
          if (typeof t2 === "function" || b(t2)) {
            return false;
          }
          return n2 === "array" || e3 === 0 || typeof e3 === "number" && e3 > 0 && e3 - 1 in t2;
        }
        var p = t.document;
        var g = { type: true, src: true, nonce: true, noModule: true };
        function E(t2, e3, n2) {
          n2 = n2 || p;
          var i2, r2 = n2.createElement("script");
          r2.text = t2;
          if (e3) {
            for (i2 in g) {
              if (e3[i2]) {
                r2[i2] = e3[i2];
              }
            }
          }
          n2.head.appendChild(r2).parentNode.removeChild(r2);
        }
        var k = {};
        var T = "4.0.0-pre+9352011a7.dirty +selector", w = /HTML$/i;
        k.fn = k.prototype = { jquery: T, constructor: k, length: 0, toArray: function() {
          return r.call(this);
        }, get: function(t2) {
          if (t2 == null) {
            return r.call(this);
          }
          return t2 < 0 ? this[t2 + this.length] : this[t2];
        }, pushStack: function(t2) {
          var e3 = k.merge(this.constructor(), t2);
          e3.prevObject = this;
          return e3;
        }, each: function(t2) {
          return k.each(this, t2);
        }, map: function(t2) {
          return this.pushStack(k.map(this, function(e3, n2) {
            return t2.call(e3, n2, e3);
          }));
        }, slice: function() {
          return this.pushStack(r.apply(this, arguments));
        }, first: function() {
          return this.eq(0);
        }, last: function() {
          return this.eq(-1);
        }, even: function() {
          return this.pushStack(k.grep(this, function(t2, e3) {
            return (e3 + 1) % 2;
          }));
        }, odd: function() {
          return this.pushStack(k.grep(this, function(t2, e3) {
            return e3 % 2;
          }));
        }, eq: function(t2) {
          var e3 = this.length, n2 = +t2 + (t2 < 0 ? e3 : 0);
          return this.pushStack(n2 >= 0 && n2 < e3 ? [this[n2]] : []);
        }, end: function() {
          return this.prevObject || this.constructor();
        } };
        k.extend = k.fn.extend = function() {
          var t2, e3, n2, i2, r2, s2, a2 = arguments[0] || {}, u3 = 1, o2 = arguments.length, c2 = false;
          if (typeof a2 === "boolean") {
            c2 = a2;
            a2 = arguments[u3] || {};
            u3++;
          }
          if (typeof a2 !== "object" && typeof a2 !== "function") {
            a2 = {};
          }
          if (u3 === o2) {
            a2 = this;
            u3--;
          }
          for (; u3 < o2; u3++) {
            if ((t2 = arguments[u3]) != null) {
              for (e3 in t2) {
                i2 = t2[e3];
                if (e3 === "__proto__" || a2 === i2) {
                  continue;
                }
                if (c2 && i2 && (k.isPlainObject(i2) || (r2 = Array.isArray(i2)))) {
                  n2 = a2[e3];
                  if (r2 && !Array.isArray(n2)) {
                    s2 = [];
                  } else if (!r2 && !k.isPlainObject(n2)) {
                    s2 = {};
                  } else {
                    s2 = n2;
                  }
                  r2 = false;
                  a2[e3] = k.extend(c2, s2, i2);
                } else if (i2 !== void 0) {
                  a2[e3] = i2;
                }
              }
            }
          }
          return a2;
        };
        k.extend({ expando: "jQuery" + (T + Math.random()).replace(/\D/g, ""), isReady: true, error: function(t2) {
          throw new Error(t2);
        }, noop: function() {
        }, isPlainObject: function(t2) {
          var e3, n2;
          if (!t2 || c.call(t2) !== "[object Object]") {
            return false;
          }
          e3 = i(t2);
          if (!e3) {
            return true;
          }
          n2 = f.call(e3, "constructor") && e3.constructor;
          return typeof n2 === "function" && l.call(n2) === h2;
        }, isEmptyObject: function(t2) {
          var e3;
          for (e3 in t2) {
            return false;
          }
          return true;
        }, globalEval: function(t2, e3, n2) {
          E(t2, { nonce: e3 && e3.nonce }, n2);
        }, each: function(t2, e3) {
          var n2, i2 = 0;
          if (m(t2)) {
            n2 = t2.length;
            for (; i2 < n2; i2++) {
              if (e3.call(t2[i2], i2, t2[i2]) === false) {
                break;
              }
            }
          } else {
            for (i2 in t2) {
              if (e3.call(t2[i2], i2, t2[i2]) === false) {
                break;
              }
            }
          }
          return t2;
        }, text: function(t2) {
          var e3, n2 = "", i2 = 0, r2 = t2.nodeType;
          if (!r2) {
            while (e3 = t2[i2++]) {
              n2 += k.text(e3);
            }
          }
          if (r2 === 1 || r2 === 11) {
            return t2.textContent;
          }
          if (r2 === 9) {
            return t2.documentElement.textContent;
          }
          if (r2 === 3 || r2 === 4) {
            return t2.nodeValue;
          }
          return n2;
        }, makeArray: function(t2, e3) {
          var n2 = e3 || [];
          if (t2 != null) {
            if (m(Object(t2))) {
              k.merge(n2, typeof t2 === "string" ? [t2] : t2);
            } else {
              a.call(n2, t2);
            }
          }
          return n2;
        }, inArray: function(t2, e3, n2) {
          return e3 == null ? -1 : u2.call(e3, t2, n2);
        }, isXMLDoc: function(t2) {
          var e3 = t2 && t2.namespaceURI, n2 = t2 && (t2.ownerDocument || t2).documentElement;
          return !w.test(e3 || n2 && n2.nodeName || "HTML");
        }, contains: function(t2, e3) {
          var n2 = e3 && e3.parentNode;
          return t2 === n2 || !!(n2 && n2.nodeType === 1 && (t2.contains ? t2.contains(n2) : t2.compareDocumentPosition && t2.compareDocumentPosition(n2) & 16));
        }, merge: function(t2, e3) {
          var n2 = +e3.length, i2 = 0, r2 = t2.length;
          for (; i2 < n2; i2++) {
            t2[r2++] = e3[i2];
          }
          t2.length = r2;
          return t2;
        }, grep: function(t2, e3, n2) {
          var i2, r2 = [], s2 = 0, a2 = t2.length, u3 = !n2;
          for (; s2 < a2; s2++) {
            i2 = !e3(t2[s2], s2);
            if (i2 !== u3) {
              r2.push(t2[s2]);
            }
          }
          return r2;
        }, map: function(t2, e3, n2) {
          var i2, r2, a2 = 0, u3 = [];
          if (m(t2)) {
            i2 = t2.length;
            for (; a2 < i2; a2++) {
              r2 = e3(t2[a2], a2, n2);
              if (r2 != null) {
                u3.push(r2);
              }
            }
          } else {
            for (a2 in t2) {
              r2 = e3(t2[a2], a2, n2);
              if (r2 != null) {
                u3.push(r2);
              }
            }
          }
          return s(u3);
        }, guid: 1, support: d });
        if (typeof Symbol === "function") {
          k.fn[Symbol.iterator] = n[Symbol.iterator];
        }
        k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(t2, e3) {
          o["[object " + e3 + "]"] = e3.toLowerCase();
        });
        function S(t2, e3) {
          return t2.nodeName && t2.nodeName.toLowerCase() === e3.toLowerCase();
        }
        var _ = n.pop;
        var y = "[\\x20\\t\\r\\n\\f]";
        var A = p.documentMode;
        try {
          p.querySelector(":has(*,:jqfake)");
          d.cssHas = false;
        } catch (t2) {
          d.cssHas = true;
        }
        var N = [];
        if (A) {
          N.push(":enabled", ":disabled", "\\[" + y + "*name" + y + "*=" + y + `*(?:''|"")`);
        }
        if (!d.cssHas) {
          N.push(":has");
        }
        N = N.length && new RegExp(N.join("|"));
        var M = new RegExp("^" + y + "+|((?:^|[^\\\\])(?:\\\\.)*)" + y + "+$", "g");
        var C = "(?:\\\\[\\da-fA-F]{1,6}" + y + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+";
        var O = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped";
        var D = new RegExp("^" + y + "*([>+~]|" + y + ")" + y + "*");
        var R = /[+~]/;
        var L = p.documentElement;
        var I = L.matches || L.msMatchesSelector;
        function x() {
          var t2 = [];
          function e3(n2, i2) {
            if (t2.push(n2 + " ") > k.expr.cacheLength) {
              delete e3[t2.shift()];
            }
            return e3[n2 + " "] = i2;
          }
          return e3;
        }
        function P(t2) {
          return t2 && typeof t2.getElementsByTagName !== "undefined" && t2;
        }
        var H2 = "\\[" + y + "*(" + C + ")(?:" + y + "*([*^$|!~]?=)" + y + `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + C + "))|)" + y + "*\\]";
        var j = ":(" + C + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + H2 + ")*)|.*)\\)|)";
        var U = { ID: new RegExp("^#(" + C + ")"), CLASS: new RegExp("^\\.(" + C + ")"), TAG: new RegExp("^(" + C + "|[*])"), ATTR: new RegExp("^" + H2), PSEUDO: new RegExp("^" + j), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + y + "*(even|odd|(([+-]|)(\\d*)n|)" + y + "*(?:([+-]|)" + y + "*(\\d+)|))" + y + "*\\)|)", "i") };
        var B = new RegExp(j);
        var q = new RegExp("\\\\[\\da-fA-F]{1,6}" + y + "?|\\\\([^\\r\\n\\f])", "g"), F = function(t2, e3) {
          var n2 = "0x" + t2.slice(1) - 65536;
          if (e3) {
            return e3;
          }
          return n2 < 0 ? String.fromCharCode(n2 + 65536) : String.fromCharCode(n2 >> 10 | 55296, n2 & 1023 | 56320);
        };
        function G(t2) {
          return t2.replace(q, F);
        }
        function $(t2) {
          k.error("Syntax error, unrecognized expression: " + t2);
        }
        var V = new RegExp("^" + y + "*," + y + "*");
        var Y = x();
        function W(t2, e3) {
          var n2, i2, r2, s2, a2, u3, o2, c2 = Y[t2 + " "];
          if (c2) {
            return e3 ? 0 : c2.slice(0);
          }
          a2 = t2;
          u3 = [];
          o2 = k.expr.preFilter;
          while (a2) {
            if (!n2 || (i2 = V.exec(a2))) {
              if (i2) {
                a2 = a2.slice(i2[0].length) || a2;
              }
              u3.push(r2 = []);
            }
            n2 = false;
            if (i2 = D.exec(a2)) {
              n2 = i2.shift();
              r2.push({ value: n2, type: i2[0].replace(M, " ") });
              a2 = a2.slice(n2.length);
            }
            for (s2 in U) {
              if ((i2 = k.expr.match[s2].exec(a2)) && (!o2[s2] || (i2 = o2[s2](i2)))) {
                n2 = i2.shift();
                r2.push({ value: n2, type: s2, matches: i2 });
                a2 = a2.slice(n2.length);
              }
            }
            if (!n2) {
              break;
            }
          }
          if (e3) {
            return a2.length;
          }
          return a2 ? $(t2) : Y(t2, u3).slice(0);
        }
        var X = { ATTR: function(t2) {
          t2[1] = G(t2[1]);
          t2[3] = G(t2[3] || t2[4] || t2[5] || "");
          if (t2[2] === "~=") {
            t2[3] = " " + t2[3] + " ";
          }
          return t2.slice(0, 4);
        }, CHILD: function(t2) {
          t2[1] = t2[1].toLowerCase();
          if (t2[1].slice(0, 3) === "nth") {
            if (!t2[3]) {
              $(t2[0]);
            }
            t2[4] = +(t2[4] ? t2[5] + (t2[6] || 1) : 2 * (t2[3] === "even" || t2[3] === "odd"));
            t2[5] = +(t2[7] + t2[8] || t2[3] === "odd");
          } else if (t2[3]) {
            $(t2[0]);
          }
          return t2;
        }, PSEUDO: function(t2) {
          var e3, n2 = !t2[6] && t2[2];
          if (U.CHILD.test(t2[0])) {
            return null;
          }
          if (t2[3]) {
            t2[2] = t2[4] || t2[5] || "";
          } else if (n2 && B.test(n2) && (e3 = W(n2, true)) && (e3 = n2.indexOf(")", n2.length - e3) - n2.length)) {
            t2[0] = t2[0].slice(0, e3);
            t2[2] = n2.slice(0, e3);
          }
          return t2.slice(0, 3);
        } };
        function z(t2) {
          var e3 = 0, n2 = t2.length, i2 = "";
          for (; e3 < n2; e3++) {
            i2 += t2[e3].value;
          }
          return i2;
        }
        var K = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
        function Q(t2, e3) {
          if (e3) {
            if (t2 === "\0") {
              return "\uFFFD";
            }
            return t2.slice(0, -1) + "\\" + t2.charCodeAt(t2.length - 1).toString(16) + " ";
          }
          return "\\" + t2;
        }
        k.escapeSelector = function(t2) {
          return (t2 + "").replace(K, Q);
        };
        var J = n.sort;
        var Z = n.splice;
        var tt;
        function et(t2, e3) {
          if (t2 === e3) {
            tt = true;
            return 0;
          }
          var n2 = !t2.compareDocumentPosition - !e3.compareDocumentPosition;
          if (n2) {
            return n2;
          }
          n2 = (t2.ownerDocument || t2) == (e3.ownerDocument || e3) ? t2.compareDocumentPosition(e3) : 1;
          if (n2 & 1) {
            if (t2 == p || t2.ownerDocument == p && k.contains(p, t2)) {
              return -1;
            }
            if (e3 == p || e3.ownerDocument == p && k.contains(p, e3)) {
              return 1;
            }
            return 0;
          }
          return n2 & 4 ? -1 : 1;
        }
        k.uniqueSort = function(t2) {
          var e3, n2 = [], i2 = 0, r2 = 0;
          tt = false;
          J.call(t2, et);
          if (tt) {
            while (e3 = t2[r2++]) {
              if (e3 === t2[r2]) {
                i2 = n2.push(r2);
              }
            }
            while (i2--) {
              Z.call(t2, n2[i2], 1);
            }
          }
          return t2;
        };
        k.fn.uniqueSort = function() {
          return this.pushStack(k.uniqueSort(r.apply(this)));
        };
        var nt, it, rt, st, at, ut = 0, ot = 0, ct = x(), ft = x(), lt = x(), ht = new RegExp(y + "+", "g"), dt = new RegExp("^" + C + "$"), vt = k.extend({ bool: new RegExp("^(?:" + O + ")$", "i"), needsContext: new RegExp("^" + y + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + y + "*((?:-\\d)?\\d*)" + y + "*\\)|)(?=[^-]|$)", "i") }, U), bt = /^(?:input|select|textarea|button)$/i, mt = /^h\d$/i, pt = function() {
          yt();
        }, gt = Nt(function(t2) {
          return t2.disabled === true && S(t2, "fieldset");
        }, { dir: "parentNode", next: "legend" });
        function Et(t2, e3, n2, i2) {
          var r2 = e3 ? e3.nodeType : 9;
          n2 = n2 || [];
          if (typeof t2 !== "string" || !t2 || r2 !== 1 && r2 !== 9 && r2 !== 11) {
            return n2;
          }
          return xt(t2.replace(M, "$1"), e3, n2, i2);
        }
        function kt(t2) {
          t2[k.expando] = true;
          return t2;
        }
        function Tt(t2) {
          return function(e3) {
            return S(e3, "input") && e3.type === t2;
          };
        }
        function wt(t2) {
          return function(e3) {
            return (S(e3, "input") || S(e3, "button")) && e3.type === t2;
          };
        }
        function St(t2) {
          return function(e3) {
            if ("form" in e3) {
              if (e3.parentNode && e3.disabled === false) {
                if ("label" in e3) {
                  if ("label" in e3.parentNode) {
                    return e3.parentNode.disabled === t2;
                  } else {
                    return e3.disabled === t2;
                  }
                }
                return e3.isDisabled === t2 || e3.isDisabled !== !t2 && gt(e3) === t2;
              }
              return e3.disabled === t2;
            } else if ("label" in e3) {
              return e3.disabled === t2;
            }
            return false;
          };
        }
        function _t(t2) {
          return kt(function(e3) {
            e3 = +e3;
            return kt(function(n2, i2) {
              var r2, s2 = t2([], n2.length, e3), a2 = s2.length;
              while (a2--) {
                if (n2[r2 = s2[a2]]) {
                  n2[r2] = !(i2[r2] = n2[r2]);
                }
              }
            });
          });
        }
        function yt(t2) {
          var e3, n2 = t2 ? t2.ownerDocument || t2 : p;
          if (n2 == rt || n2.nodeType !== 9) {
            return;
          }
          rt = n2;
          st = rt.documentElement;
          at = !k.isXMLDoc(rt);
          if (A && p != rt && (e3 = rt.defaultView) && e3.top !== e3) {
            e3.addEventListener("unload", pt);
          }
        }
        Et.matches = function(t2, e3) {
          return Et(t2, null, null, e3);
        };
        Et.matchesSelector = function(t2, e3) {
          yt(t2);
          if (at && !lt[e3 + " "] && (!N || !N.test(e3))) {
            try {
              return I.call(t2, e3);
            } catch (t3) {
              lt(e3, true);
            }
          }
          return Et(e3, rt, null, [t2]).length > 0;
        };
        k.expr = { cacheLength: 50, createPseudo: kt, match: vt, find: { ID: function(t2, e3) {
          if (typeof e3.getElementById !== "undefined" && at) {
            var n2 = e3.getElementById(t2);
            return n2 ? [n2] : [];
          }
        }, TAG: function(t2, e3) {
          if (typeof e3.getElementsByTagName !== "undefined") {
            return e3.getElementsByTagName(t2);
          } else {
            return e3.querySelectorAll(t2);
          }
        }, CLASS: function(t2, e3) {
          if (typeof e3.getElementsByClassName !== "undefined" && at) {
            return e3.getElementsByClassName(t2);
          }
        } }, relative: { ">": { dir: "parentNode", first: true }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: true }, "~": { dir: "previousSibling" } }, preFilter: X, filter: { ID: function(t2) {
          var e3 = G(t2);
          return function(t3) {
            return t3.getAttribute("id") === e3;
          };
        }, TAG: function(t2) {
          var e3 = G(t2).toLowerCase();
          return t2 === "*" ? function() {
            return true;
          } : function(t3) {
            return S(t3, e3);
          };
        }, CLASS: function(t2) {
          var e3 = ct[t2 + " "];
          return e3 || (e3 = new RegExp("(^|" + y + ")" + t2 + "(" + y + "|$)")) && ct(t2, function(t3) {
            return e3.test(typeof t3.className === "string" && t3.className || typeof t3.getAttribute !== "undefined" && t3.getAttribute("class") || "");
          });
        }, ATTR: function(t2, e3, n2) {
          return function(i2) {
            var r2 = i2.getAttribute(t2);
            if (r2 == null) {
              return e3 === "!=";
            }
            if (!e3) {
              return true;
            }
            r2 += "";
            if (e3 === "=") {
              return r2 === n2;
            }
            if (e3 === "!=") {
              return r2 !== n2;
            }
            if (e3 === "^=") {
              return n2 && r2.indexOf(n2) === 0;
            }
            if (e3 === "*=") {
              return n2 && r2.indexOf(n2) > -1;
            }
            if (e3 === "$=") {
              return n2 && r2.slice(-n2.length) === n2;
            }
            if (e3 === "~=") {
              return (" " + r2.replace(ht, " ") + " ").indexOf(n2) > -1;
            }
            if (e3 === "|=") {
              return r2 === n2 || r2.slice(0, n2.length + 1) === n2 + "-";
            }
            return false;
          };
        }, CHILD: function(t2, e3, n2, i2, r2) {
          var s2 = t2.slice(0, 3) !== "nth", a2 = t2.slice(-4) !== "last", u3 = e3 === "of-type";
          return i2 === 1 && r2 === 0 ? function(t3) {
            return !!t3.parentNode;
          } : function(e4, n3, o2) {
            var c2, f2, l2, h3, d2, v2 = s2 !== a2 ? "nextSibling" : "previousSibling", b2 = e4.parentNode, m2 = u3 && e4.nodeName.toLowerCase(), p2 = !o2 && !u3, g2 = false;
            if (b2) {
              if (s2) {
                while (v2) {
                  l2 = e4;
                  while (l2 = l2[v2]) {
                    if (u3 ? S(l2, m2) : l2.nodeType === 1) {
                      return false;
                    }
                  }
                  d2 = v2 = t2 === "only" && !d2 && "nextSibling";
                }
                return true;
              }
              d2 = [a2 ? b2.firstChild : b2.lastChild];
              if (a2 && p2) {
                f2 = b2[k.expando] || (b2[k.expando] = {});
                c2 = f2[t2] || [];
                h3 = c2[0] === ut && c2[1];
                g2 = h3 && c2[2];
                l2 = h3 && b2.childNodes[h3];
                while (l2 = ++h3 && l2 && l2[v2] || (g2 = h3 = 0) || d2.pop()) {
                  if (l2.nodeType === 1 && ++g2 && l2 === e4) {
                    f2[t2] = [ut, h3, g2];
                    break;
                  }
                }
              } else {
                if (p2) {
                  f2 = e4[k.expando] || (e4[k.expando] = {});
                  c2 = f2[t2] || [];
                  h3 = c2[0] === ut && c2[1];
                  g2 = h3;
                }
                if (g2 === false) {
                  while (l2 = ++h3 && l2 && l2[v2] || (g2 = h3 = 0) || d2.pop()) {
                    if ((u3 ? S(l2, m2) : l2.nodeType === 1) && ++g2) {
                      if (p2) {
                        f2 = l2[k.expando] || (l2[k.expando] = {});
                        f2[t2] = [ut, g2];
                      }
                      if (l2 === e4) {
                        break;
                      }
                    }
                  }
                }
              }
              g2 -= r2;
              return g2 === i2 || g2 % i2 === 0 && g2 / i2 >= 0;
            }
          };
        }, PSEUDO: function(t2, e3) {
          var n2 = k.expr.pseudos[t2] || k.expr.setFilters[t2.toLowerCase()] || $("unsupported pseudo: " + t2);
          if (n2[k.expando]) {
            return n2(e3);
          }
          return n2;
        } }, pseudos: { not: kt(function(t2) {
          var e3 = [], n2 = [], i2 = It(t2.replace(M, "$1"));
          return i2[k.expando] ? kt(function(t3, e4, n3, r2) {
            var s2, a2 = i2(t3, null, r2, []), u3 = t3.length;
            while (u3--) {
              if (s2 = a2[u3]) {
                t3[u3] = !(e4[u3] = s2);
              }
            }
          }) : function(t3, r2, s2) {
            e3[0] = t3;
            i2(e3, null, s2, n2);
            e3[0] = null;
            return !n2.pop();
          };
        }), has: kt(function(t2) {
          return function(e3) {
            return Et(t2, e3).length > 0;
          };
        }), contains: kt(function(t2) {
          t2 = G(t2);
          return function(e3) {
            return (e3.textContent || k.text(e3)).indexOf(t2) > -1;
          };
        }), lang: kt(function(t2) {
          if (!dt.test(t2 || "")) {
            $("unsupported lang: " + t2);
          }
          t2 = G(t2).toLowerCase();
          return function(e3) {
            var n2;
            do {
              if (n2 = at ? e3.lang : e3.getAttribute("xml:lang") || e3.getAttribute("lang")) {
                n2 = n2.toLowerCase();
                return n2 === t2 || n2.indexOf(t2 + "-") === 0;
              }
            } while ((e3 = e3.parentNode) && e3.nodeType === 1);
            return false;
          };
        }), target: function(e3) {
          var n2 = t.location && t.location.hash;
          return n2 && n2.slice(1) === e3.id;
        }, root: function(t2) {
          return t2 === st;
        }, focus: function(t2) {
          return t2 === rt.activeElement && rt.hasFocus() && !!(t2.type || t2.href || ~t2.tabIndex);
        }, enabled: St(false), disabled: St(true), checked: function(t2) {
          return S(t2, "input") && !!t2.checked || S(t2, "option") && !!t2.selected;
        }, selected: function(t2) {
          return t2.selected === true;
        }, empty: function(t2) {
          for (t2 = t2.firstChild; t2; t2 = t2.nextSibling) {
            if (t2.nodeType < 6) {
              return false;
            }
          }
          return true;
        }, parent: function(t2) {
          return !k.expr.pseudos.empty(t2);
        }, header: function(t2) {
          return mt.test(t2.nodeName);
        }, input: function(t2) {
          return bt.test(t2.nodeName);
        }, button: function(t2) {
          return S(t2, "input") && t2.type === "button" || S(t2, "button");
        }, text: function(t2) {
          return S(t2, "input") && t2.type === "text";
        }, first: _t(function() {
          return [0];
        }), last: _t(function(t2, e3) {
          return [e3 - 1];
        }), eq: _t(function(t2, e3, n2) {
          return [n2 < 0 ? n2 + e3 : n2];
        }), even: _t(function(t2, e3) {
          var n2 = 0;
          for (; n2 < e3; n2 += 2) {
            t2.push(n2);
          }
          return t2;
        }), odd: _t(function(t2, e3) {
          var n2 = 1;
          for (; n2 < e3; n2 += 2) {
            t2.push(n2);
          }
          return t2;
        }), lt: _t(function(t2, e3, n2) {
          var i2;
          if (n2 < 0) {
            i2 = n2 + e3;
          } else if (n2 > e3) {
            i2 = e3;
          } else {
            i2 = n2;
          }
          for (; --i2 >= 0; ) {
            t2.push(i2);
          }
          return t2;
        }), gt: _t(function(t2, e3, n2) {
          var i2 = n2 < 0 ? n2 + e3 : n2;
          for (; ++i2 < e3; ) {
            t2.push(i2);
          }
          return t2;
        }) } };
        k.expr.pseudos.nth = k.expr.pseudos.eq;
        for (nt in { radio: true, checkbox: true, file: true, password: true, image: true }) {
          k.expr.pseudos[nt] = Tt(nt);
        }
        for (nt in { submit: true, reset: true }) {
          k.expr.pseudos[nt] = wt(nt);
        }
        function At() {
        }
        At.prototype = k.expr.filters = k.expr.pseudos;
        k.expr.setFilters = new At();
        function Nt(t2, e3, n2) {
          var i2 = e3.dir, r2 = e3.next, s2 = r2 || i2, a2 = n2 && s2 === "parentNode", u3 = ot++;
          return e3.first ? function(e4, n3, r3) {
            while (e4 = e4[i2]) {
              if (e4.nodeType === 1 || a2) {
                return t2(e4, n3, r3);
              }
            }
            return false;
          } : function(e4, n3, o2) {
            var c2, f2, l2 = [ut, u3];
            if (o2) {
              while (e4 = e4[i2]) {
                if (e4.nodeType === 1 || a2) {
                  if (t2(e4, n3, o2)) {
                    return true;
                  }
                }
              }
            } else {
              while (e4 = e4[i2]) {
                if (e4.nodeType === 1 || a2) {
                  f2 = e4[k.expando] || (e4[k.expando] = {});
                  if (r2 && S(e4, r2)) {
                    e4 = e4[i2] || e4;
                  } else if ((c2 = f2[s2]) && c2[0] === ut && c2[1] === u3) {
                    return l2[2] = c2[2];
                  } else {
                    f2[s2] = l2;
                    if (l2[2] = t2(e4, n3, o2)) {
                      return true;
                    }
                  }
                }
              }
            }
            return false;
          };
        }
        function Mt(t2) {
          return t2.length > 1 ? function(e3, n2, i2) {
            var r2 = t2.length;
            while (r2--) {
              if (!t2[r2](e3, n2, i2)) {
                return false;
              }
            }
            return true;
          } : t2[0];
        }
        function Ct(t2, e3, n2) {
          var i2 = 0, r2 = e3.length;
          for (; i2 < r2; i2++) {
            Et(t2, e3[i2], n2);
          }
          return n2;
        }
        function Ot(t2, e3, n2, i2, r2) {
          var s2, a2 = [], u3 = 0, o2 = t2.length, c2 = e3 != null;
          for (; u3 < o2; u3++) {
            if (s2 = t2[u3]) {
              if (!n2 || n2(s2, i2, r2)) {
                a2.push(s2);
                if (c2) {
                  e3.push(u3);
                }
              }
            }
          }
          return a2;
        }
        function Dt(t2, e3, n2, i2, r2, s2) {
          if (i2 && !i2[k.expando]) {
            i2 = Dt(i2);
          }
          if (r2 && !r2[k.expando]) {
            r2 = Dt(r2, s2);
          }
          return kt(function(s3, o2, c2, f2) {
            var l2, h3, d2, v2, b2 = [], m2 = [], p2 = o2.length, g2 = s3 || Ct(e3 || "*", c2.nodeType ? [c2] : c2, []), E2 = t2 && (s3 || !e3) ? Ot(g2, b2, t2, c2, f2) : g2;
            if (n2) {
              v2 = r2 || (s3 ? t2 : p2 || i2) ? [] : o2;
              n2(E2, v2, c2, f2);
            } else {
              v2 = E2;
            }
            if (i2) {
              l2 = Ot(v2, m2);
              i2(l2, [], c2, f2);
              h3 = l2.length;
              while (h3--) {
                if (d2 = l2[h3]) {
                  v2[m2[h3]] = !(E2[m2[h3]] = d2);
                }
              }
            }
            if (s3) {
              if (r2 || t2) {
                if (r2) {
                  l2 = [];
                  h3 = v2.length;
                  while (h3--) {
                    if (d2 = v2[h3]) {
                      l2.push(E2[h3] = d2);
                    }
                  }
                  r2(null, v2 = [], l2, f2);
                }
                h3 = v2.length;
                while (h3--) {
                  if ((d2 = v2[h3]) && (l2 = r2 ? u2.call(s3, d2) : b2[h3]) > -1) {
                    s3[l2] = !(o2[l2] = d2);
                  }
                }
              }
            } else {
              v2 = Ot(v2 === o2 ? v2.splice(p2, v2.length) : v2);
              if (r2) {
                r2(null, o2, v2, f2);
              } else {
                a.apply(o2, v2);
              }
            }
          });
        }
        function Rt(t2) {
          var e3, n2, i2, r2 = t2.length, s2 = k.expr.relative[t2[0].type], a2 = s2 || k.expr.relative[" "], o2 = s2 ? 1 : 0, c2 = Nt(function(t3) {
            return t3 === e3;
          }, a2, true), f2 = Nt(function(t3) {
            return u2.call(e3, t3) > -1;
          }, a2, true), l2 = [function(t3, n3, i3) {
            var r3 = !s2 && (i3 || n3 != it) || ((e3 = n3).nodeType ? c2(t3, n3, i3) : f2(t3, n3, i3));
            e3 = null;
            return r3;
          }];
          for (; o2 < r2; o2++) {
            if (n2 = k.expr.relative[t2[o2].type]) {
              l2 = [Nt(Mt(l2), n2)];
            } else {
              n2 = k.expr.filter[t2[o2].type].apply(null, t2[o2].matches);
              if (n2[k.expando]) {
                i2 = ++o2;
                for (; i2 < r2; i2++) {
                  if (k.expr.relative[t2[i2].type]) {
                    break;
                  }
                }
                return Dt(o2 > 1 && Mt(l2), o2 > 1 && z(t2.slice(0, o2 - 1).concat({ value: t2[o2 - 2].type === " " ? "*" : "" })).replace(M, "$1"), n2, o2 < i2 && Rt(t2.slice(o2, i2)), i2 < r2 && Rt(t2 = t2.slice(i2)), i2 < r2 && z(t2));
              }
              l2.push(n2);
            }
          }
          return Mt(l2);
        }
        function Lt(t2, e3) {
          var n2 = e3.length > 0, i2 = t2.length > 0, r2 = function(r3, s2, u3, o2, c2) {
            var f2, l2, h3, d2 = 0, v2 = "0", b2 = r3 && [], m2 = [], p2 = it, g2 = r3 || i2 && k.expr.find.TAG("*", c2), E2 = ut += p2 == null ? 1 : Math.random() || 0.1;
            if (c2) {
              it = s2 == rt || s2 || c2;
            }
            for (; (f2 = g2[v2]) != null; v2++) {
              if (i2 && f2) {
                l2 = 0;
                if (!s2 && f2.ownerDocument != rt) {
                  yt(f2);
                  u3 = !at;
                }
                while (h3 = t2[l2++]) {
                  if (h3(f2, s2 || rt, u3)) {
                    a.call(o2, f2);
                    break;
                  }
                }
                if (c2) {
                  ut = E2;
                }
              }
              if (n2) {
                if (f2 = !h3 && f2) {
                  d2--;
                }
                if (r3) {
                  b2.push(f2);
                }
              }
            }
            d2 += v2;
            if (n2 && v2 !== d2) {
              l2 = 0;
              while (h3 = e3[l2++]) {
                h3(b2, m2, s2, u3);
              }
              if (r3) {
                if (d2 > 0) {
                  while (v2--) {
                    if (!(b2[v2] || m2[v2])) {
                      m2[v2] = _.call(o2);
                    }
                  }
                }
                m2 = Ot(m2);
              }
              a.apply(o2, m2);
              if (c2 && !r3 && m2.length > 0 && d2 + e3.length > 1) {
                k.uniqueSort(o2);
              }
            }
            if (c2) {
              ut = E2;
              it = p2;
            }
            return b2;
          };
          return n2 ? kt(r2) : r2;
        }
        function It(t2, e3) {
          var n2, i2 = [], r2 = [], s2 = ft[t2 + " "];
          if (!s2) {
            if (!e3) {
              e3 = W(t2);
            }
            n2 = e3.length;
            while (n2--) {
              s2 = Rt(e3[n2]);
              if (s2[k.expando]) {
                i2.push(s2);
              } else {
                r2.push(s2);
              }
            }
            s2 = ft(t2, Lt(r2, i2));
            s2.selector = t2;
          }
          return s2;
        }
        function xt(t2, e3, n2, i2) {
          var r2, s2, u3, o2, c2, f2 = typeof t2 === "function" && t2, l2 = !i2 && W(t2 = f2.selector || t2);
          n2 = n2 || [];
          if (l2.length === 1) {
            s2 = l2[0] = l2[0].slice(0);
            if (s2.length > 2 && (u3 = s2[0]).type === "ID" && e3.nodeType === 9 && at && k.expr.relative[s2[1].type]) {
              e3 = (k.expr.find.ID(G(u3.matches[0]), e3) || [])[0];
              if (!e3) {
                return n2;
              } else if (f2) {
                e3 = e3.parentNode;
              }
              t2 = t2.slice(s2.shift().value.length);
            }
            r2 = vt.needsContext.test(t2) ? 0 : s2.length;
            while (r2--) {
              u3 = s2[r2];
              if (k.expr.relative[o2 = u3.type]) {
                break;
              }
              if (c2 = k.expr.find[o2]) {
                if (i2 = c2(G(u3.matches[0]), R.test(s2[0].type) && P(e3.parentNode) || e3)) {
                  s2.splice(r2, 1);
                  t2 = i2.length && z(s2);
                  if (!t2) {
                    a.apply(n2, i2);
                    return n2;
                  }
                  break;
                }
              }
            }
          }
          (f2 || It(t2, l2))(i2, e3, !at, n2, !e3 || R.test(t2) && P(e3.parentNode) || e3);
          return n2;
        }
        yt();
        k.find = Et;
        Et.compile = It;
        Et.select = xt;
        Et.setDocument = yt;
        Et.tokenize = W;
        return k;
      });
      PROBLEMATIC_SELECTORS = [":scope", ":where", ":is"];
      AMP_REGEX = /&/g;
      NBSP_REGEX = /\u00a0/g;
      DOUBLE_QUOTE_REGEX = /"/g;
      LT_REGEX = /</g;
      GT_REGEX = />/g;
      CAN_REMOVE_ATTR_QUOTES = /^[^ \t\n\f\r"'`=<>\/\\-]+$/;
      NON_ESCAPABLE_CONTENT = /* @__PURE__ */ new Set(["STYLE", "SCRIPT", "IFRAME", "NOSCRIPT", "XMP", "NOEMBED", "NOFRAMES", "PLAINTEXT"]);
      WHITESPACE_SENSITIVE = /* @__PURE__ */ new Set(["CODE", "OUTPUT", "PLAINTEXT", "PRE", "SCRIPT", "TEMPLATE", "TEXTAREA"]);
      EMPTY_ELEMENTS = /* @__PURE__ */ new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "trace", "wbr"]);
      REMOVE_EMPTY_ATTR = /* @__PURE__ */ new Set(["class", "dir", "id", "lang", "name", "title"]);
      BOOLEAN_ATTR = /* @__PURE__ */ new Set(["allowfullscreen", "async", "autofocus", "autoplay", "checked", "compact", "controls", "declare", "default", "defaultchecked", "defaultmuted", "defaultselected", "defer", "disabled", "enabled", "formnovalidate", "hidden", "indeterminate", "inert", "ismap", "itemscope", "loop", "multiple", "muted", "nohref", "nomodule", "noresize", "noshade", "novalidate", "nowrap", "open", "pauseonexit", "readonly", "required", "reversed", "scoped", "seamless", "selected", "sortable", "truespeed", "typemustmatch", "visible"]);
      STRUCTURE_ELEMENTS = /* @__PURE__ */ new Set(["html", "body", "head", "iframe", "meta", "link", "base", "title", "script", "style"]);
      MockNode2 = function() {
        function t(t2, e2, n, i) {
          this.ownerDocument = t2;
          this.nodeType = e2;
          this.nodeName = n;
          this._nodeValue = i;
          this.parentNode = null;
          this.childNodes = [];
        }
        t.prototype.appendChild = function(t2) {
          if (t2.nodeType === 11) {
            var e2 = t2.childNodes.slice();
            for (var n = 0, i = e2; n < i.length; n++) {
              var r = i[n];
              this.appendChild(r);
            }
          } else {
            t2.remove();
            t2.parentNode = this;
            this.childNodes.push(t2);
            connectNode(this.ownerDocument, t2);
          }
          return t2;
        };
        t.prototype.append = function() {
          var t2 = this;
          var e2 = [];
          for (var n = 0; n < arguments.length; n++) {
            e2[n] = arguments[n];
          }
          e2.forEach(function(e3) {
            var n2 = typeof e3 === "object" && e3 !== null && "nodeType" in e3;
            t2.appendChild(n2 ? e3 : t2.ownerDocument.createTextNode(String(e3)));
          });
        };
        t.prototype.prepend = function() {
          var t2 = this;
          var e2 = [];
          for (var n = 0; n < arguments.length; n++) {
            e2[n] = arguments[n];
          }
          var i = this.firstChild;
          e2.forEach(function(e3) {
            var n2 = typeof e3 === "object" && e3 !== null && "nodeType" in e3;
            if (i) {
              t2.insertBefore(n2 ? e3 : t2.ownerDocument.createTextNode(String(e3)), i);
            }
          });
        };
        t.prototype.cloneNode = function(t2) {
          throw new Error("invalid node type to clone: ".concat(this.nodeType, ", deep: ").concat(t2));
        };
        t.prototype.compareDocumentPosition = function(t2) {
          return -1;
        };
        Object.defineProperty(t.prototype, "firstChild", { get: function() {
          return this.childNodes[0] || null;
        }, enumerable: false, configurable: true });
        t.prototype.insertBefore = function(t2, e2) {
          if (t2.nodeType === 11) {
            for (var n = 0, i = t2.childNodes.length; n < i; n++) {
              insertBefore(this, t2.childNodes[n], e2);
            }
          } else {
            insertBefore(this, t2, e2);
          }
          return t2;
        };
        Object.defineProperty(t.prototype, "isConnected", { get: function() {
          var t2 = this;
          while (t2 != null) {
            if (t2.nodeType === 9) {
              return true;
            }
            t2 = t2.parentNode;
            if (t2 != null && t2.nodeType === 11) {
              t2 = t2.host;
            }
          }
          return false;
        }, enumerable: false, configurable: true });
        t.prototype.isSameNode = function(t2) {
          return this === t2;
        };
        Object.defineProperty(t.prototype, "lastChild", { get: function() {
          return this.childNodes[this.childNodes.length - 1] || null;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "nextSibling", { get: function() {
          if (this.parentNode != null) {
            var t2 = this.parentNode.childNodes.indexOf(this) + 1;
            return this.parentNode.childNodes[t2] || null;
          }
          return null;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "nodeValue", { get: function() {
          var t2;
          return (t2 = this._nodeValue) != null ? t2 : "";
        }, set: function(t2) {
          this._nodeValue = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "parentElement", { get: function() {
          return this.parentNode || null;
        }, set: function(t2) {
          this.parentNode = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "previousSibling", { get: function() {
          if (this.parentNode != null) {
            var t2 = this.parentNode.childNodes.indexOf(this) - 1;
            return this.parentNode.childNodes[t2] || null;
          }
          return null;
        }, enumerable: false, configurable: true });
        t.prototype.contains = function(t2) {
          var e2 = this;
          if (t2 === this) {
            return true;
          }
          var n = Array.from(this.childNodes);
          if (n.includes(t2)) {
            return true;
          }
          return n.some(function(n2) {
            return e2.contains.bind(n2)(t2);
          });
        };
        t.prototype.removeChild = function(t2) {
          var e2 = this.childNodes.indexOf(t2);
          if (e2 > -1) {
            this.childNodes.splice(e2, 1);
            if (this.nodeType === 1) {
              var n = this.isConnected;
              t2.parentNode = null;
              if (n === true) {
                disconnectNode(t2);
              }
            } else {
              t2.parentNode = null;
            }
          } else {
            throw new Error("node not found within childNodes during removeChild");
          }
          return t2;
        };
        t.prototype.remove = function() {
          if (this.parentNode != null) {
            this.parentNode.removeChild(this);
          }
        };
        t.prototype.replaceChild = function(t2, e2) {
          if (e2.parentNode === this) {
            this.insertBefore(t2, e2);
            e2.remove();
            return t2;
          }
          return null;
        };
        Object.defineProperty(t.prototype, "textContent", { get: function() {
          var t2;
          return (t2 = this._nodeValue) != null ? t2 : "";
        }, set: function(t2) {
          this._nodeValue = String(t2);
        }, enumerable: false, configurable: true });
        return t;
      }();
      MockNode2.ELEMENT_NODE = 1;
      MockNode2.TEXT_NODE = 3;
      MockNode2.PROCESSING_INSTRUCTION_NODE = 7;
      MockNode2.COMMENT_NODE = 8;
      MockNode2.DOCUMENT_NODE = 9;
      MockNode2.DOCUMENT_TYPE_NODE = 10;
      MockNode2.DOCUMENT_FRAGMENT_NODE = 11;
      MockNodeList = /* @__PURE__ */ function() {
        function t(t2, e2, n) {
          this.ownerDocument = t2;
          this.childNodes = e2;
          this.length = n;
        }
        return t;
      }();
      MockElement = function(t) {
        __extends(e2, t);
        function e2(e3, n, i) {
          if (i === void 0) {
            i = null;
          }
          var r = t.call(this, e3, 1, typeof n === "string" ? n : null, null) || this;
          r.__namespaceURI = i;
          r.__shadowRoot = null;
          r.__attributeMap = null;
          return r;
        }
        e2.prototype.attachInternals = function() {
          return new Proxy({}, { get: function(t2, e3, n) {
            console.error("NOTE: Property ".concat(String(e3), " was accessed on ElementInternals, but this property is not implemented.\nTesting components with ElementInternals is fully supported in e2e tests."));
          } });
        };
        e2.prototype.addEventListener = function(t2, e3) {
          addEventListener(this, t2, e3);
        };
        e2.prototype.attachShadow = function(t2) {
          var e3 = this.ownerDocument.createDocumentFragment();
          this.shadowRoot = e3;
          return e3;
        };
        e2.prototype.blur = function() {
          dispatchEvent(this, new MockFocusEvent("blur", { relatedTarget: null, bubbles: true, cancelable: true, composed: true }));
        };
        Object.defineProperty(e2.prototype, "localName", { get: function() {
          if (!this.nodeName) {
            throw new Error("Can't compute elements localName without nodeName");
          }
          return this.nodeName.toLocaleLowerCase();
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "namespaceURI", { get: function() {
          return this.__namespaceURI;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "shadowRoot", { get: function() {
          return this.__shadowRoot || null;
        }, set: function(t2) {
          if (t2 != null) {
            t2.host = this;
            this.__shadowRoot = t2;
          } else {
            delete this.__shadowRoot;
          }
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "attributes", { get: function() {
          if (this.__attributeMap == null) {
            var t2 = createAttributeProxy(false);
            this.__attributeMap = t2;
            return t2;
          }
          return this.__attributeMap;
        }, set: function(t2) {
          this.__attributeMap = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "children", { get: function() {
          return this.childNodes.filter(function(t2) {
            return t2.nodeType === 1;
          });
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "childElementCount", { get: function() {
          return this.childNodes.filter(function(t2) {
            return t2.nodeType === 1;
          }).length;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "className", { get: function() {
          return this.getAttributeNS(null, "class") || "";
        }, set: function(t2) {
          this.setAttributeNS(null, "class", t2);
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "classList", { get: function() {
          return new MockClassList(this);
        }, enumerable: false, configurable: true });
        e2.prototype.click = function() {
          dispatchEvent(this, new MockEvent("click", { bubbles: true, cancelable: true, composed: true }));
        };
        e2.prototype.cloneNode = function(t2) {
          return null;
        };
        e2.prototype.closest = function(t2) {
          var e3 = this;
          while (e3 != null) {
            if (e3.matches(t2)) {
              return e3;
            }
            e3 = e3.parentNode;
          }
          return null;
        };
        Object.defineProperty(e2.prototype, "dataset", { get: function() {
          return dataset(this);
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "dir", { get: function() {
          return this.getAttributeNS(null, "dir") || "";
        }, set: function(t2) {
          this.setAttributeNS(null, "dir", t2);
        }, enumerable: false, configurable: true });
        e2.prototype.dispatchEvent = function(t2) {
          return dispatchEvent(this, t2);
        };
        Object.defineProperty(e2.prototype, "firstElementChild", { get: function() {
          return this.children[0] || null;
        }, enumerable: false, configurable: true });
        e2.prototype.focus = function(t2) {
          dispatchEvent(this, new MockFocusEvent("focus", { relatedTarget: null, bubbles: true, cancelable: true, composed: true }));
        };
        e2.prototype.getAttribute = function(t2) {
          if (t2 === "style") {
            if (this.__style != null && this.__style.length > 0) {
              return this.style.cssText;
            }
            return null;
          }
          var e3 = this.attributes.getNamedItem(t2);
          if (e3 != null) {
            return e3.value;
          }
          return null;
        };
        e2.prototype.getAttributeNS = function(t2, e3) {
          var n = this.attributes.getNamedItemNS(t2, e3);
          if (n != null) {
            return n.value;
          }
          return null;
        };
        e2.prototype.getAttributeNode = function(t2) {
          if (!this.hasAttribute(t2)) {
            return null;
          }
          return new MockAttr(t2, this.getAttribute(t2));
        };
        e2.prototype.getBoundingClientRect = function() {
          return { bottom: 0, height: 0, left: 0, right: 0, top: 0, width: 0, x: 0, y: 0 };
        };
        e2.prototype.getRootNode = function(t2) {
          var e3 = t2 != null && t2.composed === true;
          var n = this;
          while (n.parentNode != null) {
            n = n.parentNode;
            if (e3 === true && n.parentNode == null && n.host != null) {
              n = n.host;
            }
          }
          return n;
        };
        Object.defineProperty(e2.prototype, "draggable", { get: function() {
          return this.getAttributeNS(null, "draggable") === "true";
        }, set: function(t2) {
          this.setAttributeNS(null, "draggable", t2);
        }, enumerable: false, configurable: true });
        e2.prototype.hasChildNodes = function() {
          return this.childNodes.length > 0;
        };
        Object.defineProperty(e2.prototype, "id", { get: function() {
          return this.getAttributeNS(null, "id") || "";
        }, set: function(t2) {
          this.setAttributeNS(null, "id", t2);
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "innerHTML", { get: function() {
          if (this.childNodes.length === 0) {
            return "";
          }
          return serializeNodeToHtml(this, { newLines: false, indentSpaces: 0 });
        }, set: function(t2) {
          var e3;
          if (NON_ESCAPABLE_CONTENT.has((e3 = this.nodeName) != null ? e3 : "") === true) {
            setTextContent(this, t2);
          } else {
            for (var n = this.childNodes.length - 1; n >= 0; n--) {
              this.removeChild(this.childNodes[n]);
            }
            if (typeof t2 === "string") {
              var i = parseFragmentUtil(this.ownerDocument, t2);
              while (i.childNodes.length > 0) {
                this.appendChild(i.childNodes[0]);
              }
            }
          }
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "innerText", { get: function() {
          var t2 = [];
          getTextContent(this.childNodes, t2);
          return t2.join("");
        }, set: function(t2) {
          setTextContent(this, t2);
        }, enumerable: false, configurable: true });
        e2.prototype.insertAdjacentElement = function(t2, e3) {
          if (t2 === "beforebegin") {
            insertBefore(this.parentNode, e3, this);
          } else if (t2 === "afterbegin") {
            this.prepend(e3);
          } else if (t2 === "beforeend") {
            this.appendChild(e3);
          } else if (t2 === "afterend") {
            insertBefore(this.parentNode, e3, this.nextSibling);
          }
          return e3;
        };
        e2.prototype.insertAdjacentHTML = function(t2, e3) {
          var n = parseFragmentUtil(this.ownerDocument, e3);
          if (t2 === "beforebegin") {
            while (n.childNodes.length > 0) {
              insertBefore(this.parentNode, n.childNodes[0], this);
            }
          } else if (t2 === "afterbegin") {
            while (n.childNodes.length > 0) {
              this.prepend(n.childNodes[n.childNodes.length - 1]);
            }
          } else if (t2 === "beforeend") {
            while (n.childNodes.length > 0) {
              this.appendChild(n.childNodes[0]);
            }
          } else if (t2 === "afterend") {
            while (n.childNodes.length > 0) {
              insertBefore(this.parentNode, n.childNodes[n.childNodes.length - 1], this.nextSibling);
            }
          }
        };
        e2.prototype.insertAdjacentText = function(t2, e3) {
          var n = this.ownerDocument.createTextNode(e3);
          if (t2 === "beforebegin") {
            insertBefore(this.parentNode, n, this);
          } else if (t2 === "afterbegin") {
            this.prepend(n);
          } else if (t2 === "beforeend") {
            this.appendChild(n);
          } else if (t2 === "afterend") {
            insertBefore(this.parentNode, n, this.nextSibling);
          }
        };
        e2.prototype.hasAttribute = function(t2) {
          if (t2 === "style") {
            return this.__style != null && this.__style.length > 0;
          }
          return this.getAttribute(t2) !== null;
        };
        e2.prototype.hasAttributeNS = function(t2, e3) {
          return this.getAttributeNS(t2, e3) !== null;
        };
        Object.defineProperty(e2.prototype, "hidden", { get: function() {
          return this.hasAttributeNS(null, "hidden");
        }, set: function(t2) {
          if (t2 === true) {
            this.setAttributeNS(null, "hidden", "");
          } else {
            this.removeAttributeNS(null, "hidden");
          }
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "lang", { get: function() {
          return this.getAttributeNS(null, "lang") || "";
        }, set: function(t2) {
          this.setAttributeNS(null, "lang", t2);
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "lastElementChild", { get: function() {
          var t2 = this.children;
          return t2[t2.length - 1] || null;
        }, enumerable: false, configurable: true });
        e2.prototype.matches = function(t2) {
          return matches(t2, this);
        };
        Object.defineProperty(e2.prototype, "nextElementSibling", { get: function() {
          var t2 = this.parentElement;
          if (t2 != null && (t2.nodeType === 1 || t2.nodeType === 11 || t2.nodeType === 9)) {
            var e3 = t2.children;
            var n = e3.indexOf(this) + 1;
            return t2.children[n] || null;
          }
          return null;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "outerHTML", { get: function() {
          return serializeNodeToHtml(this, { newLines: false, outerHtml: true, indentSpaces: 0 });
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "previousElementSibling", { get: function() {
          var t2 = this.parentElement;
          if (t2 != null && (t2.nodeType === 1 || t2.nodeType === 11 || t2.nodeType === 9)) {
            var e3 = t2.children;
            var n = e3.indexOf(this) - 1;
            return t2.children[n] || null;
          }
          return null;
        }, enumerable: false, configurable: true });
        e2.prototype.getElementsByClassName = function(t2) {
          var e3 = t2.trim().split(" ").filter(function(t3) {
            return t3.length > 0;
          });
          var n = [];
          getElementsByClassName(this, e3, n);
          return n;
        };
        e2.prototype.getElementsByTagName = function(t2) {
          var e3 = [];
          getElementsByTagName(this, t2.toLowerCase(), e3);
          return e3;
        };
        e2.prototype.querySelector = function(t2) {
          return selectOne(t2, this);
        };
        e2.prototype.querySelectorAll = function(t2) {
          return selectAll(t2, this);
        };
        e2.prototype.removeAttribute = function(t2) {
          if (t2 === "style") {
            delete this.__style;
          } else {
            var e3 = this.attributes.getNamedItem(t2);
            if (e3 != null) {
              this.attributes.removeNamedItemNS(e3);
              if (checkAttributeChanged(this) === true) {
                attributeChanged(this, t2, e3.value, null);
              }
            }
          }
        };
        e2.prototype.removeAttributeNS = function(t2, e3) {
          var n = this.attributes.getNamedItemNS(t2, e3);
          if (n != null) {
            this.attributes.removeNamedItemNS(n);
            if (checkAttributeChanged(this) === true) {
              attributeChanged(this, e3, n.value, null);
            }
          }
        };
        e2.prototype.removeEventListener = function(t2, e3) {
          removeEventListener(this, t2, e3);
        };
        e2.prototype.setAttribute = function(t2, e3) {
          if (t2 === "style") {
            this.style = e3;
          } else {
            var n = this.attributes;
            var i = n.getNamedItem(t2);
            var r = checkAttributeChanged(this);
            if (i != null) {
              if (r === true) {
                var s = i.value;
                i.value = e3;
                if (s !== i.value) {
                  attributeChanged(this, i.name, s, i.value);
                }
              } else {
                i.value = e3;
              }
            } else {
              if (n.caseInsensitive) {
                t2 = t2.toLowerCase();
              }
              i = new MockAttr(t2, e3);
              n.__items.push(i);
              if (r === true) {
                attributeChanged(this, t2, null, i.value);
              }
            }
          }
        };
        e2.prototype.setAttributeNS = function(t2, e3, n) {
          var i = this.attributes;
          var r = i.getNamedItemNS(t2, e3);
          var s = checkAttributeChanged(this);
          if (r != null) {
            if (s === true) {
              var a = r.value;
              r.value = n;
              if (a !== r.value) {
                attributeChanged(this, r.name, a, r.value);
              }
            } else {
              r.value = n;
            }
          } else {
            r = new MockAttr(e3, n, t2);
            i.__items.push(r);
            if (s === true) {
              attributeChanged(this, e3, null, r.value);
            }
          }
        };
        Object.defineProperty(e2.prototype, "style", { get: function() {
          if (this.__style == null) {
            this.__style = createCSSStyleDeclaration();
          }
          return this.__style;
        }, set: function(t2) {
          if (typeof t2 === "string") {
            if (this.__style == null) {
              this.__style = createCSSStyleDeclaration();
            }
            this.__style.cssText = t2;
          } else {
            this.__style = t2;
          }
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "tabIndex", { get: function() {
          return parseInt(this.getAttributeNS(null, "tabindex") || "-1", 10);
        }, set: function(t2) {
          this.setAttributeNS(null, "tabindex", t2);
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "tagName", { get: function() {
          var t2;
          return (t2 = this.nodeName) != null ? t2 : "";
        }, set: function(t2) {
          this.nodeName = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "textContent", { get: function() {
          var t2 = [];
          getTextContent(this.childNodes, t2);
          return t2.join("");
        }, set: function(t2) {
          setTextContent(this, t2);
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "title", { get: function() {
          return this.getAttributeNS(null, "title") || "";
        }, set: function(t2) {
          this.setAttributeNS(null, "title", t2);
        }, enumerable: false, configurable: true });
        e2.prototype.animate = function() {
        };
        e2.prototype.onanimationstart = function() {
        };
        e2.prototype.onanimationend = function() {
        };
        e2.prototype.onanimationiteration = function() {
        };
        e2.prototype.onabort = function() {
        };
        e2.prototype.onauxclick = function() {
        };
        e2.prototype.onbeforecopy = function() {
        };
        e2.prototype.onbeforecut = function() {
        };
        e2.prototype.onbeforepaste = function() {
        };
        e2.prototype.onblur = function() {
        };
        e2.prototype.oncancel = function() {
        };
        e2.prototype.oncanplay = function() {
        };
        e2.prototype.oncanplaythrough = function() {
        };
        e2.prototype.onchange = function() {
        };
        e2.prototype.onclick = function() {
        };
        e2.prototype.onclose = function() {
        };
        e2.prototype.oncontextmenu = function() {
        };
        e2.prototype.oncopy = function() {
        };
        e2.prototype.oncuechange = function() {
        };
        e2.prototype.oncut = function() {
        };
        e2.prototype.ondblclick = function() {
        };
        e2.prototype.ondrag = function() {
        };
        e2.prototype.ondragend = function() {
        };
        e2.prototype.ondragenter = function() {
        };
        e2.prototype.ondragleave = function() {
        };
        e2.prototype.ondragover = function() {
        };
        e2.prototype.ondragstart = function() {
        };
        e2.prototype.ondrop = function() {
        };
        e2.prototype.ondurationchange = function() {
        };
        e2.prototype.onemptied = function() {
        };
        e2.prototype.onended = function() {
        };
        e2.prototype.onerror = function() {
        };
        e2.prototype.onfocus = function() {
        };
        e2.prototype.onfocusin = function() {
        };
        e2.prototype.onfocusout = function() {
        };
        e2.prototype.onformdata = function() {
        };
        e2.prototype.onfullscreenchange = function() {
        };
        e2.prototype.onfullscreenerror = function() {
        };
        e2.prototype.ongotpointercapture = function() {
        };
        e2.prototype.oninput = function() {
        };
        e2.prototype.oninvalid = function() {
        };
        e2.prototype.onkeydown = function() {
        };
        e2.prototype.onkeypress = function() {
        };
        e2.prototype.onkeyup = function() {
        };
        e2.prototype.onload = function() {
        };
        e2.prototype.onloadeddata = function() {
        };
        e2.prototype.onloadedmetadata = function() {
        };
        e2.prototype.onloadstart = function() {
        };
        e2.prototype.onlostpointercapture = function() {
        };
        e2.prototype.onmousedown = function() {
        };
        e2.prototype.onmouseenter = function() {
        };
        e2.prototype.onmouseleave = function() {
        };
        e2.prototype.onmousemove = function() {
        };
        e2.prototype.onmouseout = function() {
        };
        e2.prototype.onmouseover = function() {
        };
        e2.prototype.onmouseup = function() {
        };
        e2.prototype.onmousewheel = function() {
        };
        e2.prototype.onpaste = function() {
        };
        e2.prototype.onpause = function() {
        };
        e2.prototype.onplay = function() {
        };
        e2.prototype.onplaying = function() {
        };
        e2.prototype.onpointercancel = function() {
        };
        e2.prototype.onpointerdown = function() {
        };
        e2.prototype.onpointerenter = function() {
        };
        e2.prototype.onpointerleave = function() {
        };
        e2.prototype.onpointermove = function() {
        };
        e2.prototype.onpointerout = function() {
        };
        e2.prototype.onpointerover = function() {
        };
        e2.prototype.onpointerup = function() {
        };
        e2.prototype.onprogress = function() {
        };
        e2.prototype.onratechange = function() {
        };
        e2.prototype.onreset = function() {
        };
        e2.prototype.onresize = function() {
        };
        e2.prototype.onscroll = function() {
        };
        e2.prototype.onsearch = function() {
        };
        e2.prototype.onseeked = function() {
        };
        e2.prototype.onseeking = function() {
        };
        e2.prototype.onselect = function() {
        };
        e2.prototype.onselectstart = function() {
        };
        e2.prototype.onstalled = function() {
        };
        e2.prototype.onsubmit = function() {
        };
        e2.prototype.onsuspend = function() {
        };
        e2.prototype.ontimeupdate = function() {
        };
        e2.prototype.ontoggle = function() {
        };
        e2.prototype.onvolumechange = function() {
        };
        e2.prototype.onwaiting = function() {
        };
        e2.prototype.onwebkitfullscreenchange = function() {
        };
        e2.prototype.onwebkitfullscreenerror = function() {
        };
        e2.prototype.onwheel = function() {
        };
        e2.prototype.requestFullscreen = function() {
        };
        e2.prototype.scrollBy = function() {
        };
        e2.prototype.scrollTo = function() {
        };
        e2.prototype.scrollIntoView = function() {
        };
        e2.prototype.toString = function(t2) {
          return serializeNodeToHtml(this, t2);
        };
        return e2;
      }(MockNode2);
      MockHTMLElement = function(t) {
        __extends(e2, t);
        function e2(e3, n) {
          var i = t.call(this, e3, typeof n === "string" ? n.toUpperCase() : null) || this;
          i.__namespaceURI = "http://www.w3.org/1999/xhtml";
          return i;
        }
        Object.defineProperty(e2.prototype, "tagName", { get: function() {
          var t2;
          return (t2 = this.nodeName) != null ? t2 : "";
        }, set: function(t2) {
          this.nodeName = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "parentElement", { get: function() {
          if (this.nodeName === "HTML") {
            return null;
          }
          return t.prototype.parentElement;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "attributes", { get: function() {
          if (this.__attributeMap == null) {
            var t2 = createAttributeProxy(true);
            this.__attributeMap = t2;
            return t2;
          }
          return this.__attributeMap;
        }, set: function(t2) {
          this.__attributeMap = t2;
        }, enumerable: false, configurable: true });
        return e2;
      }(MockElement);
      MockTextNode = function(t) {
        __extends(e2, t);
        function e2(e3, n) {
          return t.call(this, e3, 3, "#text", n) || this;
        }
        e2.prototype.cloneNode = function(t2) {
          return new e2(null, this.nodeValue);
        };
        Object.defineProperty(e2.prototype, "textContent", { get: function() {
          return this.nodeValue;
        }, set: function(t2) {
          this.nodeValue = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "data", { get: function() {
          return this.nodeValue;
        }, set: function(t2) {
          this.nodeValue = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "wholeText", { get: function() {
          if (this.parentNode != null) {
            var t2 = [];
            for (var e3 = 0, n = this.parentNode.childNodes.length; e3 < n; e3++) {
              var i = this.parentNode.childNodes[e3];
              if (i.nodeType === 3) {
                t2.push(i.nodeValue);
              }
            }
            return t2.join("");
          }
          return this.nodeValue;
        }, enumerable: false, configurable: true });
        return e2;
      }(MockNode2);
      MockComment = function(t) {
        __extends(e2, t);
        function e2(e3, n) {
          return t.call(this, e3, 8, "#comment", n) || this;
        }
        e2.prototype.cloneNode = function(t2) {
          return new e2(null, this.nodeValue);
        };
        Object.defineProperty(e2.prototype, "textContent", { get: function() {
          return this.nodeValue;
        }, set: function(t2) {
          this.nodeValue = t2;
        }, enumerable: false, configurable: true });
        return e2;
      }(MockNode2);
      MockDocumentFragment = function(t) {
        __extends(e2, t);
        function e2(e3) {
          var n = t.call(this, e3, null) || this;
          n.nodeName = "#document-fragment";
          n.nodeType = 11;
          return n;
        }
        e2.prototype.getElementById = function(t2) {
          return getElementById(this, t2);
        };
        e2.prototype.cloneNode = function(t2) {
          var n = new e2(null);
          if (t2) {
            for (var i = 0, r = this.childNodes.length; i < r; i++) {
              var s = this.childNodes[i];
              if (s.nodeType === 1 || s.nodeType === 3 || s.nodeType === 8) {
                var a = this.childNodes[i].cloneNode(true);
                n.appendChild(a);
              }
            }
          }
          return n;
        };
        return e2;
      }(MockHTMLElement);
      MockDocumentTypeNode = function(t) {
        __extends(e2, t);
        function e2(e3) {
          var n = t.call(this, e3, "!DOCTYPE") || this;
          n.nodeType = 10;
          n.setAttribute("html", "");
          return n;
        }
        return e2;
      }(MockHTMLElement);
      MockCSSRule = /* @__PURE__ */ function() {
        function t(t2) {
          this.parentStyleSheet = t2;
          this.cssText = "";
          this.type = 0;
        }
        return t;
      }();
      MockCSSStyleSheet = function() {
        function t(t2) {
          this.type = "text/css";
          this.parentStyleSheet = null;
          this.cssRules = [];
          this.ownerNode = t2;
        }
        Object.defineProperty(t.prototype, "rules", { get: function() {
          return this.cssRules;
        }, set: function(t2) {
          this.cssRules = t2;
        }, enumerable: false, configurable: true });
        t.prototype.deleteRule = function(t2) {
          if (t2 >= 0 && t2 < this.cssRules.length) {
            this.cssRules.splice(t2, 1);
            updateStyleTextNode(this.ownerNode);
          }
        };
        t.prototype.insertRule = function(t2, e2) {
          if (e2 === void 0) {
            e2 = 0;
          }
          if (typeof e2 !== "number") {
            e2 = 0;
          }
          if (e2 < 0) {
            e2 = 0;
          }
          if (e2 > this.cssRules.length) {
            e2 = this.cssRules.length;
          }
          var n = new MockCSSRule(this);
          n.cssText = t2;
          this.cssRules.splice(e2, 0, n);
          updateStyleTextNode(this.ownerNode);
          return e2;
        };
        return t;
      }();
      MockAnchorElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          return t.call(this, e3, "a") || this;
        }
        Object.defineProperty(e2.prototype, "href", { get: function() {
          return fullUrl(this, "href");
        }, set: function(t2) {
          this.setAttribute("href", t2);
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "pathname", { get: function() {
          return new URL(this.href).pathname;
        }, enumerable: false, configurable: true });
        return e2;
      }(MockHTMLElement);
      MockButtonElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          return t.call(this, e3, "button") || this;
        }
        return e2;
      }(MockHTMLElement);
      patchPropAttributes(MockButtonElement.prototype, { type: String }, { type: "submit" });
      MockImageElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          return t.call(this, e3, "img") || this;
        }
        Object.defineProperty(e2.prototype, "draggable", { get: function() {
          return this.getAttributeNS(null, "draggable") !== "false";
        }, set: function(t2) {
          this.setAttributeNS(null, "draggable", t2);
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "src", { get: function() {
          return fullUrl(this, "src");
        }, set: function(t2) {
          this.setAttribute("src", t2);
        }, enumerable: false, configurable: true });
        return e2;
      }(MockHTMLElement);
      patchPropAttributes(MockImageElement.prototype, { height: Number, width: Number });
      MockInputElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          return t.call(this, e3, "input") || this;
        }
        Object.defineProperty(e2.prototype, "list", { get: function() {
          var t2 = this.getAttribute("list");
          if (t2) {
            return this.ownerDocument.getElementById(t2);
          }
          return null;
        }, enumerable: false, configurable: true });
        return e2;
      }(MockHTMLElement);
      patchPropAttributes(MockInputElement.prototype, { accept: String, autocomplete: String, autofocus: Boolean, capture: String, checked: Boolean, disabled: Boolean, form: String, formaction: String, formenctype: String, formmethod: String, formnovalidate: String, formtarget: String, height: Number, inputmode: String, max: String, maxLength: Number, min: String, minLength: Number, multiple: Boolean, name: String, pattern: String, placeholder: String, required: Boolean, readOnly: Boolean, size: Number, spellCheck: Boolean, src: String, step: String, type: String, value: String, width: Number }, { type: "text" });
      MockFormElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          return t.call(this, e3, "form") || this;
        }
        return e2;
      }(MockHTMLElement);
      patchPropAttributes(MockFormElement.prototype, { name: String });
      MockLinkElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          return t.call(this, e3, "link") || this;
        }
        Object.defineProperty(e2.prototype, "href", { get: function() {
          return fullUrl(this, "href");
        }, set: function(t2) {
          this.setAttribute("href", t2);
        }, enumerable: false, configurable: true });
        return e2;
      }(MockHTMLElement);
      patchPropAttributes(MockLinkElement.prototype, { crossorigin: String, media: String, rel: String, type: String });
      MockMetaElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          return t.call(this, e3, "meta") || this;
        }
        return e2;
      }(MockHTMLElement);
      patchPropAttributes(MockMetaElement.prototype, { charset: String, content: String, name: String });
      MockScriptElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          return t.call(this, e3, "script") || this;
        }
        Object.defineProperty(e2.prototype, "src", { get: function() {
          return fullUrl(this, "src");
        }, set: function(t2) {
          this.setAttribute("src", t2);
        }, enumerable: false, configurable: true });
        return e2;
      }(MockHTMLElement);
      patchPropAttributes(MockScriptElement.prototype, { type: String });
      MockDOMMatrix = function() {
        function t() {
          this.a = 1;
          this.b = 0;
          this.c = 0;
          this.d = 1;
          this.e = 0;
          this.f = 0;
          this.m11 = 1;
          this.m12 = 0;
          this.m13 = 0;
          this.m14 = 0;
          this.m21 = 0;
          this.m22 = 1;
          this.m23 = 0;
          this.m24 = 0;
          this.m31 = 0;
          this.m32 = 0;
          this.m33 = 1;
          this.m34 = 0;
          this.m41 = 0;
          this.m42 = 0;
          this.m43 = 0;
          this.m44 = 1;
          this.is2D = true;
          this.isIdentity = true;
        }
        t.fromMatrix = function() {
          return new t();
        };
        t.prototype.inverse = function() {
          return new t();
        };
        t.prototype.flipX = function() {
          return new t();
        };
        t.prototype.flipY = function() {
          return new t();
        };
        t.prototype.multiply = function() {
          return new t();
        };
        t.prototype.rotate = function() {
          return new t();
        };
        t.prototype.rotateAxisAngle = function() {
          return new t();
        };
        t.prototype.rotateFromVector = function() {
          return new t();
        };
        t.prototype.scale = function() {
          return new t();
        };
        t.prototype.scaleNonUniform = function() {
          return new t();
        };
        t.prototype.skewX = function() {
          return new t();
        };
        t.prototype.skewY = function() {
          return new t();
        };
        t.prototype.toJSON = function() {
        };
        t.prototype.toString = function() {
        };
        t.prototype.transformPoint = function() {
          return new MockDOMPoint();
        };
        t.prototype.translate = function() {
          return new t();
        };
        return t;
      }();
      MockDOMPoint = function() {
        function t() {
          this.w = 1;
          this.x = 0;
          this.y = 0;
          this.z = 0;
        }
        t.prototype.toJSON = function() {
        };
        t.prototype.matrixTransform = function() {
          return new MockDOMMatrix();
        };
        return t;
      }();
      MockSVGRect = /* @__PURE__ */ function() {
        function t() {
          this.height = 10;
          this.width = 10;
          this.x = 0;
          this.y = 0;
        }
        return t;
      }();
      MockStyleElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          var n = t.call(this, e3, "style") || this;
          n.sheet = new MockCSSStyleSheet(n);
          return n;
        }
        Object.defineProperty(e2.prototype, "innerHTML", { get: function() {
          return getStyleElementText(this);
        }, set: function(t2) {
          setStyleElementText(this, t2);
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "innerText", { get: function() {
          return getStyleElementText(this);
        }, set: function(t2) {
          setStyleElementText(this, t2);
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "textContent", { get: function() {
          return getStyleElementText(this);
        }, set: function(t2) {
          setStyleElementText(this, t2);
        }, enumerable: false, configurable: true });
        return e2;
      }(MockHTMLElement);
      MockSVGElement = function(t) {
        __extends(e2, t);
        function e2() {
          var e3 = t.apply(this, arguments) || this;
          e3.__namespaceURI = "http://www.w3.org/2000/svg";
          return e3;
        }
        Object.defineProperty(e2.prototype, "ownerSVGElement", { get: function() {
          return null;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "viewportElement", { get: function() {
          return null;
        }, enumerable: false, configurable: true });
        e2.prototype.onunload = function() {
        };
        Object.defineProperty(e2.prototype, "pathLength", { get: function() {
          return 0;
        }, enumerable: false, configurable: true });
        e2.prototype.isPointInFill = function(t2) {
          return false;
        };
        e2.prototype.isPointInStroke = function(t2) {
          return false;
        };
        e2.prototype.getTotalLength = function() {
          return 0;
        };
        return e2;
      }(MockElement);
      MockSVGGraphicsElement = function(t) {
        __extends(e2, t);
        function e2() {
          return t !== null && t.apply(this, arguments) || this;
        }
        e2.prototype.getBBox = function(t2) {
          return new MockSVGRect();
        };
        e2.prototype.getCTM = function() {
          return new MockDOMMatrix();
        };
        e2.prototype.getScreenCTM = function() {
          return new MockDOMMatrix();
        };
        return e2;
      }(MockSVGElement);
      MockSVGSVGElement = function(t) {
        __extends(e2, t);
        function e2() {
          return t !== null && t.apply(this, arguments) || this;
        }
        e2.prototype.createSVGPoint = function() {
          return new MockDOMPoint();
        };
        return e2;
      }(MockSVGGraphicsElement);
      MockSVGTextContentElement = function(t) {
        __extends(e2, t);
        function e2() {
          return t !== null && t.apply(this, arguments) || this;
        }
        e2.prototype.getComputedTextLength = function() {
          return 0;
        };
        return e2;
      }(MockSVGGraphicsElement);
      MockBaseElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          return t.call(this, e3, "base") || this;
        }
        Object.defineProperty(e2.prototype, "href", { get: function() {
          return fullUrl(this, "href");
        }, set: function(t2) {
          this.setAttribute("href", t2);
        }, enumerable: false, configurable: true });
        return e2;
      }(MockHTMLElement);
      MockTemplateElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          var n = t.call(this, e3, "template") || this;
          n.content = new MockDocumentFragment(e3);
          return n;
        }
        Object.defineProperty(e2.prototype, "innerHTML", { get: function() {
          return this.content.innerHTML;
        }, set: function(t2) {
          this.content.innerHTML = t2;
        }, enumerable: false, configurable: true });
        e2.prototype.cloneNode = function(t2) {
          var n = new e2(null);
          n.attributes = cloneAttributes(this.attributes);
          var i = this.getAttribute("style");
          if (i != null && i.length > 0) {
            n.setAttribute("style", i);
          }
          n.content = this.content.cloneNode(t2);
          if (t2) {
            for (var r = 0, s = this.childNodes.length; r < s; r++) {
              var a = this.childNodes[r].cloneNode(true);
              n.appendChild(a);
            }
          }
          return n;
        };
        return e2;
      }(MockHTMLElement);
      MockTitleElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          return t.call(this, e3, "title") || this;
        }
        Object.defineProperty(e2.prototype, "text", { get: function() {
          return this.textContent;
        }, set: function(t2) {
          this.textContent = t2;
        }, enumerable: false, configurable: true });
        return e2;
      }(MockHTMLElement);
      MockUListElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          return t.call(this, e3, "ul") || this;
        }
        return e2;
      }(MockHTMLElement);
      MockCanvasElement = function(t) {
        __extends(e2, t);
        function e2(e3) {
          return t.call(this, e3, "canvas") || this;
        }
        e2.prototype.getContext = function() {
          return { fillRect: function() {
            return;
          }, clearRect: function() {
          }, getImageData: function(t2, e3, n, i) {
            return { data: new Array(n * i * 4) };
          }, putImageData: function() {
          }, createImageData: function() {
            return [];
          }, setTransform: function() {
          }, drawImage: function() {
          }, save: function() {
          }, fillText: function() {
          }, restore: function() {
          }, beginPath: function() {
          }, moveTo: function() {
          }, lineTo: function() {
          }, closePath: function() {
          }, stroke: function() {
          }, translate: function() {
          }, scale: function() {
          }, rotate: function() {
          }, arc: function() {
          }, fill: function() {
          }, measureText: function() {
            return { width: 0 };
          }, transform: function() {
          }, rect: function() {
          }, clip: function() {
          } };
        };
        return e2;
      }(MockHTMLElement);
      MockElement.prototype.cloneNode = function(t) {
        var e2 = createElement(this.ownerDocument, this.nodeName);
        e2.attributes = cloneAttributes(this.attributes);
        var n = this.getAttribute("style");
        if (n != null && n.length > 0) {
          e2.setAttribute("style", n);
        }
        if (t) {
          for (var i = 0, r = this.childNodes.length; i < r; i++) {
            var s = this.childNodes[i].cloneNode(true);
            e2.appendChild(s);
          }
        }
        return e2;
      };
      consoleNoop = function() {
      };
      MockHeaders = function() {
        function t(t2) {
          this._values = [];
          if (typeof t2 === "object") {
            if (typeof t2[Symbol.iterator] === "function") {
              var e2 = [];
              for (var n = 0, i = t2; n < i.length; n++) {
                var r = i[n];
                if (typeof r[Symbol.iterator] === "function") {
                  e2.push(__spreadArray([], r, true));
                }
              }
              for (var s = 0, a = e2; s < a.length; s++) {
                var r = a[s];
                this.append(r[0], r[1]);
              }
            } else {
              for (var u2 in t2) {
                this.append(u2, t2[u2]);
              }
            }
          }
        }
        t.prototype.append = function(t2, e2) {
          this._values.push([t2, e2 + ""]);
        };
        t.prototype.delete = function(t2) {
          t2 = t2.toLowerCase();
          for (var e2 = this._values.length - 1; e2 >= 0; e2--) {
            if (this._values[e2][0].toLowerCase() === t2) {
              this._values.splice(e2, 1);
            }
          }
        };
        t.prototype.entries = function() {
          var t2;
          var e2 = [];
          for (var n = 0, i = this.keys(); n < i.length; n++) {
            var r = i[n];
            e2.push([r, this.get(r)]);
          }
          var s = -1;
          return t2 = { next: function() {
            s++;
            return { value: e2[s], done: !e2[s] };
          } }, t2[Symbol.iterator] = function() {
            return this;
          }, t2;
        };
        t.prototype.forEach = function(t2) {
          for (var e2 = 0, n = this.entries(); e2 < n.length; e2++) {
            var i = n[e2];
            t2(i[1], i[0]);
          }
        };
        t.prototype.get = function(t2) {
          var e2 = [];
          t2 = t2.toLowerCase();
          for (var n = 0, i = this._values; n < i.length; n++) {
            var r = i[n];
            if (r[0].toLowerCase() === t2) {
              e2.push(r[1]);
            }
          }
          return e2.length > 0 ? e2.join(", ") : null;
        };
        t.prototype.has = function(t2) {
          t2 = t2.toLowerCase();
          for (var e2 = 0, n = this._values; e2 < n.length; e2++) {
            var i = n[e2];
            if (i[0].toLowerCase() === t2) {
              return true;
            }
          }
          return false;
        };
        t.prototype.keys = function() {
          var t2;
          var e2 = [];
          for (var n = 0, i = this._values; n < i.length; n++) {
            var r = i[n];
            var s = r[0].toLowerCase();
            if (!e2.includes(s)) {
              e2.push(s);
            }
          }
          var a = -1;
          return t2 = { next: function() {
            a++;
            return { value: e2[a], done: !e2[a] };
          } }, t2[Symbol.iterator] = function() {
            return this;
          }, t2;
        };
        t.prototype.set = function(t2, e2) {
          for (var n = 0, i = this._values; n < i.length; n++) {
            var r = i[n];
            if (r[0].toLowerCase() === t2.toLowerCase()) {
              r[1] = e2 + "";
              return;
            }
          }
          this.append(t2, e2);
        };
        t.prototype.values = function() {
          var t2;
          var e2 = this._values;
          var n = -1;
          return t2 = { next: function() {
            n++;
            var t3 = !e2[n];
            return { value: t3 ? void 0 : e2[n][1], done: t3 };
          } }, t2[Symbol.iterator] = function() {
            return this;
          }, t2;
        };
        t.prototype[Symbol.iterator] = function() {
          return this.entries();
        };
        return t;
      }();
      MockDOMParser = function() {
        function t() {
        }
        t.prototype.parseFromString = function(t2, e2) {
          if (e2 !== "text/html") {
            console.error("XML parsing not implemented yet, continuing as html");
          }
          return parseHtmlToDocument(t2);
        };
        return t;
      }();
      MockRequest = function() {
        function t(t2, e2) {
          if (e2 === void 0) {
            e2 = {};
          }
          this._method = "GET";
          this._url = "/";
          this.bodyUsed = false;
          this.cache = "default";
          this.credentials = "same-origin";
          this.integrity = "";
          this.keepalive = false;
          this.mode = "cors";
          this.redirect = "follow";
          this.referrer = "about:client";
          this.referrerPolicy = "";
          if (typeof t2 === "string") {
            this.url = t2;
          } else if (t2) {
            Object.assign(this, t2);
            this.headers = new MockHeaders(t2.headers);
          }
          Object.assign(this, e2);
          if (e2.headers) {
            this.headers = new MockHeaders(e2.headers);
          }
          if (!this.headers) {
            this.headers = new MockHeaders();
          }
        }
        Object.defineProperty(t.prototype, "url", { get: function() {
          if (typeof this._url === "string") {
            return new URL(this._url, location.href).href;
          }
          return new URL("/", location.href).href;
        }, set: function(t2) {
          this._url = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "method", { get: function() {
          if (typeof this._method === "string") {
            return this._method.toUpperCase();
          }
          return "GET";
        }, set: function(t2) {
          this._method = t2;
        }, enumerable: false, configurable: true });
        t.prototype.clone = function() {
          var e2 = __assign({}, this);
          e2.headers = new MockHeaders(this.headers);
          return new t(e2);
        };
        return t;
      }();
      MockResponse = function() {
        function t(t2, e2) {
          if (e2 === void 0) {
            e2 = {};
          }
          this.ok = true;
          this.status = 200;
          this.statusText = "";
          this.type = "default";
          this.url = "";
          this._body = t2;
          if (e2) {
            Object.assign(this, e2);
          }
          this.headers = new MockHeaders(e2.headers);
        }
        t.prototype.json = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t2) {
              return [2, JSON.parse(this._body)];
            });
          });
        };
        t.prototype.text = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t2) {
              return [2, this._body];
            });
          });
        };
        t.prototype.clone = function() {
          var e2 = __assign({}, this);
          e2.headers = new MockHeaders(this.headers);
          return new t(this._body, e2);
        };
        return t;
      }();
      GLOBAL_CONSTRUCTORS = [["CustomEvent", MockCustomEvent], ["Event", MockEvent], ["Headers", MockHeaders], ["FocusEvent", MockFocusEvent], ["KeyboardEvent", MockKeyboardEvent], ["MouseEvent", MockMouseEvent], ["Request", MockRequest], ["Response", MockResponse], ["DOMParser", MockDOMParser], ["HTMLAnchorElement", MockAnchorElement], ["HTMLBaseElement", MockBaseElement], ["HTMLButtonElement", MockButtonElement], ["HTMLCanvasElement", MockCanvasElement], ["HTMLFormElement", MockFormElement], ["HTMLImageElement", MockImageElement], ["HTMLInputElement", MockInputElement], ["HTMLLinkElement", MockLinkElement], ["HTMLMetaElement", MockMetaElement], ["HTMLScriptElement", MockScriptElement], ["HTMLStyleElement", MockStyleElement], ["HTMLTemplateElement", MockTemplateElement], ["HTMLTitleElement", MockTitleElement], ["HTMLUListElement", MockUListElement]];
      MockHistory = function() {
        function t() {
          this.items = [];
        }
        Object.defineProperty(t.prototype, "length", { get: function() {
          return this.items.length;
        }, enumerable: false, configurable: true });
        t.prototype.back = function() {
          this.go(-1);
        };
        t.prototype.forward = function() {
          this.go(1);
        };
        t.prototype.go = function(t2) {
        };
        t.prototype.pushState = function(t2, e2, n) {
        };
        t.prototype.replaceState = function(t2, e2, n) {
        };
        return t;
      }();
      MockIntersectionObserver = function() {
        function t() {
        }
        t.prototype.disconnect = function() {
        };
        t.prototype.observe = function() {
        };
        t.prototype.takeRecords = function() {
          return [];
        };
        t.prototype.unobserve = function() {
        };
        return t;
      }();
      MockLocation = function() {
        function t() {
          this.ancestorOrigins = null;
          this.protocol = "";
          this.host = "";
          this.hostname = "";
          this.port = "";
          this.pathname = "";
          this.search = "";
          this.hash = "";
          this.username = "";
          this.password = "";
          this.origin = "";
          this._href = "";
        }
        Object.defineProperty(t.prototype, "href", { get: function() {
          return this._href;
        }, set: function(t2) {
          var e2 = new URL(t2, "http://mockdoc.stenciljs.com");
          this._href = e2.href;
          this.protocol = e2.protocol;
          this.host = e2.host;
          this.hostname = e2.hostname;
          this.port = e2.port;
          this.pathname = e2.pathname;
          this.search = e2.search;
          this.hash = e2.hash;
          this.username = e2.username;
          this.password = e2.password;
          this.origin = e2.origin;
        }, enumerable: false, configurable: true });
        t.prototype.assign = function(t2) {
        };
        t.prototype.reload = function(t2) {
        };
        t.prototype.replace = function(t2) {
        };
        t.prototype.toString = function() {
          return this.href;
        };
        return t;
      }();
      MockNavigator = /* @__PURE__ */ function() {
        function t() {
          this.appCodeName = "MockNavigator";
          this.appName = "MockNavigator";
          this.appVersion = "MockNavigator";
          this.platform = "MockNavigator";
          this.userAgent = "MockNavigator";
        }
        return t;
      }();
      MockPerformance = function() {
        function t() {
          this.timeOrigin = Date.now();
          this.eventCounts = /* @__PURE__ */ new Map();
        }
        t.prototype.addEventListener = function() {
        };
        t.prototype.clearMarks = function() {
        };
        t.prototype.clearMeasures = function() {
        };
        t.prototype.clearResourceTimings = function() {
        };
        t.prototype.dispatchEvent = function() {
          return true;
        };
        t.prototype.getEntries = function() {
          return [];
        };
        t.prototype.getEntriesByName = function() {
          return [];
        };
        t.prototype.getEntriesByType = function() {
          return [];
        };
        t.prototype.mark = function() {
        };
        t.prototype.measure = function() {
        };
        Object.defineProperty(t.prototype, "navigation", { get: function() {
          return {};
        }, enumerable: false, configurable: true });
        t.prototype.now = function() {
          return Date.now() - this.timeOrigin;
        };
        Object.defineProperty(t.prototype, "onresourcetimingbufferfull", { get: function() {
          return null;
        }, enumerable: false, configurable: true });
        t.prototype.removeEventListener = function() {
        };
        t.prototype.setResourceTimingBufferSize = function() {
        };
        Object.defineProperty(t.prototype, "timing", { get: function() {
          return {};
        }, enumerable: false, configurable: true });
        t.prototype.toJSON = function() {
        };
        return t;
      }();
      MockStorage = function() {
        function t() {
          this.items = /* @__PURE__ */ new Map();
        }
        t.prototype.key = function(t2) {
        };
        t.prototype.getItem = function(t2) {
          t2 = String(t2);
          if (this.items.has(t2)) {
            return this.items.get(t2);
          }
          return null;
        };
        t.prototype.setItem = function(t2, e2) {
          if (e2 == null) {
            e2 = "null";
          }
          this.items.set(String(t2), String(e2));
        };
        t.prototype.removeItem = function(t2) {
          this.items.delete(String(t2));
        };
        t.prototype.clear = function() {
          this.items.clear();
        };
        return t;
      }();
      nativeClearInterval = clearInterval;
      nativeClearTimeout = clearTimeout;
      nativeSetInterval = setInterval;
      nativeSetTimeout = setTimeout;
      nativeURL = URL;
      MockWindow = function() {
        function t(t2) {
          if (t2 === void 0) {
            t2 = null;
          }
          if (t2 !== false) {
            this.document = new MockDocument(t2, this);
          } else {
            this.document = null;
          }
          this.performance = new MockPerformance();
          this.customElements = new MockCustomElementRegistry(this);
          this.console = createConsole();
          resetWindowDefaults(this);
          resetWindowDimensions(this);
        }
        t.prototype.addEventListener = function(t2, e2) {
          addEventListener(this, t2, e2);
        };
        t.prototype.alert = function(t2) {
          if (this.console) {
            this.console.debug(t2);
          } else {
            console.debug(t2);
          }
        };
        t.prototype.blur = function() {
        };
        t.prototype.cancelAnimationFrame = function(t2) {
          this.__clearTimeout(t2);
        };
        t.prototype.cancelIdleCallback = function(t2) {
          this.__clearTimeout(t2);
        };
        Object.defineProperty(t.prototype, "CharacterData", { get: function() {
          if (this.__charDataCstr == null) {
            var t2 = this.document;
            this.__charDataCstr = function(e2) {
              __extends(n, e2);
              function n() {
                var n2 = e2.call(this, t2, 0, "test", "") || this;
                throw new Error("Illegal constructor: cannot construct CharacterData");
                return n2;
              }
              return n;
            }(MockNode2);
          }
          return this.__charDataCstr;
        }, set: function(t2) {
          this.__charDataCstr = t2;
        }, enumerable: false, configurable: true });
        t.prototype.clearInterval = function(t2) {
          this.__clearInterval(t2);
        };
        t.prototype.clearTimeout = function(t2) {
          this.__clearTimeout(t2);
        };
        t.prototype.close = function() {
          resetWindow(this);
        };
        t.prototype.confirm = function() {
          return false;
        };
        Object.defineProperty(t.prototype, "CSS", { get: function() {
          return { supports: function() {
            return true;
          } };
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "Document", { get: function() {
          if (this.__docCstr == null) {
            var t2 = this;
            this.__docCstr = function(e2) {
              __extends(n, e2);
              function n() {
                var n2 = e2.call(this, false, t2) || this;
                throw new Error("Illegal constructor: cannot construct Document");
                return n2;
              }
              return n;
            }(MockDocument);
          }
          return this.__docCstr;
        }, set: function(t2) {
          this.__docCstr = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "DocumentFragment", { get: function() {
          if (this.__docFragCstr == null) {
            var t2 = this.document;
            this.__docFragCstr = function(e2) {
              __extends(n, e2);
              function n() {
                var n2 = e2.call(this, t2) || this;
                throw new Error("Illegal constructor: cannot construct DocumentFragment");
                return n2;
              }
              return n;
            }(MockDocumentFragment);
          }
          return this.__docFragCstr;
        }, set: function(t2) {
          this.__docFragCstr = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "DocumentType", { get: function() {
          if (this.__docTypeCstr == null) {
            var t2 = this.document;
            this.__docTypeCstr = function(e2) {
              __extends(n, e2);
              function n() {
                var n2 = e2.call(this, t2, 0, "test", "") || this;
                throw new Error("Illegal constructor: cannot construct DocumentType");
                return n2;
              }
              return n;
            }(MockNode2);
          }
          return this.__docTypeCstr;
        }, set: function(t2) {
          this.__docTypeCstr = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "DOMTokenList", { get: function() {
          if (this.__domTokenListCstr == null) {
            this.__domTokenListCstr = /* @__PURE__ */ function() {
              function t2() {
              }
              return t2;
            }();
          }
          return this.__domTokenListCstr;
        }, set: function(t2) {
          this.__domTokenListCstr = t2;
        }, enumerable: false, configurable: true });
        t.prototype.dispatchEvent = function(t2) {
          return dispatchEvent(this, t2);
        };
        Object.defineProperty(t.prototype, "Element", { get: function() {
          if (this.__elementCstr == null) {
            var t2 = this.document;
            this.__elementCstr = function(e2) {
              __extends(n, e2);
              function n() {
                var n2 = e2.call(this, t2, "") || this;
                throw new Error("Illegal constructor: cannot construct Element");
                return n2;
              }
              return n;
            }(MockElement);
          }
          return this.__elementCstr;
        }, enumerable: false, configurable: true });
        t.prototype.fetch = function(t2, e2) {
          if (typeof fetch === "function") {
            return fetch(t2, e2);
          }
          throw new Error("fetch() not implemented");
        };
        t.prototype.focus = function() {
        };
        t.prototype.getComputedStyle = function(t2) {
          return { cssText: "", length: 0, parentRule: null, getPropertyPriority: function() {
            return null;
          }, getPropertyValue: function() {
            return "";
          }, item: function() {
            return null;
          }, removeProperty: function() {
            return null;
          }, setProperty: function() {
            return null;
          } };
        };
        Object.defineProperty(t.prototype, "globalThis", { get: function() {
          return this;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "history", { get: function() {
          if (this.__history == null) {
            this.__history = new MockHistory();
          }
          return this.__history;
        }, set: function(t2) {
          this.__history = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "JSON", { get: function() {
          return JSON;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "HTMLElement", { get: function() {
          if (this.__htmlElementCstr == null) {
            var t2 = this.document;
            this.__htmlElementCstr = function(e2) {
              __extends(n, e2);
              function n() {
                var n2 = e2.call(this, t2, "") || this;
                var i = n2.constructor.observedAttributes;
                if (Array.isArray(i) && typeof n2.attributeChangedCallback === "function") {
                  i.forEach(function(t3) {
                    var e3 = n2.getAttribute(t3);
                    if (e3 != null) {
                      n2.attributeChangedCallback(t3, null, e3);
                    }
                  });
                }
                return n2;
              }
              return n;
            }(MockHTMLElement);
          }
          return this.__htmlElementCstr;
        }, set: function(t2) {
          this.__htmlElementCstr = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "IntersectionObserver", { get: function() {
          return MockIntersectionObserver;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "localStorage", { get: function() {
          if (this.__localStorage == null) {
            this.__localStorage = new MockStorage();
          }
          return this.__localStorage;
        }, set: function(t2) {
          this.__localStorage = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "location", { get: function() {
          if (this.__location == null) {
            this.__location = new MockLocation();
          }
          return this.__location;
        }, set: function(t2) {
          if (typeof t2 === "string") {
            if (this.__location == null) {
              this.__location = new MockLocation();
            }
            this.__location.href = t2;
          } else {
            this.__location = t2;
          }
        }, enumerable: false, configurable: true });
        t.prototype.matchMedia = function(t2) {
          return { media: t2, matches: false, addListener: function(t3) {
          }, removeListener: function(t3) {
          }, addEventListener: function(t3, e2) {
          }, removeEventListener: function(t3, e2) {
          }, dispatchEvent: function(t3) {
          }, onchange: null };
        };
        Object.defineProperty(t.prototype, "Node", { get: function() {
          if (this.__nodeCstr == null) {
            var t2 = this.document;
            this.__nodeCstr = function(e2) {
              __extends(n, e2);
              function n() {
                var n2 = e2.call(this, t2, 0, "test", "") || this;
                throw new Error("Illegal constructor: cannot construct Node");
                return n2;
              }
              return n;
            }(MockNode2);
          }
          return this.__nodeCstr;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "NodeList", { get: function() {
          if (this.__nodeListCstr == null) {
            var t2 = this.document;
            this.__nodeListCstr = function(e2) {
              __extends(n, e2);
              function n() {
                var n2 = e2.call(this, t2, [], 0) || this;
                throw new Error("Illegal constructor: cannot construct NodeList");
                return n2;
              }
              return n;
            }(MockNodeList);
          }
          return this.__nodeListCstr;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "navigator", { get: function() {
          if (this.__navigator == null) {
            this.__navigator = new MockNavigator();
          }
          return this.__navigator;
        }, set: function(t2) {
          this.__navigator = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "parent", { get: function() {
          return null;
        }, enumerable: false, configurable: true });
        t.prototype.prompt = function() {
          return "";
        };
        t.prototype.open = function() {
          return null;
        };
        Object.defineProperty(t.prototype, "origin", { get: function() {
          return this.location.origin;
        }, enumerable: false, configurable: true });
        t.prototype.removeEventListener = function(t2, e2) {
          removeEventListener(this, t2, e2);
        };
        t.prototype.requestAnimationFrame = function(t2) {
          return this.setTimeout(function() {
            t2(Date.now());
          }, 0);
        };
        t.prototype.requestIdleCallback = function(t2) {
          return this.setTimeout(function() {
            t2({ didTimeout: false, timeRemaining: function() {
              return 0;
            } });
          }, 0);
        };
        t.prototype.scroll = function(t2, e2) {
        };
        t.prototype.scrollBy = function(t2, e2) {
        };
        t.prototype.scrollTo = function(t2, e2) {
        };
        Object.defineProperty(t.prototype, "self", { get: function() {
          return this;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "sessionStorage", { get: function() {
          if (this.__sessionStorage == null) {
            this.__sessionStorage = new MockStorage();
          }
          return this.__sessionStorage;
        }, set: function(t2) {
          this.__sessionStorage = t2;
        }, enumerable: false, configurable: true });
        t.prototype.setInterval = function(t2, e2) {
          var n = this;
          var i = [];
          for (var r = 2; r < arguments.length; r++) {
            i[r - 2] = arguments[r];
          }
          if (this.__timeouts == null) {
            this.__timeouts = /* @__PURE__ */ new Set();
          }
          e2 = Math.min(e2, this.__maxTimeout);
          if (this.__allowInterval) {
            var s = this.__setInterval(function() {
              if (n.__timeouts) {
                n.__timeouts.delete(s);
                try {
                  t2.apply(void 0, i);
                } catch (t3) {
                  if (n.console) {
                    n.console.error(t3);
                  } else {
                    console.error(t3);
                  }
                }
              }
            }, e2);
            if (this.__timeouts) {
              this.__timeouts.add(s);
            }
            return s;
          }
          var a = this.__setTimeout(function() {
            if (n.__timeouts) {
              n.__timeouts.delete(a);
              try {
                t2.apply(void 0, i);
              } catch (t3) {
                if (n.console) {
                  n.console.error(t3);
                } else {
                  console.error(t3);
                }
              }
            }
          }, e2);
          if (this.__timeouts) {
            this.__timeouts.add(a);
          }
          return a;
        };
        t.prototype.setTimeout = function(t2, e2) {
          var n = this;
          var i = [];
          for (var r = 2; r < arguments.length; r++) {
            i[r - 2] = arguments[r];
          }
          if (this.__timeouts == null) {
            this.__timeouts = /* @__PURE__ */ new Set();
          }
          e2 = Math.min(e2, this.__maxTimeout);
          var s = this.__setTimeout(function() {
            if (n.__timeouts) {
              n.__timeouts.delete(s);
              try {
                t2.apply(void 0, i);
              } catch (t3) {
                if (n.console) {
                  n.console.error(t3);
                } else {
                  console.error(t3);
                }
              }
            }
          }, e2);
          if (this.__timeouts) {
            this.__timeouts.add(s);
          }
          return s;
        };
        Object.defineProperty(t.prototype, "top", { get: function() {
          return this;
        }, enumerable: false, configurable: true });
        Object.defineProperty(t.prototype, "window", { get: function() {
          return this;
        }, enumerable: false, configurable: true });
        t.prototype.onanimationstart = function() {
        };
        t.prototype.onanimationend = function() {
        };
        t.prototype.onanimationiteration = function() {
        };
        t.prototype.onabort = function() {
        };
        t.prototype.onauxclick = function() {
        };
        t.prototype.onbeforecopy = function() {
        };
        t.prototype.onbeforecut = function() {
        };
        t.prototype.onbeforepaste = function() {
        };
        t.prototype.onblur = function() {
        };
        t.prototype.oncancel = function() {
        };
        t.prototype.oncanplay = function() {
        };
        t.prototype.oncanplaythrough = function() {
        };
        t.prototype.onchange = function() {
        };
        t.prototype.onclick = function() {
        };
        t.prototype.onclose = function() {
        };
        t.prototype.oncontextmenu = function() {
        };
        t.prototype.oncopy = function() {
        };
        t.prototype.oncuechange = function() {
        };
        t.prototype.oncut = function() {
        };
        t.prototype.ondblclick = function() {
        };
        t.prototype.ondrag = function() {
        };
        t.prototype.ondragend = function() {
        };
        t.prototype.ondragenter = function() {
        };
        t.prototype.ondragleave = function() {
        };
        t.prototype.ondragover = function() {
        };
        t.prototype.ondragstart = function() {
        };
        t.prototype.ondrop = function() {
        };
        t.prototype.ondurationchange = function() {
        };
        t.prototype.onemptied = function() {
        };
        t.prototype.onended = function() {
        };
        t.prototype.onerror = function() {
        };
        t.prototype.onfocus = function() {
        };
        t.prototype.onfocusin = function() {
        };
        t.prototype.onfocusout = function() {
        };
        t.prototype.onformdata = function() {
        };
        t.prototype.onfullscreenchange = function() {
        };
        t.prototype.onfullscreenerror = function() {
        };
        t.prototype.ongotpointercapture = function() {
        };
        t.prototype.oninput = function() {
        };
        t.prototype.oninvalid = function() {
        };
        t.prototype.onkeydown = function() {
        };
        t.prototype.onkeypress = function() {
        };
        t.prototype.onkeyup = function() {
        };
        t.prototype.onload = function() {
        };
        t.prototype.onloadeddata = function() {
        };
        t.prototype.onloadedmetadata = function() {
        };
        t.prototype.onloadstart = function() {
        };
        t.prototype.onlostpointercapture = function() {
        };
        t.prototype.onmousedown = function() {
        };
        t.prototype.onmouseenter = function() {
        };
        t.prototype.onmouseleave = function() {
        };
        t.prototype.onmousemove = function() {
        };
        t.prototype.onmouseout = function() {
        };
        t.prototype.onmouseover = function() {
        };
        t.prototype.onmouseup = function() {
        };
        t.prototype.onmousewheel = function() {
        };
        t.prototype.onpaste = function() {
        };
        t.prototype.onpause = function() {
        };
        t.prototype.onplay = function() {
        };
        t.prototype.onplaying = function() {
        };
        t.prototype.onpointercancel = function() {
        };
        t.prototype.onpointerdown = function() {
        };
        t.prototype.onpointerenter = function() {
        };
        t.prototype.onpointerleave = function() {
        };
        t.prototype.onpointermove = function() {
        };
        t.prototype.onpointerout = function() {
        };
        t.prototype.onpointerover = function() {
        };
        t.prototype.onpointerup = function() {
        };
        t.prototype.onprogress = function() {
        };
        t.prototype.onratechange = function() {
        };
        t.prototype.onreset = function() {
        };
        t.prototype.onresize = function() {
        };
        t.prototype.onscroll = function() {
        };
        t.prototype.onsearch = function() {
        };
        t.prototype.onseeked = function() {
        };
        t.prototype.onseeking = function() {
        };
        t.prototype.onselect = function() {
        };
        t.prototype.onselectstart = function() {
        };
        t.prototype.onstalled = function() {
        };
        t.prototype.onsubmit = function() {
        };
        t.prototype.onsuspend = function() {
        };
        t.prototype.ontimeupdate = function() {
        };
        t.prototype.ontoggle = function() {
        };
        t.prototype.onvolumechange = function() {
        };
        t.prototype.onwaiting = function() {
        };
        t.prototype.onwebkitfullscreenchange = function() {
        };
        t.prototype.onwebkitfullscreenerror = function() {
        };
        t.prototype.onwheel = function() {
        };
        return t;
      }();
      addGlobalsToWindowPrototype(MockWindow.prototype);
      MockDocument = function(t) {
        __extends(e2, t);
        function e2(e3, n) {
          if (e3 === void 0) {
            e3 = null;
          }
          if (n === void 0) {
            n = null;
          }
          var i = t.call(this, null, null) || this;
          i.nodeName = "#document";
          i.nodeType = 9;
          i.defaultView = n;
          i.cookie = "";
          i.referrer = "";
          i.appendChild(i.createDocumentTypeNode());
          if (typeof e3 === "string") {
            var r = parseDocumentUtil(i, e3);
            var s = r.children.find(function(t2) {
              return t2.nodeName === "HTML";
            });
            if (s != null) {
              i.appendChild(s);
              setOwnerDocument(s, i);
            }
          } else if (e3 !== false) {
            var s = new MockHTMLElement(i, "html");
            i.appendChild(s);
            s.appendChild(new MockHTMLElement(i, "head"));
            s.appendChild(new MockHTMLElement(i, "body"));
          }
          return i;
        }
        Object.defineProperty(e2.prototype, "dir", { get: function() {
          return this.documentElement.dir;
        }, set: function(t2) {
          this.documentElement.dir = t2;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "localName", { get: function() {
          throw new Error("Unimplemented");
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "location", { get: function() {
          if (this.defaultView != null) {
            return this.defaultView.location;
          }
          return null;
        }, set: function(t2) {
          if (this.defaultView != null) {
            this.defaultView.location = t2;
          }
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "baseURI", { get: function() {
          var t2 = this.head.childNodes.find(function(t3) {
            return t3.nodeName === "BASE";
          });
          if (t2) {
            return t2.href;
          }
          return this.URL;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "URL", { get: function() {
          return this.location.href;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "styleSheets", { get: function() {
          return this.querySelectorAll("style");
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "scripts", { get: function() {
          return this.querySelectorAll("script");
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "forms", { get: function() {
          return this.querySelectorAll("form");
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "images", { get: function() {
          return this.querySelectorAll("img");
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "scrollingElement", { get: function() {
          return this.documentElement;
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "documentElement", { get: function() {
          for (var t2 = this.childNodes.length - 1; t2 >= 0; t2--) {
            if (this.childNodes[t2].nodeName === "HTML") {
              return this.childNodes[t2];
            }
          }
          var e3 = new MockHTMLElement(this, "html");
          this.appendChild(e3);
          return e3;
        }, set: function(t2) {
          for (var e3 = this.childNodes.length - 1; e3 >= 0; e3--) {
            if (this.childNodes[e3].nodeType !== 10) {
              this.childNodes[e3].remove();
            }
          }
          if (t2 != null) {
            this.appendChild(t2);
            setOwnerDocument(t2, this);
          }
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "head", { get: function() {
          var t2 = this.documentElement;
          for (var e3 = 0; e3 < t2.childNodes.length; e3++) {
            if (t2.childNodes[e3].nodeName === "HEAD") {
              return t2.childNodes[e3];
            }
          }
          var n = new MockHTMLElement(this, "head");
          t2.insertBefore(n, t2.firstChild);
          return n;
        }, set: function(t2) {
          var e3 = this.documentElement;
          for (var n = e3.childNodes.length - 1; n >= 0; n--) {
            if (e3.childNodes[n].nodeName === "HEAD") {
              e3.childNodes[n].remove();
            }
          }
          if (t2 != null) {
            e3.insertBefore(t2, e3.firstChild);
            setOwnerDocument(t2, this);
          }
        }, enumerable: false, configurable: true });
        Object.defineProperty(e2.prototype, "body", { get: function() {
          var t2 = this.documentElement;
          for (var e3 = t2.childNodes.length - 1; e3 >= 0; e3--) {
            if (t2.childNodes[e3].nodeName === "BODY") {
              return t2.childNodes[e3];
            }
          }
          var n = new MockHTMLElement(this, "body");
          t2.appendChild(n);
          return n;
        }, set: function(t2) {
          var e3 = this.documentElement;
          for (var n = e3.childNodes.length - 1; n >= 0; n--) {
            if (e3.childNodes[n].nodeName === "BODY") {
              e3.childNodes[n].remove();
            }
          }
          if (t2 != null) {
            e3.appendChild(t2);
            setOwnerDocument(t2, this);
          }
        }, enumerable: false, configurable: true });
        e2.prototype.appendChild = function(t2) {
          t2.remove();
          t2.parentNode = this;
          this.childNodes.push(t2);
          return t2;
        };
        e2.prototype.createComment = function(t2) {
          return new MockComment(this, t2);
        };
        e2.prototype.createAttribute = function(t2) {
          return new MockAttr(t2.toLowerCase(), "");
        };
        e2.prototype.createAttributeNS = function(t2, e3) {
          return new MockAttr(e3, "", t2);
        };
        e2.prototype.createElement = function(t2) {
          if (t2 === "#document") {
            var n = new e2(false);
            n.nodeName = t2;
            n.parentNode = null;
            return n;
          }
          return createElement(this, t2);
        };
        e2.prototype.createElementNS = function(t2, e3) {
          var n = createElementNS(this, t2, e3);
          return n;
        };
        e2.prototype.createTextNode = function(t2) {
          return new MockTextNode(this, t2);
        };
        e2.prototype.createDocumentFragment = function() {
          return new MockDocumentFragment(this);
        };
        e2.prototype.createDocumentTypeNode = function() {
          return new MockDocumentTypeNode(this);
        };
        e2.prototype.getElementById = function(t2) {
          return getElementById(this, t2);
        };
        e2.prototype.getElementsByName = function(t2) {
          return getElementsByName(this, t2.toLowerCase());
        };
        Object.defineProperty(e2.prototype, "title", { get: function() {
          var t2 = this.head.childNodes.find(function(t3) {
            return t3.nodeName === "TITLE";
          });
          if (t2 != null && typeof t2.textContent === "string") {
            return t2.textContent.trim();
          }
          return "";
        }, set: function(t2) {
          var e3 = this.head;
          var n = e3.childNodes.find(function(t3) {
            return t3.nodeName === "TITLE";
          });
          if (n == null) {
            n = this.createElement("title");
            e3.appendChild(n);
          }
          n.textContent = t2;
        }, enumerable: false, configurable: true });
        return e2;
      }(MockHTMLElement);
      DOC_KEY_KEEPERS = /* @__PURE__ */ new Set(["nodeName", "nodeType", "nodeValue", "ownerDocument", "parentNode", "childNodes", "_shadowRoot"]);
      __defProp2 = Object.defineProperty;
      __export2 = function(t, e2) {
        for (var n in e2)
          __defProp2(t, n, { get: e2[n], enumerable: true });
      };
      EMPTY_OBJ2 = {};
      SVG_NS = "http://www.w3.org/2000/svg";
      HTML_NS = "http://www.w3.org/1999/xhtml";
      isDef = function(t) {
        return t != null;
      };
      isComplexType = function(t) {
        t = typeof t;
        return t === "object" || t === "function";
      };
      result_exports = {};
      __export2(result_exports, { err: function() {
        return err;
      }, map: function() {
        return map2;
      }, ok: function() {
        return ok;
      }, unwrap: function() {
        return unwrap;
      }, unwrapErr: function() {
        return unwrapErr;
      } });
      ok = function(t) {
        return { isOk: true, isErr: false, value: t };
      };
      err = function(t) {
        return { isOk: false, isErr: true, value: t };
      };
      unwrap = function(t) {
        if (t.isOk) {
          return t.value;
        } else {
          throw t.value;
        }
      };
      unwrapErr = function(t) {
        if (t.isErr) {
          return t.value;
        } else {
          throw t.value;
        }
      };
      createTime = function(t, e2) {
        if (e2 === void 0) {
          e2 = "";
        }
        {
          return function() {
            return;
          };
        }
      };
      uniqueTime = function(t, e2) {
        {
          return function() {
            return;
          };
        }
      };
      CONTENT_REF_ID = "r";
      ORG_LOCATION_ID = "o";
      SLOT_NODE_ID = "s";
      TEXT_NODE_ID = "t";
      HYDRATE_ID = "s-id";
      HYDRATED_STYLE_ID = "sty-id";
      HYDRATE_CHILD_ID = "c-id";
      HYDRATED_CSS = "{visibility:hidden}.hydrated{visibility:inherit}";
      SLOT_FB_CSS = "slot-fb{display:contents}slot-fb[hidden]{display:none}";
      XLINK_NS = "http://www.w3.org/1999/xlink";
      h = function(t, e2) {
        var n = [];
        for (var i = 2; i < arguments.length; i++) {
          n[i - 2] = arguments[i];
        }
        var r = null;
        var s = null;
        var a = null;
        var u2 = false;
        var o = false;
        var c = [];
        var f = function(e3) {
          for (var n2 = 0; n2 < e3.length; n2++) {
            r = e3[n2];
            if (Array.isArray(r)) {
              f(r);
            } else if (r != null && typeof r !== "boolean") {
              if (u2 = typeof t !== "function" && !isComplexType(r)) {
                r = String(r);
              }
              if (u2 && o) {
                c[c.length - 1].i += r;
              } else {
                c.push(u2 ? newVNode(null, r) : r);
              }
              o = u2;
            }
          }
        };
        f(n);
        if (e2) {
          if (e2.key) {
            s = e2.key;
          }
          if (e2.name) {
            a = e2.name;
          }
          {
            var l = e2.className || e2.class;
            if (l) {
              e2.class = typeof l !== "object" ? l : Object.keys(l).filter(function(t2) {
                return l[t2];
              }).join(" ");
            }
          }
        }
        if (typeof t === "function") {
          return t(e2 === null ? {} : e2, c, vdomFnUtils);
        }
        var h2 = newVNode(t, null);
        h2.u = e2;
        if (c.length > 0) {
          h2.o = c;
        }
        {
          h2.l = s;
        }
        {
          h2.h = a;
        }
        return h2;
      };
      newVNode = function(t, e2) {
        var n = { v: 0, m: t, i: e2, p: null, o: null };
        {
          n.u = null;
        }
        {
          n.l = null;
        }
        {
          n.h = null;
        }
        return n;
      };
      Host2 = {};
      isHost = function(t) {
        return t && t.m === Host2;
      };
      vdomFnUtils = { forEach: function(t, e2) {
        return t.map(convertToPublic).forEach(e2);
      }, map: function(t, e2) {
        return t.map(convertToPublic).map(e2).map(convertToPrivate);
      } };
      convertToPublic = function(t) {
        return { vattrs: t.u, vchildren: t.o, vkey: t.l, vname: t.h, vtag: t.m, vtext: t.i };
      };
      convertToPrivate = function(t) {
        if (typeof t.vtag === "function") {
          var e2 = __assign({}, t.vattrs);
          if (t.vkey) {
            e2.key = t.vkey;
          }
          if (t.vname) {
            e2.name = t.vname;
          }
          return h.apply(void 0, __spreadArray([t.vtag, e2], t.vchildren || [], false));
        }
        var n = newVNode(t.vtag, t.vtext);
        n.u = t.vattrs;
        n.o = t.vchildren;
        n.l = t.vkey;
        n.h = t.vname;
        return n;
      };
      initializeClientHydrate = function(t, e2, n, i) {
        var r = createTime("hydrateClient", e2);
        var s = t.shadowRoot;
        var a = [];
        var u2 = [];
        var o = s ? [] : null;
        var c = i.k = newVNode(e2, null);
        if (!plt.T) {
          initializeDocumentHydrate(doc2.body, plt.T = /* @__PURE__ */ new Map());
        }
        t[HYDRATE_ID] = n;
        t.removeAttribute(HYDRATE_ID);
        clientHydrate(c, a, u2, o, t, t, n);
        a.map(function(t2) {
          var n2 = t2._ + "." + t2.N;
          var i2 = plt.T.get(n2);
          var r2 = t2.p;
          if (i2 && supportsShadow && i2["s-en"] === "") {
            i2.parentNode.insertBefore(r2, i2.nextSibling);
          }
          if (!s) {
            r2["s-hn"] = e2;
            if (i2) {
              r2["s-ol"] = i2;
              r2["s-ol"]["s-nr"] = r2;
            }
          }
          plt.T.delete(n2);
        });
        if (s) {
          o.map(function(t2) {
            if (t2) {
              s.appendChild(t2);
            }
          });
        }
        r();
      };
      clientHydrate = function(t, e2, n, i, r, s, a) {
        var u2;
        var o;
        var c;
        var f;
        if (s.nodeType === 1) {
          u2 = s.getAttribute(HYDRATE_CHILD_ID);
          if (u2) {
            o = u2.split(".");
            if (o[0] === a || o[0] === "0") {
              c = { v: 0, _: o[0], N: o[1], M: o[2], C: o[3], m: s.tagName.toLowerCase(), p: s, u: null, o: null, l: null, h: null, i: null };
              e2.push(c);
              s.removeAttribute(HYDRATE_CHILD_ID);
              if (!t.o) {
                t.o = [];
              }
              t.o[c.C] = c;
              t = c;
              if (i && c.M === "0") {
                i[c.C] = c.p;
              }
            }
          }
          for (f = s.childNodes.length - 1; f >= 0; f--) {
            clientHydrate(t, e2, n, i, r, s.childNodes[f], a);
          }
          if (s.shadowRoot) {
            for (f = s.shadowRoot.childNodes.length - 1; f >= 0; f--) {
              clientHydrate(t, e2, n, i, r, s.shadowRoot.childNodes[f], a);
            }
          }
        } else if (s.nodeType === 8) {
          o = s.nodeValue.split(".");
          if (o[1] === a || o[1] === "0") {
            u2 = o[0];
            c = { v: 0, _: o[1], N: o[2], M: o[3], C: o[4], p: s, u: null, o: null, l: null, h: null, m: null, i: null };
            if (u2 === TEXT_NODE_ID) {
              c.p = s.nextSibling;
              if (c.p && c.p.nodeType === 3) {
                c.i = c.p.textContent;
                e2.push(c);
                s.remove();
                if (!t.o) {
                  t.o = [];
                }
                t.o[c.C] = c;
                if (i && c.M === "0") {
                  i[c.C] = c.p;
                }
              }
            } else if (c._ === a) {
              if (u2 === SLOT_NODE_ID) {
                c.m = "slot";
                if (o[5]) {
                  s["s-sn"] = c.h = o[5];
                } else {
                  s["s-sn"] = "";
                }
                s["s-sr"] = true;
                if (i) {
                  c.p = doc2.createElement(c.m);
                  if (c.h) {
                    c.p.setAttribute("name", c.h);
                  }
                  s.parentNode.insertBefore(c.p, s);
                  s.remove();
                  if (c.M === "0") {
                    i[c.C] = c.p;
                  }
                }
                n.push(c);
                if (!t.o) {
                  t.o = [];
                }
                t.o[c.C] = c;
              } else if (u2 === CONTENT_REF_ID) {
                if (i) {
                  s.remove();
                } else {
                  r["s-cr"] = s;
                  s["s-cn"] = true;
                }
              }
            }
          }
        } else if (t && t.m === "style") {
          var l = newVNode(null, s.textContent);
          l.p = s;
          l.C = "0";
          t.o = [l];
        }
      };
      initializeDocumentHydrate = function(t, e2) {
        if (t.nodeType === 1) {
          var n = 0;
          for (; n < t.childNodes.length; n++) {
            initializeDocumentHydrate(t.childNodes[n], e2);
          }
          if (t.shadowRoot) {
            for (n = 0; n < t.shadowRoot.childNodes.length; n++) {
              initializeDocumentHydrate(t.shadowRoot.childNodes[n], e2);
            }
          }
        } else if (t.nodeType === 8) {
          var i = t.nodeValue.split(".");
          if (i[0] === ORG_LOCATION_ID) {
            e2.set(i[1] + "." + i[2], t);
            t.nodeValue = "";
            t["s-en"] = i[3];
          }
        }
      };
      computeMode = function(t) {
        return modeResolutionChain.map(function(e2) {
          return e2(t);
        }).find(function(t2) {
          return !!t2;
        });
      };
      setMode = function(t) {
        return modeResolutionChain.push(t);
      };
      getMode = function(t) {
        return getHostRef(t).O;
      };
      parsePropertyValue = function(t, e2) {
        if (t != null && !isComplexType(t)) {
          if (e2 & 4) {
            return t === "false" ? false : t === "" || !!t;
          }
          if (e2 & 2) {
            return parseFloat(t);
          }
          if (e2 & 1) {
            return String(t);
          }
          return t;
        }
        return t;
      };
      emitEvent = function(t, e2, n) {
        var i = plt.ce(e2, n);
        t.dispatchEvent(i);
        return i;
      };
      rootAppliedStyles = /* @__PURE__ */ new WeakMap();
      registerStyle = function(t, e2, n) {
        var i = styles.get(t);
        if (supportsConstructableStylesheets && n) {
          i = i || new CSSStyleSheet();
          if (typeof i === "string") {
            i = e2;
          } else {
            i.replaceSync(e2);
          }
        } else {
          i = e2;
        }
        styles.set(t, i);
      };
      addStyle = function(t, e2, n) {
        var i;
        var r = getScopeId(e2, n);
        var s = styles.get(r);
        t = t.nodeType === 11 ? t : doc2;
        if (s) {
          if (typeof s === "string") {
            t = t.head || t;
            var a = rootAppliedStyles.get(t);
            var u2 = void 0;
            if (!a) {
              rootAppliedStyles.set(t, a = /* @__PURE__ */ new Set());
            }
            if (!a.has(r)) {
              if (t.host && (u2 = t.querySelector("[".concat(HYDRATED_STYLE_ID, '="').concat(r, '"]')))) {
                u2.innerHTML = s;
              } else {
                u2 = doc2.createElement("style");
                u2.innerHTML = s;
                var o = (i = plt.D) != null ? i : queryNonceMetaTagContent(doc2);
                if (o != null) {
                  u2.setAttribute("nonce", o);
                }
                t.insertBefore(u2, t.querySelector("link"));
              }
              if (e2.v & 4) {
                u2.innerHTML += SLOT_FB_CSS;
              }
              if (a) {
                a.add(r);
              }
            }
          } else if (!t.adoptedStyleSheets.includes(s)) {
            t.adoptedStyleSheets = __spreadArray(__spreadArray([], t.adoptedStyleSheets, true), [s], false);
          }
        }
        return r;
      };
      attachStyles = function(t) {
        var e2 = t.R;
        var n = t.$hostElement$;
        var i = e2.v;
        var r = createTime("attachStyles", e2.L);
        var s = addStyle(n.shadowRoot ? n.shadowRoot : n.getRootNode(), e2, t.O);
        if (i & 10) {
          n["s-sc"] = s;
          n.classList.add(s + "-h");
          if (i & 2) {
            n.classList.add(s + "-s");
          }
        }
        r();
      };
      getScopeId = function(t, e2) {
        return "sc-" + (e2 && t.v & 32 ? t.L + "-" + e2 : t.L);
      };
      convertScopedToShadow = function(t) {
        return t.replace(/\/\*!@([^\/]+)\*\/[^\{]+\{/g, "$1{");
      };
      setAccessor = function(t, e2, n, i, r, s) {
        if (n !== i) {
          var a = isMemberInElement(t, e2);
          var u2 = e2.toLowerCase();
          if (e2 === "class") {
            var o = t.classList;
            var c = parseClassList(n);
            var f = parseClassList(i);
            o.remove.apply(o, c.filter(function(t2) {
              return t2 && !f.includes(t2);
            }));
            o.add.apply(o, f.filter(function(t2) {
              return t2 && !c.includes(t2);
            }));
          } else if (e2 === "style") {
            {
              for (var l in n) {
                if (!i || i[l] == null) {
                  if (l.includes("-")) {
                    t.style.removeProperty(l);
                  } else {
                    t.style[l] = "";
                  }
                }
              }
            }
            for (var l in i) {
              if (!n || i[l] !== n[l]) {
                if (l.includes("-")) {
                  t.style.setProperty(l, i[l]);
                } else {
                  t.style[l] = i[l];
                }
              }
            }
          } else if (e2 === "key")
            ;
          else if (e2 === "ref") {
            if (i) {
              i(t);
            }
          } else if (!a && e2[0] === "o" && e2[1] === "n") {
            if (e2[2] === "-") {
              e2 = e2.slice(3);
            } else if (isMemberInElement(win2, u2)) {
              e2 = u2.slice(2);
            } else {
              e2 = u2[2] + e2.slice(3);
            }
            if (n || i) {
              var h2 = e2.endsWith(CAPTURE_EVENT_SUFFIX);
              e2 = e2.replace(CAPTURE_EVENT_REGEX, "");
              if (n) {
                plt.rel(t, e2, n, h2);
              }
              if (i) {
                plt.ael(t, e2, i, h2);
              }
            }
          } else {
            var d = isComplexType(i);
            if ((a || d && i !== null) && !r) {
              try {
                if (!t.tagName.includes("-")) {
                  var v = i == null ? "" : i;
                  if (e2 === "list") {
                    a = false;
                  } else if (n == null || t[e2] != v) {
                    t[e2] = v;
                  }
                } else {
                  t[e2] = i;
                }
              } catch (t2) {
              }
            }
            var b = false;
            {
              if (u2 !== (u2 = u2.replace(/^xlink\:?/, ""))) {
                e2 = u2;
                b = true;
              }
            }
            if (i == null || i === false) {
              if (i !== false || t.getAttribute(e2) === "") {
                if (b) {
                  t.removeAttributeNS(XLINK_NS, e2);
                } else {
                  t.removeAttribute(e2);
                }
              }
            } else if ((!a || s & 4 || r) && !d) {
              i = i === true ? "" : i;
              if (b) {
                t.setAttributeNS(XLINK_NS, e2, i);
              } else {
                t.setAttribute(e2, i);
              }
            }
          }
        }
      };
      parseClassListRegex = /\s/;
      parseClassList = function(t) {
        return !t ? [] : t.split(parseClassListRegex);
      };
      CAPTURE_EVENT_SUFFIX = "Capture";
      CAPTURE_EVENT_REGEX = new RegExp(CAPTURE_EVENT_SUFFIX + "$");
      updateElement = function(t, e2, n, i) {
        var r = e2.p.nodeType === 11 && e2.p.host ? e2.p.host : e2.p;
        var s = t && t.u || EMPTY_OBJ2;
        var a = e2.u || EMPTY_OBJ2;
        {
          for (var u2 = 0, o = sortedAttrNames(Object.keys(s)); u2 < o.length; u2++) {
            i = o[u2];
            if (!(i in a)) {
              setAccessor(r, i, s[i], void 0, n, e2.v);
            }
          }
        }
        for (var c = 0, f = sortedAttrNames(Object.keys(a)); c < f.length; c++) {
          i = f[c];
          setAccessor(r, i, s[i], a[i], n, e2.v);
        }
      };
      useNativeShadowDom = false;
      checkSlotFallbackVisibility = false;
      checkSlotRelocate = false;
      isSvgMode = false;
      createElm = function(t, e2, n, i) {
        var r;
        var s = e2.o[n];
        var a = 0;
        var u2;
        var o;
        var c;
        if (!useNativeShadowDom) {
          checkSlotRelocate = true;
          if (s.m === "slot") {
            if (scopeId) {
              i.classList.add(scopeId + "-s");
            }
            s.v |= s.o ? 2 : 1;
          }
        }
        if (s.i !== null) {
          u2 = s.p = doc2.createTextNode(s.i);
        } else if (s.v & 1) {
          u2 = s.p = doc2.createTextNode("");
        } else {
          if (!isSvgMode) {
            isSvgMode = s.m === "svg";
          }
          u2 = s.p = doc2.createElementNS(isSvgMode ? SVG_NS : HTML_NS, s.v & 2 ? "slot-fb" : s.m);
          if (isSvgMode && s.m === "foreignObject") {
            isSvgMode = false;
          }
          {
            updateElement(null, s, isSvgMode);
          }
          if (isDef(scopeId) && u2["s-si"] !== scopeId) {
            u2.classList.add(u2["s-si"] = scopeId);
          }
          if (s.o) {
            for (a = 0; a < s.o.length; ++a) {
              o = createElm(t, s, a, u2);
              if (o) {
                u2.appendChild(o);
              }
            }
          }
          {
            if (s.m === "svg") {
              isSvgMode = false;
            } else if (u2.tagName === "foreignObject") {
              isSvgMode = true;
            }
          }
        }
        u2["s-hn"] = hostTagName;
        {
          if (s.v & (2 | 1)) {
            u2["s-sr"] = true;
            u2["s-cr"] = contentRef;
            u2["s-sn"] = s.h || "";
            u2["s-rf"] = (r = s.u) == null ? void 0 : r.ref;
            c = t && t.o && t.o[n];
            if (c && c.m === s.m && t.p) {
              {
                relocateToHostRoot(t.p);
              }
            }
          }
        }
        return u2;
      };
      relocateToHostRoot = function(t) {
        plt.v |= 1;
        var e2 = t.closest(hostTagName.toLowerCase());
        if (e2 != null) {
          var n = Array.from(e2.childNodes).find(function(t2) {
            return t2["s-cr"];
          });
          var i = Array.from(t.childNodes);
          for (var r = 0, s = n ? i.reverse() : i; r < s.length; r++) {
            var a = s[r];
            if (a["s-sh"] != null) {
              e2.insertBefore(a, n != null ? n : null);
              a["s-sh"] = void 0;
              checkSlotRelocate = true;
            }
          }
        }
        plt.v &= ~1;
      };
      putBackInOriginalLocation = function(t, e2) {
        plt.v |= 1;
        var n = Array.from(t.childNodes);
        if (t["s-sr"] && BUILD.experimentalSlotFixes) {
          var i = t;
          while (i = i.nextSibling) {
            if (i && i["s-sn"] === t["s-sn"] && i["s-sh"] === hostTagName) {
              n.push(i);
            }
          }
        }
        for (var r = n.length - 1; r >= 0; r--) {
          var s = n[r];
          if (s["s-hn"] !== hostTagName && s["s-ol"]) {
            parentReferenceNode(s).insertBefore(s, referenceNode(s));
            s["s-ol"].remove();
            s["s-ol"] = void 0;
            s["s-sh"] = void 0;
            checkSlotRelocate = true;
          }
          if (e2) {
            putBackInOriginalLocation(s, e2);
          }
        }
        plt.v &= ~1;
      };
      addVnodes = function(t, e2, n, i, r, s) {
        var a = t["s-cr"] && t["s-cr"].parentNode || t;
        var u2;
        if (a.shadowRoot && a.tagName === hostTagName) {
          a = a.shadowRoot;
        }
        for (; r <= s; ++r) {
          if (i[r]) {
            u2 = createElm(null, n, r, t);
            if (u2) {
              i[r].p = u2;
              a.insertBefore(u2, referenceNode(e2));
            }
          }
        }
      };
      removeVnodes = function(t, e2, n) {
        for (var i = e2; i <= n; ++i) {
          var r = t[i];
          if (r) {
            var s = r.p;
            nullifyVNodeRefs(r);
            if (s) {
              {
                checkSlotFallbackVisibility = true;
                if (s["s-ol"]) {
                  s["s-ol"].remove();
                } else {
                  putBackInOriginalLocation(s, true);
                }
              }
              s.remove();
            }
          }
        }
      };
      updateChildren = function(t, e2, n, i, r) {
        if (r === void 0) {
          r = false;
        }
        var s = 0;
        var a = 0;
        var u2 = 0;
        var o = 0;
        var c = e2.length - 1;
        var f = e2[0];
        var l = e2[c];
        var h2 = i.length - 1;
        var d = i[0];
        var v = i[h2];
        var b;
        var m;
        while (s <= c && a <= h2) {
          if (f == null) {
            f = e2[++s];
          } else if (l == null) {
            l = e2[--c];
          } else if (d == null) {
            d = i[++a];
          } else if (v == null) {
            v = i[--h2];
          } else if (isSameVnode(f, d, r)) {
            patch(f, d, r);
            f = e2[++s];
            d = i[++a];
          } else if (isSameVnode(l, v, r)) {
            patch(l, v, r);
            l = e2[--c];
            v = i[--h2];
          } else if (isSameVnode(f, v, r)) {
            if (f.m === "slot" || v.m === "slot") {
              putBackInOriginalLocation(f.p.parentNode, false);
            }
            patch(f, v, r);
            t.insertBefore(f.p, l.p.nextSibling);
            f = e2[++s];
            v = i[--h2];
          } else if (isSameVnode(l, d, r)) {
            if (f.m === "slot" || v.m === "slot") {
              putBackInOriginalLocation(l.p.parentNode, false);
            }
            patch(l, d, r);
            t.insertBefore(l.p, f.p);
            l = e2[--c];
            d = i[++a];
          } else {
            u2 = -1;
            {
              for (o = s; o <= c; ++o) {
                if (e2[o] && e2[o].l !== null && e2[o].l === d.l) {
                  u2 = o;
                  break;
                }
              }
            }
            if (u2 >= 0) {
              m = e2[u2];
              if (m.m !== d.m) {
                b = createElm(e2 && e2[a], n, u2, t);
              } else {
                patch(m, d, r);
                e2[u2] = void 0;
                b = m.p;
              }
              d = i[++a];
            } else {
              b = createElm(e2 && e2[a], n, a, t);
              d = i[++a];
            }
            if (b) {
              {
                parentReferenceNode(f.p).insertBefore(b, referenceNode(f.p));
              }
            }
          }
        }
        if (s > c) {
          addVnodes(t, i[h2 + 1] == null ? null : i[h2 + 1].p, n, i, a, h2);
        } else if (a > h2) {
          removeVnodes(e2, s, c);
        }
      };
      isSameVnode = function(t, e2, n) {
        if (n === void 0) {
          n = false;
        }
        if (t.m === e2.m) {
          if (t.m === "slot") {
            return t.h === e2.h;
          }
          if (!n) {
            return t.l === e2.l;
          }
          return true;
        }
        return false;
      };
      referenceNode = function(t) {
        return t && t["s-ol"] || t;
      };
      parentReferenceNode = function(t) {
        return (t["s-ol"] ? t["s-ol"] : t).parentNode;
      };
      patch = function(t, e2, n) {
        if (n === void 0) {
          n = false;
        }
        var i = e2.p = t.p;
        var r = t.o;
        var s = e2.o;
        var a = e2.m;
        var u2 = e2.i;
        var o;
        if (u2 === null) {
          {
            isSvgMode = a === "svg" ? true : a === "foreignObject" ? false : isSvgMode;
          }
          {
            if (a === "slot" && !useNativeShadowDom) {
              if (t.h !== e2.h) {
                e2.p["s-sn"] = e2.h || "";
                relocateToHostRoot(e2.p.parentElement);
              }
            } else {
              updateElement(t, e2, isSvgMode);
            }
          }
          if (r !== null && s !== null) {
            updateChildren(i, r, e2, s, n);
          } else if (s !== null) {
            if (t.i !== null) {
              i.textContent = "";
            }
            addVnodes(i, null, e2, s, 0, s.length - 1);
          } else if (r !== null) {
            removeVnodes(r, 0, r.length - 1);
          }
          if (isSvgMode && a === "svg") {
            isSvgMode = false;
          }
        } else if (o = i["s-cr"]) {
          o.parentNode.textContent = u2;
        } else if (t.i !== u2) {
          i.data = u2;
        }
      };
      updateFallbackSlotVisibility = function(t) {
        var e2 = t.childNodes;
        for (var n = 0, i = e2; n < i.length; n++) {
          var r = i[n];
          if (r.nodeType === 1) {
            if (r["s-sr"]) {
              var s = r["s-sn"];
              r.hidden = false;
              for (var a = 0, u2 = e2; a < u2.length; a++) {
                var o = u2[a];
                if (o !== r) {
                  if (o["s-hn"] !== r["s-hn"] || s !== "") {
                    if (o.nodeType === 1 && (s === o.getAttribute("slot") || s === o["s-sn"]) || o.nodeType === 3 && s === o["s-sn"]) {
                      r.hidden = true;
                      break;
                    }
                  } else {
                    if (o.nodeType === 1 || o.nodeType === 3 && o.textContent.trim() !== "") {
                      r.hidden = true;
                      break;
                    }
                  }
                }
              }
            }
            updateFallbackSlotVisibility(r);
          }
        }
      };
      relocateNodes = [];
      markSlotContentForRelocation = function(t) {
        var e2;
        var n;
        var i;
        for (var r = 0, s = t.childNodes; r < s.length; r++) {
          var a = s[r];
          if (a["s-sr"] && (e2 = a["s-cr"]) && e2.parentNode) {
            n = e2.parentNode.childNodes;
            var u2 = a["s-sn"];
            var o = function() {
              e2 = n[i];
              if (!e2["s-cn"] && !e2["s-nr"] && e2["s-hn"] !== a["s-hn"] && (!e2["s-sh"] || e2["s-sh"] !== a["s-hn"])) {
                if (isNodeLocatedInSlot(e2, u2)) {
                  var t2 = relocateNodes.find(function(t3) {
                    return t3.H === e2;
                  });
                  checkSlotFallbackVisibility = true;
                  e2["s-sn"] = e2["s-sn"] || u2;
                  if (t2) {
                    t2.H["s-sh"] = a["s-hn"];
                    t2.j = a;
                  } else {
                    e2["s-sh"] = a["s-hn"];
                    relocateNodes.push({ j: a, H: e2 });
                  }
                  if (e2["s-sr"]) {
                    relocateNodes.map(function(n2) {
                      if (isNodeLocatedInSlot(n2.H, e2["s-sn"])) {
                        t2 = relocateNodes.find(function(t3) {
                          return t3.H === e2;
                        });
                        if (t2 && !n2.j) {
                          n2.j = t2.j;
                        }
                      }
                    });
                  }
                } else if (!relocateNodes.some(function(t3) {
                  return t3.H === e2;
                })) {
                  relocateNodes.push({ H: e2 });
                }
              }
            };
            for (i = n.length - 1; i >= 0; i--) {
              o();
            }
          }
          if (a.nodeType === 1) {
            markSlotContentForRelocation(a);
          }
        }
      };
      isNodeLocatedInSlot = function(t, e2) {
        if (t.nodeType === 1) {
          if (t.getAttribute("slot") === null && e2 === "") {
            return true;
          }
          if (t.getAttribute("slot") === e2) {
            return true;
          }
          return false;
        }
        if (t["s-sn"] === e2) {
          return true;
        }
        return e2 === "";
      };
      nullifyVNodeRefs = function(t) {
        {
          t.u && t.u.ref && t.u.ref(null);
          t.o && t.o.map(nullifyVNodeRefs);
        }
      };
      renderVdom = function(t, e2, n) {
        if (n === void 0) {
          n = false;
        }
        var i, r, s, a, u2;
        var o = t.$hostElement$;
        var c = t.R;
        var f = t.k || newVNode(null, null);
        var l = isHost(e2) ? e2 : h(null, null, e2);
        hostTagName = o.tagName;
        if (c.q) {
          l.u = l.u || {};
          c.q.map(function(t2) {
            var e3 = t2[0], n2 = t2[1];
            return l.u[n2] = o[e3];
          });
        }
        if (n && l.u) {
          for (var d = 0, v = Object.keys(l.u); d < v.length; d++) {
            var b = v[d];
            if (o.hasAttribute(b) && !["key", "ref", "style", "class"].includes(b)) {
              l.u[b] = o[b];
            }
          }
        }
        l.m = null;
        l.v |= 4;
        t.k = l;
        l.p = f.p = o.shadowRoot || o;
        {
          scopeId = o["s-sc"];
        }
        useNativeShadowDom = (c.v & 1) !== 0;
        {
          contentRef = o["s-cr"];
          checkSlotFallbackVisibility = false;
        }
        patch(f, l, n);
        {
          plt.v |= 1;
          if (checkSlotRelocate) {
            markSlotContentForRelocation(l.p);
            for (var m = 0, p = relocateNodes; m < p.length; m++) {
              var g = p[m];
              var E = g.H;
              if (!E["s-ol"]) {
                var k = doc2.createTextNode("");
                k["s-nr"] = E;
                E.parentNode.insertBefore(E["s-ol"] = k, E);
              }
            }
            for (var T = 0, w = relocateNodes; T < w.length; T++) {
              var g = w[T];
              var E = g.H;
              var S = g.j;
              if (S) {
                var _ = S.parentNode;
                var y = S.nextSibling;
                if (y && y.nodeType === 1) {
                  var k = (i = E["s-ol"]) == null ? void 0 : i.previousSibling;
                  while (k) {
                    var A = (r = k["s-nr"]) != null ? r : null;
                    if (A && A["s-sn"] === E["s-sn"] && _ === A.parentNode) {
                      A = A.nextSibling;
                      while (A === E || (A == null ? void 0 : A["s-sr"])) {
                        A = A == null ? void 0 : A.nextSibling;
                      }
                      if (!A || !A["s-nr"]) {
                        y = A;
                        break;
                      }
                    }
                    k = k.previousSibling;
                  }
                }
                if (!y && _ !== E.parentNode || E.nextSibling !== y) {
                  if (E !== y) {
                    _.insertBefore(E, y);
                    if (E.nodeType === 1) {
                      E.hidden = (s = E["s-ih"]) != null ? s : false;
                    }
                  }
                }
                E && typeof S["s-rf"] === "function" && S["s-rf"](E);
              } else {
                if (E.nodeType === 1) {
                  if (n) {
                    E["s-ih"] = (a = E.hidden) != null ? a : false;
                  }
                  E.hidden = true;
                }
              }
            }
          }
          if (checkSlotFallbackVisibility) {
            updateFallbackSlotVisibility(l.p);
          }
          plt.v &= ~1;
          relocateNodes.length = 0;
        }
        if (c.v & 2) {
          for (var N = 0, M = l.p.childNodes; N < M.length; N++) {
            var C = M[N];
            if (C["s-hn"] !== hostTagName && !C["s-sh"]) {
              if (n && C["s-ih"] == null) {
                C["s-ih"] = (u2 = C.hidden) != null ? u2 : false;
              }
              C.hidden = true;
            }
          }
        }
        contentRef = void 0;
      };
      attachToAncestor = function(t, e2) {
        if (e2 && !t.F && e2["s-p"]) {
          e2["s-p"].push(new Promise(function(e3) {
            return t.F = e3;
          }));
        }
      };
      scheduleUpdate = function(t, e2) {
        {
          t.v |= 16;
        }
        if (t.v & 4) {
          t.v |= 512;
          return;
        }
        attachToAncestor(t, t.G);
        var n = function() {
          return dispatchHooks(t, e2);
        };
        return writeTask(n);
      };
      dispatchHooks = function(t, e2) {
        var n = createTime("scheduleUpdate", t.R.L);
        var i = t.$;
        var r;
        if (e2) {
          {
            t.v |= 256;
            if (t.V) {
              t.V.map(function(t2) {
                var e3 = t2[0], n2 = t2[1];
                return safeCall(i, e3, n2);
              });
              t.V = void 0;
            }
          }
          {
            r = safeCall(i, "componentWillLoad");
          }
        }
        {
          r = enqueue(r, function() {
            return safeCall(i, "componentWillRender");
          });
        }
        n();
        return enqueue(r, function() {
          return updateComponent(t, i, e2);
        });
      };
      enqueue = function(t, e2) {
        return isPromisey(t) ? t.then(e2) : e2();
      };
      isPromisey = function(t) {
        return t instanceof Promise || t && t.then && typeof t.then === "function";
      };
      updateComponent = function(t, e2, n) {
        return __awaiter(void 0, void 0, void 0, function() {
          var i, r, s, a, u2, o, c;
          return __generator(this, function(f) {
            r = t.$hostElement$;
            s = createTime("update", t.R.L);
            a = r["s-rc"];
            if (n) {
              attachStyles(t);
            }
            u2 = createTime("render", t.R.L);
            {
              callRender(t, e2, r, n);
            }
            if (a) {
              a.map(function(t2) {
                return t2();
              });
              r["s-rc"] = void 0;
            }
            u2();
            s();
            {
              o = (i = r["s-p"]) != null ? i : [];
              c = function() {
                return postUpdateComponent(t);
              };
              if (o.length === 0) {
                c();
              } else {
                Promise.all(o).then(c);
                t.v |= 4;
                o.length = 0;
              }
            }
            return [2];
          });
        });
      };
      callRender = function(t, e2, n, i) {
        try {
          e2 = e2.render && e2.render();
          {
            t.v &= ~16;
          }
          {
            t.v |= 2;
          }
          {
            {
              {
                renderVdom(t, e2, i);
              }
            }
          }
        } catch (e3) {
          consoleError(e3, t.$hostElement$);
        }
        return null;
      };
      postUpdateComponent = function(t) {
        var e2 = t.R.L;
        var n = t.$hostElement$;
        var i = createTime("postUpdate", e2);
        var r = t.$;
        var s = t.G;
        {
          safeCall(r, "componentDidRender");
        }
        if (!(t.v & 64)) {
          t.v |= 64;
          {
            addHydratedFlag(n);
          }
          {
            safeCall(r, "componentDidLoad");
          }
          i();
          {
            t.Y(n);
            if (!s) {
              appDidLoad();
            }
          }
        } else {
          {
            safeCall(r, "componentDidUpdate");
          }
          i();
        }
        {
          t.W(n);
        }
        {
          if (t.F) {
            t.F();
            t.F = void 0;
          }
          if (t.v & 512) {
            nextTick(function() {
              return scheduleUpdate(t, false);
            });
          }
          t.v &= ~(4 | 512);
        }
      };
      appDidLoad = function(t) {
        {
          addHydratedFlag(doc2.documentElement);
        }
        nextTick(function() {
          return emitEvent(win2, "appload", { detail: { namespace: NAMESPACE } });
        });
      };
      safeCall = function(t, e2, n) {
        if (t && t[e2]) {
          try {
            return t[e2](n);
          } catch (t2) {
            consoleError(t2);
          }
        }
        return void 0;
      };
      addHydratedFlag = function(t) {
        return t.classList.add("hydrated");
      };
      getValue = function(t, e2) {
        return getHostRef(t).X.get(e2);
      };
      setValue = function(t, e2, n, i) {
        var r = getHostRef(t);
        var s = r.$hostElement$;
        var a = r.X.get(e2);
        var u2 = r.v;
        var o = r.$;
        n = parsePropertyValue(n, i.K[e2][0]);
        var c = Number.isNaN(a) && Number.isNaN(n);
        var f = n !== a && !c;
        if ((!(u2 & 8) || a === void 0) && f) {
          r.X.set(e2, n);
          if (o) {
            if (i.J && u2 & 128) {
              var l = i.J[e2];
              if (l) {
                l.map(function(t2) {
                  try {
                    o[t2](n, a, e2);
                  } catch (t3) {
                    consoleError(t3, s);
                  }
                });
              }
            }
            if ((u2 & (2 | 16)) === 2) {
              scheduleUpdate(r, false);
            }
          }
        }
      };
      proxyComponent = function(t, e2, n) {
        var i;
        var r = t.prototype;
        if (e2.K) {
          if (t.watchers) {
            e2.J = t.watchers;
          }
          var s = Object.entries(e2.K);
          s.map(function(t2) {
            var i2 = t2[0], s2 = t2[1][0];
            if (s2 & 31 || n & 2 && s2 & 32) {
              Object.defineProperty(r, i2, { get: function() {
                return getValue(this, i2);
              }, set: function(t3) {
                setValue(this, i2, t3, e2);
              }, configurable: true, enumerable: true });
            } else if (n & 1 && s2 & 64) {
              Object.defineProperty(r, i2, { value: function() {
                var t3 = [];
                for (var e3 = 0; e3 < arguments.length; e3++) {
                  t3[e3] = arguments[e3];
                }
                var n2;
                var r2 = getHostRef(this);
                return (n2 = r2 == null ? void 0 : r2.Z) == null ? void 0 : n2.then(function() {
                  var e4;
                  return (e4 = r2.$) == null ? void 0 : e4[i2].apply(e4, t3);
                });
              } });
            }
          });
          if (n & 1) {
            var a = /* @__PURE__ */ new Map();
            r.attributeChangedCallback = function(t2, n2, i2) {
              var s2 = this;
              plt.jmp(function() {
                var u2;
                var o = a.get(t2);
                if (s2.hasOwnProperty(o)) {
                  i2 = s2[o];
                  delete s2[o];
                } else if (r.hasOwnProperty(o) && typeof s2[o] === "number" && s2[o] == i2) {
                  return;
                } else if (o == null) {
                  var c = getHostRef(s2);
                  var f = c == null ? void 0 : c.v;
                  if (f && !(f & 8) && f & 128 && i2 !== n2) {
                    var l = c.$;
                    var h2 = (u2 = e2.J) == null ? void 0 : u2[t2];
                    h2 == null ? void 0 : h2.forEach(function(e3) {
                      if (l[e3] != null) {
                        l[e3].call(l, i2, n2, t2);
                      }
                    });
                  }
                  return;
                }
                s2[o] = i2 === null && typeof s2[o] === "boolean" ? false : i2;
              });
            };
            t.observedAttributes = Array.from(new Set(__spreadArray(__spreadArray([], Object.keys((i = e2.J) != null ? i : {}), true), s.filter(function(t2) {
              var e3 = t2[0], n2 = t2[1];
              return n2[0] & 15;
            }).map(function(t2) {
              var n2 = t2[0], i2 = t2[1];
              var r2;
              var s2 = i2[1] || n2;
              a.set(s2, n2);
              if (i2[0] & 512) {
                (r2 = e2.q) == null ? void 0 : r2.push([n2, s2]);
              }
              return s2;
            }), true)));
          }
        }
        return t;
      };
      initializeComponent = function(t, e2, n, i) {
        return __awaiter(void 0, void 0, void 0, function() {
          var i2, r, s, a, u2, o, c, f, l;
          return __generator(this, function(h2) {
            switch (h2.label) {
              case 0:
                if (!((e2.v & 32) === 0))
                  return [3, 5];
                e2.v |= 32;
                r = n.tt;
                if (!r)
                  return [3, 3];
                i2 = loadModule(n);
                if (!i2.then)
                  return [3, 2];
                s = uniqueTime();
                return [4, i2];
              case 1:
                i2 = h2.sent();
                s();
                h2.label = 2;
              case 2:
                if (!i2.isProxied) {
                  {
                    n.J = i2.watchers;
                  }
                  proxyComponent(i2, n, 2);
                  i2.isProxied = true;
                }
                a = createTime("createInstance", n.L);
                {
                  e2.v |= 8;
                }
                try {
                  new i2(e2);
                } catch (t2) {
                  consoleError(t2);
                }
                {
                  e2.v &= ~8;
                }
                {
                  e2.v |= 128;
                }
                a();
                fireConnectedCallback(e2.$);
                return [3, 4];
              case 3:
                i2 = t.constructor;
                customElements.whenDefined(n.L).then(function() {
                  return e2.v |= 128;
                });
                h2.label = 4;
              case 4:
                if (i2.style) {
                  u2 = i2.style;
                  if (typeof u2 !== "string") {
                    u2 = u2[e2.O = computeMode(t)];
                  }
                  o = getScopeId(n, e2.O);
                  if (!styles.has(o)) {
                    c = createTime("registerStyles", n.L);
                    registerStyle(o, u2, !!(n.v & 1));
                    c();
                  }
                }
                h2.label = 5;
              case 5:
                f = e2.G;
                l = function() {
                  return scheduleUpdate(e2, true);
                };
                if (f && f["s-rc"]) {
                  f["s-rc"].push(l);
                } else {
                  l();
                }
                return [2];
            }
          });
        });
      };
      fireConnectedCallback = function(t) {
        {
          safeCall(t, "connectedCallback");
        }
      };
      connectedCallback = function(t) {
        if ((plt.v & 1) === 0) {
          var e2 = getHostRef(t);
          var n = e2.R;
          var i = createTime("connectedCallback", n.L);
          if (!(e2.v & 1)) {
            e2.v |= 1;
            var r = void 0;
            {
              r = t.getAttribute(HYDRATE_ID);
              if (r) {
                if (n.v & 1) {
                  var s = addStyle(t.shadowRoot, n, t.getAttribute("s-mode"));
                  t.classList.remove(s + "-h", s + "-s");
                }
                initializeClientHydrate(t, n.L, r, e2);
              }
            }
            if (!r) {
              if (n.v & (4 | 8)) {
                setContentReference(t);
              }
            }
            {
              var a = t;
              while (a = a.parentNode || a.host) {
                if (a.nodeType === 1 && a.hasAttribute("s-id") && a["s-p"] || a["s-p"]) {
                  attachToAncestor(e2, e2.G = a);
                  break;
                }
              }
            }
            if (n.K) {
              Object.entries(n.K).map(function(e3) {
                var n2 = e3[0], i2 = e3[1][0];
                if (i2 & 31 && t.hasOwnProperty(n2)) {
                  var r2 = t[n2];
                  delete t[n2];
                  t[n2] = r2;
                }
              });
            }
            {
              initializeComponent(t, e2, n);
            }
          } else {
            addHostEventListeners(t, e2, n.et);
            if (e2 == null ? void 0 : e2.$) {
              fireConnectedCallback(e2.$);
            } else if (e2 == null ? void 0 : e2.nt) {
              e2.nt.then(function() {
                return fireConnectedCallback(e2.$);
              });
            }
          }
          i();
        }
      };
      setContentReference = function(t) {
        var e2 = t["s-cr"] = doc2.createComment("");
        e2["s-cn"] = true;
        t.insertBefore(e2, t.firstChild);
      };
      disconnectInstance = function(t) {
        {
          safeCall(t, "disconnectedCallback");
        }
      };
      disconnectedCallback = function(t) {
        return __awaiter(void 0, void 0, void 0, function() {
          var e2;
          return __generator(this, function(n) {
            if ((plt.v & 1) === 0) {
              e2 = getHostRef(t);
              {
                if (e2.it) {
                  e2.it.map(function(t2) {
                    return t2();
                  });
                  e2.it = void 0;
                }
              }
              if (e2 == null ? void 0 : e2.$) {
                disconnectInstance(e2.$);
              } else if (e2 == null ? void 0 : e2.nt) {
                e2.nt.then(function() {
                  return disconnectInstance(e2.$);
                });
              }
            }
            return [2];
          });
        });
      };
      patchPseudoShadowDom = function(t, e2) {
        patchCloneNode(t);
        patchSlotAppendChild(t);
        patchSlotAppend(t);
        patchSlotPrepend(t);
        patchSlotInsertAdjacentElement(t);
        patchSlotInsertAdjacentHTML(t);
        patchSlotInsertAdjacentText(t);
        patchTextContent(t);
        patchChildSlotNodes(t, e2);
        patchSlotRemoveChild(t);
      };
      patchCloneNode = function(t) {
        var e2 = t.cloneNode;
        t.cloneNode = function(t2) {
          var n = this;
          var i = n.shadowRoot && supportsShadow;
          var r = e2.call(n, i ? t2 : false);
          if (!i && t2) {
            var s = 0;
            var a = void 0, u2 = void 0;
            var o = ["s-id", "s-cr", "s-lr", "s-rc", "s-sc", "s-p", "s-cn", "s-sr", "s-sn", "s-hn", "s-ol", "s-nr", "s-si", "s-rf"];
            for (; s < n.childNodes.length; s++) {
              a = n.childNodes[s]["s-nr"];
              u2 = o.every(function(t3) {
                return !n.childNodes[s][t3];
              });
              if (a) {
                if (r.__appendChild) {
                  r.__appendChild(a.cloneNode(true));
                } else {
                  r.appendChild(a.cloneNode(true));
                }
              }
              if (u2) {
                r.appendChild(n.childNodes[s].cloneNode(true));
              }
            }
          }
          return r;
        };
      };
      patchSlotAppendChild = function(t) {
        t.__appendChild = t.appendChild;
        t.appendChild = function(t2) {
          var e2 = t2["s-sn"] = getSlotName(t2);
          var n = getHostSlotNode(this.childNodes, e2, this.tagName);
          if (n) {
            var i = getHostSlotChildNodes(n, e2);
            var r = i[i.length - 1];
            var s = r.parentNode.insertBefore(t2, r.nextSibling);
            updateFallbackSlotVisibility(this);
            return s;
          }
          return this.__appendChild(t2);
        };
      };
      patchSlotRemoveChild = function(t) {
        t.__removeChild = t.removeChild;
        t.removeChild = function(t2) {
          if (t2 && typeof t2["s-sn"] !== "undefined") {
            var e2 = getHostSlotNode(this.childNodes, t2["s-sn"], this.tagName);
            if (e2) {
              var n = getHostSlotChildNodes(e2, t2["s-sn"]);
              var i = n.find(function(e3) {
                return e3 === t2;
              });
              if (i) {
                i.remove();
                updateFallbackSlotVisibility(this);
                return;
              }
            }
          }
          return this.__removeChild(t2);
        };
      };
      patchSlotPrepend = function(t) {
        var e2 = t.prepend;
        t.prepend = function() {
          var t2 = this;
          var n = [];
          for (var i = 0; i < arguments.length; i++) {
            n[i] = arguments[i];
          }
          n.forEach(function(n2) {
            if (typeof n2 === "string") {
              n2 = t2.ownerDocument.createTextNode(n2);
            }
            var i2 = n2["s-sn"] = getSlotName(n2);
            var r = getHostSlotNode(t2.childNodes, i2, t2.tagName);
            if (r) {
              var s = document.createTextNode("");
              s["s-nr"] = n2;
              r["s-cr"].parentNode.__appendChild(s);
              n2["s-ol"] = s;
              var a = getHostSlotChildNodes(r, i2);
              var u2 = a[0];
              return u2.parentNode.insertBefore(n2, u2.nextSibling);
            }
            if (n2.nodeType === 1 && !!n2.getAttribute("slot")) {
              n2.hidden = true;
            }
            return e2.call(t2, n2);
          });
        };
      };
      patchSlotAppend = function(t) {
        t.append = function() {
          var t2 = this;
          var e2 = [];
          for (var n = 0; n < arguments.length; n++) {
            e2[n] = arguments[n];
          }
          e2.forEach(function(e3) {
            if (typeof e3 === "string") {
              e3 = t2.ownerDocument.createTextNode(e3);
            }
            t2.appendChild(e3);
          });
        };
      };
      patchSlotInsertAdjacentHTML = function(t) {
        var e2 = t.insertAdjacentHTML;
        t.insertAdjacentHTML = function(t2, n) {
          if (t2 !== "afterbegin" && t2 !== "beforeend") {
            return e2.call(this, t2, n);
          }
          var i = this.ownerDocument.createElement("_");
          var r;
          i.innerHTML = n;
          if (t2 === "afterbegin") {
            while (r = i.firstChild) {
              this.prepend(r);
            }
          } else if (t2 === "beforeend") {
            while (r = i.firstChild) {
              this.append(r);
            }
          }
        };
      };
      patchSlotInsertAdjacentText = function(t) {
        t.insertAdjacentText = function(t2, e2) {
          this.insertAdjacentHTML(t2, e2);
        };
      };
      patchSlotInsertAdjacentElement = function(t) {
        var e2 = t.insertAdjacentElement;
        t.insertAdjacentElement = function(t2, n) {
          if (t2 !== "afterbegin" && t2 !== "beforeend") {
            return e2.call(this, t2, n);
          }
          if (t2 === "afterbegin") {
            this.prepend(n);
            return n;
          } else if (t2 === "beforeend") {
            this.append(n);
            return n;
          }
          return n;
        };
      };
      patchTextContent = function(t) {
        var e2 = Object.getOwnPropertyDescriptor(Node.prototype, "textContent");
        Object.defineProperty(t, "__textContent", e2);
        {
          Object.defineProperty(t, "textContent", { get: function() {
            var t2 = getAllChildSlotNodes(this.childNodes);
            var e3 = t2.map(function(t3) {
              var e4, n;
              var i = [];
              var r = t3.nextSibling;
              while (r && r["s-sn"] === t3["s-sn"]) {
                if (r.nodeType === NODE_TYPES.TEXT_NODE || r.nodeType === NODE_TYPES.ELEMENT_NODE) {
                  i.push((n = (e4 = r.textContent) == null ? void 0 : e4.trim()) != null ? n : "");
                }
                r = r.nextSibling;
              }
              return i.filter(function(t4) {
                return t4 !== "";
              }).join(" ");
            }).filter(function(t3) {
              return t3 !== "";
            }).join(" ");
            return " " + e3 + " ";
          }, set: function(t2) {
            var e3 = this;
            var n = getAllChildSlotNodes(this.childNodes);
            n.forEach(function(n2) {
              var i = n2.nextSibling;
              while (i && i["s-sn"] === n2["s-sn"]) {
                var r = i;
                i = i.nextSibling;
                r.remove();
              }
              if (n2["s-sn"] === "") {
                var s = e3.ownerDocument.createTextNode(t2);
                s["s-sn"] = "";
                n2.parentElement.insertBefore(s, n2.nextSibling);
              } else {
                n2.remove();
              }
            });
          } });
        }
      };
      patchChildSlotNodes = function(t, e2) {
        var n = function(t2) {
          __extends(e3, t2);
          function e3() {
            return t2 !== null && t2.apply(this, arguments) || this;
          }
          e3.prototype.item = function(t3) {
            return this[t3];
          };
          return e3;
        }(Array);
        if (e2.v & 8) {
          var i = t.__lookupGetter__("childNodes");
          Object.defineProperty(t, "children", { get: function() {
            return this.childNodes.map(function(t2) {
              return t2.nodeType === 1;
            });
          } });
          Object.defineProperty(t, "childElementCount", { get: function() {
            return t.children.length;
          } });
          Object.defineProperty(t, "childNodes", { get: function() {
            var t2 = i.call(this);
            if ((plt.v & 1) === 0 && getHostRef(this).v & 2) {
              var e3 = new n();
              for (var r = 0; r < t2.length; r++) {
                var s = t2[r]["s-nr"];
                if (s) {
                  e3.push(s);
                }
              }
              return e3;
            }
            return n.from(t2);
          } });
        }
      };
      getAllChildSlotNodes = function(t) {
        var e2 = [];
        for (var n = 0, i = Array.from(t); n < i.length; n++) {
          var r = i[n];
          if (r["s-sr"]) {
            e2.push(r);
          }
          e2.push.apply(e2, getAllChildSlotNodes(r.childNodes));
        }
        return e2;
      };
      getSlotName = function(t) {
        return t["s-sn"] || t.nodeType === 1 && t.getAttribute("slot") || "";
      };
      getHostSlotNode = function(t, e2, n) {
        var i = 0;
        var r;
        for (; i < t.length; i++) {
          r = t[i];
          if (r["s-sr"] && r["s-sn"] === e2 && r["s-hn"] === n) {
            return r;
          }
          r = getHostSlotNode(r.childNodes, e2, n);
          if (r) {
            return r;
          }
        }
        return null;
      };
      getHostSlotChildNodes = function(t, e2) {
        var n = [t];
        while ((t = t.nextSibling) && t["s-sn"] === e2) {
          n.push(t);
        }
        return n;
      };
      bootstrapLazy = function(t, e2) {
        if (e2 === void 0) {
          e2 = {};
        }
        var n;
        var i = createTime();
        var r = [];
        var s = e2.exclude || [];
        var a = win2.customElements;
        var u2 = doc2.head;
        var o = u2.querySelector("meta[charset]");
        var c = doc2.createElement("style");
        var f = [];
        var l = doc2.querySelectorAll("[".concat(HYDRATED_STYLE_ID, "]"));
        var h2;
        var d = true;
        var v = 0;
        Object.assign(plt, e2);
        plt.t = new URL(e2.resourcesUrl || "./", doc2.baseURI).href;
        {
          plt.v |= 2;
        }
        {
          for (; v < l.length; v++) {
            registerStyle(l[v].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(l[v].innerHTML), true);
          }
        }
        var b = false;
        t.map(function(t2) {
          t2[1].map(function(e3) {
            var n2;
            var i2 = { v: e3[0], L: e3[1], K: e3[2], et: e3[3] };
            if (i2.v & 4) {
              b = true;
            }
            {
              i2.K = e3[2];
            }
            {
              i2.et = e3[3];
            }
            {
              i2.q = [];
            }
            {
              i2.J = (n2 = e3[4]) != null ? n2 : {};
            }
            var u3 = i2.L;
            var o2 = function(t3) {
              __extends(e4, t3);
              function e4(e5) {
                var n3 = t3.call(this, e5) || this;
                e5 = n3;
                registerHost(e5, i2);
                if (i2.v & 1) {
                  {
                    {
                      e5.attachShadow({ mode: "open", delegatesFocus: !!(i2.v & 16) });
                    }
                  }
                }
                return n3;
              }
              e4.prototype.connectedCallback = function() {
                var t4 = this;
                if (h2) {
                  clearTimeout(h2);
                  h2 = null;
                }
                if (d) {
                  f.push(this);
                } else {
                  plt.jmp(function() {
                    return connectedCallback(t4);
                  });
                }
              };
              e4.prototype.disconnectedCallback = function() {
                var t4 = this;
                plt.jmp(function() {
                  return disconnectedCallback(t4);
                });
              };
              e4.prototype.componentOnReady = function() {
                return getHostRef(this).nt;
              };
              return e4;
            }(HTMLElement);
            {
              if (i2.v & 2) {
                patchPseudoShadowDom(o2.prototype, i2);
              }
            }
            i2.tt = t2[0];
            if (!s.includes(u3) && !a.get(u3)) {
              r.push(u3);
              a.define(u3, proxyComponent(o2, i2, 1));
            }
          });
        });
        if (r.length > 0) {
          if (b) {
            c.textContent += SLOT_FB_CSS;
          }
          {
            c.textContent += r + HYDRATED_CSS;
          }
          if (c.innerHTML.length) {
            c.setAttribute("data-styles", "");
            var m = (n = plt.D) != null ? n : queryNonceMetaTagContent(doc2);
            if (m != null) {
              c.setAttribute("nonce", m);
            }
            u2.insertBefore(c, o ? o.nextSibling : u2.firstChild);
          }
        }
        d = false;
        if (f.length) {
          f.map(function(t2) {
            return t2.connectedCallback();
          });
        } else {
          {
            plt.jmp(function() {
              return h2 = setTimeout(appDidLoad, 30);
            });
          }
        }
        i();
      };
      addHostEventListeners = function(t, e2, n, i) {
        if (n) {
          n.map(function(n2) {
            var i2 = n2[0], r = n2[1], s = n2[2];
            var a = getHostListenerTarget(t, i2);
            var u2 = hostListenerProxy(e2, s);
            var o = hostListenerOpts(i2);
            plt.ael(a, r, u2, o);
            (e2.it = e2.it || []).push(function() {
              return plt.rel(a, r, u2, o);
            });
          });
        }
      };
      hostListenerProxy = function(t, e2) {
        return function(n) {
          try {
            {
              if (t.v & 256) {
                t.$[e2](n);
              } else {
                (t.V = t.V || []).push([e2, n]);
              }
            }
          } catch (t2) {
            consoleError(t2);
          }
        };
      };
      getHostListenerTarget = function(t, e2) {
        if (e2 & 4)
          return doc2;
        if (e2 & 8)
          return win2;
        if (e2 & 16)
          return doc2.body;
        return t;
      };
      hostListenerOpts = function(t) {
        return supportsListenerOptions ? { passive: (t & 1) !== 0, capture: (t & 2) !== 0 } : (t & 2) !== 0;
      };
      hostRefs = /* @__PURE__ */ new WeakMap();
      getHostRef = function(t) {
        return hostRefs.get(t);
      };
      registerHost = function(t, e2) {
        var n = { v: 0, $hostElement$: t, R: e2, X: /* @__PURE__ */ new Map() };
        {
          n.Z = new Promise(function(t2) {
            return n.W = t2;
          });
        }
        {
          n.nt = new Promise(function(t2) {
            return n.Y = t2;
          });
          t["s-p"] = [];
          t["s-rc"] = [];
        }
        addHostEventListeners(t, n, e2.et);
        return hostRefs.set(t, n);
      };
      isMemberInElement = function(t, e2) {
        return e2 in t;
      };
      consoleError = function(t, e2) {
        return (0, console.error)(t, e2);
      };
      cmpModules = /* @__PURE__ */ new Map();
      loadModule = function(t, e2, n) {
        var i = t.L.replace(/-/g, "_");
        var r = t.tt;
        var s = cmpModules.get(r);
        if (s) {
          return s[i];
        }
        return import("./".concat(r, ".entry.js").concat("")).then(function(t2) {
          {
            cmpModules.set(r, t2);
          }
          return t2[i];
        }, consoleError);
      };
      styles = /* @__PURE__ */ new Map();
      modeResolutionChain = [];
      win2 = typeof window !== "undefined" ? window : {};
      doc2 = win2.document || { head: {} };
      H = win2.HTMLElement || /* @__PURE__ */ function() {
        function t() {
        }
        return t;
      }();
      plt = { v: 0, t: "", jmp: function(t) {
        return t();
      }, raf: function(t) {
        return requestAnimationFrame(t);
      }, ael: function(t, e2, n, i) {
        return t.addEventListener(e2, n, i);
      }, rel: function(t, e2, n, i) {
        return t.removeEventListener(e2, n, i);
      }, ce: function(t, e2) {
        return new CustomEvent(t, e2);
      } };
      setPlatformHelpers = function(t) {
        Object.assign(plt, t);
      };
      supportsShadow = true;
      supportsListenerOptions = function() {
        var t = false;
        try {
          doc2.addEventListener("e", null, Object.defineProperty({}, "passive", { get: function() {
            t = true;
          } }));
        } catch (t2) {
        }
        return t;
      }();
      promiseResolve = function(t) {
        return Promise.resolve(t);
      };
      supportsConstructableStylesheets = function() {
        try {
          new CSSStyleSheet();
          return typeof new CSSStyleSheet().replaceSync === "function";
        } catch (t) {
        }
        return false;
      }();
      queuePending = false;
      queueDomReads = [];
      queueDomWrites = [];
      queueTask = function(t, e2) {
        return function(n) {
          t.push(n);
          if (!queuePending) {
            queuePending = true;
            if (e2 && plt.v & 4) {
              nextTick(flush);
            } else {
              plt.raf(flush);
            }
          }
        };
      };
      consume = function(t) {
        for (var e2 = 0; e2 < t.length; e2++) {
          try {
            t[e2](performance.now());
          } catch (t2) {
            consoleError(t2);
          }
        }
        t.length = 0;
      };
      flush = function() {
        consume(queueDomReads);
        {
          consume(queueDomWrites);
          if (queuePending = queueDomReads.length > 0) {
            plt.raf(flush);
          }
        }
      };
      nextTick = function(t) {
        return promiseResolve().then(t);
      };
      readTask = queueTask(queueDomReads, false);
      writeTask = queueTask(queueDomWrites, true);
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/helpers-da915de8.js
  var componentOnReady2, raf3;
  var init_helpers_da915de8 = __esm({
    "node_modules/@ionic/core/dist/esm-es5/helpers-da915de8.js"() {
      componentOnReady2 = function(r, a) {
        if (r.componentOnReady) {
          r.componentOnReady().then(function(r2) {
            return a(r2);
          });
        } else {
          raf3(function() {
            return a(r);
          });
        }
      };
      raf3 = function(r) {
        if (typeof __zone_symbol__requestAnimationFrame === "function") {
          return __zone_symbol__requestAnimationFrame(r);
        }
        if (typeof requestAnimationFrame === "function") {
          return requestAnimationFrame(r);
        }
        return setTimeout(r);
      };
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/index-f7fbe1fb.js
  var init_index_f7fbe1fb = __esm({
    "node_modules/@ionic/core/dist/esm-es5/index-f7fbe1fb.js"() {
      init_index_5dc2b88e();
      init_helpers_da915de8();
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/ios.transition-a0041e41.js
  var init_ios_transition_a0041e41 = __esm({
    "node_modules/@ionic/core/dist/esm-es5/ios.transition-a0041e41.js"() {
      init_animation_eab5a4ca();
      init_index_f7fbe1fb();
      init_index_a5d50daf();
      init_index_5dc2b88e();
      init_helpers_da915de8();
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/md.transition-0c0602d9.js
  var init_md_transition_0c0602d9 = __esm({
    "node_modules/@ionic/core/dist/esm-es5/md.transition-0c0602d9.js"() {
      init_animation_eab5a4ca();
      init_index_f7fbe1fb();
      init_index_a5d50daf();
      init_index_5dc2b88e();
      init_helpers_da915de8();
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/cubic-bezier-fe2083dc.js
  var getTimeGivenProgression, solveCubicParametricEquation, solveCubicBezier, solveQuadraticEquation, solveCubicEquation;
  var init_cubic_bezier_fe2083dc = __esm({
    "node_modules/@ionic/core/dist/esm-es5/cubic-bezier-fe2083dc.js"() {
      getTimeGivenProgression = function(t, a, r, e2, i) {
        return solveCubicBezier(t[1], a[1], r[1], e2[1], i).map(function(i2) {
          return solveCubicParametricEquation(t[0], a[0], r[0], e2[0], i2);
        });
      };
      solveCubicParametricEquation = function(t, a, r, e2, i) {
        var n = 3 * a * Math.pow(i - 1, 2);
        var u2 = -3 * r * i + 3 * r + e2 * i;
        var o = t * Math.pow(i - 1, 3);
        return i * (n + i * u2) - o;
      };
      solveCubicBezier = function(t, a, r, e2, i) {
        t -= i;
        a -= i;
        r -= i;
        e2 -= i;
        var n = solveCubicEquation(e2 - 3 * r + 3 * a - t, 3 * r - 6 * a + 3 * t, 3 * a - 3 * t, t);
        return n.filter(function(t2) {
          return t2 >= 0 && t2 <= 1;
        });
      };
      solveQuadraticEquation = function(t, a, r) {
        var e2 = a * a - 4 * t * r;
        if (e2 < 0) {
          return [];
        } else {
          return [(-a + Math.sqrt(e2)) / (2 * t), (-a - Math.sqrt(e2)) / (2 * t)];
        }
      };
      solveCubicEquation = function(t, a, r, e2) {
        if (t === 0) {
          return solveQuadraticEquation(a, r, e2);
        }
        a /= t;
        r /= t;
        e2 /= t;
        var i = (3 * r - a * a) / 3;
        var n = (2 * a * a * a - 9 * a * r + 27 * e2) / 27;
        if (i === 0) {
          return [Math.pow(-n, 1 / 3)];
        } else if (n === 0) {
          return [Math.sqrt(-i), -Math.sqrt(-i)];
        }
        var u2 = Math.pow(n / 2, 2) + Math.pow(i / 3, 3);
        if (u2 === 0) {
          return [Math.pow(n / 2, 1 / 2) - a / 3];
        } else if (u2 > 0) {
          return [Math.pow(-(n / 2) + Math.sqrt(u2), 1 / 3) - Math.pow(n / 2 + Math.sqrt(u2), 1 / 3) - a / 3];
        }
        var o = Math.sqrt(Math.pow(-(i / 3), 3));
        var v = Math.acos(-(n / (2 * Math.sqrt(Math.pow(-(i / 3), 3)))));
        var h2 = 2 * Math.pow(o, 1 / 3);
        return [h2 * Math.cos(v / 3) - a / 3, h2 * Math.cos((v + 2 * Math.PI) / 3) - a / 3, h2 * Math.cos((v + 4 * Math.PI) / 3) - a / 3];
      };
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/gesture-controller-314a54f6.js
  var GestureController, GestureDelegate, BlockerDelegate, BACKDROP_NO_SCROLL, GESTURE_CONTROLLER;
  var init_gesture_controller_314a54f6 = __esm({
    "node_modules/@ionic/core/dist/esm-es5/gesture-controller-314a54f6.js"() {
      GestureController = function() {
        function t() {
          this.gestureId = 0;
          this.requestedStart = /* @__PURE__ */ new Map();
          this.disabledGestures = /* @__PURE__ */ new Map();
          this.disabledScroll = /* @__PURE__ */ new Set();
        }
        t.prototype.createGesture = function(t2) {
          var i;
          return new GestureDelegate(this, this.newID(), t2.name, (i = t2.priority) !== null && i !== void 0 ? i : 0, !!t2.disableScroll);
        };
        t.prototype.createBlocker = function(t2) {
          if (t2 === void 0) {
            t2 = {};
          }
          return new BlockerDelegate(this, this.newID(), t2.disable, !!t2.disableScroll);
        };
        t.prototype.start = function(t2, i, n) {
          if (!this.canStart(t2)) {
            this.requestedStart.delete(i);
            return false;
          }
          this.requestedStart.set(i, n);
          return true;
        };
        t.prototype.capture = function(t2, i, n) {
          if (!this.start(t2, i, n)) {
            return false;
          }
          var e2 = this.requestedStart;
          var s = -1e4;
          e2.forEach(function(t3) {
            s = Math.max(s, t3);
          });
          if (s === n) {
            this.capturedId = i;
            e2.clear();
            var r = new CustomEvent("ionGestureCaptured", { detail: { gestureName: t2 } });
            document.dispatchEvent(r);
            return true;
          }
          e2.delete(i);
          return false;
        };
        t.prototype.release = function(t2) {
          this.requestedStart.delete(t2);
          if (this.capturedId === t2) {
            this.capturedId = void 0;
          }
        };
        t.prototype.disableGesture = function(t2, i) {
          var n = this.disabledGestures.get(t2);
          if (n === void 0) {
            n = /* @__PURE__ */ new Set();
            this.disabledGestures.set(t2, n);
          }
          n.add(i);
        };
        t.prototype.enableGesture = function(t2, i) {
          var n = this.disabledGestures.get(t2);
          if (n !== void 0) {
            n.delete(i);
          }
        };
        t.prototype.disableScroll = function(t2) {
          this.disabledScroll.add(t2);
          if (this.disabledScroll.size === 1) {
            document.body.classList.add(BACKDROP_NO_SCROLL);
          }
        };
        t.prototype.enableScroll = function(t2) {
          this.disabledScroll.delete(t2);
          if (this.disabledScroll.size === 0) {
            document.body.classList.remove(BACKDROP_NO_SCROLL);
          }
        };
        t.prototype.canStart = function(t2) {
          if (this.capturedId !== void 0) {
            return false;
          }
          if (this.isDisabled(t2)) {
            return false;
          }
          return true;
        };
        t.prototype.isCaptured = function() {
          return this.capturedId !== void 0;
        };
        t.prototype.isScrollDisabled = function() {
          return this.disabledScroll.size > 0;
        };
        t.prototype.isDisabled = function(t2) {
          var i = this.disabledGestures.get(t2);
          if (i && i.size > 0) {
            return true;
          }
          return false;
        };
        t.prototype.newID = function() {
          this.gestureId++;
          return this.gestureId;
        };
        return t;
      }();
      GestureDelegate = function() {
        function t(t2, i, n, e2, s) {
          this.id = i;
          this.name = n;
          this.disableScroll = s;
          this.priority = e2 * 1e6 + i;
          this.ctrl = t2;
        }
        t.prototype.canStart = function() {
          if (!this.ctrl) {
            return false;
          }
          return this.ctrl.canStart(this.name);
        };
        t.prototype.start = function() {
          if (!this.ctrl) {
            return false;
          }
          return this.ctrl.start(this.name, this.id, this.priority);
        };
        t.prototype.capture = function() {
          if (!this.ctrl) {
            return false;
          }
          var t2 = this.ctrl.capture(this.name, this.id, this.priority);
          if (t2 && this.disableScroll) {
            this.ctrl.disableScroll(this.id);
          }
          return t2;
        };
        t.prototype.release = function() {
          if (this.ctrl) {
            this.ctrl.release(this.id);
            if (this.disableScroll) {
              this.ctrl.enableScroll(this.id);
            }
          }
        };
        t.prototype.destroy = function() {
          this.release();
          this.ctrl = void 0;
        };
        return t;
      }();
      BlockerDelegate = function() {
        function t(t2, i, n, e2) {
          this.id = i;
          this.disable = n;
          this.disableScroll = e2;
          this.ctrl = t2;
        }
        t.prototype.block = function() {
          if (!this.ctrl) {
            return;
          }
          if (this.disable) {
            for (var t2 = 0, i = this.disable; t2 < i.length; t2++) {
              var n = i[t2];
              this.ctrl.disableGesture(n, this.id);
            }
          }
          if (this.disableScroll) {
            this.ctrl.disableScroll(this.id);
          }
        };
        t.prototype.unblock = function() {
          if (!this.ctrl) {
            return;
          }
          if (this.disable) {
            for (var t2 = 0, i = this.disable; t2 < i.length; t2++) {
              var n = i[t2];
              this.ctrl.enableGesture(n, this.id);
            }
          }
          if (this.disableScroll) {
            this.ctrl.enableScroll(this.id);
          }
        };
        t.prototype.destroy = function() {
          this.unblock();
          this.ctrl = void 0;
        };
        return t;
      }();
      BACKDROP_NO_SCROLL = "backdrop-no-scroll";
      GESTURE_CONTROLLER = new GestureController();
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/index-39782642.js
  var addEventListener2, supportsPassive, _sPassive, MOUSE_WAIT, createPointerEvents, getDocument2, createPanRecognizer, createGesture, calcGestureData, updateDetail, now;
  var init_index_39782642 = __esm({
    "node_modules/@ionic/core/dist/esm-es5/index-39782642.js"() {
      init_gesture_controller_314a54f6();
      init_gesture_controller_314a54f6();
      addEventListener2 = function(e2, r, t, a) {
        var n = supportsPassive(e2) ? { capture: !!a.capture, passive: !!a.passive } : !!a.capture;
        var i;
        var f;
        if (e2["__zone_symbol__addEventListener"]) {
          i = "__zone_symbol__addEventListener";
          f = "__zone_symbol__removeEventListener";
        } else {
          i = "addEventListener";
          f = "removeEventListener";
        }
        e2[i](r, t, n);
        return function() {
          e2[f](r, t, n);
        };
      };
      supportsPassive = function(e2) {
        if (_sPassive === void 0) {
          try {
            var r = Object.defineProperty({}, "passive", { get: function() {
              _sPassive = true;
            } });
            e2.addEventListener("optsTest", function() {
              return;
            }, r);
          } catch (e3) {
            _sPassive = false;
          }
        }
        return !!_sPassive;
      };
      MOUSE_WAIT = 2e3;
      createPointerEvents = function(e2, r, t, a, n) {
        var i;
        var f;
        var v;
        var u2;
        var s;
        var o;
        var c;
        var d = 0;
        var l = function(a2) {
          d = Date.now() + MOUSE_WAIT;
          if (!r(a2)) {
            return;
          }
          if (!f && t) {
            f = addEventListener2(e2, "touchmove", t, n);
          }
          if (!v) {
            v = addEventListener2(a2.target, "touchend", m, n);
          }
          if (!u2) {
            u2 = addEventListener2(a2.target, "touchcancel", m, n);
          }
        };
        var E = function(a2) {
          if (d > Date.now()) {
            return;
          }
          if (!r(a2)) {
            return;
          }
          if (!o && t) {
            o = addEventListener2(getDocument2(e2), "mousemove", t, n);
          }
          if (!c) {
            c = addEventListener2(getDocument2(e2), "mouseup", p, n);
          }
        };
        var m = function(e3) {
          _();
          if (a) {
            a(e3);
          }
        };
        var p = function(e3) {
          L();
          if (a) {
            a(e3);
          }
        };
        var _ = function() {
          if (f) {
            f();
          }
          if (v) {
            v();
          }
          if (u2) {
            u2();
          }
          f = v = u2 = void 0;
        };
        var L = function() {
          if (o) {
            o();
          }
          if (c) {
            c();
          }
          o = c = void 0;
        };
        var D = function() {
          _();
          L();
        };
        var G = function(r2) {
          if (r2 === void 0) {
            r2 = true;
          }
          if (!r2) {
            if (i) {
              i();
            }
            if (s) {
              s();
            }
            i = s = void 0;
            D();
          } else {
            if (!i) {
              i = addEventListener2(e2, "touchstart", l, n);
            }
            if (!s) {
              s = addEventListener2(e2, "mousedown", E, n);
            }
          }
        };
        var P = function() {
          G(false);
          a = t = r = void 0;
        };
        return { enable: G, stop: D, destroy: P };
      };
      getDocument2 = function(e2) {
        return e2 instanceof Document ? e2 : e2.ownerDocument;
      };
      createPanRecognizer = function(e2, r, t) {
        var a = t * (Math.PI / 180);
        var n = e2 === "x";
        var i = Math.cos(a);
        var f = r * r;
        var v = 0;
        var u2 = 0;
        var s = false;
        var o = 0;
        return { start: function(e3, r2) {
          v = e3;
          u2 = r2;
          o = 0;
          s = true;
        }, detect: function(e3, r2) {
          if (!s) {
            return false;
          }
          var t2 = e3 - v;
          var a2 = r2 - u2;
          var c = t2 * t2 + a2 * a2;
          if (c < f) {
            return false;
          }
          var d = Math.sqrt(c);
          var l = (n ? t2 : a2) / d;
          if (l > i) {
            o = 1;
          } else if (l < -i) {
            o = -1;
          } else {
            o = 0;
          }
          s = false;
          return true;
        }, isGesture: function() {
          return o !== 0;
        }, getDirection: function() {
          return o;
        } };
      };
      createGesture = function(e2) {
        var r = false;
        var t = false;
        var a = true;
        var n = false;
        var i = Object.assign({ disableScroll: false, direction: "x", gesturePriority: 0, passive: true, maxAngle: 40, threshold: 10 }, e2);
        var f = i.canStart;
        var v = i.onWillStart;
        var u2 = i.onStart;
        var s = i.onEnd;
        var o = i.notCaptured;
        var c = i.onMove;
        var d = i.threshold;
        var l = i.passive;
        var E = i.blurOnStart;
        var m = { type: "pan", startX: 0, startY: 0, startTime: 0, currentX: 0, currentY: 0, velocityX: 0, velocityY: 0, deltaX: 0, deltaY: 0, currentTime: 0, event: void 0, data: void 0 };
        var p = createPanRecognizer(i.direction, i.threshold, i.maxAngle);
        var _ = GESTURE_CONTROLLER.createGesture({ name: e2.gestureName, priority: e2.gesturePriority, disableScroll: e2.disableScroll });
        var L = function(e3) {
          var r2 = now(e3);
          if (t || !a) {
            return false;
          }
          updateDetail(e3, m);
          m.startX = m.currentX;
          m.startY = m.currentY;
          m.startTime = m.currentTime = r2;
          m.velocityX = m.velocityY = m.deltaX = m.deltaY = 0;
          m.event = e3;
          if (f && f(m) === false) {
            return false;
          }
          _.release();
          if (!_.start()) {
            return false;
          }
          t = true;
          if (d === 0) {
            return P();
          }
          p.start(m.startX, m.startY);
          return true;
        };
        var D = function(e3) {
          if (r) {
            if (!n && a) {
              n = true;
              calcGestureData(m, e3);
              requestAnimationFrame(G);
            }
            return;
          }
          calcGestureData(m, e3);
          if (p.detect(m.currentX, m.currentY)) {
            if (!p.isGesture() || !P()) {
              O();
            }
          }
        };
        var G = function() {
          if (!r) {
            return;
          }
          n = false;
          if (c) {
            c(m);
          }
        };
        var P = function() {
          if (!_.capture()) {
            return false;
          }
          r = true;
          a = false;
          m.startX = m.currentX;
          m.startY = m.currentY;
          m.startTime = m.currentTime;
          if (v) {
            v(m).then(y);
          } else {
            y();
          }
          return true;
        };
        var g = function() {
          if (typeof document !== "undefined") {
            var e3 = document.activeElement;
            if (e3 === null || e3 === void 0 ? void 0 : e3.blur) {
              e3.blur();
            }
          }
        };
        var y = function() {
          if (E) {
            g();
          }
          if (u2) {
            u2(m);
          }
          a = true;
        };
        var R = function() {
          r = false;
          t = false;
          n = false;
          a = true;
          _.release();
        };
        var T = function(e3) {
          var t2 = r;
          var n2 = a;
          R();
          if (!n2) {
            return;
          }
          calcGestureData(m, e3);
          if (t2) {
            if (s) {
              s(m);
            }
            return;
          }
          if (o) {
            o(m);
          }
        };
        var h2 = createPointerEvents(i.el, L, D, T, { capture: false, passive: l });
        var O = function() {
          R();
          h2.stop();
          if (o) {
            o(m);
          }
        };
        return { enable: function(e3) {
          if (e3 === void 0) {
            e3 = true;
          }
          if (!e3) {
            if (r) {
              T(void 0);
            }
            R();
          }
          h2.enable(e3);
        }, destroy: function() {
          _.destroy();
          h2.destroy();
        } };
      };
      calcGestureData = function(e2, r) {
        if (!r) {
          return;
        }
        var t = e2.currentX;
        var a = e2.currentY;
        var n = e2.currentTime;
        updateDetail(r, e2);
        var i = e2.currentX;
        var f = e2.currentY;
        var v = e2.currentTime = now(r);
        var u2 = v - n;
        if (u2 > 0 && u2 < 100) {
          var s = (i - t) / u2;
          var o = (f - a) / u2;
          e2.velocityX = s * 0.7 + e2.velocityX * 0.3;
          e2.velocityY = o * 0.7 + e2.velocityY * 0.3;
        }
        e2.deltaX = i - e2.startX;
        e2.deltaY = f - e2.startY;
        e2.event = r;
      };
      updateDetail = function(e2, r) {
        var t = 0;
        var a = 0;
        if (e2) {
          var n = e2.changedTouches;
          if (n && n.length > 0) {
            var i = n[0];
            t = i.clientX;
            a = i.clientY;
          } else if (e2.pageX !== void 0) {
            t = e2.pageX;
            a = e2.pageY;
          }
        }
        r.currentX = t;
        r.currentY = a;
      };
      now = function(e2) {
        return e2.timeStamp || Date.now();
      };
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/ionic-global-d2d8f882.js
  var Config3, config3, configFromSession, saveConfig, configFromURL, startsWith2, IONIC_PREFIX, IONIC_SESSION_KEY, getPlatforms2, isPlatform2, setupPlatforms2, detectPlatforms2, isMobileWeb2, isIpad2, isIphone2, isIOS2, isAndroid2, isAndroidTablet2, isPhablet2, isTablet2, isMobile2, isDesktop2, isHybrid2, isCordova2, isCapacitorNative2, isElectron2, isPWA2, testUserAgent2, matchMedia2, PLATFORMS_MAP2, defaultMode, getIonMode, initialize2;
  var init_ionic_global_d2d8f882 = __esm({
    "node_modules/@ionic/core/dist/esm-es5/ionic-global-d2d8f882.js"() {
      init_index_5dc2b88e();
      Config3 = function() {
        function i() {
          this.m = /* @__PURE__ */ new Map();
        }
        i.prototype.reset = function(i2) {
          this.m = new Map(Object.entries(i2));
        };
        i.prototype.get = function(i2, t) {
          var n = this.m.get(i2);
          return n !== void 0 ? n : t;
        };
        i.prototype.getBoolean = function(i2, t) {
          if (t === void 0) {
            t = false;
          }
          var n = this.m.get(i2);
          if (n === void 0) {
            return t;
          }
          if (typeof n === "string") {
            return n === "true";
          }
          return !!n;
        };
        i.prototype.getNumber = function(i2, t) {
          var n = parseFloat(this.m.get(i2));
          return isNaN(n) ? t !== void 0 ? t : NaN : n;
        };
        i.prototype.set = function(i2, t) {
          this.m.set(i2, t);
        };
        return i;
      }();
      config3 = new Config3();
      configFromSession = function(i) {
        try {
          var t = i.sessionStorage.getItem(IONIC_SESSION_KEY);
          return t !== null ? JSON.parse(t) : {};
        } catch (i2) {
          return {};
        }
      };
      saveConfig = function(i, t) {
        try {
          i.sessionStorage.setItem(IONIC_SESSION_KEY, JSON.stringify(t));
        } catch (i2) {
          return;
        }
      };
      configFromURL = function(i) {
        var t = {};
        i.location.search.slice(1).split("&").map(function(i2) {
          return i2.split("=");
        }).map(function(i2) {
          var t2 = i2[0], n = i2[1];
          return [decodeURIComponent(t2), decodeURIComponent(n)];
        }).filter(function(i2) {
          var t2 = i2[0];
          return startsWith2(t2, IONIC_PREFIX);
        }).map(function(i2) {
          var t2 = i2[0], n = i2[1];
          return [t2.slice(IONIC_PREFIX.length), n];
        }).forEach(function(i2) {
          var n = i2[0], r = i2[1];
          t[n] = r;
        });
        return t;
      };
      startsWith2 = function(i, t) {
        return i.substr(0, t.length) === t;
      };
      IONIC_PREFIX = "ionic:";
      IONIC_SESSION_KEY = "ionic-persist-config";
      getPlatforms2 = function(i) {
        return setupPlatforms2(i);
      };
      isPlatform2 = function(i, t) {
        if (typeof i === "string") {
          t = i;
          i = void 0;
        }
        return getPlatforms2(i).includes(t);
      };
      setupPlatforms2 = function(i) {
        if (i === void 0) {
          i = window;
        }
        if (typeof i === "undefined") {
          return [];
        }
        i.Ionic = i.Ionic || {};
        var t = i.Ionic.platforms;
        if (t == null) {
          t = i.Ionic.platforms = detectPlatforms2(i);
          t.forEach(function(t2) {
            return i.document.documentElement.classList.add("plt-".concat(t2));
          });
        }
        return t;
      };
      detectPlatforms2 = function(i) {
        var t = config3.get("platform");
        return Object.keys(PLATFORMS_MAP2).filter(function(n) {
          var r = t === null || t === void 0 ? void 0 : t[n];
          return typeof r === "function" ? r(i) : PLATFORMS_MAP2[n](i);
        });
      };
      isMobileWeb2 = function(i) {
        return isMobile2(i) && !isHybrid2(i);
      };
      isIpad2 = function(i) {
        if (testUserAgent2(i, /iPad/i)) {
          return true;
        }
        if (testUserAgent2(i, /Macintosh/i) && isMobile2(i)) {
          return true;
        }
        return false;
      };
      isIphone2 = function(i) {
        return testUserAgent2(i, /iPhone/i);
      };
      isIOS2 = function(i) {
        return testUserAgent2(i, /iPhone|iPod/i) || isIpad2(i);
      };
      isAndroid2 = function(i) {
        return testUserAgent2(i, /android|sink/i);
      };
      isAndroidTablet2 = function(i) {
        return isAndroid2(i) && !testUserAgent2(i, /mobile/i);
      };
      isPhablet2 = function(i) {
        var t = i.innerWidth;
        var n = i.innerHeight;
        var r = Math.min(t, n);
        var e2 = Math.max(t, n);
        return r > 390 && r < 520 && e2 > 620 && e2 < 800;
      };
      isTablet2 = function(i) {
        var t = i.innerWidth;
        var n = i.innerHeight;
        var r = Math.min(t, n);
        var e2 = Math.max(t, n);
        return isIpad2(i) || isAndroidTablet2(i) || r > 460 && r < 820 && e2 > 780 && e2 < 1400;
      };
      isMobile2 = function(i) {
        return matchMedia2(i, "(any-pointer:coarse)");
      };
      isDesktop2 = function(i) {
        return !isMobile2(i);
      };
      isHybrid2 = function(i) {
        return isCordova2(i) || isCapacitorNative2(i);
      };
      isCordova2 = function(i) {
        return !!(i["cordova"] || i["phonegap"] || i["PhoneGap"]);
      };
      isCapacitorNative2 = function(i) {
        var t = i["Capacitor"];
        return !!(t === null || t === void 0 ? void 0 : t.isNative);
      };
      isElectron2 = function(i) {
        return testUserAgent2(i, /electron/i);
      };
      isPWA2 = function(i) {
        var t;
        return !!(((t = i.matchMedia) === null || t === void 0 ? void 0 : t.call(i, "(display-mode: standalone)").matches) || i.navigator.standalone);
      };
      testUserAgent2 = function(i, t) {
        return t.test(i.navigator.userAgent);
      };
      matchMedia2 = function(i, t) {
        var n;
        return (n = i.matchMedia) === null || n === void 0 ? void 0 : n.call(i, t).matches;
      };
      PLATFORMS_MAP2 = { ipad: isIpad2, iphone: isIphone2, ios: isIOS2, android: isAndroid2, phablet: isPhablet2, tablet: isTablet2, cordova: isCordova2, capacitor: isCapacitorNative2, electron: isElectron2, pwa: isPWA2, mobile: isMobile2, mobileweb: isMobileWeb2, desktop: isDesktop2, hybrid: isHybrid2 };
      getIonMode = function(i) {
        return i && getMode(i) || defaultMode;
      };
      initialize2 = function(i) {
        if (i === void 0) {
          i = {};
        }
        if (typeof window === "undefined") {
          return;
        }
        var t = window.document;
        var n = window;
        var r = n.Ionic = n.Ionic || {};
        var e2 = {};
        if (i._ael) {
          e2.ael = i._ael;
        }
        if (i._rel) {
          e2.rel = i._rel;
        }
        if (i._ce) {
          e2.ce = i._ce;
        }
        setPlatformHelpers(e2);
        var o = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, configFromSession(n)), { persistConfig: false }), r.config), configFromURL(n)), i);
        config3.reset(o);
        if (config3.getBoolean("persistConfig")) {
          saveConfig(n, o);
        }
        setupPlatforms2(n);
        r.config = config3;
        r.mode = defaultMode = config3.get("mode", t.documentElement.getAttribute("mode") || (isPlatform2(n, "ios") ? "ios" : "md"));
        config3.set("mode", defaultMode);
        t.documentElement.setAttribute("mode", defaultMode);
        t.documentElement.classList.add(defaultMode);
        if (config3.getBoolean("_testing")) {
          config3.set("animated", false);
        }
        var a = function(i2) {
          var t2;
          return (t2 = i2.tagName) === null || t2 === void 0 ? void 0 : t2.startsWith("ION-");
        };
        var s = function(i2) {
          return ["ios", "md"].includes(i2);
        };
        setMode(function(i2) {
          while (i2) {
            var t2 = i2.mode || i2.getAttribute("mode");
            if (t2) {
              if (s(t2)) {
                return t2;
              } else if (a(i2)) {
                console.warn('Invalid ionic mode: "' + t2 + '", expected: "ios" or "md"');
              }
            }
            i2 = i2.parentElement;
          }
          return defaultMode;
        });
      };
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/config-49c88215.js
  var setupConfig;
  var init_config_49c88215 = __esm({
    "node_modules/@ionic/core/dist/esm-es5/config-49c88215.js"() {
      setupConfig = function(e2) {
        var r = window;
        var n = r.Ionic;
        if (n && n.config && n.config.constructor.name !== "Object") {
          return;
        }
        r.Ionic = r.Ionic || {};
        r.Ionic.config = Object.assign(Object.assign({}, r.Ionic.config), e2);
        return r.Ionic.config;
      };
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/theme-01f3f29c.js
  var init_theme_01f3f29c = __esm({
    "node_modules/@ionic/core/dist/esm-es5/theme-01f3f29c.js"() {
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/hardware-back-button-804f43bb.js
  var MENU_BACK_BUTTON_PRIORITY;
  var init_hardware_back_button_804f43bb = __esm({
    "node_modules/@ionic/core/dist/esm-es5/hardware-back-button-804f43bb.js"() {
      init_index_a5d50daf();
      init_ionic_global_d2d8f882();
      init_index_5dc2b88e();
      MENU_BACK_BUTTON_PRIORITY = 99;
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/index-9b0d46f4.js
  var printIonWarning;
  var init_index_9b0d46f4 = __esm({
    "node_modules/@ionic/core/dist/esm-es5/index-9b0d46f4.js"() {
      init_tslib_es6();
      printIonWarning = function(r) {
        var n = [];
        for (var o = 1; o < arguments.length; o++) {
          n[o - 1] = arguments[o];
        }
        return console.warn.apply(console, __spreadArray(["[Ionic Warning]: ".concat(r)], n, false));
      };
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/index-8dbae644.js
  var baseAnimation, menuOverlayAnimation, menuPushAnimation, menuRevealAnimation, createMenuController, menuController;
  var init_index_8dbae644 = __esm({
    "node_modules/@ionic/core/dist/esm-es5/index-8dbae644.js"() {
      init_tslib_es6();
      init_index_a5d50daf();
      init_hardware_back_button_804f43bb();
      init_index_9b0d46f4();
      init_helpers_da915de8();
      init_ionic_global_d2d8f882();
      init_animation_eab5a4ca();
      baseAnimation = function(n) {
        return createAnimation().duration(n ? 400 : 300);
      };
      menuOverlayAnimation = function(n) {
        var r;
        var e2;
        var t = n.width + 8;
        var i = createAnimation();
        var a = createAnimation();
        if (n.isEndSide) {
          r = t + "px";
          e2 = "0px";
        } else {
          r = -t + "px";
          e2 = "0px";
        }
        i.addElement(n.menuInnerEl).fromTo("transform", "translateX(".concat(r, ")"), "translateX(".concat(e2, ")"));
        var o = getIonMode(n);
        var u2 = o === "ios";
        var s = u2 ? 0.2 : 0.25;
        a.addElement(n.backdropEl).fromTo("opacity", 0.01, s);
        return baseAnimation(u2).addAnimation([i, a]);
      };
      menuPushAnimation = function(n) {
        var r;
        var e2;
        var t = getIonMode(n);
        var i = n.width;
        if (n.isEndSide) {
          r = -i + "px";
          e2 = i + "px";
        } else {
          r = i + "px";
          e2 = -i + "px";
        }
        var a = createAnimation().addElement(n.menuInnerEl).fromTo("transform", "translateX(".concat(e2, ")"), "translateX(0px)");
        var o = createAnimation().addElement(n.contentEl).fromTo("transform", "translateX(0px)", "translateX(".concat(r, ")"));
        var u2 = createAnimation().addElement(n.backdropEl).fromTo("opacity", 0.01, 0.32);
        return baseAnimation(t === "ios").addAnimation([a, o, u2]);
      };
      menuRevealAnimation = function(n) {
        var r = getIonMode(n);
        var e2 = n.width * (n.isEndSide ? -1 : 1) + "px";
        var t = createAnimation().addElement(n.contentEl).fromTo("transform", "translateX(0px)", "translateX(".concat(e2, ")"));
        return baseAnimation(r === "ios").addAnimation(t);
      };
      createMenuController = function() {
        var n = /* @__PURE__ */ new Map();
        var r = [];
        var e2 = function(n2) {
          return __awaiter(void 0, void 0, void 0, function() {
            var r2;
            return __generator(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [4, c(n2, true)];
                case 1:
                  r2 = e3.sent();
                  if (r2) {
                    return [2, r2.open()];
                  }
                  return [2, false];
              }
            });
          });
        };
        var t = function(n2) {
          return __awaiter(void 0, void 0, void 0, function() {
            var r2;
            return __generator(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [4, n2 !== void 0 ? c(n2, true) : f()];
                case 1:
                  r2 = e3.sent();
                  if (r2 !== void 0) {
                    return [2, r2.close()];
                  }
                  return [2, false];
              }
            });
          });
        };
        var i = function(n2) {
          return __awaiter(void 0, void 0, void 0, function() {
            var r2;
            return __generator(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [4, c(n2, true)];
                case 1:
                  r2 = e3.sent();
                  if (r2) {
                    return [2, r2.toggle()];
                  }
                  return [2, false];
              }
            });
          });
        };
        var a = function(n2, r2) {
          return __awaiter(void 0, void 0, void 0, function() {
            var e3;
            return __generator(this, function(t2) {
              switch (t2.label) {
                case 0:
                  return [4, c(r2)];
                case 1:
                  e3 = t2.sent();
                  if (e3) {
                    e3.disabled = !n2;
                  }
                  return [2, e3];
              }
            });
          });
        };
        var o = function(n2, r2) {
          return __awaiter(void 0, void 0, void 0, function() {
            var e3;
            return __generator(this, function(t2) {
              switch (t2.label) {
                case 0:
                  return [4, c(r2)];
                case 1:
                  e3 = t2.sent();
                  if (e3) {
                    e3.swipeGesture = n2;
                  }
                  return [2, e3];
              }
            });
          });
        };
        var u2 = function(n2) {
          return __awaiter(void 0, void 0, void 0, function() {
            var r2, r2;
            return __generator(this, function(e3) {
              switch (e3.label) {
                case 0:
                  if (!(n2 != null))
                    return [3, 2];
                  return [4, c(n2)];
                case 1:
                  r2 = e3.sent();
                  return [2, r2 !== void 0 && r2.isOpen()];
                case 2:
                  return [4, f()];
                case 3:
                  r2 = e3.sent();
                  return [2, r2 !== void 0];
              }
            });
          });
        };
        var s = function(n2) {
          return __awaiter(void 0, void 0, void 0, function() {
            var r2;
            return __generator(this, function(e3) {
              switch (e3.label) {
                case 0:
                  return [4, c(n2)];
                case 1:
                  r2 = e3.sent();
                  if (r2) {
                    return [2, !r2.disabled];
                  }
                  return [2, false];
              }
            });
          });
        };
        var c = function(n2) {
          var e3 = [];
          for (var t2 = 1; t2 < arguments.length; t2++) {
            e3[t2 - 1] = arguments[t2];
          }
          return __awaiter(void 0, __spreadArray([n2], e3, true), void 0, function(n3, e4) {
            var t3, i2, a2;
            if (e4 === void 0) {
              e4 = false;
            }
            return __generator(this, function(o2) {
              switch (o2.label) {
                case 0:
                  return [4, x()];
                case 1:
                  o2.sent();
                  if (n3 === "start" || n3 === "end") {
                    t3 = r.filter(function(r2) {
                      return r2.side === n3 && !r2.disabled;
                    });
                    if (t3.length >= 1) {
                      if (t3.length > 1 && e4) {
                        printIonWarning('menuController queried for a menu on the "'.concat(n3, '" side, but ').concat(t3.length, " menus were found. The first menu reference will be used. If this is not the behavior you want then pass the ID of the menu instead of its side."), t3.map(function(n4) {
                          return n4.el;
                        }));
                      }
                      return [2, t3[0].el];
                    }
                    i2 = r.filter(function(r2) {
                      return r2.side === n3;
                    });
                    if (i2.length >= 1) {
                      if (i2.length > 1 && e4) {
                        printIonWarning('menuController queried for a menu on the "'.concat(n3, '" side, but ').concat(i2.length, " menus were found. The first menu reference will be used. If this is not the behavior you want then pass the ID of the menu instead of its side."), i2.map(function(n4) {
                          return n4.el;
                        }));
                      }
                      return [2, i2[0].el];
                    }
                  } else if (n3 != null) {
                    return [2, b(function(r2) {
                      return r2.menuId === n3;
                    })];
                  }
                  a2 = b(function(n4) {
                    return !n4.disabled;
                  });
                  if (a2) {
                    return [2, a2];
                  }
                  return [2, r.length > 0 ? r[0].el : void 0];
              }
            });
          });
        };
        var f = function() {
          return __awaiter(void 0, void 0, void 0, function() {
            return __generator(this, function(n2) {
              switch (n2.label) {
                case 0:
                  return [4, x()];
                case 1:
                  n2.sent();
                  return [2, w()];
              }
            });
          });
        };
        var v = function() {
          return __awaiter(void 0, void 0, void 0, function() {
            return __generator(this, function(n2) {
              switch (n2.label) {
                case 0:
                  return [4, x()];
                case 1:
                  n2.sent();
                  return [2, g()];
              }
            });
          });
        };
        var d = function() {
          return __awaiter(void 0, void 0, void 0, function() {
            return __generator(this, function(n2) {
              switch (n2.label) {
                case 0:
                  return [4, x()];
                case 1:
                  n2.sent();
                  return [2, A()];
              }
            });
          });
        };
        var _ = function(r2, e3) {
          n.set(r2, e3);
        };
        var m = function(n2) {
          if (r.indexOf(n2) < 0) {
            r.push(n2);
          }
        };
        var l = function(n2) {
          var e3 = r.indexOf(n2);
          if (e3 > -1) {
            r.splice(e3, 1);
          }
        };
        var h2 = function(n2, r2, e3) {
          return __awaiter(void 0, void 0, void 0, function() {
            var t2;
            return __generator(this, function(i2) {
              switch (i2.label) {
                case 0:
                  if (A()) {
                    return [2, false];
                  }
                  if (!r2)
                    return [3, 3];
                  return [4, f()];
                case 1:
                  t2 = i2.sent();
                  if (!(t2 && n2.el !== t2))
                    return [3, 3];
                  return [4, t2.setOpen(false, false)];
                case 2:
                  i2.sent();
                  i2.label = 3;
                case 3:
                  return [2, n2._setOpen(r2, e3)];
              }
            });
          });
        };
        var p = function(r2, e3) {
          var t2 = n.get(r2);
          if (!t2) {
            throw new Error("animation not registered");
          }
          var i2 = t2(e3);
          return i2;
        };
        var w = function() {
          return b(function(n2) {
            return n2._isOpen;
          });
        };
        var g = function() {
          return r.map(function(n2) {
            return n2.el;
          });
        };
        var A = function() {
          return r.some(function(n2) {
            return n2.isAnimating;
          });
        };
        var b = function(n2) {
          var e3 = r.find(n2);
          if (e3 !== void 0) {
            return e3.el;
          }
          return void 0;
        };
        var x = function() {
          return Promise.all(Array.from(document.querySelectorAll("ion-menu")).map(function(n2) {
            return new Promise(function(r2) {
              return componentOnReady2(n2, r2);
            });
          }));
        };
        _("reveal", menuRevealAnimation);
        _("push", menuPushAnimation);
        _("overlay", menuOverlayAnimation);
        doc === null || doc === void 0 ? void 0 : doc.addEventListener("ionBackButton", function(n2) {
          var r2 = w();
          if (r2) {
            n2.detail.register(MENU_BACK_BUTTON_PRIORITY, function() {
              return r2.close();
            });
          }
        });
        return { registerAnimation: _, get: c, getMenus: v, getOpen: f, isEnabled: s, swipeGesture: o, isAnimating: d, isOpen: u2, enable: a, toggle: i, close: t, open: e2, _getOpenSync: w, _createAnimation: p, _register: m, _unregister: l, _setOpen: h2 };
      };
      menuController = createMenuController();
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/framework-delegate-63d1a679.js
  var init_framework_delegate_63d1a679 = __esm({
    "node_modules/@ionic/core/dist/esm-es5/framework-delegate-63d1a679.js"() {
      init_helpers_da915de8();
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/overlays-696d25f5.js
  var createController, alertController, actionSheetController, loadingController, modalController, pickerController, popoverController, toastController, createOverlay, isOverlayHidden, dismissOverlay, getOverlays, getPresentedOverlays, getPresentedOverlay, getAppRoot;
  var init_overlays_696d25f5 = __esm({
    "node_modules/@ionic/core/dist/esm-es5/overlays-696d25f5.js"() {
      init_tslib_es6();
      init_index_a5d50daf();
      init_helpers_da915de8();
      init_hardware_back_button_804f43bb();
      init_ionic_global_d2d8f882();
      init_framework_delegate_63d1a679();
      init_gesture_controller_314a54f6();
      init_index_9b0d46f4();
      createController = function(e2) {
        return { create: function(n) {
          return createOverlay(e2, n);
        }, dismiss: function(n, r, t) {
          return dismissOverlay(document, n, r, e2, t);
        }, getTop: function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(n) {
              return [2, getPresentedOverlay(document, e2)];
            });
          });
        } };
      };
      alertController = createController("ion-alert");
      actionSheetController = createController("ion-action-sheet");
      loadingController = createController("ion-loading");
      modalController = createController("ion-modal");
      pickerController = createController("ion-picker-legacy");
      popoverController = createController("ion-popover");
      toastController = createController("ion-toast");
      createOverlay = function(e2, n) {
        if (typeof window !== "undefined" && typeof window.customElements !== "undefined") {
          return window.customElements.whenDefined(e2).then(function() {
            var r = document.createElement(e2);
            r.classList.add("overlay-hidden");
            Object.assign(r, Object.assign(Object.assign({}, n), { hasController: true }));
            getAppRoot(document).appendChild(r);
            return new Promise(function(e3) {
              return componentOnReady2(r, e3);
            });
          });
        }
        return Promise.resolve();
      };
      isOverlayHidden = function(e2) {
        return e2.classList.contains("overlay-hidden");
      };
      dismissOverlay = function(e2, n, r, t, o) {
        var a = getPresentedOverlay(e2, t, o);
        if (!a) {
          return Promise.reject("overlay does not exist");
        }
        return a.dismiss(n, r);
      };
      getOverlays = function(e2, n) {
        if (n === void 0) {
          n = "ion-alert,ion-action-sheet,ion-loading,ion-modal,ion-picker-legacy,ion-popover,ion-toast";
        }
        return Array.from(e2.querySelectorAll(n)).filter(function(e3) {
          return e3.overlayIndex > 0;
        });
      };
      getPresentedOverlays = function(e2, n) {
        return getOverlays(e2, n).filter(function(e3) {
          return !isOverlayHidden(e3);
        });
      };
      getPresentedOverlay = function(e2, n, r) {
        var t = getPresentedOverlays(e2, n);
        return r === void 0 ? t[t.length - 1] : t.find(function(e3) {
          return e3.id === r;
        });
      };
      getAppRoot = function(e2) {
        return e2.querySelector("ion-app") || e2.body;
      };
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/index.js
  var init_esm_es5 = __esm({
    "node_modules/@ionic/core/dist/esm-es5/index.js"() {
      init_animation_eab5a4ca();
      init_index_f7fbe1fb();
      init_ios_transition_a0041e41();
      init_md_transition_0c0602d9();
      init_cubic_bezier_fe2083dc();
      init_index_39782642();
      init_ionic_global_d2d8f882();
      init_helpers_da915de8();
      init_config_49c88215();
      init_theme_01f3f29c();
      init_index_8dbae644();
      init_overlays_696d25f5();
      init_index_a5d50daf();
      init_index_5dc2b88e();
      init_gesture_controller_314a54f6();
      init_hardware_back_button_804f43bb();
      init_index_9b0d46f4();
      init_framework_delegate_63d1a679();
    }
  });

  // node_modules/@ionic/core/dist/index.js
  var init_dist = __esm({
    "node_modules/@ionic/core/dist/index.js"() {
      init_esm_es5();
    }
  });

  // node_modules/@ionic/core/dist/esm/polyfills/dom.js
  var require_dom = __commonJS({
    "node_modules/@ionic/core/dist/esm/polyfills/dom.js"() {
      (function() {
        "use strict";
        var aa = new Set("annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" "));
        function g(a) {
          var b = aa.has(a);
          a = /^[a-z][.0-9_a-z]*-[\-.0-9_a-z]*$/.test(a);
          return !b && a;
        }
        function l(a) {
          var b = a.isConnected;
          if (void 0 !== b)
            return b;
          for (; a && !(a.__CE_isImportDocument || a instanceof Document); )
            a = a.parentNode || (window.ShadowRoot && a instanceof ShadowRoot ? a.host : void 0);
          return !(!a || !(a.__CE_isImportDocument || a instanceof Document));
        }
        function n(a, b) {
          for (; b && b !== a && !b.nextSibling; )
            b = b.parentNode;
          return b && b !== a ? b.nextSibling : null;
        }
        function p(a, b, d) {
          d = void 0 === d ? /* @__PURE__ */ new Set() : d;
          for (var c = a; c; ) {
            if (c.nodeType === Node.ELEMENT_NODE) {
              var e2 = c;
              b(e2);
              var f = e2.localName;
              if ("link" === f && "import" === e2.getAttribute("rel")) {
                c = e2.import;
                if (c instanceof Node && !d.has(c))
                  for (d.add(c), c = c.firstChild; c; c = c.nextSibling)
                    p(c, b, d);
                c = n(a, e2);
                continue;
              } else if ("template" === f) {
                c = n(a, e2);
                continue;
              }
              if (e2 = e2.__CE_shadowRoot)
                for (e2 = e2.firstChild; e2; e2 = e2.nextSibling)
                  p(e2, b, d);
            }
            c = c.firstChild ? c.firstChild : n(a, c);
          }
        }
        function r(a, b, d) {
          a[b] = d;
        }
        ;
        function u2() {
          this.a = /* @__PURE__ */ new Map();
          this.g = /* @__PURE__ */ new Map();
          this.c = [];
          this.f = [];
          this.b = false;
        }
        function ba(a, b, d) {
          a.a.set(b, d);
          a.g.set(d.constructorFunction, d);
        }
        function ca(a, b) {
          a.b = true;
          a.c.push(b);
        }
        function da(a, b) {
          a.b = true;
          a.f.push(b);
        }
        function v(a, b) {
          a.b && p(b, function(b2) {
            return w(a, b2);
          });
        }
        function w(a, b) {
          if (a.b && !b.__CE_patched) {
            b.__CE_patched = true;
            for (var d = 0; d < a.c.length; d++)
              a.c[d](b);
            for (d = 0; d < a.f.length; d++)
              a.f[d](b);
          }
        }
        function x(a, b) {
          var d = [];
          p(b, function(b2) {
            return d.push(b2);
          });
          for (b = 0; b < d.length; b++) {
            var c = d[b];
            1 === c.__CE_state ? a.connectedCallback(c) : y(a, c);
          }
        }
        function z(a, b) {
          var d = [];
          p(b, function(b2) {
            return d.push(b2);
          });
          for (b = 0; b < d.length; b++) {
            var c = d[b];
            1 === c.__CE_state && a.disconnectedCallback(c);
          }
        }
        function A(a, b, d) {
          d = void 0 === d ? {} : d;
          var c = d.u || /* @__PURE__ */ new Set(), e2 = d.i || function(b2) {
            return y(a, b2);
          }, f = [];
          p(b, function(b2) {
            if ("link" === b2.localName && "import" === b2.getAttribute("rel")) {
              var d2 = b2.import;
              d2 instanceof Node && (d2.__CE_isImportDocument = true, d2.__CE_hasRegistry = true);
              d2 && "complete" === d2.readyState ? d2.__CE_documentLoadHandled = true : b2.addEventListener("load", function() {
                var d3 = b2.import;
                if (!d3.__CE_documentLoadHandled) {
                  d3.__CE_documentLoadHandled = true;
                  var f2 = new Set(c);
                  f2.delete(d3);
                  A(a, d3, { u: f2, i: e2 });
                }
              });
            } else
              f.push(b2);
          }, c);
          if (a.b)
            for (b = 0; b < f.length; b++)
              w(a, f[b]);
          for (b = 0; b < f.length; b++)
            e2(f[b]);
        }
        function y(a, b) {
          if (void 0 === b.__CE_state) {
            var d = b.ownerDocument;
            if (d.defaultView || d.__CE_isImportDocument && d.__CE_hasRegistry) {
              if (d = a.a.get(b.localName)) {
                d.constructionStack.push(b);
                var c = d.constructorFunction;
                try {
                  try {
                    if (new c() !== b)
                      throw Error("The custom element constructor did not produce the element being upgraded.");
                  } finally {
                    d.constructionStack.pop();
                  }
                } catch (t) {
                  throw b.__CE_state = 2, t;
                }
                b.__CE_state = 1;
                b.__CE_definition = d;
                if (d.attributeChangedCallback)
                  for (d = d.observedAttributes, c = 0; c < d.length; c++) {
                    var e2 = d[c], f = b.getAttribute(e2);
                    null !== f && a.attributeChangedCallback(b, e2, null, f, null);
                  }
                l(b) && a.connectedCallback(b);
              }
            }
          }
        }
        u2.prototype.connectedCallback = function(a) {
          var b = a.__CE_definition;
          b.connectedCallback && b.connectedCallback.call(a);
        };
        u2.prototype.disconnectedCallback = function(a) {
          var b = a.__CE_definition;
          b.disconnectedCallback && b.disconnectedCallback.call(a);
        };
        u2.prototype.attributeChangedCallback = function(a, b, d, c, e2) {
          var f = a.__CE_definition;
          f.attributeChangedCallback && -1 < f.observedAttributes.indexOf(b) && f.attributeChangedCallback.call(a, b, d, c, e2);
        };
        function B(a) {
          var b = document;
          this.c = a;
          this.a = b;
          this.b = void 0;
          A(this.c, this.a);
          "loading" === this.a.readyState && (this.b = new MutationObserver(this.f.bind(this)), this.b.observe(this.a, { childList: true, subtree: true }));
        }
        function C(a) {
          a.b && a.b.disconnect();
        }
        B.prototype.f = function(a) {
          var b = this.a.readyState;
          "interactive" !== b && "complete" !== b || C(this);
          for (b = 0; b < a.length; b++)
            for (var d = a[b].addedNodes, c = 0; c < d.length; c++)
              A(this.c, d[c]);
        };
        function ea() {
          var a = this;
          this.b = this.a = void 0;
          this.c = new Promise(function(b) {
            a.b = b;
            a.a && b(a.a);
          });
        }
        function D(a) {
          if (a.a)
            throw Error("Already resolved.");
          a.a = void 0;
          a.b && a.b(void 0);
        }
        ;
        function E(a) {
          this.c = false;
          this.a = a;
          this.j = /* @__PURE__ */ new Map();
          this.f = function(b) {
            return b();
          };
          this.b = false;
          this.g = [];
          this.o = new B(a);
        }
        E.prototype.l = function(a, b) {
          var d = this;
          if (!(b instanceof Function))
            throw new TypeError("Custom element constructors must be functions.");
          if (!g(a))
            throw new SyntaxError("The element name '" + a + "' is not valid.");
          if (this.a.a.get(a))
            throw Error("A custom element with name '" + a + "' has already been defined.");
          if (this.c)
            throw Error("A custom element is already being defined.");
          this.c = true;
          try {
            var c = function(b2) {
              var a2 = e2[b2];
              if (void 0 !== a2 && !(a2 instanceof Function))
                throw Error("The '" + b2 + "' callback must be a function.");
              return a2;
            }, e2 = b.prototype;
            if (!(e2 instanceof Object))
              throw new TypeError("The custom element constructor's prototype is not an object.");
            var f = c("connectedCallback");
            var t = c("disconnectedCallback");
            var k = c("adoptedCallback");
            var h2 = c("attributeChangedCallback");
            var m = b.observedAttributes || [];
          } catch (q) {
            return;
          } finally {
            this.c = false;
          }
          b = { localName: a, constructorFunction: b, connectedCallback: f, disconnectedCallback: t, adoptedCallback: k, attributeChangedCallback: h2, observedAttributes: m, constructionStack: [] };
          ba(
            this.a,
            a,
            b
          );
          this.g.push(b);
          this.b || (this.b = true, this.f(function() {
            return fa(d);
          }));
        };
        E.prototype.i = function(a) {
          A(this.a, a);
        };
        function fa(a) {
          if (false !== a.b) {
            a.b = false;
            for (var b = a.g, d = [], c = /* @__PURE__ */ new Map(), e2 = 0; e2 < b.length; e2++)
              c.set(b[e2].localName, []);
            A(a.a, document, { i: function(b2) {
              if (void 0 === b2.__CE_state) {
                var e3 = b2.localName, f2 = c.get(e3);
                f2 ? f2.push(b2) : a.a.a.get(e3) && d.push(b2);
              }
            } });
            for (e2 = 0; e2 < d.length; e2++)
              y(a.a, d[e2]);
            for (; 0 < b.length; ) {
              var f = b.shift();
              e2 = f.localName;
              f = c.get(f.localName);
              for (var t = 0; t < f.length; t++)
                y(a.a, f[t]);
              (e2 = a.j.get(e2)) && D(e2);
            }
          }
        }
        E.prototype.get = function(a) {
          if (a = this.a.a.get(a))
            return a.constructorFunction;
        };
        E.prototype.m = function(a) {
          if (!g(a))
            return Promise.reject(new SyntaxError("'" + a + "' is not a valid custom element name."));
          var b = this.j.get(a);
          if (b)
            return b.c;
          b = new ea();
          this.j.set(a, b);
          this.a.a.get(a) && !this.g.some(function(b2) {
            return b2.localName === a;
          }) && D(b);
          return b.c;
        };
        E.prototype.s = function(a) {
          C(this.o);
          var b = this.f;
          this.f = function(d) {
            return a(function() {
              return b(d);
            });
          };
        };
        window.CustomElementRegistry = E;
        E.prototype.define = E.prototype.l;
        E.prototype.upgrade = E.prototype.i;
        E.prototype.get = E.prototype.get;
        E.prototype.whenDefined = E.prototype.m;
        E.prototype.polyfillWrapFlushCallback = E.prototype.s;
        var F = window.Document.prototype.createElement, G = window.Document.prototype.createElementNS, ha = window.Document.prototype.importNode, ia = window.Document.prototype.prepend, ja = window.Document.prototype.append, ka = window.DocumentFragment.prototype.prepend, la = window.DocumentFragment.prototype.append, H2 = window.Node.prototype.cloneNode, I = window.Node.prototype.appendChild, J = window.Node.prototype.insertBefore, K = window.Node.prototype.removeChild, L = window.Node.prototype.replaceChild, M = Object.getOwnPropertyDescriptor(
          window.Node.prototype,
          "textContent"
        ), N = window.Element.prototype.attachShadow, O = Object.getOwnPropertyDescriptor(window.Element.prototype, "innerHTML"), P = window.Element.prototype.getAttribute, Q = window.Element.prototype.setAttribute, R = window.Element.prototype.removeAttribute, S = window.Element.prototype.getAttributeNS, T = window.Element.prototype.setAttributeNS, U = window.Element.prototype.removeAttributeNS, ma = window.Element.prototype.insertAdjacentElement, na = window.Element.prototype.insertAdjacentHTML, oa = window.Element.prototype.prepend, pa = window.Element.prototype.append, V = window.Element.prototype.before, qa = window.Element.prototype.after, ra = window.Element.prototype.replaceWith, sa = window.Element.prototype.remove, ta = window.HTMLElement, W = Object.getOwnPropertyDescriptor(window.HTMLElement.prototype, "innerHTML"), ua = window.HTMLElement.prototype.insertAdjacentElement, va = window.HTMLElement.prototype.insertAdjacentHTML;
        var wa = new function() {
        }();
        function xa() {
          var a = X;
          window.HTMLElement = function() {
            function b() {
              var b2 = this.constructor, c = a.g.get(b2);
              if (!c)
                throw Error("The custom element being constructed was not registered with `customElements`.");
              var e2 = c.constructionStack;
              if (0 === e2.length)
                return e2 = F.call(document, c.localName), Object.setPrototypeOf(e2, b2.prototype), e2.__CE_state = 1, e2.__CE_definition = c, w(a, e2), e2;
              c = e2.length - 1;
              var f = e2[c];
              if (f === wa)
                throw Error("The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.");
              e2[c] = wa;
              Object.setPrototypeOf(f, b2.prototype);
              w(a, f);
              return f;
            }
            b.prototype = ta.prototype;
            Object.defineProperty(b.prototype, "constructor", { writable: true, configurable: true, enumerable: false, value: b });
            return b;
          }();
        }
        ;
        function Y(a, b, d) {
          function c(b2) {
            return function(d2) {
              for (var e2 = [], c2 = 0; c2 < arguments.length; ++c2)
                e2[c2] = arguments[c2];
              c2 = [];
              for (var f = [], m = 0; m < e2.length; m++) {
                var q = e2[m];
                q instanceof Element && l(q) && f.push(q);
                if (q instanceof DocumentFragment)
                  for (q = q.firstChild; q; q = q.nextSibling)
                    c2.push(q);
                else
                  c2.push(q);
              }
              b2.apply(this, e2);
              for (e2 = 0; e2 < f.length; e2++)
                z(a, f[e2]);
              if (l(this))
                for (e2 = 0; e2 < c2.length; e2++)
                  f = c2[e2], f instanceof Element && x(a, f);
            };
          }
          void 0 !== d.h && (b.prepend = c(d.h));
          void 0 !== d.append && (b.append = c(d.append));
        }
        ;
        function ya() {
          var a = X;
          r(Document.prototype, "createElement", function(b) {
            if (this.__CE_hasRegistry) {
              var d = a.a.get(b);
              if (d)
                return new d.constructorFunction();
            }
            b = F.call(this, b);
            w(a, b);
            return b;
          });
          r(Document.prototype, "importNode", function(b, d) {
            b = ha.call(this, b, !!d);
            this.__CE_hasRegistry ? A(a, b) : v(a, b);
            return b;
          });
          r(Document.prototype, "createElementNS", function(b, d) {
            if (this.__CE_hasRegistry && (null === b || "http://www.w3.org/1999/xhtml" === b)) {
              var c = a.a.get(d);
              if (c)
                return new c.constructorFunction();
            }
            b = G.call(
              this,
              b,
              d
            );
            w(a, b);
            return b;
          });
          Y(a, Document.prototype, { h: ia, append: ja });
        }
        ;
        function za() {
          function a(a2, c) {
            Object.defineProperty(a2, "textContent", { enumerable: c.enumerable, configurable: true, get: c.get, set: function(a3) {
              if (this.nodeType === Node.TEXT_NODE)
                c.set.call(this, a3);
              else {
                var d = void 0;
                if (this.firstChild) {
                  var e2 = this.childNodes, k = e2.length;
                  if (0 < k && l(this)) {
                    d = Array(k);
                    for (var h2 = 0; h2 < k; h2++)
                      d[h2] = e2[h2];
                  }
                }
                c.set.call(this, a3);
                if (d)
                  for (a3 = 0; a3 < d.length; a3++)
                    z(b, d[a3]);
              }
            } });
          }
          var b = X;
          r(Node.prototype, "insertBefore", function(a2, c) {
            if (a2 instanceof DocumentFragment) {
              var e2 = Array.prototype.slice.apply(a2.childNodes);
              a2 = J.call(this, a2, c);
              if (l(this))
                for (c = 0; c < e2.length; c++)
                  x(b, e2[c]);
              return a2;
            }
            e2 = l(a2);
            c = J.call(this, a2, c);
            e2 && z(b, a2);
            l(this) && x(b, a2);
            return c;
          });
          r(Node.prototype, "appendChild", function(a2) {
            if (a2 instanceof DocumentFragment) {
              var c = Array.prototype.slice.apply(a2.childNodes);
              a2 = I.call(this, a2);
              if (l(this))
                for (var e2 = 0; e2 < c.length; e2++)
                  x(b, c[e2]);
              return a2;
            }
            c = l(a2);
            e2 = I.call(this, a2);
            c && z(b, a2);
            l(this) && x(b, a2);
            return e2;
          });
          r(Node.prototype, "cloneNode", function(a2) {
            a2 = H2.call(this, !!a2);
            this.ownerDocument.__CE_hasRegistry ? A(b, a2) : v(
              b,
              a2
            );
            return a2;
          });
          r(Node.prototype, "removeChild", function(a2) {
            var c = l(a2), e2 = K.call(this, a2);
            c && z(b, a2);
            return e2;
          });
          r(Node.prototype, "replaceChild", function(a2, c) {
            if (a2 instanceof DocumentFragment) {
              var e2 = Array.prototype.slice.apply(a2.childNodes);
              a2 = L.call(this, a2, c);
              if (l(this))
                for (z(b, c), c = 0; c < e2.length; c++)
                  x(b, e2[c]);
              return a2;
            }
            e2 = l(a2);
            var f = L.call(this, a2, c), d = l(this);
            d && z(b, c);
            e2 && z(b, a2);
            d && x(b, a2);
            return f;
          });
          M && M.get ? a(Node.prototype, M) : ca(b, function(b2) {
            a(b2, { enumerable: true, configurable: true, get: function() {
              for (var a2 = [], b3 = 0; b3 < this.childNodes.length; b3++) {
                var f = this.childNodes[b3];
                f.nodeType !== Node.COMMENT_NODE && a2.push(f.textContent);
              }
              return a2.join("");
            }, set: function(a2) {
              for (; this.firstChild; )
                K.call(this, this.firstChild);
              null != a2 && "" !== a2 && I.call(this, document.createTextNode(a2));
            } });
          });
        }
        ;
        function Aa(a) {
          function b(b2) {
            return function(e2) {
              for (var c = [], d2 = 0; d2 < arguments.length; ++d2)
                c[d2] = arguments[d2];
              d2 = [];
              for (var k = [], h2 = 0; h2 < c.length; h2++) {
                var m = c[h2];
                m instanceof Element && l(m) && k.push(m);
                if (m instanceof DocumentFragment)
                  for (m = m.firstChild; m; m = m.nextSibling)
                    d2.push(m);
                else
                  d2.push(m);
              }
              b2.apply(this, c);
              for (c = 0; c < k.length; c++)
                z(a, k[c]);
              if (l(this))
                for (c = 0; c < d2.length; c++)
                  k = d2[c], k instanceof Element && x(a, k);
            };
          }
          var d = Element.prototype;
          void 0 !== V && (d.before = b(V));
          void 0 !== V && (d.after = b(qa));
          void 0 !== ra && r(d, "replaceWith", function(b2) {
            for (var e2 = [], c = 0; c < arguments.length; ++c)
              e2[c] = arguments[c];
            c = [];
            for (var d2 = [], k = 0; k < e2.length; k++) {
              var h2 = e2[k];
              h2 instanceof Element && l(h2) && d2.push(h2);
              if (h2 instanceof DocumentFragment)
                for (h2 = h2.firstChild; h2; h2 = h2.nextSibling)
                  c.push(h2);
              else
                c.push(h2);
            }
            k = l(this);
            ra.apply(this, e2);
            for (e2 = 0; e2 < d2.length; e2++)
              z(a, d2[e2]);
            if (k)
              for (z(a, this), e2 = 0; e2 < c.length; e2++)
                d2 = c[e2], d2 instanceof Element && x(a, d2);
          });
          void 0 !== sa && r(d, "remove", function() {
            var b2 = l(this);
            sa.call(this);
            b2 && z(a, this);
          });
        }
        ;
        function Ba() {
          function a(a2, b2) {
            Object.defineProperty(a2, "innerHTML", { enumerable: b2.enumerable, configurable: true, get: b2.get, set: function(a3) {
              var e2 = this, d2 = void 0;
              l(this) && (d2 = [], p(this, function(a4) {
                a4 !== e2 && d2.push(a4);
              }));
              b2.set.call(this, a3);
              if (d2)
                for (var f = 0; f < d2.length; f++) {
                  var t = d2[f];
                  1 === t.__CE_state && c.disconnectedCallback(t);
                }
              this.ownerDocument.__CE_hasRegistry ? A(c, this) : v(c, this);
              return a3;
            } });
          }
          function b(a2, b2) {
            r(a2, "insertAdjacentElement", function(a3, e2) {
              var d2 = l(e2);
              a3 = b2.call(this, a3, e2);
              d2 && z(c, e2);
              l(a3) && x(c, e2);
              return a3;
            });
          }
          function d(a2, b2) {
            function e2(a3, b3) {
              for (var e3 = []; a3 !== b3; a3 = a3.nextSibling)
                e3.push(a3);
              for (b3 = 0; b3 < e3.length; b3++)
                A(c, e3[b3]);
            }
            r(a2, "insertAdjacentHTML", function(a3, c2) {
              a3 = a3.toLowerCase();
              if ("beforebegin" === a3) {
                var d2 = this.previousSibling;
                b2.call(this, a3, c2);
                e2(d2 || this.parentNode.firstChild, this);
              } else if ("afterbegin" === a3)
                d2 = this.firstChild, b2.call(this, a3, c2), e2(this.firstChild, d2);
              else if ("beforeend" === a3)
                d2 = this.lastChild, b2.call(this, a3, c2), e2(d2 || this.firstChild, null);
              else if ("afterend" === a3)
                d2 = this.nextSibling, b2.call(this, a3, c2), e2(
                  this.nextSibling,
                  d2
                );
              else
                throw new SyntaxError("The value provided (" + String(a3) + ") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");
            });
          }
          var c = X;
          N && r(Element.prototype, "attachShadow", function(a2) {
            a2 = N.call(this, a2);
            var b2 = c;
            if (b2.b && !a2.__CE_patched) {
              a2.__CE_patched = true;
              for (var e2 = 0; e2 < b2.c.length; e2++)
                b2.c[e2](a2);
            }
            return this.__CE_shadowRoot = a2;
          });
          O && O.get ? a(Element.prototype, O) : W && W.get ? a(HTMLElement.prototype, W) : da(c, function(b2) {
            a(b2, {
              enumerable: true,
              configurable: true,
              get: function() {
                return H2.call(this, true).innerHTML;
              },
              set: function(a2) {
                var b3 = "template" === this.localName, c2 = b3 ? this.content : this, e2 = G.call(document, this.namespaceURI, this.localName);
                for (e2.innerHTML = a2; 0 < c2.childNodes.length; )
                  K.call(c2, c2.childNodes[0]);
                for (a2 = b3 ? e2.content : e2; 0 < a2.childNodes.length; )
                  I.call(c2, a2.childNodes[0]);
              }
            });
          });
          r(Element.prototype, "setAttribute", function(a2, b2) {
            if (1 !== this.__CE_state)
              return Q.call(this, a2, b2);
            var e2 = P.call(this, a2);
            Q.call(this, a2, b2);
            b2 = P.call(this, a2);
            c.attributeChangedCallback(this, a2, e2, b2, null);
          });
          r(Element.prototype, "setAttributeNS", function(a2, b2, d2) {
            if (1 !== this.__CE_state)
              return T.call(this, a2, b2, d2);
            var e2 = S.call(this, a2, b2);
            T.call(this, a2, b2, d2);
            d2 = S.call(this, a2, b2);
            c.attributeChangedCallback(this, b2, e2, d2, a2);
          });
          r(Element.prototype, "removeAttribute", function(a2) {
            if (1 !== this.__CE_state)
              return R.call(this, a2);
            var b2 = P.call(this, a2);
            R.call(this, a2);
            null !== b2 && c.attributeChangedCallback(this, a2, b2, null, null);
          });
          r(Element.prototype, "removeAttributeNS", function(a2, b2) {
            if (1 !== this.__CE_state)
              return U.call(this, a2, b2);
            var d2 = S.call(this, a2, b2);
            U.call(this, a2, b2);
            var e2 = S.call(
              this,
              a2,
              b2
            );
            d2 !== e2 && c.attributeChangedCallback(this, b2, d2, e2, a2);
          });
          ua ? b(HTMLElement.prototype, ua) : ma ? b(Element.prototype, ma) : console.warn("Custom Elements: `Element#insertAdjacentElement` was not patched.");
          va ? d(HTMLElement.prototype, va) : na ? d(Element.prototype, na) : console.warn("Custom Elements: `Element#insertAdjacentHTML` was not patched.");
          Y(c, Element.prototype, { h: oa, append: pa });
          Aa(c);
        }
        ;
        var Z = window.customElements;
        if (!Z || Z.forcePolyfill || "function" != typeof Z.define || "function" != typeof Z.get) {
          var X = new u2();
          xa();
          ya();
          Y(X, DocumentFragment.prototype, { h: ka, append: la });
          za();
          Ba();
          document.__CE_hasRegistry = true;
          var customElements2 = new E(X);
          Object.defineProperty(window, "customElements", { configurable: true, enumerable: true, value: customElements2 });
        }
        ;
      }).call(self);
      "string" !== typeof document.baseURI && Object.defineProperty(Document.prototype, "baseURI", { enumerable: true, configurable: true, get: function() {
        var a = document.querySelector("base");
        return a && a.href ? a.href : document.URL;
      } });
      "function" !== typeof window.CustomEvent && (window.CustomEvent = function(c, a) {
        a = a || { bubbles: false, cancelable: false, detail: void 0 };
        var b = document.createEvent("CustomEvent");
        b.initCustomEvent(c, a.bubbles, a.cancelable, a.detail);
        return b;
      }, window.CustomEvent.prototype = window.Event.prototype);
      (function(b, c, d) {
        b.composedPath || (b.composedPath = function() {
          if (this.path)
            return this.path;
          var a = this.target;
          for (this.path = []; null !== a.parentNode; )
            this.path.push(a), a = a.parentNode;
          this.path.push(c, d);
          return this.path;
        });
      })(Event.prototype, document, window);
      (function(a) {
        "function" !== typeof a.matches && (a.matches = a.msMatchesSelector || a.mozMatchesSelector || a.webkitMatchesSelector || function(a2) {
          a2 = (this.document || this.ownerDocument).querySelectorAll(a2);
          for (var b = 0; a2[b] && a2[b] !== this; )
            ++b;
          return !!a2[b];
        });
        "function" !== typeof a.closest && (a.closest = function(a2) {
          for (var b = this; b && 1 === b.nodeType; ) {
            if (b.matches(a2))
              return b;
            b = b.parentNode;
          }
          return null;
        });
      })(window.Element.prototype);
      (function(c) {
        function d(a) {
          a = b(a);
          return a && 11 === a.nodeType ? d(a.host) : a;
        }
        function b(a) {
          return a && a.parentNode ? b(a.parentNode) : a;
        }
        "function" !== typeof c.getRootNode && (c.getRootNode = function(a) {
          return a && a.composed ? d(this) : b(this);
        });
      })(Element.prototype);
      (function(a) {
        "isConnected" in a || Object.defineProperty(a, "isConnected", { configurable: true, enumerable: true, get: function() {
          var a2 = this.getRootNode({ composed: true });
          return a2 && 9 === a2.nodeType;
        } });
      })(Element.prototype);
      (function(b) {
        b.forEach(function(a) {
          a.hasOwnProperty("remove") || Object.defineProperty(a, "remove", { configurable: true, enumerable: true, writable: true, value: function() {
            null !== this.parentNode && this.parentNode.removeChild(this);
          } });
        });
      })([Element.prototype, CharacterData.prototype, DocumentType.prototype]);
      !function(e2) {
        "classList" in e2 || Object.defineProperty(e2, "classList", { get: function() {
          var e3 = this, t = (e3.getAttribute("class") || "").replace(/^\s+|\s$/g, "").split(/\s+/g);
          function n() {
            t.length > 0 ? e3.setAttribute("class", t.join(" ")) : e3.removeAttribute("class");
          }
          return "" === t[0] && t.splice(0, 1), t.toggle = function(e4, i) {
            void 0 !== i ? i ? t.add(e4) : t.remove(e4) : -1 !== t.indexOf(e4) ? t.splice(t.indexOf(e4), 1) : t.push(e4), n();
          }, t.add = function() {
            for (var e4 = [].slice.call(arguments), i = 0, s = e4.length; i < s; i++)
              -1 === t.indexOf(e4[i]) && t.push(e4[i]);
            n();
          }, t.remove = function() {
            for (var e4 = [].slice.call(arguments), i = 0, s = e4.length; i < s; i++)
              -1 !== t.indexOf(e4[i]) && t.splice(t.indexOf(e4[i]), 1);
            n();
          }, t.item = function(e4) {
            return t[e4];
          }, t.contains = function(e4) {
            return -1 !== t.indexOf(e4);
          }, t.replace = function(e4, i) {
            -1 !== t.indexOf(e4) && t.splice(t.indexOf(e4), 1, i), n();
          }, t.value = e3.getAttribute("class") || "", t;
        } });
      }(Element.prototype);
      (function(b) {
        try {
          document.body.classList.add();
        } catch (e2) {
          var c = b.add, d = b.remove;
          b.add = function() {
            for (var a = 0; a < arguments.length; a++)
              c.call(this, arguments[a]);
          };
          b.remove = function() {
            for (var a = 0; a < arguments.length; a++)
              d.call(this, arguments[a]);
          };
        }
      })(DOMTokenList.prototype);
    }
  });

  // node_modules/@ionic/core/dist/esm/polyfills/core-js.js
  var require_core_js = __commonJS({
    "node_modules/@ionic/core/dist/esm/polyfills/core-js.js"() {
      !function(t) {
        "use strict";
        !function(t2) {
          var n = {};
          function e2(r) {
            if (n[r])
              return n[r].exports;
            var o = n[r] = { i: r, l: false, exports: {} };
            return t2[r].call(o.exports, o, o.exports, e2), o.l = true, o.exports;
          }
          e2.m = t2, e2.c = n, e2.d = function(t3, n2, r) {
            e2.o(t3, n2) || Object.defineProperty(t3, n2, { enumerable: true, get: r });
          }, e2.r = function(t3) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t3, "__esModule", { value: true });
          }, e2.t = function(t3, n2) {
            if (1 & n2 && (t3 = e2(t3)), 8 & n2)
              return t3;
            if (4 & n2 && "object" == typeof t3 && t3 && t3.__esModule)
              return t3;
            var r = /* @__PURE__ */ Object.create(null);
            if (e2.r(r), Object.defineProperty(r, "default", { enumerable: true, value: t3 }), 2 & n2 && "string" != typeof t3)
              for (var o in t3)
                e2.d(r, o, function(n3) {
                  return t3[n3];
                }.bind(null, o));
            return r;
          }, e2.n = function(t3) {
            var n2 = t3 && t3.__esModule ? function() {
              return t3.default;
            } : function() {
              return t3;
            };
            return e2.d(n2, "a", n2), n2;
          }, e2.o = function(t3, n2) {
            return Object.prototype.hasOwnProperty.call(t3, n2);
          }, e2.p = "", e2(e2.s = 0);
        }([function(t2, n, e2) {
          e2(1), e2(55), e2(62), e2(68), e2(70), e2(71), e2(72), e2(73), e2(75), e2(76), e2(78), e2(87), e2(88), e2(89), e2(98), e2(99), e2(101), e2(102), e2(103), e2(105), e2(106), e2(107), e2(108), e2(110), e2(111), e2(112), e2(113), e2(114), e2(115), e2(116), e2(117), e2(118), e2(127), e2(130), e2(131), e2(133), e2(135), e2(136), e2(137), e2(138), e2(139), e2(141), e2(143), e2(146), e2(148), e2(150), e2(151), e2(153), e2(154), e2(155), e2(156), e2(157), e2(159), e2(160), e2(162), e2(163), e2(164), e2(165), e2(166), e2(167), e2(168), e2(169), e2(170), e2(172), e2(173), e2(183), e2(184), e2(185), e2(189), e2(191), e2(192), e2(193), e2(194), e2(195), e2(196), e2(198), e2(201), e2(202), e2(203), e2(204), e2(208), e2(209), e2(212), e2(213), e2(214), e2(215), e2(216), e2(217), e2(218), e2(219), e2(221), e2(222), e2(223), e2(226), e2(227), e2(228), e2(229), e2(230), e2(231), e2(232), e2(233), e2(234), e2(235), e2(236), e2(237), e2(238), e2(240), e2(241), e2(243), e2(248), t2.exports = e2(246);
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(6), i = e2(45), a = e2(14), u2 = e2(46), c = e2(39), f = e2(47), s = e2(48), l = e2(52), p = e2(49), h2 = e2(53), v = p("isConcatSpreadable"), g = h2 >= 51 || !o(function() {
            var t3 = [];
            return t3[v] = false, t3.concat()[0] !== t3;
          }), d = l("concat"), y = function(t3) {
            if (!a(t3))
              return false;
            var n2 = t3[v];
            return void 0 !== n2 ? !!n2 : i(t3);
          };
          r({ target: "Array", proto: true, forced: !g || !d }, { concat: function(t3) {
            var n2, e3, r2, o2, i2, a2 = u2(this), l2 = s(a2, 0), p2 = 0;
            for (n2 = -1, r2 = arguments.length; n2 < r2; n2++)
              if (i2 = -1 === n2 ? a2 : arguments[n2], y(i2)) {
                if (p2 + (o2 = c(i2.length)) > 9007199254740991)
                  throw TypeError("Maximum allowed index exceeded");
                for (e3 = 0; e3 < o2; e3++, p2++)
                  e3 in i2 && f(l2, p2, i2[e3]);
              } else {
                if (p2 >= 9007199254740991)
                  throw TypeError("Maximum allowed index exceeded");
                f(l2, p2++, i2);
              }
            return l2.length = p2, l2;
          } });
        }, function(t2, n, e2) {
          var r = e2(3), o = e2(4).f, i = e2(18), a = e2(21), u2 = e2(22), c = e2(32), f = e2(44);
          t2.exports = function(t3, n2) {
            var e3, s, l, p, h2, v = t3.target, g = t3.global, d = t3.stat;
            if (e3 = g ? r : d ? r[v] || u2(v, {}) : (r[v] || {}).prototype)
              for (s in n2) {
                if (p = n2[s], l = t3.noTargetGet ? (h2 = o(e3, s)) && h2.value : e3[s], !f(g ? s : v + (d ? "." : "#") + s, t3.forced) && void 0 !== l) {
                  if (typeof p == typeof l)
                    continue;
                  c(p, l);
                }
                (t3.sham || l && l.sham) && i(p, "sham", true), a(e3, s, p, t3);
              }
          };
        }, function(t2, n) {
          var e2 = function(t3) {
            return t3 && t3.Math == Math && t3;
          };
          t2.exports = e2("object" == typeof globalThis && globalThis) || e2("object" == typeof window && window) || e2("object" == typeof self && self) || e2("object" == typeof global && global) || Function("return this")();
        }, function(t2, n, e2) {
          var r = e2(5), o = e2(7), i = e2(8), a = e2(9), u2 = e2(13), c = e2(15), f = e2(16), s = Object.getOwnPropertyDescriptor;
          n.f = r ? s : function(t3, n2) {
            if (t3 = a(t3), n2 = u2(n2, true), f)
              try {
                return s(t3, n2);
              } catch (t4) {
              }
            if (c(t3, n2))
              return i(!o.f.call(t3, n2), t3[n2]);
          };
        }, function(t2, n, e2) {
          var r = e2(6);
          t2.exports = !r(function() {
            return 7 != Object.defineProperty({}, 1, { get: function() {
              return 7;
            } })[1];
          });
        }, function(t2, n) {
          t2.exports = function(t3) {
            try {
              return !!t3();
            } catch (t4) {
              return true;
            }
          };
        }, function(t2, n, e2) {
          var r = {}.propertyIsEnumerable, o = Object.getOwnPropertyDescriptor, i = o && !r.call({ 1: 2 }, 1);
          n.f = i ? function(t3) {
            var n2 = o(this, t3);
            return !!n2 && n2.enumerable;
          } : r;
        }, function(t2, n) {
          t2.exports = function(t3, n2) {
            return { enumerable: !(1 & t3), configurable: !(2 & t3), writable: !(4 & t3), value: n2 };
          };
        }, function(t2, n, e2) {
          var r = e2(10), o = e2(12);
          t2.exports = function(t3) {
            return r(o(t3));
          };
        }, function(t2, n, e2) {
          var r = e2(6), o = e2(11), i = "".split;
          t2.exports = r(function() {
            return !Object("z").propertyIsEnumerable(0);
          }) ? function(t3) {
            return "String" == o(t3) ? i.call(t3, "") : Object(t3);
          } : Object;
        }, function(t2, n) {
          var e2 = {}.toString;
          t2.exports = function(t3) {
            return e2.call(t3).slice(8, -1);
          };
        }, function(t2, n) {
          t2.exports = function(t3) {
            if (null == t3)
              throw TypeError("Can't call method on " + t3);
            return t3;
          };
        }, function(t2, n, e2) {
          var r = e2(14);
          t2.exports = function(t3, n2) {
            if (!r(t3))
              return t3;
            var e3, o;
            if (n2 && "function" == typeof (e3 = t3.toString) && !r(o = e3.call(t3)))
              return o;
            if ("function" == typeof (e3 = t3.valueOf) && !r(o = e3.call(t3)))
              return o;
            if (!n2 && "function" == typeof (e3 = t3.toString) && !r(o = e3.call(t3)))
              return o;
            throw TypeError("Can't convert object to primitive value");
          };
        }, function(t2, n) {
          t2.exports = function(t3) {
            return "object" == typeof t3 ? null !== t3 : "function" == typeof t3;
          };
        }, function(t2, n) {
          var e2 = {}.hasOwnProperty;
          t2.exports = function(t3, n2) {
            return e2.call(t3, n2);
          };
        }, function(t2, n, e2) {
          var r = e2(5), o = e2(6), i = e2(17);
          t2.exports = !r && !o(function() {
            return 7 != Object.defineProperty(i("div"), "a", { get: function() {
              return 7;
            } }).a;
          });
        }, function(t2, n, e2) {
          var r = e2(3), o = e2(14), i = r.document, a = o(i) && o(i.createElement);
          t2.exports = function(t3) {
            return a ? i.createElement(t3) : {};
          };
        }, function(t2, n, e2) {
          var r = e2(5), o = e2(19), i = e2(8);
          t2.exports = r ? function(t3, n2, e3) {
            return o.f(t3, n2, i(1, e3));
          } : function(t3, n2, e3) {
            return t3[n2] = e3, t3;
          };
        }, function(t2, n, e2) {
          var r = e2(5), o = e2(16), i = e2(20), a = e2(13), u2 = Object.defineProperty;
          n.f = r ? u2 : function(t3, n2, e3) {
            if (i(t3), n2 = a(n2, true), i(e3), o)
              try {
                return u2(t3, n2, e3);
              } catch (t4) {
              }
            if ("get" in e3 || "set" in e3)
              throw TypeError("Accessors not supported");
            return "value" in e3 && (t3[n2] = e3.value), t3;
          };
        }, function(t2, n, e2) {
          var r = e2(14);
          t2.exports = function(t3) {
            if (!r(t3))
              throw TypeError(String(t3) + " is not an object");
            return t3;
          };
        }, function(t2, n, e2) {
          var r = e2(3), o = e2(18), i = e2(15), a = e2(22), u2 = e2(23), c = e2(25), f = c.get, s = c.enforce, l = String(String).split("String");
          (t2.exports = function(t3, n2, e3, u3) {
            var c2 = !!u3 && !!u3.unsafe, f2 = !!u3 && !!u3.enumerable, p = !!u3 && !!u3.noTargetGet;
            "function" == typeof e3 && ("string" != typeof n2 || i(e3, "name") || o(e3, "name", n2), s(e3).source = l.join("string" == typeof n2 ? n2 : "")), t3 !== r ? (c2 ? !p && t3[n2] && (f2 = true) : delete t3[n2], f2 ? t3[n2] = e3 : o(t3, n2, e3)) : f2 ? t3[n2] = e3 : a(n2, e3);
          })(Function.prototype, "toString", function() {
            return "function" == typeof this && f(this).source || u2(this);
          });
        }, function(t2, n, e2) {
          var r = e2(3), o = e2(18);
          t2.exports = function(t3, n2) {
            try {
              o(r, t3, n2);
            } catch (e3) {
              r[t3] = n2;
            }
            return n2;
          };
        }, function(t2, n, e2) {
          var r = e2(24), o = Function.toString;
          "function" != typeof r.inspectSource && (r.inspectSource = function(t3) {
            return o.call(t3);
          }), t2.exports = r.inspectSource;
        }, function(t2, n, e2) {
          var r = e2(3), o = e2(22), i = r["__core-js_shared__"] || o("__core-js_shared__", {});
          t2.exports = i;
        }, function(t2, n, e2) {
          var r, o, i, a = e2(26), u2 = e2(3), c = e2(14), f = e2(18), s = e2(15), l = e2(27), p = e2(31), h2 = u2.WeakMap;
          if (a) {
            var v = new h2(), g = v.get, d = v.has, y = v.set;
            r = function(t3, n2) {
              return y.call(v, t3, n2), n2;
            }, o = function(t3) {
              return g.call(v, t3) || {};
            }, i = function(t3) {
              return d.call(v, t3);
            };
          } else {
            var x = l("state");
            p[x] = true, r = function(t3, n2) {
              return f(t3, x, n2), n2;
            }, o = function(t3) {
              return s(t3, x) ? t3[x] : {};
            }, i = function(t3) {
              return s(t3, x);
            };
          }
          t2.exports = { set: r, get: o, has: i, enforce: function(t3) {
            return i(t3) ? o(t3) : r(t3, {});
          }, getterFor: function(t3) {
            return function(n2) {
              var e3;
              if (!c(n2) || (e3 = o(n2)).type !== t3)
                throw TypeError("Incompatible receiver, " + t3 + " required");
              return e3;
            };
          } };
        }, function(t2, n, e2) {
          var r = e2(3), o = e2(23), i = r.WeakMap;
          t2.exports = "function" == typeof i && /native code/.test(o(i));
        }, function(t2, n, e2) {
          var r = e2(28), o = e2(30), i = r("keys");
          t2.exports = function(t3) {
            return i[t3] || (i[t3] = o(t3));
          };
        }, function(t2, n, e2) {
          var r = e2(29), o = e2(24);
          (t2.exports = function(t3, n2) {
            return o[t3] || (o[t3] = void 0 !== n2 ? n2 : {});
          })("versions", []).push({ version: "3.6.5", mode: r ? "pure" : "global", copyright: "\xA9 2020 Denis Pushkarev (zloirock.ru)" });
        }, function(t2, n) {
          t2.exports = false;
        }, function(t2, n) {
          var e2 = 0, r = Math.random();
          t2.exports = function(t3) {
            return "Symbol(" + String(void 0 === t3 ? "" : t3) + ")_" + (++e2 + r).toString(36);
          };
        }, function(t2, n) {
          t2.exports = {};
        }, function(t2, n, e2) {
          var r = e2(15), o = e2(33), i = e2(4), a = e2(19);
          t2.exports = function(t3, n2) {
            for (var e3 = o(n2), u2 = a.f, c = i.f, f = 0; f < e3.length; f++) {
              var s = e3[f];
              r(t3, s) || u2(t3, s, c(n2, s));
            }
          };
        }, function(t2, n, e2) {
          var r = e2(34), o = e2(36), i = e2(43), a = e2(20);
          t2.exports = r("Reflect", "ownKeys") || function(t3) {
            var n2 = o.f(a(t3)), e3 = i.f;
            return e3 ? n2.concat(e3(t3)) : n2;
          };
        }, function(t2, n, e2) {
          var r = e2(35), o = e2(3), i = function(t3) {
            return "function" == typeof t3 ? t3 : void 0;
          };
          t2.exports = function(t3, n2) {
            return arguments.length < 2 ? i(r[t3]) || i(o[t3]) : r[t3] && r[t3][n2] || o[t3] && o[t3][n2];
          };
        }, function(t2, n, e2) {
          var r = e2(3);
          t2.exports = r;
        }, function(t2, n, e2) {
          var r = e2(37), o = e2(42).concat("length", "prototype");
          n.f = Object.getOwnPropertyNames || function(t3) {
            return r(t3, o);
          };
        }, function(t2, n, e2) {
          var r = e2(15), o = e2(9), i = e2(38).indexOf, a = e2(31);
          t2.exports = function(t3, n2) {
            var e3, u2 = o(t3), c = 0, f = [];
            for (e3 in u2)
              !r(a, e3) && r(u2, e3) && f.push(e3);
            for (; n2.length > c; )
              r(u2, e3 = n2[c++]) && (~i(f, e3) || f.push(e3));
            return f;
          };
        }, function(t2, n, e2) {
          var r = e2(9), o = e2(39), i = e2(41), a = function(t3) {
            return function(n2, e3, a2) {
              var u2, c = r(n2), f = o(c.length), s = i(a2, f);
              if (t3 && e3 != e3) {
                for (; f > s; )
                  if ((u2 = c[s++]) != u2)
                    return true;
              } else
                for (; f > s; s++)
                  if ((t3 || s in c) && c[s] === e3)
                    return t3 || s || 0;
              return !t3 && -1;
            };
          };
          t2.exports = { includes: a(true), indexOf: a(false) };
        }, function(t2, n, e2) {
          var r = e2(40), o = Math.min;
          t2.exports = function(t3) {
            return t3 > 0 ? o(r(t3), 9007199254740991) : 0;
          };
        }, function(t2, n) {
          var e2 = Math.ceil, r = Math.floor;
          t2.exports = function(t3) {
            return isNaN(t3 = +t3) ? 0 : (t3 > 0 ? r : e2)(t3);
          };
        }, function(t2, n, e2) {
          var r = e2(40), o = Math.max, i = Math.min;
          t2.exports = function(t3, n2) {
            var e3 = r(t3);
            return e3 < 0 ? o(e3 + n2, 0) : i(e3, n2);
          };
        }, function(t2, n) {
          t2.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
        }, function(t2, n) {
          n.f = Object.getOwnPropertySymbols;
        }, function(t2, n, e2) {
          var r = e2(6), o = /#|\.prototype\./, i = function(t3, n2) {
            var e3 = u2[a(t3)];
            return e3 == f || e3 != c && ("function" == typeof n2 ? r(n2) : !!n2);
          }, a = i.normalize = function(t3) {
            return String(t3).replace(o, ".").toLowerCase();
          }, u2 = i.data = {}, c = i.NATIVE = "N", f = i.POLYFILL = "P";
          t2.exports = i;
        }, function(t2, n, e2) {
          var r = e2(11);
          t2.exports = Array.isArray || function(t3) {
            return "Array" == r(t3);
          };
        }, function(t2, n, e2) {
          var r = e2(12);
          t2.exports = function(t3) {
            return Object(r(t3));
          };
        }, function(t2, n, e2) {
          var r = e2(13), o = e2(19), i = e2(8);
          t2.exports = function(t3, n2, e3) {
            var a = r(n2);
            a in t3 ? o.f(t3, a, i(0, e3)) : t3[a] = e3;
          };
        }, function(t2, n, e2) {
          var r = e2(14), o = e2(45), i = e2(49)("species");
          t2.exports = function(t3, n2) {
            var e3;
            return o(t3) && ("function" != typeof (e3 = t3.constructor) || e3 !== Array && !o(e3.prototype) ? r(e3) && null === (e3 = e3[i]) && (e3 = void 0) : e3 = void 0), new (void 0 === e3 ? Array : e3)(0 === n2 ? 0 : n2);
          };
        }, function(t2, n, e2) {
          var r = e2(3), o = e2(28), i = e2(15), a = e2(30), u2 = e2(50), c = e2(51), f = o("wks"), s = r.Symbol, l = c ? s : s && s.withoutSetter || a;
          t2.exports = function(t3) {
            return i(f, t3) || (u2 && i(s, t3) ? f[t3] = s[t3] : f[t3] = l("Symbol." + t3)), f[t3];
          };
        }, function(t2, n, e2) {
          var r = e2(6);
          t2.exports = !!Object.getOwnPropertySymbols && !r(function() {
            return !String(Symbol());
          });
        }, function(t2, n, e2) {
          var r = e2(50);
          t2.exports = r && !Symbol.sham && "symbol" == typeof Symbol.iterator;
        }, function(t2, n, e2) {
          var r = e2(6), o = e2(49), i = e2(53), a = o("species");
          t2.exports = function(t3) {
            return i >= 51 || !r(function() {
              var n2 = [];
              return (n2.constructor = {})[a] = function() {
                return { foo: 1 };
              }, 1 !== n2[t3](Boolean).foo;
            });
          };
        }, function(t2, n, e2) {
          var r, o, i = e2(3), a = e2(54), u2 = i.process, c = u2 && u2.versions, f = c && c.v8;
          f ? o = (r = f.split("."))[0] + r[1] : a && (!(r = a.match(/Edge\/(\d+)/)) || r[1] >= 74) && (r = a.match(/Chrome\/(\d+)/)) && (o = r[1]), t2.exports = o && +o;
        }, function(t2, n, e2) {
          var r = e2(34);
          t2.exports = r("navigator", "userAgent") || "";
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(56), i = e2(57);
          r({ target: "Array", proto: true }, { copyWithin: o }), i("copyWithin");
        }, function(t2, n, e2) {
          var r = e2(46), o = e2(41), i = e2(39), a = Math.min;
          t2.exports = [].copyWithin || function(t3, n2) {
            var e3 = r(this), u2 = i(e3.length), c = o(t3, u2), f = o(n2, u2), s = arguments.length > 2 ? arguments[2] : void 0, l = a((void 0 === s ? u2 : o(s, u2)) - f, u2 - c), p = 1;
            for (f < c && c < f + l && (p = -1, f += l - 1, c += l - 1); l-- > 0; )
              f in e3 ? e3[c] = e3[f] : delete e3[c], c += p, f += p;
            return e3;
          };
        }, function(t2, n, e2) {
          var r = e2(49), o = e2(58), i = e2(19), a = r("unscopables"), u2 = Array.prototype;
          null == u2[a] && i.f(u2, a, { configurable: true, value: o(null) }), t2.exports = function(t3) {
            u2[a][t3] = true;
          };
        }, function(t2, n, e2) {
          var r, o = e2(20), i = e2(59), a = e2(42), u2 = e2(31), c = e2(61), f = e2(17), s = e2(27), l = s("IE_PROTO"), p = function() {
          }, h2 = function(t3) {
            return "<script>" + t3 + "<\/script>";
          }, v = function() {
            try {
              r = document.domain && new ActiveXObject("htmlfile");
            } catch (t4) {
            }
            var t3, n2;
            v = r ? function(t4) {
              t4.write(h2("")), t4.close();
              var n3 = t4.parentWindow.Object;
              return t4 = null, n3;
            }(r) : ((n2 = f("iframe")).style.display = "none", c.appendChild(n2), n2.src = String("javascript:"), (t3 = n2.contentWindow.document).open(), t3.write(h2("document.F=Object")), t3.close(), t3.F);
            for (var e3 = a.length; e3--; )
              delete v.prototype[a[e3]];
            return v();
          };
          u2[l] = true, t2.exports = Object.create || function(t3, n2) {
            var e3;
            return null !== t3 ? (p.prototype = o(t3), e3 = new p(), p.prototype = null, e3[l] = t3) : e3 = v(), void 0 === n2 ? e3 : i(e3, n2);
          };
        }, function(t2, n, e2) {
          var r = e2(5), o = e2(19), i = e2(20), a = e2(60);
          t2.exports = r ? Object.defineProperties : function(t3, n2) {
            i(t3);
            for (var e3, r2 = a(n2), u2 = r2.length, c = 0; u2 > c; )
              o.f(t3, e3 = r2[c++], n2[e3]);
            return t3;
          };
        }, function(t2, n, e2) {
          var r = e2(37), o = e2(42);
          t2.exports = Object.keys || function(t3) {
            return r(t3, o);
          };
        }, function(t2, n, e2) {
          var r = e2(34);
          t2.exports = r("document", "documentElement");
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(63).every, i = e2(66), a = e2(67), u2 = i("every"), c = a("every");
          r({ target: "Array", proto: true, forced: !u2 || !c }, { every: function(t3) {
            return o(this, t3, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(t2, n, e2) {
          var r = e2(64), o = e2(10), i = e2(46), a = e2(39), u2 = e2(48), c = [].push, f = function(t3) {
            var n2 = 1 == t3, e3 = 2 == t3, f2 = 3 == t3, s = 4 == t3, l = 6 == t3, p = 5 == t3 || l;
            return function(h2, v, g, d) {
              for (var y, x, m = i(h2), b = o(m), S = r(v, g, 3), E = a(b.length), w = 0, O = d || u2, R = n2 ? O(h2, E) : e3 ? O(h2, 0) : void 0; E > w; w++)
                if ((p || w in b) && (x = S(y = b[w], w, m), t3)) {
                  if (n2)
                    R[w] = x;
                  else if (x)
                    switch (t3) {
                      case 3:
                        return true;
                      case 5:
                        return y;
                      case 6:
                        return w;
                      case 2:
                        c.call(R, y);
                    }
                  else if (s)
                    return false;
                }
              return l ? -1 : f2 || s ? s : R;
            };
          };
          t2.exports = { forEach: f(0), map: f(1), filter: f(2), some: f(3), every: f(4), find: f(5), findIndex: f(6) };
        }, function(t2, n, e2) {
          var r = e2(65);
          t2.exports = function(t3, n2, e3) {
            if (r(t3), void 0 === n2)
              return t3;
            switch (e3) {
              case 0:
                return function() {
                  return t3.call(n2);
                };
              case 1:
                return function(e4) {
                  return t3.call(n2, e4);
                };
              case 2:
                return function(e4, r2) {
                  return t3.call(n2, e4, r2);
                };
              case 3:
                return function(e4, r2, o) {
                  return t3.call(n2, e4, r2, o);
                };
            }
            return function() {
              return t3.apply(n2, arguments);
            };
          };
        }, function(t2, n) {
          t2.exports = function(t3) {
            if ("function" != typeof t3)
              throw TypeError(String(t3) + " is not a function");
            return t3;
          };
        }, function(t2, n, e2) {
          var r = e2(6);
          t2.exports = function(t3, n2) {
            var e3 = [][t3];
            return !!e3 && r(function() {
              e3.call(null, n2 || function() {
                throw 1;
              }, 1);
            });
          };
        }, function(t2, n, e2) {
          var r = e2(5), o = e2(6), i = e2(15), a = Object.defineProperty, u2 = {}, c = function(t3) {
            throw t3;
          };
          t2.exports = function(t3, n2) {
            if (i(u2, t3))
              return u2[t3];
            n2 || (n2 = {});
            var e3 = [][t3], f = !!i(n2, "ACCESSORS") && n2.ACCESSORS, s = i(n2, 0) ? n2[0] : c, l = i(n2, 1) ? n2[1] : void 0;
            return u2[t3] = !!e3 && !o(function() {
              if (f && !r)
                return true;
              var t4 = { length: -1 };
              f ? a(t4, 1, { enumerable: true, get: c }) : t4[1] = 1, e3.call(t4, s, l);
            });
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(69), i = e2(57);
          r({ target: "Array", proto: true }, { fill: o }), i("fill");
        }, function(t2, n, e2) {
          var r = e2(46), o = e2(41), i = e2(39);
          t2.exports = function(t3) {
            for (var n2 = r(this), e3 = i(n2.length), a = arguments.length, u2 = o(a > 1 ? arguments[1] : void 0, e3), c = a > 2 ? arguments[2] : void 0, f = void 0 === c ? e3 : o(c, e3); f > u2; )
              n2[u2++] = t3;
            return n2;
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(63).filter, i = e2(52), a = e2(67), u2 = i("filter"), c = a("filter");
          r({ target: "Array", proto: true, forced: !u2 || !c }, { filter: function(t3) {
            return o(this, t3, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(63).find, i = e2(57), a = e2(67), u2 = true, c = a("find");
          "find" in [] && Array(1).find(function() {
            u2 = false;
          }), r({ target: "Array", proto: true, forced: u2 || !c }, { find: function(t3) {
            return o(this, t3, arguments.length > 1 ? arguments[1] : void 0);
          } }), i("find");
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(63).findIndex, i = e2(57), a = e2(67), u2 = true, c = a("findIndex");
          "findIndex" in [] && Array(1).findIndex(function() {
            u2 = false;
          }), r({ target: "Array", proto: true, forced: u2 || !c }, { findIndex: function(t3) {
            return o(this, t3, arguments.length > 1 ? arguments[1] : void 0);
          } }), i("findIndex");
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(74), i = e2(46), a = e2(39), u2 = e2(40), c = e2(48);
          r({ target: "Array", proto: true }, { flat: function() {
            var t3 = arguments.length ? arguments[0] : void 0, n2 = i(this), e3 = a(n2.length), r2 = c(n2, 0);
            return r2.length = o(r2, n2, n2, e3, 0, void 0 === t3 ? 1 : u2(t3)), r2;
          } });
        }, function(t2, n, e2) {
          var r = e2(45), o = e2(39), i = e2(64), a = function(t3, n2, e3, u2, c, f, s, l) {
            for (var p, h2 = c, v = 0, g = !!s && i(s, l, 3); v < u2; ) {
              if (v in e3) {
                if (p = g ? g(e3[v], v, n2) : e3[v], f > 0 && r(p))
                  h2 = a(t3, n2, p, o(p.length), h2, f - 1) - 1;
                else {
                  if (h2 >= 9007199254740991)
                    throw TypeError("Exceed the acceptable array length");
                  t3[h2] = p;
                }
                h2++;
              }
              v++;
            }
            return h2;
          };
          t2.exports = a;
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(74), i = e2(46), a = e2(39), u2 = e2(65), c = e2(48);
          r({ target: "Array", proto: true }, { flatMap: function(t3) {
            var n2, e3 = i(this), r2 = a(e3.length);
            return u2(t3), (n2 = c(e3, 0)).length = o(n2, e3, e3, r2, 0, 1, t3, arguments.length > 1 ? arguments[1] : void 0), n2;
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(77);
          r({ target: "Array", proto: true, forced: [].forEach != o }, { forEach: o });
        }, function(t2, n, e2) {
          var r = e2(63).forEach, o = e2(66), i = e2(67), a = o("forEach"), u2 = i("forEach");
          t2.exports = a && u2 ? [].forEach : function(t3) {
            return r(this, t3, arguments.length > 1 ? arguments[1] : void 0);
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(79);
          r({ target: "Array", stat: true, forced: !e2(86)(function(t3) {
            Array.from(t3);
          }) }, { from: o });
        }, function(t2, n, e2) {
          var r = e2(64), o = e2(46), i = e2(80), a = e2(81), u2 = e2(39), c = e2(47), f = e2(83);
          t2.exports = function(t3) {
            var n2, e3, s, l, p, h2, v = o(t3), g = "function" == typeof this ? this : Array, d = arguments.length, y = d > 1 ? arguments[1] : void 0, x = void 0 !== y, m = f(v), b = 0;
            if (x && (y = r(y, d > 2 ? arguments[2] : void 0, 2)), null == m || g == Array && a(m))
              for (e3 = new g(n2 = u2(v.length)); n2 > b; b++)
                h2 = x ? y(v[b], b) : v[b], c(e3, b, h2);
            else
              for (p = (l = m.call(v)).next, e3 = new g(); !(s = p.call(l)).done; b++)
                h2 = x ? i(l, y, [s.value, b], true) : s.value, c(e3, b, h2);
            return e3.length = b, e3;
          };
        }, function(t2, n, e2) {
          var r = e2(20);
          t2.exports = function(t3, n2, e3, o) {
            try {
              return o ? n2(r(e3)[0], e3[1]) : n2(e3);
            } catch (n3) {
              var i = t3.return;
              throw void 0 !== i && r(i.call(t3)), n3;
            }
          };
        }, function(t2, n, e2) {
          var r = e2(49), o = e2(82), i = r("iterator"), a = Array.prototype;
          t2.exports = function(t3) {
            return void 0 !== t3 && (o.Array === t3 || a[i] === t3);
          };
        }, function(t2, n) {
          t2.exports = {};
        }, function(t2, n, e2) {
          var r = e2(84), o = e2(82), i = e2(49)("iterator");
          t2.exports = function(t3) {
            if (null != t3)
              return t3[i] || t3["@@iterator"] || o[r(t3)];
          };
        }, function(t2, n, e2) {
          var r = e2(85), o = e2(11), i = e2(49)("toStringTag"), a = "Arguments" == o(/* @__PURE__ */ function() {
            return arguments;
          }());
          t2.exports = r ? o : function(t3) {
            var n2, e3, r2;
            return void 0 === t3 ? "Undefined" : null === t3 ? "Null" : "string" == typeof (e3 = function(t4, n3) {
              try {
                return t4[n3];
              } catch (t5) {
              }
            }(n2 = Object(t3), i)) ? e3 : a ? o(n2) : "Object" == (r2 = o(n2)) && "function" == typeof n2.callee ? "Arguments" : r2;
          };
        }, function(t2, n, e2) {
          var r = {};
          r[e2(49)("toStringTag")] = "z", t2.exports = "[object z]" === String(r);
        }, function(t2, n, e2) {
          var r = e2(49)("iterator"), o = false;
          try {
            var i = 0, a = { next: function() {
              return { done: !!i++ };
            }, return: function() {
              o = true;
            } };
            a[r] = function() {
              return this;
            }, Array.from(a, function() {
              throw 2;
            });
          } catch (t3) {
          }
          t2.exports = function(t3, n2) {
            if (!n2 && !o)
              return false;
            var e3 = false;
            try {
              var i2 = {};
              i2[r] = function() {
                return { next: function() {
                  return { done: e3 = true };
                } };
              }, t3(i2);
            } catch (t4) {
            }
            return e3;
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(38).includes, i = e2(57);
          r({ target: "Array", proto: true, forced: !e2(67)("indexOf", { ACCESSORS: true, 1: 0 }) }, { includes: function(t3) {
            return o(this, t3, arguments.length > 1 ? arguments[1] : void 0);
          } }), i("includes");
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(38).indexOf, i = e2(66), a = e2(67), u2 = [].indexOf, c = !!u2 && 1 / [1].indexOf(1, -0) < 0, f = i("indexOf"), s = a("indexOf", { ACCESSORS: true, 1: 0 });
          r({ target: "Array", proto: true, forced: c || !f || !s }, { indexOf: function(t3) {
            return c ? u2.apply(this, arguments) || 0 : o(this, t3, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(t2, n, e2) {
          var r = e2(9), o = e2(57), i = e2(82), a = e2(25), u2 = e2(90), c = a.set, f = a.getterFor("Array Iterator");
          t2.exports = u2(Array, "Array", function(t3, n2) {
            c(this, { type: "Array Iterator", target: r(t3), index: 0, kind: n2 });
          }, function() {
            var t3 = f(this), n2 = t3.target, e3 = t3.kind, r2 = t3.index++;
            return !n2 || r2 >= n2.length ? (t3.target = void 0, { value: void 0, done: true }) : "keys" == e3 ? { value: r2, done: false } : "values" == e3 ? { value: n2[r2], done: false } : { value: [r2, n2[r2]], done: false };
          }, "values"), i.Arguments = i.Array, o("keys"), o("values"), o("entries");
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(91), i = e2(93), a = e2(96), u2 = e2(95), c = e2(18), f = e2(21), s = e2(49), l = e2(29), p = e2(82), h2 = e2(92), v = h2.IteratorPrototype, g = h2.BUGGY_SAFARI_ITERATORS, d = s("iterator"), y = function() {
            return this;
          };
          t2.exports = function(t3, n2, e3, s2, h3, x, m) {
            o(e3, n2, s2);
            var b, S, E, w = function(t4) {
              if (t4 === h3 && I)
                return I;
              if (!g && t4 in A)
                return A[t4];
              switch (t4) {
                case "keys":
                case "values":
                case "entries":
                  return function() {
                    return new e3(this, t4);
                  };
              }
              return function() {
                return new e3(this);
              };
            }, O = n2 + " Iterator", R = false, A = t3.prototype, j = A[d] || A["@@iterator"] || h3 && A[h3], I = !g && j || w(h3), k = "Array" == n2 && A.entries || j;
            if (k && (b = i(k.call(new t3())), v !== Object.prototype && b.next && (l || i(b) === v || (a ? a(b, v) : "function" != typeof b[d] && c(b, d, y)), u2(b, O, true, true), l && (p[O] = y))), "values" == h3 && j && "values" !== j.name && (R = true, I = function() {
              return j.call(this);
            }), l && !m || A[d] === I || c(A, d, I), p[n2] = I, h3)
              if (S = { values: w("values"), keys: x ? I : w("keys"), entries: w("entries") }, m)
                for (E in S)
                  (g || R || !(E in A)) && f(A, E, S[E]);
              else
                r({ target: n2, proto: true, forced: g || R }, S);
            return S;
          };
        }, function(t2, n, e2) {
          var r = e2(92).IteratorPrototype, o = e2(58), i = e2(8), a = e2(95), u2 = e2(82), c = function() {
            return this;
          };
          t2.exports = function(t3, n2, e3) {
            var f = n2 + " Iterator";
            return t3.prototype = o(r, { next: i(1, e3) }), a(t3, f, false, true), u2[f] = c, t3;
          };
        }, function(t2, n, e2) {
          var r, o, i, a = e2(93), u2 = e2(18), c = e2(15), f = e2(49), s = e2(29), l = f("iterator"), p = false;
          [].keys && ("next" in (i = [].keys()) ? (o = a(a(i))) !== Object.prototype && (r = o) : p = true), null == r && (r = {}), s || c(r, l) || u2(r, l, function() {
            return this;
          }), t2.exports = { IteratorPrototype: r, BUGGY_SAFARI_ITERATORS: p };
        }, function(t2, n, e2) {
          var r = e2(15), o = e2(46), i = e2(27), a = e2(94), u2 = i("IE_PROTO"), c = Object.prototype;
          t2.exports = a ? Object.getPrototypeOf : function(t3) {
            return t3 = o(t3), r(t3, u2) ? t3[u2] : "function" == typeof t3.constructor && t3 instanceof t3.constructor ? t3.constructor.prototype : t3 instanceof Object ? c : null;
          };
        }, function(t2, n, e2) {
          var r = e2(6);
          t2.exports = !r(function() {
            function t3() {
            }
            return t3.prototype.constructor = null, Object.getPrototypeOf(new t3()) !== t3.prototype;
          });
        }, function(t2, n, e2) {
          var r = e2(19).f, o = e2(15), i = e2(49)("toStringTag");
          t2.exports = function(t3, n2, e3) {
            t3 && !o(t3 = e3 ? t3 : t3.prototype, i) && r(t3, i, { configurable: true, value: n2 });
          };
        }, function(t2, n, e2) {
          var r = e2(20), o = e2(97);
          t2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
            var t3, n2 = false, e3 = {};
            try {
              (t3 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(e3, []), n2 = e3 instanceof Array;
            } catch (t4) {
            }
            return function(e4, i) {
              return r(e4), o(i), n2 ? t3.call(e4, i) : e4.__proto__ = i, e4;
            };
          }() : void 0);
        }, function(t2, n, e2) {
          var r = e2(14);
          t2.exports = function(t3) {
            if (!r(t3) && null !== t3)
              throw TypeError("Can't set " + String(t3) + " as a prototype");
            return t3;
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(10), i = e2(9), a = e2(66), u2 = [].join, c = o != Object, f = a("join", ",");
          r({ target: "Array", proto: true, forced: c || !f }, { join: function(t3) {
            return u2.call(i(this), void 0 === t3 ? "," : t3);
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(100);
          r({ target: "Array", proto: true, forced: o !== [].lastIndexOf }, { lastIndexOf: o });
        }, function(t2, n, e2) {
          var r = e2(9), o = e2(40), i = e2(39), a = e2(66), u2 = e2(67), c = Math.min, f = [].lastIndexOf, s = !!f && 1 / [1].lastIndexOf(1, -0) < 0, l = a("lastIndexOf"), p = u2("indexOf", { ACCESSORS: true, 1: 0 }), h2 = s || !l || !p;
          t2.exports = h2 ? function(t3) {
            if (s)
              return f.apply(this, arguments) || 0;
            var n2 = r(this), e3 = i(n2.length), a2 = e3 - 1;
            for (arguments.length > 1 && (a2 = c(a2, o(arguments[1]))), a2 < 0 && (a2 = e3 + a2); a2 >= 0; a2--)
              if (a2 in n2 && n2[a2] === t3)
                return a2 || 0;
            return -1;
          } : f;
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(63).map, i = e2(52), a = e2(67), u2 = i("map"), c = a("map");
          r({ target: "Array", proto: true, forced: !u2 || !c }, { map: function(t3) {
            return o(this, t3, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(6), i = e2(47);
          r({ target: "Array", stat: true, forced: o(function() {
            function t3() {
            }
            return !(Array.of.call(t3) instanceof t3);
          }) }, { of: function() {
            for (var t3 = 0, n2 = arguments.length, e3 = new ("function" == typeof this ? this : Array)(n2); n2 > t3; )
              i(e3, t3, arguments[t3++]);
            return e3.length = n2, e3;
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(104).left, i = e2(66), a = e2(67), u2 = i("reduce"), c = a("reduce", { 1: 0 });
          r({ target: "Array", proto: true, forced: !u2 || !c }, { reduce: function(t3) {
            return o(this, t3, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(t2, n, e2) {
          var r = e2(65), o = e2(46), i = e2(10), a = e2(39), u2 = function(t3) {
            return function(n2, e3, u3, c) {
              r(e3);
              var f = o(n2), s = i(f), l = a(f.length), p = t3 ? l - 1 : 0, h2 = t3 ? -1 : 1;
              if (u3 < 2)
                for (; ; ) {
                  if (p in s) {
                    c = s[p], p += h2;
                    break;
                  }
                  if (p += h2, t3 ? p < 0 : l <= p)
                    throw TypeError("Reduce of empty array with no initial value");
                }
              for (; t3 ? p >= 0 : l > p; p += h2)
                p in s && (c = e3(c, s[p], p, f));
              return c;
            };
          };
          t2.exports = { left: u2(false), right: u2(true) };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(104).right, i = e2(66), a = e2(67), u2 = i("reduceRight"), c = a("reduce", { 1: 0 });
          r({ target: "Array", proto: true, forced: !u2 || !c }, { reduceRight: function(t3) {
            return o(this, t3, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(14), i = e2(45), a = e2(41), u2 = e2(39), c = e2(9), f = e2(47), s = e2(49), l = e2(52), p = e2(67), h2 = l("slice"), v = p("slice", { ACCESSORS: true, 0: 0, 1: 2 }), g = s("species"), d = [].slice, y = Math.max;
          r({ target: "Array", proto: true, forced: !h2 || !v }, { slice: function(t3, n2) {
            var e3, r2, s2, l2 = c(this), p2 = u2(l2.length), h3 = a(t3, p2), v2 = a(void 0 === n2 ? p2 : n2, p2);
            if (i(l2) && ("function" != typeof (e3 = l2.constructor) || e3 !== Array && !i(e3.prototype) ? o(e3) && null === (e3 = e3[g]) && (e3 = void 0) : e3 = void 0, e3 === Array || void 0 === e3))
              return d.call(l2, h3, v2);
            for (r2 = new (void 0 === e3 ? Array : e3)(y(v2 - h3, 0)), s2 = 0; h3 < v2; h3++, s2++)
              h3 in l2 && f(r2, s2, l2[h3]);
            return r2.length = s2, r2;
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(63).some, i = e2(66), a = e2(67), u2 = i("some"), c = a("some");
          r({ target: "Array", proto: true, forced: !u2 || !c }, { some: function(t3) {
            return o(this, t3, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(t2, n, e2) {
          e2(109)("Array");
        }, function(t2, n, e2) {
          var r = e2(34), o = e2(19), i = e2(49), a = e2(5), u2 = i("species");
          t2.exports = function(t3) {
            var n2 = r(t3), e3 = o.f;
            a && n2 && !n2[u2] && e3(n2, u2, { configurable: true, get: function() {
              return this;
            } });
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(41), i = e2(40), a = e2(39), u2 = e2(46), c = e2(48), f = e2(47), s = e2(52), l = e2(67), p = s("splice"), h2 = l("splice", { ACCESSORS: true, 0: 0, 1: 2 }), v = Math.max, g = Math.min;
          r({ target: "Array", proto: true, forced: !p || !h2 }, { splice: function(t3, n2) {
            var e3, r2, s2, l2, p2, h3, d = u2(this), y = a(d.length), x = o(t3, y), m = arguments.length;
            if (0 === m ? e3 = r2 = 0 : 1 === m ? (e3 = 0, r2 = y - x) : (e3 = m - 2, r2 = g(v(i(n2), 0), y - x)), y + e3 - r2 > 9007199254740991)
              throw TypeError("Maximum allowed length exceeded");
            for (s2 = c(d, r2), l2 = 0; l2 < r2; l2++)
              (p2 = x + l2) in d && f(s2, l2, d[p2]);
            if (s2.length = r2, e3 < r2) {
              for (l2 = x; l2 < y - r2; l2++)
                h3 = l2 + e3, (p2 = l2 + r2) in d ? d[h3] = d[p2] : delete d[h3];
              for (l2 = y; l2 > y - r2 + e3; l2--)
                delete d[l2 - 1];
            } else if (e3 > r2)
              for (l2 = y - r2; l2 > x; l2--)
                h3 = l2 + e3 - 1, (p2 = l2 + r2 - 1) in d ? d[h3] = d[p2] : delete d[h3];
            for (l2 = 0; l2 < e3; l2++)
              d[l2 + x] = arguments[l2 + 2];
            return d.length = y - r2 + e3, s2;
          } });
        }, function(t2, n, e2) {
          e2(57)("flat");
        }, function(t2, n, e2) {
          e2(57)("flatMap");
        }, function(t2, n, e2) {
          var r = e2(14), o = e2(19), i = e2(93), a = e2(49)("hasInstance"), u2 = Function.prototype;
          a in u2 || o.f(u2, a, { value: function(t3) {
            if ("function" != typeof this || !r(t3))
              return false;
            if (!r(this.prototype))
              return t3 instanceof this;
            for (; t3 = i(t3); )
              if (this.prototype === t3)
                return true;
            return false;
          } });
        }, function(t2, n, e2) {
          var r = e2(5), o = e2(19).f, i = Function.prototype, a = i.toString, u2 = /^\s*function ([^ (]*)/;
          r && !("name" in i) && o(i, "name", { configurable: true, get: function() {
            try {
              return a.call(this).match(u2)[1];
            } catch (t3) {
              return "";
            }
          } });
        }, function(t2, n, e2) {
          e2(2)({ global: true }, { globalThis: e2(3) });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(34), i = e2(6), a = o("JSON", "stringify"), u2 = /[\uD800-\uDFFF]/g, c = /^[\uD800-\uDBFF]$/, f = /^[\uDC00-\uDFFF]$/, s = function(t3, n2, e3) {
            var r2 = e3.charAt(n2 - 1), o2 = e3.charAt(n2 + 1);
            return c.test(t3) && !f.test(o2) || f.test(t3) && !c.test(r2) ? "\\u" + t3.charCodeAt(0).toString(16) : t3;
          }, l = i(function() {
            return '"\\udf06\\ud834"' !== a("\uDF06\uD834") || '"\\udead"' !== a("\uDEAD");
          });
          a && r({ target: "JSON", stat: true, forced: l }, { stringify: function(t3, n2, e3) {
            var r2 = a.apply(null, arguments);
            return "string" == typeof r2 ? r2.replace(u2, s) : r2;
          } });
        }, function(t2, n, e2) {
          var r = e2(3);
          e2(95)(r.JSON, "JSON", true);
        }, function(t2, n, e2) {
          var r = e2(119), o = e2(125);
          t2.exports = r("Map", function(t3) {
            return function() {
              return t3(this, arguments.length ? arguments[0] : void 0);
            };
          }, o);
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(3), i = e2(44), a = e2(21), u2 = e2(120), c = e2(122), f = e2(123), s = e2(14), l = e2(6), p = e2(86), h2 = e2(95), v = e2(124);
          t2.exports = function(t3, n2, e3) {
            var g = -1 !== t3.indexOf("Map"), d = -1 !== t3.indexOf("Weak"), y = g ? "set" : "add", x = o[t3], m = x && x.prototype, b = x, S = {}, E = function(t4) {
              var n3 = m[t4];
              a(m, t4, "add" == t4 ? function(t5) {
                return n3.call(this, 0 === t5 ? 0 : t5), this;
              } : "delete" == t4 ? function(t5) {
                return !(d && !s(t5)) && n3.call(this, 0 === t5 ? 0 : t5);
              } : "get" == t4 ? function(t5) {
                return d && !s(t5) ? void 0 : n3.call(this, 0 === t5 ? 0 : t5);
              } : "has" == t4 ? function(t5) {
                return !(d && !s(t5)) && n3.call(this, 0 === t5 ? 0 : t5);
              } : function(t5, e4) {
                return n3.call(this, 0 === t5 ? 0 : t5, e4), this;
              });
            };
            if (i(t3, "function" != typeof x || !(d || m.forEach && !l(function() {
              new x().entries().next();
            }))))
              b = e3.getConstructor(n2, t3, g, y), u2.REQUIRED = true;
            else if (i(t3, true)) {
              var w = new b(), O = w[y](d ? {} : -0, 1) != w, R = l(function() {
                w.has(1);
              }), A = p(function(t4) {
                new x(t4);
              }), j = !d && l(function() {
                for (var t4 = new x(), n3 = 5; n3--; )
                  t4[y](n3, n3);
                return !t4.has(-0);
              });
              A || ((b = n2(function(n3, e4) {
                f(n3, b, t3);
                var r2 = v(new x(), n3, b);
                return null != e4 && c(e4, r2[y], r2, g), r2;
              })).prototype = m, m.constructor = b), (R || j) && (E("delete"), E("has"), g && E("get")), (j || O) && E(y), d && m.clear && delete m.clear;
            }
            return S[t3] = b, r({ global: true, forced: b != x }, S), h2(b, t3), d || e3.setStrong(b, t3, g), b;
          };
        }, function(t2, n, e2) {
          var r = e2(31), o = e2(14), i = e2(15), a = e2(19).f, u2 = e2(30), c = e2(121), f = u2("meta"), s = 0, l = Object.isExtensible || function() {
            return true;
          }, p = function(t3) {
            a(t3, f, { value: { objectID: "O" + ++s, weakData: {} } });
          }, h2 = t2.exports = { REQUIRED: false, fastKey: function(t3, n2) {
            if (!o(t3))
              return "symbol" == typeof t3 ? t3 : ("string" == typeof t3 ? "S" : "P") + t3;
            if (!i(t3, f)) {
              if (!l(t3))
                return "F";
              if (!n2)
                return "E";
              p(t3);
            }
            return t3[f].objectID;
          }, getWeakData: function(t3, n2) {
            if (!i(t3, f)) {
              if (!l(t3))
                return true;
              if (!n2)
                return false;
              p(t3);
            }
            return t3[f].weakData;
          }, onFreeze: function(t3) {
            return c && h2.REQUIRED && l(t3) && !i(t3, f) && p(t3), t3;
          } };
          r[f] = true;
        }, function(t2, n, e2) {
          var r = e2(6);
          t2.exports = !r(function() {
            return Object.isExtensible(Object.preventExtensions({}));
          });
        }, function(t2, n, e2) {
          var r = e2(20), o = e2(81), i = e2(39), a = e2(64), u2 = e2(83), c = e2(80), f = function(t3, n2) {
            this.stopped = t3, this.result = n2;
          };
          (t2.exports = function(t3, n2, e3, s, l) {
            var p, h2, v, g, d, y, x, m = a(n2, e3, s ? 2 : 1);
            if (l)
              p = t3;
            else {
              if ("function" != typeof (h2 = u2(t3)))
                throw TypeError("Target is not iterable");
              if (o(h2)) {
                for (v = 0, g = i(t3.length); g > v; v++)
                  if ((d = s ? m(r(x = t3[v])[0], x[1]) : m(t3[v])) && d instanceof f)
                    return d;
                return new f(false);
              }
              p = h2.call(t3);
            }
            for (y = p.next; !(x = y.call(p)).done; )
              if ("object" == typeof (d = c(p, m, x.value, s)) && d && d instanceof f)
                return d;
            return new f(false);
          }).stop = function(t3) {
            return new f(true, t3);
          };
        }, function(t2, n) {
          t2.exports = function(t3, n2, e2) {
            if (!(t3 instanceof n2))
              throw TypeError("Incorrect " + (e2 ? e2 + " " : "") + "invocation");
            return t3;
          };
        }, function(t2, n, e2) {
          var r = e2(14), o = e2(96);
          t2.exports = function(t3, n2, e3) {
            var i, a;
            return o && "function" == typeof (i = n2.constructor) && i !== e3 && r(a = i.prototype) && a !== e3.prototype && o(t3, a), t3;
          };
        }, function(t2, n, e2) {
          var r = e2(19).f, o = e2(58), i = e2(126), a = e2(64), u2 = e2(123), c = e2(122), f = e2(90), s = e2(109), l = e2(5), p = e2(120).fastKey, h2 = e2(25), v = h2.set, g = h2.getterFor;
          t2.exports = { getConstructor: function(t3, n2, e3, f2) {
            var s2 = t3(function(t4, r2) {
              u2(t4, s2, n2), v(t4, { type: n2, index: o(null), first: void 0, last: void 0, size: 0 }), l || (t4.size = 0), null != r2 && c(r2, t4[f2], t4, e3);
            }), h3 = g(n2), d = function(t4, n3, e4) {
              var r2, o2, i2 = h3(t4), a2 = y(t4, n3);
              return a2 ? a2.value = e4 : (i2.last = a2 = { index: o2 = p(n3, true), key: n3, value: e4, previous: r2 = i2.last, next: void 0, removed: false }, i2.first || (i2.first = a2), r2 && (r2.next = a2), l ? i2.size++ : t4.size++, "F" !== o2 && (i2.index[o2] = a2)), t4;
            }, y = function(t4, n3) {
              var e4, r2 = h3(t4), o2 = p(n3);
              if ("F" !== o2)
                return r2.index[o2];
              for (e4 = r2.first; e4; e4 = e4.next)
                if (e4.key == n3)
                  return e4;
            };
            return i(s2.prototype, { clear: function() {
              for (var t4 = h3(this), n3 = t4.index, e4 = t4.first; e4; )
                e4.removed = true, e4.previous && (e4.previous = e4.previous.next = void 0), delete n3[e4.index], e4 = e4.next;
              t4.first = t4.last = void 0, l ? t4.size = 0 : this.size = 0;
            }, delete: function(t4) {
              var n3 = h3(this), e4 = y(this, t4);
              if (e4) {
                var r2 = e4.next, o2 = e4.previous;
                delete n3.index[e4.index], e4.removed = true, o2 && (o2.next = r2), r2 && (r2.previous = o2), n3.first == e4 && (n3.first = r2), n3.last == e4 && (n3.last = o2), l ? n3.size-- : this.size--;
              }
              return !!e4;
            }, forEach: function(t4) {
              for (var n3, e4 = h3(this), r2 = a(t4, arguments.length > 1 ? arguments[1] : void 0, 3); n3 = n3 ? n3.next : e4.first; )
                for (r2(n3.value, n3.key, this); n3 && n3.removed; )
                  n3 = n3.previous;
            }, has: function(t4) {
              return !!y(this, t4);
            } }), i(s2.prototype, e3 ? { get: function(t4) {
              var n3 = y(this, t4);
              return n3 && n3.value;
            }, set: function(t4, n3) {
              return d(this, 0 === t4 ? 0 : t4, n3);
            } } : { add: function(t4) {
              return d(this, t4 = 0 === t4 ? 0 : t4, t4);
            } }), l && r(s2.prototype, "size", { get: function() {
              return h3(this).size;
            } }), s2;
          }, setStrong: function(t3, n2, e3) {
            var r2 = n2 + " Iterator", o2 = g(n2), i2 = g(r2);
            f(t3, n2, function(t4, n3) {
              v(this, { type: r2, target: t4, state: o2(t4), kind: n3, last: void 0 });
            }, function() {
              for (var t4 = i2(this), n3 = t4.kind, e4 = t4.last; e4 && e4.removed; )
                e4 = e4.previous;
              return t4.target && (t4.last = e4 = e4 ? e4.next : t4.state.first) ? "keys" == n3 ? { value: e4.key, done: false } : "values" == n3 ? { value: e4.value, done: false } : { value: [e4.key, e4.value], done: false } : (t4.target = void 0, { value: void 0, done: true });
            }, e3 ? "entries" : "values", !e3, true), s(n2);
          } };
        }, function(t2, n, e2) {
          var r = e2(21);
          t2.exports = function(t3, n2, e3) {
            for (var o in n2)
              r(t3, o, n2[o], e3);
            return t3;
          };
        }, function(t2, n, e2) {
          var r = e2(5), o = e2(3), i = e2(44), a = e2(21), u2 = e2(15), c = e2(11), f = e2(124), s = e2(13), l = e2(6), p = e2(58), h2 = e2(36).f, v = e2(4).f, g = e2(19).f, d = e2(128).trim, y = o.Number, x = y.prototype, m = "Number" == c(p(x)), b = function(t3) {
            var n2, e3, r2, o2, i2, a2, u3, c2, f2 = s(t3, false);
            if ("string" == typeof f2 && f2.length > 2) {
              if (43 === (n2 = (f2 = d(f2)).charCodeAt(0)) || 45 === n2) {
                if (88 === (e3 = f2.charCodeAt(2)) || 120 === e3)
                  return NaN;
              } else if (48 === n2) {
                switch (f2.charCodeAt(1)) {
                  case 66:
                  case 98:
                    r2 = 2, o2 = 49;
                    break;
                  case 79:
                  case 111:
                    r2 = 8, o2 = 55;
                    break;
                  default:
                    return +f2;
                }
                for (a2 = (i2 = f2.slice(2)).length, u3 = 0; u3 < a2; u3++)
                  if ((c2 = i2.charCodeAt(u3)) < 48 || c2 > o2)
                    return NaN;
                return parseInt(i2, r2);
              }
            }
            return +f2;
          };
          if (i("Number", !y(" 0o1") || !y("0b1") || y("+0x1"))) {
            for (var S, E = function(t3) {
              var n2 = arguments.length < 1 ? 0 : t3, e3 = this;
              return e3 instanceof E && (m ? l(function() {
                x.valueOf.call(e3);
              }) : "Number" != c(e3)) ? f(new y(b(n2)), e3, E) : b(n2);
            }, w = r ? h2(y) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","), O = 0; w.length > O; O++)
              u2(y, S = w[O]) && !u2(E, S) && g(E, S, v(y, S));
            E.prototype = x, x.constructor = E, a(o, "Number", E);
          }
        }, function(t2, n, e2) {
          var r = e2(12), o = "[" + e2(129) + "]", i = RegExp("^" + o + o + "*"), a = RegExp(o + o + "*$"), u2 = function(t3) {
            return function(n2) {
              var e3 = String(r(n2));
              return 1 & t3 && (e3 = e3.replace(i, "")), 2 & t3 && (e3 = e3.replace(a, "")), e3;
            };
          };
          t2.exports = { start: u2(1), end: u2(2), trim: u2(3) };
        }, function(t2, n) {
          t2.exports = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
        }, function(t2, n, e2) {
          e2(2)({ target: "Number", stat: true }, { EPSILON: Math.pow(2, -52) });
        }, function(t2, n, e2) {
          e2(2)({ target: "Number", stat: true }, { isFinite: e2(132) });
        }, function(t2, n, e2) {
          var r = e2(3).isFinite;
          t2.exports = Number.isFinite || function(t3) {
            return "number" == typeof t3 && r(t3);
          };
        }, function(t2, n, e2) {
          e2(2)({ target: "Number", stat: true }, { isInteger: e2(134) });
        }, function(t2, n, e2) {
          var r = e2(14), o = Math.floor;
          t2.exports = function(t3) {
            return !r(t3) && isFinite(t3) && o(t3) === t3;
          };
        }, function(t2, n, e2) {
          e2(2)({ target: "Number", stat: true }, { isNaN: function(t3) {
            return t3 != t3;
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(134), i = Math.abs;
          r({ target: "Number", stat: true }, { isSafeInteger: function(t3) {
            return o(t3) && i(t3) <= 9007199254740991;
          } });
        }, function(t2, n, e2) {
          e2(2)({ target: "Number", stat: true }, { MAX_SAFE_INTEGER: 9007199254740991 });
        }, function(t2, n, e2) {
          e2(2)({ target: "Number", stat: true }, { MIN_SAFE_INTEGER: -9007199254740991 });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(140);
          r({ target: "Number", stat: true, forced: Number.parseFloat != o }, { parseFloat: o });
        }, function(t2, n, e2) {
          var r = e2(3), o = e2(128).trim, i = e2(129), a = r.parseFloat, u2 = 1 / a(i + "-0") != -1 / 0;
          t2.exports = u2 ? function(t3) {
            var n2 = o(String(t3)), e3 = a(n2);
            return 0 === e3 && "-" == n2.charAt(0) ? -0 : e3;
          } : a;
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(142);
          r({ target: "Number", stat: true, forced: Number.parseInt != o }, { parseInt: o });
        }, function(t2, n, e2) {
          var r = e2(3), o = e2(128).trim, i = e2(129), a = r.parseInt, u2 = /^[+-]?0[Xx]/, c = 8 !== a(i + "08") || 22 !== a(i + "0x16");
          t2.exports = c ? function(t3, n2) {
            var e3 = o(String(t3));
            return a(e3, n2 >>> 0 || (u2.test(e3) ? 16 : 10));
          } : a;
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(40), i = e2(144), a = e2(145), u2 = e2(6), c = 1 .toFixed, f = Math.floor, s = function(t3, n2, e3) {
            return 0 === n2 ? e3 : n2 % 2 == 1 ? s(t3, n2 - 1, e3 * t3) : s(t3 * t3, n2 / 2, e3);
          };
          r({ target: "Number", proto: true, forced: c && ("0.000" !== 8e-5.toFixed(3) || "1" !== 0.9.toFixed(0) || "1.25" !== 1.255.toFixed(2) || "1000000000000000128" !== 1000000000000000100 .toFixed(0)) || !u2(function() {
            c.call({});
          }) }, { toFixed: function(t3) {
            var n2, e3, r2, u3, c2 = i(this), l = o(t3), p = [0, 0, 0, 0, 0, 0], h2 = "", v = "0", g = function(t4, n3) {
              for (var e4 = -1, r3 = n3; ++e4 < 6; )
                r3 += t4 * p[e4], p[e4] = r3 % 1e7, r3 = f(r3 / 1e7);
            }, d = function(t4) {
              for (var n3 = 6, e4 = 0; --n3 >= 0; )
                e4 += p[n3], p[n3] = f(e4 / t4), e4 = e4 % t4 * 1e7;
            }, y = function() {
              for (var t4 = 6, n3 = ""; --t4 >= 0; )
                if ("" !== n3 || 0 === t4 || 0 !== p[t4]) {
                  var e4 = String(p[t4]);
                  n3 = "" === n3 ? e4 : n3 + a.call("0", 7 - e4.length) + e4;
                }
              return n3;
            };
            if (l < 0 || l > 20)
              throw RangeError("Incorrect fraction digits");
            if (c2 != c2)
              return "NaN";
            if (c2 <= -1e21 || c2 >= 1e21)
              return String(c2);
            if (c2 < 0 && (h2 = "-", c2 = -c2), c2 > 1e-21)
              if (e3 = (n2 = function(t4) {
                for (var n3 = 0, e4 = t4; e4 >= 4096; )
                  n3 += 12, e4 /= 4096;
                for (; e4 >= 2; )
                  n3 += 1, e4 /= 2;
                return n3;
              }(c2 * s(2, 69, 1)) - 69) < 0 ? c2 * s(2, -n2, 1) : c2 / s(2, n2, 1), e3 *= 4503599627370496, (n2 = 52 - n2) > 0) {
                for (g(0, e3), r2 = l; r2 >= 7; )
                  g(1e7, 0), r2 -= 7;
                for (g(s(10, r2, 1), 0), r2 = n2 - 1; r2 >= 23; )
                  d(1 << 23), r2 -= 23;
                d(1 << r2), g(1, 1), d(2), v = y();
              } else
                g(0, e3), g(1 << -n2, 0), v = y() + a.call("0", l);
            return v = l > 0 ? h2 + ((u3 = v.length) <= l ? "0." + a.call("0", l - u3) + v : v.slice(0, u3 - l) + "." + v.slice(u3 - l)) : h2 + v;
          } });
        }, function(t2, n, e2) {
          var r = e2(11);
          t2.exports = function(t3) {
            if ("number" != typeof t3 && "Number" != r(t3))
              throw TypeError("Incorrect invocation");
            return +t3;
          };
        }, function(t2, n, e2) {
          var r = e2(40), o = e2(12);
          t2.exports = "".repeat || function(t3) {
            var n2 = String(o(this)), e3 = "", i = r(t3);
            if (i < 0 || i == 1 / 0)
              throw RangeError("Wrong number of repetitions");
            for (; i > 0; (i >>>= 1) && (n2 += n2))
              1 & i && (e3 += n2);
            return e3;
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(147);
          r({ target: "Object", stat: true, forced: Object.assign !== o }, { assign: o });
        }, function(t2, n, e2) {
          var r = e2(5), o = e2(6), i = e2(60), a = e2(43), u2 = e2(7), c = e2(46), f = e2(10), s = Object.assign, l = Object.defineProperty;
          t2.exports = !s || o(function() {
            if (r && 1 !== s({ b: 1 }, s(l({}, "a", { enumerable: true, get: function() {
              l(this, "b", { value: 3, enumerable: false });
            } }), { b: 2 })).b)
              return true;
            var t3 = {}, n2 = {}, e3 = Symbol();
            return t3[e3] = 7, "abcdefghijklmnopqrst".split("").forEach(function(t4) {
              n2[t4] = t4;
            }), 7 != s({}, t3)[e3] || "abcdefghijklmnopqrst" != i(s({}, n2)).join("");
          }) ? function(t3, n2) {
            for (var e3 = c(t3), o2 = arguments.length, s2 = 1, l2 = a.f, p = u2.f; o2 > s2; )
              for (var h2, v = f(arguments[s2++]), g = l2 ? i(v).concat(l2(v)) : i(v), d = g.length, y = 0; d > y; )
                h2 = g[y++], r && !p.call(v, h2) || (e3[h2] = v[h2]);
            return e3;
          } : s;
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(5), i = e2(149), a = e2(46), u2 = e2(65), c = e2(19);
          o && r({ target: "Object", proto: true, forced: i }, { __defineGetter__: function(t3, n2) {
            c.f(a(this), t3, { get: u2(n2), enumerable: true, configurable: true });
          } });
        }, function(t2, n, e2) {
          var r = e2(29), o = e2(3), i = e2(6);
          t2.exports = r || !i(function() {
            var t3 = Math.random();
            __defineSetter__.call(null, t3, function() {
            }), delete o[t3];
          });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(5), i = e2(149), a = e2(46), u2 = e2(65), c = e2(19);
          o && r({ target: "Object", proto: true, forced: i }, { __defineSetter__: function(t3, n2) {
            c.f(a(this), t3, { set: u2(n2), enumerable: true, configurable: true });
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(152).entries;
          r({ target: "Object", stat: true }, { entries: function(t3) {
            return o(t3);
          } });
        }, function(t2, n, e2) {
          var r = e2(5), o = e2(60), i = e2(9), a = e2(7).f, u2 = function(t3) {
            return function(n2) {
              for (var e3, u3 = i(n2), c = o(u3), f = c.length, s = 0, l = []; f > s; )
                e3 = c[s++], r && !a.call(u3, e3) || l.push(t3 ? [e3, u3[e3]] : u3[e3]);
              return l;
            };
          };
          t2.exports = { entries: u2(true), values: u2(false) };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(121), i = e2(6), a = e2(14), u2 = e2(120).onFreeze, c = Object.freeze;
          r({ target: "Object", stat: true, forced: i(function() {
            c(1);
          }), sham: !o }, { freeze: function(t3) {
            return c && a(t3) ? c(u2(t3)) : t3;
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(122), i = e2(47);
          r({ target: "Object", stat: true }, { fromEntries: function(t3) {
            var n2 = {};
            return o(t3, function(t4, e3) {
              i(n2, t4, e3);
            }, void 0, true), n2;
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(6), i = e2(9), a = e2(4).f, u2 = e2(5), c = o(function() {
            a(1);
          });
          r({ target: "Object", stat: true, forced: !u2 || c, sham: !u2 }, { getOwnPropertyDescriptor: function(t3, n2) {
            return a(i(t3), n2);
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(5), i = e2(33), a = e2(9), u2 = e2(4), c = e2(47);
          r({ target: "Object", stat: true, sham: !o }, { getOwnPropertyDescriptors: function(t3) {
            for (var n2, e3, r2 = a(t3), o2 = u2.f, f = i(r2), s = {}, l = 0; f.length > l; )
              void 0 !== (e3 = o2(r2, n2 = f[l++])) && c(s, n2, e3);
            return s;
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(6), i = e2(158).f;
          r({ target: "Object", stat: true, forced: o(function() {
            return !Object.getOwnPropertyNames(1);
          }) }, { getOwnPropertyNames: i });
        }, function(t2, n, e2) {
          var r = e2(9), o = e2(36).f, i = {}.toString, a = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
          t2.exports.f = function(t3) {
            return a && "[object Window]" == i.call(t3) ? function(t4) {
              try {
                return o(t4);
              } catch (t5) {
                return a.slice();
              }
            }(t3) : o(r(t3));
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(6), i = e2(46), a = e2(93), u2 = e2(94);
          r({ target: "Object", stat: true, forced: o(function() {
            a(1);
          }), sham: !u2 }, { getPrototypeOf: function(t3) {
            return a(i(t3));
          } });
        }, function(t2, n, e2) {
          e2(2)({ target: "Object", stat: true }, { is: e2(161) });
        }, function(t2, n) {
          t2.exports = Object.is || function(t3, n2) {
            return t3 === n2 ? 0 !== t3 || 1 / t3 == 1 / n2 : t3 != t3 && n2 != n2;
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(6), i = e2(14), a = Object.isExtensible;
          r({ target: "Object", stat: true, forced: o(function() {
            a(1);
          }) }, { isExtensible: function(t3) {
            return !!i(t3) && (!a || a(t3));
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(6), i = e2(14), a = Object.isFrozen;
          r({ target: "Object", stat: true, forced: o(function() {
            a(1);
          }) }, { isFrozen: function(t3) {
            return !i(t3) || !!a && a(t3);
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(6), i = e2(14), a = Object.isSealed;
          r({ target: "Object", stat: true, forced: o(function() {
            a(1);
          }) }, { isSealed: function(t3) {
            return !i(t3) || !!a && a(t3);
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(46), i = e2(60);
          r({ target: "Object", stat: true, forced: e2(6)(function() {
            i(1);
          }) }, { keys: function(t3) {
            return i(o(t3));
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(5), i = e2(149), a = e2(46), u2 = e2(13), c = e2(93), f = e2(4).f;
          o && r({ target: "Object", proto: true, forced: i }, { __lookupGetter__: function(t3) {
            var n2, e3 = a(this), r2 = u2(t3, true);
            do {
              if (n2 = f(e3, r2))
                return n2.get;
            } while (e3 = c(e3));
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(5), i = e2(149), a = e2(46), u2 = e2(13), c = e2(93), f = e2(4).f;
          o && r({ target: "Object", proto: true, forced: i }, { __lookupSetter__: function(t3) {
            var n2, e3 = a(this), r2 = u2(t3, true);
            do {
              if (n2 = f(e3, r2))
                return n2.set;
            } while (e3 = c(e3));
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(14), i = e2(120).onFreeze, a = e2(121), u2 = e2(6), c = Object.preventExtensions;
          r({ target: "Object", stat: true, forced: u2(function() {
            c(1);
          }), sham: !a }, { preventExtensions: function(t3) {
            return c && o(t3) ? c(i(t3)) : t3;
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(14), i = e2(120).onFreeze, a = e2(121), u2 = e2(6), c = Object.seal;
          r({ target: "Object", stat: true, forced: u2(function() {
            c(1);
          }), sham: !a }, { seal: function(t3) {
            return c && o(t3) ? c(i(t3)) : t3;
          } });
        }, function(t2, n, e2) {
          var r = e2(85), o = e2(21), i = e2(171);
          r || o(Object.prototype, "toString", i, { unsafe: true });
        }, function(t2, n, e2) {
          var r = e2(85), o = e2(84);
          t2.exports = r ? {}.toString : function() {
            return "[object " + o(this) + "]";
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(152).values;
          r({ target: "Object", stat: true }, { values: function(t3) {
            return o(t3);
          } });
        }, function(t2, n, e2) {
          var r, o, i, a, u2 = e2(2), c = e2(29), f = e2(3), s = e2(34), l = e2(174), p = e2(21), h2 = e2(126), v = e2(95), g = e2(109), d = e2(14), y = e2(65), x = e2(123), m = e2(11), b = e2(23), S = e2(122), E = e2(86), w = e2(175), O = e2(176).set, R = e2(178), A = e2(179), j = e2(181), I = e2(180), k = e2(182), P = e2(25), L = e2(44), T = e2(49), _ = e2(53), U = T("species"), N = "Promise", C = P.get, F = P.set, M = P.getterFor(N), z = l, D = f.TypeError, q = f.document, B = f.process, W = s("fetch"), $ = I.f, G = $, V = "process" == m(B), X = !!(q && q.createEvent && f.dispatchEvent), Y = L(N, function() {
            if (!(b(z) !== String(z))) {
              if (66 === _)
                return true;
              if (!V && "function" != typeof PromiseRejectionEvent)
                return true;
            }
            if (c && !z.prototype.finally)
              return true;
            if (_ >= 51 && /native code/.test(z))
              return false;
            var t3 = z.resolve(1), n2 = function(t4) {
              t4(function() {
              }, function() {
              });
            };
            return (t3.constructor = {})[U] = n2, !(t3.then(function() {
            }) instanceof n2);
          }), K = Y || !E(function(t3) {
            z.all(t3).catch(function() {
            });
          }), J = function(t3) {
            var n2;
            return !(!d(t3) || "function" != typeof (n2 = t3.then)) && n2;
          }, H2 = function(t3, n2, e3) {
            if (!n2.notified) {
              n2.notified = true;
              var r2 = n2.reactions;
              R(function() {
                for (var o2 = n2.value, i2 = 1 == n2.state, a2 = 0; r2.length > a2; ) {
                  var u3, c2, f2, s2 = r2[a2++], l2 = i2 ? s2.ok : s2.fail, p2 = s2.resolve, h3 = s2.reject, v2 = s2.domain;
                  try {
                    l2 ? (i2 || (2 === n2.rejection && nt(t3, n2), n2.rejection = 1), true === l2 ? u3 = o2 : (v2 && v2.enter(), u3 = l2(o2), v2 && (v2.exit(), f2 = true)), u3 === s2.promise ? h3(D("Promise-chain cycle")) : (c2 = J(u3)) ? c2.call(u3, p2, h3) : p2(u3)) : h3(o2);
                  } catch (t4) {
                    v2 && !f2 && v2.exit(), h3(t4);
                  }
                }
                n2.reactions = [], n2.notified = false, e3 && !n2.rejection && Z(t3, n2);
              });
            }
          }, Q = function(t3, n2, e3) {
            var r2, o2;
            X ? ((r2 = q.createEvent("Event")).promise = n2, r2.reason = e3, r2.initEvent(t3, false, true), f.dispatchEvent(r2)) : r2 = { promise: n2, reason: e3 }, (o2 = f["on" + t3]) ? o2(r2) : "unhandledrejection" === t3 && j("Unhandled promise rejection", e3);
          }, Z = function(t3, n2) {
            O.call(f, function() {
              var e3, r2 = n2.value;
              if (tt(n2) && (e3 = k(function() {
                V ? B.emit("unhandledRejection", r2, t3) : Q("unhandledrejection", t3, r2);
              }), n2.rejection = V || tt(n2) ? 2 : 1, e3.error))
                throw e3.value;
            });
          }, tt = function(t3) {
            return 1 !== t3.rejection && !t3.parent;
          }, nt = function(t3, n2) {
            O.call(f, function() {
              V ? B.emit("rejectionHandled", t3) : Q("rejectionhandled", t3, n2.value);
            });
          }, et = function(t3, n2, e3, r2) {
            return function(o2) {
              t3(n2, e3, o2, r2);
            };
          }, rt = function(t3, n2, e3, r2) {
            n2.done || (n2.done = true, r2 && (n2 = r2), n2.value = e3, n2.state = 2, H2(t3, n2, true));
          }, ot = function(t3, n2, e3, r2) {
            if (!n2.done) {
              n2.done = true, r2 && (n2 = r2);
              try {
                if (t3 === e3)
                  throw D("Promise can't be resolved itself");
                var o2 = J(e3);
                o2 ? R(function() {
                  var r3 = { done: false };
                  try {
                    o2.call(e3, et(ot, t3, r3, n2), et(rt, t3, r3, n2));
                  } catch (e4) {
                    rt(t3, r3, e4, n2);
                  }
                }) : (n2.value = e3, n2.state = 1, H2(t3, n2, false));
              } catch (e4) {
                rt(t3, { done: false }, e4, n2);
              }
            }
          };
          Y && (z = function(t3) {
            x(this, z, N), y(t3), r.call(this);
            var n2 = C(this);
            try {
              t3(et(ot, this, n2), et(rt, this, n2));
            } catch (t4) {
              rt(this, n2, t4);
            }
          }, (r = function(t3) {
            F(this, { type: N, done: false, notified: false, parent: false, reactions: [], rejection: false, state: 0, value: void 0 });
          }).prototype = h2(z.prototype, { then: function(t3, n2) {
            var e3 = M(this), r2 = $(w(this, z));
            return r2.ok = "function" != typeof t3 || t3, r2.fail = "function" == typeof n2 && n2, r2.domain = V ? B.domain : void 0, e3.parent = true, e3.reactions.push(r2), 0 != e3.state && H2(this, e3, false), r2.promise;
          }, catch: function(t3) {
            return this.then(void 0, t3);
          } }), o = function() {
            var t3 = new r(), n2 = C(t3);
            this.promise = t3, this.resolve = et(ot, t3, n2), this.reject = et(rt, t3, n2);
          }, I.f = $ = function(t3) {
            return t3 === z || t3 === i ? new o(t3) : G(t3);
          }, c || "function" != typeof l || (a = l.prototype.then, p(l.prototype, "then", function(t3, n2) {
            var e3 = this;
            return new z(function(t4, n3) {
              a.call(e3, t4, n3);
            }).then(t3, n2);
          }, { unsafe: true }), "function" == typeof W && u2({ global: true, enumerable: true, forced: true }, { fetch: function(t3) {
            return A(z, W.apply(f, arguments));
          } }))), u2({ global: true, wrap: true, forced: Y }, { Promise: z }), v(z, N, false, true), g(N), i = s(N), u2({ target: N, stat: true, forced: Y }, { reject: function(t3) {
            var n2 = $(this);
            return n2.reject.call(void 0, t3), n2.promise;
          } }), u2({ target: N, stat: true, forced: c || Y }, { resolve: function(t3) {
            return A(c && this === i ? z : this, t3);
          } }), u2({ target: N, stat: true, forced: K }, { all: function(t3) {
            var n2 = this, e3 = $(n2), r2 = e3.resolve, o2 = e3.reject, i2 = k(function() {
              var e4 = y(n2.resolve), i3 = [], a2 = 0, u3 = 1;
              S(t3, function(t4) {
                var c2 = a2++, f2 = false;
                i3.push(void 0), u3++, e4.call(n2, t4).then(function(t5) {
                  f2 || (f2 = true, i3[c2] = t5, --u3 || r2(i3));
                }, o2);
              }), --u3 || r2(i3);
            });
            return i2.error && o2(i2.value), e3.promise;
          }, race: function(t3) {
            var n2 = this, e3 = $(n2), r2 = e3.reject, o2 = k(function() {
              var o3 = y(n2.resolve);
              S(t3, function(t4) {
                o3.call(n2, t4).then(e3.resolve, r2);
              });
            });
            return o2.error && r2(o2.value), e3.promise;
          } });
        }, function(t2, n, e2) {
          var r = e2(3);
          t2.exports = r.Promise;
        }, function(t2, n, e2) {
          var r = e2(20), o = e2(65), i = e2(49)("species");
          t2.exports = function(t3, n2) {
            var e3, a = r(t3).constructor;
            return void 0 === a || null == (e3 = r(a)[i]) ? n2 : o(e3);
          };
        }, function(t2, n, e2) {
          var r, o, i, a = e2(3), u2 = e2(6), c = e2(11), f = e2(64), s = e2(61), l = e2(17), p = e2(177), h2 = a.location, v = a.setImmediate, g = a.clearImmediate, d = a.process, y = a.MessageChannel, x = a.Dispatch, m = 0, b = {}, S = function(t3) {
            if (b.hasOwnProperty(t3)) {
              var n2 = b[t3];
              delete b[t3], n2();
            }
          }, E = function(t3) {
            return function() {
              S(t3);
            };
          }, w = function(t3) {
            S(t3.data);
          }, O = function(t3) {
            a.postMessage(t3 + "", h2.protocol + "//" + h2.host);
          };
          v && g || (v = function(t3) {
            for (var n2 = [], e3 = 1; arguments.length > e3; )
              n2.push(arguments[e3++]);
            return b[++m] = function() {
              ("function" == typeof t3 ? t3 : Function(t3)).apply(void 0, n2);
            }, r(m), m;
          }, g = function(t3) {
            delete b[t3];
          }, "process" == c(d) ? r = function(t3) {
            d.nextTick(E(t3));
          } : x && x.now ? r = function(t3) {
            x.now(E(t3));
          } : y && !p ? (i = (o = new y()).port2, o.port1.onmessage = w, r = f(i.postMessage, i, 1)) : !a.addEventListener || "function" != typeof postMessage || a.importScripts || u2(O) || "file:" === h2.protocol ? r = "onreadystatechange" in l("script") ? function(t3) {
            s.appendChild(l("script")).onreadystatechange = function() {
              s.removeChild(this), S(t3);
            };
          } : function(t3) {
            setTimeout(E(t3), 0);
          } : (r = O, a.addEventListener("message", w, false))), t2.exports = { set: v, clear: g };
        }, function(t2, n, e2) {
          var r = e2(54);
          t2.exports = /(iphone|ipod|ipad).*applewebkit/i.test(r);
        }, function(t2, n, e2) {
          var r, o, i, a, u2, c, f, s, l = e2(3), p = e2(4).f, h2 = e2(11), v = e2(176).set, g = e2(177), d = l.MutationObserver || l.WebKitMutationObserver, y = l.process, x = l.Promise, m = "process" == h2(y), b = p(l, "queueMicrotask"), S = b && b.value;
          S || (r = function() {
            var t3, n2;
            for (m && (t3 = y.domain) && t3.exit(); o; ) {
              n2 = o.fn, o = o.next;
              try {
                n2();
              } catch (t4) {
                throw o ? a() : i = void 0, t4;
              }
            }
            i = void 0, t3 && t3.enter();
          }, m ? a = function() {
            y.nextTick(r);
          } : d && !g ? (u2 = true, c = document.createTextNode(""), new d(r).observe(c, { characterData: true }), a = function() {
            c.data = u2 = !u2;
          }) : x && x.resolve ? (f = x.resolve(void 0), s = f.then, a = function() {
            s.call(f, r);
          }) : a = function() {
            v.call(l, r);
          }), t2.exports = S || function(t3) {
            var n2 = { fn: t3, next: void 0 };
            i && (i.next = n2), o || (o = n2, a()), i = n2;
          };
        }, function(t2, n, e2) {
          var r = e2(20), o = e2(14), i = e2(180);
          t2.exports = function(t3, n2) {
            if (r(t3), o(n2) && n2.constructor === t3)
              return n2;
            var e3 = i.f(t3);
            return (0, e3.resolve)(n2), e3.promise;
          };
        }, function(t2, n, e2) {
          var r = e2(65), o = function(t3) {
            var n2, e3;
            this.promise = new t3(function(t4, r2) {
              if (void 0 !== n2 || void 0 !== e3)
                throw TypeError("Bad Promise constructor");
              n2 = t4, e3 = r2;
            }), this.resolve = r(n2), this.reject = r(e3);
          };
          t2.exports.f = function(t3) {
            return new o(t3);
          };
        }, function(t2, n, e2) {
          var r = e2(3);
          t2.exports = function(t3, n2) {
            var e3 = r.console;
            e3 && e3.error && (1 === arguments.length ? e3.error(t3) : e3.error(t3, n2));
          };
        }, function(t2, n) {
          t2.exports = function(t3) {
            try {
              return { error: false, value: t3() };
            } catch (t4) {
              return { error: true, value: t4 };
            }
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(65), i = e2(180), a = e2(182), u2 = e2(122);
          r({ target: "Promise", stat: true }, { allSettled: function(t3) {
            var n2 = this, e3 = i.f(n2), r2 = e3.resolve, c = e3.reject, f = a(function() {
              var e4 = o(n2.resolve), i2 = [], a2 = 0, c2 = 1;
              u2(t3, function(t4) {
                var o2 = a2++, u3 = false;
                i2.push(void 0), c2++, e4.call(n2, t4).then(function(t5) {
                  u3 || (u3 = true, i2[o2] = { status: "fulfilled", value: t5 }, --c2 || r2(i2));
                }, function(t5) {
                  u3 || (u3 = true, i2[o2] = { status: "rejected", reason: t5 }, --c2 || r2(i2));
                });
              }), --c2 || r2(i2);
            });
            return f.error && c(f.value), e3.promise;
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(29), i = e2(174), a = e2(6), u2 = e2(34), c = e2(175), f = e2(179), s = e2(21);
          r({ target: "Promise", proto: true, real: true, forced: !!i && a(function() {
            i.prototype.finally.call({ then: function() {
            } }, function() {
            });
          }) }, { finally: function(t3) {
            var n2 = c(this, u2("Promise")), e3 = "function" == typeof t3;
            return this.then(e3 ? function(e4) {
              return f(n2, t3()).then(function() {
                return e4;
              });
            } : t3, e3 ? function(e4) {
              return f(n2, t3()).then(function() {
                throw e4;
              });
            } : t3);
          } }), o || "function" != typeof i || i.prototype.finally || s(i.prototype, "finally", u2("Promise").prototype.finally);
        }, function(t2, n, e2) {
          var r = e2(5), o = e2(3), i = e2(44), a = e2(124), u2 = e2(19).f, c = e2(36).f, f = e2(186), s = e2(187), l = e2(188), p = e2(21), h2 = e2(6), v = e2(25).set, g = e2(109), d = e2(49)("match"), y = o.RegExp, x = y.prototype, m = /a/g, b = /a/g, S = new y(m) !== m, E = l.UNSUPPORTED_Y;
          if (r && i("RegExp", !S || E || h2(function() {
            return b[d] = false, y(m) != m || y(b) == b || "/a/i" != y(m, "i");
          }))) {
            for (var w = function(t3, n2) {
              var e3, r2 = this instanceof w, o2 = f(t3), i2 = void 0 === n2;
              if (!r2 && o2 && t3.constructor === w && i2)
                return t3;
              S ? o2 && !i2 && (t3 = t3.source) : t3 instanceof w && (i2 && (n2 = s.call(t3)), t3 = t3.source), E && (e3 = !!n2 && n2.indexOf("y") > -1) && (n2 = n2.replace(/y/g, ""));
              var u3 = a(S ? new y(t3, n2) : y(t3, n2), r2 ? this : x, w);
              return E && e3 && v(u3, { sticky: e3 }), u3;
            }, O = function(t3) {
              t3 in w || u2(w, t3, { configurable: true, get: function() {
                return y[t3];
              }, set: function(n2) {
                y[t3] = n2;
              } });
            }, R = c(y), A = 0; R.length > A; )
              O(R[A++]);
            x.constructor = w, w.prototype = x, p(o, "RegExp", w);
          }
          g("RegExp");
        }, function(t2, n, e2) {
          var r = e2(14), o = e2(11), i = e2(49)("match");
          t2.exports = function(t3) {
            var n2;
            return r(t3) && (void 0 !== (n2 = t3[i]) ? !!n2 : "RegExp" == o(t3));
          };
        }, function(t2, n, e2) {
          var r = e2(20);
          t2.exports = function() {
            var t3 = r(this), n2 = "";
            return t3.global && (n2 += "g"), t3.ignoreCase && (n2 += "i"), t3.multiline && (n2 += "m"), t3.dotAll && (n2 += "s"), t3.unicode && (n2 += "u"), t3.sticky && (n2 += "y"), n2;
          };
        }, function(t2, n, e2) {
          var r = e2(6);
          function o(t3, n2) {
            return RegExp(t3, n2);
          }
          n.UNSUPPORTED_Y = r(function() {
            var t3 = o("a", "y");
            return t3.lastIndex = 2, null != t3.exec("abcd");
          }), n.BROKEN_CARET = r(function() {
            var t3 = o("^r", "gy");
            return t3.lastIndex = 2, null != t3.exec("str");
          });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(190);
          r({ target: "RegExp", proto: true, forced: /./.exec !== o }, { exec: o });
        }, function(t2, n, e2) {
          var r, o, i = e2(187), a = e2(188), u2 = RegExp.prototype.exec, c = String.prototype.replace, f = u2, s = (r = /a/, o = /b*/g, u2.call(r, "a"), u2.call(o, "a"), 0 !== r.lastIndex || 0 !== o.lastIndex), l = a.UNSUPPORTED_Y || a.BROKEN_CARET, p = void 0 !== /()??/.exec("")[1];
          (s || p || l) && (f = function(t3) {
            var n2, e3, r2, o2, a2 = this, f2 = l && a2.sticky, h2 = i.call(a2), v = a2.source, g = 0, d = t3;
            return f2 && (-1 === (h2 = h2.replace("y", "")).indexOf("g") && (h2 += "g"), d = String(t3).slice(a2.lastIndex), a2.lastIndex > 0 && (!a2.multiline || a2.multiline && "\n" !== t3[a2.lastIndex - 1]) && (v = "(?: " + v + ")", d = " " + d, g++), e3 = new RegExp("^(?:" + v + ")", h2)), p && (e3 = new RegExp("^" + v + "$(?!\\s)", h2)), s && (n2 = a2.lastIndex), r2 = u2.call(f2 ? e3 : a2, d), f2 ? r2 ? (r2.input = r2.input.slice(g), r2[0] = r2[0].slice(g), r2.index = a2.lastIndex, a2.lastIndex += r2[0].length) : a2.lastIndex = 0 : s && r2 && (a2.lastIndex = a2.global ? r2.index + r2[0].length : n2), p && r2 && r2.length > 1 && c.call(r2[0], e3, function() {
              for (o2 = 1; o2 < arguments.length - 2; o2++)
                void 0 === arguments[o2] && (r2[o2] = void 0);
            }), r2;
          }), t2.exports = f;
        }, function(t2, n, e2) {
          var r = e2(5), o = e2(19), i = e2(187), a = e2(188).UNSUPPORTED_Y;
          r && ("g" != /./g.flags || a) && o.f(RegExp.prototype, "flags", { configurable: true, get: i });
        }, function(t2, n, e2) {
          var r = e2(5), o = e2(188).UNSUPPORTED_Y, i = e2(19).f, a = e2(25).get, u2 = RegExp.prototype;
          r && o && i(RegExp.prototype, "sticky", { configurable: true, get: function() {
            if (this !== u2) {
              if (this instanceof RegExp)
                return !!a(this).sticky;
              throw TypeError("Incompatible receiver, RegExp required");
            }
          } });
        }, function(t2, n, e2) {
          e2(189);
          var r, o, i = e2(2), a = e2(14), u2 = (r = false, (o = /[ac]/).exec = function() {
            return r = true, /./.exec.apply(this, arguments);
          }, true === o.test("abc") && r), c = /./.test;
          i({ target: "RegExp", proto: true, forced: !u2 }, { test: function(t3) {
            if ("function" != typeof this.exec)
              return c.call(this, t3);
            var n2 = this.exec(t3);
            if (null !== n2 && !a(n2))
              throw new Error("RegExp exec method returned something other than an Object or null");
            return !!n2;
          } });
        }, function(t2, n, e2) {
          var r = e2(21), o = e2(20), i = e2(6), a = e2(187), u2 = RegExp.prototype, c = u2.toString, f = i(function() {
            return "/a/b" != c.call({ source: "a", flags: "b" });
          }), s = "toString" != c.name;
          (f || s) && r(RegExp.prototype, "toString", function() {
            var t3 = o(this), n2 = String(t3.source), e3 = t3.flags;
            return "/" + n2 + "/" + String(void 0 === e3 && t3 instanceof RegExp && !("flags" in u2) ? a.call(t3) : e3);
          }, { unsafe: true });
        }, function(t2, n, e2) {
          var r = e2(119), o = e2(125);
          t2.exports = r("Set", function(t3) {
            return function() {
              return t3(this, arguments.length ? arguments[0] : void 0);
            };
          }, o);
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(197).codeAt;
          r({ target: "String", proto: true }, { codePointAt: function(t3) {
            return o(this, t3);
          } });
        }, function(t2, n, e2) {
          var r = e2(40), o = e2(12), i = function(t3) {
            return function(n2, e3) {
              var i2, a, u2 = String(o(n2)), c = r(e3), f = u2.length;
              return c < 0 || c >= f ? t3 ? "" : void 0 : (i2 = u2.charCodeAt(c)) < 55296 || i2 > 56319 || c + 1 === f || (a = u2.charCodeAt(c + 1)) < 56320 || a > 57343 ? t3 ? u2.charAt(c) : i2 : t3 ? u2.slice(c, c + 2) : a - 56320 + (i2 - 55296 << 10) + 65536;
            };
          };
          t2.exports = { codeAt: i(false), charAt: i(true) };
        }, function(t2, n, e2) {
          var r, o = e2(2), i = e2(4).f, a = e2(39), u2 = e2(199), c = e2(12), f = e2(200), s = e2(29), l = "".endsWith, p = Math.min, h2 = f("endsWith");
          o({ target: "String", proto: true, forced: !!(s || h2 || (r = i(String.prototype, "endsWith"), !r || r.writable)) && !h2 }, { endsWith: function(t3) {
            var n2 = String(c(this));
            u2(t3);
            var e3 = arguments.length > 1 ? arguments[1] : void 0, r2 = a(n2.length), o2 = void 0 === e3 ? r2 : p(a(e3), r2), i2 = String(t3);
            return l ? l.call(n2, i2, o2) : n2.slice(o2 - i2.length, o2) === i2;
          } });
        }, function(t2, n, e2) {
          var r = e2(186);
          t2.exports = function(t3) {
            if (r(t3))
              throw TypeError("The method doesn't accept regular expressions");
            return t3;
          };
        }, function(t2, n, e2) {
          var r = e2(49)("match");
          t2.exports = function(t3) {
            var n2 = /./;
            try {
              "/./"[t3](n2);
            } catch (e3) {
              try {
                return n2[r] = false, "/./"[t3](n2);
              } catch (t4) {
              }
            }
            return false;
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(41), i = String.fromCharCode, a = String.fromCodePoint;
          r({ target: "String", stat: true, forced: !!a && 1 != a.length }, { fromCodePoint: function(t3) {
            for (var n2, e3 = [], r2 = arguments.length, a2 = 0; r2 > a2; ) {
              if (n2 = +arguments[a2++], o(n2, 1114111) !== n2)
                throw RangeError(n2 + " is not a valid code point");
              e3.push(n2 < 65536 ? i(n2) : i(55296 + ((n2 -= 65536) >> 10), n2 % 1024 + 56320));
            }
            return e3.join("");
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(199), i = e2(12);
          r({ target: "String", proto: true, forced: !e2(200)("includes") }, { includes: function(t3) {
            return !!~String(i(this)).indexOf(o(t3), arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(t2, n, e2) {
          var r = e2(197).charAt, o = e2(25), i = e2(90), a = o.set, u2 = o.getterFor("String Iterator");
          i(String, "String", function(t3) {
            a(this, { type: "String Iterator", string: String(t3), index: 0 });
          }, function() {
            var t3, n2 = u2(this), e3 = n2.string, o2 = n2.index;
            return o2 >= e3.length ? { value: void 0, done: true } : (t3 = r(e3, o2), n2.index += t3.length, { value: t3, done: false });
          });
        }, function(t2, n, e2) {
          var r = e2(205), o = e2(20), i = e2(39), a = e2(12), u2 = e2(206), c = e2(207);
          r("match", 1, function(t3, n2, e3) {
            return [function(n3) {
              var e4 = a(this), r2 = null == n3 ? void 0 : n3[t3];
              return void 0 !== r2 ? r2.call(n3, e4) : new RegExp(n3)[t3](String(e4));
            }, function(t4) {
              var r2 = e3(n2, t4, this);
              if (r2.done)
                return r2.value;
              var a2 = o(t4), f = String(this);
              if (!a2.global)
                return c(a2, f);
              var s = a2.unicode;
              a2.lastIndex = 0;
              for (var l, p = [], h2 = 0; null !== (l = c(a2, f)); ) {
                var v = String(l[0]);
                p[h2] = v, "" === v && (a2.lastIndex = u2(f, i(a2.lastIndex), s)), h2++;
              }
              return 0 === h2 ? null : p;
            }];
          });
        }, function(t2, n, e2) {
          e2(189);
          var r = e2(21), o = e2(6), i = e2(49), a = e2(190), u2 = e2(18), c = i("species"), f = !o(function() {
            var t3 = /./;
            return t3.exec = function() {
              var t4 = [];
              return t4.groups = { a: "7" }, t4;
            }, "7" !== "".replace(t3, "$<a>");
          }), s = "$0" === "a".replace(/./, "$0"), l = i("replace"), p = !!/./[l] && "" === /./[l]("a", "$0"), h2 = !o(function() {
            var t3 = /(?:)/, n2 = t3.exec;
            t3.exec = function() {
              return n2.apply(this, arguments);
            };
            var e3 = "ab".split(t3);
            return 2 !== e3.length || "a" !== e3[0] || "b" !== e3[1];
          });
          t2.exports = function(t3, n2, e3, l2) {
            var v = i(t3), g = !o(function() {
              var n3 = {};
              return n3[v] = function() {
                return 7;
              }, 7 != ""[t3](n3);
            }), d = g && !o(function() {
              var n3 = false, e4 = /a/;
              return "split" === t3 && ((e4 = {}).constructor = {}, e4.constructor[c] = function() {
                return e4;
              }, e4.flags = "", e4[v] = /./[v]), e4.exec = function() {
                return n3 = true, null;
              }, e4[v](""), !n3;
            });
            if (!g || !d || "replace" === t3 && (!f || !s || p) || "split" === t3 && !h2) {
              var y = /./[v], x = e3(v, ""[t3], function(t4, n3, e4, r2, o2) {
                return n3.exec === a ? g && !o2 ? { done: true, value: y.call(n3, e4, r2) } : { done: true, value: t4.call(e4, n3, r2) } : { done: false };
              }, { REPLACE_KEEPS_$0: s, REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: p }), m = x[0], b = x[1];
              r(String.prototype, t3, m), r(RegExp.prototype, v, 2 == n2 ? function(t4, n3) {
                return b.call(t4, this, n3);
              } : function(t4) {
                return b.call(t4, this);
              });
            }
            l2 && u2(RegExp.prototype[v], "sham", true);
          };
        }, function(t2, n, e2) {
          var r = e2(197).charAt;
          t2.exports = function(t3, n2, e3) {
            return n2 + (e3 ? r(t3, n2).length : 1);
          };
        }, function(t2, n, e2) {
          var r = e2(11), o = e2(190);
          t2.exports = function(t3, n2) {
            var e3 = t3.exec;
            if ("function" == typeof e3) {
              var i = e3.call(t3, n2);
              if ("object" != typeof i)
                throw TypeError("RegExp exec method returned something other than an Object or null");
              return i;
            }
            if ("RegExp" !== r(t3))
              throw TypeError("RegExp#exec called on incompatible receiver");
            return o.call(t3, n2);
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(91), i = e2(12), a = e2(39), u2 = e2(65), c = e2(20), f = e2(11), s = e2(186), l = e2(187), p = e2(18), h2 = e2(6), v = e2(49), g = e2(175), d = e2(206), y = e2(25), x = e2(29), m = v("matchAll"), b = y.set, S = y.getterFor("RegExp String Iterator"), E = RegExp.prototype, w = E.exec, O = "".matchAll, R = !!O && !h2(function() {
            "a".matchAll(/./);
          }), A = o(function(t3, n2, e3, r2) {
            b(this, { type: "RegExp String Iterator", regexp: t3, string: n2, global: e3, unicode: r2, done: false });
          }, "RegExp String", function() {
            var t3 = S(this);
            if (t3.done)
              return { value: void 0, done: true };
            var n2 = t3.regexp, e3 = t3.string, r2 = function(t4, n3) {
              var e4, r3 = t4.exec;
              if ("function" == typeof r3) {
                if ("object" != typeof (e4 = r3.call(t4, n3)))
                  throw TypeError("Incorrect exec result");
                return e4;
              }
              return w.call(t4, n3);
            }(n2, e3);
            return null === r2 ? { value: void 0, done: t3.done = true } : t3.global ? ("" == String(r2[0]) && (n2.lastIndex = d(e3, a(n2.lastIndex), t3.unicode)), { value: r2, done: false }) : (t3.done = true, { value: r2, done: false });
          }), j = function(t3) {
            var n2, e3, r2, o2, i2, u3, f2 = c(this), s2 = String(t3);
            return n2 = g(f2, RegExp), void 0 === (e3 = f2.flags) && f2 instanceof RegExp && !("flags" in E) && (e3 = l.call(f2)), r2 = void 0 === e3 ? "" : String(e3), o2 = new n2(n2 === RegExp ? f2.source : f2, r2), i2 = !!~r2.indexOf("g"), u3 = !!~r2.indexOf("u"), o2.lastIndex = a(f2.lastIndex), new A(o2, s2, i2, u3);
          };
          r({ target: "String", proto: true, forced: R }, { matchAll: function(t3) {
            var n2, e3, r2, o2 = i(this);
            if (null != t3) {
              if (s(t3) && !~String(i("flags" in E ? t3.flags : l.call(t3))).indexOf("g"))
                throw TypeError("`.matchAll` does not allow non-global regexes");
              if (R)
                return O.apply(o2, arguments);
              if (void 0 === (e3 = t3[m]) && x && "RegExp" == f(t3) && (e3 = j), null != e3)
                return u2(e3).call(t3, o2);
            } else if (R)
              return O.apply(o2, arguments);
            return n2 = String(o2), r2 = new RegExp(t3, "g"), x ? j.call(r2, n2) : r2[m](n2);
          } }), x || m in E || p(E, m, j);
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(210).end;
          r({ target: "String", proto: true, forced: e2(211) }, { padEnd: function(t3) {
            return o(this, t3, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(t2, n, e2) {
          var r = e2(39), o = e2(145), i = e2(12), a = Math.ceil, u2 = function(t3) {
            return function(n2, e3, u3) {
              var c, f, s = String(i(n2)), l = s.length, p = void 0 === u3 ? " " : String(u3), h2 = r(e3);
              return h2 <= l || "" == p ? s : (c = h2 - l, (f = o.call(p, a(c / p.length))).length > c && (f = f.slice(0, c)), t3 ? s + f : f + s);
            };
          };
          t2.exports = { start: u2(false), end: u2(true) };
        }, function(t2, n, e2) {
          var r = e2(54);
          t2.exports = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(r);
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(210).start;
          r({ target: "String", proto: true, forced: e2(211) }, { padStart: function(t3) {
            return o(this, t3, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(9), i = e2(39);
          r({ target: "String", stat: true }, { raw: function(t3) {
            for (var n2 = o(t3.raw), e3 = i(n2.length), r2 = arguments.length, a = [], u2 = 0; e3 > u2; )
              a.push(String(n2[u2++])), u2 < r2 && a.push(String(arguments[u2]));
            return a.join("");
          } });
        }, function(t2, n, e2) {
          e2(2)({ target: "String", proto: true }, { repeat: e2(145) });
        }, function(t2, n, e2) {
          var r = e2(205), o = e2(20), i = e2(46), a = e2(39), u2 = e2(40), c = e2(12), f = e2(206), s = e2(207), l = Math.max, p = Math.min, h2 = Math.floor, v = /\$([$&'`]|\d\d?|<[^>]*>)/g, g = /\$([$&'`]|\d\d?)/g;
          r("replace", 2, function(t3, n2, e3, r2) {
            var d = r2.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE, y = r2.REPLACE_KEEPS_$0, x = d ? "$" : "$0";
            return [function(e4, r3) {
              var o2 = c(this), i2 = null == e4 ? void 0 : e4[t3];
              return void 0 !== i2 ? i2.call(e4, o2, r3) : n2.call(String(o2), e4, r3);
            }, function(t4, r3) {
              if (!d && y || "string" == typeof r3 && -1 === r3.indexOf(x)) {
                var i2 = e3(n2, t4, this, r3);
                if (i2.done)
                  return i2.value;
              }
              var c2 = o(t4), h3 = String(this), v2 = "function" == typeof r3;
              v2 || (r3 = String(r3));
              var g2 = c2.global;
              if (g2) {
                var b = c2.unicode;
                c2.lastIndex = 0;
              }
              for (var S = []; ; ) {
                var E = s(c2, h3);
                if (null === E)
                  break;
                if (S.push(E), !g2)
                  break;
                "" === String(E[0]) && (c2.lastIndex = f(h3, a(c2.lastIndex), b));
              }
              for (var w, O = "", R = 0, A = 0; A < S.length; A++) {
                E = S[A];
                for (var j = String(E[0]), I = l(p(u2(E.index), h3.length), 0), k = [], P = 1; P < E.length; P++)
                  k.push(void 0 === (w = E[P]) ? w : String(w));
                var L = E.groups;
                if (v2) {
                  var T = [j].concat(k, I, h3);
                  void 0 !== L && T.push(L);
                  var _ = String(r3.apply(void 0, T));
                } else
                  _ = m(j, h3, I, k, L, r3);
                I >= R && (O += h3.slice(R, I) + _, R = I + j.length);
              }
              return O + h3.slice(R);
            }];
            function m(t4, e4, r3, o2, a2, u3) {
              var c2 = r3 + t4.length, f2 = o2.length, s2 = g;
              return void 0 !== a2 && (a2 = i(a2), s2 = v), n2.call(u3, s2, function(n3, i2) {
                var u4;
                switch (i2.charAt(0)) {
                  case "$":
                    return "$";
                  case "&":
                    return t4;
                  case "`":
                    return e4.slice(0, r3);
                  case "'":
                    return e4.slice(c2);
                  case "<":
                    u4 = a2[i2.slice(1, -1)];
                    break;
                  default:
                    var s3 = +i2;
                    if (0 === s3)
                      return n3;
                    if (s3 > f2) {
                      var l2 = h2(s3 / 10);
                      return 0 === l2 ? n3 : l2 <= f2 ? void 0 === o2[l2 - 1] ? i2.charAt(1) : o2[l2 - 1] + i2.charAt(1) : n3;
                    }
                    u4 = o2[s3 - 1];
                }
                return void 0 === u4 ? "" : u4;
              });
            }
          });
        }, function(t2, n, e2) {
          var r = e2(205), o = e2(20), i = e2(12), a = e2(161), u2 = e2(207);
          r("search", 1, function(t3, n2, e3) {
            return [function(n3) {
              var e4 = i(this), r2 = null == n3 ? void 0 : n3[t3];
              return void 0 !== r2 ? r2.call(n3, e4) : new RegExp(n3)[t3](String(e4));
            }, function(t4) {
              var r2 = e3(n2, t4, this);
              if (r2.done)
                return r2.value;
              var i2 = o(t4), c = String(this), f = i2.lastIndex;
              a(f, 0) || (i2.lastIndex = 0);
              var s = u2(i2, c);
              return a(i2.lastIndex, f) || (i2.lastIndex = f), null === s ? -1 : s.index;
            }];
          });
        }, function(t2, n, e2) {
          var r = e2(205), o = e2(186), i = e2(20), a = e2(12), u2 = e2(175), c = e2(206), f = e2(39), s = e2(207), l = e2(190), p = e2(6), h2 = [].push, v = Math.min, g = !p(function() {
            return !RegExp(4294967295, "y");
          });
          r("split", 2, function(t3, n2, e3) {
            var r2;
            return r2 = "c" == "abbc".split(/(b)*/)[1] || 4 != "test".split(/(?:)/, -1).length || 2 != "ab".split(/(?:ab)*/).length || 4 != ".".split(/(.?)(.?)/).length || ".".split(/()()/).length > 1 || "".split(/.?/).length ? function(t4, e4) {
              var r3 = String(a(this)), i2 = void 0 === e4 ? 4294967295 : e4 >>> 0;
              if (0 === i2)
                return [];
              if (void 0 === t4)
                return [r3];
              if (!o(t4))
                return n2.call(r3, t4, i2);
              for (var u3, c2, f2, s2 = [], p2 = (t4.ignoreCase ? "i" : "") + (t4.multiline ? "m" : "") + (t4.unicode ? "u" : "") + (t4.sticky ? "y" : ""), v2 = 0, g2 = new RegExp(t4.source, p2 + "g"); (u3 = l.call(g2, r3)) && !((c2 = g2.lastIndex) > v2 && (s2.push(r3.slice(v2, u3.index)), u3.length > 1 && u3.index < r3.length && h2.apply(s2, u3.slice(1)), f2 = u3[0].length, v2 = c2, s2.length >= i2)); )
                g2.lastIndex === u3.index && g2.lastIndex++;
              return v2 === r3.length ? !f2 && g2.test("") || s2.push("") : s2.push(r3.slice(v2)), s2.length > i2 ? s2.slice(0, i2) : s2;
            } : "0".split(void 0, 0).length ? function(t4, e4) {
              return void 0 === t4 && 0 === e4 ? [] : n2.call(this, t4, e4);
            } : n2, [function(n3, e4) {
              var o2 = a(this), i2 = null == n3 ? void 0 : n3[t3];
              return void 0 !== i2 ? i2.call(n3, o2, e4) : r2.call(String(o2), n3, e4);
            }, function(t4, o2) {
              var a2 = e3(r2, t4, this, o2, r2 !== n2);
              if (a2.done)
                return a2.value;
              var l2 = i(t4), p2 = String(this), h3 = u2(l2, RegExp), d = l2.unicode, y = (l2.ignoreCase ? "i" : "") + (l2.multiline ? "m" : "") + (l2.unicode ? "u" : "") + (g ? "y" : "g"), x = new h3(g ? l2 : "^(?:" + l2.source + ")", y), m = void 0 === o2 ? 4294967295 : o2 >>> 0;
              if (0 === m)
                return [];
              if (0 === p2.length)
                return null === s(x, p2) ? [p2] : [];
              for (var b = 0, S = 0, E = []; S < p2.length; ) {
                x.lastIndex = g ? S : 0;
                var w, O = s(x, g ? p2 : p2.slice(S));
                if (null === O || (w = v(f(x.lastIndex + (g ? 0 : S)), p2.length)) === b)
                  S = c(p2, S, d);
                else {
                  if (E.push(p2.slice(b, S)), E.length === m)
                    return E;
                  for (var R = 1; R <= O.length - 1; R++)
                    if (E.push(O[R]), E.length === m)
                      return E;
                  S = b = w;
                }
              }
              return E.push(p2.slice(b)), E;
            }];
          }, !g);
        }, function(t2, n, e2) {
          var r, o = e2(2), i = e2(4).f, a = e2(39), u2 = e2(199), c = e2(12), f = e2(200), s = e2(29), l = "".startsWith, p = Math.min, h2 = f("startsWith");
          o({ target: "String", proto: true, forced: !!(s || h2 || (r = i(String.prototype, "startsWith"), !r || r.writable)) && !h2 }, { startsWith: function(t3) {
            var n2 = String(c(this));
            u2(t3);
            var e3 = a(p(arguments.length > 1 ? arguments[1] : void 0, n2.length)), r2 = String(t3);
            return l ? l.call(n2, r2, e3) : n2.slice(e3, e3 + r2.length) === r2;
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(128).trim;
          r({ target: "String", proto: true, forced: e2(220)("trim") }, { trim: function() {
            return o(this);
          } });
        }, function(t2, n, e2) {
          var r = e2(6), o = e2(129);
          t2.exports = function(t3) {
            return r(function() {
              return !!o[t3]() || "\u200B\x85\u180E" != "\u200B\x85\u180E"[t3]() || o[t3].name !== t3;
            });
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(128).end, i = e2(220)("trimEnd"), a = i ? function() {
            return o(this);
          } : "".trimEnd;
          r({ target: "String", proto: true, forced: i }, { trimEnd: a, trimRight: a });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(128).start, i = e2(220)("trimStart"), a = i ? function() {
            return o(this);
          } : "".trimStart;
          r({ target: "String", proto: true, forced: i }, { trimStart: a, trimLeft: a });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(224);
          r({ target: "String", proto: true, forced: e2(225)("anchor") }, { anchor: function(t3) {
            return o(this, "a", "name", t3);
          } });
        }, function(t2, n, e2) {
          var r = e2(12), o = /"/g;
          t2.exports = function(t3, n2, e3, i) {
            var a = String(r(t3)), u2 = "<" + n2;
            return "" !== e3 && (u2 += " " + e3 + '="' + String(i).replace(o, "&quot;") + '"'), u2 + ">" + a + "</" + n2 + ">";
          };
        }, function(t2, n, e2) {
          var r = e2(6);
          t2.exports = function(t3) {
            return r(function() {
              var n2 = ""[t3]('"');
              return n2 !== n2.toLowerCase() || n2.split('"').length > 3;
            });
          };
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(224);
          r({ target: "String", proto: true, forced: e2(225)("big") }, { big: function() {
            return o(this, "big", "", "");
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(224);
          r({ target: "String", proto: true, forced: e2(225)("blink") }, { blink: function() {
            return o(this, "blink", "", "");
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(224);
          r({ target: "String", proto: true, forced: e2(225)("bold") }, { bold: function() {
            return o(this, "b", "", "");
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(224);
          r({ target: "String", proto: true, forced: e2(225)("fixed") }, { fixed: function() {
            return o(this, "tt", "", "");
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(224);
          r({ target: "String", proto: true, forced: e2(225)("fontcolor") }, { fontcolor: function(t3) {
            return o(this, "font", "color", t3);
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(224);
          r({ target: "String", proto: true, forced: e2(225)("fontsize") }, { fontsize: function(t3) {
            return o(this, "font", "size", t3);
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(224);
          r({ target: "String", proto: true, forced: e2(225)("italics") }, { italics: function() {
            return o(this, "i", "", "");
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(224);
          r({ target: "String", proto: true, forced: e2(225)("link") }, { link: function(t3) {
            return o(this, "a", "href", t3);
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(224);
          r({ target: "String", proto: true, forced: e2(225)("small") }, { small: function() {
            return o(this, "small", "", "");
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(224);
          r({ target: "String", proto: true, forced: e2(225)("strike") }, { strike: function() {
            return o(this, "strike", "", "");
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(224);
          r({ target: "String", proto: true, forced: e2(225)("sub") }, { sub: function() {
            return o(this, "sub", "", "");
          } });
        }, function(t2, n, e2) {
          var r = e2(2), o = e2(224);
          r({ target: "String", proto: true, forced: e2(225)("sup") }, { sup: function() {
            return o(this, "sup", "", "");
          } });
        }, function(t2, n, e2) {
          var r, o = e2(3), i = e2(126), a = e2(120), u2 = e2(119), c = e2(239), f = e2(14), s = e2(25).enforce, l = e2(26), p = !o.ActiveXObject && "ActiveXObject" in o, h2 = Object.isExtensible, v = function(t3) {
            return function() {
              return t3(this, arguments.length ? arguments[0] : void 0);
            };
          }, g = t2.exports = u2("WeakMap", v, c);
          if (l && p) {
            r = c.getConstructor(v, "WeakMap", true), a.REQUIRED = true;
            var d = g.prototype, y = d.delete, x = d.has, m = d.get, b = d.set;
            i(d, { delete: function(t3) {
              if (f(t3) && !h2(t3)) {
                var n2 = s(this);
                return n2.frozen || (n2.frozen = new r()), y.call(this, t3) || n2.frozen.delete(t3);
              }
              return y.call(this, t3);
            }, has: function(t3) {
              if (f(t3) && !h2(t3)) {
                var n2 = s(this);
                return n2.frozen || (n2.frozen = new r()), x.call(this, t3) || n2.frozen.has(t3);
              }
              return x.call(this, t3);
            }, get: function(t3) {
              if (f(t3) && !h2(t3)) {
                var n2 = s(this);
                return n2.frozen || (n2.frozen = new r()), x.call(this, t3) ? m.call(this, t3) : n2.frozen.get(t3);
              }
              return m.call(this, t3);
            }, set: function(t3, n2) {
              if (f(t3) && !h2(t3)) {
                var e3 = s(this);
                e3.frozen || (e3.frozen = new r()), x.call(this, t3) ? b.call(this, t3, n2) : e3.frozen.set(t3, n2);
              } else
                b.call(this, t3, n2);
              return this;
            } });
          }
        }, function(t2, n, e2) {
          var r = e2(126), o = e2(120).getWeakData, i = e2(20), a = e2(14), u2 = e2(123), c = e2(122), f = e2(63), s = e2(15), l = e2(25), p = l.set, h2 = l.getterFor, v = f.find, g = f.findIndex, d = 0, y = function(t3) {
            return t3.frozen || (t3.frozen = new x());
          }, x = function() {
            this.entries = [];
          }, m = function(t3, n2) {
            return v(t3.entries, function(t4) {
              return t4[0] === n2;
            });
          };
          x.prototype = { get: function(t3) {
            var n2 = m(this, t3);
            if (n2)
              return n2[1];
          }, has: function(t3) {
            return !!m(this, t3);
          }, set: function(t3, n2) {
            var e3 = m(this, t3);
            e3 ? e3[1] = n2 : this.entries.push([t3, n2]);
          }, delete: function(t3) {
            var n2 = g(this.entries, function(n3) {
              return n3[0] === t3;
            });
            return ~n2 && this.entries.splice(n2, 1), !!~n2;
          } }, t2.exports = { getConstructor: function(t3, n2, e3, f2) {
            var l2 = t3(function(t4, r2) {
              u2(t4, l2, n2), p(t4, { type: n2, id: d++, frozen: void 0 }), null != r2 && c(r2, t4[f2], t4, e3);
            }), v2 = h2(n2), g2 = function(t4, n3, e4) {
              var r2 = v2(t4), a2 = o(i(n3), true);
              return true === a2 ? y(r2).set(n3, e4) : a2[r2.id] = e4, t4;
            };
            return r(l2.prototype, { delete: function(t4) {
              var n3 = v2(this);
              if (!a(t4))
                return false;
              var e4 = o(t4);
              return true === e4 ? y(n3).delete(t4) : e4 && s(e4, n3.id) && delete e4[n3.id];
            }, has: function(t4) {
              var n3 = v2(this);
              if (!a(t4))
                return false;
              var e4 = o(t4);
              return true === e4 ? y(n3).has(t4) : e4 && s(e4, n3.id);
            } }), r(l2.prototype, e3 ? { get: function(t4) {
              var n3 = v2(this);
              if (a(t4)) {
                var e4 = o(t4);
                return true === e4 ? y(n3).get(t4) : e4 ? e4[n3.id] : void 0;
              }
            }, set: function(t4, n3) {
              return g2(this, t4, n3);
            } } : { add: function(t4) {
              return g2(this, t4, true);
            } }), l2;
          } };
        }, function(t2, n, e2) {
          e2(119)("WeakSet", function(t3) {
            return function() {
              return t3(this, arguments.length ? arguments[0] : void 0);
            };
          }, e2(239));
        }, function(t2, n, e2) {
          var r = e2(3), o = e2(242), i = e2(77), a = e2(18);
          for (var u2 in o) {
            var c = r[u2], f = c && c.prototype;
            if (f && f.forEach !== i)
              try {
                a(f, "forEach", i);
              } catch (t3) {
                f.forEach = i;
              }
          }
        }, function(t2, n) {
          t2.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };
        }, function(t2, n, e2) {
          e2(203);
          var r, o = e2(2), i = e2(5), a = e2(244), u2 = e2(3), c = e2(59), f = e2(21), s = e2(123), l = e2(15), p = e2(147), h2 = e2(79), v = e2(197).codeAt, g = e2(245), d = e2(95), y = e2(246), x = e2(25), m = u2.URL, b = y.URLSearchParams, S = y.getState, E = x.set, w = x.getterFor("URL"), O = Math.floor, R = Math.pow, A = /[A-Za-z]/, j = /[\d+-.A-Za-z]/, I = /\d/, k = /^(0x|0X)/, P = /^[0-7]+$/, L = /^\d+$/, T = /^[\dA-Fa-f]+$/, _ = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/, U = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/, N = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g, C = /[\u0009\u000A\u000D]/g, F = function(t3, n2) {
            var e3, r2, o2;
            if ("[" == n2.charAt(0)) {
              if ("]" != n2.charAt(n2.length - 1))
                return "Invalid host";
              if (!(e3 = z(n2.slice(1, -1))))
                return "Invalid host";
              t3.host = e3;
            } else if (X(t3)) {
              if (n2 = g(n2), _.test(n2))
                return "Invalid host";
              if (null === (e3 = M(n2)))
                return "Invalid host";
              t3.host = e3;
            } else {
              if (U.test(n2))
                return "Invalid host";
              for (e3 = "", r2 = h2(n2), o2 = 0; o2 < r2.length; o2++)
                e3 += G(r2[o2], q);
              t3.host = e3;
            }
          }, M = function(t3) {
            var n2, e3, r2, o2, i2, a2, u3, c2 = t3.split(".");
            if (c2.length && "" == c2[c2.length - 1] && c2.pop(), (n2 = c2.length) > 4)
              return t3;
            for (e3 = [], r2 = 0; r2 < n2; r2++) {
              if ("" == (o2 = c2[r2]))
                return t3;
              if (i2 = 10, o2.length > 1 && "0" == o2.charAt(0) && (i2 = k.test(o2) ? 16 : 8, o2 = o2.slice(8 == i2 ? 1 : 2)), "" === o2)
                a2 = 0;
              else {
                if (!(10 == i2 ? L : 8 == i2 ? P : T).test(o2))
                  return t3;
                a2 = parseInt(o2, i2);
              }
              e3.push(a2);
            }
            for (r2 = 0; r2 < n2; r2++)
              if (a2 = e3[r2], r2 == n2 - 1) {
                if (a2 >= R(256, 5 - n2))
                  return null;
              } else if (a2 > 255)
                return null;
            for (u3 = e3.pop(), r2 = 0; r2 < e3.length; r2++)
              u3 += e3[r2] * R(256, 3 - r2);
            return u3;
          }, z = function(t3) {
            var n2, e3, r2, o2, i2, a2, u3, c2 = [0, 0, 0, 0, 0, 0, 0, 0], f2 = 0, s2 = null, l2 = 0, p2 = function() {
              return t3.charAt(l2);
            };
            if (":" == p2()) {
              if (":" != t3.charAt(1))
                return;
              l2 += 2, s2 = ++f2;
            }
            for (; p2(); ) {
              if (8 == f2)
                return;
              if (":" != p2()) {
                for (n2 = e3 = 0; e3 < 4 && T.test(p2()); )
                  n2 = 16 * n2 + parseInt(p2(), 16), l2++, e3++;
                if ("." == p2()) {
                  if (0 == e3)
                    return;
                  if (l2 -= e3, f2 > 6)
                    return;
                  for (r2 = 0; p2(); ) {
                    if (o2 = null, r2 > 0) {
                      if (!("." == p2() && r2 < 4))
                        return;
                      l2++;
                    }
                    if (!I.test(p2()))
                      return;
                    for (; I.test(p2()); ) {
                      if (i2 = parseInt(p2(), 10), null === o2)
                        o2 = i2;
                      else {
                        if (0 == o2)
                          return;
                        o2 = 10 * o2 + i2;
                      }
                      if (o2 > 255)
                        return;
                      l2++;
                    }
                    c2[f2] = 256 * c2[f2] + o2, 2 != ++r2 && 4 != r2 || f2++;
                  }
                  if (4 != r2)
                    return;
                  break;
                }
                if (":" == p2()) {
                  if (l2++, !p2())
                    return;
                } else if (p2())
                  return;
                c2[f2++] = n2;
              } else {
                if (null !== s2)
                  return;
                l2++, s2 = ++f2;
              }
            }
            if (null !== s2)
              for (a2 = f2 - s2, f2 = 7; 0 != f2 && a2 > 0; )
                u3 = c2[f2], c2[f2--] = c2[s2 + a2 - 1], c2[s2 + --a2] = u3;
            else if (8 != f2)
              return;
            return c2;
          }, D = function(t3) {
            var n2, e3, r2, o2;
            if ("number" == typeof t3) {
              for (n2 = [], e3 = 0; e3 < 4; e3++)
                n2.unshift(t3 % 256), t3 = O(t3 / 256);
              return n2.join(".");
            }
            if ("object" == typeof t3) {
              for (n2 = "", r2 = function(t4) {
                for (var n3 = null, e4 = 1, r3 = null, o3 = 0, i2 = 0; i2 < 8; i2++)
                  0 !== t4[i2] ? (o3 > e4 && (n3 = r3, e4 = o3), r3 = null, o3 = 0) : (null === r3 && (r3 = i2), ++o3);
                return o3 > e4 && (n3 = r3, e4 = o3), n3;
              }(t3), e3 = 0; e3 < 8; e3++)
                o2 && 0 === t3[e3] || (o2 && (o2 = false), r2 === e3 ? (n2 += e3 ? ":" : "::", o2 = true) : (n2 += t3[e3].toString(16), e3 < 7 && (n2 += ":")));
              return "[" + n2 + "]";
            }
            return t3;
          }, q = {}, B = p({}, q, { " ": 1, '"': 1, "<": 1, ">": 1, "`": 1 }), W = p({}, B, { "#": 1, "?": 1, "{": 1, "}": 1 }), $ = p({}, W, { "/": 1, ":": 1, ";": 1, "=": 1, "@": 1, "[": 1, "\\": 1, "]": 1, "^": 1, "|": 1 }), G = function(t3, n2) {
            var e3 = v(t3, 0);
            return e3 > 32 && e3 < 127 && !l(n2, t3) ? t3 : encodeURIComponent(t3);
          }, V = { ftp: 21, file: null, http: 80, https: 443, ws: 80, wss: 443 }, X = function(t3) {
            return l(V, t3.scheme);
          }, Y = function(t3) {
            return "" != t3.username || "" != t3.password;
          }, K = function(t3) {
            return !t3.host || t3.cannotBeABaseURL || "file" == t3.scheme;
          }, J = function(t3, n2) {
            var e3;
            return 2 == t3.length && A.test(t3.charAt(0)) && (":" == (e3 = t3.charAt(1)) || !n2 && "|" == e3);
          }, H2 = function(t3) {
            var n2;
            return t3.length > 1 && J(t3.slice(0, 2)) && (2 == t3.length || "/" === (n2 = t3.charAt(2)) || "\\" === n2 || "?" === n2 || "#" === n2);
          }, Q = function(t3) {
            var n2 = t3.path, e3 = n2.length;
            !e3 || "file" == t3.scheme && 1 == e3 && J(n2[0], true) || n2.pop();
          }, Z = function(t3) {
            return "." === t3 || "%2e" === t3.toLowerCase();
          }, tt = {}, nt = {}, et = {}, rt = {}, ot = {}, it = {}, at = {}, ut = {}, ct = {}, ft = {}, st = {}, lt = {}, pt = {}, ht = {}, vt = {}, gt = {}, dt = {}, yt = {}, xt = {}, mt = {}, bt = {}, St = function(t3, n2, e3, o2) {
            var i2, a2, u3, c2, f2, s2 = e3 || tt, p2 = 0, v2 = "", g2 = false, d2 = false, y2 = false;
            for (e3 || (t3.scheme = "", t3.username = "", t3.password = "", t3.host = null, t3.port = null, t3.path = [], t3.query = null, t3.fragment = null, t3.cannotBeABaseURL = false, n2 = n2.replace(N, "")), n2 = n2.replace(C, ""), i2 = h2(n2); p2 <= i2.length; ) {
              switch (a2 = i2[p2], s2) {
                case tt:
                  if (!a2 || !A.test(a2)) {
                    if (e3)
                      return "Invalid scheme";
                    s2 = et;
                    continue;
                  }
                  v2 += a2.toLowerCase(), s2 = nt;
                  break;
                case nt:
                  if (a2 && (j.test(a2) || "+" == a2 || "-" == a2 || "." == a2))
                    v2 += a2.toLowerCase();
                  else {
                    if (":" != a2) {
                      if (e3)
                        return "Invalid scheme";
                      v2 = "", s2 = et, p2 = 0;
                      continue;
                    }
                    if (e3 && (X(t3) != l(V, v2) || "file" == v2 && (Y(t3) || null !== t3.port) || "file" == t3.scheme && !t3.host))
                      return;
                    if (t3.scheme = v2, e3)
                      return void (X(t3) && V[t3.scheme] == t3.port && (t3.port = null));
                    v2 = "", "file" == t3.scheme ? s2 = ht : X(t3) && o2 && o2.scheme == t3.scheme ? s2 = rt : X(t3) ? s2 = ut : "/" == i2[p2 + 1] ? (s2 = ot, p2++) : (t3.cannotBeABaseURL = true, t3.path.push(""), s2 = xt);
                  }
                  break;
                case et:
                  if (!o2 || o2.cannotBeABaseURL && "#" != a2)
                    return "Invalid scheme";
                  if (o2.cannotBeABaseURL && "#" == a2) {
                    t3.scheme = o2.scheme, t3.path = o2.path.slice(), t3.query = o2.query, t3.fragment = "", t3.cannotBeABaseURL = true, s2 = bt;
                    break;
                  }
                  s2 = "file" == o2.scheme ? ht : it;
                  continue;
                case rt:
                  if ("/" != a2 || "/" != i2[p2 + 1]) {
                    s2 = it;
                    continue;
                  }
                  s2 = ct, p2++;
                  break;
                case ot:
                  if ("/" == a2) {
                    s2 = ft;
                    break;
                  }
                  s2 = yt;
                  continue;
                case it:
                  if (t3.scheme = o2.scheme, a2 == r)
                    t3.username = o2.username, t3.password = o2.password, t3.host = o2.host, t3.port = o2.port, t3.path = o2.path.slice(), t3.query = o2.query;
                  else if ("/" == a2 || "\\" == a2 && X(t3))
                    s2 = at;
                  else if ("?" == a2)
                    t3.username = o2.username, t3.password = o2.password, t3.host = o2.host, t3.port = o2.port, t3.path = o2.path.slice(), t3.query = "", s2 = mt;
                  else {
                    if ("#" != a2) {
                      t3.username = o2.username, t3.password = o2.password, t3.host = o2.host, t3.port = o2.port, t3.path = o2.path.slice(), t3.path.pop(), s2 = yt;
                      continue;
                    }
                    t3.username = o2.username, t3.password = o2.password, t3.host = o2.host, t3.port = o2.port, t3.path = o2.path.slice(), t3.query = o2.query, t3.fragment = "", s2 = bt;
                  }
                  break;
                case at:
                  if (!X(t3) || "/" != a2 && "\\" != a2) {
                    if ("/" != a2) {
                      t3.username = o2.username, t3.password = o2.password, t3.host = o2.host, t3.port = o2.port, s2 = yt;
                      continue;
                    }
                    s2 = ft;
                  } else
                    s2 = ct;
                  break;
                case ut:
                  if (s2 = ct, "/" != a2 || "/" != v2.charAt(p2 + 1))
                    continue;
                  p2++;
                  break;
                case ct:
                  if ("/" != a2 && "\\" != a2) {
                    s2 = ft;
                    continue;
                  }
                  break;
                case ft:
                  if ("@" == a2) {
                    g2 && (v2 = "%40" + v2), g2 = true, u3 = h2(v2);
                    for (var x2 = 0; x2 < u3.length; x2++) {
                      var m2 = u3[x2];
                      if (":" != m2 || y2) {
                        var b2 = G(m2, $);
                        y2 ? t3.password += b2 : t3.username += b2;
                      } else
                        y2 = true;
                    }
                    v2 = "";
                  } else if (a2 == r || "/" == a2 || "?" == a2 || "#" == a2 || "\\" == a2 && X(t3)) {
                    if (g2 && "" == v2)
                      return "Invalid authority";
                    p2 -= h2(v2).length + 1, v2 = "", s2 = st;
                  } else
                    v2 += a2;
                  break;
                case st:
                case lt:
                  if (e3 && "file" == t3.scheme) {
                    s2 = gt;
                    continue;
                  }
                  if (":" != a2 || d2) {
                    if (a2 == r || "/" == a2 || "?" == a2 || "#" == a2 || "\\" == a2 && X(t3)) {
                      if (X(t3) && "" == v2)
                        return "Invalid host";
                      if (e3 && "" == v2 && (Y(t3) || null !== t3.port))
                        return;
                      if (c2 = F(t3, v2))
                        return c2;
                      if (v2 = "", s2 = dt, e3)
                        return;
                      continue;
                    }
                    "[" == a2 ? d2 = true : "]" == a2 && (d2 = false), v2 += a2;
                  } else {
                    if ("" == v2)
                      return "Invalid host";
                    if (c2 = F(t3, v2))
                      return c2;
                    if (v2 = "", s2 = pt, e3 == lt)
                      return;
                  }
                  break;
                case pt:
                  if (!I.test(a2)) {
                    if (a2 == r || "/" == a2 || "?" == a2 || "#" == a2 || "\\" == a2 && X(t3) || e3) {
                      if ("" != v2) {
                        var S2 = parseInt(v2, 10);
                        if (S2 > 65535)
                          return "Invalid port";
                        t3.port = X(t3) && S2 === V[t3.scheme] ? null : S2, v2 = "";
                      }
                      if (e3)
                        return;
                      s2 = dt;
                      continue;
                    }
                    return "Invalid port";
                  }
                  v2 += a2;
                  break;
                case ht:
                  if (t3.scheme = "file", "/" == a2 || "\\" == a2)
                    s2 = vt;
                  else {
                    if (!o2 || "file" != o2.scheme) {
                      s2 = yt;
                      continue;
                    }
                    if (a2 == r)
                      t3.host = o2.host, t3.path = o2.path.slice(), t3.query = o2.query;
                    else if ("?" == a2)
                      t3.host = o2.host, t3.path = o2.path.slice(), t3.query = "", s2 = mt;
                    else {
                      if ("#" != a2) {
                        H2(i2.slice(p2).join("")) || (t3.host = o2.host, t3.path = o2.path.slice(), Q(t3)), s2 = yt;
                        continue;
                      }
                      t3.host = o2.host, t3.path = o2.path.slice(), t3.query = o2.query, t3.fragment = "", s2 = bt;
                    }
                  }
                  break;
                case vt:
                  if ("/" == a2 || "\\" == a2) {
                    s2 = gt;
                    break;
                  }
                  o2 && "file" == o2.scheme && !H2(i2.slice(p2).join("")) && (J(o2.path[0], true) ? t3.path.push(o2.path[0]) : t3.host = o2.host), s2 = yt;
                  continue;
                case gt:
                  if (a2 == r || "/" == a2 || "\\" == a2 || "?" == a2 || "#" == a2) {
                    if (!e3 && J(v2))
                      s2 = yt;
                    else if ("" == v2) {
                      if (t3.host = "", e3)
                        return;
                      s2 = dt;
                    } else {
                      if (c2 = F(t3, v2))
                        return c2;
                      if ("localhost" == t3.host && (t3.host = ""), e3)
                        return;
                      v2 = "", s2 = dt;
                    }
                    continue;
                  }
                  v2 += a2;
                  break;
                case dt:
                  if (X(t3)) {
                    if (s2 = yt, "/" != a2 && "\\" != a2)
                      continue;
                  } else if (e3 || "?" != a2)
                    if (e3 || "#" != a2) {
                      if (a2 != r && (s2 = yt, "/" != a2))
                        continue;
                    } else
                      t3.fragment = "", s2 = bt;
                  else
                    t3.query = "", s2 = mt;
                  break;
                case yt:
                  if (a2 == r || "/" == a2 || "\\" == a2 && X(t3) || !e3 && ("?" == a2 || "#" == a2)) {
                    if (".." === (f2 = (f2 = v2).toLowerCase()) || "%2e." === f2 || ".%2e" === f2 || "%2e%2e" === f2 ? (Q(t3), "/" == a2 || "\\" == a2 && X(t3) || t3.path.push("")) : Z(v2) ? "/" == a2 || "\\" == a2 && X(t3) || t3.path.push("") : ("file" == t3.scheme && !t3.path.length && J(v2) && (t3.host && (t3.host = ""), v2 = v2.charAt(0) + ":"), t3.path.push(v2)), v2 = "", "file" == t3.scheme && (a2 == r || "?" == a2 || "#" == a2))
                      for (; t3.path.length > 1 && "" === t3.path[0]; )
                        t3.path.shift();
                    "?" == a2 ? (t3.query = "", s2 = mt) : "#" == a2 && (t3.fragment = "", s2 = bt);
                  } else
                    v2 += G(a2, W);
                  break;
                case xt:
                  "?" == a2 ? (t3.query = "", s2 = mt) : "#" == a2 ? (t3.fragment = "", s2 = bt) : a2 != r && (t3.path[0] += G(a2, q));
                  break;
                case mt:
                  e3 || "#" != a2 ? a2 != r && ("'" == a2 && X(t3) ? t3.query += "%27" : t3.query += "#" == a2 ? "%23" : G(a2, q)) : (t3.fragment = "", s2 = bt);
                  break;
                case bt:
                  a2 != r && (t3.fragment += G(a2, B));
              }
              p2++;
            }
          }, Et = function(t3) {
            var n2, e3, r2 = s(this, Et, "URL"), o2 = arguments.length > 1 ? arguments[1] : void 0, a2 = String(t3), u3 = E(r2, { type: "URL" });
            if (void 0 !== o2) {
              if (o2 instanceof Et)
                n2 = w(o2);
              else if (e3 = St(n2 = {}, String(o2)))
                throw TypeError(e3);
            }
            if (e3 = St(u3, a2, null, n2))
              throw TypeError(e3);
            var c2 = u3.searchParams = new b(), f2 = S(c2);
            f2.updateSearchParams(u3.query), f2.updateURL = function() {
              u3.query = String(c2) || null;
            }, i || (r2.href = Ot.call(r2), r2.origin = Rt.call(r2), r2.protocol = At.call(r2), r2.username = jt.call(r2), r2.password = It.call(r2), r2.host = kt.call(r2), r2.hostname = Pt.call(r2), r2.port = Lt.call(r2), r2.pathname = Tt.call(r2), r2.search = _t.call(r2), r2.searchParams = Ut.call(r2), r2.hash = Nt.call(r2));
          }, wt = Et.prototype, Ot = function() {
            var t3 = w(this), n2 = t3.scheme, e3 = t3.username, r2 = t3.password, o2 = t3.host, i2 = t3.port, a2 = t3.path, u3 = t3.query, c2 = t3.fragment, f2 = n2 + ":";
            return null !== o2 ? (f2 += "//", Y(t3) && (f2 += e3 + (r2 ? ":" + r2 : "") + "@"), f2 += D(o2), null !== i2 && (f2 += ":" + i2)) : "file" == n2 && (f2 += "//"), f2 += t3.cannotBeABaseURL ? a2[0] : a2.length ? "/" + a2.join("/") : "", null !== u3 && (f2 += "?" + u3), null !== c2 && (f2 += "#" + c2), f2;
          }, Rt = function() {
            var t3 = w(this), n2 = t3.scheme, e3 = t3.port;
            if ("blob" == n2)
              try {
                return new URL(n2.path[0]).origin;
              } catch (t4) {
                return "null";
              }
            return "file" != n2 && X(t3) ? n2 + "://" + D(t3.host) + (null !== e3 ? ":" + e3 : "") : "null";
          }, At = function() {
            return w(this).scheme + ":";
          }, jt = function() {
            return w(this).username;
          }, It = function() {
            return w(this).password;
          }, kt = function() {
            var t3 = w(this), n2 = t3.host, e3 = t3.port;
            return null === n2 ? "" : null === e3 ? D(n2) : D(n2) + ":" + e3;
          }, Pt = function() {
            var t3 = w(this).host;
            return null === t3 ? "" : D(t3);
          }, Lt = function() {
            var t3 = w(this).port;
            return null === t3 ? "" : String(t3);
          }, Tt = function() {
            var t3 = w(this), n2 = t3.path;
            return t3.cannotBeABaseURL ? n2[0] : n2.length ? "/" + n2.join("/") : "";
          }, _t = function() {
            var t3 = w(this).query;
            return t3 ? "?" + t3 : "";
          }, Ut = function() {
            return w(this).searchParams;
          }, Nt = function() {
            var t3 = w(this).fragment;
            return t3 ? "#" + t3 : "";
          }, Ct = function(t3, n2) {
            return { get: t3, set: n2, configurable: true, enumerable: true };
          };
          if (i && c(wt, { href: Ct(Ot, function(t3) {
            var n2 = w(this), e3 = String(t3), r2 = St(n2, e3);
            if (r2)
              throw TypeError(r2);
            S(n2.searchParams).updateSearchParams(n2.query);
          }), origin: Ct(Rt), protocol: Ct(At, function(t3) {
            var n2 = w(this);
            St(n2, String(t3) + ":", tt);
          }), username: Ct(jt, function(t3) {
            var n2 = w(this), e3 = h2(String(t3));
            if (!K(n2)) {
              n2.username = "";
              for (var r2 = 0; r2 < e3.length; r2++)
                n2.username += G(e3[r2], $);
            }
          }), password: Ct(It, function(t3) {
            var n2 = w(this), e3 = h2(String(t3));
            if (!K(n2)) {
              n2.password = "";
              for (var r2 = 0; r2 < e3.length; r2++)
                n2.password += G(e3[r2], $);
            }
          }), host: Ct(kt, function(t3) {
            var n2 = w(this);
            n2.cannotBeABaseURL || St(n2, String(t3), st);
          }), hostname: Ct(Pt, function(t3) {
            var n2 = w(this);
            n2.cannotBeABaseURL || St(n2, String(t3), lt);
          }), port: Ct(Lt, function(t3) {
            var n2 = w(this);
            K(n2) || ("" == (t3 = String(t3)) ? n2.port = null : St(n2, t3, pt));
          }), pathname: Ct(Tt, function(t3) {
            var n2 = w(this);
            n2.cannotBeABaseURL || (n2.path = [], St(n2, t3 + "", dt));
          }), search: Ct(_t, function(t3) {
            var n2 = w(this);
            "" == (t3 = String(t3)) ? n2.query = null : ("?" == t3.charAt(0) && (t3 = t3.slice(1)), n2.query = "", St(n2, t3, mt)), S(n2.searchParams).updateSearchParams(n2.query);
          }), searchParams: Ct(Ut), hash: Ct(Nt, function(t3) {
            var n2 = w(this);
            "" != (t3 = String(t3)) ? ("#" == t3.charAt(0) && (t3 = t3.slice(1)), n2.fragment = "", St(n2, t3, bt)) : n2.fragment = null;
          }) }), f(wt, "toJSON", function() {
            return Ot.call(this);
          }, { enumerable: true }), f(wt, "toString", function() {
            return Ot.call(this);
          }, { enumerable: true }), m) {
            var Ft = m.createObjectURL, Mt = m.revokeObjectURL;
            Ft && f(Et, "createObjectURL", function(t3) {
              return Ft.apply(m, arguments);
            }), Mt && f(Et, "revokeObjectURL", function(t3) {
              return Mt.apply(m, arguments);
            });
          }
          d(Et, "URL"), o({ global: true, forced: !a, sham: !i }, { URL: Et });
        }, function(t2, n, e2) {
          var r = e2(6), o = e2(49), i = e2(29), a = o("iterator");
          t2.exports = !r(function() {
            var t3 = new URL("b?a=1&b=2&c=3", "http://a"), n2 = t3.searchParams, e3 = "";
            return t3.pathname = "c%20d", n2.forEach(function(t4, r2) {
              n2.delete("b"), e3 += r2 + t4;
            }), i && !t3.toJSON || !n2.sort || "http://a/c%20d?a=1&c=3" !== t3.href || "3" !== n2.get("c") || "a=1" !== String(new URLSearchParams("?a=1")) || !n2[a] || "a" !== new URL("https://a@b").username || "b" !== new URLSearchParams(new URLSearchParams("a=b")).get("a") || "xn--e1aybc" !== new URL("http://\u0442\u0435\u0441\u0442").host || "#%D0%B1" !== new URL("http://a#\u0431").hash || "a1c3" !== e3 || "x" !== new URL("http://x", void 0).host;
          });
        }, function(t2, n, e2) {
          var r = /[^\0-\u007E]/, o = /[.\u3002\uFF0E\uFF61]/g, i = "Overflow: input needs wider integers to process", a = Math.floor, u2 = String.fromCharCode, c = function(t3) {
            return t3 + 22 + 75 * (t3 < 26);
          }, f = function(t3, n2, e3) {
            var r2 = 0;
            for (t3 = e3 ? a(t3 / 700) : t3 >> 1, t3 += a(t3 / n2); t3 > 455; r2 += 36)
              t3 = a(t3 / 35);
            return a(r2 + 36 * t3 / (t3 + 38));
          }, s = function(t3) {
            var n2, e3, r2 = [], o2 = (t3 = function(t4) {
              for (var n3 = [], e4 = 0, r3 = t4.length; e4 < r3; ) {
                var o3 = t4.charCodeAt(e4++);
                if (o3 >= 55296 && o3 <= 56319 && e4 < r3) {
                  var i2 = t4.charCodeAt(e4++);
                  56320 == (64512 & i2) ? n3.push(((1023 & o3) << 10) + (1023 & i2) + 65536) : (n3.push(o3), e4--);
                } else
                  n3.push(o3);
              }
              return n3;
            }(t3)).length, s2 = 128, l = 0, p = 72;
            for (n2 = 0; n2 < t3.length; n2++)
              (e3 = t3[n2]) < 128 && r2.push(u2(e3));
            var h2 = r2.length, v = h2;
            for (h2 && r2.push("-"); v < o2; ) {
              var g = 2147483647;
              for (n2 = 0; n2 < t3.length; n2++)
                (e3 = t3[n2]) >= s2 && e3 < g && (g = e3);
              var d = v + 1;
              if (g - s2 > a((2147483647 - l) / d))
                throw RangeError(i);
              for (l += (g - s2) * d, s2 = g, n2 = 0; n2 < t3.length; n2++) {
                if ((e3 = t3[n2]) < s2 && ++l > 2147483647)
                  throw RangeError(i);
                if (e3 == s2) {
                  for (var y = l, x = 36; ; x += 36) {
                    var m = x <= p ? 1 : x >= p + 26 ? 26 : x - p;
                    if (y < m)
                      break;
                    var b = y - m, S = 36 - m;
                    r2.push(u2(c(m + b % S))), y = a(b / S);
                  }
                  r2.push(u2(c(y))), p = f(l, d, v == h2), l = 0, ++v;
                }
              }
              ++l, ++s2;
            }
            return r2.join("");
          };
          t2.exports = function(t3) {
            var n2, e3, i2 = [], a2 = t3.toLowerCase().replace(o, ".").split(".");
            for (n2 = 0; n2 < a2.length; n2++)
              e3 = a2[n2], i2.push(r.test(e3) ? "xn--" + s(e3) : e3);
            return i2.join(".");
          };
        }, function(t2, n, e2) {
          e2(89);
          var r = e2(2), o = e2(34), i = e2(244), a = e2(21), u2 = e2(126), c = e2(95), f = e2(91), s = e2(25), l = e2(123), p = e2(15), h2 = e2(64), v = e2(84), g = e2(20), d = e2(14), y = e2(58), x = e2(8), m = e2(247), b = e2(83), S = e2(49), E = o("fetch"), w = o("Headers"), O = S("iterator"), R = s.set, A = s.getterFor("URLSearchParams"), j = s.getterFor("URLSearchParamsIterator"), I = /\+/g, k = Array(4), P = function(t3) {
            return k[t3 - 1] || (k[t3 - 1] = RegExp("((?:%[\\da-f]{2}){" + t3 + "})", "gi"));
          }, L = function(t3) {
            try {
              return decodeURIComponent(t3);
            } catch (n2) {
              return t3;
            }
          }, T = function(t3) {
            var n2 = t3.replace(I, " "), e3 = 4;
            try {
              return decodeURIComponent(n2);
            } catch (t4) {
              for (; e3; )
                n2 = n2.replace(P(e3--), L);
              return n2;
            }
          }, _ = /[!'()~]|%20/g, U = { "!": "%21", "'": "%27", "(": "%28", ")": "%29", "~": "%7E", "%20": "+" }, N = function(t3) {
            return U[t3];
          }, C = function(t3) {
            return encodeURIComponent(t3).replace(_, N);
          }, F = function(t3, n2) {
            if (n2)
              for (var e3, r2, o2 = n2.split("&"), i2 = 0; i2 < o2.length; )
                (e3 = o2[i2++]).length && (r2 = e3.split("="), t3.push({ key: T(r2.shift()), value: T(r2.join("=")) }));
          }, M = function(t3) {
            this.entries.length = 0, F(this.entries, t3);
          }, z = function(t3, n2) {
            if (t3 < n2)
              throw TypeError("Not enough arguments");
          }, D = f(function(t3, n2) {
            R(this, { type: "URLSearchParamsIterator", iterator: m(A(t3).entries), kind: n2 });
          }, "Iterator", function() {
            var t3 = j(this), n2 = t3.kind, e3 = t3.iterator.next(), r2 = e3.value;
            return e3.done || (e3.value = "keys" === n2 ? r2.key : "values" === n2 ? r2.value : [r2.key, r2.value]), e3;
          }), q = function() {
            l(this, q, "URLSearchParams");
            var t3, n2, e3, r2, o2, i2, a2, u3, c2, f2 = arguments.length > 0 ? arguments[0] : void 0, s2 = this, h3 = [];
            if (R(s2, { type: "URLSearchParams", entries: h3, updateURL: function() {
            }, updateSearchParams: M }), void 0 !== f2)
              if (d(f2))
                if ("function" == typeof (t3 = b(f2)))
                  for (e3 = (n2 = t3.call(f2)).next; !(r2 = e3.call(n2)).done; ) {
                    if ((a2 = (i2 = (o2 = m(g(r2.value))).next).call(o2)).done || (u3 = i2.call(o2)).done || !i2.call(o2).done)
                      throw TypeError("Expected sequence with length 2");
                    h3.push({ key: a2.value + "", value: u3.value + "" });
                  }
                else
                  for (c2 in f2)
                    p(f2, c2) && h3.push({ key: c2, value: f2[c2] + "" });
              else
                F(h3, "string" == typeof f2 ? "?" === f2.charAt(0) ? f2.slice(1) : f2 : f2 + "");
          }, B = q.prototype;
          u2(B, { append: function(t3, n2) {
            z(arguments.length, 2);
            var e3 = A(this);
            e3.entries.push({ key: t3 + "", value: n2 + "" }), e3.updateURL();
          }, delete: function(t3) {
            z(arguments.length, 1);
            for (var n2 = A(this), e3 = n2.entries, r2 = t3 + "", o2 = 0; o2 < e3.length; )
              e3[o2].key === r2 ? e3.splice(o2, 1) : o2++;
            n2.updateURL();
          }, get: function(t3) {
            z(arguments.length, 1);
            for (var n2 = A(this).entries, e3 = t3 + "", r2 = 0; r2 < n2.length; r2++)
              if (n2[r2].key === e3)
                return n2[r2].value;
            return null;
          }, getAll: function(t3) {
            z(arguments.length, 1);
            for (var n2 = A(this).entries, e3 = t3 + "", r2 = [], o2 = 0; o2 < n2.length; o2++)
              n2[o2].key === e3 && r2.push(n2[o2].value);
            return r2;
          }, has: function(t3) {
            z(arguments.length, 1);
            for (var n2 = A(this).entries, e3 = t3 + "", r2 = 0; r2 < n2.length; )
              if (n2[r2++].key === e3)
                return true;
            return false;
          }, set: function(t3, n2) {
            z(arguments.length, 1);
            for (var e3, r2 = A(this), o2 = r2.entries, i2 = false, a2 = t3 + "", u3 = n2 + "", c2 = 0; c2 < o2.length; c2++)
              (e3 = o2[c2]).key === a2 && (i2 ? o2.splice(c2--, 1) : (i2 = true, e3.value = u3));
            i2 || o2.push({ key: a2, value: u3 }), r2.updateURL();
          }, sort: function() {
            var t3, n2, e3, r2 = A(this), o2 = r2.entries, i2 = o2.slice();
            for (o2.length = 0, e3 = 0; e3 < i2.length; e3++) {
              for (t3 = i2[e3], n2 = 0; n2 < e3; n2++)
                if (o2[n2].key > t3.key) {
                  o2.splice(n2, 0, t3);
                  break;
                }
              n2 === e3 && o2.push(t3);
            }
            r2.updateURL();
          }, forEach: function(t3) {
            for (var n2, e3 = A(this).entries, r2 = h2(t3, arguments.length > 1 ? arguments[1] : void 0, 3), o2 = 0; o2 < e3.length; )
              r2((n2 = e3[o2++]).value, n2.key, this);
          }, keys: function() {
            return new D(this, "keys");
          }, values: function() {
            return new D(this, "values");
          }, entries: function() {
            return new D(this, "entries");
          } }, { enumerable: true }), a(B, O, B.entries), a(B, "toString", function() {
            for (var t3, n2 = A(this).entries, e3 = [], r2 = 0; r2 < n2.length; )
              t3 = n2[r2++], e3.push(C(t3.key) + "=" + C(t3.value));
            return e3.join("&");
          }, { enumerable: true }), c(q, "URLSearchParams"), r({ global: true, forced: !i }, { URLSearchParams: q }), i || "function" != typeof E || "function" != typeof w || r({ global: true, enumerable: true, forced: true }, { fetch: function(t3) {
            var n2, e3, r2, o2 = [t3];
            return arguments.length > 1 && (n2 = arguments[1], d(n2) && (e3 = n2.body, "URLSearchParams" === v(e3) && ((r2 = n2.headers ? new w(n2.headers) : new w()).has("content-type") || r2.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"), n2 = y(n2, { body: x(0, String(e3)), headers: x(0, r2) }))), o2.push(n2)), E.apply(this, o2);
          } }), t2.exports = { URLSearchParams: q, getState: A };
        }, function(t2, n, e2) {
          var r = e2(20), o = e2(83);
          t2.exports = function(t3) {
            var n2 = o(t3);
            if ("function" != typeof n2)
              throw TypeError(String(t3) + " is not iterable");
            return r(n2.call(t3));
          };
        }, function(t2, n, e2) {
          e2(2)({ target: "URL", proto: true, enumerable: true }, { toJSON: function() {
            return URL.prototype.toString.call(this);
          } });
        }]);
      }();
      !function(t) {
        "use strict";
        var e2 = "URLSearchParams" in self, r = "Symbol" in self && "iterator" in Symbol, o = "FileReader" in self && "Blob" in self && function() {
          try {
            return new Blob(), true;
          } catch (t2) {
            return false;
          }
        }(), n = "FormData" in self, i = "ArrayBuffer" in self;
        if (i)
          var s = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"], a = ArrayBuffer.isView || function(t2) {
            return t2 && s.indexOf(Object.prototype.toString.call(t2)) > -1;
          };
        function h2(t2) {
          if ("string" != typeof t2 && (t2 = String(t2)), /[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t2))
            throw new TypeError("Invalid character in header field name");
          return t2.toLowerCase();
        }
        function u2(t2) {
          return "string" != typeof t2 && (t2 = String(t2)), t2;
        }
        function f(t2) {
          var e3 = { next: function() {
            var e4 = t2.shift();
            return { done: void 0 === e4, value: e4 };
          } };
          return r && (e3[Symbol.iterator] = function() {
            return e3;
          }), e3;
        }
        function d(t2) {
          this.map = {}, t2 instanceof d ? t2.forEach(function(t3, e3) {
            this.append(e3, t3);
          }, this) : Array.isArray(t2) ? t2.forEach(function(t3) {
            this.append(t3[0], t3[1]);
          }, this) : t2 && Object.getOwnPropertyNames(t2).forEach(function(e3) {
            this.append(e3, t2[e3]);
          }, this);
        }
        function c(t2) {
          if (t2.bodyUsed)
            return Promise.reject(new TypeError("Already read"));
          t2.bodyUsed = true;
        }
        function p(t2) {
          return new Promise(function(e3, r2) {
            t2.onload = function() {
              e3(t2.result);
            }, t2.onerror = function() {
              r2(t2.error);
            };
          });
        }
        function y(t2) {
          var e3 = new FileReader(), r2 = p(e3);
          return e3.readAsArrayBuffer(t2), r2;
        }
        function l(t2) {
          if (t2.slice)
            return t2.slice(0);
          var e3 = new Uint8Array(t2.byteLength);
          return e3.set(new Uint8Array(t2)), e3.buffer;
        }
        function b() {
          return this.bodyUsed = false, this._initBody = function(t2) {
            var r2;
            this._bodyInit = t2, t2 ? "string" == typeof t2 ? this._bodyText = t2 : o && Blob.prototype.isPrototypeOf(t2) ? this._bodyBlob = t2 : n && FormData.prototype.isPrototypeOf(t2) ? this._bodyFormData = t2 : e2 && URLSearchParams.prototype.isPrototypeOf(t2) ? this._bodyText = t2.toString() : i && o && ((r2 = t2) && DataView.prototype.isPrototypeOf(r2)) ? (this._bodyArrayBuffer = l(t2.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer])) : i && (ArrayBuffer.prototype.isPrototypeOf(t2) || a(t2)) ? this._bodyArrayBuffer = l(t2) : this._bodyText = t2 = Object.prototype.toString.call(t2) : this._bodyText = "", this.headers.get("content-type") || ("string" == typeof t2 ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : e2 && URLSearchParams.prototype.isPrototypeOf(t2) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"));
          }, o && (this.blob = function() {
            var t2 = c(this);
            if (t2)
              return t2;
            if (this._bodyBlob)
              return Promise.resolve(this._bodyBlob);
            if (this._bodyArrayBuffer)
              return Promise.resolve(new Blob([this._bodyArrayBuffer]));
            if (this._bodyFormData)
              throw new Error("could not read FormData body as blob");
            return Promise.resolve(new Blob([this._bodyText]));
          }, this.arrayBuffer = function() {
            return this._bodyArrayBuffer ? c(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(y);
          }), this.text = function() {
            var t2, e3, r2, o2 = c(this);
            if (o2)
              return o2;
            if (this._bodyBlob)
              return t2 = this._bodyBlob, e3 = new FileReader(), r2 = p(e3), e3.readAsText(t2), r2;
            if (this._bodyArrayBuffer)
              return Promise.resolve(function(t3) {
                for (var e4 = new Uint8Array(t3), r3 = new Array(e4.length), o3 = 0; o3 < e4.length; o3++)
                  r3[o3] = String.fromCharCode(e4[o3]);
                return r3.join("");
              }(this._bodyArrayBuffer));
            if (this._bodyFormData)
              throw new Error("could not read FormData body as text");
            return Promise.resolve(this._bodyText);
          }, n && (this.formData = function() {
            return this.text().then(v);
          }), this.json = function() {
            return this.text().then(JSON.parse);
          }, this;
        }
        d.prototype.append = function(t2, e3) {
          t2 = h2(t2), e3 = u2(e3);
          var r2 = this.map[t2];
          this.map[t2] = r2 ? r2 + ", " + e3 : e3;
        }, d.prototype.delete = function(t2) {
          delete this.map[h2(t2)];
        }, d.prototype.get = function(t2) {
          return t2 = h2(t2), this.has(t2) ? this.map[t2] : null;
        }, d.prototype.has = function(t2) {
          return this.map.hasOwnProperty(h2(t2));
        }, d.prototype.set = function(t2, e3) {
          this.map[h2(t2)] = u2(e3);
        }, d.prototype.forEach = function(t2, e3) {
          for (var r2 in this.map)
            this.map.hasOwnProperty(r2) && t2.call(e3, this.map[r2], r2, this);
        }, d.prototype.keys = function() {
          var t2 = [];
          return this.forEach(function(e3, r2) {
            t2.push(r2);
          }), f(t2);
        }, d.prototype.values = function() {
          var t2 = [];
          return this.forEach(function(e3) {
            t2.push(e3);
          }), f(t2);
        }, d.prototype.entries = function() {
          var t2 = [];
          return this.forEach(function(e3, r2) {
            t2.push([r2, e3]);
          }), f(t2);
        }, r && (d.prototype[Symbol.iterator] = d.prototype.entries);
        var m = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
        function w(t2, e3) {
          var r2, o2, n2 = (e3 = e3 || {}).body;
          if (t2 instanceof w) {
            if (t2.bodyUsed)
              throw new TypeError("Already read");
            this.url = t2.url, this.credentials = t2.credentials, e3.headers || (this.headers = new d(t2.headers)), this.method = t2.method, this.mode = t2.mode, this.signal = t2.signal, n2 || null == t2._bodyInit || (n2 = t2._bodyInit, t2.bodyUsed = true);
          } else
            this.url = String(t2);
          if (this.credentials = e3.credentials || this.credentials || "same-origin", !e3.headers && this.headers || (this.headers = new d(e3.headers)), this.method = (r2 = e3.method || this.method || "GET", o2 = r2.toUpperCase(), m.indexOf(o2) > -1 ? o2 : r2), this.mode = e3.mode || this.mode || null, this.signal = e3.signal || this.signal, this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && n2)
            throw new TypeError("Body not allowed for GET or HEAD requests");
          this._initBody(n2);
        }
        function v(t2) {
          var e3 = new FormData();
          return t2.trim().split("&").forEach(function(t3) {
            if (t3) {
              var r2 = t3.split("="), o2 = r2.shift().replace(/\+/g, " "), n2 = r2.join("=").replace(/\+/g, " ");
              e3.append(decodeURIComponent(o2), decodeURIComponent(n2));
            }
          }), e3;
        }
        function E(t2, e3) {
          e3 || (e3 = {}), this.type = "default", this.status = void 0 === e3.status ? 200 : e3.status, this.ok = this.status >= 200 && this.status < 300, this.statusText = "statusText" in e3 ? e3.statusText : "OK", this.headers = new d(e3.headers), this.url = e3.url || "", this._initBody(t2);
        }
        w.prototype.clone = function() {
          return new w(this, { body: this._bodyInit });
        }, b.call(w.prototype), b.call(E.prototype), E.prototype.clone = function() {
          return new E(this._bodyInit, { status: this.status, statusText: this.statusText, headers: new d(this.headers), url: this.url });
        }, E.error = function() {
          var t2 = new E(null, { status: 0, statusText: "" });
          return t2.type = "error", t2;
        };
        var A = [301, 302, 303, 307, 308];
        E.redirect = function(t2, e3) {
          if (-1 === A.indexOf(e3))
            throw new RangeError("Invalid status code");
          return new E(null, { status: e3, headers: { location: t2 } });
        }, t.DOMException = self.DOMException;
        try {
          new t.DOMException();
        } catch (e3) {
          t.DOMException = function(t2, e4) {
            this.message = t2, this.name = e4;
            var r2 = Error(t2);
            this.stack = r2.stack;
          }, t.DOMException.prototype = Object.create(Error.prototype), t.DOMException.prototype.constructor = t.DOMException;
        }
        function _(e3, r2) {
          return new Promise(function(n2, i2) {
            var s2 = new w(e3, r2);
            if (s2.signal && s2.signal.aborted)
              return i2(new t.DOMException("Aborted", "AbortError"));
            var a2 = new XMLHttpRequest();
            function h3() {
              a2.abort();
            }
            a2.onload = function() {
              var t2, e4, r3 = { status: a2.status, statusText: a2.statusText, headers: (t2 = a2.getAllResponseHeaders() || "", e4 = new d(), t2.replace(/\r?\n[\t ]+/g, " ").split(/\r?\n/).forEach(function(t3) {
                var r4 = t3.split(":"), o3 = r4.shift().trim();
                if (o3) {
                  var n3 = r4.join(":").trim();
                  e4.append(o3, n3);
                }
              }), e4) };
              r3.url = "responseURL" in a2 ? a2.responseURL : r3.headers.get("X-Request-URL");
              var o2 = "response" in a2 ? a2.response : a2.responseText;
              n2(new E(o2, r3));
            }, a2.onerror = function() {
              i2(new TypeError("Network request failed"));
            }, a2.ontimeout = function() {
              i2(new TypeError("Network request failed"));
            }, a2.onabort = function() {
              i2(new t.DOMException("Aborted", "AbortError"));
            }, a2.open(s2.method, s2.url, true), "include" === s2.credentials ? a2.withCredentials = true : "omit" === s2.credentials && (a2.withCredentials = false), "responseType" in a2 && o && (a2.responseType = "blob"), s2.headers.forEach(function(t2, e4) {
              a2.setRequestHeader(e4, t2);
            }), s2.signal && (s2.signal.addEventListener("abort", h3), a2.onreadystatechange = function() {
              4 === a2.readyState && s2.signal.removeEventListener("abort", h3);
            }), a2.send(void 0 === s2._bodyInit ? null : s2._bodyInit);
          });
        }
        _.polyfill = true, self.fetch || (self.fetch = _, self.Headers = d, self.Request = w, self.Response = E), t.Headers = d, t.Request = w, t.Response = E, t.fetch = _;
      }({});
    }
  });

  // node_modules/@ionic/core/dist/esm/polyfills/index.js
  function applyPolyfills() {
    var promises = [];
    if (typeof window !== "undefined") {
      var win3 = window;
      if (!win3.customElements || win3.Element && (!win3.Element.prototype.closest || !win3.Element.prototype.matches || !win3.Element.prototype.remove || !win3.Element.prototype.getRootNode)) {
        promises.push(Promise.resolve().then(() => __toESM(require_dom())));
      }
      var checkIfURLIsSupported = function() {
        try {
          var u2 = new URL("b", "http://a");
          u2.pathname = "c%20d";
          return u2.href === "http://a/c%20d" && u2.searchParams;
        } catch (e2) {
          return false;
        }
      };
      if ("function" !== typeof Object.assign || !Object.entries || !Array.prototype.find || !Array.prototype.includes || !String.prototype.startsWith || !String.prototype.endsWith || win3.NodeList && !win3.NodeList.prototype.forEach || !win3.fetch || !checkIfURLIsSupported() || typeof WeakMap == "undefined") {
        promises.push(Promise.resolve().then(() => __toESM(require_core_js())));
      }
    }
    return Promise.all(promises);
  }
  var init_polyfills = __esm({
    "node_modules/@ionic/core/dist/esm/polyfills/index.js"() {
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/app-globals-3cbaf9d9.js
  var globalScripts;
  var init_app_globals_3cbaf9d9 = __esm({
    "node_modules/@ionic/core/dist/esm-es5/app-globals-3cbaf9d9.js"() {
      init_ionic_global_d2d8f882();
      globalScripts = initialize2;
    }
  });

  // node_modules/@ionic/core/dist/esm-es5/loader.js
  var defineCustomElements;
  var init_loader = __esm({
    "node_modules/@ionic/core/dist/esm-es5/loader.js"() {
      init_tslib_es6();
      init_index_5dc2b88e();
      init_index_5dc2b88e();
      init_app_globals_3cbaf9d9();
      init_ionic_global_d2d8f882();
      defineCustomElements = function(e2, o) {
        return __awaiter(void 0, void 0, void 0, function() {
          return __generator(this, function(e3) {
            switch (e3.label) {
              case 0:
                if (typeof window === "undefined")
                  return [2, void 0];
                return [4, globalScripts()];
              case 1:
                e3.sent();
                return [2, bootstrapLazy(JSON.parse('[["ion-menu_3",[[33,"ion-menu-button",{"color":[513],"disabled":[4],"menu":[1],"autoHide":[4,"auto-hide"],"type":[1],"visible":[32]},[[16,"ionMenuChange","visibilityChanged"],[16,"ionSplitPaneVisible","visibilityChanged"]]],[33,"ion-menu",{"contentId":[513,"content-id"],"menuId":[513,"menu-id"],"type":[1025],"disabled":[1028],"side":[513],"swipeGesture":[4,"swipe-gesture"],"maxEdgeStart":[2,"max-edge-start"],"isPaneVisible":[32],"isEndSide":[32],"isOpen":[64],"isActive":[64],"open":[64],"close":[64],"toggle":[64],"setOpen":[64]},[[16,"ionSplitPaneVisible","onSplitPaneChanged"],[2,"click","onBackdropClick"]],{"type":["typeChanged"],"disabled":["disabledChanged"],"side":["sideChanged"],"swipeGesture":["swipeGestureChanged"]}],[1,"ion-menu-toggle",{"menu":[1],"autoHide":[4,"auto-hide"],"visible":[32]},[[16,"ionMenuChange","visibilityChanged"],[16,"ionSplitPaneVisible","visibilityChanged"]]]]],["ion-input-password-toggle",[[33,"ion-input-password-toggle",{"color":[513],"showIcon":[1,"show-icon"],"hideIcon":[1,"hide-icon"],"type":[1025]},null,{"type":["onTypeChange"]}]]],["ion-fab_3",[[33,"ion-fab-button",{"color":[513],"activated":[4],"disabled":[4],"download":[1],"href":[1],"rel":[1],"routerDirection":[1,"router-direction"],"routerAnimation":[16],"target":[1],"show":[4],"translucent":[4],"type":[1],"size":[1],"closeIcon":[1,"close-icon"]}],[1,"ion-fab",{"horizontal":[1],"vertical":[1],"edge":[4],"activated":[1028],"close":[64],"toggle":[64]},null,{"activated":["activatedChanged"]}],[1,"ion-fab-list",{"activated":[4],"side":[1]},null,{"activated":["activatedChanged"]}]]],["ion-refresher_2",[[0,"ion-refresher-content",{"pullingIcon":[1025,"pulling-icon"],"pullingText":[1,"pulling-text"],"refreshingSpinner":[1025,"refreshing-spinner"],"refreshingText":[1,"refreshing-text"]}],[32,"ion-refresher",{"pullMin":[2,"pull-min"],"pullMax":[2,"pull-max"],"closeDuration":[1,"close-duration"],"snapbackDuration":[1,"snapback-duration"],"pullFactor":[2,"pull-factor"],"disabled":[4],"nativeRefresher":[32],"state":[32],"complete":[64],"cancel":[64],"getProgress":[64]},null,{"disabled":["disabledChanged"]}]]],["ion-back-button",[[33,"ion-back-button",{"color":[513],"defaultHref":[1025,"default-href"],"disabled":[516],"icon":[1],"text":[1],"type":[1],"routerAnimation":[16]}]]],["ion-toast",[[33,"ion-toast",{"overlayIndex":[2,"overlay-index"],"delegate":[16],"hasController":[4,"has-controller"],"color":[513],"enterAnimation":[16],"leaveAnimation":[16],"cssClass":[1,"css-class"],"duration":[2],"header":[1],"layout":[1],"message":[1],"keyboardClose":[4,"keyboard-close"],"position":[1],"positionAnchor":[1,"position-anchor"],"buttons":[16],"translucent":[4],"animated":[4],"icon":[1],"htmlAttributes":[16],"swipeGesture":[1,"swipe-gesture"],"isOpen":[4,"is-open"],"trigger":[1],"revealContentToScreenReader":[32],"present":[64],"dismiss":[64],"onDidDismiss":[64],"onWillDismiss":[64]},null,{"swipeGesture":["swipeGestureChanged"],"isOpen":["onIsOpenChange"],"trigger":["triggerChanged"]}]]],["ion-card_5",[[33,"ion-card",{"color":[513],"button":[4],"type":[1],"disabled":[4],"download":[1],"href":[1],"rel":[1],"routerDirection":[1,"router-direction"],"routerAnimation":[16],"target":[1]}],[32,"ion-card-content"],[33,"ion-card-header",{"color":[513],"translucent":[4]}],[33,"ion-card-subtitle",{"color":[513]}],[33,"ion-card-title",{"color":[513]}]]],["ion-item-option_3",[[33,"ion-item-option",{"color":[513],"disabled":[4],"download":[1],"expandable":[4],"href":[1],"rel":[1],"target":[1],"type":[1]}],[32,"ion-item-options",{"side":[1],"fireSwipeEvent":[64]}],[0,"ion-item-sliding",{"disabled":[4],"state":[32],"getOpenAmount":[64],"getSlidingRatio":[64],"open":[64],"close":[64],"closeOpened":[64]},null,{"disabled":["disabledChanged"]}]]],["ion-accordion_2",[[49,"ion-accordion",{"value":[1],"disabled":[4],"readonly":[4],"toggleIcon":[1,"toggle-icon"],"toggleIconSlot":[1,"toggle-icon-slot"],"state":[32],"isNext":[32],"isPrevious":[32]},null,{"value":["valueChanged"]}],[33,"ion-accordion-group",{"animated":[4],"multiple":[4],"value":[1025],"disabled":[4],"readonly":[4],"expand":[1],"requestAccordionToggle":[64],"getAccordions":[64]},[[0,"keydown","onKeydown"]],{"value":["valueChanged"],"disabled":["disabledChanged"],"readonly":["readonlyChanged"]}]]],["ion-infinite-scroll_2",[[32,"ion-infinite-scroll-content",{"loadingSpinner":[1025,"loading-spinner"],"loadingText":[1,"loading-text"]}],[0,"ion-infinite-scroll",{"threshold":[1],"disabled":[4],"position":[1],"isLoading":[32],"complete":[64]},null,{"threshold":["thresholdChanged"],"disabled":["disabledChanged"]}]]],["ion-reorder_2",[[33,"ion-reorder",null,[[2,"click","onClick"]]],[0,"ion-reorder-group",{"disabled":[4],"state":[32],"complete":[64]},null,{"disabled":["disabledChanged"]}]]],["ion-segment_2",[[33,"ion-segment-button",{"disabled":[1028],"layout":[1],"type":[1],"value":[8],"checked":[32],"setFocus":[64]},null,{"value":["valueChanged"]}],[33,"ion-segment",{"color":[513],"disabled":[4],"scrollable":[4],"swipeGesture":[4,"swipe-gesture"],"value":[1032],"selectOnFocus":[4,"select-on-focus"],"activated":[32]},[[0,"keydown","onKeyDown"]],{"color":["colorChanged"],"swipeGesture":["swipeGestureChanged"],"value":["valueChanged"],"disabled":["disabledChanged"]}]]],["ion-tab-bar_2",[[33,"ion-tab-button",{"disabled":[4],"download":[1],"href":[1],"rel":[1],"layout":[1025],"selected":[1028],"tab":[1],"target":[1]},[[8,"ionTabBarChanged","onTabBarChanged"]]],[33,"ion-tab-bar",{"color":[513],"selectedTab":[1,"selected-tab"],"translucent":[4],"keyboardVisible":[32]},null,{"selectedTab":["selectedTabChanged"]}]]],["ion-chip",[[33,"ion-chip",{"color":[513],"outline":[4],"disabled":[4]}]]],["ion-datetime-button",[[33,"ion-datetime-button",{"color":[513],"disabled":[516],"datetime":[1],"datetimePresentation":[32],"dateText":[32],"timeText":[32],"datetimeActive":[32],"selectedButton":[32]}]]],["ion-input",[[38,"ion-input",{"color":[513],"autocapitalize":[1],"autocomplete":[1],"autocorrect":[1],"autofocus":[4],"clearInput":[4,"clear-input"],"clearOnEdit":[4,"clear-on-edit"],"counter":[4],"counterFormatter":[16],"debounce":[2],"disabled":[516],"enterkeyhint":[1],"errorText":[1,"error-text"],"fill":[1],"inputmode":[1],"helperText":[1,"helper-text"],"label":[1],"labelPlacement":[1,"label-placement"],"max":[8],"maxlength":[2],"min":[8],"minlength":[2],"multiple":[4],"name":[1],"pattern":[1],"placeholder":[1],"readonly":[516],"required":[4],"shape":[1],"spellcheck":[4],"step":[1],"type":[1],"value":[1032],"hasFocus":[32],"setFocus":[64],"getInputElement":[64]},null,{"debounce":["debounceChanged"],"type":["onTypeChange"],"value":["valueChanged"]}]]],["ion-searchbar",[[34,"ion-searchbar",{"color":[513],"animated":[4],"autocapitalize":[1],"autocomplete":[1],"autocorrect":[1],"cancelButtonIcon":[1,"cancel-button-icon"],"cancelButtonText":[1,"cancel-button-text"],"clearIcon":[1,"clear-icon"],"debounce":[2],"disabled":[4],"inputmode":[1],"enterkeyhint":[1],"maxlength":[2],"minlength":[2],"name":[1],"placeholder":[1],"searchIcon":[1,"search-icon"],"showCancelButton":[1,"show-cancel-button"],"showClearButton":[1,"show-clear-button"],"spellcheck":[4],"type":[1],"value":[1025],"focused":[32],"noAnimate":[32],"setFocus":[64],"getInputElement":[64]},null,{"lang":["onLangChanged"],"dir":["onDirChanged"],"debounce":["debounceChanged"],"value":["valueChanged"],"showCancelButton":["showCancelButtonChanged"]}]]],["ion-toggle",[[33,"ion-toggle",{"color":[513],"name":[1],"checked":[1028],"disabled":[4],"value":[1],"enableOnOffLabels":[4,"enable-on-off-labels"],"labelPlacement":[1,"label-placement"],"justify":[1],"alignment":[1],"activated":[32]},null,{"disabled":["disabledChanged"]}]]],["ion-nav_2",[[1,"ion-nav",{"delegate":[16],"swipeGesture":[1028,"swipe-gesture"],"animated":[4],"animation":[16],"rootParams":[16],"root":[1],"push":[64],"insert":[64],"insertPages":[64],"pop":[64],"popTo":[64],"popToRoot":[64],"removeIndex":[64],"setRoot":[64],"setPages":[64],"setRouteId":[64],"getRouteId":[64],"getActive":[64],"getByIndex":[64],"canGoBack":[64],"getPrevious":[64],"getLength":[64]},null,{"swipeGesture":["swipeGestureChanged"],"root":["rootChanged"]}],[0,"ion-nav-link",{"component":[1],"componentProps":[16],"routerDirection":[1,"router-direction"],"routerAnimation":[16]}]]],["ion-textarea",[[38,"ion-textarea",{"color":[513],"autocapitalize":[1],"autofocus":[4],"clearOnEdit":[4,"clear-on-edit"],"debounce":[2],"disabled":[4],"fill":[1],"inputmode":[1],"enterkeyhint":[1],"maxlength":[2],"minlength":[2],"name":[1],"placeholder":[1],"readonly":[4],"required":[4],"spellcheck":[4],"cols":[514],"rows":[2],"wrap":[1],"autoGrow":[516,"auto-grow"],"value":[1025],"counter":[4],"counterFormatter":[16],"errorText":[1,"error-text"],"helperText":[1,"helper-text"],"label":[1],"labelPlacement":[1,"label-placement"],"shape":[1],"hasFocus":[32],"setFocus":[64],"getInputElement":[64]},null,{"debounce":["debounceChanged"],"value":["valueChanged"]}]]],["ion-backdrop",[[33,"ion-backdrop",{"visible":[4],"tappable":[4],"stopPropagation":[4,"stop-propagation"]},[[2,"click","onMouseDown"]]]]],["ion-loading",[[34,"ion-loading",{"overlayIndex":[2,"overlay-index"],"delegate":[16],"hasController":[4,"has-controller"],"keyboardClose":[4,"keyboard-close"],"enterAnimation":[16],"leaveAnimation":[16],"message":[1],"cssClass":[1,"css-class"],"duration":[2],"backdropDismiss":[4,"backdrop-dismiss"],"showBackdrop":[4,"show-backdrop"],"spinner":[1025],"translucent":[4],"animated":[4],"htmlAttributes":[16],"isOpen":[4,"is-open"],"trigger":[1],"present":[64],"dismiss":[64],"onDidDismiss":[64],"onWillDismiss":[64]},null,{"isOpen":["onIsOpenChange"],"trigger":["triggerChanged"]}]]],["ion-breadcrumb_2",[[33,"ion-breadcrumb",{"collapsed":[4],"last":[4],"showCollapsedIndicator":[4,"show-collapsed-indicator"],"color":[1],"active":[4],"disabled":[4],"download":[1],"href":[1],"rel":[1],"separator":[4],"target":[1],"routerDirection":[1,"router-direction"],"routerAnimation":[16]}],[33,"ion-breadcrumbs",{"color":[513],"maxItems":[2,"max-items"],"itemsBeforeCollapse":[2,"items-before-collapse"],"itemsAfterCollapse":[2,"items-after-collapse"],"collapsed":[32],"activeChanged":[32]},[[0,"collapsedClick","onCollapsedClick"]],{"maxItems":["maxItemsChanged"],"itemsBeforeCollapse":["maxItemsChanged"],"itemsAfterCollapse":["maxItemsChanged"]}]]],["ion-modal",[[33,"ion-modal",{"hasController":[4,"has-controller"],"overlayIndex":[2,"overlay-index"],"delegate":[16],"keyboardClose":[4,"keyboard-close"],"enterAnimation":[16],"leaveAnimation":[16],"breakpoints":[16],"initialBreakpoint":[2,"initial-breakpoint"],"backdropBreakpoint":[2,"backdrop-breakpoint"],"handle":[4],"handleBehavior":[1,"handle-behavior"],"component":[1],"componentProps":[16],"cssClass":[1,"css-class"],"backdropDismiss":[4,"backdrop-dismiss"],"showBackdrop":[4,"show-backdrop"],"animated":[4],"presentingElement":[16],"htmlAttributes":[16],"isOpen":[4,"is-open"],"trigger":[1],"keepContentsMounted":[4,"keep-contents-mounted"],"canDismiss":[4,"can-dismiss"],"presented":[32],"present":[64],"dismiss":[64],"onDidDismiss":[64],"onWillDismiss":[64],"setCurrentBreakpoint":[64],"getCurrentBreakpoint":[64]},null,{"isOpen":["onIsOpenChange"],"trigger":["triggerChanged"]}]]],["ion-route_4",[[0,"ion-route",{"url":[1],"component":[1],"componentProps":[16],"beforeLeave":[16],"beforeEnter":[16]},null,{"url":["onUpdate"],"component":["onUpdate"],"componentProps":["onComponentProps"]}],[0,"ion-route-redirect",{"from":[1],"to":[1]},null,{"from":["propDidChange"],"to":["propDidChange"]}],[0,"ion-router",{"root":[1],"useHash":[4,"use-hash"],"canTransition":[64],"push":[64],"back":[64],"printDebug":[64],"navChanged":[64]},[[8,"popstate","onPopState"],[4,"ionBackButton","onBackButton"]]],[1,"ion-router-link",{"color":[513],"href":[1],"rel":[1],"routerDirection":[1,"router-direction"],"routerAnimation":[16],"target":[1]}]]],["ion-avatar_3",[[33,"ion-avatar"],[33,"ion-badge",{"color":[513]}],[1,"ion-thumbnail"]]],["ion-col_3",[[1,"ion-col",{"offset":[1],"offsetXs":[1,"offset-xs"],"offsetSm":[1,"offset-sm"],"offsetMd":[1,"offset-md"],"offsetLg":[1,"offset-lg"],"offsetXl":[1,"offset-xl"],"pull":[1],"pullXs":[1,"pull-xs"],"pullSm":[1,"pull-sm"],"pullMd":[1,"pull-md"],"pullLg":[1,"pull-lg"],"pullXl":[1,"pull-xl"],"push":[1],"pushXs":[1,"push-xs"],"pushSm":[1,"push-sm"],"pushMd":[1,"push-md"],"pushLg":[1,"push-lg"],"pushXl":[1,"push-xl"],"size":[1],"sizeXs":[1,"size-xs"],"sizeSm":[1,"size-sm"],"sizeMd":[1,"size-md"],"sizeLg":[1,"size-lg"],"sizeXl":[1,"size-xl"]},[[9,"resize","onResize"]]],[1,"ion-grid",{"fixed":[4]}],[1,"ion-row"]]],["ion-tab_2",[[1,"ion-tab",{"active":[1028],"delegate":[16],"tab":[1],"component":[1],"setActive":[64]},null,{"active":["changeActive"]}],[1,"ion-tabs",{"useRouter":[1028,"use-router"],"selectedTab":[32],"select":[64],"getTab":[64],"getSelected":[64],"setRouteId":[64],"getRouteId":[64]}]]],["ion-img",[[1,"ion-img",{"alt":[1],"src":[1],"loadSrc":[32],"loadError":[32]},null,{"src":["srcChanged"]}]]],["ion-progress-bar",[[33,"ion-progress-bar",{"type":[1],"reversed":[4],"value":[2],"buffer":[2],"color":[513]}]]],["ion-range",[[33,"ion-range",{"color":[513],"debounce":[2],"name":[1],"label":[1],"dualKnobs":[4,"dual-knobs"],"min":[2],"max":[2],"pin":[4],"pinFormatter":[16],"snaps":[4],"step":[2],"ticks":[4],"activeBarStart":[1026,"active-bar-start"],"disabled":[4],"value":[1026],"labelPlacement":[1,"label-placement"],"ratioA":[32],"ratioB":[32],"pressedKnob":[32]},null,{"debounce":["debounceChanged"],"min":["minChanged"],"max":["maxChanged"],"activeBarStart":["activeBarStartChanged"],"disabled":["disabledChanged"],"value":["valueChanged"]}]]],["ion-split-pane",[[33,"ion-split-pane",{"contentId":[513,"content-id"],"disabled":[4],"when":[8],"visible":[32],"isVisible":[64]},null,{"visible":["visibleChanged"],"disabled":["updateState"],"when":["updateState"]}]]],["ion-text",[[1,"ion-text",{"color":[513]}]]],["ion-select_3",[[33,"ion-select",{"cancelText":[1,"cancel-text"],"color":[513],"compareWith":[1,"compare-with"],"disabled":[4],"fill":[1],"interface":[1],"interfaceOptions":[8,"interface-options"],"justify":[1],"label":[1],"labelPlacement":[1,"label-placement"],"multiple":[4],"name":[1],"okText":[1,"ok-text"],"placeholder":[1],"selectedText":[1,"selected-text"],"toggleIcon":[1,"toggle-icon"],"expandedIcon":[1,"expanded-icon"],"shape":[1],"value":[1032],"isExpanded":[32],"open":[64]},null,{"disabled":["styleChanged"],"isExpanded":["styleChanged"],"placeholder":["styleChanged"],"value":["styleChanged"]}],[1,"ion-select-option",{"disabled":[4],"value":[8]}],[34,"ion-select-popover",{"header":[1],"subHeader":[1,"sub-header"],"message":[1],"multiple":[4],"options":[16]}]]],["ion-picker",[[33,"ion-picker",{"exitInputMode":[64]},[[1,"touchstart","preventTouchStartPropagation"]]]]],["ion-picker-column",[[1,"ion-picker-column",{"disabled":[4],"value":[1032],"color":[513],"numericInput":[4,"numeric-input"],"isActive":[32],"scrollActiveItemIntoView":[64],"setValue":[64],"setFocus":[64]},null,{"value":["valueChange"]}]]],["ion-datetime_3",[[33,"ion-datetime",{"color":[1],"name":[1],"disabled":[4],"formatOptions":[16],"readonly":[4],"isDateEnabled":[16],"min":[1025],"max":[1025],"presentation":[1],"cancelText":[1,"cancel-text"],"doneText":[1,"done-text"],"clearText":[1,"clear-text"],"yearValues":[8,"year-values"],"monthValues":[8,"month-values"],"dayValues":[8,"day-values"],"hourValues":[8,"hour-values"],"minuteValues":[8,"minute-values"],"locale":[1],"firstDayOfWeek":[2,"first-day-of-week"],"titleSelectedDatesFormatter":[16],"multiple":[4],"highlightedDates":[16],"value":[1025],"showDefaultTitle":[4,"show-default-title"],"showDefaultButtons":[4,"show-default-buttons"],"showClearButton":[4,"show-clear-button"],"showDefaultTimeLabel":[4,"show-default-time-label"],"hourCycle":[1,"hour-cycle"],"size":[1],"preferWheel":[4,"prefer-wheel"],"showMonthAndYear":[32],"activeParts":[32],"workingParts":[32],"isTimePopoverOpen":[32],"forceRenderDate":[32],"confirm":[64],"reset":[64],"cancel":[64]},null,{"formatOptions":["formatOptionsChanged"],"disabled":["disabledChanged"],"min":["minChanged"],"max":["maxChanged"],"presentation":["presentationChanged"],"yearValues":["yearValuesChanged"],"monthValues":["monthValuesChanged"],"dayValues":["dayValuesChanged"],"hourValues":["hourValuesChanged"],"minuteValues":["minuteValuesChanged"],"value":["valueChanged"]}],[34,"ion-picker-legacy",{"overlayIndex":[2,"overlay-index"],"delegate":[16],"hasController":[4,"has-controller"],"keyboardClose":[4,"keyboard-close"],"enterAnimation":[16],"leaveAnimation":[16],"buttons":[16],"columns":[16],"cssClass":[1,"css-class"],"duration":[2],"showBackdrop":[4,"show-backdrop"],"backdropDismiss":[4,"backdrop-dismiss"],"animated":[4],"htmlAttributes":[16],"isOpen":[4,"is-open"],"trigger":[1],"presented":[32],"present":[64],"dismiss":[64],"onDidDismiss":[64],"onWillDismiss":[64],"getColumn":[64]},null,{"isOpen":["onIsOpenChange"],"trigger":["triggerChanged"]}],[32,"ion-picker-legacy-column",{"col":[16]},null,{"col":["colChanged"]}]]],["ion-radio_2",[[33,"ion-radio",{"color":[513],"name":[1],"disabled":[4],"value":[8],"labelPlacement":[1,"label-placement"],"justify":[1],"alignment":[1],"checked":[32],"buttonTabindex":[32],"setFocus":[64],"setButtonTabindex":[64]},null,{"value":["valueChanged"]}],[0,"ion-radio-group",{"allowEmptySelection":[4,"allow-empty-selection"],"compareWith":[1,"compare-with"],"name":[1],"value":[1032]},[[4,"keydown","onKeydown"]],{"value":["valueChanged"]}]]],["ion-ripple-effect",[[1,"ion-ripple-effect",{"type":[1],"addRipple":[64]}]]],["ion-button_2",[[33,"ion-button",{"color":[513],"buttonType":[1025,"button-type"],"disabled":[516],"expand":[513],"fill":[1537],"routerDirection":[1,"router-direction"],"routerAnimation":[16],"download":[1],"href":[1],"rel":[1],"shape":[513],"size":[513],"strong":[4],"target":[1],"type":[1],"form":[1],"isCircle":[32]},null,{"disabled":["disabledChanged"]}],[1,"ion-icon",{"mode":[1025],"color":[1],"ios":[1],"md":[1],"flipRtl":[4,"flip-rtl"],"name":[513],"src":[1],"icon":[8],"size":[1],"lazy":[4],"sanitize":[4],"svgContent":[32],"isVisible":[32]},null,{"name":["loadIcon"],"src":["loadIcon"],"icon":["loadIcon"],"ios":["loadIcon"],"md":["loadIcon"]}]]],["ion-action-sheet",[[34,"ion-action-sheet",{"overlayIndex":[2,"overlay-index"],"delegate":[16],"hasController":[4,"has-controller"],"keyboardClose":[4,"keyboard-close"],"enterAnimation":[16],"leaveAnimation":[16],"buttons":[16],"cssClass":[1,"css-class"],"backdropDismiss":[4,"backdrop-dismiss"],"header":[1],"subHeader":[1,"sub-header"],"translucent":[4],"animated":[4],"htmlAttributes":[16],"isOpen":[4,"is-open"],"trigger":[1],"present":[64],"dismiss":[64],"onDidDismiss":[64],"onWillDismiss":[64]},null,{"isOpen":["onIsOpenChange"],"trigger":["triggerChanged"]}]]],["ion-alert",[[34,"ion-alert",{"overlayIndex":[2,"overlay-index"],"delegate":[16],"hasController":[4,"has-controller"],"keyboardClose":[4,"keyboard-close"],"enterAnimation":[16],"leaveAnimation":[16],"cssClass":[1,"css-class"],"header":[1],"subHeader":[1,"sub-header"],"message":[1],"buttons":[16],"inputs":[1040],"backdropDismiss":[4,"backdrop-dismiss"],"translucent":[4],"animated":[4],"htmlAttributes":[16],"isOpen":[4,"is-open"],"trigger":[1],"present":[64],"dismiss":[64],"onDidDismiss":[64],"onWillDismiss":[64]},[[4,"keydown","onKeydown"]],{"isOpen":["onIsOpenChange"],"trigger":["triggerChanged"],"buttons":["buttonsChanged"],"inputs":["inputsChanged"]}]]],["ion-app_8",[[0,"ion-app",{"setFocus":[64]}],[1,"ion-content",{"color":[513],"fullscreen":[4],"forceOverscroll":[1028,"force-overscroll"],"scrollX":[4,"scroll-x"],"scrollY":[4,"scroll-y"],"scrollEvents":[4,"scroll-events"],"getScrollElement":[64],"getBackgroundElement":[64],"scrollToTop":[64],"scrollToBottom":[64],"scrollByPoint":[64],"scrollToPoint":[64]},[[9,"resize","onResize"]]],[36,"ion-footer",{"collapse":[1],"translucent":[4],"keyboardVisible":[32]}],[36,"ion-header",{"collapse":[1],"translucent":[4]}],[1,"ion-router-outlet",{"mode":[1025],"delegate":[16],"animated":[4],"animation":[16],"swipeHandler":[16],"commit":[64],"setRouteId":[64],"getRouteId":[64]},null,{"swipeHandler":["swipeHandlerChanged"]}],[33,"ion-title",{"color":[513],"size":[1]},null,{"size":["sizeChanged"]}],[33,"ion-toolbar",{"color":[513]},[[0,"ionStyle","childrenStyle"]]],[38,"ion-buttons",{"collapse":[4]}]]],["ion-picker-column-option",[[33,"ion-picker-column-option",{"disabled":[4],"value":[8],"color":[513],"ariaLabel":[32]},null,{"aria-label":["onAriaLabelChange"]}]]],["ion-popover",[[33,"ion-popover",{"hasController":[4,"has-controller"],"delegate":[16],"overlayIndex":[2,"overlay-index"],"enterAnimation":[16],"leaveAnimation":[16],"component":[1],"componentProps":[16],"keyboardClose":[4,"keyboard-close"],"cssClass":[1,"css-class"],"backdropDismiss":[4,"backdrop-dismiss"],"event":[8],"showBackdrop":[4,"show-backdrop"],"translucent":[4],"animated":[4],"htmlAttributes":[16],"triggerAction":[1,"trigger-action"],"trigger":[1],"size":[1],"dismissOnSelect":[4,"dismiss-on-select"],"reference":[1],"side":[1],"alignment":[1025],"arrow":[4],"isOpen":[4,"is-open"],"keyboardEvents":[4,"keyboard-events"],"keepContentsMounted":[4,"keep-contents-mounted"],"presented":[32],"presentFromTrigger":[64],"present":[64],"dismiss":[64],"getParentPopover":[64],"onDidDismiss":[64],"onWillDismiss":[64]},null,{"trigger":["onTriggerChange"],"triggerAction":["onTriggerChange"],"isOpen":["onIsOpenChange"]}]]],["ion-checkbox",[[33,"ion-checkbox",{"color":[513],"name":[1],"checked":[1028],"indeterminate":[1028],"disabled":[4],"value":[8],"labelPlacement":[1,"label-placement"],"justify":[1],"alignment":[1]}]]],["ion-spinner",[[1,"ion-spinner",{"color":[513],"duration":[2],"name":[1],"paused":[4]}]]],["ion-item_8",[[33,"ion-item-divider",{"color":[513],"sticky":[4]}],[32,"ion-item-group"],[33,"ion-note",{"color":[513]}],[1,"ion-skeleton-text",{"animated":[4]}],[33,"ion-item",{"color":[513],"button":[4],"detail":[4],"detailIcon":[1,"detail-icon"],"disabled":[4],"download":[1],"href":[1],"rel":[1],"lines":[1],"routerAnimation":[16],"routerDirection":[1,"router-direction"],"target":[1],"type":[1],"multipleInputs":[32],"focusable":[32]},[[0,"ionColor","labelColorChanged"],[0,"ionStyle","itemStyle"]],{"button":["buttonChanged"]}],[38,"ion-label",{"color":[513],"position":[1],"noAnimate":[32]},null,{"color":["colorChanged"],"position":["positionChanged"]}],[32,"ion-list",{"lines":[1],"inset":[4],"closeSlidingItems":[64]}],[33,"ion-list-header",{"color":[513],"lines":[1]}]]]]'), o)];
            }
          });
        });
      };
    }
  });

  // node_modules/@ionic/core/loader/index.js
  var init_loader2 = __esm({
    "node_modules/@ionic/core/loader/index.js"() {
      init_polyfills();
      init_loader();
      (function() {
        if ("undefined" !== typeof window && void 0 !== window.Reflect && void 0 !== window.customElements) {
          var a = HTMLElement;
          window.HTMLElement = function() {
            return Reflect.construct(a, [], this.constructor);
          };
          HTMLElement.prototype = a.prototype;
          HTMLElement.prototype.constructor = HTMLElement;
          Object.setPrototypeOf(HTMLElement, a);
        }
      })();
    }
  });

  // node_modules/@ionic/angular/fesm2022/ionic-angular.mjs
  function ProxyCmp2(opts) {
    const decorator = function(cls) {
      const { defineCustomElementFn, inputs, methods } = opts;
      if (defineCustomElementFn !== void 0) {
        defineCustomElementFn();
      }
      if (inputs) {
        proxyInputs2(cls, inputs);
      }
      if (methods) {
        proxyMethods2(cls, methods);
      }
      return cls;
    };
    return decorator;
  }
  var BooleanValueAccessorDirective, NumericValueAccessorDirective, SelectValueAccessorDirective, TextValueAccessorDirective, proxyInputs2, proxyMethods2, proxyOutputs2, IonAccordion, IonAccordionGroup, IonActionSheet, IonAlert, IonApp, IonAvatar, IonBackdrop, IonBadge, IonBreadcrumb, IonBreadcrumbs, IonButton, IonButtons, IonCard, IonCardContent, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCheckbox, IonChip, IonCol, IonContent, IonDatetime, IonDatetimeButton, IonFab, IonFabButton, IonFabList, IonFooter, IonGrid, IonHeader, IonIcon, IonImg, IonInfiniteScroll, IonInfiniteScrollContent, IonInput, IonInputPasswordToggle, IonItem, IonItemDivider, IonItemGroup, IonItemOption, IonItemOptions, IonItemSliding, IonLabel, IonList, IonListHeader, IonLoading, IonMenu, IonMenuButton, IonMenuToggle, IonNavLink, IonNote, IonPicker, IonPickerColumn, IonPickerColumnOption, IonPickerLegacy, IonProgressBar, IonRadio, IonRadioGroup, IonRange, IonRefresher, IonRefresherContent, IonReorder, IonReorderGroup, IonRippleEffect, IonRow, IonSearchbar, IonSegment, IonSegmentButton, IonSelect, IonSelectOption, IonSkeletonText, IonSpinner, IonSplitPane, IonTabBar, IonTabButton, IonText, IonTextarea, IonThumbnail, IonTitle, IonToast, IonToggle, IonToolbar, IonRouterOutlet2, IonTabs2, IonBackButton3, IonNav3, RouterLinkDelegateDirective2, RouterLinkWithHrefDelegateDirective2, IonModal3, IonPopover3, ION_MAX_VALIDATOR, IonMaxValidator, ION_MIN_VALIDATOR, IonMinValidator, AlertController, AnimationController, ActionSheetController, GestureController2, LoadingController, MenuController2, ModalController, PickerController, PopoverController, ToastController, appInitialize, DIRECTIVES, DECLARATIONS, IonicModule;
  var init_ionic_angular = __esm({
    "node_modules/@ionic/angular/fesm2022/ionic-angular.mjs"() {
      init_core();
      init_core();
      init_forms();
      init_ionic_angular_common();
      init_ionic_angular_common();
      init_ionic_angular_common();
      init_tslib_es6();
      init_esm5();
      init_common();
      init_common();
      init_router();
      init_dist();
      init_dist();
      init_loader2();
      BooleanValueAccessorDirective = class _BooleanValueAccessorDirective extends ValueAccessor {
        constructor(injector, el) {
          super(injector, el);
        }
        writeValue(value) {
          this.elementRef.nativeElement.checked = this.lastValue = value;
          setIonicClasses(this.elementRef);
        }
        _handleIonChange(el) {
          this.handleValueChange(el, el.checked);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _BooleanValueAccessorDirective, deps: [{ token: Injector }, { token: ElementRef }], target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: _BooleanValueAccessorDirective, selector: "ion-checkbox,ion-toggle", host: { listeners: { "ionChange": "_handleIonChange($event.target)" } }, providers: [
          {
            provide: NG_VALUE_ACCESSOR,
            useExisting: _BooleanValueAccessorDirective,
            multi: true
          }
        ], usesInheritance: true, ngImport: core_exports });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: BooleanValueAccessorDirective, decorators: [{
        type: Directive,
        args: [{
          selector: "ion-checkbox,ion-toggle",
          providers: [
            {
              provide: NG_VALUE_ACCESSOR,
              useExisting: BooleanValueAccessorDirective,
              multi: true
            }
          ]
        }]
      }], ctorParameters: function() {
        return [{ type: Injector }, { type: ElementRef }];
      }, propDecorators: { _handleIonChange: [{
        type: HostListener,
        args: ["ionChange", ["$event.target"]]
      }] } });
      NumericValueAccessorDirective = class _NumericValueAccessorDirective extends ValueAccessor {
        el;
        constructor(injector, el) {
          super(injector, el);
          this.el = el;
        }
        handleInputEvent(el) {
          this.handleValueChange(el, el.value);
        }
        registerOnChange(fn2) {
          if (this.el.nativeElement.tagName === "ION-INPUT") {
            super.registerOnChange((value) => {
              fn2(value === "" ? null : parseFloat(value));
            });
          } else {
            super.registerOnChange(fn2);
          }
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _NumericValueAccessorDirective, deps: [{ token: Injector }, { token: ElementRef }], target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: _NumericValueAccessorDirective, selector: "ion-input[type=number],ion-range", host: { listeners: { "ionInput": "handleInputEvent($event.target)" } }, providers: [
          {
            provide: NG_VALUE_ACCESSOR,
            useExisting: _NumericValueAccessorDirective,
            multi: true
          }
        ], usesInheritance: true, ngImport: core_exports });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: NumericValueAccessorDirective, decorators: [{
        type: Directive,
        args: [{
          selector: "ion-input[type=number],ion-range",
          providers: [
            {
              provide: NG_VALUE_ACCESSOR,
              useExisting: NumericValueAccessorDirective,
              multi: true
            }
          ]
        }]
      }], ctorParameters: function() {
        return [{ type: Injector }, { type: ElementRef }];
      }, propDecorators: { handleInputEvent: [{
        type: HostListener,
        args: ["ionInput", ["$event.target"]]
      }] } });
      SelectValueAccessorDirective = class _SelectValueAccessorDirective extends ValueAccessor {
        constructor(injector, el) {
          super(injector, el);
        }
        _handleChangeEvent(el) {
          this.handleValueChange(el, el.value);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _SelectValueAccessorDirective, deps: [{ token: Injector }, { token: ElementRef }], target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: _SelectValueAccessorDirective, selector: "ion-select, ion-radio-group, ion-segment, ion-datetime", host: { listeners: { "ionChange": "_handleChangeEvent($event.target)" } }, providers: [
          {
            provide: NG_VALUE_ACCESSOR,
            useExisting: _SelectValueAccessorDirective,
            multi: true
          }
        ], usesInheritance: true, ngImport: core_exports });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: SelectValueAccessorDirective, decorators: [{
        type: Directive,
        args: [{
          /* tslint:disable-next-line:directive-selector */
          selector: "ion-select, ion-radio-group, ion-segment, ion-datetime",
          providers: [
            {
              provide: NG_VALUE_ACCESSOR,
              useExisting: SelectValueAccessorDirective,
              multi: true
            }
          ]
        }]
      }], ctorParameters: function() {
        return [{ type: Injector }, { type: ElementRef }];
      }, propDecorators: { _handleChangeEvent: [{
        type: HostListener,
        args: ["ionChange", ["$event.target"]]
      }] } });
      TextValueAccessorDirective = class _TextValueAccessorDirective extends ValueAccessor {
        constructor(injector, el) {
          super(injector, el);
        }
        _handleInputEvent(el) {
          this.handleValueChange(el, el.value);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _TextValueAccessorDirective, deps: [{ token: Injector }, { token: ElementRef }], target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: _TextValueAccessorDirective, selector: "ion-input:not([type=number]),ion-textarea,ion-searchbar", host: { listeners: { "ionInput": "_handleInputEvent($event.target)" } }, providers: [
          {
            provide: NG_VALUE_ACCESSOR,
            useExisting: _TextValueAccessorDirective,
            multi: true
          }
        ], usesInheritance: true, ngImport: core_exports });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: TextValueAccessorDirective, decorators: [{
        type: Directive,
        args: [{
          selector: "ion-input:not([type=number]),ion-textarea,ion-searchbar",
          providers: [
            {
              provide: NG_VALUE_ACCESSOR,
              useExisting: TextValueAccessorDirective,
              multi: true
            }
          ]
        }]
      }], ctorParameters: function() {
        return [{ type: Injector }, { type: ElementRef }];
      }, propDecorators: { _handleInputEvent: [{
        type: HostListener,
        args: ["ionInput", ["$event.target"]]
      }] } });
      proxyInputs2 = (Cmp, inputs) => {
        const Prototype = Cmp.prototype;
        inputs.forEach((item) => {
          Object.defineProperty(Prototype, item, {
            get() {
              return this.el[item];
            },
            set(val) {
              this.z.runOutsideAngular(() => this.el[item] = val);
            },
            /**
             * In the event that proxyInputs is called
             * multiple times re-defining these inputs
             * will cause an error to be thrown. As a result
             * we set configurable: true to indicate these
             * properties can be changed.
             */
            configurable: true
          });
        });
      };
      proxyMethods2 = (Cmp, methods) => {
        const Prototype = Cmp.prototype;
        methods.forEach((methodName) => {
          Prototype[methodName] = function() {
            const args = arguments;
            return this.z.runOutsideAngular(() => this.el[methodName].apply(this.el, args));
          };
        });
      };
      proxyOutputs2 = (instance, el, events) => {
        events.forEach((eventName) => instance[eventName] = fromEvent(el, eventName));
      };
      IonAccordion = class IonAccordion2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonAccordion2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonAccordion2, selector: "ion-accordion", inputs: { disabled: "disabled", mode: "mode", readonly: "readonly", toggleIcon: "toggleIcon", toggleIconSlot: "toggleIconSlot", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonAccordion = __decorate([
        ProxyCmp2({
          inputs: ["disabled", "mode", "readonly", "toggleIcon", "toggleIconSlot", "value"]
        })
      ], IonAccordion);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonAccordion, decorators: [{
        type: Component,
        args: [{
          selector: "ion-accordion",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["disabled", "mode", "readonly", "toggleIcon", "toggleIconSlot", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonAccordionGroup = class IonAccordionGroup2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionChange"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonAccordionGroup2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonAccordionGroup2, selector: "ion-accordion-group", inputs: { animated: "animated", disabled: "disabled", expand: "expand", mode: "mode", multiple: "multiple", readonly: "readonly", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonAccordionGroup = __decorate([
        ProxyCmp2({
          inputs: ["animated", "disabled", "expand", "mode", "multiple", "readonly", "value"]
        })
      ], IonAccordionGroup);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonAccordionGroup, decorators: [{
        type: Component,
        args: [{
          selector: "ion-accordion-group",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["animated", "disabled", "expand", "mode", "multiple", "readonly", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonActionSheet = class IonActionSheet2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionActionSheetDidPresent", "ionActionSheetWillPresent", "ionActionSheetWillDismiss", "ionActionSheetDidDismiss", "didPresent", "willPresent", "willDismiss", "didDismiss"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonActionSheet2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonActionSheet2, selector: "ion-action-sheet", inputs: { animated: "animated", backdropDismiss: "backdropDismiss", buttons: "buttons", cssClass: "cssClass", enterAnimation: "enterAnimation", header: "header", htmlAttributes: "htmlAttributes", isOpen: "isOpen", keyboardClose: "keyboardClose", leaveAnimation: "leaveAnimation", mode: "mode", subHeader: "subHeader", translucent: "translucent", trigger: "trigger" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonActionSheet = __decorate([
        ProxyCmp2({
          inputs: ["animated", "backdropDismiss", "buttons", "cssClass", "enterAnimation", "header", "htmlAttributes", "isOpen", "keyboardClose", "leaveAnimation", "mode", "subHeader", "translucent", "trigger"],
          methods: ["present", "dismiss", "onDidDismiss", "onWillDismiss"]
        })
      ], IonActionSheet);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonActionSheet, decorators: [{
        type: Component,
        args: [{
          selector: "ion-action-sheet",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["animated", "backdropDismiss", "buttons", "cssClass", "enterAnimation", "header", "htmlAttributes", "isOpen", "keyboardClose", "leaveAnimation", "mode", "subHeader", "translucent", "trigger"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonAlert = class IonAlert2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionAlertDidPresent", "ionAlertWillPresent", "ionAlertWillDismiss", "ionAlertDidDismiss", "didPresent", "willPresent", "willDismiss", "didDismiss"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonAlert2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonAlert2, selector: "ion-alert", inputs: { animated: "animated", backdropDismiss: "backdropDismiss", buttons: "buttons", cssClass: "cssClass", enterAnimation: "enterAnimation", header: "header", htmlAttributes: "htmlAttributes", inputs: "inputs", isOpen: "isOpen", keyboardClose: "keyboardClose", leaveAnimation: "leaveAnimation", message: "message", mode: "mode", subHeader: "subHeader", translucent: "translucent", trigger: "trigger" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonAlert = __decorate([
        ProxyCmp2({
          inputs: ["animated", "backdropDismiss", "buttons", "cssClass", "enterAnimation", "header", "htmlAttributes", "inputs", "isOpen", "keyboardClose", "leaveAnimation", "message", "mode", "subHeader", "translucent", "trigger"],
          methods: ["present", "dismiss", "onDidDismiss", "onWillDismiss"]
        })
      ], IonAlert);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonAlert, decorators: [{
        type: Component,
        args: [{
          selector: "ion-alert",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["animated", "backdropDismiss", "buttons", "cssClass", "enterAnimation", "header", "htmlAttributes", "inputs", "isOpen", "keyboardClose", "leaveAnimation", "message", "mode", "subHeader", "translucent", "trigger"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonApp = class IonApp2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonApp2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonApp2, selector: "ion-app", ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonApp = __decorate([
        ProxyCmp2({})
      ], IonApp);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonApp, decorators: [{
        type: Component,
        args: [{
          selector: "ion-app",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: []
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonAvatar = class IonAvatar2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonAvatar2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonAvatar2, selector: "ion-avatar", ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonAvatar = __decorate([
        ProxyCmp2({})
      ], IonAvatar);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonAvatar, decorators: [{
        type: Component,
        args: [{
          selector: "ion-avatar",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: []
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonBackdrop = class IonBackdrop2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionBackdropTap"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonBackdrop2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonBackdrop2, selector: "ion-backdrop", inputs: { stopPropagation: "stopPropagation", tappable: "tappable", visible: "visible" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonBackdrop = __decorate([
        ProxyCmp2({
          inputs: ["stopPropagation", "tappable", "visible"]
        })
      ], IonBackdrop);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonBackdrop, decorators: [{
        type: Component,
        args: [{
          selector: "ion-backdrop",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["stopPropagation", "tappable", "visible"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonBadge = class IonBadge2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonBadge2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonBadge2, selector: "ion-badge", inputs: { color: "color", mode: "mode" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonBadge = __decorate([
        ProxyCmp2({
          inputs: ["color", "mode"]
        })
      ], IonBadge);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonBadge, decorators: [{
        type: Component,
        args: [{
          selector: "ion-badge",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "mode"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonBreadcrumb = class IonBreadcrumb2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionFocus", "ionBlur"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonBreadcrumb2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonBreadcrumb2, selector: "ion-breadcrumb", inputs: { active: "active", color: "color", disabled: "disabled", download: "download", href: "href", mode: "mode", rel: "rel", routerAnimation: "routerAnimation", routerDirection: "routerDirection", separator: "separator", target: "target" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonBreadcrumb = __decorate([
        ProxyCmp2({
          inputs: ["active", "color", "disabled", "download", "href", "mode", "rel", "routerAnimation", "routerDirection", "separator", "target"]
        })
      ], IonBreadcrumb);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonBreadcrumb, decorators: [{
        type: Component,
        args: [{
          selector: "ion-breadcrumb",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["active", "color", "disabled", "download", "href", "mode", "rel", "routerAnimation", "routerDirection", "separator", "target"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonBreadcrumbs = class IonBreadcrumbs2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionCollapsedClick"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonBreadcrumbs2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonBreadcrumbs2, selector: "ion-breadcrumbs", inputs: { color: "color", itemsAfterCollapse: "itemsAfterCollapse", itemsBeforeCollapse: "itemsBeforeCollapse", maxItems: "maxItems", mode: "mode" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonBreadcrumbs = __decorate([
        ProxyCmp2({
          inputs: ["color", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "mode"]
        })
      ], IonBreadcrumbs);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonBreadcrumbs, decorators: [{
        type: Component,
        args: [{
          selector: "ion-breadcrumbs",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "mode"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonButton = class IonButton2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionFocus", "ionBlur"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonButton2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonButton2, selector: "ion-button", inputs: { buttonType: "buttonType", color: "color", disabled: "disabled", download: "download", expand: "expand", fill: "fill", form: "form", href: "href", mode: "mode", rel: "rel", routerAnimation: "routerAnimation", routerDirection: "routerDirection", shape: "shape", size: "size", strong: "strong", target: "target", type: "type" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonButton = __decorate([
        ProxyCmp2({
          inputs: ["buttonType", "color", "disabled", "download", "expand", "fill", "form", "href", "mode", "rel", "routerAnimation", "routerDirection", "shape", "size", "strong", "target", "type"]
        })
      ], IonButton);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonButton, decorators: [{
        type: Component,
        args: [{
          selector: "ion-button",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["buttonType", "color", "disabled", "download", "expand", "fill", "form", "href", "mode", "rel", "routerAnimation", "routerDirection", "shape", "size", "strong", "target", "type"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonButtons = class IonButtons2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonButtons2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonButtons2, selector: "ion-buttons", inputs: { collapse: "collapse" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonButtons = __decorate([
        ProxyCmp2({
          inputs: ["collapse"]
        })
      ], IonButtons);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonButtons, decorators: [{
        type: Component,
        args: [{
          selector: "ion-buttons",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["collapse"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonCard = class IonCard2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCard2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonCard2, selector: "ion-card", inputs: { button: "button", color: "color", disabled: "disabled", download: "download", href: "href", mode: "mode", rel: "rel", routerAnimation: "routerAnimation", routerDirection: "routerDirection", target: "target", type: "type" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonCard = __decorate([
        ProxyCmp2({
          inputs: ["button", "color", "disabled", "download", "href", "mode", "rel", "routerAnimation", "routerDirection", "target", "type"]
        })
      ], IonCard);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCard, decorators: [{
        type: Component,
        args: [{
          selector: "ion-card",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["button", "color", "disabled", "download", "href", "mode", "rel", "routerAnimation", "routerDirection", "target", "type"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonCardContent = class IonCardContent2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCardContent2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonCardContent2, selector: "ion-card-content", inputs: { mode: "mode" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonCardContent = __decorate([
        ProxyCmp2({
          inputs: ["mode"]
        })
      ], IonCardContent);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCardContent, decorators: [{
        type: Component,
        args: [{
          selector: "ion-card-content",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["mode"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonCardHeader = class IonCardHeader2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCardHeader2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonCardHeader2, selector: "ion-card-header", inputs: { color: "color", mode: "mode", translucent: "translucent" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonCardHeader = __decorate([
        ProxyCmp2({
          inputs: ["color", "mode", "translucent"]
        })
      ], IonCardHeader);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCardHeader, decorators: [{
        type: Component,
        args: [{
          selector: "ion-card-header",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "mode", "translucent"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonCardSubtitle = class IonCardSubtitle2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCardSubtitle2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonCardSubtitle2, selector: "ion-card-subtitle", inputs: { color: "color", mode: "mode" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonCardSubtitle = __decorate([
        ProxyCmp2({
          inputs: ["color", "mode"]
        })
      ], IonCardSubtitle);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCardSubtitle, decorators: [{
        type: Component,
        args: [{
          selector: "ion-card-subtitle",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "mode"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonCardTitle = class IonCardTitle2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCardTitle2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonCardTitle2, selector: "ion-card-title", inputs: { color: "color", mode: "mode" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonCardTitle = __decorate([
        ProxyCmp2({
          inputs: ["color", "mode"]
        })
      ], IonCardTitle);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCardTitle, decorators: [{
        type: Component,
        args: [{
          selector: "ion-card-title",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "mode"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonCheckbox = class IonCheckbox2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionChange", "ionFocus", "ionBlur"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCheckbox2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonCheckbox2, selector: "ion-checkbox", inputs: { alignment: "alignment", checked: "checked", color: "color", disabled: "disabled", indeterminate: "indeterminate", justify: "justify", labelPlacement: "labelPlacement", mode: "mode", name: "name", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonCheckbox = __decorate([
        ProxyCmp2({
          inputs: ["alignment", "checked", "color", "disabled", "indeterminate", "justify", "labelPlacement", "mode", "name", "value"]
        })
      ], IonCheckbox);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCheckbox, decorators: [{
        type: Component,
        args: [{
          selector: "ion-checkbox",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["alignment", "checked", "color", "disabled", "indeterminate", "justify", "labelPlacement", "mode", "name", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonChip = class IonChip2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonChip2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonChip2, selector: "ion-chip", inputs: { color: "color", disabled: "disabled", mode: "mode", outline: "outline" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonChip = __decorate([
        ProxyCmp2({
          inputs: ["color", "disabled", "mode", "outline"]
        })
      ], IonChip);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonChip, decorators: [{
        type: Component,
        args: [{
          selector: "ion-chip",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "disabled", "mode", "outline"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonCol = class IonCol2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCol2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonCol2, selector: "ion-col", inputs: { offset: "offset", offsetLg: "offsetLg", offsetMd: "offsetMd", offsetSm: "offsetSm", offsetXl: "offsetXl", offsetXs: "offsetXs", pull: "pull", pullLg: "pullLg", pullMd: "pullMd", pullSm: "pullSm", pullXl: "pullXl", pullXs: "pullXs", push: "push", pushLg: "pushLg", pushMd: "pushMd", pushSm: "pushSm", pushXl: "pushXl", pushXs: "pushXs", size: "size", sizeLg: "sizeLg", sizeMd: "sizeMd", sizeSm: "sizeSm", sizeXl: "sizeXl", sizeXs: "sizeXs" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonCol = __decorate([
        ProxyCmp2({
          inputs: ["offset", "offsetLg", "offsetMd", "offsetSm", "offsetXl", "offsetXs", "pull", "pullLg", "pullMd", "pullSm", "pullXl", "pullXs", "push", "pushLg", "pushMd", "pushSm", "pushXl", "pushXs", "size", "sizeLg", "sizeMd", "sizeSm", "sizeXl", "sizeXs"]
        })
      ], IonCol);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonCol, decorators: [{
        type: Component,
        args: [{
          selector: "ion-col",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["offset", "offsetLg", "offsetMd", "offsetSm", "offsetXl", "offsetXs", "pull", "pullLg", "pullMd", "pullSm", "pullXl", "pullXs", "push", "pushLg", "pushMd", "pushSm", "pushXl", "pushXs", "size", "sizeLg", "sizeMd", "sizeSm", "sizeXl", "sizeXs"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonContent = class IonContent2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionScrollStart", "ionScroll", "ionScrollEnd"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonContent2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonContent2, selector: "ion-content", inputs: { color: "color", forceOverscroll: "forceOverscroll", fullscreen: "fullscreen", scrollEvents: "scrollEvents", scrollX: "scrollX", scrollY: "scrollY" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonContent = __decorate([
        ProxyCmp2({
          inputs: ["color", "forceOverscroll", "fullscreen", "scrollEvents", "scrollX", "scrollY"],
          methods: ["getScrollElement", "scrollToTop", "scrollToBottom", "scrollByPoint", "scrollToPoint"]
        })
      ], IonContent);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonContent, decorators: [{
        type: Component,
        args: [{
          selector: "ion-content",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "forceOverscroll", "fullscreen", "scrollEvents", "scrollX", "scrollY"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonDatetime = class IonDatetime2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionCancel", "ionChange", "ionFocus", "ionBlur"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonDatetime2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonDatetime2, selector: "ion-datetime", inputs: { cancelText: "cancelText", clearText: "clearText", color: "color", dayValues: "dayValues", disabled: "disabled", doneText: "doneText", firstDayOfWeek: "firstDayOfWeek", formatOptions: "formatOptions", highlightedDates: "highlightedDates", hourCycle: "hourCycle", hourValues: "hourValues", isDateEnabled: "isDateEnabled", locale: "locale", max: "max", min: "min", minuteValues: "minuteValues", mode: "mode", monthValues: "monthValues", multiple: "multiple", name: "name", preferWheel: "preferWheel", presentation: "presentation", readonly: "readonly", showClearButton: "showClearButton", showDefaultButtons: "showDefaultButtons", showDefaultTimeLabel: "showDefaultTimeLabel", showDefaultTitle: "showDefaultTitle", size: "size", titleSelectedDatesFormatter: "titleSelectedDatesFormatter", value: "value", yearValues: "yearValues" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonDatetime = __decorate([
        ProxyCmp2({
          inputs: ["cancelText", "clearText", "color", "dayValues", "disabled", "doneText", "firstDayOfWeek", "formatOptions", "highlightedDates", "hourCycle", "hourValues", "isDateEnabled", "locale", "max", "min", "minuteValues", "mode", "monthValues", "multiple", "name", "preferWheel", "presentation", "readonly", "showClearButton", "showDefaultButtons", "showDefaultTimeLabel", "showDefaultTitle", "size", "titleSelectedDatesFormatter", "value", "yearValues"],
          methods: ["confirm", "reset", "cancel"]
        })
      ], IonDatetime);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonDatetime, decorators: [{
        type: Component,
        args: [{
          selector: "ion-datetime",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["cancelText", "clearText", "color", "dayValues", "disabled", "doneText", "firstDayOfWeek", "formatOptions", "highlightedDates", "hourCycle", "hourValues", "isDateEnabled", "locale", "max", "min", "minuteValues", "mode", "monthValues", "multiple", "name", "preferWheel", "presentation", "readonly", "showClearButton", "showDefaultButtons", "showDefaultTimeLabel", "showDefaultTitle", "size", "titleSelectedDatesFormatter", "value", "yearValues"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonDatetimeButton = class IonDatetimeButton2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonDatetimeButton2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonDatetimeButton2, selector: "ion-datetime-button", inputs: { color: "color", datetime: "datetime", disabled: "disabled", mode: "mode" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonDatetimeButton = __decorate([
        ProxyCmp2({
          inputs: ["color", "datetime", "disabled", "mode"]
        })
      ], IonDatetimeButton);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonDatetimeButton, decorators: [{
        type: Component,
        args: [{
          selector: "ion-datetime-button",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "datetime", "disabled", "mode"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonFab = class IonFab2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonFab2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonFab2, selector: "ion-fab", inputs: { activated: "activated", edge: "edge", horizontal: "horizontal", vertical: "vertical" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonFab = __decorate([
        ProxyCmp2({
          inputs: ["activated", "edge", "horizontal", "vertical"],
          methods: ["close"]
        })
      ], IonFab);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonFab, decorators: [{
        type: Component,
        args: [{
          selector: "ion-fab",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["activated", "edge", "horizontal", "vertical"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonFabButton = class IonFabButton2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionFocus", "ionBlur"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonFabButton2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonFabButton2, selector: "ion-fab-button", inputs: { activated: "activated", closeIcon: "closeIcon", color: "color", disabled: "disabled", download: "download", href: "href", mode: "mode", rel: "rel", routerAnimation: "routerAnimation", routerDirection: "routerDirection", show: "show", size: "size", target: "target", translucent: "translucent", type: "type" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonFabButton = __decorate([
        ProxyCmp2({
          inputs: ["activated", "closeIcon", "color", "disabled", "download", "href", "mode", "rel", "routerAnimation", "routerDirection", "show", "size", "target", "translucent", "type"]
        })
      ], IonFabButton);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonFabButton, decorators: [{
        type: Component,
        args: [{
          selector: "ion-fab-button",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["activated", "closeIcon", "color", "disabled", "download", "href", "mode", "rel", "routerAnimation", "routerDirection", "show", "size", "target", "translucent", "type"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonFabList = class IonFabList2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonFabList2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonFabList2, selector: "ion-fab-list", inputs: { activated: "activated", side: "side" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonFabList = __decorate([
        ProxyCmp2({
          inputs: ["activated", "side"]
        })
      ], IonFabList);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonFabList, decorators: [{
        type: Component,
        args: [{
          selector: "ion-fab-list",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["activated", "side"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonFooter = class IonFooter2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonFooter2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonFooter2, selector: "ion-footer", inputs: { collapse: "collapse", mode: "mode", translucent: "translucent" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonFooter = __decorate([
        ProxyCmp2({
          inputs: ["collapse", "mode", "translucent"]
        })
      ], IonFooter);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonFooter, decorators: [{
        type: Component,
        args: [{
          selector: "ion-footer",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["collapse", "mode", "translucent"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonGrid = class IonGrid2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonGrid2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonGrid2, selector: "ion-grid", inputs: { fixed: "fixed" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonGrid = __decorate([
        ProxyCmp2({
          inputs: ["fixed"]
        })
      ], IonGrid);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonGrid, decorators: [{
        type: Component,
        args: [{
          selector: "ion-grid",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["fixed"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonHeader = class IonHeader2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonHeader2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonHeader2, selector: "ion-header", inputs: { collapse: "collapse", mode: "mode", translucent: "translucent" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonHeader = __decorate([
        ProxyCmp2({
          inputs: ["collapse", "mode", "translucent"]
        })
      ], IonHeader);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonHeader, decorators: [{
        type: Component,
        args: [{
          selector: "ion-header",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["collapse", "mode", "translucent"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonIcon = class IonIcon2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonIcon2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonIcon2, selector: "ion-icon", inputs: { color: "color", flipRtl: "flipRtl", icon: "icon", ios: "ios", lazy: "lazy", md: "md", mode: "mode", name: "name", sanitize: "sanitize", size: "size", src: "src" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonIcon = __decorate([
        ProxyCmp2({
          inputs: ["color", "flipRtl", "icon", "ios", "lazy", "md", "mode", "name", "sanitize", "size", "src"]
        })
      ], IonIcon);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonIcon, decorators: [{
        type: Component,
        args: [{
          selector: "ion-icon",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "flipRtl", "icon", "ios", "lazy", "md", "mode", "name", "sanitize", "size", "src"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonImg = class IonImg2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionImgWillLoad", "ionImgDidLoad", "ionError"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonImg2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonImg2, selector: "ion-img", inputs: { alt: "alt", src: "src" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonImg = __decorate([
        ProxyCmp2({
          inputs: ["alt", "src"]
        })
      ], IonImg);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonImg, decorators: [{
        type: Component,
        args: [{
          selector: "ion-img",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["alt", "src"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonInfiniteScroll = class IonInfiniteScroll2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionInfinite"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonInfiniteScroll2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonInfiniteScroll2, selector: "ion-infinite-scroll", inputs: { disabled: "disabled", position: "position", threshold: "threshold" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonInfiniteScroll = __decorate([
        ProxyCmp2({
          inputs: ["disabled", "position", "threshold"],
          methods: ["complete"]
        })
      ], IonInfiniteScroll);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonInfiniteScroll, decorators: [{
        type: Component,
        args: [{
          selector: "ion-infinite-scroll",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["disabled", "position", "threshold"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonInfiniteScrollContent = class IonInfiniteScrollContent2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonInfiniteScrollContent2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonInfiniteScrollContent2, selector: "ion-infinite-scroll-content", inputs: { loadingSpinner: "loadingSpinner", loadingText: "loadingText" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonInfiniteScrollContent = __decorate([
        ProxyCmp2({
          inputs: ["loadingSpinner", "loadingText"]
        })
      ], IonInfiniteScrollContent);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonInfiniteScrollContent, decorators: [{
        type: Component,
        args: [{
          selector: "ion-infinite-scroll-content",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["loadingSpinner", "loadingText"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonInput = class IonInput2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionInput", "ionChange", "ionBlur", "ionFocus"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonInput2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonInput2, selector: "ion-input", inputs: { autocapitalize: "autocapitalize", autocomplete: "autocomplete", autocorrect: "autocorrect", autofocus: "autofocus", clearInput: "clearInput", clearOnEdit: "clearOnEdit", color: "color", counter: "counter", counterFormatter: "counterFormatter", debounce: "debounce", disabled: "disabled", enterkeyhint: "enterkeyhint", errorText: "errorText", fill: "fill", helperText: "helperText", inputmode: "inputmode", label: "label", labelPlacement: "labelPlacement", max: "max", maxlength: "maxlength", min: "min", minlength: "minlength", mode: "mode", multiple: "multiple", name: "name", pattern: "pattern", placeholder: "placeholder", readonly: "readonly", required: "required", shape: "shape", spellcheck: "spellcheck", step: "step", type: "type", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonInput = __decorate([
        ProxyCmp2({
          inputs: ["autocapitalize", "autocomplete", "autocorrect", "autofocus", "clearInput", "clearOnEdit", "color", "counter", "counterFormatter", "debounce", "disabled", "enterkeyhint", "errorText", "fill", "helperText", "inputmode", "label", "labelPlacement", "max", "maxlength", "min", "minlength", "mode", "multiple", "name", "pattern", "placeholder", "readonly", "required", "shape", "spellcheck", "step", "type", "value"],
          methods: ["setFocus", "getInputElement"]
        })
      ], IonInput);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonInput, decorators: [{
        type: Component,
        args: [{
          selector: "ion-input",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["autocapitalize", "autocomplete", "autocorrect", "autofocus", "clearInput", "clearOnEdit", "color", "counter", "counterFormatter", "debounce", "disabled", "enterkeyhint", "errorText", "fill", "helperText", "inputmode", "label", "labelPlacement", "max", "maxlength", "min", "minlength", "mode", "multiple", "name", "pattern", "placeholder", "readonly", "required", "shape", "spellcheck", "step", "type", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonInputPasswordToggle = class IonInputPasswordToggle2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonInputPasswordToggle2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonInputPasswordToggle2, selector: "ion-input-password-toggle", inputs: { color: "color", hideIcon: "hideIcon", mode: "mode", showIcon: "showIcon" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonInputPasswordToggle = __decorate([
        ProxyCmp2({
          inputs: ["color", "hideIcon", "mode", "showIcon"]
        })
      ], IonInputPasswordToggle);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonInputPasswordToggle, decorators: [{
        type: Component,
        args: [{
          selector: "ion-input-password-toggle",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "hideIcon", "mode", "showIcon"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonItem = class IonItem2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonItem2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonItem2, selector: "ion-item", inputs: { button: "button", color: "color", detail: "detail", detailIcon: "detailIcon", disabled: "disabled", download: "download", href: "href", lines: "lines", mode: "mode", rel: "rel", routerAnimation: "routerAnimation", routerDirection: "routerDirection", target: "target", type: "type" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonItem = __decorate([
        ProxyCmp2({
          inputs: ["button", "color", "detail", "detailIcon", "disabled", "download", "href", "lines", "mode", "rel", "routerAnimation", "routerDirection", "target", "type"]
        })
      ], IonItem);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonItem, decorators: [{
        type: Component,
        args: [{
          selector: "ion-item",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["button", "color", "detail", "detailIcon", "disabled", "download", "href", "lines", "mode", "rel", "routerAnimation", "routerDirection", "target", "type"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonItemDivider = class IonItemDivider2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonItemDivider2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonItemDivider2, selector: "ion-item-divider", inputs: { color: "color", mode: "mode", sticky: "sticky" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonItemDivider = __decorate([
        ProxyCmp2({
          inputs: ["color", "mode", "sticky"]
        })
      ], IonItemDivider);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonItemDivider, decorators: [{
        type: Component,
        args: [{
          selector: "ion-item-divider",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "mode", "sticky"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonItemGroup = class IonItemGroup2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonItemGroup2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonItemGroup2, selector: "ion-item-group", ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonItemGroup = __decorate([
        ProxyCmp2({})
      ], IonItemGroup);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonItemGroup, decorators: [{
        type: Component,
        args: [{
          selector: "ion-item-group",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: []
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonItemOption = class IonItemOption2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonItemOption2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonItemOption2, selector: "ion-item-option", inputs: { color: "color", disabled: "disabled", download: "download", expandable: "expandable", href: "href", mode: "mode", rel: "rel", target: "target", type: "type" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonItemOption = __decorate([
        ProxyCmp2({
          inputs: ["color", "disabled", "download", "expandable", "href", "mode", "rel", "target", "type"]
        })
      ], IonItemOption);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonItemOption, decorators: [{
        type: Component,
        args: [{
          selector: "ion-item-option",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "disabled", "download", "expandable", "href", "mode", "rel", "target", "type"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonItemOptions = class IonItemOptions2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionSwipe"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonItemOptions2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonItemOptions2, selector: "ion-item-options", inputs: { side: "side" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonItemOptions = __decorate([
        ProxyCmp2({
          inputs: ["side"]
        })
      ], IonItemOptions);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonItemOptions, decorators: [{
        type: Component,
        args: [{
          selector: "ion-item-options",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["side"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonItemSliding = class IonItemSliding2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionDrag"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonItemSliding2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonItemSliding2, selector: "ion-item-sliding", inputs: { disabled: "disabled" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonItemSliding = __decorate([
        ProxyCmp2({
          inputs: ["disabled"],
          methods: ["getOpenAmount", "getSlidingRatio", "open", "close", "closeOpened"]
        })
      ], IonItemSliding);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonItemSliding, decorators: [{
        type: Component,
        args: [{
          selector: "ion-item-sliding",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["disabled"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonLabel = class IonLabel2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonLabel2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonLabel2, selector: "ion-label", inputs: { color: "color", mode: "mode", position: "position" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonLabel = __decorate([
        ProxyCmp2({
          inputs: ["color", "mode", "position"]
        })
      ], IonLabel);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonLabel, decorators: [{
        type: Component,
        args: [{
          selector: "ion-label",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "mode", "position"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonList = class IonList2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonList2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonList2, selector: "ion-list", inputs: { inset: "inset", lines: "lines", mode: "mode" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonList = __decorate([
        ProxyCmp2({
          inputs: ["inset", "lines", "mode"],
          methods: ["closeSlidingItems"]
        })
      ], IonList);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonList, decorators: [{
        type: Component,
        args: [{
          selector: "ion-list",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["inset", "lines", "mode"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonListHeader = class IonListHeader2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonListHeader2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonListHeader2, selector: "ion-list-header", inputs: { color: "color", lines: "lines", mode: "mode" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonListHeader = __decorate([
        ProxyCmp2({
          inputs: ["color", "lines", "mode"]
        })
      ], IonListHeader);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonListHeader, decorators: [{
        type: Component,
        args: [{
          selector: "ion-list-header",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "lines", "mode"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonLoading = class IonLoading2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionLoadingDidPresent", "ionLoadingWillPresent", "ionLoadingWillDismiss", "ionLoadingDidDismiss", "didPresent", "willPresent", "willDismiss", "didDismiss"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonLoading2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonLoading2, selector: "ion-loading", inputs: { animated: "animated", backdropDismiss: "backdropDismiss", cssClass: "cssClass", duration: "duration", enterAnimation: "enterAnimation", htmlAttributes: "htmlAttributes", isOpen: "isOpen", keyboardClose: "keyboardClose", leaveAnimation: "leaveAnimation", message: "message", mode: "mode", showBackdrop: "showBackdrop", spinner: "spinner", translucent: "translucent", trigger: "trigger" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonLoading = __decorate([
        ProxyCmp2({
          inputs: ["animated", "backdropDismiss", "cssClass", "duration", "enterAnimation", "htmlAttributes", "isOpen", "keyboardClose", "leaveAnimation", "message", "mode", "showBackdrop", "spinner", "translucent", "trigger"],
          methods: ["present", "dismiss", "onDidDismiss", "onWillDismiss"]
        })
      ], IonLoading);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonLoading, decorators: [{
        type: Component,
        args: [{
          selector: "ion-loading",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["animated", "backdropDismiss", "cssClass", "duration", "enterAnimation", "htmlAttributes", "isOpen", "keyboardClose", "leaveAnimation", "message", "mode", "showBackdrop", "spinner", "translucent", "trigger"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonMenu = class IonMenu2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionWillOpen", "ionWillClose", "ionDidOpen", "ionDidClose"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonMenu2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonMenu2, selector: "ion-menu", inputs: { contentId: "contentId", disabled: "disabled", maxEdgeStart: "maxEdgeStart", menuId: "menuId", side: "side", swipeGesture: "swipeGesture", type: "type" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonMenu = __decorate([
        ProxyCmp2({
          inputs: ["contentId", "disabled", "maxEdgeStart", "menuId", "side", "swipeGesture", "type"],
          methods: ["isOpen", "isActive", "open", "close", "toggle", "setOpen"]
        })
      ], IonMenu);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonMenu, decorators: [{
        type: Component,
        args: [{
          selector: "ion-menu",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["contentId", "disabled", "maxEdgeStart", "menuId", "side", "swipeGesture", "type"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonMenuButton = class IonMenuButton2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonMenuButton2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonMenuButton2, selector: "ion-menu-button", inputs: { autoHide: "autoHide", color: "color", disabled: "disabled", menu: "menu", mode: "mode", type: "type" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonMenuButton = __decorate([
        ProxyCmp2({
          inputs: ["autoHide", "color", "disabled", "menu", "mode", "type"]
        })
      ], IonMenuButton);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonMenuButton, decorators: [{
        type: Component,
        args: [{
          selector: "ion-menu-button",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["autoHide", "color", "disabled", "menu", "mode", "type"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonMenuToggle = class IonMenuToggle2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonMenuToggle2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonMenuToggle2, selector: "ion-menu-toggle", inputs: { autoHide: "autoHide", menu: "menu" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonMenuToggle = __decorate([
        ProxyCmp2({
          inputs: ["autoHide", "menu"]
        })
      ], IonMenuToggle);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonMenuToggle, decorators: [{
        type: Component,
        args: [{
          selector: "ion-menu-toggle",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["autoHide", "menu"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonNavLink = class IonNavLink2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonNavLink2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonNavLink2, selector: "ion-nav-link", inputs: { component: "component", componentProps: "componentProps", routerAnimation: "routerAnimation", routerDirection: "routerDirection" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonNavLink = __decorate([
        ProxyCmp2({
          inputs: ["component", "componentProps", "routerAnimation", "routerDirection"]
        })
      ], IonNavLink);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonNavLink, decorators: [{
        type: Component,
        args: [{
          selector: "ion-nav-link",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["component", "componentProps", "routerAnimation", "routerDirection"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonNote = class IonNote2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonNote2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonNote2, selector: "ion-note", inputs: { color: "color", mode: "mode" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonNote = __decorate([
        ProxyCmp2({
          inputs: ["color", "mode"]
        })
      ], IonNote);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonNote, decorators: [{
        type: Component,
        args: [{
          selector: "ion-note",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "mode"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonPicker = class IonPicker2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonPicker2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonPicker2, selector: "ion-picker", inputs: { mode: "mode" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonPicker = __decorate([
        ProxyCmp2({
          inputs: ["mode"]
        })
      ], IonPicker);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonPicker, decorators: [{
        type: Component,
        args: [{
          selector: "ion-picker",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["mode"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonPickerColumn = class IonPickerColumn2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionChange"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonPickerColumn2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonPickerColumn2, selector: "ion-picker-column", inputs: { color: "color", disabled: "disabled", mode: "mode", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonPickerColumn = __decorate([
        ProxyCmp2({
          inputs: ["color", "disabled", "mode", "value"],
          methods: ["setFocus"]
        })
      ], IonPickerColumn);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonPickerColumn, decorators: [{
        type: Component,
        args: [{
          selector: "ion-picker-column",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "disabled", "mode", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonPickerColumnOption = class IonPickerColumnOption2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonPickerColumnOption2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonPickerColumnOption2, selector: "ion-picker-column-option", inputs: { color: "color", disabled: "disabled", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonPickerColumnOption = __decorate([
        ProxyCmp2({
          inputs: ["color", "disabled", "value"]
        })
      ], IonPickerColumnOption);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonPickerColumnOption, decorators: [{
        type: Component,
        args: [{
          selector: "ion-picker-column-option",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "disabled", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonPickerLegacy = class IonPickerLegacy2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionPickerDidPresent", "ionPickerWillPresent", "ionPickerWillDismiss", "ionPickerDidDismiss", "didPresent", "willPresent", "willDismiss", "didDismiss"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonPickerLegacy2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonPickerLegacy2, selector: "ion-picker-legacy", inputs: { animated: "animated", backdropDismiss: "backdropDismiss", buttons: "buttons", columns: "columns", cssClass: "cssClass", duration: "duration", enterAnimation: "enterAnimation", htmlAttributes: "htmlAttributes", isOpen: "isOpen", keyboardClose: "keyboardClose", leaveAnimation: "leaveAnimation", mode: "mode", showBackdrop: "showBackdrop", trigger: "trigger" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonPickerLegacy = __decorate([
        ProxyCmp2({
          inputs: ["animated", "backdropDismiss", "buttons", "columns", "cssClass", "duration", "enterAnimation", "htmlAttributes", "isOpen", "keyboardClose", "leaveAnimation", "mode", "showBackdrop", "trigger"],
          methods: ["present", "dismiss", "onDidDismiss", "onWillDismiss", "getColumn"]
        })
      ], IonPickerLegacy);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonPickerLegacy, decorators: [{
        type: Component,
        args: [{
          selector: "ion-picker-legacy",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["animated", "backdropDismiss", "buttons", "columns", "cssClass", "duration", "enterAnimation", "htmlAttributes", "isOpen", "keyboardClose", "leaveAnimation", "mode", "showBackdrop", "trigger"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonProgressBar = class IonProgressBar2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonProgressBar2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonProgressBar2, selector: "ion-progress-bar", inputs: { buffer: "buffer", color: "color", mode: "mode", reversed: "reversed", type: "type", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonProgressBar = __decorate([
        ProxyCmp2({
          inputs: ["buffer", "color", "mode", "reversed", "type", "value"]
        })
      ], IonProgressBar);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonProgressBar, decorators: [{
        type: Component,
        args: [{
          selector: "ion-progress-bar",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["buffer", "color", "mode", "reversed", "type", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonRadio = class IonRadio2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionFocus", "ionBlur"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRadio2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonRadio2, selector: "ion-radio", inputs: { alignment: "alignment", color: "color", disabled: "disabled", justify: "justify", labelPlacement: "labelPlacement", mode: "mode", name: "name", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonRadio = __decorate([
        ProxyCmp2({
          inputs: ["alignment", "color", "disabled", "justify", "labelPlacement", "mode", "name", "value"]
        })
      ], IonRadio);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRadio, decorators: [{
        type: Component,
        args: [{
          selector: "ion-radio",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["alignment", "color", "disabled", "justify", "labelPlacement", "mode", "name", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonRadioGroup = class IonRadioGroup2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionChange"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRadioGroup2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonRadioGroup2, selector: "ion-radio-group", inputs: { allowEmptySelection: "allowEmptySelection", compareWith: "compareWith", name: "name", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonRadioGroup = __decorate([
        ProxyCmp2({
          inputs: ["allowEmptySelection", "compareWith", "name", "value"]
        })
      ], IonRadioGroup);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRadioGroup, decorators: [{
        type: Component,
        args: [{
          selector: "ion-radio-group",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["allowEmptySelection", "compareWith", "name", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonRange = class IonRange2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionChange", "ionInput", "ionFocus", "ionBlur", "ionKnobMoveStart", "ionKnobMoveEnd"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRange2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonRange2, selector: "ion-range", inputs: { activeBarStart: "activeBarStart", color: "color", debounce: "debounce", disabled: "disabled", dualKnobs: "dualKnobs", label: "label", labelPlacement: "labelPlacement", max: "max", min: "min", mode: "mode", name: "name", pin: "pin", pinFormatter: "pinFormatter", snaps: "snaps", step: "step", ticks: "ticks", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonRange = __decorate([
        ProxyCmp2({
          inputs: ["activeBarStart", "color", "debounce", "disabled", "dualKnobs", "label", "labelPlacement", "max", "min", "mode", "name", "pin", "pinFormatter", "snaps", "step", "ticks", "value"]
        })
      ], IonRange);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRange, decorators: [{
        type: Component,
        args: [{
          selector: "ion-range",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["activeBarStart", "color", "debounce", "disabled", "dualKnobs", "label", "labelPlacement", "max", "min", "mode", "name", "pin", "pinFormatter", "snaps", "step", "ticks", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonRefresher = class IonRefresher2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionRefresh", "ionPull", "ionStart"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRefresher2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonRefresher2, selector: "ion-refresher", inputs: { closeDuration: "closeDuration", disabled: "disabled", mode: "mode", pullFactor: "pullFactor", pullMax: "pullMax", pullMin: "pullMin", snapbackDuration: "snapbackDuration" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonRefresher = __decorate([
        ProxyCmp2({
          inputs: ["closeDuration", "disabled", "mode", "pullFactor", "pullMax", "pullMin", "snapbackDuration"],
          methods: ["complete", "cancel", "getProgress"]
        })
      ], IonRefresher);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRefresher, decorators: [{
        type: Component,
        args: [{
          selector: "ion-refresher",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["closeDuration", "disabled", "mode", "pullFactor", "pullMax", "pullMin", "snapbackDuration"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonRefresherContent = class IonRefresherContent2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRefresherContent2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonRefresherContent2, selector: "ion-refresher-content", inputs: { pullingIcon: "pullingIcon", pullingText: "pullingText", refreshingSpinner: "refreshingSpinner", refreshingText: "refreshingText" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonRefresherContent = __decorate([
        ProxyCmp2({
          inputs: ["pullingIcon", "pullingText", "refreshingSpinner", "refreshingText"]
        })
      ], IonRefresherContent);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRefresherContent, decorators: [{
        type: Component,
        args: [{
          selector: "ion-refresher-content",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["pullingIcon", "pullingText", "refreshingSpinner", "refreshingText"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonReorder = class IonReorder2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonReorder2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonReorder2, selector: "ion-reorder", ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonReorder = __decorate([
        ProxyCmp2({})
      ], IonReorder);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonReorder, decorators: [{
        type: Component,
        args: [{
          selector: "ion-reorder",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: []
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonReorderGroup = class IonReorderGroup2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionItemReorder"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonReorderGroup2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonReorderGroup2, selector: "ion-reorder-group", inputs: { disabled: "disabled" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonReorderGroup = __decorate([
        ProxyCmp2({
          inputs: ["disabled"],
          methods: ["complete"]
        })
      ], IonReorderGroup);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonReorderGroup, decorators: [{
        type: Component,
        args: [{
          selector: "ion-reorder-group",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["disabled"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonRippleEffect = class IonRippleEffect2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRippleEffect2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonRippleEffect2, selector: "ion-ripple-effect", inputs: { type: "type" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonRippleEffect = __decorate([
        ProxyCmp2({
          inputs: ["type"],
          methods: ["addRipple"]
        })
      ], IonRippleEffect);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRippleEffect, decorators: [{
        type: Component,
        args: [{
          selector: "ion-ripple-effect",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["type"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonRow = class IonRow2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRow2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonRow2, selector: "ion-row", ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonRow = __decorate([
        ProxyCmp2({})
      ], IonRow);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRow, decorators: [{
        type: Component,
        args: [{
          selector: "ion-row",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: []
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonSearchbar = class IonSearchbar2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionInput", "ionChange", "ionCancel", "ionClear", "ionBlur", "ionFocus"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSearchbar2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonSearchbar2, selector: "ion-searchbar", inputs: { animated: "animated", autocapitalize: "autocapitalize", autocomplete: "autocomplete", autocorrect: "autocorrect", cancelButtonIcon: "cancelButtonIcon", cancelButtonText: "cancelButtonText", clearIcon: "clearIcon", color: "color", debounce: "debounce", disabled: "disabled", enterkeyhint: "enterkeyhint", inputmode: "inputmode", maxlength: "maxlength", minlength: "minlength", mode: "mode", name: "name", placeholder: "placeholder", searchIcon: "searchIcon", showCancelButton: "showCancelButton", showClearButton: "showClearButton", spellcheck: "spellcheck", type: "type", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonSearchbar = __decorate([
        ProxyCmp2({
          inputs: ["animated", "autocapitalize", "autocomplete", "autocorrect", "cancelButtonIcon", "cancelButtonText", "clearIcon", "color", "debounce", "disabled", "enterkeyhint", "inputmode", "maxlength", "minlength", "mode", "name", "placeholder", "searchIcon", "showCancelButton", "showClearButton", "spellcheck", "type", "value"],
          methods: ["setFocus", "getInputElement"]
        })
      ], IonSearchbar);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSearchbar, decorators: [{
        type: Component,
        args: [{
          selector: "ion-searchbar",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["animated", "autocapitalize", "autocomplete", "autocorrect", "cancelButtonIcon", "cancelButtonText", "clearIcon", "color", "debounce", "disabled", "enterkeyhint", "inputmode", "maxlength", "minlength", "mode", "name", "placeholder", "searchIcon", "showCancelButton", "showClearButton", "spellcheck", "type", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonSegment = class IonSegment2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionChange"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSegment2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonSegment2, selector: "ion-segment", inputs: { color: "color", disabled: "disabled", mode: "mode", scrollable: "scrollable", selectOnFocus: "selectOnFocus", swipeGesture: "swipeGesture", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonSegment = __decorate([
        ProxyCmp2({
          inputs: ["color", "disabled", "mode", "scrollable", "selectOnFocus", "swipeGesture", "value"]
        })
      ], IonSegment);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSegment, decorators: [{
        type: Component,
        args: [{
          selector: "ion-segment",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "disabled", "mode", "scrollable", "selectOnFocus", "swipeGesture", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonSegmentButton = class IonSegmentButton2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSegmentButton2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonSegmentButton2, selector: "ion-segment-button", inputs: { disabled: "disabled", layout: "layout", mode: "mode", type: "type", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonSegmentButton = __decorate([
        ProxyCmp2({
          inputs: ["disabled", "layout", "mode", "type", "value"]
        })
      ], IonSegmentButton);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSegmentButton, decorators: [{
        type: Component,
        args: [{
          selector: "ion-segment-button",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["disabled", "layout", "mode", "type", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonSelect = class IonSelect2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionChange", "ionCancel", "ionDismiss", "ionFocus", "ionBlur"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSelect2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonSelect2, selector: "ion-select", inputs: { cancelText: "cancelText", color: "color", compareWith: "compareWith", disabled: "disabled", expandedIcon: "expandedIcon", fill: "fill", interface: "interface", interfaceOptions: "interfaceOptions", justify: "justify", label: "label", labelPlacement: "labelPlacement", mode: "mode", multiple: "multiple", name: "name", okText: "okText", placeholder: "placeholder", selectedText: "selectedText", shape: "shape", toggleIcon: "toggleIcon", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonSelect = __decorate([
        ProxyCmp2({
          inputs: ["cancelText", "color", "compareWith", "disabled", "expandedIcon", "fill", "interface", "interfaceOptions", "justify", "label", "labelPlacement", "mode", "multiple", "name", "okText", "placeholder", "selectedText", "shape", "toggleIcon", "value"],
          methods: ["open"]
        })
      ], IonSelect);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSelect, decorators: [{
        type: Component,
        args: [{
          selector: "ion-select",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["cancelText", "color", "compareWith", "disabled", "expandedIcon", "fill", "interface", "interfaceOptions", "justify", "label", "labelPlacement", "mode", "multiple", "name", "okText", "placeholder", "selectedText", "shape", "toggleIcon", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonSelectOption = class IonSelectOption2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSelectOption2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonSelectOption2, selector: "ion-select-option", inputs: { disabled: "disabled", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonSelectOption = __decorate([
        ProxyCmp2({
          inputs: ["disabled", "value"]
        })
      ], IonSelectOption);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSelectOption, decorators: [{
        type: Component,
        args: [{
          selector: "ion-select-option",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["disabled", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonSkeletonText = class IonSkeletonText2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSkeletonText2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonSkeletonText2, selector: "ion-skeleton-text", inputs: { animated: "animated" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonSkeletonText = __decorate([
        ProxyCmp2({
          inputs: ["animated"]
        })
      ], IonSkeletonText);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSkeletonText, decorators: [{
        type: Component,
        args: [{
          selector: "ion-skeleton-text",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["animated"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonSpinner = class IonSpinner2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSpinner2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonSpinner2, selector: "ion-spinner", inputs: { color: "color", duration: "duration", name: "name", paused: "paused" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonSpinner = __decorate([
        ProxyCmp2({
          inputs: ["color", "duration", "name", "paused"]
        })
      ], IonSpinner);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSpinner, decorators: [{
        type: Component,
        args: [{
          selector: "ion-spinner",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "duration", "name", "paused"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonSplitPane = class IonSplitPane2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionSplitPaneVisible"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSplitPane2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonSplitPane2, selector: "ion-split-pane", inputs: { contentId: "contentId", disabled: "disabled", when: "when" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonSplitPane = __decorate([
        ProxyCmp2({
          inputs: ["contentId", "disabled", "when"]
        })
      ], IonSplitPane);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonSplitPane, decorators: [{
        type: Component,
        args: [{
          selector: "ion-split-pane",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["contentId", "disabled", "when"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonTabBar = class IonTabBar2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonTabBar2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonTabBar2, selector: "ion-tab-bar", inputs: { color: "color", mode: "mode", selectedTab: "selectedTab", translucent: "translucent" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonTabBar = __decorate([
        ProxyCmp2({
          inputs: ["color", "mode", "selectedTab", "translucent"]
        })
      ], IonTabBar);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonTabBar, decorators: [{
        type: Component,
        args: [{
          selector: "ion-tab-bar",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "mode", "selectedTab", "translucent"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonTabButton = class IonTabButton2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonTabButton2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonTabButton2, selector: "ion-tab-button", inputs: { disabled: "disabled", download: "download", href: "href", layout: "layout", mode: "mode", rel: "rel", selected: "selected", tab: "tab", target: "target" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonTabButton = __decorate([
        ProxyCmp2({
          inputs: ["disabled", "download", "href", "layout", "mode", "rel", "selected", "tab", "target"]
        })
      ], IonTabButton);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonTabButton, decorators: [{
        type: Component,
        args: [{
          selector: "ion-tab-button",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["disabled", "download", "href", "layout", "mode", "rel", "selected", "tab", "target"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonText = class IonText2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonText2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonText2, selector: "ion-text", inputs: { color: "color", mode: "mode" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonText = __decorate([
        ProxyCmp2({
          inputs: ["color", "mode"]
        })
      ], IonText);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonText, decorators: [{
        type: Component,
        args: [{
          selector: "ion-text",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "mode"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonTextarea = class IonTextarea2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionChange", "ionInput", "ionBlur", "ionFocus"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonTextarea2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonTextarea2, selector: "ion-textarea", inputs: { autoGrow: "autoGrow", autocapitalize: "autocapitalize", autofocus: "autofocus", clearOnEdit: "clearOnEdit", color: "color", cols: "cols", counter: "counter", counterFormatter: "counterFormatter", debounce: "debounce", disabled: "disabled", enterkeyhint: "enterkeyhint", errorText: "errorText", fill: "fill", helperText: "helperText", inputmode: "inputmode", label: "label", labelPlacement: "labelPlacement", maxlength: "maxlength", minlength: "minlength", mode: "mode", name: "name", placeholder: "placeholder", readonly: "readonly", required: "required", rows: "rows", shape: "shape", spellcheck: "spellcheck", value: "value", wrap: "wrap" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonTextarea = __decorate([
        ProxyCmp2({
          inputs: ["autoGrow", "autocapitalize", "autofocus", "clearOnEdit", "color", "cols", "counter", "counterFormatter", "debounce", "disabled", "enterkeyhint", "errorText", "fill", "helperText", "inputmode", "label", "labelPlacement", "maxlength", "minlength", "mode", "name", "placeholder", "readonly", "required", "rows", "shape", "spellcheck", "value", "wrap"],
          methods: ["setFocus", "getInputElement"]
        })
      ], IonTextarea);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonTextarea, decorators: [{
        type: Component,
        args: [{
          selector: "ion-textarea",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["autoGrow", "autocapitalize", "autofocus", "clearOnEdit", "color", "cols", "counter", "counterFormatter", "debounce", "disabled", "enterkeyhint", "errorText", "fill", "helperText", "inputmode", "label", "labelPlacement", "maxlength", "minlength", "mode", "name", "placeholder", "readonly", "required", "rows", "shape", "spellcheck", "value", "wrap"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonThumbnail = class IonThumbnail2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonThumbnail2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonThumbnail2, selector: "ion-thumbnail", ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonThumbnail = __decorate([
        ProxyCmp2({})
      ], IonThumbnail);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonThumbnail, decorators: [{
        type: Component,
        args: [{
          selector: "ion-thumbnail",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: []
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonTitle = class IonTitle2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonTitle2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonTitle2, selector: "ion-title", inputs: { color: "color", size: "size" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonTitle = __decorate([
        ProxyCmp2({
          inputs: ["color", "size"]
        })
      ], IonTitle);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonTitle, decorators: [{
        type: Component,
        args: [{
          selector: "ion-title",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "size"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonToast = class IonToast2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionToastDidPresent", "ionToastWillPresent", "ionToastWillDismiss", "ionToastDidDismiss", "didPresent", "willPresent", "willDismiss", "didDismiss"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonToast2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonToast2, selector: "ion-toast", inputs: { animated: "animated", buttons: "buttons", color: "color", cssClass: "cssClass", duration: "duration", enterAnimation: "enterAnimation", header: "header", htmlAttributes: "htmlAttributes", icon: "icon", isOpen: "isOpen", keyboardClose: "keyboardClose", layout: "layout", leaveAnimation: "leaveAnimation", message: "message", mode: "mode", position: "position", positionAnchor: "positionAnchor", swipeGesture: "swipeGesture", translucent: "translucent", trigger: "trigger" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonToast = __decorate([
        ProxyCmp2({
          inputs: ["animated", "buttons", "color", "cssClass", "duration", "enterAnimation", "header", "htmlAttributes", "icon", "isOpen", "keyboardClose", "layout", "leaveAnimation", "message", "mode", "position", "positionAnchor", "swipeGesture", "translucent", "trigger"],
          methods: ["present", "dismiss", "onDidDismiss", "onWillDismiss"]
        })
      ], IonToast);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonToast, decorators: [{
        type: Component,
        args: [{
          selector: "ion-toast",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["animated", "buttons", "color", "cssClass", "duration", "enterAnimation", "header", "htmlAttributes", "icon", "isOpen", "keyboardClose", "layout", "leaveAnimation", "message", "mode", "position", "positionAnchor", "swipeGesture", "translucent", "trigger"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonToggle = class IonToggle2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
          proxyOutputs2(this, this.el, ["ionChange", "ionFocus", "ionBlur"]);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonToggle2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonToggle2, selector: "ion-toggle", inputs: { alignment: "alignment", checked: "checked", color: "color", disabled: "disabled", enableOnOffLabels: "enableOnOffLabels", justify: "justify", labelPlacement: "labelPlacement", mode: "mode", name: "name", value: "value" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonToggle = __decorate([
        ProxyCmp2({
          inputs: ["alignment", "checked", "color", "disabled", "enableOnOffLabels", "justify", "labelPlacement", "mode", "name", "value"]
        })
      ], IonToggle);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonToggle, decorators: [{
        type: Component,
        args: [{
          selector: "ion-toggle",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["alignment", "checked", "color", "disabled", "enableOnOffLabels", "justify", "labelPlacement", "mode", "name", "value"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonToolbar = class IonToolbar2 {
        z;
        el;
        constructor(c, r, z) {
          this.z = z;
          c.detach();
          this.el = r.nativeElement;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonToolbar2, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: NgZone }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IonToolbar2, selector: "ion-toolbar", inputs: { color: "color", mode: "mode" }, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      IonToolbar = __decorate([
        ProxyCmp2({
          inputs: ["color", "mode"]
        })
      ], IonToolbar);
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonToolbar, decorators: [{
        type: Component,
        args: [{
          selector: "ion-toolbar",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: "<ng-content></ng-content>",
          // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
          inputs: ["color", "mode"]
        }]
      }], ctorParameters: function() {
        return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: NgZone }];
      } });
      IonRouterOutlet2 = class _IonRouterOutlet extends IonRouterOutlet {
        parentOutlet;
        /**
         * `static: true` must be set so the query results are resolved
         * before change detection runs. Otherwise, the view container
         * ref will be ion-router-outlet instead of ng-container, and
         * the first view will be added as a sibling of ion-router-outlet
         * instead of a child.
         */
        outletContent;
        /**
         * We need to pass in the correct instance of IonRouterOutlet
         * otherwise parentOutlet will be null in a nested outlet context.
         * This results in APIs such as NavController.pop not working
         * in nested outlets because the parent outlet cannot be found.
         */
        constructor(name, tabs, commonLocation, elementRef, router, zone, activatedRoute, parentOutlet) {
          super(name, tabs, commonLocation, elementRef, router, zone, activatedRoute, parentOutlet);
          this.parentOutlet = parentOutlet;
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _IonRouterOutlet, deps: [{ token: "name", attribute: true }, { token: "tabs", attribute: true, optional: true }, { token: Location }, { token: ElementRef }, { token: Router }, { token: NgZone }, { token: ActivatedRoute }, { token: _IonRouterOutlet, optional: true, skipSelf: true }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: _IonRouterOutlet, selector: "ion-router-outlet", viewQueries: [{ propertyName: "outletContent", first: true, predicate: ["outletContent"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: core_exports, template: "<ng-container #outletContent><ng-content></ng-content></ng-container>", isInline: true });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonRouterOutlet2, decorators: [{
        type: Component,
        args: [{
          selector: "ion-router-outlet",
          template: "<ng-container #outletContent><ng-content></ng-content></ng-container>"
        }]
      }], ctorParameters: function() {
        return [{ type: void 0, decorators: [{
          type: Attribute,
          args: ["name"]
        }] }, { type: void 0, decorators: [{
          type: Optional
        }, {
          type: Attribute,
          args: ["tabs"]
        }] }, { type: Location }, { type: ElementRef }, { type: Router }, { type: NgZone }, { type: ActivatedRoute }, { type: IonRouterOutlet2, decorators: [{
          type: SkipSelf
        }, {
          type: Optional
        }] }];
      }, propDecorators: { outletContent: [{
        type: ViewChild,
        args: ["outletContent", { read: ViewContainerRef, static: true }]
      }] } });
      IonTabs2 = class _IonTabs extends IonTabs {
        outlet;
        tabBar;
        tabBars;
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _IonTabs, deps: null, target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: _IonTabs, selector: "ion-tabs", queries: [{ propertyName: "tabBar", first: true, predicate: IonTabBar, descendants: true }, { propertyName: "tabBars", predicate: IonTabBar }], viewQueries: [{ propertyName: "outlet", first: true, predicate: ["outlet"], descendants: true, read: IonRouterOutlet2 }], usesInheritance: true, ngImport: core_exports, template: `
    <ng-content select="[slot=top]"></ng-content>
    <div class="tabs-inner" #tabsInner>
      <ion-router-outlet
        #outlet
        tabs="true"
        (stackWillChange)="onStackWillChange($event)"
        (stackDidChange)="onStackDidChange($event)"
      ></ion-router-outlet>
    </div>
    <ng-content></ng-content>
  `, isInline: true, styles: [":host{display:flex;position:absolute;inset:0;flex-direction:column;width:100%;height:100%;contain:layout size style}.tabs-inner{position:relative;flex:1;contain:layout size style}\n"], dependencies: [{ kind: "component", type: IonRouterOutlet2, selector: "ion-router-outlet" }] });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonTabs2, decorators: [{
        type: Component,
        args: [{ selector: "ion-tabs", template: `
    <ng-content select="[slot=top]"></ng-content>
    <div class="tabs-inner" #tabsInner>
      <ion-router-outlet
        #outlet
        tabs="true"
        (stackWillChange)="onStackWillChange($event)"
        (stackDidChange)="onStackDidChange($event)"
      ></ion-router-outlet>
    </div>
    <ng-content></ng-content>
  `, styles: [":host{display:flex;position:absolute;inset:0;flex-direction:column;width:100%;height:100%;contain:layout size style}.tabs-inner{position:relative;flex:1;contain:layout size style}\n"] }]
      }], propDecorators: { outlet: [{
        type: ViewChild,
        args: ["outlet", { read: IonRouterOutlet2, static: false }]
      }], tabBar: [{
        type: ContentChild,
        args: [IonTabBar, { static: false }]
      }], tabBars: [{
        type: ContentChildren,
        args: [IonTabBar]
      }] } });
      IonBackButton3 = class _IonBackButton extends IonBackButton {
        constructor(routerOutlet, navCtrl, config4, r, z, c) {
          super(routerOutlet, navCtrl, config4, r, z, c);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _IonBackButton, deps: [{ token: IonRouterOutlet2, optional: true }, { token: NavController }, { token: Config2 }, { token: ElementRef }, { token: NgZone }, { token: ChangeDetectorRef }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: _IonBackButton, selector: "ion-back-button", usesInheritance: true, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonBackButton3, decorators: [{
        type: Component,
        args: [{
          selector: "ion-back-button",
          template: "<ng-content></ng-content>",
          changeDetection: ChangeDetectionStrategy.OnPush
        }]
      }], ctorParameters: function() {
        return [{ type: IonRouterOutlet2, decorators: [{
          type: Optional
        }] }, { type: NavController }, { type: Config2 }, { type: ElementRef }, { type: NgZone }, { type: ChangeDetectorRef }];
      } });
      IonNav3 = class _IonNav extends IonNav {
        constructor(ref, environmentInjector, injector, angularDelegate, z, c) {
          super(ref, environmentInjector, injector, angularDelegate, z, c);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _IonNav, deps: [{ token: ElementRef }, { token: EnvironmentInjector }, { token: Injector }, { token: AngularDelegate }, { token: NgZone }, { token: ChangeDetectorRef }], target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: _IonNav, selector: "ion-nav", usesInheritance: true, ngImport: core_exports, template: "<ng-content></ng-content>", isInline: true, changeDetection: ChangeDetectionStrategy.OnPush });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonNav3, decorators: [{
        type: Component,
        args: [{
          selector: "ion-nav",
          template: "<ng-content></ng-content>",
          changeDetection: ChangeDetectionStrategy.OnPush
        }]
      }], ctorParameters: function() {
        return [{ type: ElementRef }, { type: EnvironmentInjector }, { type: Injector }, { type: AngularDelegate }, { type: NgZone }, { type: ChangeDetectorRef }];
      } });
      RouterLinkDelegateDirective2 = class _RouterLinkDelegateDirective extends RouterLinkDelegateDirective {
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _RouterLinkDelegateDirective, deps: null, target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: _RouterLinkDelegateDirective, selector: ":not(a):not(area)[routerLink]", usesInheritance: true, ngImport: core_exports });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: RouterLinkDelegateDirective2, decorators: [{
        type: Directive,
        args: [{
          selector: ":not(a):not(area)[routerLink]"
        }]
      }] });
      RouterLinkWithHrefDelegateDirective2 = class _RouterLinkWithHrefDelegateDirective extends RouterLinkWithHrefDelegateDirective {
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _RouterLinkWithHrefDelegateDirective, deps: null, target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: _RouterLinkWithHrefDelegateDirective, selector: "a[routerLink],area[routerLink]", usesInheritance: true, ngImport: core_exports });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: RouterLinkWithHrefDelegateDirective2, decorators: [{
        type: Directive,
        args: [{
          selector: "a[routerLink],area[routerLink]"
        }]
      }] });
      IonModal3 = class _IonModal extends IonModal {
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _IonModal, deps: null, target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: _IonModal, selector: "ion-modal", usesInheritance: true, ngImport: core_exports, template: `<div class="ion-delegate-host ion-page" *ngIf="isCmpOpen || keepContentsMounted">
    <ng-container [ngTemplateOutlet]="template"></ng-container>
  </div>`, isInline: true, dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: ChangeDetectionStrategy.OnPush });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonModal3, decorators: [{
        type: Component,
        args: [{
          selector: "ion-modal",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: `<div class="ion-delegate-host ion-page" *ngIf="isCmpOpen || keepContentsMounted">
    <ng-container [ngTemplateOutlet]="template"></ng-container>
  </div>`
        }]
      }] });
      IonPopover3 = class _IonPopover extends IonPopover {
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _IonPopover, deps: null, target: FactoryTarget.Component });
        /** @nocollapse */
        static \u0275cmp = \u0275\u0275ngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: _IonPopover, selector: "ion-popover", usesInheritance: true, ngImport: core_exports, template: `<ng-container [ngTemplateOutlet]="template" *ngIf="isCmpOpen || keepContentsMounted"></ng-container>`, isInline: true, dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: ChangeDetectionStrategy.OnPush });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonPopover3, decorators: [{
        type: Component,
        args: [{
          selector: "ion-popover",
          changeDetection: ChangeDetectionStrategy.OnPush,
          template: `<ng-container [ngTemplateOutlet]="template" *ngIf="isCmpOpen || keepContentsMounted"></ng-container>`
        }]
      }] });
      ION_MAX_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(() => IonMaxValidator),
        multi: true
      };
      IonMaxValidator = class _IonMaxValidator extends MaxValidator {
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _IonMaxValidator, deps: null, target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: _IonMaxValidator, selector: "ion-input[type=number][max][formControlName],ion-input[type=number][max][formControl],ion-input[type=number][max][ngModel]", host: { properties: { "attr.max": "_enabled ? max : null" } }, providers: [ION_MAX_VALIDATOR], usesInheritance: true, ngImport: core_exports });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonMaxValidator, decorators: [{
        type: Directive,
        args: [{
          selector: "ion-input[type=number][max][formControlName],ion-input[type=number][max][formControl],ion-input[type=number][max][ngModel]",
          providers: [ION_MAX_VALIDATOR],
          // eslint-disable-next-line @angular-eslint/no-host-metadata-property
          host: { "[attr.max]": "_enabled ? max : null" }
        }]
      }] });
      ION_MIN_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(() => IonMinValidator),
        multi: true
      };
      IonMinValidator = class _IonMinValidator extends MinValidator {
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _IonMinValidator, deps: null, target: FactoryTarget.Directive });
        /** @nocollapse */
        static \u0275dir = \u0275\u0275ngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: _IonMinValidator, selector: "ion-input[type=number][min][formControlName],ion-input[type=number][min][formControl],ion-input[type=number][min][ngModel]", host: { properties: { "attr.min": "_enabled ? min : null" } }, providers: [ION_MIN_VALIDATOR], usesInheritance: true, ngImport: core_exports });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonMinValidator, decorators: [{
        type: Directive,
        args: [{
          selector: "ion-input[type=number][min][formControlName],ion-input[type=number][min][formControl],ion-input[type=number][min][ngModel]",
          providers: [ION_MIN_VALIDATOR],
          // eslint-disable-next-line @angular-eslint/no-host-metadata-property
          host: { "[attr.min]": "_enabled ? min : null" }
        }]
      }] });
      AlertController = class _AlertController extends OverlayBaseController {
        constructor() {
          super(alertController);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _AlertController, deps: [], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _AlertController, providedIn: "root" });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: AlertController, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }], ctorParameters: function() {
        return [];
      } });
      AnimationController = class _AnimationController {
        /**
         * Create a new animation
         */
        create(animationId) {
          return createAnimation(animationId);
        }
        /**
         * EXPERIMENTAL
         *
         * Given a progression and a cubic bezier function,
         * this utility returns the time value(s) at which the
         * cubic bezier reaches the given time progression.
         *
         * If the cubic bezier never reaches the progression
         * the result will be an empty array.
         *
         * This is most useful for switching between easing curves
         * when doing a gesture animation (i.e. going from linear easing
         * during a drag, to another easing when `progressEnd` is called)
         */
        easingTime(p0, p1, p2, p3, progression) {
          return getTimeGivenProgression(p0, p1, p2, p3, progression);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _AnimationController, deps: [], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _AnimationController, providedIn: "root" });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: AnimationController, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }] });
      ActionSheetController = class _ActionSheetController extends OverlayBaseController {
        constructor() {
          super(actionSheetController);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _ActionSheetController, deps: [], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _ActionSheetController, providedIn: "root" });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: ActionSheetController, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }], ctorParameters: function() {
        return [];
      } });
      GestureController2 = class _GestureController {
        zone;
        constructor(zone) {
          this.zone = zone;
        }
        /**
         * Create a new gesture
         */
        create(opts, runInsideAngularZone = false) {
          if (runInsideAngularZone) {
            Object.getOwnPropertyNames(opts).forEach((key) => {
              if (typeof opts[key] === "function") {
                const fn2 = opts[key];
                opts[key] = (...props) => this.zone.run(() => fn2(...props));
              }
            });
          }
          return createGesture(opts);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _GestureController, deps: [{ token: NgZone }], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _GestureController, providedIn: "root" });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: GestureController2, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }], ctorParameters: function() {
        return [{ type: NgZone }];
      } });
      LoadingController = class _LoadingController extends OverlayBaseController {
        constructor() {
          super(loadingController);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _LoadingController, deps: [], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _LoadingController, providedIn: "root" });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: LoadingController, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }], ctorParameters: function() {
        return [];
      } });
      MenuController2 = class _MenuController extends MenuController {
        constructor() {
          super(menuController);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _MenuController, deps: [], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _MenuController, providedIn: "root" });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: MenuController2, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }], ctorParameters: function() {
        return [];
      } });
      ModalController = class _ModalController extends OverlayBaseController {
        angularDelegate = inject(AngularDelegate);
        injector = inject(Injector);
        environmentInjector = inject(EnvironmentInjector);
        constructor() {
          super(modalController);
        }
        create(opts) {
          return super.create({
            ...opts,
            delegate: this.angularDelegate.create(this.environmentInjector, this.injector, "modal")
          });
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _ModalController, deps: [], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _ModalController });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: ModalController, decorators: [{
        type: Injectable
      }], ctorParameters: function() {
        return [];
      } });
      PickerController = class _PickerController extends OverlayBaseController {
        constructor() {
          super(pickerController);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _PickerController, deps: [], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _PickerController, providedIn: "root" });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: PickerController, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }], ctorParameters: function() {
        return [];
      } });
      PopoverController = class extends OverlayBaseController {
        angularDelegate = inject(AngularDelegate);
        injector = inject(Injector);
        environmentInjector = inject(EnvironmentInjector);
        constructor() {
          super(popoverController);
        }
        create(opts) {
          return super.create({
            ...opts,
            delegate: this.angularDelegate.create(this.environmentInjector, this.injector, "popover")
          });
        }
      };
      ToastController = class _ToastController extends OverlayBaseController {
        constructor() {
          super(toastController);
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _ToastController, deps: [], target: FactoryTarget.Injectable });
        /** @nocollapse */
        static \u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _ToastController, providedIn: "root" });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: ToastController, decorators: [{
        type: Injectable,
        args: [{
          providedIn: "root"
        }]
      }], ctorParameters: function() {
        return [];
      } });
      appInitialize = (config4, doc3, zone) => {
        return () => {
          const win3 = doc3.defaultView;
          if (win3 && typeof window !== "undefined") {
            setupConfig({
              ...config4,
              _zoneGate: (h2) => zone.run(h2)
            });
            const aelFn = "__zone_symbol__addEventListener" in doc3.body ? "__zone_symbol__addEventListener" : "addEventListener";
            return applyPolyfills().then(() => {
              return defineCustomElements(win3, {
                exclude: ["ion-tabs", "ion-tab"],
                syncQueue: true,
                raf: raf2,
                jmp: (h2) => zone.runOutsideAngular(h2),
                ael(elm, eventName, cb, opts) {
                  elm[aelFn](eventName, cb, opts);
                },
                rel(elm, eventName, cb, opts) {
                  elm.removeEventListener(eventName, cb, opts);
                }
              });
            });
          }
        };
      };
      DIRECTIVES = [
        IonAccordion,
        IonAccordionGroup,
        IonActionSheet,
        IonAlert,
        IonApp,
        IonAvatar,
        IonBackdrop,
        IonBadge,
        IonBreadcrumb,
        IonBreadcrumbs,
        IonButton,
        IonButtons,
        IonCard,
        IonCardContent,
        IonCardHeader,
        IonCardSubtitle,
        IonCardTitle,
        IonCheckbox,
        IonChip,
        IonCol,
        IonContent,
        IonDatetime,
        IonDatetimeButton,
        IonFab,
        IonFabButton,
        IonFabList,
        IonFooter,
        IonGrid,
        IonHeader,
        IonIcon,
        IonImg,
        IonInfiniteScroll,
        IonInfiniteScrollContent,
        IonInput,
        IonInputPasswordToggle,
        IonItem,
        IonItemDivider,
        IonItemGroup,
        IonItemOption,
        IonItemOptions,
        IonItemSliding,
        IonLabel,
        IonList,
        IonListHeader,
        IonLoading,
        IonMenu,
        IonMenuButton,
        IonMenuToggle,
        IonNavLink,
        IonNote,
        IonPicker,
        IonPickerColumn,
        IonPickerColumnOption,
        IonPickerLegacy,
        IonProgressBar,
        IonRadio,
        IonRadioGroup,
        IonRange,
        IonRefresher,
        IonRefresherContent,
        IonReorder,
        IonReorderGroup,
        IonRippleEffect,
        IonRow,
        IonSearchbar,
        IonSegment,
        IonSegmentButton,
        IonSelect,
        IonSelectOption,
        IonSkeletonText,
        IonSpinner,
        IonSplitPane,
        IonTabBar,
        IonTabButton,
        IonText,
        IonTextarea,
        IonThumbnail,
        IonTitle,
        IonToast,
        IonToggle,
        IonToolbar
      ];
      DECLARATIONS = [
        // generated proxies
        ...DIRECTIVES,
        // manual proxies
        IonModal3,
        IonPopover3,
        // ngModel accessors
        BooleanValueAccessorDirective,
        NumericValueAccessorDirective,
        SelectValueAccessorDirective,
        TextValueAccessorDirective,
        // navigation
        IonTabs2,
        IonRouterOutlet2,
        IonBackButton3,
        IonNav3,
        RouterLinkDelegateDirective2,
        RouterLinkWithHrefDelegateDirective2,
        // validators
        IonMinValidator,
        IonMaxValidator
      ];
      IonicModule = class _IonicModule {
        static forRoot(config4) {
          return {
            ngModule: _IonicModule,
            providers: [
              {
                provide: ConfigToken,
                useValue: config4
              },
              {
                provide: APP_INITIALIZER,
                useFactory: appInitialize,
                multi: true,
                deps: [ConfigToken, DOCUMENT2, NgZone]
              },
              provideComponentInputBinding()
            ]
          };
        }
        /** @nocollapse */
        static \u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _IonicModule, deps: [], target: FactoryTarget.NgModule });
        /** @nocollapse */
        static \u0275mod = \u0275\u0275ngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: core_exports, type: _IonicModule, declarations: [
          IonAccordion,
          IonAccordionGroup,
          IonActionSheet,
          IonAlert,
          IonApp,
          IonAvatar,
          IonBackdrop,
          IonBadge,
          IonBreadcrumb,
          IonBreadcrumbs,
          IonButton,
          IonButtons,
          IonCard,
          IonCardContent,
          IonCardHeader,
          IonCardSubtitle,
          IonCardTitle,
          IonCheckbox,
          IonChip,
          IonCol,
          IonContent,
          IonDatetime,
          IonDatetimeButton,
          IonFab,
          IonFabButton,
          IonFabList,
          IonFooter,
          IonGrid,
          IonHeader,
          IonIcon,
          IonImg,
          IonInfiniteScroll,
          IonInfiniteScrollContent,
          IonInput,
          IonInputPasswordToggle,
          IonItem,
          IonItemDivider,
          IonItemGroup,
          IonItemOption,
          IonItemOptions,
          IonItemSliding,
          IonLabel,
          IonList,
          IonListHeader,
          IonLoading,
          IonMenu,
          IonMenuButton,
          IonMenuToggle,
          IonNavLink,
          IonNote,
          IonPicker,
          IonPickerColumn,
          IonPickerColumnOption,
          IonPickerLegacy,
          IonProgressBar,
          IonRadio,
          IonRadioGroup,
          IonRange,
          IonRefresher,
          IonRefresherContent,
          IonReorder,
          IonReorderGroup,
          IonRippleEffect,
          IonRow,
          IonSearchbar,
          IonSegment,
          IonSegmentButton,
          IonSelect,
          IonSelectOption,
          IonSkeletonText,
          IonSpinner,
          IonSplitPane,
          IonTabBar,
          IonTabButton,
          IonText,
          IonTextarea,
          IonThumbnail,
          IonTitle,
          IonToast,
          IonToggle,
          IonToolbar,
          // manual proxies
          IonModal3,
          IonPopover3,
          // ngModel accessors
          BooleanValueAccessorDirective,
          NumericValueAccessorDirective,
          SelectValueAccessorDirective,
          TextValueAccessorDirective,
          // navigation
          IonTabs2,
          IonRouterOutlet2,
          IonBackButton3,
          IonNav3,
          RouterLinkDelegateDirective2,
          RouterLinkWithHrefDelegateDirective2,
          // validators
          IonMinValidator,
          IonMaxValidator
        ], imports: [CommonModule], exports: [
          IonAccordion,
          IonAccordionGroup,
          IonActionSheet,
          IonAlert,
          IonApp,
          IonAvatar,
          IonBackdrop,
          IonBadge,
          IonBreadcrumb,
          IonBreadcrumbs,
          IonButton,
          IonButtons,
          IonCard,
          IonCardContent,
          IonCardHeader,
          IonCardSubtitle,
          IonCardTitle,
          IonCheckbox,
          IonChip,
          IonCol,
          IonContent,
          IonDatetime,
          IonDatetimeButton,
          IonFab,
          IonFabButton,
          IonFabList,
          IonFooter,
          IonGrid,
          IonHeader,
          IonIcon,
          IonImg,
          IonInfiniteScroll,
          IonInfiniteScrollContent,
          IonInput,
          IonInputPasswordToggle,
          IonItem,
          IonItemDivider,
          IonItemGroup,
          IonItemOption,
          IonItemOptions,
          IonItemSliding,
          IonLabel,
          IonList,
          IonListHeader,
          IonLoading,
          IonMenu,
          IonMenuButton,
          IonMenuToggle,
          IonNavLink,
          IonNote,
          IonPicker,
          IonPickerColumn,
          IonPickerColumnOption,
          IonPickerLegacy,
          IonProgressBar,
          IonRadio,
          IonRadioGroup,
          IonRange,
          IonRefresher,
          IonRefresherContent,
          IonReorder,
          IonReorderGroup,
          IonRippleEffect,
          IonRow,
          IonSearchbar,
          IonSegment,
          IonSegmentButton,
          IonSelect,
          IonSelectOption,
          IonSkeletonText,
          IonSpinner,
          IonSplitPane,
          IonTabBar,
          IonTabButton,
          IonText,
          IonTextarea,
          IonThumbnail,
          IonTitle,
          IonToast,
          IonToggle,
          IonToolbar,
          // manual proxies
          IonModal3,
          IonPopover3,
          // ngModel accessors
          BooleanValueAccessorDirective,
          NumericValueAccessorDirective,
          SelectValueAccessorDirective,
          TextValueAccessorDirective,
          // navigation
          IonTabs2,
          IonRouterOutlet2,
          IonBackButton3,
          IonNav3,
          RouterLinkDelegateDirective2,
          RouterLinkWithHrefDelegateDirective2,
          // validators
          IonMinValidator,
          IonMaxValidator
        ] });
        /** @nocollapse */
        static \u0275inj = \u0275\u0275ngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: _IonicModule, providers: [AngularDelegate, ModalController, PopoverController], imports: [CommonModule] });
      };
      \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: core_exports, type: IonicModule, decorators: [{
        type: NgModule,
        args: [{
          declarations: DECLARATIONS,
          exports: DECLARATIONS,
          providers: [AngularDelegate, ModalController, PopoverController],
          imports: [CommonModule]
        }]
      }] });
    }
  });

  // src/app/tabs/tabs.page.ts
  var TabsPage;
  var init_tabs_page = __esm({
    "src/app/tabs/tabs.page.ts"() {
      "use strict";
      init_core();
      TabsPage = class {
        constructor() {
        }
      };
      TabsPage = __decorateClass([
        Component({
          selector: "app-tabs",
          templateUrl: "tabs.page.html",
          styleUrls: ["tabs.page.scss"]
        })
      ], TabsPage);
    }
  });

  // src/app/tab1/tab1.page.ts
  var Tab1Page;
  var init_tab1_page = __esm({
    "src/app/tab1/tab1.page.ts"() {
      "use strict";
      init_core();
      Tab1Page = class {
        constructor() {
        }
      };
      Tab1Page = __decorateClass([
        Component({
          selector: "app-tab1",
          templateUrl: "tab1.page.html",
          styleUrls: ["tab1.page.scss"]
        })
      ], Tab1Page);
    }
  });

  // src/app/explore-container/explore-container.component.ts
  var ExploreContainerComponent;
  var init_explore_container_component = __esm({
    "src/app/explore-container/explore-container.component.ts"() {
      "use strict";
      init_core();
      ExploreContainerComponent = class {
      };
      __decorateClass([
        Input()
      ], ExploreContainerComponent.prototype, "name", 2);
      ExploreContainerComponent = __decorateClass([
        Component({
          selector: "app-explore-container",
          templateUrl: "./explore-container.component.html",
          styleUrls: ["./explore-container.component.scss"]
        })
      ], ExploreContainerComponent);
    }
  });

  // src/app/explore-container/explore-container.module.ts
  var ExploreContainerComponentModule;
  var init_explore_container_module = __esm({
    "src/app/explore-container/explore-container.module.ts"() {
      "use strict";
      init_core();
      init_common();
      init_forms();
      init_ionic_angular();
      init_explore_container_component();
      ExploreContainerComponentModule = class {
      };
      ExploreContainerComponentModule = __decorateClass([
        NgModule({
          imports: [CommonModule, FormsModule, IonicModule],
          declarations: [ExploreContainerComponent],
          exports: [ExploreContainerComponent]
        })
      ], ExploreContainerComponentModule);
    }
  });

  // src/app/tab1/tab1-routing.module.ts
  var routes, Tab1PageRoutingModule;
  var init_tab1_routing_module = __esm({
    "src/app/tab1/tab1-routing.module.ts"() {
      "use strict";
      init_core();
      init_router();
      init_tab1_page();
      routes = [
        {
          path: "",
          component: Tab1Page
        }
      ];
      Tab1PageRoutingModule = class {
      };
      Tab1PageRoutingModule = __decorateClass([
        NgModule({
          imports: [RouterModule.forChild(routes)],
          exports: [RouterModule]
        })
      ], Tab1PageRoutingModule);
    }
  });

  // src/app/tab1/tab1.module.ts
  var tab1_module_exports = {};
  __export(tab1_module_exports, {
    Tab1PageModule: () => Tab1PageModule
  });
  var Tab1PageModule;
  var init_tab1_module = __esm({
    "src/app/tab1/tab1.module.ts"() {
      "use strict";
      init_ionic_angular();
      init_core();
      init_common();
      init_forms();
      init_tab1_page();
      init_explore_container_module();
      init_tab1_routing_module();
      Tab1PageModule = class {
      };
      Tab1PageModule = __decorateClass([
        NgModule({
          imports: [
            IonicModule,
            CommonModule,
            FormsModule,
            ExploreContainerComponentModule,
            Tab1PageRoutingModule
          ],
          declarations: [Tab1Page]
        })
      ], Tab1PageModule);
    }
  });

  // src/app/tab2/tab2.page.ts
  var Tab2Page;
  var init_tab2_page = __esm({
    "src/app/tab2/tab2.page.ts"() {
      "use strict";
      init_core();
      Tab2Page = class {
        constructor() {
        }
      };
      Tab2Page = __decorateClass([
        Component({
          selector: "app-tab2",
          templateUrl: "tab2.page.html",
          styleUrls: ["tab2.page.scss"]
        })
      ], Tab2Page);
    }
  });

  // src/app/tab2/tab2-routing.module.ts
  var routes2, Tab2PageRoutingModule;
  var init_tab2_routing_module = __esm({
    "src/app/tab2/tab2-routing.module.ts"() {
      "use strict";
      init_core();
      init_router();
      init_tab2_page();
      routes2 = [
        {
          path: "",
          component: Tab2Page
        }
      ];
      Tab2PageRoutingModule = class {
      };
      Tab2PageRoutingModule = __decorateClass([
        NgModule({
          imports: [RouterModule.forChild(routes2)],
          exports: [RouterModule]
        })
      ], Tab2PageRoutingModule);
    }
  });

  // src/app/tab2/tab2.module.ts
  var tab2_module_exports = {};
  __export(tab2_module_exports, {
    Tab2PageModule: () => Tab2PageModule
  });
  var Tab2PageModule;
  var init_tab2_module = __esm({
    "src/app/tab2/tab2.module.ts"() {
      "use strict";
      init_ionic_angular();
      init_core();
      init_common();
      init_forms();
      init_tab2_page();
      init_explore_container_module();
      init_tab2_routing_module();
      Tab2PageModule = class {
      };
      Tab2PageModule = __decorateClass([
        NgModule({
          imports: [
            IonicModule,
            CommonModule,
            FormsModule,
            ExploreContainerComponentModule,
            Tab2PageRoutingModule
          ],
          declarations: [Tab2Page]
        })
      ], Tab2PageModule);
    }
  });

  // src/app/tab3/tab3.page.ts
  var Tab3Page;
  var init_tab3_page = __esm({
    "src/app/tab3/tab3.page.ts"() {
      "use strict";
      init_core();
      Tab3Page = class {
        constructor() {
        }
      };
      Tab3Page = __decorateClass([
        Component({
          selector: "app-tab3",
          templateUrl: "tab3.page.html",
          styleUrls: ["tab3.page.scss"]
        })
      ], Tab3Page);
    }
  });

  // src/app/tab3/tab3-routing.module.ts
  var routes3, Tab3PageRoutingModule;
  var init_tab3_routing_module = __esm({
    "src/app/tab3/tab3-routing.module.ts"() {
      "use strict";
      init_core();
      init_router();
      init_tab3_page();
      routes3 = [
        {
          path: "",
          component: Tab3Page
        }
      ];
      Tab3PageRoutingModule = class {
      };
      Tab3PageRoutingModule = __decorateClass([
        NgModule({
          imports: [RouterModule.forChild(routes3)],
          exports: [RouterModule]
        })
      ], Tab3PageRoutingModule);
    }
  });

  // src/app/tab3/tab3.module.ts
  var tab3_module_exports = {};
  __export(tab3_module_exports, {
    Tab3PageModule: () => Tab3PageModule
  });
  var Tab3PageModule;
  var init_tab3_module = __esm({
    "src/app/tab3/tab3.module.ts"() {
      "use strict";
      init_ionic_angular();
      init_core();
      init_common();
      init_forms();
      init_tab3_page();
      init_explore_container_module();
      init_tab3_routing_module();
      Tab3PageModule = class {
      };
      Tab3PageModule = __decorateClass([
        NgModule({
          imports: [
            IonicModule,
            CommonModule,
            FormsModule,
            ExploreContainerComponentModule,
            Tab3PageRoutingModule
          ],
          declarations: [Tab3Page]
        })
      ], Tab3PageModule);
    }
  });

  // src/app/tabs/tabs-routing.module.ts
  var routes4, TabsPageRoutingModule;
  var init_tabs_routing_module = __esm({
    "src/app/tabs/tabs-routing.module.ts"() {
      "use strict";
      init_core();
      init_router();
      init_tabs_page();
      routes4 = [
        {
          path: "tabs",
          component: TabsPage,
          children: [
            {
              path: "tab1",
              loadChildren: () => Promise.resolve().then(() => (init_tab1_module(), tab1_module_exports)).then((m) => m.Tab1PageModule)
            },
            {
              path: "tab2",
              loadChildren: () => Promise.resolve().then(() => (init_tab2_module(), tab2_module_exports)).then((m) => m.Tab2PageModule)
            },
            {
              path: "tab3",
              loadChildren: () => Promise.resolve().then(() => (init_tab3_module(), tab3_module_exports)).then((m) => m.Tab3PageModule)
            },
            {
              path: "",
              redirectTo: "/tabs/tab1",
              pathMatch: "full"
            }
          ]
        },
        {
          path: "",
          redirectTo: "/tabs/tab1",
          pathMatch: "full"
        }
      ];
      TabsPageRoutingModule = class {
      };
      TabsPageRoutingModule = __decorateClass([
        NgModule({
          imports: [RouterModule.forChild(routes4)]
        })
      ], TabsPageRoutingModule);
    }
  });

  // src/app/tabs/tabs.module.ts
  var tabs_module_exports = {};
  __export(tabs_module_exports, {
    TabsPageModule: () => TabsPageModule
  });
  var TabsPageModule;
  var init_tabs_module = __esm({
    "src/app/tabs/tabs.module.ts"() {
      "use strict";
      init_ionic_angular();
      init_core();
      init_common();
      init_forms();
      init_tabs_routing_module();
      init_tabs_page();
      TabsPageModule = class {
      };
      TabsPageModule = __decorateClass([
        NgModule({
          imports: [
            IonicModule,
            CommonModule,
            FormsModule,
            TabsPageRoutingModule
          ],
          declarations: [TabsPage]
        })
      ], TabsPageModule);
    }
  });

  // src/main.ts
  init_core();

  // node_modules/@angular/compiler/fesm2022/compiler.mjs
  var _SELECTOR_REGEXP = new RegExp(
    `(\\:not\\()|(([\\.\\#]?)[-\\w]+)|(?:\\[([-.\\w*\\\\$]+)(?:=(["']?)([^\\]"']*)\\5)?\\])|(\\))|(\\s*,\\s*)`,
    // 8: ","
    "g"
  );
  var CssSelector = class _CssSelector {
    constructor() {
      this.element = null;
      this.classNames = [];
      this.attrs = [];
      this.notSelectors = [];
    }
    static parse(selector) {
      const results = [];
      const _addResult = (res, cssSel) => {
        if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {
          cssSel.element = "*";
        }
        res.push(cssSel);
      };
      let cssSelector = new _CssSelector();
      let match2;
      let current = cssSelector;
      let inNot = false;
      _SELECTOR_REGEXP.lastIndex = 0;
      while (match2 = _SELECTOR_REGEXP.exec(selector)) {
        if (match2[
          1
          /* SelectorRegexp.NOT */
        ]) {
          if (inNot) {
            throw new Error("Nesting :not in a selector is not allowed");
          }
          inNot = true;
          current = new _CssSelector();
          cssSelector.notSelectors.push(current);
        }
        const tag = match2[
          2
          /* SelectorRegexp.TAG */
        ];
        if (tag) {
          const prefix = match2[
            3
            /* SelectorRegexp.PREFIX */
          ];
          if (prefix === "#") {
            current.addAttribute("id", tag.slice(1));
          } else if (prefix === ".") {
            current.addClassName(tag.slice(1));
          } else {
            current.setElement(tag);
          }
        }
        const attribute2 = match2[
          4
          /* SelectorRegexp.ATTRIBUTE */
        ];
        if (attribute2) {
          current.addAttribute(current.unescapeAttribute(attribute2), match2[
            6
            /* SelectorRegexp.ATTRIBUTE_VALUE */
          ]);
        }
        if (match2[
          7
          /* SelectorRegexp.NOT_END */
        ]) {
          inNot = false;
          current = cssSelector;
        }
        if (match2[
          8
          /* SelectorRegexp.SEPARATOR */
        ]) {
          if (inNot) {
            throw new Error("Multiple selectors in :not are not supported");
          }
          _addResult(results, cssSelector);
          cssSelector = current = new _CssSelector();
        }
      }
      _addResult(results, cssSelector);
      return results;
    }
    /**
     * Unescape `\$` sequences from the CSS attribute selector.
     *
     * This is needed because `$` can have a special meaning in CSS selectors,
     * but we might want to match an attribute that contains `$`.
     * [MDN web link for more
     * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).
     * @param attr the attribute to unescape.
     * @returns the unescaped string.
     */
    unescapeAttribute(attr) {
      let result = "";
      let escaping = false;
      for (let i = 0; i < attr.length; i++) {
        const char = attr.charAt(i);
        if (char === "\\") {
          escaping = true;
          continue;
        }
        if (char === "$" && !escaping) {
          throw new Error(`Error in attribute selector "${attr}". Unescaped "$" is not supported. Please escape with "\\$".`);
        }
        escaping = false;
        result += char;
      }
      return result;
    }
    /**
     * Escape `$` sequences from the CSS attribute selector.
     *
     * This is needed because `$` can have a special meaning in CSS selectors,
     * with this method we are escaping `$` with `\$'.
     * [MDN web link for more
     * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).
     * @param attr the attribute to escape.
     * @returns the escaped string.
     */
    escapeAttribute(attr) {
      return attr.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
    }
    isElementSelector() {
      return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;
    }
    hasElementSelector() {
      return !!this.element;
    }
    setElement(element2 = null) {
      this.element = element2;
    }
    getAttrs() {
      const result = [];
      if (this.classNames.length > 0) {
        result.push("class", this.classNames.join(" "));
      }
      return result.concat(this.attrs);
    }
    addAttribute(name, value = "") {
      this.attrs.push(name, value && value.toLowerCase() || "");
    }
    addClassName(name) {
      this.classNames.push(name.toLowerCase());
    }
    toString() {
      let res = this.element || "";
      if (this.classNames) {
        this.classNames.forEach((klass) => res += `.${klass}`);
      }
      if (this.attrs) {
        for (let i = 0; i < this.attrs.length; i += 2) {
          const name = this.escapeAttribute(this.attrs[i]);
          const value = this.attrs[i + 1];
          res += `[${name}${value ? "=" + value : ""}]`;
        }
      }
      this.notSelectors.forEach((notSelector) => res += `:not(${notSelector})`);
      return res;
    }
  };
  var SelectorMatcher = class _SelectorMatcher {
    constructor() {
      this._elementMap = /* @__PURE__ */ new Map();
      this._elementPartialMap = /* @__PURE__ */ new Map();
      this._classMap = /* @__PURE__ */ new Map();
      this._classPartialMap = /* @__PURE__ */ new Map();
      this._attrValueMap = /* @__PURE__ */ new Map();
      this._attrValuePartialMap = /* @__PURE__ */ new Map();
      this._listContexts = [];
    }
    static createNotMatcher(notSelectors) {
      const notMatcher = new _SelectorMatcher();
      notMatcher.addSelectables(notSelectors, null);
      return notMatcher;
    }
    addSelectables(cssSelectors, callbackCtxt) {
      let listContext = null;
      if (cssSelectors.length > 1) {
        listContext = new SelectorListContext(cssSelectors);
        this._listContexts.push(listContext);
      }
      for (let i = 0; i < cssSelectors.length; i++) {
        this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
      }
    }
    /**
     * Add an object that can be found later on by calling `match`.
     * @param cssSelector A css selector
     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
     */
    _addSelectable(cssSelector, callbackCtxt, listContext) {
      let matcher = this;
      const element2 = cssSelector.element;
      const classNames = cssSelector.classNames;
      const attrs = cssSelector.attrs;
      const selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
      if (element2) {
        const isTerminal = attrs.length === 0 && classNames.length === 0;
        if (isTerminal) {
          this._addTerminal(matcher._elementMap, element2, selectable);
        } else {
          matcher = this._addPartial(matcher._elementPartialMap, element2);
        }
      }
      if (classNames) {
        for (let i = 0; i < classNames.length; i++) {
          const isTerminal = attrs.length === 0 && i === classNames.length - 1;
          const className = classNames[i];
          if (isTerminal) {
            this._addTerminal(matcher._classMap, className, selectable);
          } else {
            matcher = this._addPartial(matcher._classPartialMap, className);
          }
        }
      }
      if (attrs) {
        for (let i = 0; i < attrs.length; i += 2) {
          const isTerminal = i === attrs.length - 2;
          const name = attrs[i];
          const value = attrs[i + 1];
          if (isTerminal) {
            const terminalMap = matcher._attrValueMap;
            let terminalValuesMap = terminalMap.get(name);
            if (!terminalValuesMap) {
              terminalValuesMap = /* @__PURE__ */ new Map();
              terminalMap.set(name, terminalValuesMap);
            }
            this._addTerminal(terminalValuesMap, value, selectable);
          } else {
            const partialMap = matcher._attrValuePartialMap;
            let partialValuesMap = partialMap.get(name);
            if (!partialValuesMap) {
              partialValuesMap = /* @__PURE__ */ new Map();
              partialMap.set(name, partialValuesMap);
            }
            matcher = this._addPartial(partialValuesMap, value);
          }
        }
      }
    }
    _addTerminal(map3, name, selectable) {
      let terminalList = map3.get(name);
      if (!terminalList) {
        terminalList = [];
        map3.set(name, terminalList);
      }
      terminalList.push(selectable);
    }
    _addPartial(map3, name) {
      let matcher = map3.get(name);
      if (!matcher) {
        matcher = new _SelectorMatcher();
        map3.set(name, matcher);
      }
      return matcher;
    }
    /**
     * Find the objects that have been added via `addSelectable`
     * whose css selector is contained in the given css selector.
     * @param cssSelector A css selector
     * @param matchedCallback This callback will be called with the object handed into `addSelectable`
     * @return boolean true if a match was found
     */
    match(cssSelector, matchedCallback) {
      let result = false;
      const element2 = cssSelector.element;
      const classNames = cssSelector.classNames;
      const attrs = cssSelector.attrs;
      for (let i = 0; i < this._listContexts.length; i++) {
        this._listContexts[i].alreadyMatched = false;
      }
      result = this._matchTerminal(this._elementMap, element2, cssSelector, matchedCallback) || result;
      result = this._matchPartial(this._elementPartialMap, element2, cssSelector, matchedCallback) || result;
      if (classNames) {
        for (let i = 0; i < classNames.length; i++) {
          const className = classNames[i];
          result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
          result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
        }
      }
      if (attrs) {
        for (let i = 0; i < attrs.length; i += 2) {
          const name = attrs[i];
          const value = attrs[i + 1];
          const terminalValuesMap = this._attrValueMap.get(name);
          if (value) {
            result = this._matchTerminal(terminalValuesMap, "", cssSelector, matchedCallback) || result;
          }
          result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
          const partialValuesMap = this._attrValuePartialMap.get(name);
          if (value) {
            result = this._matchPartial(partialValuesMap, "", cssSelector, matchedCallback) || result;
          }
          result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
        }
      }
      return result;
    }
    /** @internal */
    _matchTerminal(map3, name, cssSelector, matchedCallback) {
      if (!map3 || typeof name !== "string") {
        return false;
      }
      let selectables = map3.get(name) || [];
      const starSelectables = map3.get("*");
      if (starSelectables) {
        selectables = selectables.concat(starSelectables);
      }
      if (selectables.length === 0) {
        return false;
      }
      let selectable;
      let result = false;
      for (let i = 0; i < selectables.length; i++) {
        selectable = selectables[i];
        result = selectable.finalize(cssSelector, matchedCallback) || result;
      }
      return result;
    }
    /** @internal */
    _matchPartial(map3, name, cssSelector, matchedCallback) {
      if (!map3 || typeof name !== "string") {
        return false;
      }
      const nestedSelector = map3.get(name);
      if (!nestedSelector) {
        return false;
      }
      return nestedSelector.match(cssSelector, matchedCallback);
    }
  };
  var SelectorListContext = class {
    constructor(selectors) {
      this.selectors = selectors;
      this.alreadyMatched = false;
    }
  };
  var SelectorContext = class {
    constructor(selector, cbContext, listContext) {
      this.selector = selector;
      this.cbContext = cbContext;
      this.listContext = listContext;
      this.notSelectors = selector.notSelectors;
    }
    finalize(cssSelector, callback) {
      let result = true;
      if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
        const notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
        result = !notMatcher.match(cssSelector, null);
      }
      if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
        if (this.listContext) {
          this.listContext.alreadyMatched = true;
        }
        callback(this.selector, this.cbContext);
      }
      return result;
    }
  };
  var ViewEncapsulation2;
  (function(ViewEncapsulation3) {
    ViewEncapsulation3[ViewEncapsulation3["Emulated"] = 0] = "Emulated";
    ViewEncapsulation3[ViewEncapsulation3["None"] = 2] = "None";
    ViewEncapsulation3[ViewEncapsulation3["ShadowDom"] = 3] = "ShadowDom";
  })(ViewEncapsulation2 || (ViewEncapsulation2 = {}));
  var ChangeDetectionStrategy2;
  (function(ChangeDetectionStrategy3) {
    ChangeDetectionStrategy3[ChangeDetectionStrategy3["OnPush"] = 0] = "OnPush";
    ChangeDetectionStrategy3[ChangeDetectionStrategy3["Default"] = 1] = "Default";
  })(ChangeDetectionStrategy2 || (ChangeDetectionStrategy2 = {}));
  var InputFlags2;
  (function(InputFlags3) {
    InputFlags3[InputFlags3["None"] = 0] = "None";
    InputFlags3[InputFlags3["SignalBased"] = 1] = "SignalBased";
    InputFlags3[InputFlags3["HasDecoratorInputTransform"] = 2] = "HasDecoratorInputTransform";
  })(InputFlags2 || (InputFlags2 = {}));
  var CUSTOM_ELEMENTS_SCHEMA2 = {
    name: "custom-elements"
  };
  var NO_ERRORS_SCHEMA2 = {
    name: "no-errors-schema"
  };
  var SecurityContext2;
  (function(SecurityContext3) {
    SecurityContext3[SecurityContext3["NONE"] = 0] = "NONE";
    SecurityContext3[SecurityContext3["HTML"] = 1] = "HTML";
    SecurityContext3[SecurityContext3["STYLE"] = 2] = "STYLE";
    SecurityContext3[SecurityContext3["SCRIPT"] = 3] = "SCRIPT";
    SecurityContext3[SecurityContext3["URL"] = 4] = "URL";
    SecurityContext3[SecurityContext3["RESOURCE_URL"] = 5] = "RESOURCE_URL";
  })(SecurityContext2 || (SecurityContext2 = {}));
  var MissingTranslationStrategy2;
  (function(MissingTranslationStrategy3) {
    MissingTranslationStrategy3[MissingTranslationStrategy3["Error"] = 0] = "Error";
    MissingTranslationStrategy3[MissingTranslationStrategy3["Warning"] = 1] = "Warning";
    MissingTranslationStrategy3[MissingTranslationStrategy3["Ignore"] = 2] = "Ignore";
  })(MissingTranslationStrategy2 || (MissingTranslationStrategy2 = {}));
  function parserSelectorToSimpleSelector(selector) {
    const classes = selector.classNames && selector.classNames.length ? [8, ...selector.classNames] : [];
    const elementName = selector.element && selector.element !== "*" ? selector.element : "";
    return [elementName, ...selector.attrs, ...classes];
  }
  function parserSelectorToNegativeSelector(selector) {
    const classes = selector.classNames && selector.classNames.length ? [8, ...selector.classNames] : [];
    if (selector.element) {
      return [
        1 | 4,
        selector.element,
        ...selector.attrs,
        ...classes
      ];
    } else if (selector.attrs.length) {
      return [1 | 2, ...selector.attrs, ...classes];
    } else {
      return selector.classNames && selector.classNames.length ? [1 | 8, ...selector.classNames] : [];
    }
  }
  function parserSelectorToR3Selector(selector) {
    const positive = parserSelectorToSimpleSelector(selector);
    const negative = selector.notSelectors && selector.notSelectors.length ? selector.notSelectors.map((notSelector) => parserSelectorToNegativeSelector(notSelector)) : [];
    return positive.concat(...negative);
  }
  function parseSelectorToR3Selector(selector) {
    return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];
  }
  var textEncoder;
  function computeDigest(message) {
    return sha1(serializeNodes(message.nodes).join("") + `[${message.meaning}]`);
  }
  function decimalDigest(message) {
    return message.id || computeDecimalDigest(message);
  }
  function computeDecimalDigest(message) {
    const visitor = new _SerializerIgnoreIcuExpVisitor();
    const parts = message.nodes.map((a) => a.visit(visitor, null));
    return computeMsgId(parts.join(""), message.meaning);
  }
  var _SerializerVisitor = class {
    visitText(text2, context2) {
      return text2.value;
    }
    visitContainer(container, context2) {
      return `[${container.children.map((child) => child.visit(this)).join(", ")}]`;
    }
    visitIcu(icu, context2) {
      const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
      return `{${icu.expression}, ${icu.type}, ${strCases.join(", ")}}`;
    }
    visitTagPlaceholder(ph, context2) {
      return ph.isVoid ? `<ph tag name="${ph.startName}"/>` : `<ph tag name="${ph.startName}">${ph.children.map((child) => child.visit(this)).join(", ")}</ph name="${ph.closeName}">`;
    }
    visitPlaceholder(ph, context2) {
      return ph.value ? `<ph name="${ph.name}">${ph.value}</ph>` : `<ph name="${ph.name}"/>`;
    }
    visitIcuPlaceholder(ph, context2) {
      return `<ph icu name="${ph.name}">${ph.value.visit(this)}</ph>`;
    }
    visitBlockPlaceholder(ph, context2) {
      return `<ph block name="${ph.startName}">${ph.children.map((child) => child.visit(this)).join(", ")}</ph name="${ph.closeName}">`;
    }
  };
  var serializerVisitor$1 = new _SerializerVisitor();
  function serializeNodes(nodes) {
    return nodes.map((a) => a.visit(serializerVisitor$1, null));
  }
  var _SerializerIgnoreIcuExpVisitor = class extends _SerializerVisitor {
    visitIcu(icu, context2) {
      let strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
      return `{${icu.type}, ${strCases.join(", ")}}`;
    }
  };
  function sha1(str) {
    textEncoder ??= new TextEncoder();
    const utf8 = [...textEncoder.encode(str)];
    const words32 = bytesToWords32(utf8, Endian.Big);
    const len = utf8.length * 8;
    const w = new Uint32Array(80);
    let a = 1732584193, b = 4023233417, c = 2562383102, d = 271733878, e2 = 3285377520;
    words32[len >> 5] |= 128 << 24 - len % 32;
    words32[(len + 64 >> 9 << 4) + 15] = len;
    for (let i = 0; i < words32.length; i += 16) {
      const h0 = a, h1 = b, h2 = c, h3 = d, h4 = e2;
      for (let j = 0; j < 80; j++) {
        if (j < 16) {
          w[j] = words32[i + j];
        } else {
          w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
        }
        const fkVal = fk(j, b, c, d);
        const f = fkVal[0];
        const k = fkVal[1];
        const temp = [rol32(a, 5), f, e2, k, w[j]].reduce(add32);
        e2 = d;
        d = c;
        c = rol32(b, 30);
        b = a;
        a = temp;
      }
      a = add32(a, h0);
      b = add32(b, h1);
      c = add32(c, h2);
      d = add32(d, h3);
      e2 = add32(e2, h4);
    }
    return toHexU32(a) + toHexU32(b) + toHexU32(c) + toHexU32(d) + toHexU32(e2);
  }
  function toHexU32(value) {
    return (value >>> 0).toString(16).padStart(8, "0");
  }
  function fk(index, b, c, d) {
    if (index < 20) {
      return [b & c | ~b & d, 1518500249];
    }
    if (index < 40) {
      return [b ^ c ^ d, 1859775393];
    }
    if (index < 60) {
      return [b & c | b & d | c & d, 2400959708];
    }
    return [b ^ c ^ d, 3395469782];
  }
  function fingerprint(str) {
    textEncoder ??= new TextEncoder();
    const utf8 = textEncoder.encode(str);
    const view = new DataView(utf8.buffer, utf8.byteOffset, utf8.byteLength);
    let hi = hash32(view, utf8.length, 0);
    let lo = hash32(view, utf8.length, 102072);
    if (hi == 0 && (lo == 0 || lo == 1)) {
      hi = hi ^ 319790063;
      lo = lo ^ -1801410264;
    }
    return BigInt.asUintN(32, BigInt(hi)) << BigInt(32) | BigInt.asUintN(32, BigInt(lo));
  }
  function computeMsgId(msg, meaning = "") {
    let msgFingerprint = fingerprint(msg);
    if (meaning) {
      msgFingerprint = BigInt.asUintN(64, msgFingerprint << BigInt(1)) | msgFingerprint >> BigInt(63) & BigInt(1);
      msgFingerprint += fingerprint(meaning);
    }
    return BigInt.asUintN(63, msgFingerprint).toString();
  }
  function hash32(view, length, c) {
    let a = 2654435769, b = 2654435769;
    let index = 0;
    const end = length - 12;
    for (; index <= end; index += 12) {
      a += view.getUint32(index, true);
      b += view.getUint32(index + 4, true);
      c += view.getUint32(index + 8, true);
      const res = mix(a, b, c);
      a = res[0], b = res[1], c = res[2];
    }
    const remainder = length - index;
    c += length;
    if (remainder >= 4) {
      a += view.getUint32(index, true);
      index += 4;
      if (remainder >= 8) {
        b += view.getUint32(index, true);
        index += 4;
        if (remainder >= 9) {
          c += view.getUint8(index++) << 8;
        }
        if (remainder >= 10) {
          c += view.getUint8(index++) << 16;
        }
        if (remainder === 11) {
          c += view.getUint8(index++) << 24;
        }
      } else {
        if (remainder >= 5) {
          b += view.getUint8(index++);
        }
        if (remainder >= 6) {
          b += view.getUint8(index++) << 8;
        }
        if (remainder === 7) {
          b += view.getUint8(index++) << 16;
        }
      }
    } else {
      if (remainder >= 1) {
        a += view.getUint8(index++);
      }
      if (remainder >= 2) {
        a += view.getUint8(index++) << 8;
      }
      if (remainder === 3) {
        a += view.getUint8(index++) << 16;
      }
    }
    return mix(a, b, c)[2];
  }
  function mix(a, b, c) {
    a -= b;
    a -= c;
    a ^= c >>> 13;
    b -= c;
    b -= a;
    b ^= a << 8;
    c -= a;
    c -= b;
    c ^= b >>> 13;
    a -= b;
    a -= c;
    a ^= c >>> 12;
    b -= c;
    b -= a;
    b ^= a << 16;
    c -= a;
    c -= b;
    c ^= b >>> 5;
    a -= b;
    a -= c;
    a ^= c >>> 3;
    b -= c;
    b -= a;
    b ^= a << 10;
    c -= a;
    c -= b;
    c ^= b >>> 15;
    return [a, b, c];
  }
  var Endian;
  (function(Endian2) {
    Endian2[Endian2["Little"] = 0] = "Little";
    Endian2[Endian2["Big"] = 1] = "Big";
  })(Endian || (Endian = {}));
  function add32(a, b) {
    return add32to64(a, b)[1];
  }
  function add32to64(a, b) {
    const low = (a & 65535) + (b & 65535);
    const high = (a >>> 16) + (b >>> 16) + (low >>> 16);
    return [high >>> 16, high << 16 | low & 65535];
  }
  function rol32(a, count) {
    return a << count | a >>> 32 - count;
  }
  function bytesToWords32(bytes, endian) {
    const size = bytes.length + 3 >>> 2;
    const words32 = [];
    for (let i = 0; i < size; i++) {
      words32[i] = wordAt(bytes, i * 4, endian);
    }
    return words32;
  }
  function byteAt(bytes, index) {
    return index >= bytes.length ? 0 : bytes[index];
  }
  function wordAt(bytes, index, endian) {
    let word = 0;
    if (endian === Endian.Big) {
      for (let i = 0; i < 4; i++) {
        word += byteAt(bytes, index + i) << 24 - 8 * i;
      }
    } else {
      for (let i = 0; i < 4; i++) {
        word += byteAt(bytes, index + i) << 8 * i;
      }
    }
    return word;
  }
  var TypeModifier;
  (function(TypeModifier2) {
    TypeModifier2[TypeModifier2["None"] = 0] = "None";
    TypeModifier2[TypeModifier2["Const"] = 1] = "Const";
  })(TypeModifier || (TypeModifier = {}));
  var Type2 = class {
    constructor(modifiers = TypeModifier.None) {
      this.modifiers = modifiers;
    }
    hasModifier(modifier) {
      return (this.modifiers & modifier) !== 0;
    }
  };
  var BuiltinTypeName;
  (function(BuiltinTypeName2) {
    BuiltinTypeName2[BuiltinTypeName2["Dynamic"] = 0] = "Dynamic";
    BuiltinTypeName2[BuiltinTypeName2["Bool"] = 1] = "Bool";
    BuiltinTypeName2[BuiltinTypeName2["String"] = 2] = "String";
    BuiltinTypeName2[BuiltinTypeName2["Int"] = 3] = "Int";
    BuiltinTypeName2[BuiltinTypeName2["Number"] = 4] = "Number";
    BuiltinTypeName2[BuiltinTypeName2["Function"] = 5] = "Function";
    BuiltinTypeName2[BuiltinTypeName2["Inferred"] = 6] = "Inferred";
    BuiltinTypeName2[BuiltinTypeName2["None"] = 7] = "None";
  })(BuiltinTypeName || (BuiltinTypeName = {}));
  var BuiltinType = class extends Type2 {
    constructor(name, modifiers) {
      super(modifiers);
      this.name = name;
    }
    visitType(visitor, context2) {
      return visitor.visitBuiltinType(this, context2);
    }
  };
  var ExpressionType = class extends Type2 {
    constructor(value, modifiers, typeParams = null) {
      super(modifiers);
      this.value = value;
      this.typeParams = typeParams;
    }
    visitType(visitor, context2) {
      return visitor.visitExpressionType(this, context2);
    }
  };
  var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
  var INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);
  var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
  var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
  var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
  var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
  var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
  var NONE_TYPE = new BuiltinType(BuiltinTypeName.None);
  var UnaryOperator;
  (function(UnaryOperator2) {
    UnaryOperator2[UnaryOperator2["Minus"] = 0] = "Minus";
    UnaryOperator2[UnaryOperator2["Plus"] = 1] = "Plus";
  })(UnaryOperator || (UnaryOperator = {}));
  var BinaryOperator;
  (function(BinaryOperator2) {
    BinaryOperator2[BinaryOperator2["Equals"] = 0] = "Equals";
    BinaryOperator2[BinaryOperator2["NotEquals"] = 1] = "NotEquals";
    BinaryOperator2[BinaryOperator2["Identical"] = 2] = "Identical";
    BinaryOperator2[BinaryOperator2["NotIdentical"] = 3] = "NotIdentical";
    BinaryOperator2[BinaryOperator2["Minus"] = 4] = "Minus";
    BinaryOperator2[BinaryOperator2["Plus"] = 5] = "Plus";
    BinaryOperator2[BinaryOperator2["Divide"] = 6] = "Divide";
    BinaryOperator2[BinaryOperator2["Multiply"] = 7] = "Multiply";
    BinaryOperator2[BinaryOperator2["Modulo"] = 8] = "Modulo";
    BinaryOperator2[BinaryOperator2["And"] = 9] = "And";
    BinaryOperator2[BinaryOperator2["Or"] = 10] = "Or";
    BinaryOperator2[BinaryOperator2["BitwiseOr"] = 11] = "BitwiseOr";
    BinaryOperator2[BinaryOperator2["BitwiseAnd"] = 12] = "BitwiseAnd";
    BinaryOperator2[BinaryOperator2["Lower"] = 13] = "Lower";
    BinaryOperator2[BinaryOperator2["LowerEquals"] = 14] = "LowerEquals";
    BinaryOperator2[BinaryOperator2["Bigger"] = 15] = "Bigger";
    BinaryOperator2[BinaryOperator2["BiggerEquals"] = 16] = "BiggerEquals";
    BinaryOperator2[BinaryOperator2["NullishCoalesce"] = 17] = "NullishCoalesce";
  })(BinaryOperator || (BinaryOperator = {}));
  function nullSafeIsEquivalent(base, other) {
    if (base == null || other == null) {
      return base == other;
    }
    return base.isEquivalent(other);
  }
  function areAllEquivalentPredicate(base, other, equivalentPredicate) {
    const len = base.length;
    if (len !== other.length) {
      return false;
    }
    for (let i = 0; i < len; i++) {
      if (!equivalentPredicate(base[i], other[i])) {
        return false;
      }
    }
    return true;
  }
  function areAllEquivalent(base, other) {
    return areAllEquivalentPredicate(base, other, (baseElement2, otherElement) => baseElement2.isEquivalent(otherElement));
  }
  var Expression = class {
    constructor(type, sourceSpan) {
      this.type = type || null;
      this.sourceSpan = sourceSpan || null;
    }
    prop(name, sourceSpan) {
      return new ReadPropExpr(this, name, null, sourceSpan);
    }
    key(index, type, sourceSpan) {
      return new ReadKeyExpr(this, index, type, sourceSpan);
    }
    callFn(params, sourceSpan, pure) {
      return new InvokeFunctionExpr(this, params, null, sourceSpan, pure);
    }
    instantiate(params, type, sourceSpan) {
      return new InstantiateExpr(this, params, type, sourceSpan);
    }
    conditional(trueCase, falseCase = null, sourceSpan) {
      return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);
    }
    equals(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);
    }
    notEquals(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);
    }
    identical(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);
    }
    notIdentical(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);
    }
    minus(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);
    }
    plus(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);
    }
    divide(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);
    }
    multiply(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);
    }
    modulo(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);
    }
    and(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);
    }
    bitwiseOr(rhs, sourceSpan, parens = true) {
      return new BinaryOperatorExpr(BinaryOperator.BitwiseOr, this, rhs, null, sourceSpan, parens);
    }
    bitwiseAnd(rhs, sourceSpan, parens = true) {
      return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);
    }
    or(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);
    }
    lower(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);
    }
    lowerEquals(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);
    }
    bigger(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);
    }
    biggerEquals(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);
    }
    isBlank(sourceSpan) {
      return this.equals(TYPED_NULL_EXPR, sourceSpan);
    }
    nullishCoalesce(rhs, sourceSpan) {
      return new BinaryOperatorExpr(BinaryOperator.NullishCoalesce, this, rhs, null, sourceSpan);
    }
    toStmt() {
      return new ExpressionStatement(this, null);
    }
  };
  var ReadVarExpr = class _ReadVarExpr extends Expression {
    constructor(name, type, sourceSpan) {
      super(type, sourceSpan);
      this.name = name;
    }
    isEquivalent(e2) {
      return e2 instanceof _ReadVarExpr && this.name === e2.name;
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitReadVarExpr(this, context2);
    }
    clone() {
      return new _ReadVarExpr(this.name, this.type, this.sourceSpan);
    }
    set(value) {
      return new WriteVarExpr(this.name, value, null, this.sourceSpan);
    }
  };
  var TypeofExpr = class _TypeofExpr extends Expression {
    constructor(expr, type, sourceSpan) {
      super(type, sourceSpan);
      this.expr = expr;
    }
    visitExpression(visitor, context2) {
      return visitor.visitTypeofExpr(this, context2);
    }
    isEquivalent(e2) {
      return e2 instanceof _TypeofExpr && e2.expr.isEquivalent(this.expr);
    }
    isConstant() {
      return this.expr.isConstant();
    }
    clone() {
      return new _TypeofExpr(this.expr.clone());
    }
  };
  var WrappedNodeExpr = class _WrappedNodeExpr extends Expression {
    constructor(node, type, sourceSpan) {
      super(type, sourceSpan);
      this.node = node;
    }
    isEquivalent(e2) {
      return e2 instanceof _WrappedNodeExpr && this.node === e2.node;
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitWrappedNodeExpr(this, context2);
    }
    clone() {
      return new _WrappedNodeExpr(this.node, this.type, this.sourceSpan);
    }
  };
  var WriteVarExpr = class _WriteVarExpr extends Expression {
    constructor(name, value, type, sourceSpan) {
      super(type || value.type, sourceSpan);
      this.name = name;
      this.value = value;
    }
    isEquivalent(e2) {
      return e2 instanceof _WriteVarExpr && this.name === e2.name && this.value.isEquivalent(e2.value);
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitWriteVarExpr(this, context2);
    }
    clone() {
      return new _WriteVarExpr(this.name, this.value.clone(), this.type, this.sourceSpan);
    }
    toDeclStmt(type, modifiers) {
      return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);
    }
    toConstDecl() {
      return this.toDeclStmt(INFERRED_TYPE, StmtModifier.Final);
    }
  };
  var WriteKeyExpr = class _WriteKeyExpr extends Expression {
    constructor(receiver, index, value, type, sourceSpan) {
      super(type || value.type, sourceSpan);
      this.receiver = receiver;
      this.index = index;
      this.value = value;
    }
    isEquivalent(e2) {
      return e2 instanceof _WriteKeyExpr && this.receiver.isEquivalent(e2.receiver) && this.index.isEquivalent(e2.index) && this.value.isEquivalent(e2.value);
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitWriteKeyExpr(this, context2);
    }
    clone() {
      return new _WriteKeyExpr(this.receiver.clone(), this.index.clone(), this.value.clone(), this.type, this.sourceSpan);
    }
  };
  var WritePropExpr = class _WritePropExpr extends Expression {
    constructor(receiver, name, value, type, sourceSpan) {
      super(type || value.type, sourceSpan);
      this.receiver = receiver;
      this.name = name;
      this.value = value;
    }
    isEquivalent(e2) {
      return e2 instanceof _WritePropExpr && this.receiver.isEquivalent(e2.receiver) && this.name === e2.name && this.value.isEquivalent(e2.value);
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitWritePropExpr(this, context2);
    }
    clone() {
      return new _WritePropExpr(this.receiver.clone(), this.name, this.value.clone(), this.type, this.sourceSpan);
    }
  };
  var InvokeFunctionExpr = class _InvokeFunctionExpr extends Expression {
    constructor(fn2, args, type, sourceSpan, pure = false) {
      super(type, sourceSpan);
      this.fn = fn2;
      this.args = args;
      this.pure = pure;
    }
    // An alias for fn, which allows other logic to handle calls and property reads together.
    get receiver() {
      return this.fn;
    }
    isEquivalent(e2) {
      return e2 instanceof _InvokeFunctionExpr && this.fn.isEquivalent(e2.fn) && areAllEquivalent(this.args, e2.args) && this.pure === e2.pure;
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitInvokeFunctionExpr(this, context2);
    }
    clone() {
      return new _InvokeFunctionExpr(this.fn.clone(), this.args.map((arg) => arg.clone()), this.type, this.sourceSpan, this.pure);
    }
  };
  var TaggedTemplateExpr = class _TaggedTemplateExpr extends Expression {
    constructor(tag, template2, type, sourceSpan) {
      super(type, sourceSpan);
      this.tag = tag;
      this.template = template2;
    }
    isEquivalent(e2) {
      return e2 instanceof _TaggedTemplateExpr && this.tag.isEquivalent(e2.tag) && areAllEquivalentPredicate(this.template.elements, e2.template.elements, (a, b) => a.text === b.text) && areAllEquivalent(this.template.expressions, e2.template.expressions);
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitTaggedTemplateExpr(this, context2);
    }
    clone() {
      return new _TaggedTemplateExpr(this.tag.clone(), this.template.clone(), this.type, this.sourceSpan);
    }
  };
  var InstantiateExpr = class _InstantiateExpr extends Expression {
    constructor(classExpr, args, type, sourceSpan) {
      super(type, sourceSpan);
      this.classExpr = classExpr;
      this.args = args;
    }
    isEquivalent(e2) {
      return e2 instanceof _InstantiateExpr && this.classExpr.isEquivalent(e2.classExpr) && areAllEquivalent(this.args, e2.args);
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitInstantiateExpr(this, context2);
    }
    clone() {
      return new _InstantiateExpr(this.classExpr.clone(), this.args.map((arg) => arg.clone()), this.type, this.sourceSpan);
    }
  };
  var LiteralExpr = class _LiteralExpr extends Expression {
    constructor(value, type, sourceSpan) {
      super(type, sourceSpan);
      this.value = value;
    }
    isEquivalent(e2) {
      return e2 instanceof _LiteralExpr && this.value === e2.value;
    }
    isConstant() {
      return true;
    }
    visitExpression(visitor, context2) {
      return visitor.visitLiteralExpr(this, context2);
    }
    clone() {
      return new _LiteralExpr(this.value, this.type, this.sourceSpan);
    }
  };
  var TemplateLiteral = class _TemplateLiteral {
    constructor(elements, expressions) {
      this.elements = elements;
      this.expressions = expressions;
    }
    clone() {
      return new _TemplateLiteral(this.elements.map((el) => el.clone()), this.expressions.map((expr) => expr.clone()));
    }
  };
  var TemplateLiteralElement = class _TemplateLiteralElement {
    constructor(text2, sourceSpan, rawText) {
      this.text = text2;
      this.sourceSpan = sourceSpan;
      this.rawText = rawText ?? sourceSpan?.toString() ?? escapeForTemplateLiteral(escapeSlashes(text2));
    }
    clone() {
      return new _TemplateLiteralElement(this.text, this.sourceSpan, this.rawText);
    }
  };
  var LiteralPiece = class {
    constructor(text2, sourceSpan) {
      this.text = text2;
      this.sourceSpan = sourceSpan;
    }
  };
  var PlaceholderPiece = class {
    /**
     * Create a new instance of a `PlaceholderPiece`.
     *
     * @param text the name of this placeholder (e.g. `PH_1`).
     * @param sourceSpan the location of this placeholder in its localized message the source code.
     * @param associatedMessage reference to another message that this placeholder is associated with.
     * The `associatedMessage` is mainly used to provide a relationship to an ICU message that has
     * been extracted out from the message containing the placeholder.
     */
    constructor(text2, sourceSpan, associatedMessage) {
      this.text = text2;
      this.sourceSpan = sourceSpan;
      this.associatedMessage = associatedMessage;
    }
  };
  var MEANING_SEPARATOR$1 = "|";
  var ID_SEPARATOR$1 = "@@";
  var LEGACY_ID_INDICATOR = "\u241F";
  var LocalizedString = class _LocalizedString extends Expression {
    constructor(metaBlock, messageParts, placeHolderNames, expressions, sourceSpan) {
      super(STRING_TYPE, sourceSpan);
      this.metaBlock = metaBlock;
      this.messageParts = messageParts;
      this.placeHolderNames = placeHolderNames;
      this.expressions = expressions;
    }
    isEquivalent(e2) {
      return false;
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitLocalizedString(this, context2);
    }
    clone() {
      return new _LocalizedString(this.metaBlock, this.messageParts, this.placeHolderNames, this.expressions.map((expr) => expr.clone()), this.sourceSpan);
    }
    /**
     * Serialize the given `meta` and `messagePart` into "cooked" and "raw" strings that can be used
     * in a `$localize` tagged string. The format of the metadata is the same as that parsed by
     * `parseI18nMeta()`.
     *
     * @param meta The metadata to serialize
     * @param messagePart The first part of the tagged string
     */
    serializeI18nHead() {
      let metaBlock = this.metaBlock.description || "";
      if (this.metaBlock.meaning) {
        metaBlock = `${this.metaBlock.meaning}${MEANING_SEPARATOR$1}${metaBlock}`;
      }
      if (this.metaBlock.customId) {
        metaBlock = `${metaBlock}${ID_SEPARATOR$1}${this.metaBlock.customId}`;
      }
      if (this.metaBlock.legacyIds) {
        this.metaBlock.legacyIds.forEach((legacyId) => {
          metaBlock = `${metaBlock}${LEGACY_ID_INDICATOR}${legacyId}`;
        });
      }
      return createCookedRawString(metaBlock, this.messageParts[0].text, this.getMessagePartSourceSpan(0));
    }
    getMessagePartSourceSpan(i) {
      return this.messageParts[i]?.sourceSpan ?? this.sourceSpan;
    }
    getPlaceholderSourceSpan(i) {
      return this.placeHolderNames[i]?.sourceSpan ?? this.expressions[i]?.sourceSpan ?? this.sourceSpan;
    }
    /**
     * Serialize the given `placeholderName` and `messagePart` into "cooked" and "raw" strings that
     * can be used in a `$localize` tagged string.
     *
     * The format is `:<placeholder-name>[@@<associated-id>]:`.
     *
     * The `associated-id` is the message id of the (usually an ICU) message to which this placeholder
     * refers.
     *
     * @param partIndex The index of the message part to serialize.
     */
    serializeI18nTemplatePart(partIndex) {
      const placeholder = this.placeHolderNames[partIndex - 1];
      const messagePart = this.messageParts[partIndex];
      let metaBlock = placeholder.text;
      if (placeholder.associatedMessage?.legacyIds.length === 0) {
        metaBlock += `${ID_SEPARATOR$1}${computeMsgId(placeholder.associatedMessage.messageString, placeholder.associatedMessage.meaning)}`;
      }
      return createCookedRawString(metaBlock, messagePart.text, this.getMessagePartSourceSpan(partIndex));
    }
  };
  var escapeSlashes = (str) => str.replace(/\\/g, "\\\\");
  var escapeStartingColon = (str) => str.replace(/^:/, "\\:");
  var escapeColons = (str) => str.replace(/:/g, "\\:");
  var escapeForTemplateLiteral = (str) => str.replace(/`/g, "\\`").replace(/\${/g, "$\\{");
  function createCookedRawString(metaBlock, messagePart, range) {
    if (metaBlock === "") {
      return {
        cooked: messagePart,
        raw: escapeForTemplateLiteral(escapeStartingColon(escapeSlashes(messagePart))),
        range
      };
    } else {
      return {
        cooked: `:${metaBlock}:${messagePart}`,
        raw: escapeForTemplateLiteral(`:${escapeColons(escapeSlashes(metaBlock))}:${escapeSlashes(messagePart)}`),
        range
      };
    }
  }
  var ExternalExpr = class _ExternalExpr extends Expression {
    constructor(value, type, typeParams = null, sourceSpan) {
      super(type, sourceSpan);
      this.value = value;
      this.typeParams = typeParams;
    }
    isEquivalent(e2) {
      return e2 instanceof _ExternalExpr && this.value.name === e2.value.name && this.value.moduleName === e2.value.moduleName && this.value.runtime === e2.value.runtime;
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitExternalExpr(this, context2);
    }
    clone() {
      return new _ExternalExpr(this.value, this.type, this.typeParams, this.sourceSpan);
    }
  };
  var ConditionalExpr = class _ConditionalExpr extends Expression {
    constructor(condition, trueCase, falseCase = null, type, sourceSpan) {
      super(type || trueCase.type, sourceSpan);
      this.condition = condition;
      this.falseCase = falseCase;
      this.trueCase = trueCase;
    }
    isEquivalent(e2) {
      return e2 instanceof _ConditionalExpr && this.condition.isEquivalent(e2.condition) && this.trueCase.isEquivalent(e2.trueCase) && nullSafeIsEquivalent(this.falseCase, e2.falseCase);
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitConditionalExpr(this, context2);
    }
    clone() {
      return new _ConditionalExpr(this.condition.clone(), this.trueCase.clone(), this.falseCase?.clone(), this.type, this.sourceSpan);
    }
  };
  var DynamicImportExpr = class _DynamicImportExpr extends Expression {
    constructor(url, sourceSpan) {
      super(null, sourceSpan);
      this.url = url;
    }
    isEquivalent(e2) {
      return e2 instanceof _DynamicImportExpr && this.url === e2.url;
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitDynamicImportExpr(this, context2);
    }
    clone() {
      return new _DynamicImportExpr(this.url, this.sourceSpan);
    }
  };
  var NotExpr = class _NotExpr extends Expression {
    constructor(condition, sourceSpan) {
      super(BOOL_TYPE, sourceSpan);
      this.condition = condition;
    }
    isEquivalent(e2) {
      return e2 instanceof _NotExpr && this.condition.isEquivalent(e2.condition);
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitNotExpr(this, context2);
    }
    clone() {
      return new _NotExpr(this.condition.clone(), this.sourceSpan);
    }
  };
  var FnParam = class _FnParam {
    constructor(name, type = null) {
      this.name = name;
      this.type = type;
    }
    isEquivalent(param) {
      return this.name === param.name;
    }
    clone() {
      return new _FnParam(this.name, this.type);
    }
  };
  var FunctionExpr = class _FunctionExpr extends Expression {
    constructor(params, statements, type, sourceSpan, name) {
      super(type, sourceSpan);
      this.params = params;
      this.statements = statements;
      this.name = name;
    }
    isEquivalent(e2) {
      return (e2 instanceof _FunctionExpr || e2 instanceof DeclareFunctionStmt) && areAllEquivalent(this.params, e2.params) && areAllEquivalent(this.statements, e2.statements);
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitFunctionExpr(this, context2);
    }
    toDeclStmt(name, modifiers) {
      return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);
    }
    clone() {
      return new _FunctionExpr(this.params.map((p) => p.clone()), this.statements, this.type, this.sourceSpan, this.name);
    }
  };
  var ArrowFunctionExpr = class _ArrowFunctionExpr extends Expression {
    // Note that `body: Expression` represents `() => expr` whereas
    // `body: Statement[]` represents `() => { expr }`.
    constructor(params, body, type, sourceSpan) {
      super(type, sourceSpan);
      this.params = params;
      this.body = body;
    }
    isEquivalent(e2) {
      if (!(e2 instanceof _ArrowFunctionExpr) || !areAllEquivalent(this.params, e2.params)) {
        return false;
      }
      if (this.body instanceof Expression && e2.body instanceof Expression) {
        return this.body.isEquivalent(e2.body);
      }
      if (Array.isArray(this.body) && Array.isArray(e2.body)) {
        return areAllEquivalent(this.body, e2.body);
      }
      return false;
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitArrowFunctionExpr(this, context2);
    }
    clone() {
      return new _ArrowFunctionExpr(this.params.map((p) => p.clone()), Array.isArray(this.body) ? this.body : this.body.clone(), this.type, this.sourceSpan);
    }
    toDeclStmt(name, modifiers) {
      return new DeclareVarStmt(name, this, INFERRED_TYPE, modifiers, this.sourceSpan);
    }
  };
  var UnaryOperatorExpr = class _UnaryOperatorExpr extends Expression {
    constructor(operator, expr, type, sourceSpan, parens = true) {
      super(type || NUMBER_TYPE, sourceSpan);
      this.operator = operator;
      this.expr = expr;
      this.parens = parens;
    }
    isEquivalent(e2) {
      return e2 instanceof _UnaryOperatorExpr && this.operator === e2.operator && this.expr.isEquivalent(e2.expr);
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitUnaryOperatorExpr(this, context2);
    }
    clone() {
      return new _UnaryOperatorExpr(this.operator, this.expr.clone(), this.type, this.sourceSpan, this.parens);
    }
  };
  var BinaryOperatorExpr = class _BinaryOperatorExpr extends Expression {
    constructor(operator, lhs, rhs, type, sourceSpan, parens = true) {
      super(type || lhs.type, sourceSpan);
      this.operator = operator;
      this.rhs = rhs;
      this.parens = parens;
      this.lhs = lhs;
    }
    isEquivalent(e2) {
      return e2 instanceof _BinaryOperatorExpr && this.operator === e2.operator && this.lhs.isEquivalent(e2.lhs) && this.rhs.isEquivalent(e2.rhs);
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitBinaryOperatorExpr(this, context2);
    }
    clone() {
      return new _BinaryOperatorExpr(this.operator, this.lhs.clone(), this.rhs.clone(), this.type, this.sourceSpan, this.parens);
    }
  };
  var ReadPropExpr = class _ReadPropExpr extends Expression {
    constructor(receiver, name, type, sourceSpan) {
      super(type, sourceSpan);
      this.receiver = receiver;
      this.name = name;
    }
    // An alias for name, which allows other logic to handle property reads and keyed reads together.
    get index() {
      return this.name;
    }
    isEquivalent(e2) {
      return e2 instanceof _ReadPropExpr && this.receiver.isEquivalent(e2.receiver) && this.name === e2.name;
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitReadPropExpr(this, context2);
    }
    set(value) {
      return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);
    }
    clone() {
      return new _ReadPropExpr(this.receiver.clone(), this.name, this.type, this.sourceSpan);
    }
  };
  var ReadKeyExpr = class _ReadKeyExpr extends Expression {
    constructor(receiver, index, type, sourceSpan) {
      super(type, sourceSpan);
      this.receiver = receiver;
      this.index = index;
    }
    isEquivalent(e2) {
      return e2 instanceof _ReadKeyExpr && this.receiver.isEquivalent(e2.receiver) && this.index.isEquivalent(e2.index);
    }
    isConstant() {
      return false;
    }
    visitExpression(visitor, context2) {
      return visitor.visitReadKeyExpr(this, context2);
    }
    set(value) {
      return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);
    }
    clone() {
      return new _ReadKeyExpr(this.receiver.clone(), this.index.clone(), this.type, this.sourceSpan);
    }
  };
  var LiteralArrayExpr = class _LiteralArrayExpr extends Expression {
    constructor(entries, type, sourceSpan) {
      super(type, sourceSpan);
      this.entries = entries;
    }
    isConstant() {
      return this.entries.every((e2) => e2.isConstant());
    }
    isEquivalent(e2) {
      return e2 instanceof _LiteralArrayExpr && areAllEquivalent(this.entries, e2.entries);
    }
    visitExpression(visitor, context2) {
      return visitor.visitLiteralArrayExpr(this, context2);
    }
    clone() {
      return new _LiteralArrayExpr(this.entries.map((e2) => e2.clone()), this.type, this.sourceSpan);
    }
  };
  var LiteralMapEntry = class _LiteralMapEntry {
    constructor(key, value, quoted) {
      this.key = key;
      this.value = value;
      this.quoted = quoted;
    }
    isEquivalent(e2) {
      return this.key === e2.key && this.value.isEquivalent(e2.value);
    }
    clone() {
      return new _LiteralMapEntry(this.key, this.value.clone(), this.quoted);
    }
  };
  var LiteralMapExpr = class _LiteralMapExpr extends Expression {
    constructor(entries, type, sourceSpan) {
      super(type, sourceSpan);
      this.entries = entries;
      this.valueType = null;
      if (type) {
        this.valueType = type.valueType;
      }
    }
    isEquivalent(e2) {
      return e2 instanceof _LiteralMapExpr && areAllEquivalent(this.entries, e2.entries);
    }
    isConstant() {
      return this.entries.every((e2) => e2.value.isConstant());
    }
    visitExpression(visitor, context2) {
      return visitor.visitLiteralMapExpr(this, context2);
    }
    clone() {
      const entriesClone = this.entries.map((entry) => entry.clone());
      return new _LiteralMapExpr(entriesClone, this.type, this.sourceSpan);
    }
  };
  var NULL_EXPR = new LiteralExpr(null, null, null);
  var TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);
  var StmtModifier;
  (function(StmtModifier2) {
    StmtModifier2[StmtModifier2["None"] = 0] = "None";
    StmtModifier2[StmtModifier2["Final"] = 1] = "Final";
    StmtModifier2[StmtModifier2["Private"] = 2] = "Private";
    StmtModifier2[StmtModifier2["Exported"] = 4] = "Exported";
    StmtModifier2[StmtModifier2["Static"] = 8] = "Static";
  })(StmtModifier || (StmtModifier = {}));
  var LeadingComment = class {
    constructor(text2, multiline, trailingNewline) {
      this.text = text2;
      this.multiline = multiline;
      this.trailingNewline = trailingNewline;
    }
    toString() {
      return this.multiline ? ` ${this.text} ` : this.text;
    }
  };
  var JSDocComment = class extends LeadingComment {
    constructor(tags) {
      super(
        "",
        /* multiline */
        true,
        /* trailingNewline */
        true
      );
      this.tags = tags;
    }
    toString() {
      return serializeTags(this.tags);
    }
  };
  var Statement = class {
    constructor(modifiers = StmtModifier.None, sourceSpan = null, leadingComments) {
      this.modifiers = modifiers;
      this.sourceSpan = sourceSpan;
      this.leadingComments = leadingComments;
    }
    hasModifier(modifier) {
      return (this.modifiers & modifier) !== 0;
    }
    addLeadingComment(leadingComment) {
      this.leadingComments = this.leadingComments ?? [];
      this.leadingComments.push(leadingComment);
    }
  };
  var DeclareVarStmt = class _DeclareVarStmt extends Statement {
    constructor(name, value, type, modifiers, sourceSpan, leadingComments) {
      super(modifiers, sourceSpan, leadingComments);
      this.name = name;
      this.value = value;
      this.type = type || value && value.type || null;
    }
    isEquivalent(stmt) {
      return stmt instanceof _DeclareVarStmt && this.name === stmt.name && (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);
    }
    visitStatement(visitor, context2) {
      return visitor.visitDeclareVarStmt(this, context2);
    }
  };
  var DeclareFunctionStmt = class _DeclareFunctionStmt extends Statement {
    constructor(name, params, statements, type, modifiers, sourceSpan, leadingComments) {
      super(modifiers, sourceSpan, leadingComments);
      this.name = name;
      this.params = params;
      this.statements = statements;
      this.type = type || null;
    }
    isEquivalent(stmt) {
      return stmt instanceof _DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) && areAllEquivalent(this.statements, stmt.statements);
    }
    visitStatement(visitor, context2) {
      return visitor.visitDeclareFunctionStmt(this, context2);
    }
  };
  var ExpressionStatement = class _ExpressionStatement extends Statement {
    constructor(expr, sourceSpan, leadingComments) {
      super(StmtModifier.None, sourceSpan, leadingComments);
      this.expr = expr;
    }
    isEquivalent(stmt) {
      return stmt instanceof _ExpressionStatement && this.expr.isEquivalent(stmt.expr);
    }
    visitStatement(visitor, context2) {
      return visitor.visitExpressionStmt(this, context2);
    }
  };
  var ReturnStatement = class _ReturnStatement extends Statement {
    constructor(value, sourceSpan = null, leadingComments) {
      super(StmtModifier.None, sourceSpan, leadingComments);
      this.value = value;
    }
    isEquivalent(stmt) {
      return stmt instanceof _ReturnStatement && this.value.isEquivalent(stmt.value);
    }
    visitStatement(visitor, context2) {
      return visitor.visitReturnStmt(this, context2);
    }
  };
  var IfStmt = class _IfStmt extends Statement {
    constructor(condition, trueCase, falseCase = [], sourceSpan, leadingComments) {
      super(StmtModifier.None, sourceSpan, leadingComments);
      this.condition = condition;
      this.trueCase = trueCase;
      this.falseCase = falseCase;
    }
    isEquivalent(stmt) {
      return stmt instanceof _IfStmt && this.condition.isEquivalent(stmt.condition) && areAllEquivalent(this.trueCase, stmt.trueCase) && areAllEquivalent(this.falseCase, stmt.falseCase);
    }
    visitStatement(visitor, context2) {
      return visitor.visitIfStmt(this, context2);
    }
  };
  function jsDocComment(tags = []) {
    return new JSDocComment(tags);
  }
  function variable(name, type, sourceSpan) {
    return new ReadVarExpr(name, type, sourceSpan);
  }
  function importExpr(id, typeParams = null, sourceSpan) {
    return new ExternalExpr(id, null, typeParams, sourceSpan);
  }
  function expressionType(expr, typeModifiers, typeParams) {
    return new ExpressionType(expr, typeModifiers, typeParams);
  }
  function typeofExpr(expr) {
    return new TypeofExpr(expr);
  }
  function literalArr(values, type, sourceSpan) {
    return new LiteralArrayExpr(values, type, sourceSpan);
  }
  function literalMap(values, type = null) {
    return new LiteralMapExpr(values.map((e2) => new LiteralMapEntry(e2.key, e2.value, e2.quoted)), type, null);
  }
  function not(expr, sourceSpan) {
    return new NotExpr(expr, sourceSpan);
  }
  function fn(params, body, type, sourceSpan, name) {
    return new FunctionExpr(params, body, type, sourceSpan, name);
  }
  function arrowFn(params, body, type, sourceSpan) {
    return new ArrowFunctionExpr(params, body, type, sourceSpan);
  }
  function ifStmt(condition, thenClause, elseClause, sourceSpan, leadingComments) {
    return new IfStmt(condition, thenClause, elseClause, sourceSpan, leadingComments);
  }
  function taggedTemplate(tag, template2, type, sourceSpan) {
    return new TaggedTemplateExpr(tag, template2, type, sourceSpan);
  }
  function literal(value, type, sourceSpan) {
    return new LiteralExpr(value, type, sourceSpan);
  }
  function localizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan) {
    return new LocalizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan);
  }
  function isNull(exp) {
    return exp instanceof LiteralExpr && exp.value === null;
  }
  function tagToString(tag) {
    let out = "";
    if (tag.tagName) {
      out += ` @${tag.tagName}`;
    }
    if (tag.text) {
      if (tag.text.match(/\/\*|\*\//)) {
        throw new Error('JSDoc text cannot contain "/*" and "*/"');
      }
      out += " " + tag.text.replace(/@/g, "\\@");
    }
    return out;
  }
  function serializeTags(tags) {
    if (tags.length === 0)
      return "";
    if (tags.length === 1 && tags[0].tagName && !tags[0].text) {
      return `*${tagToString(tags[0])} `;
    }
    let out = "*\n";
    for (const tag of tags) {
      out += " *";
      out += tagToString(tag).replace(/\n/g, "\n * ");
      out += "\n";
    }
    out += " ";
    return out;
  }
  var CONSTANT_PREFIX = "_c";
  var UNKNOWN_VALUE_KEY = variable("<unknown>");
  var KEY_CONTEXT = {};
  var POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS = 50;
  var FixupExpression = class _FixupExpression extends Expression {
    constructor(resolved) {
      super(resolved.type);
      this.resolved = resolved;
      this.shared = false;
      this.original = resolved;
    }
    visitExpression(visitor, context2) {
      if (context2 === KEY_CONTEXT) {
        return this.original.visitExpression(visitor, context2);
      } else {
        return this.resolved.visitExpression(visitor, context2);
      }
    }
    isEquivalent(e2) {
      return e2 instanceof _FixupExpression && this.resolved.isEquivalent(e2.resolved);
    }
    isConstant() {
      return true;
    }
    clone() {
      throw new Error(`Not supported.`);
    }
    fixup(expression) {
      this.resolved = expression;
      this.shared = true;
    }
  };
  var ConstantPool = class {
    constructor(isClosureCompilerEnabled = false) {
      this.isClosureCompilerEnabled = isClosureCompilerEnabled;
      this.statements = [];
      this.literals = /* @__PURE__ */ new Map();
      this.literalFactories = /* @__PURE__ */ new Map();
      this.sharedConstants = /* @__PURE__ */ new Map();
      this._claimedNames = /* @__PURE__ */ new Map();
      this.nextNameIndex = 0;
    }
    getConstLiteral(literal2, forceShared) {
      if (literal2 instanceof LiteralExpr && !isLongStringLiteral(literal2) || literal2 instanceof FixupExpression) {
        return literal2;
      }
      const key = GenericKeyFn.INSTANCE.keyOf(literal2);
      let fixup = this.literals.get(key);
      let newValue = false;
      if (!fixup) {
        fixup = new FixupExpression(literal2);
        this.literals.set(key, fixup);
        newValue = true;
      }
      if (!newValue && !fixup.shared || newValue && forceShared) {
        const name = this.freshName();
        let definition;
        let usage;
        if (this.isClosureCompilerEnabled && isLongStringLiteral(literal2)) {
          definition = variable(name).set(new FunctionExpr(
            [],
            // Params.
            [
              // Statements.
              new ReturnStatement(literal2)
            ]
          ));
          usage = variable(name).callFn([]);
        } else {
          definition = variable(name).set(literal2);
          usage = variable(name);
        }
        this.statements.push(definition.toDeclStmt(INFERRED_TYPE, StmtModifier.Final));
        fixup.fixup(usage);
      }
      return fixup;
    }
    getSharedConstant(def, expr) {
      const key = def.keyOf(expr);
      if (!this.sharedConstants.has(key)) {
        const id = this.freshName();
        this.sharedConstants.set(key, variable(id));
        this.statements.push(def.toSharedConstantDeclaration(id, expr));
      }
      return this.sharedConstants.get(key);
    }
    getLiteralFactory(literal2) {
      if (literal2 instanceof LiteralArrayExpr) {
        const argumentsForKey = literal2.entries.map((e2) => e2.isConstant() ? e2 : UNKNOWN_VALUE_KEY);
        const key = GenericKeyFn.INSTANCE.keyOf(literalArr(argumentsForKey));
        return this._getLiteralFactory(key, literal2.entries, (entries) => literalArr(entries));
      } else {
        const expressionForKey = literalMap(literal2.entries.map((e2) => ({
          key: e2.key,
          value: e2.value.isConstant() ? e2.value : UNKNOWN_VALUE_KEY,
          quoted: e2.quoted
        })));
        const key = GenericKeyFn.INSTANCE.keyOf(expressionForKey);
        return this._getLiteralFactory(key, literal2.entries.map((e2) => e2.value), (entries) => literalMap(entries.map((value, index) => ({
          key: literal2.entries[index].key,
          value,
          quoted: literal2.entries[index].quoted
        }))));
      }
    }
    // TODO: useUniqueName(false) is necessary for naming compatibility with
    // TemplateDefinitionBuilder, but should be removed once Template Pipeline is the default.
    getSharedFunctionReference(fn2, prefix, useUniqueName = true) {
      const isArrow = fn2 instanceof ArrowFunctionExpr;
      for (const current of this.statements) {
        if (isArrow && current instanceof DeclareVarStmt && current.value?.isEquivalent(fn2)) {
          return variable(current.name);
        }
        if (!isArrow && current instanceof DeclareFunctionStmt && fn2.isEquivalent(current)) {
          return variable(current.name);
        }
      }
      const name = useUniqueName ? this.uniqueName(prefix) : prefix;
      this.statements.push(fn2.toDeclStmt(name, StmtModifier.Final));
      return variable(name);
    }
    _getLiteralFactory(key, values, resultMap) {
      let literalFactory = this.literalFactories.get(key);
      const literalFactoryArguments = values.filter((e2) => !e2.isConstant());
      if (!literalFactory) {
        const resultExpressions = values.map((e2, index) => e2.isConstant() ? this.getConstLiteral(e2, true) : variable(`a${index}`));
        const parameters = resultExpressions.filter(isVariable).map((e2) => new FnParam(e2.name, DYNAMIC_TYPE));
        const pureFunctionDeclaration = arrowFn(parameters, resultMap(resultExpressions), INFERRED_TYPE);
        const name = this.freshName();
        this.statements.push(variable(name).set(pureFunctionDeclaration).toDeclStmt(INFERRED_TYPE, StmtModifier.Final));
        literalFactory = variable(name);
        this.literalFactories.set(key, literalFactory);
      }
      return { literalFactory, literalFactoryArguments };
    }
    /**
     * Produce a unique name in the context of this pool.
     *
     * The name might be unique among different prefixes if any of the prefixes end in
     * a digit so the prefix should be a constant string (not based on user input) and
     * must not end in a digit.
     */
    uniqueName(name, alwaysIncludeSuffix = true) {
      const count = this._claimedNames.get(name) ?? 0;
      const result = count === 0 && !alwaysIncludeSuffix ? `${name}` : `${name}${count}`;
      this._claimedNames.set(name, count + 1);
      return result;
    }
    freshName() {
      return this.uniqueName(CONSTANT_PREFIX);
    }
  };
  var GenericKeyFn = class _GenericKeyFn {
    static {
      this.INSTANCE = new _GenericKeyFn();
    }
    keyOf(expr) {
      if (expr instanceof LiteralExpr && typeof expr.value === "string") {
        return `"${expr.value}"`;
      } else if (expr instanceof LiteralExpr) {
        return String(expr.value);
      } else if (expr instanceof LiteralArrayExpr) {
        const entries = [];
        for (const entry of expr.entries) {
          entries.push(this.keyOf(entry));
        }
        return `[${entries.join(",")}]`;
      } else if (expr instanceof LiteralMapExpr) {
        const entries = [];
        for (const entry of expr.entries) {
          let key = entry.key;
          if (entry.quoted) {
            key = `"${key}"`;
          }
          entries.push(key + ":" + this.keyOf(entry.value));
        }
        return `{${entries.join(",")}}`;
      } else if (expr instanceof ExternalExpr) {
        return `import("${expr.value.moduleName}", ${expr.value.name})`;
      } else if (expr instanceof ReadVarExpr) {
        return `read(${expr.name})`;
      } else if (expr instanceof TypeofExpr) {
        return `typeof(${this.keyOf(expr.expr)})`;
      } else {
        throw new Error(`${this.constructor.name} does not handle expressions of type ${expr.constructor.name}`);
      }
    }
  };
  function isVariable(e2) {
    return e2 instanceof ReadVarExpr;
  }
  function isLongStringLiteral(expr) {
    return expr instanceof LiteralExpr && typeof expr.value === "string" && expr.value.length >= POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS;
  }
  var CORE = "@angular/core";
  var Identifiers = class {
    static {
      this.NEW_METHOD = "factory";
    }
    static {
      this.TRANSFORM_METHOD = "transform";
    }
    static {
      this.PATCH_DEPS = "patchedDeps";
    }
    static {
      this.core = { name: null, moduleName: CORE };
    }
    static {
      this.namespaceHTML = { name: "\u0275\u0275namespaceHTML", moduleName: CORE };
    }
    static {
      this.namespaceMathML = { name: "\u0275\u0275namespaceMathML", moduleName: CORE };
    }
    static {
      this.namespaceSVG = { name: "\u0275\u0275namespaceSVG", moduleName: CORE };
    }
    static {
      this.element = { name: "\u0275\u0275element", moduleName: CORE };
    }
    static {
      this.elementStart = { name: "\u0275\u0275elementStart", moduleName: CORE };
    }
    static {
      this.elementEnd = { name: "\u0275\u0275elementEnd", moduleName: CORE };
    }
    static {
      this.advance = { name: "\u0275\u0275advance", moduleName: CORE };
    }
    static {
      this.syntheticHostProperty = { name: "\u0275\u0275syntheticHostProperty", moduleName: CORE };
    }
    static {
      this.syntheticHostListener = { name: "\u0275\u0275syntheticHostListener", moduleName: CORE };
    }
    static {
      this.attribute = { name: "\u0275\u0275attribute", moduleName: CORE };
    }
    static {
      this.attributeInterpolate1 = { name: "\u0275\u0275attributeInterpolate1", moduleName: CORE };
    }
    static {
      this.attributeInterpolate2 = { name: "\u0275\u0275attributeInterpolate2", moduleName: CORE };
    }
    static {
      this.attributeInterpolate3 = { name: "\u0275\u0275attributeInterpolate3", moduleName: CORE };
    }
    static {
      this.attributeInterpolate4 = { name: "\u0275\u0275attributeInterpolate4", moduleName: CORE };
    }
    static {
      this.attributeInterpolate5 = { name: "\u0275\u0275attributeInterpolate5", moduleName: CORE };
    }
    static {
      this.attributeInterpolate6 = { name: "\u0275\u0275attributeInterpolate6", moduleName: CORE };
    }
    static {
      this.attributeInterpolate7 = { name: "\u0275\u0275attributeInterpolate7", moduleName: CORE };
    }
    static {
      this.attributeInterpolate8 = { name: "\u0275\u0275attributeInterpolate8", moduleName: CORE };
    }
    static {
      this.attributeInterpolateV = { name: "\u0275\u0275attributeInterpolateV", moduleName: CORE };
    }
    static {
      this.classProp = { name: "\u0275\u0275classProp", moduleName: CORE };
    }
    static {
      this.elementContainerStart = { name: "\u0275\u0275elementContainerStart", moduleName: CORE };
    }
    static {
      this.elementContainerEnd = { name: "\u0275\u0275elementContainerEnd", moduleName: CORE };
    }
    static {
      this.elementContainer = { name: "\u0275\u0275elementContainer", moduleName: CORE };
    }
    static {
      this.styleMap = { name: "\u0275\u0275styleMap", moduleName: CORE };
    }
    static {
      this.styleMapInterpolate1 = { name: "\u0275\u0275styleMapInterpolate1", moduleName: CORE };
    }
    static {
      this.styleMapInterpolate2 = { name: "\u0275\u0275styleMapInterpolate2", moduleName: CORE };
    }
    static {
      this.styleMapInterpolate3 = { name: "\u0275\u0275styleMapInterpolate3", moduleName: CORE };
    }
    static {
      this.styleMapInterpolate4 = { name: "\u0275\u0275styleMapInterpolate4", moduleName: CORE };
    }
    static {
      this.styleMapInterpolate5 = { name: "\u0275\u0275styleMapInterpolate5", moduleName: CORE };
    }
    static {
      this.styleMapInterpolate6 = { name: "\u0275\u0275styleMapInterpolate6", moduleName: CORE };
    }
    static {
      this.styleMapInterpolate7 = { name: "\u0275\u0275styleMapInterpolate7", moduleName: CORE };
    }
    static {
      this.styleMapInterpolate8 = { name: "\u0275\u0275styleMapInterpolate8", moduleName: CORE };
    }
    static {
      this.styleMapInterpolateV = { name: "\u0275\u0275styleMapInterpolateV", moduleName: CORE };
    }
    static {
      this.classMap = { name: "\u0275\u0275classMap", moduleName: CORE };
    }
    static {
      this.classMapInterpolate1 = { name: "\u0275\u0275classMapInterpolate1", moduleName: CORE };
    }
    static {
      this.classMapInterpolate2 = { name: "\u0275\u0275classMapInterpolate2", moduleName: CORE };
    }
    static {
      this.classMapInterpolate3 = { name: "\u0275\u0275classMapInterpolate3", moduleName: CORE };
    }
    static {
      this.classMapInterpolate4 = { name: "\u0275\u0275classMapInterpolate4", moduleName: CORE };
    }
    static {
      this.classMapInterpolate5 = { name: "\u0275\u0275classMapInterpolate5", moduleName: CORE };
    }
    static {
      this.classMapInterpolate6 = { name: "\u0275\u0275classMapInterpolate6", moduleName: CORE };
    }
    static {
      this.classMapInterpolate7 = { name: "\u0275\u0275classMapInterpolate7", moduleName: CORE };
    }
    static {
      this.classMapInterpolate8 = { name: "\u0275\u0275classMapInterpolate8", moduleName: CORE };
    }
    static {
      this.classMapInterpolateV = { name: "\u0275\u0275classMapInterpolateV", moduleName: CORE };
    }
    static {
      this.styleProp = { name: "\u0275\u0275styleProp", moduleName: CORE };
    }
    static {
      this.stylePropInterpolate1 = { name: "\u0275\u0275stylePropInterpolate1", moduleName: CORE };
    }
    static {
      this.stylePropInterpolate2 = { name: "\u0275\u0275stylePropInterpolate2", moduleName: CORE };
    }
    static {
      this.stylePropInterpolate3 = { name: "\u0275\u0275stylePropInterpolate3", moduleName: CORE };
    }
    static {
      this.stylePropInterpolate4 = { name: "\u0275\u0275stylePropInterpolate4", moduleName: CORE };
    }
    static {
      this.stylePropInterpolate5 = { name: "\u0275\u0275stylePropInterpolate5", moduleName: CORE };
    }
    static {
      this.stylePropInterpolate6 = { name: "\u0275\u0275stylePropInterpolate6", moduleName: CORE };
    }
    static {
      this.stylePropInterpolate7 = { name: "\u0275\u0275stylePropInterpolate7", moduleName: CORE };
    }
    static {
      this.stylePropInterpolate8 = { name: "\u0275\u0275stylePropInterpolate8", moduleName: CORE };
    }
    static {
      this.stylePropInterpolateV = { name: "\u0275\u0275stylePropInterpolateV", moduleName: CORE };
    }
    static {
      this.nextContext = { name: "\u0275\u0275nextContext", moduleName: CORE };
    }
    static {
      this.resetView = { name: "\u0275\u0275resetView", moduleName: CORE };
    }
    static {
      this.templateCreate = { name: "\u0275\u0275template", moduleName: CORE };
    }
    static {
      this.defer = { name: "\u0275\u0275defer", moduleName: CORE };
    }
    static {
      this.deferWhen = { name: "\u0275\u0275deferWhen", moduleName: CORE };
    }
    static {
      this.deferOnIdle = { name: "\u0275\u0275deferOnIdle", moduleName: CORE };
    }
    static {
      this.deferOnImmediate = { name: "\u0275\u0275deferOnImmediate", moduleName: CORE };
    }
    static {
      this.deferOnTimer = { name: "\u0275\u0275deferOnTimer", moduleName: CORE };
    }
    static {
      this.deferOnHover = { name: "\u0275\u0275deferOnHover", moduleName: CORE };
    }
    static {
      this.deferOnInteraction = { name: "\u0275\u0275deferOnInteraction", moduleName: CORE };
    }
    static {
      this.deferOnViewport = { name: "\u0275\u0275deferOnViewport", moduleName: CORE };
    }
    static {
      this.deferPrefetchWhen = { name: "\u0275\u0275deferPrefetchWhen", moduleName: CORE };
    }
    static {
      this.deferPrefetchOnIdle = { name: "\u0275\u0275deferPrefetchOnIdle", moduleName: CORE };
    }
    static {
      this.deferPrefetchOnImmediate = { name: "\u0275\u0275deferPrefetchOnImmediate", moduleName: CORE };
    }
    static {
      this.deferPrefetchOnTimer = { name: "\u0275\u0275deferPrefetchOnTimer", moduleName: CORE };
    }
    static {
      this.deferPrefetchOnHover = { name: "\u0275\u0275deferPrefetchOnHover", moduleName: CORE };
    }
    static {
      this.deferPrefetchOnInteraction = { name: "\u0275\u0275deferPrefetchOnInteraction", moduleName: CORE };
    }
    static {
      this.deferPrefetchOnViewport = { name: "\u0275\u0275deferPrefetchOnViewport", moduleName: CORE };
    }
    static {
      this.deferEnableTimerScheduling = { name: "\u0275\u0275deferEnableTimerScheduling", moduleName: CORE };
    }
    static {
      this.conditional = { name: "\u0275\u0275conditional", moduleName: CORE };
    }
    static {
      this.repeater = { name: "\u0275\u0275repeater", moduleName: CORE };
    }
    static {
      this.repeaterCreate = { name: "\u0275\u0275repeaterCreate", moduleName: CORE };
    }
    static {
      this.repeaterTrackByIndex = { name: "\u0275\u0275repeaterTrackByIndex", moduleName: CORE };
    }
    static {
      this.repeaterTrackByIdentity = { name: "\u0275\u0275repeaterTrackByIdentity", moduleName: CORE };
    }
    static {
      this.componentInstance = { name: "\u0275\u0275componentInstance", moduleName: CORE };
    }
    static {
      this.text = { name: "\u0275\u0275text", moduleName: CORE };
    }
    static {
      this.enableBindings = { name: "\u0275\u0275enableBindings", moduleName: CORE };
    }
    static {
      this.disableBindings = { name: "\u0275\u0275disableBindings", moduleName: CORE };
    }
    static {
      this.getCurrentView = { name: "\u0275\u0275getCurrentView", moduleName: CORE };
    }
    static {
      this.textInterpolate = { name: "\u0275\u0275textInterpolate", moduleName: CORE };
    }
    static {
      this.textInterpolate1 = { name: "\u0275\u0275textInterpolate1", moduleName: CORE };
    }
    static {
      this.textInterpolate2 = { name: "\u0275\u0275textInterpolate2", moduleName: CORE };
    }
    static {
      this.textInterpolate3 = { name: "\u0275\u0275textInterpolate3", moduleName: CORE };
    }
    static {
      this.textInterpolate4 = { name: "\u0275\u0275textInterpolate4", moduleName: CORE };
    }
    static {
      this.textInterpolate5 = { name: "\u0275\u0275textInterpolate5", moduleName: CORE };
    }
    static {
      this.textInterpolate6 = { name: "\u0275\u0275textInterpolate6", moduleName: CORE };
    }
    static {
      this.textInterpolate7 = { name: "\u0275\u0275textInterpolate7", moduleName: CORE };
    }
    static {
      this.textInterpolate8 = { name: "\u0275\u0275textInterpolate8", moduleName: CORE };
    }
    static {
      this.textInterpolateV = { name: "\u0275\u0275textInterpolateV", moduleName: CORE };
    }
    static {
      this.restoreView = { name: "\u0275\u0275restoreView", moduleName: CORE };
    }
    static {
      this.pureFunction0 = { name: "\u0275\u0275pureFunction0", moduleName: CORE };
    }
    static {
      this.pureFunction1 = { name: "\u0275\u0275pureFunction1", moduleName: CORE };
    }
    static {
      this.pureFunction2 = { name: "\u0275\u0275pureFunction2", moduleName: CORE };
    }
    static {
      this.pureFunction3 = { name: "\u0275\u0275pureFunction3", moduleName: CORE };
    }
    static {
      this.pureFunction4 = { name: "\u0275\u0275pureFunction4", moduleName: CORE };
    }
    static {
      this.pureFunction5 = { name: "\u0275\u0275pureFunction5", moduleName: CORE };
    }
    static {
      this.pureFunction6 = { name: "\u0275\u0275pureFunction6", moduleName: CORE };
    }
    static {
      this.pureFunction7 = { name: "\u0275\u0275pureFunction7", moduleName: CORE };
    }
    static {
      this.pureFunction8 = { name: "\u0275\u0275pureFunction8", moduleName: CORE };
    }
    static {
      this.pureFunctionV = { name: "\u0275\u0275pureFunctionV", moduleName: CORE };
    }
    static {
      this.pipeBind1 = { name: "\u0275\u0275pipeBind1", moduleName: CORE };
    }
    static {
      this.pipeBind2 = { name: "\u0275\u0275pipeBind2", moduleName: CORE };
    }
    static {
      this.pipeBind3 = { name: "\u0275\u0275pipeBind3", moduleName: CORE };
    }
    static {
      this.pipeBind4 = { name: "\u0275\u0275pipeBind4", moduleName: CORE };
    }
    static {
      this.pipeBindV = { name: "\u0275\u0275pipeBindV", moduleName: CORE };
    }
    static {
      this.hostProperty = { name: "\u0275\u0275hostProperty", moduleName: CORE };
    }
    static {
      this.property = { name: "\u0275\u0275property", moduleName: CORE };
    }
    static {
      this.propertyInterpolate = { name: "\u0275\u0275propertyInterpolate", moduleName: CORE };
    }
    static {
      this.propertyInterpolate1 = { name: "\u0275\u0275propertyInterpolate1", moduleName: CORE };
    }
    static {
      this.propertyInterpolate2 = { name: "\u0275\u0275propertyInterpolate2", moduleName: CORE };
    }
    static {
      this.propertyInterpolate3 = { name: "\u0275\u0275propertyInterpolate3", moduleName: CORE };
    }
    static {
      this.propertyInterpolate4 = { name: "\u0275\u0275propertyInterpolate4", moduleName: CORE };
    }
    static {
      this.propertyInterpolate5 = { name: "\u0275\u0275propertyInterpolate5", moduleName: CORE };
    }
    static {
      this.propertyInterpolate6 = { name: "\u0275\u0275propertyInterpolate6", moduleName: CORE };
    }
    static {
      this.propertyInterpolate7 = { name: "\u0275\u0275propertyInterpolate7", moduleName: CORE };
    }
    static {
      this.propertyInterpolate8 = { name: "\u0275\u0275propertyInterpolate8", moduleName: CORE };
    }
    static {
      this.propertyInterpolateV = { name: "\u0275\u0275propertyInterpolateV", moduleName: CORE };
    }
    static {
      this.i18n = { name: "\u0275\u0275i18n", moduleName: CORE };
    }
    static {
      this.i18nAttributes = { name: "\u0275\u0275i18nAttributes", moduleName: CORE };
    }
    static {
      this.i18nExp = { name: "\u0275\u0275i18nExp", moduleName: CORE };
    }
    static {
      this.i18nStart = { name: "\u0275\u0275i18nStart", moduleName: CORE };
    }
    static {
      this.i18nEnd = { name: "\u0275\u0275i18nEnd", moduleName: CORE };
    }
    static {
      this.i18nApply = { name: "\u0275\u0275i18nApply", moduleName: CORE };
    }
    static {
      this.i18nPostprocess = { name: "\u0275\u0275i18nPostprocess", moduleName: CORE };
    }
    static {
      this.pipe = { name: "\u0275\u0275pipe", moduleName: CORE };
    }
    static {
      this.projection = { name: "\u0275\u0275projection", moduleName: CORE };
    }
    static {
      this.projectionDef = { name: "\u0275\u0275projectionDef", moduleName: CORE };
    }
    static {
      this.reference = { name: "\u0275\u0275reference", moduleName: CORE };
    }
    static {
      this.inject = { name: "\u0275\u0275inject", moduleName: CORE };
    }
    static {
      this.injectAttribute = { name: "\u0275\u0275injectAttribute", moduleName: CORE };
    }
    static {
      this.directiveInject = { name: "\u0275\u0275directiveInject", moduleName: CORE };
    }
    static {
      this.invalidFactory = { name: "\u0275\u0275invalidFactory", moduleName: CORE };
    }
    static {
      this.invalidFactoryDep = { name: "\u0275\u0275invalidFactoryDep", moduleName: CORE };
    }
    static {
      this.templateRefExtractor = { name: "\u0275\u0275templateRefExtractor", moduleName: CORE };
    }
    static {
      this.forwardRef = { name: "forwardRef", moduleName: CORE };
    }
    static {
      this.resolveForwardRef = { name: "resolveForwardRef", moduleName: CORE };
    }
    static {
      this.\u0275\u0275defineInjectable = { name: "\u0275\u0275defineInjectable", moduleName: CORE };
    }
    static {
      this.declareInjectable = { name: "\u0275\u0275ngDeclareInjectable", moduleName: CORE };
    }
    static {
      this.InjectableDeclaration = { name: "\u0275\u0275InjectableDeclaration", moduleName: CORE };
    }
    static {
      this.resolveWindow = { name: "\u0275\u0275resolveWindow", moduleName: CORE };
    }
    static {
      this.resolveDocument = { name: "\u0275\u0275resolveDocument", moduleName: CORE };
    }
    static {
      this.resolveBody = { name: "\u0275\u0275resolveBody", moduleName: CORE };
    }
    static {
      this.getComponentDepsFactory = { name: "\u0275\u0275getComponentDepsFactory", moduleName: CORE };
    }
    static {
      this.defineComponent = { name: "\u0275\u0275defineComponent", moduleName: CORE };
    }
    static {
      this.declareComponent = { name: "\u0275\u0275ngDeclareComponent", moduleName: CORE };
    }
    static {
      this.setComponentScope = { name: "\u0275\u0275setComponentScope", moduleName: CORE };
    }
    static {
      this.ChangeDetectionStrategy = {
        name: "ChangeDetectionStrategy",
        moduleName: CORE
      };
    }
    static {
      this.ViewEncapsulation = {
        name: "ViewEncapsulation",
        moduleName: CORE
      };
    }
    static {
      this.ComponentDeclaration = {
        name: "\u0275\u0275ComponentDeclaration",
        moduleName: CORE
      };
    }
    static {
      this.FactoryDeclaration = {
        name: "\u0275\u0275FactoryDeclaration",
        moduleName: CORE
      };
    }
    static {
      this.declareFactory = { name: "\u0275\u0275ngDeclareFactory", moduleName: CORE };
    }
    static {
      this.FactoryTarget = { name: "\u0275\u0275FactoryTarget", moduleName: CORE };
    }
    static {
      this.defineDirective = { name: "\u0275\u0275defineDirective", moduleName: CORE };
    }
    static {
      this.declareDirective = { name: "\u0275\u0275ngDeclareDirective", moduleName: CORE };
    }
    static {
      this.DirectiveDeclaration = {
        name: "\u0275\u0275DirectiveDeclaration",
        moduleName: CORE
      };
    }
    static {
      this.InjectorDef = { name: "\u0275\u0275InjectorDef", moduleName: CORE };
    }
    static {
      this.InjectorDeclaration = { name: "\u0275\u0275InjectorDeclaration", moduleName: CORE };
    }
    static {
      this.defineInjector = { name: "\u0275\u0275defineInjector", moduleName: CORE };
    }
    static {
      this.declareInjector = { name: "\u0275\u0275ngDeclareInjector", moduleName: CORE };
    }
    static {
      this.NgModuleDeclaration = {
        name: "\u0275\u0275NgModuleDeclaration",
        moduleName: CORE
      };
    }
    static {
      this.ModuleWithProviders = {
        name: "ModuleWithProviders",
        moduleName: CORE
      };
    }
    static {
      this.defineNgModule = { name: "\u0275\u0275defineNgModule", moduleName: CORE };
    }
    static {
      this.declareNgModule = { name: "\u0275\u0275ngDeclareNgModule", moduleName: CORE };
    }
    static {
      this.setNgModuleScope = { name: "\u0275\u0275setNgModuleScope", moduleName: CORE };
    }
    static {
      this.registerNgModuleType = { name: "\u0275\u0275registerNgModuleType", moduleName: CORE };
    }
    static {
      this.PipeDeclaration = { name: "\u0275\u0275PipeDeclaration", moduleName: CORE };
    }
    static {
      this.definePipe = { name: "\u0275\u0275definePipe", moduleName: CORE };
    }
    static {
      this.declarePipe = { name: "\u0275\u0275ngDeclarePipe", moduleName: CORE };
    }
    static {
      this.declareClassMetadata = { name: "\u0275\u0275ngDeclareClassMetadata", moduleName: CORE };
    }
    static {
      this.setClassMetadata = { name: "\u0275setClassMetadata", moduleName: CORE };
    }
    static {
      this.setClassMetadataAsync = { name: "\u0275setClassMetadataAsync", moduleName: CORE };
    }
    static {
      this.setClassDebugInfo = { name: "\u0275setClassDebugInfo", moduleName: CORE };
    }
    static {
      this.queryRefresh = { name: "\u0275\u0275queryRefresh", moduleName: CORE };
    }
    static {
      this.viewQuery = { name: "\u0275\u0275viewQuery", moduleName: CORE };
    }
    static {
      this.loadQuery = { name: "\u0275\u0275loadQuery", moduleName: CORE };
    }
    static {
      this.contentQuery = { name: "\u0275\u0275contentQuery", moduleName: CORE };
    }
    static {
      this.viewQuerySignal = { name: "\u0275\u0275viewQuerySignal", moduleName: CORE };
    }
    static {
      this.contentQuerySignal = { name: "\u0275\u0275contentQuerySignal", moduleName: CORE };
    }
    static {
      this.queryAdvance = { name: "\u0275\u0275queryAdvance", moduleName: CORE };
    }
    static {
      this.twoWayProperty = { name: "\u0275\u0275twoWayProperty", moduleName: CORE };
    }
    static {
      this.twoWayBindingSet = { name: "\u0275\u0275twoWayBindingSet", moduleName: CORE };
    }
    static {
      this.twoWayListener = { name: "\u0275\u0275twoWayListener", moduleName: CORE };
    }
    static {
      this.NgOnChangesFeature = { name: "\u0275\u0275NgOnChangesFeature", moduleName: CORE };
    }
    static {
      this.InheritDefinitionFeature = { name: "\u0275\u0275InheritDefinitionFeature", moduleName: CORE };
    }
    static {
      this.CopyDefinitionFeature = { name: "\u0275\u0275CopyDefinitionFeature", moduleName: CORE };
    }
    static {
      this.StandaloneFeature = { name: "\u0275\u0275StandaloneFeature", moduleName: CORE };
    }
    static {
      this.ProvidersFeature = { name: "\u0275\u0275ProvidersFeature", moduleName: CORE };
    }
    static {
      this.HostDirectivesFeature = { name: "\u0275\u0275HostDirectivesFeature", moduleName: CORE };
    }
    static {
      this.InputTransformsFeatureFeature = { name: "\u0275\u0275InputTransformsFeature", moduleName: CORE };
    }
    static {
      this.listener = { name: "\u0275\u0275listener", moduleName: CORE };
    }
    static {
      this.getInheritedFactory = {
        name: "\u0275\u0275getInheritedFactory",
        moduleName: CORE
      };
    }
    static {
      this.InputFlags = {
        name: "\u0275\u0275InputFlags",
        moduleName: CORE
      };
    }
    static {
      this.sanitizeHtml = { name: "\u0275\u0275sanitizeHtml", moduleName: CORE };
    }
    static {
      this.sanitizeStyle = { name: "\u0275\u0275sanitizeStyle", moduleName: CORE };
    }
    static {
      this.sanitizeResourceUrl = { name: "\u0275\u0275sanitizeResourceUrl", moduleName: CORE };
    }
    static {
      this.sanitizeScript = { name: "\u0275\u0275sanitizeScript", moduleName: CORE };
    }
    static {
      this.sanitizeUrl = { name: "\u0275\u0275sanitizeUrl", moduleName: CORE };
    }
    static {
      this.sanitizeUrlOrResourceUrl = { name: "\u0275\u0275sanitizeUrlOrResourceUrl", moduleName: CORE };
    }
    static {
      this.trustConstantHtml = { name: "\u0275\u0275trustConstantHtml", moduleName: CORE };
    }
    static {
      this.trustConstantResourceUrl = { name: "\u0275\u0275trustConstantResourceUrl", moduleName: CORE };
    }
    static {
      this.validateIframeAttribute = { name: "\u0275\u0275validateIframeAttribute", moduleName: CORE };
    }
    static {
      this.InputSignalBrandWriteType = { name: "\u0275INPUT_SIGNAL_BRAND_WRITE_TYPE", moduleName: CORE };
    }
    static {
      this.UnwrapDirectiveSignalInputs = { name: "\u0275UnwrapDirectiveSignalInputs", moduleName: CORE };
    }
    static {
      this.unwrapWritableSignal = { name: "\u0275unwrapWritableSignal", moduleName: CORE };
    }
  };
  var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
  function dashCaseToCamelCase(input2) {
    return input2.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
  }
  function splitAtColon(input2, defaultValues) {
    return _splitAt(input2, ":", defaultValues);
  }
  function splitAtPeriod(input2, defaultValues) {
    return _splitAt(input2, ".", defaultValues);
  }
  function _splitAt(input2, character, defaultValues) {
    const characterIndex = input2.indexOf(character);
    if (characterIndex == -1)
      return defaultValues;
    return [input2.slice(0, characterIndex).trim(), input2.slice(characterIndex + 1).trim()];
  }
  function noUndefined(val) {
    return val === void 0 ? null : val;
  }
  function error(msg) {
    throw new Error(`Internal Error: ${msg}`);
  }
  function utf8Encode(str) {
    let encoded = [];
    for (let index = 0; index < str.length; index++) {
      let codePoint = str.charCodeAt(index);
      if (codePoint >= 55296 && codePoint <= 56319 && str.length > index + 1) {
        const low = str.charCodeAt(index + 1);
        if (low >= 56320 && low <= 57343) {
          index++;
          codePoint = (codePoint - 55296 << 10) + low - 56320 + 65536;
        }
      }
      if (codePoint <= 127) {
        encoded.push(codePoint);
      } else if (codePoint <= 2047) {
        encoded.push(codePoint >> 6 & 31 | 192, codePoint & 63 | 128);
      } else if (codePoint <= 65535) {
        encoded.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      } else if (codePoint <= 2097151) {
        encoded.push(codePoint >> 18 & 7 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      }
    }
    return encoded;
  }
  function stringify2(token) {
    if (typeof token === "string") {
      return token;
    }
    if (Array.isArray(token)) {
      return "[" + token.map(stringify2).join(", ") + "]";
    }
    if (token == null) {
      return "" + token;
    }
    if (token.overriddenName) {
      return `${token.overriddenName}`;
    }
    if (token.name) {
      return `${token.name}`;
    }
    if (!token.toString) {
      return "object";
    }
    const res = token.toString();
    if (res == null) {
      return "" + res;
    }
    const newLineIndex = res.indexOf("\n");
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  var Version2 = class {
    constructor(full) {
      this.full = full;
      const splits = full.split(".");
      this.major = splits[0];
      this.minor = splits[1];
      this.patch = splits.slice(2).join(".");
    }
  };
  var _global2 = globalThis;
  function partitionArray(arr, conditionFn) {
    const truthy = [];
    const falsy = [];
    for (const item of arr) {
      (conditionFn(item) ? truthy : falsy).push(item);
    }
    return [truthy, falsy];
  }
  var VERSION$1 = 3;
  var JS_B64_PREFIX = "# sourceMappingURL=data:application/json;base64,";
  var SourceMapGenerator = class {
    constructor(file = null) {
      this.file = file;
      this.sourcesContent = /* @__PURE__ */ new Map();
      this.lines = [];
      this.lastCol0 = 0;
      this.hasMappings = false;
    }
    // The content is `null` when the content is expected to be loaded using the URL
    addSource(url, content = null) {
      if (!this.sourcesContent.has(url)) {
        this.sourcesContent.set(url, content);
      }
      return this;
    }
    addLine() {
      this.lines.push([]);
      this.lastCol0 = 0;
      return this;
    }
    addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {
      if (!this.currentLine) {
        throw new Error(`A line must be added before mappings can be added`);
      }
      if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {
        throw new Error(`Unknown source file "${sourceUrl}"`);
      }
      if (col0 == null) {
        throw new Error(`The column in the generated code must be provided`);
      }
      if (col0 < this.lastCol0) {
        throw new Error(`Mapping should be added in output order`);
      }
      if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {
        throw new Error(`The source location must be provided when a source url is provided`);
      }
      this.hasMappings = true;
      this.lastCol0 = col0;
      this.currentLine.push({ col0, sourceUrl, sourceLine0, sourceCol0 });
      return this;
    }
    /**
     * @internal strip this from published d.ts files due to
     * https://github.com/microsoft/TypeScript/issues/36216
     */
    get currentLine() {
      return this.lines.slice(-1)[0];
    }
    toJSON() {
      if (!this.hasMappings) {
        return null;
      }
      const sourcesIndex = /* @__PURE__ */ new Map();
      const sources = [];
      const sourcesContent = [];
      Array.from(this.sourcesContent.keys()).forEach((url, i) => {
        sourcesIndex.set(url, i);
        sources.push(url);
        sourcesContent.push(this.sourcesContent.get(url) || null);
      });
      let mappings = "";
      let lastCol0 = 0;
      let lastSourceIndex = 0;
      let lastSourceLine0 = 0;
      let lastSourceCol0 = 0;
      this.lines.forEach((segments) => {
        lastCol0 = 0;
        mappings += segments.map((segment) => {
          let segAsStr = toBase64VLQ(segment.col0 - lastCol0);
          lastCol0 = segment.col0;
          if (segment.sourceUrl != null) {
            segAsStr += toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);
            lastSourceIndex = sourcesIndex.get(segment.sourceUrl);
            segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);
            lastSourceLine0 = segment.sourceLine0;
            segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);
            lastSourceCol0 = segment.sourceCol0;
          }
          return segAsStr;
        }).join(",");
        mappings += ";";
      });
      mappings = mappings.slice(0, -1);
      return {
        "file": this.file || "",
        "version": VERSION$1,
        "sourceRoot": "",
        "sources": sources,
        "sourcesContent": sourcesContent,
        "mappings": mappings
      };
    }
    toJsComment() {
      return this.hasMappings ? "//" + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) : "";
    }
  };
  function toBase64String(value) {
    let b64 = "";
    const encoded = utf8Encode(value);
    for (let i = 0; i < encoded.length; ) {
      const i1 = encoded[i++];
      const i2 = i < encoded.length ? encoded[i++] : null;
      const i3 = i < encoded.length ? encoded[i++] : null;
      b64 += toBase64Digit(i1 >> 2);
      b64 += toBase64Digit((i1 & 3) << 4 | (i2 === null ? 0 : i2 >> 4));
      b64 += i2 === null ? "=" : toBase64Digit((i2 & 15) << 2 | (i3 === null ? 0 : i3 >> 6));
      b64 += i2 === null || i3 === null ? "=" : toBase64Digit(i3 & 63);
    }
    return b64;
  }
  function toBase64VLQ(value) {
    value = value < 0 ? (-value << 1) + 1 : value << 1;
    let out = "";
    do {
      let digit = value & 31;
      value = value >> 5;
      if (value > 0) {
        digit = digit | 32;
      }
      out += toBase64Digit(digit);
    } while (value > 0);
    return out;
  }
  var B64_DIGITS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  function toBase64Digit(value) {
    if (value < 0 || value >= 64) {
      throw new Error(`Can only encode value in the range [0, 63]`);
    }
    return B64_DIGITS[value];
  }
  var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
  var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
  var _INDENT_WITH = "  ";
  var _EmittedLine = class {
    constructor(indent) {
      this.indent = indent;
      this.partsLength = 0;
      this.parts = [];
      this.srcSpans = [];
    }
  };
  var EmitterVisitorContext = class _EmitterVisitorContext {
    static createRoot() {
      return new _EmitterVisitorContext(0);
    }
    constructor(_indent) {
      this._indent = _indent;
      this._lines = [new _EmittedLine(_indent)];
    }
    /**
     * @internal strip this from published d.ts files due to
     * https://github.com/microsoft/TypeScript/issues/36216
     */
    get _currentLine() {
      return this._lines[this._lines.length - 1];
    }
    println(from2, lastPart = "") {
      this.print(from2 || null, lastPart, true);
    }
    lineIsEmpty() {
      return this._currentLine.parts.length === 0;
    }
    lineLength() {
      return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;
    }
    print(from2, part, newLine = false) {
      if (part.length > 0) {
        this._currentLine.parts.push(part);
        this._currentLine.partsLength += part.length;
        this._currentLine.srcSpans.push(from2 && from2.sourceSpan || null);
      }
      if (newLine) {
        this._lines.push(new _EmittedLine(this._indent));
      }
    }
    removeEmptyLastLine() {
      if (this.lineIsEmpty()) {
        this._lines.pop();
      }
    }
    incIndent() {
      this._indent++;
      if (this.lineIsEmpty()) {
        this._currentLine.indent = this._indent;
      }
    }
    decIndent() {
      this._indent--;
      if (this.lineIsEmpty()) {
        this._currentLine.indent = this._indent;
      }
    }
    toSource() {
      return this.sourceLines.map((l) => l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join("") : "").join("\n");
    }
    toSourceMapGenerator(genFilePath, startsAtLine = 0) {
      const map3 = new SourceMapGenerator(genFilePath);
      let firstOffsetMapped = false;
      const mapFirstOffsetIfNeeded = () => {
        if (!firstOffsetMapped) {
          map3.addSource(genFilePath, " ").addMapping(0, genFilePath, 0, 0);
          firstOffsetMapped = true;
        }
      };
      for (let i = 0; i < startsAtLine; i++) {
        map3.addLine();
        mapFirstOffsetIfNeeded();
      }
      this.sourceLines.forEach((line, lineIdx) => {
        map3.addLine();
        const spans = line.srcSpans;
        const parts = line.parts;
        let col0 = line.indent * _INDENT_WITH.length;
        let spanIdx = 0;
        while (spanIdx < spans.length && !spans[spanIdx]) {
          col0 += parts[spanIdx].length;
          spanIdx++;
        }
        if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {
          firstOffsetMapped = true;
        } else {
          mapFirstOffsetIfNeeded();
        }
        while (spanIdx < spans.length) {
          const span = spans[spanIdx];
          const source = span.start.file;
          const sourceLine = span.start.line;
          const sourceCol = span.start.col;
          map3.addSource(source.url, source.content).addMapping(col0, source.url, sourceLine, sourceCol);
          col0 += parts[spanIdx].length;
          spanIdx++;
          while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {
            col0 += parts[spanIdx].length;
            spanIdx++;
          }
        }
      });
      return map3;
    }
    spanOf(line, column) {
      const emittedLine = this._lines[line];
      if (emittedLine) {
        let columnsLeft = column - _createIndent(emittedLine.indent).length;
        for (let partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {
          const part = emittedLine.parts[partIndex];
          if (part.length > columnsLeft) {
            return emittedLine.srcSpans[partIndex];
          }
          columnsLeft -= part.length;
        }
      }
      return null;
    }
    /**
     * @internal strip this from published d.ts files due to
     * https://github.com/microsoft/TypeScript/issues/36216
     */
    get sourceLines() {
      if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {
        return this._lines.slice(0, -1);
      }
      return this._lines;
    }
  };
  var AbstractEmitterVisitor = class {
    constructor(_escapeDollarInStrings) {
      this._escapeDollarInStrings = _escapeDollarInStrings;
    }
    printLeadingComments(stmt, ctx) {
      if (stmt.leadingComments === void 0) {
        return;
      }
      for (const comment of stmt.leadingComments) {
        if (comment instanceof JSDocComment) {
          ctx.print(stmt, `/*${comment.toString()}*/`, comment.trailingNewline);
        } else {
          if (comment.multiline) {
            ctx.print(stmt, `/* ${comment.text} */`, comment.trailingNewline);
          } else {
            comment.text.split("\n").forEach((line) => {
              ctx.println(stmt, `// ${line}`);
            });
          }
        }
      }
    }
    visitExpressionStmt(stmt, ctx) {
      this.printLeadingComments(stmt, ctx);
      stmt.expr.visitExpression(this, ctx);
      ctx.println(stmt, ";");
      return null;
    }
    visitReturnStmt(stmt, ctx) {
      this.printLeadingComments(stmt, ctx);
      ctx.print(stmt, `return `);
      stmt.value.visitExpression(this, ctx);
      ctx.println(stmt, ";");
      return null;
    }
    visitIfStmt(stmt, ctx) {
      this.printLeadingComments(stmt, ctx);
      ctx.print(stmt, `if (`);
      stmt.condition.visitExpression(this, ctx);
      ctx.print(stmt, `) {`);
      const hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;
      if (stmt.trueCase.length <= 1 && !hasElseCase) {
        ctx.print(stmt, ` `);
        this.visitAllStatements(stmt.trueCase, ctx);
        ctx.removeEmptyLastLine();
        ctx.print(stmt, ` `);
      } else {
        ctx.println();
        ctx.incIndent();
        this.visitAllStatements(stmt.trueCase, ctx);
        ctx.decIndent();
        if (hasElseCase) {
          ctx.println(stmt, `} else {`);
          ctx.incIndent();
          this.visitAllStatements(stmt.falseCase, ctx);
          ctx.decIndent();
        }
      }
      ctx.println(stmt, `}`);
      return null;
    }
    visitWriteVarExpr(expr, ctx) {
      const lineWasEmpty = ctx.lineIsEmpty();
      if (!lineWasEmpty) {
        ctx.print(expr, "(");
      }
      ctx.print(expr, `${expr.name} = `);
      expr.value.visitExpression(this, ctx);
      if (!lineWasEmpty) {
        ctx.print(expr, ")");
      }
      return null;
    }
    visitWriteKeyExpr(expr, ctx) {
      const lineWasEmpty = ctx.lineIsEmpty();
      if (!lineWasEmpty) {
        ctx.print(expr, "(");
      }
      expr.receiver.visitExpression(this, ctx);
      ctx.print(expr, `[`);
      expr.index.visitExpression(this, ctx);
      ctx.print(expr, `] = `);
      expr.value.visitExpression(this, ctx);
      if (!lineWasEmpty) {
        ctx.print(expr, ")");
      }
      return null;
    }
    visitWritePropExpr(expr, ctx) {
      const lineWasEmpty = ctx.lineIsEmpty();
      if (!lineWasEmpty) {
        ctx.print(expr, "(");
      }
      expr.receiver.visitExpression(this, ctx);
      ctx.print(expr, `.${expr.name} = `);
      expr.value.visitExpression(this, ctx);
      if (!lineWasEmpty) {
        ctx.print(expr, ")");
      }
      return null;
    }
    visitInvokeFunctionExpr(expr, ctx) {
      const shouldParenthesize = expr.fn instanceof ArrowFunctionExpr;
      if (shouldParenthesize) {
        ctx.print(expr.fn, "(");
      }
      expr.fn.visitExpression(this, ctx);
      if (shouldParenthesize) {
        ctx.print(expr.fn, ")");
      }
      ctx.print(expr, `(`);
      this.visitAllExpressions(expr.args, ctx, ",");
      ctx.print(expr, `)`);
      return null;
    }
    visitTaggedTemplateExpr(expr, ctx) {
      expr.tag.visitExpression(this, ctx);
      ctx.print(expr, "`" + expr.template.elements[0].rawText);
      for (let i = 1; i < expr.template.elements.length; i++) {
        ctx.print(expr, "${");
        expr.template.expressions[i - 1].visitExpression(this, ctx);
        ctx.print(expr, `}${expr.template.elements[i].rawText}`);
      }
      ctx.print(expr, "`");
      return null;
    }
    visitWrappedNodeExpr(ast, ctx) {
      throw new Error("Abstract emitter cannot visit WrappedNodeExpr.");
    }
    visitTypeofExpr(expr, ctx) {
      ctx.print(expr, "typeof ");
      expr.expr.visitExpression(this, ctx);
    }
    visitReadVarExpr(ast, ctx) {
      ctx.print(ast, ast.name);
      return null;
    }
    visitInstantiateExpr(ast, ctx) {
      ctx.print(ast, `new `);
      ast.classExpr.visitExpression(this, ctx);
      ctx.print(ast, `(`);
      this.visitAllExpressions(ast.args, ctx, ",");
      ctx.print(ast, `)`);
      return null;
    }
    visitLiteralExpr(ast, ctx) {
      const value = ast.value;
      if (typeof value === "string") {
        ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));
      } else {
        ctx.print(ast, `${value}`);
      }
      return null;
    }
    visitLocalizedString(ast, ctx) {
      const head = ast.serializeI18nHead();
      ctx.print(ast, "$localize `" + head.raw);
      for (let i = 1; i < ast.messageParts.length; i++) {
        ctx.print(ast, "${");
        ast.expressions[i - 1].visitExpression(this, ctx);
        ctx.print(ast, `}${ast.serializeI18nTemplatePart(i).raw}`);
      }
      ctx.print(ast, "`");
      return null;
    }
    visitConditionalExpr(ast, ctx) {
      ctx.print(ast, `(`);
      ast.condition.visitExpression(this, ctx);
      ctx.print(ast, "? ");
      ast.trueCase.visitExpression(this, ctx);
      ctx.print(ast, ": ");
      ast.falseCase.visitExpression(this, ctx);
      ctx.print(ast, `)`);
      return null;
    }
    visitDynamicImportExpr(ast, ctx) {
      ctx.print(ast, `import(${ast.url})`);
    }
    visitNotExpr(ast, ctx) {
      ctx.print(ast, "!");
      ast.condition.visitExpression(this, ctx);
      return null;
    }
    visitUnaryOperatorExpr(ast, ctx) {
      let opStr;
      switch (ast.operator) {
        case UnaryOperator.Plus:
          opStr = "+";
          break;
        case UnaryOperator.Minus:
          opStr = "-";
          break;
        default:
          throw new Error(`Unknown operator ${ast.operator}`);
      }
      if (ast.parens)
        ctx.print(ast, `(`);
      ctx.print(ast, opStr);
      ast.expr.visitExpression(this, ctx);
      if (ast.parens)
        ctx.print(ast, `)`);
      return null;
    }
    visitBinaryOperatorExpr(ast, ctx) {
      let opStr;
      switch (ast.operator) {
        case BinaryOperator.Equals:
          opStr = "==";
          break;
        case BinaryOperator.Identical:
          opStr = "===";
          break;
        case BinaryOperator.NotEquals:
          opStr = "!=";
          break;
        case BinaryOperator.NotIdentical:
          opStr = "!==";
          break;
        case BinaryOperator.And:
          opStr = "&&";
          break;
        case BinaryOperator.BitwiseOr:
          opStr = "|";
          break;
        case BinaryOperator.BitwiseAnd:
          opStr = "&";
          break;
        case BinaryOperator.Or:
          opStr = "||";
          break;
        case BinaryOperator.Plus:
          opStr = "+";
          break;
        case BinaryOperator.Minus:
          opStr = "-";
          break;
        case BinaryOperator.Divide:
          opStr = "/";
          break;
        case BinaryOperator.Multiply:
          opStr = "*";
          break;
        case BinaryOperator.Modulo:
          opStr = "%";
          break;
        case BinaryOperator.Lower:
          opStr = "<";
          break;
        case BinaryOperator.LowerEquals:
          opStr = "<=";
          break;
        case BinaryOperator.Bigger:
          opStr = ">";
          break;
        case BinaryOperator.BiggerEquals:
          opStr = ">=";
          break;
        case BinaryOperator.NullishCoalesce:
          opStr = "??";
          break;
        default:
          throw new Error(`Unknown operator ${ast.operator}`);
      }
      if (ast.parens)
        ctx.print(ast, `(`);
      ast.lhs.visitExpression(this, ctx);
      ctx.print(ast, ` ${opStr} `);
      ast.rhs.visitExpression(this, ctx);
      if (ast.parens)
        ctx.print(ast, `)`);
      return null;
    }
    visitReadPropExpr(ast, ctx) {
      ast.receiver.visitExpression(this, ctx);
      ctx.print(ast, `.`);
      ctx.print(ast, ast.name);
      return null;
    }
    visitReadKeyExpr(ast, ctx) {
      ast.receiver.visitExpression(this, ctx);
      ctx.print(ast, `[`);
      ast.index.visitExpression(this, ctx);
      ctx.print(ast, `]`);
      return null;
    }
    visitLiteralArrayExpr(ast, ctx) {
      ctx.print(ast, `[`);
      this.visitAllExpressions(ast.entries, ctx, ",");
      ctx.print(ast, `]`);
      return null;
    }
    visitLiteralMapExpr(ast, ctx) {
      ctx.print(ast, `{`);
      this.visitAllObjects((entry) => {
        ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}:`);
        entry.value.visitExpression(this, ctx);
      }, ast.entries, ctx, ",");
      ctx.print(ast, `}`);
      return null;
    }
    visitCommaExpr(ast, ctx) {
      ctx.print(ast, "(");
      this.visitAllExpressions(ast.parts, ctx, ",");
      ctx.print(ast, ")");
      return null;
    }
    visitAllExpressions(expressions, ctx, separator) {
      this.visitAllObjects((expr) => expr.visitExpression(this, ctx), expressions, ctx, separator);
    }
    visitAllObjects(handler, expressions, ctx, separator) {
      let incrementedIndent = false;
      for (let i = 0; i < expressions.length; i++) {
        if (i > 0) {
          if (ctx.lineLength() > 80) {
            ctx.print(null, separator, true);
            if (!incrementedIndent) {
              ctx.incIndent();
              ctx.incIndent();
              incrementedIndent = true;
            }
          } else {
            ctx.print(null, separator, false);
          }
        }
        handler(expressions[i]);
      }
      if (incrementedIndent) {
        ctx.decIndent();
        ctx.decIndent();
      }
    }
    visitAllStatements(statements, ctx) {
      statements.forEach((stmt) => stmt.visitStatement(this, ctx));
    }
  };
  function escapeIdentifier(input2, escapeDollar, alwaysQuote = true) {
    if (input2 == null) {
      return null;
    }
    const body = input2.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match2) => {
      if (match2[0] == "$") {
        return escapeDollar ? "\\$" : "$";
      } else if (match2[0] == "\n") {
        return "\\n";
      } else if (match2[0] == "\r") {
        return "\\r";
      } else {
        return `\\${match2[0]}`;
      }
    });
    const requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
    return requiresQuotes ? `'${body}'` : body;
  }
  function _createIndent(count) {
    let res = "";
    for (let i = 0; i < count; i++) {
      res += _INDENT_WITH;
    }
    return res;
  }
  function typeWithParameters(type, numParams) {
    if (numParams === 0) {
      return expressionType(type);
    }
    const params = [];
    for (let i = 0; i < numParams; i++) {
      params.push(DYNAMIC_TYPE);
    }
    return expressionType(type, void 0, params);
  }
  var ANIMATE_SYMBOL_PREFIX = "@";
  function prepareSyntheticPropertyName(name) {
    return `${ANIMATE_SYMBOL_PREFIX}${name}`;
  }
  function prepareSyntheticListenerName(name, phase) {
    return `${ANIMATE_SYMBOL_PREFIX}${name}.${phase}`;
  }
  function getSafePropertyAccessString(accessor, name) {
    const escapedName = escapeIdentifier(name, false, false);
    return escapedName !== name ? `${accessor}[${escapedName}]` : `${accessor}.${name}`;
  }
  function prepareSyntheticListenerFunctionName(name, phase) {
    return `animation_${name}_${phase}`;
  }
  function jitOnlyGuardedExpression(expr) {
    return guardedExpression("ngJitMode", expr);
  }
  function guardedExpression(guard, expr) {
    const guardExpr = new ExternalExpr({ name: guard, moduleName: null });
    const guardNotDefined = new BinaryOperatorExpr(BinaryOperator.Identical, new TypeofExpr(guardExpr), literal("undefined"));
    const guardUndefinedOrTrue = new BinaryOperatorExpr(
      BinaryOperator.Or,
      guardNotDefined,
      guardExpr,
      /* type */
      void 0,
      /* sourceSpan */
      void 0,
      true
    );
    return new BinaryOperatorExpr(BinaryOperator.And, guardUndefinedOrTrue, expr);
  }
  function wrapReference(value) {
    const wrapped = new WrappedNodeExpr(value);
    return { value: wrapped, type: wrapped };
  }
  function refsToArray(refs, shouldForwardDeclare) {
    const values = literalArr(refs.map((ref) => ref.value));
    return shouldForwardDeclare ? arrowFn([], values) : values;
  }
  function createMayBeForwardRefExpression(expression, forwardRef2) {
    return { expression, forwardRef: forwardRef2 };
  }
  function convertFromMaybeForwardRefExpression({ expression, forwardRef: forwardRef2 }) {
    switch (forwardRef2) {
      case 0:
      case 1:
        return expression;
      case 2:
        return generateForwardRef(expression);
    }
  }
  function generateForwardRef(expr) {
    return importExpr(Identifiers.forwardRef).callFn([arrowFn([], expr)]);
  }
  var R3FactoryDelegateType;
  (function(R3FactoryDelegateType2) {
    R3FactoryDelegateType2[R3FactoryDelegateType2["Class"] = 0] = "Class";
    R3FactoryDelegateType2[R3FactoryDelegateType2["Function"] = 1] = "Function";
  })(R3FactoryDelegateType || (R3FactoryDelegateType = {}));
  var FactoryTarget$1;
  (function(FactoryTarget3) {
    FactoryTarget3[FactoryTarget3["Directive"] = 0] = "Directive";
    FactoryTarget3[FactoryTarget3["Component"] = 1] = "Component";
    FactoryTarget3[FactoryTarget3["Injectable"] = 2] = "Injectable";
    FactoryTarget3[FactoryTarget3["Pipe"] = 3] = "Pipe";
    FactoryTarget3[FactoryTarget3["NgModule"] = 4] = "NgModule";
  })(FactoryTarget$1 || (FactoryTarget$1 = {}));
  function compileFactoryFunction(meta) {
    const t = variable("t");
    let baseFactoryVar = null;
    const typeForCtor = !isDelegatedFactoryMetadata(meta) ? new BinaryOperatorExpr(BinaryOperator.Or, t, meta.type.value) : t;
    let ctorExpr = null;
    if (meta.deps !== null) {
      if (meta.deps !== "invalid") {
        ctorExpr = new InstantiateExpr(typeForCtor, injectDependencies(meta.deps, meta.target));
      }
    } else {
      baseFactoryVar = variable(`\u0275${meta.name}_BaseFactory`);
      ctorExpr = baseFactoryVar.callFn([typeForCtor]);
    }
    const body = [];
    let retExpr = null;
    function makeConditionalFactory(nonCtorExpr) {
      const r = variable("r");
      body.push(r.set(NULL_EXPR).toDeclStmt());
      const ctorStmt = ctorExpr !== null ? r.set(ctorExpr).toStmt() : importExpr(Identifiers.invalidFactory).callFn([]).toStmt();
      body.push(ifStmt(t, [ctorStmt], [r.set(nonCtorExpr).toStmt()]));
      return r;
    }
    if (isDelegatedFactoryMetadata(meta)) {
      const delegateArgs = injectDependencies(meta.delegateDeps, meta.target);
      const factoryExpr = new (meta.delegateType === R3FactoryDelegateType.Class ? InstantiateExpr : InvokeFunctionExpr)(meta.delegate, delegateArgs);
      retExpr = makeConditionalFactory(factoryExpr);
    } else if (isExpressionFactoryMetadata(meta)) {
      retExpr = makeConditionalFactory(meta.expression);
    } else {
      retExpr = ctorExpr;
    }
    if (retExpr === null) {
      body.push(importExpr(Identifiers.invalidFactory).callFn([]).toStmt());
    } else if (baseFactoryVar !== null) {
      const getInheritedFactoryCall = importExpr(Identifiers.getInheritedFactory).callFn([meta.type.value]);
      const baseFactory = new BinaryOperatorExpr(BinaryOperator.Or, baseFactoryVar, baseFactoryVar.set(getInheritedFactoryCall));
      body.push(new ReturnStatement(baseFactory.callFn([typeForCtor])));
    } else {
      body.push(new ReturnStatement(retExpr));
    }
    let factoryFn = fn([new FnParam("t", DYNAMIC_TYPE)], body, INFERRED_TYPE, void 0, `${meta.name}_Factory`);
    if (baseFactoryVar !== null) {
      factoryFn = arrowFn([], [
        new DeclareVarStmt(baseFactoryVar.name),
        new ReturnStatement(factoryFn)
      ]).callFn(
        [],
        /* sourceSpan */
        void 0,
        /* pure */
        true
      );
    }
    return {
      expression: factoryFn,
      statements: [],
      type: createFactoryType(meta)
    };
  }
  function createFactoryType(meta) {
    const ctorDepsType = meta.deps !== null && meta.deps !== "invalid" ? createCtorDepsType(meta.deps) : NONE_TYPE;
    return expressionType(importExpr(Identifiers.FactoryDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount), ctorDepsType]));
  }
  function injectDependencies(deps, target) {
    return deps.map((dep, index) => compileInjectDependency(dep, target, index));
  }
  function compileInjectDependency(dep, target, index) {
    if (dep.token === null) {
      return importExpr(Identifiers.invalidFactoryDep).callFn([literal(index)]);
    } else if (dep.attributeNameType === null) {
      const flags = 0 | (dep.self ? 2 : 0) | (dep.skipSelf ? 4 : 0) | (dep.host ? 1 : 0) | (dep.optional ? 8 : 0) | (target === FactoryTarget$1.Pipe ? 16 : 0);
      let flagsParam = flags !== 0 || dep.optional ? literal(flags) : null;
      const injectArgs2 = [dep.token];
      if (flagsParam) {
        injectArgs2.push(flagsParam);
      }
      const injectFn = getInjectFn(target);
      return importExpr(injectFn).callFn(injectArgs2);
    } else {
      return importExpr(Identifiers.injectAttribute).callFn([dep.token]);
    }
  }
  function createCtorDepsType(deps) {
    let hasTypes = false;
    const attributeTypes = deps.map((dep) => {
      const type = createCtorDepType(dep);
      if (type !== null) {
        hasTypes = true;
        return type;
      } else {
        return literal(null);
      }
    });
    if (hasTypes) {
      return expressionType(literalArr(attributeTypes));
    } else {
      return NONE_TYPE;
    }
  }
  function createCtorDepType(dep) {
    const entries = [];
    if (dep.attributeNameType !== null) {
      entries.push({ key: "attribute", value: dep.attributeNameType, quoted: false });
    }
    if (dep.optional) {
      entries.push({ key: "optional", value: literal(true), quoted: false });
    }
    if (dep.host) {
      entries.push({ key: "host", value: literal(true), quoted: false });
    }
    if (dep.self) {
      entries.push({ key: "self", value: literal(true), quoted: false });
    }
    if (dep.skipSelf) {
      entries.push({ key: "skipSelf", value: literal(true), quoted: false });
    }
    return entries.length > 0 ? literalMap(entries) : null;
  }
  function isDelegatedFactoryMetadata(meta) {
    return meta.delegateType !== void 0;
  }
  function isExpressionFactoryMetadata(meta) {
    return meta.expression !== void 0;
  }
  function getInjectFn(target) {
    switch (target) {
      case FactoryTarget$1.Component:
      case FactoryTarget$1.Directive:
      case FactoryTarget$1.Pipe:
        return Identifiers.directiveInject;
      case FactoryTarget$1.NgModule:
      case FactoryTarget$1.Injectable:
      default:
        return Identifiers.inject;
    }
  }
  var TagContentType;
  (function(TagContentType2) {
    TagContentType2[TagContentType2["RAW_TEXT"] = 0] = "RAW_TEXT";
    TagContentType2[TagContentType2["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
    TagContentType2[TagContentType2["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
  })(TagContentType || (TagContentType = {}));
  function splitNsName(elementName, fatal = true) {
    if (elementName[0] != ":") {
      return [null, elementName];
    }
    const colonIndex = elementName.indexOf(":", 1);
    if (colonIndex === -1) {
      if (fatal) {
        throw new Error(`Unsupported format "${elementName}" expecting ":namespace:name"`);
      } else {
        return [null, elementName];
      }
    }
    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
  }
  function isNgContainer(tagName) {
    return splitNsName(tagName)[1] === "ng-container";
  }
  function isNgContent(tagName) {
    return splitNsName(tagName)[1] === "ng-content";
  }
  function isNgTemplate(tagName) {
    return splitNsName(tagName)[1] === "ng-template";
  }
  function getNsPrefix(fullName) {
    return fullName === null ? null : splitNsName(fullName)[0];
  }
  function mergeNsAndName(prefix, localName) {
    return prefix ? `:${prefix}:${localName}` : localName;
  }
  var Comment$1 = class {
    constructor(value, sourceSpan) {
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    visit(_visitor2) {
      throw new Error("visit() not implemented for Comment");
    }
  };
  var Text$3 = class {
    constructor(value, sourceSpan) {
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    visit(visitor) {
      return visitor.visitText(this);
    }
  };
  var BoundText = class {
    constructor(value, sourceSpan, i18n2) {
      this.value = value;
      this.sourceSpan = sourceSpan;
      this.i18n = i18n2;
    }
    visit(visitor) {
      return visitor.visitBoundText(this);
    }
  };
  var TextAttribute = class {
    constructor(name, value, sourceSpan, keySpan, valueSpan, i18n2) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
      this.keySpan = keySpan;
      this.valueSpan = valueSpan;
      this.i18n = i18n2;
    }
    visit(visitor) {
      return visitor.visitTextAttribute(this);
    }
  };
  var BoundAttribute = class _BoundAttribute {
    constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan, i18n2) {
      this.name = name;
      this.type = type;
      this.securityContext = securityContext;
      this.value = value;
      this.unit = unit;
      this.sourceSpan = sourceSpan;
      this.keySpan = keySpan;
      this.valueSpan = valueSpan;
      this.i18n = i18n2;
    }
    static fromBoundElementProperty(prop, i18n2) {
      if (prop.keySpan === void 0) {
        throw new Error(`Unexpected state: keySpan must be defined for bound attributes but was not for ${prop.name}: ${prop.sourceSpan}`);
      }
      return new _BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n2);
    }
    visit(visitor) {
      return visitor.visitBoundAttribute(this);
    }
  };
  var BoundEvent = class _BoundEvent {
    constructor(name, type, handler, target, phase, sourceSpan, handlerSpan, keySpan) {
      this.name = name;
      this.type = type;
      this.handler = handler;
      this.target = target;
      this.phase = phase;
      this.sourceSpan = sourceSpan;
      this.handlerSpan = handlerSpan;
      this.keySpan = keySpan;
    }
    static fromParsedEvent(event) {
      const target = event.type === 0 ? event.targetOrPhase : null;
      const phase = event.type === 1 ? event.targetOrPhase : null;
      if (event.keySpan === void 0) {
        throw new Error(`Unexpected state: keySpan must be defined for bound event but was not for ${event.name}: ${event.sourceSpan}`);
      }
      return new _BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan, event.keySpan);
    }
    visit(visitor) {
      return visitor.visitBoundEvent(this);
    }
  };
  var Element$1 = class {
    constructor(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
      this.name = name;
      this.attributes = attributes;
      this.inputs = inputs;
      this.outputs = outputs;
      this.children = children;
      this.references = references;
      this.sourceSpan = sourceSpan;
      this.startSourceSpan = startSourceSpan;
      this.endSourceSpan = endSourceSpan;
      this.i18n = i18n2;
    }
    visit(visitor) {
      return visitor.visitElement(this);
    }
  };
  var DeferredTrigger = class {
    constructor(nameSpan, sourceSpan, prefetchSpan, whenOrOnSourceSpan) {
      this.nameSpan = nameSpan;
      this.sourceSpan = sourceSpan;
      this.prefetchSpan = prefetchSpan;
      this.whenOrOnSourceSpan = whenOrOnSourceSpan;
    }
    visit(visitor) {
      return visitor.visitDeferredTrigger(this);
    }
  };
  var BoundDeferredTrigger = class extends DeferredTrigger {
    constructor(value, sourceSpan, prefetchSpan, whenSourceSpan) {
      super(
        /** nameSpan */
        null,
        sourceSpan,
        prefetchSpan,
        whenSourceSpan
      );
      this.value = value;
    }
  };
  var IdleDeferredTrigger = class extends DeferredTrigger {
  };
  var ImmediateDeferredTrigger = class extends DeferredTrigger {
  };
  var HoverDeferredTrigger = class extends DeferredTrigger {
    constructor(reference2, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {
      super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
      this.reference = reference2;
    }
  };
  var TimerDeferredTrigger = class extends DeferredTrigger {
    constructor(delay, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {
      super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
      this.delay = delay;
    }
  };
  var InteractionDeferredTrigger = class extends DeferredTrigger {
    constructor(reference2, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {
      super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
      this.reference = reference2;
    }
  };
  var ViewportDeferredTrigger = class extends DeferredTrigger {
    constructor(reference2, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {
      super(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
      this.reference = reference2;
    }
  };
  var BlockNode = class {
    constructor(nameSpan, sourceSpan, startSourceSpan, endSourceSpan) {
      this.nameSpan = nameSpan;
      this.sourceSpan = sourceSpan;
      this.startSourceSpan = startSourceSpan;
      this.endSourceSpan = endSourceSpan;
    }
  };
  var DeferredBlockPlaceholder = class extends BlockNode {
    constructor(children, minimumTime, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
      super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
      this.children = children;
      this.minimumTime = minimumTime;
      this.i18n = i18n2;
    }
    visit(visitor) {
      return visitor.visitDeferredBlockPlaceholder(this);
    }
  };
  var DeferredBlockLoading = class extends BlockNode {
    constructor(children, afterTime, minimumTime, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
      super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
      this.children = children;
      this.afterTime = afterTime;
      this.minimumTime = minimumTime;
      this.i18n = i18n2;
    }
    visit(visitor) {
      return visitor.visitDeferredBlockLoading(this);
    }
  };
  var DeferredBlockError = class extends BlockNode {
    constructor(children, nameSpan, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
      super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
      this.children = children;
      this.i18n = i18n2;
    }
    visit(visitor) {
      return visitor.visitDeferredBlockError(this);
    }
  };
  var DeferredBlock = class extends BlockNode {
    constructor(children, triggers, prefetchTriggers, placeholder, loading, error2, nameSpan, sourceSpan, mainBlockSpan, startSourceSpan, endSourceSpan, i18n2) {
      super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
      this.children = children;
      this.placeholder = placeholder;
      this.loading = loading;
      this.error = error2;
      this.mainBlockSpan = mainBlockSpan;
      this.i18n = i18n2;
      this.triggers = triggers;
      this.prefetchTriggers = prefetchTriggers;
      this.definedTriggers = Object.keys(triggers);
      this.definedPrefetchTriggers = Object.keys(prefetchTriggers);
    }
    visit(visitor) {
      return visitor.visitDeferredBlock(this);
    }
    visitAll(visitor) {
      this.visitTriggers(this.definedTriggers, this.triggers, visitor);
      this.visitTriggers(this.definedPrefetchTriggers, this.prefetchTriggers, visitor);
      visitAll$1(visitor, this.children);
      const remainingBlocks = [this.placeholder, this.loading, this.error].filter((x) => x !== null);
      visitAll$1(visitor, remainingBlocks);
    }
    visitTriggers(keys, triggers, visitor) {
      visitAll$1(visitor, keys.map((k) => triggers[k]));
    }
  };
  var SwitchBlock = class extends BlockNode {
    constructor(expression, cases, unknownBlocks, sourceSpan, startSourceSpan, endSourceSpan, nameSpan) {
      super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
      this.expression = expression;
      this.cases = cases;
      this.unknownBlocks = unknownBlocks;
    }
    visit(visitor) {
      return visitor.visitSwitchBlock(this);
    }
  };
  var SwitchBlockCase = class extends BlockNode {
    constructor(expression, children, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n2) {
      super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
      this.expression = expression;
      this.children = children;
      this.i18n = i18n2;
    }
    visit(visitor) {
      return visitor.visitSwitchBlockCase(this);
    }
  };
  var ForLoopBlock = class extends BlockNode {
    constructor(item, expression, trackBy, trackKeywordSpan, contextVariables, children, empty, sourceSpan, mainBlockSpan, startSourceSpan, endSourceSpan, nameSpan, i18n2) {
      super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
      this.item = item;
      this.expression = expression;
      this.trackBy = trackBy;
      this.trackKeywordSpan = trackKeywordSpan;
      this.contextVariables = contextVariables;
      this.children = children;
      this.empty = empty;
      this.mainBlockSpan = mainBlockSpan;
      this.i18n = i18n2;
    }
    visit(visitor) {
      return visitor.visitForLoopBlock(this);
    }
  };
  var ForLoopBlockEmpty = class extends BlockNode {
    constructor(children, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n2) {
      super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
      this.children = children;
      this.i18n = i18n2;
    }
    visit(visitor) {
      return visitor.visitForLoopBlockEmpty(this);
    }
  };
  var IfBlock = class extends BlockNode {
    constructor(branches, sourceSpan, startSourceSpan, endSourceSpan, nameSpan) {
      super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
      this.branches = branches;
    }
    visit(visitor) {
      return visitor.visitIfBlock(this);
    }
  };
  var IfBlockBranch = class extends BlockNode {
    constructor(expression, children, expressionAlias, sourceSpan, startSourceSpan, endSourceSpan, nameSpan, i18n2) {
      super(nameSpan, sourceSpan, startSourceSpan, endSourceSpan);
      this.expression = expression;
      this.children = children;
      this.expressionAlias = expressionAlias;
      this.i18n = i18n2;
    }
    visit(visitor) {
      return visitor.visitIfBlockBranch(this);
    }
  };
  var UnknownBlock = class {
    constructor(name, sourceSpan, nameSpan) {
      this.name = name;
      this.sourceSpan = sourceSpan;
      this.nameSpan = nameSpan;
    }
    visit(visitor) {
      return visitor.visitUnknownBlock(this);
    }
  };
  var Template = class {
    constructor(tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n2) {
      this.tagName = tagName;
      this.attributes = attributes;
      this.inputs = inputs;
      this.outputs = outputs;
      this.templateAttrs = templateAttrs;
      this.children = children;
      this.references = references;
      this.variables = variables;
      this.sourceSpan = sourceSpan;
      this.startSourceSpan = startSourceSpan;
      this.endSourceSpan = endSourceSpan;
      this.i18n = i18n2;
    }
    visit(visitor) {
      return visitor.visitTemplate(this);
    }
  };
  var Content = class {
    constructor(selector, attributes, sourceSpan, i18n2) {
      this.selector = selector;
      this.attributes = attributes;
      this.sourceSpan = sourceSpan;
      this.i18n = i18n2;
      this.name = "ng-content";
    }
    visit(visitor) {
      return visitor.visitContent(this);
    }
  };
  var Variable = class {
    constructor(name, value, sourceSpan, keySpan, valueSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
      this.keySpan = keySpan;
      this.valueSpan = valueSpan;
    }
    visit(visitor) {
      return visitor.visitVariable(this);
    }
  };
  var Reference = class {
    constructor(name, value, sourceSpan, keySpan, valueSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
      this.keySpan = keySpan;
      this.valueSpan = valueSpan;
    }
    visit(visitor) {
      return visitor.visitReference(this);
    }
  };
  var Icu$1 = class {
    constructor(vars, placeholders, sourceSpan, i18n2) {
      this.vars = vars;
      this.placeholders = placeholders;
      this.sourceSpan = sourceSpan;
      this.i18n = i18n2;
    }
    visit(visitor) {
      return visitor.visitIcu(this);
    }
  };
  function visitAll$1(visitor, nodes) {
    const result = [];
    if (visitor.visit) {
      for (const node of nodes) {
        visitor.visit(node) || node.visit(visitor);
      }
    } else {
      for (const node of nodes) {
        const newNode = node.visit(visitor);
        if (newNode) {
          result.push(newNode);
        }
      }
    }
    return result;
  }
  var Message = class {
    /**
     * @param nodes message AST
     * @param placeholders maps placeholder names to static content and their source spans
     * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
     * @param meaning
     * @param description
     * @param customId
     */
    constructor(nodes, placeholders, placeholderToMessage, meaning, description, customId) {
      this.nodes = nodes;
      this.placeholders = placeholders;
      this.placeholderToMessage = placeholderToMessage;
      this.meaning = meaning;
      this.description = description;
      this.customId = customId;
      this.legacyIds = [];
      this.id = this.customId;
      this.messageString = serializeMessage(this.nodes);
      if (nodes.length) {
        this.sources = [{
          filePath: nodes[0].sourceSpan.start.file.url,
          startLine: nodes[0].sourceSpan.start.line + 1,
          startCol: nodes[0].sourceSpan.start.col + 1,
          endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,
          endCol: nodes[0].sourceSpan.start.col + 1
        }];
      } else {
        this.sources = [];
      }
    }
  };
  var Text$2 = class {
    constructor(value, sourceSpan) {
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    visit(visitor, context2) {
      return visitor.visitText(this, context2);
    }
  };
  var Container = class {
    constructor(children, sourceSpan) {
      this.children = children;
      this.sourceSpan = sourceSpan;
    }
    visit(visitor, context2) {
      return visitor.visitContainer(this, context2);
    }
  };
  var Icu = class {
    constructor(expression, type, cases, sourceSpan, expressionPlaceholder) {
      this.expression = expression;
      this.type = type;
      this.cases = cases;
      this.sourceSpan = sourceSpan;
      this.expressionPlaceholder = expressionPlaceholder;
    }
    visit(visitor, context2) {
      return visitor.visitIcu(this, context2);
    }
  };
  var TagPlaceholder = class {
    constructor(tag, attrs, startName, closeName, children, isVoid, sourceSpan, startSourceSpan, endSourceSpan) {
      this.tag = tag;
      this.attrs = attrs;
      this.startName = startName;
      this.closeName = closeName;
      this.children = children;
      this.isVoid = isVoid;
      this.sourceSpan = sourceSpan;
      this.startSourceSpan = startSourceSpan;
      this.endSourceSpan = endSourceSpan;
    }
    visit(visitor, context2) {
      return visitor.visitTagPlaceholder(this, context2);
    }
  };
  var Placeholder = class {
    constructor(value, name, sourceSpan) {
      this.value = value;
      this.name = name;
      this.sourceSpan = sourceSpan;
    }
    visit(visitor, context2) {
      return visitor.visitPlaceholder(this, context2);
    }
  };
  var IcuPlaceholder = class {
    constructor(value, name, sourceSpan) {
      this.value = value;
      this.name = name;
      this.sourceSpan = sourceSpan;
    }
    visit(visitor, context2) {
      return visitor.visitIcuPlaceholder(this, context2);
    }
  };
  var BlockPlaceholder = class {
    constructor(name, parameters, startName, closeName, children, sourceSpan, startSourceSpan, endSourceSpan) {
      this.name = name;
      this.parameters = parameters;
      this.startName = startName;
      this.closeName = closeName;
      this.children = children;
      this.sourceSpan = sourceSpan;
      this.startSourceSpan = startSourceSpan;
      this.endSourceSpan = endSourceSpan;
    }
    visit(visitor, context2) {
      return visitor.visitBlockPlaceholder(this, context2);
    }
  };
  function serializeMessage(messageNodes) {
    const visitor = new LocalizeMessageStringVisitor();
    const str = messageNodes.map((n) => n.visit(visitor)).join("");
    return str;
  }
  var LocalizeMessageStringVisitor = class {
    visitText(text2) {
      return text2.value;
    }
    visitContainer(container) {
      return container.children.map((child) => child.visit(this)).join("");
    }
    visitIcu(icu) {
      const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
      return `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(" ")}}`;
    }
    visitTagPlaceholder(ph) {
      const children = ph.children.map((child) => child.visit(this)).join("");
      return `{$${ph.startName}}${children}{$${ph.closeName}}`;
    }
    visitPlaceholder(ph) {
      return `{$${ph.name}}`;
    }
    visitIcuPlaceholder(ph) {
      return `{$${ph.name}}`;
    }
    visitBlockPlaceholder(ph) {
      const children = ph.children.map((child) => child.visit(this)).join("");
      return `{$${ph.startName}}${children}{$${ph.closeName}}`;
    }
  };
  var _Visitor$2 = class {
    visitTag(tag) {
      const strAttrs = this._serializeAttributes(tag.attrs);
      if (tag.children.length == 0) {
        return `<${tag.name}${strAttrs}/>`;
      }
      const strChildren = tag.children.map((node) => node.visit(this));
      return `<${tag.name}${strAttrs}>${strChildren.join("")}</${tag.name}>`;
    }
    visitText(text2) {
      return text2.value;
    }
    visitDeclaration(decl) {
      return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;
    }
    _serializeAttributes(attrs) {
      const strAttrs = Object.keys(attrs).map((name) => `${name}="${attrs[name]}"`).join(" ");
      return strAttrs.length > 0 ? " " + strAttrs : "";
    }
    visitDoctype(doctype) {
      return `<!DOCTYPE ${doctype.rootTag} [
${doctype.dtd}
]>`;
    }
  };
  var _visitor = new _Visitor$2();
  function toPublicName(internalName) {
    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, "_");
  }
  var CLOSURE_TRANSLATION_VAR_PREFIX = "MSG_";
  var TRANSLATION_VAR_PREFIX$1 = "i18n_";
  var I18N_ATTR = "i18n";
  var I18N_ATTR_PREFIX = "i18n-";
  var I18N_ICU_VAR_PREFIX = "VAR_";
  var I18N_ICU_MAPPING_PREFIX$1 = "I18N_EXP_";
  var I18N_PLACEHOLDER_SYMBOL = "\uFFFD";
  function isI18nAttribute(name) {
    return name === I18N_ATTR || name.startsWith(I18N_ATTR_PREFIX);
  }
  function isI18nRootNode(meta) {
    return meta instanceof Message;
  }
  function isSingleI18nIcu(meta) {
    return isI18nRootNode(meta) && meta.nodes.length === 1 && meta.nodes[0] instanceof Icu;
  }
  function hasI18nMeta(node) {
    return !!node.i18n;
  }
  function hasI18nAttrs(element2) {
    return element2.attrs.some((attr) => isI18nAttribute(attr.name));
  }
  function icuFromI18nMessage(message) {
    return message.nodes[0];
  }
  function wrapI18nPlaceholder(content, contextId = 0) {
    const blockId = contextId > 0 ? `:${contextId}` : "";
    return `${I18N_PLACEHOLDER_SYMBOL}${content}${blockId}${I18N_PLACEHOLDER_SYMBOL}`;
  }
  function assembleI18nBoundString(strings, bindingStartIndex = 0, contextId = 0) {
    if (!strings.length)
      return "";
    let acc = "";
    const lastIdx = strings.length - 1;
    for (let i = 0; i < lastIdx; i++) {
      acc += `${strings[i]}${wrapI18nPlaceholder(bindingStartIndex + i, contextId)}`;
    }
    acc += strings[lastIdx];
    return acc;
  }
  function getSeqNumberGenerator(startsAt = 0) {
    let current = startsAt;
    return () => current++;
  }
  function placeholdersToParams(placeholders) {
    const params = {};
    placeholders.forEach((values, key) => {
      params[key] = literal(values.length > 1 ? `[${values.join("|")}]` : values[0]);
    });
    return params;
  }
  function updatePlaceholderMap(map3, name, ...values) {
    const current = map3.get(name) || [];
    current.push(...values);
    map3.set(name, current);
  }
  function assembleBoundTextPlaceholders(meta, bindingStartIndex = 0, contextId = 0) {
    const startIdx = bindingStartIndex;
    const placeholders = /* @__PURE__ */ new Map();
    const node = meta instanceof Message ? meta.nodes.find((node2) => node2 instanceof Container) : meta;
    if (node) {
      node.children.filter((child) => child instanceof Placeholder).forEach((child, idx) => {
        const content = wrapI18nPlaceholder(startIdx + idx, contextId);
        updatePlaceholderMap(placeholders, child.name, content);
      });
    }
    return placeholders;
  }
  function formatI18nPlaceholderNamesInMap(params = {}, useCamelCase) {
    const _params = {};
    if (params && Object.keys(params).length) {
      Object.keys(params).forEach((key) => _params[formatI18nPlaceholderName(key, useCamelCase)] = params[key]);
    }
    return _params;
  }
  function formatI18nPlaceholderName(name, useCamelCase = true) {
    const publicName = toPublicName(name);
    if (!useCamelCase) {
      return publicName;
    }
    const chunks = publicName.split("_");
    if (chunks.length === 1) {
      return name.toLowerCase();
    }
    let postfix;
    if (/^\d+$/.test(chunks[chunks.length - 1])) {
      postfix = chunks.pop();
    }
    let raw = chunks.shift().toLowerCase();
    if (chunks.length) {
      raw += chunks.map((c) => c.charAt(0).toUpperCase() + c.slice(1).toLowerCase()).join("");
    }
    return postfix ? `${raw}_${postfix}` : raw;
  }
  function getTranslationConstPrefix(extra) {
    return `${CLOSURE_TRANSLATION_VAR_PREFIX}${extra}`.toUpperCase();
  }
  function declareI18nVariable(variable2) {
    return new DeclareVarStmt(variable2.name, void 0, INFERRED_TYPE, void 0, variable2.sourceSpan);
  }
  var UNSAFE_OBJECT_KEY_NAME_REGEXP = /[-.]/;
  var TEMPORARY_NAME = "_t";
  var CONTEXT_NAME = "ctx";
  var RENDER_FLAGS = "rf";
  var REFERENCE_PREFIX = "_r";
  var IMPLICIT_REFERENCE = "$implicit";
  var NON_BINDABLE_ATTR = "ngNonBindable";
  var RESTORED_VIEW_CONTEXT_NAME = "restoredCtx";
  var DIRECT_CONTEXT_REFERENCE = "#context";
  var MAX_CHAIN_LENGTH = 500;
  var CHAINABLE_INSTRUCTIONS = /* @__PURE__ */ new Set([
    Identifiers.element,
    Identifiers.elementStart,
    Identifiers.elementEnd,
    Identifiers.elementContainer,
    Identifiers.elementContainerStart,
    Identifiers.elementContainerEnd,
    Identifiers.i18nExp,
    Identifiers.listener,
    Identifiers.classProp,
    Identifiers.syntheticHostListener,
    Identifiers.hostProperty,
    Identifiers.syntheticHostProperty,
    Identifiers.property,
    Identifiers.propertyInterpolate1,
    Identifiers.propertyInterpolate2,
    Identifiers.propertyInterpolate3,
    Identifiers.propertyInterpolate4,
    Identifiers.propertyInterpolate5,
    Identifiers.propertyInterpolate6,
    Identifiers.propertyInterpolate7,
    Identifiers.propertyInterpolate8,
    Identifiers.propertyInterpolateV,
    Identifiers.attribute,
    Identifiers.attributeInterpolate1,
    Identifiers.attributeInterpolate2,
    Identifiers.attributeInterpolate3,
    Identifiers.attributeInterpolate4,
    Identifiers.attributeInterpolate5,
    Identifiers.attributeInterpolate6,
    Identifiers.attributeInterpolate7,
    Identifiers.attributeInterpolate8,
    Identifiers.attributeInterpolateV,
    Identifiers.styleProp,
    Identifiers.stylePropInterpolate1,
    Identifiers.stylePropInterpolate2,
    Identifiers.stylePropInterpolate3,
    Identifiers.stylePropInterpolate4,
    Identifiers.stylePropInterpolate5,
    Identifiers.stylePropInterpolate6,
    Identifiers.stylePropInterpolate7,
    Identifiers.stylePropInterpolate8,
    Identifiers.stylePropInterpolateV,
    Identifiers.textInterpolate,
    Identifiers.textInterpolate1,
    Identifiers.textInterpolate2,
    Identifiers.textInterpolate3,
    Identifiers.textInterpolate4,
    Identifiers.textInterpolate5,
    Identifiers.textInterpolate6,
    Identifiers.textInterpolate7,
    Identifiers.textInterpolate8,
    Identifiers.textInterpolateV,
    Identifiers.templateCreate,
    Identifiers.twoWayProperty,
    Identifiers.twoWayListener
  ]);
  function invokeInstruction(span, reference2, params) {
    return importExpr(reference2, null, span).callFn(params, span);
  }
  function temporaryAllocator(pushStatement, name) {
    let temp = null;
    return () => {
      if (!temp) {
        pushStatement(new DeclareVarStmt(TEMPORARY_NAME, void 0, DYNAMIC_TYPE));
        temp = variable(name);
      }
      return temp;
    };
  }
  function invalid(arg) {
    throw new Error(`Invalid state: Visitor ${this.constructor.name} doesn't handle ${arg.constructor.name}`);
  }
  function asLiteral(value) {
    if (Array.isArray(value)) {
      return literalArr(value.map(asLiteral));
    }
    return literal(value, INFERRED_TYPE);
  }
  function conditionallyCreateDirectiveBindingLiteral(map3, forInputs) {
    const keys = Object.getOwnPropertyNames(map3);
    if (keys.length === 0) {
      return null;
    }
    return literalMap(keys.map((key) => {
      const value = map3[key];
      let declaredName;
      let publicName;
      let minifiedName;
      let expressionValue;
      if (typeof value === "string") {
        declaredName = key;
        minifiedName = key;
        publicName = value;
        expressionValue = asLiteral(publicName);
      } else {
        minifiedName = key;
        declaredName = value.classPropertyName;
        publicName = value.bindingPropertyName;
        const differentDeclaringName = publicName !== declaredName;
        const hasDecoratorInputTransform = value.transformFunction !== null;
        let flags = null;
        if (value.isSignal) {
          flags = bitwiseOrInputFlagsExpr(InputFlags2.SignalBased, flags);
        }
        if (hasDecoratorInputTransform) {
          flags = bitwiseOrInputFlagsExpr(InputFlags2.HasDecoratorInputTransform, flags);
        }
        if (forInputs && (differentDeclaringName || hasDecoratorInputTransform || flags !== null)) {
          const flagsExpr = flags ?? importExpr(Identifiers.InputFlags).prop(InputFlags2[InputFlags2.None]);
          const result = [flagsExpr, asLiteral(publicName)];
          if (differentDeclaringName || hasDecoratorInputTransform) {
            result.push(asLiteral(declaredName));
            if (hasDecoratorInputTransform) {
              result.push(value.transformFunction);
            }
          }
          expressionValue = literalArr(result);
        } else {
          expressionValue = asLiteral(publicName);
        }
      }
      return {
        key: minifiedName,
        // put quotes around keys that contain potentially unsafe characters
        quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),
        value: expressionValue
      };
    }));
  }
  function getInputFlagExpr(flag) {
    return importExpr(Identifiers.InputFlags).prop(InputFlags2[flag]);
  }
  function bitwiseOrInputFlagsExpr(flag, expr) {
    if (expr === null) {
      return getInputFlagExpr(flag);
    }
    return getInputFlagExpr(flag).bitwiseOr(expr);
  }
  function trimTrailingNulls(parameters) {
    while (isNull(parameters[parameters.length - 1])) {
      parameters.pop();
    }
    return parameters;
  }
  var DefinitionMap = class {
    constructor() {
      this.values = [];
    }
    set(key, value) {
      if (value) {
        const existing = this.values.find((value2) => value2.key === key);
        if (existing) {
          existing.value = value;
        } else {
          this.values.push({ key, value, quoted: false });
        }
      }
    }
    toLiteralMap() {
      return literalMap(this.values);
    }
  };
  function createCssSelectorFromNode(node) {
    const elementName = node instanceof Element$1 ? node.name : "ng-template";
    const attributes = getAttrsForDirectiveMatching(node);
    const cssSelector = new CssSelector();
    const elementNameNoNs = splitNsName(elementName)[1];
    cssSelector.setElement(elementNameNoNs);
    Object.getOwnPropertyNames(attributes).forEach((name) => {
      const nameNoNs = splitNsName(name)[1];
      const value = attributes[name];
      cssSelector.addAttribute(nameNoNs, value);
      if (name.toLowerCase() === "class") {
        const classes = value.trim().split(/\s+/);
        classes.forEach((className) => cssSelector.addClassName(className));
      }
    });
    return cssSelector;
  }
  function getAttrsForDirectiveMatching(elOrTpl) {
    const attributesMap = {};
    if (elOrTpl instanceof Template && elOrTpl.tagName !== "ng-template") {
      elOrTpl.templateAttrs.forEach((a) => attributesMap[a.name] = "");
    } else {
      elOrTpl.attributes.forEach((a) => {
        if (!isI18nAttribute(a.name)) {
          attributesMap[a.name] = a.value;
        }
      });
      elOrTpl.inputs.forEach((i) => {
        if (i.type === 0 || i.type === 5) {
          attributesMap[i.name] = "";
        }
      });
      elOrTpl.outputs.forEach((o) => {
        attributesMap[o.name] = "";
      });
    }
    return attributesMap;
  }
  function getInterpolationArgsLength(interpolation) {
    const { expressions, strings } = interpolation;
    if (expressions.length === 1 && strings.length === 2 && strings[0] === "" && strings[1] === "") {
      return 1;
    } else {
      return expressions.length + strings.length;
    }
  }
  function getInstructionStatements(instructions) {
    const statements = [];
    let pendingExpression = null;
    let pendingExpressionType = null;
    let chainLength = 0;
    for (const current of instructions) {
      const resolvedParams = (typeof current.paramsOrFn === "function" ? current.paramsOrFn() : current.paramsOrFn) ?? [];
      const params = Array.isArray(resolvedParams) ? resolvedParams : [resolvedParams];
      if (chainLength < MAX_CHAIN_LENGTH && pendingExpressionType === current.reference && CHAINABLE_INSTRUCTIONS.has(pendingExpressionType)) {
        pendingExpression = pendingExpression.callFn(params, pendingExpression.sourceSpan);
        chainLength++;
      } else {
        if (pendingExpression !== null) {
          statements.push(pendingExpression.toStmt());
        }
        pendingExpression = invokeInstruction(current.span, current.reference, params);
        pendingExpressionType = current.reference;
        chainLength = 0;
      }
    }
    if (pendingExpression !== null) {
      statements.push(pendingExpression.toStmt());
    }
    return statements;
  }
  function compileInjectable2(meta, resolveForwardRefs) {
    let result = null;
    const factoryMeta = {
      name: meta.name,
      type: meta.type,
      typeArgumentCount: meta.typeArgumentCount,
      deps: [],
      target: FactoryTarget$1.Injectable
    };
    if (meta.useClass !== void 0) {
      const useClassOnSelf = meta.useClass.expression.isEquivalent(meta.type.value);
      let deps = void 0;
      if (meta.deps !== void 0) {
        deps = meta.deps;
      }
      if (deps !== void 0) {
        result = compileFactoryFunction({
          ...factoryMeta,
          delegate: meta.useClass.expression,
          delegateDeps: deps,
          delegateType: R3FactoryDelegateType.Class
        });
      } else if (useClassOnSelf) {
        result = compileFactoryFunction(factoryMeta);
      } else {
        result = {
          statements: [],
          expression: delegateToFactory(meta.type.value, meta.useClass.expression, resolveForwardRefs)
        };
      }
    } else if (meta.useFactory !== void 0) {
      if (meta.deps !== void 0) {
        result = compileFactoryFunction({
          ...factoryMeta,
          delegate: meta.useFactory,
          delegateDeps: meta.deps || [],
          delegateType: R3FactoryDelegateType.Function
        });
      } else {
        result = { statements: [], expression: arrowFn([], meta.useFactory.callFn([])) };
      }
    } else if (meta.useValue !== void 0) {
      result = compileFactoryFunction({
        ...factoryMeta,
        expression: meta.useValue.expression
      });
    } else if (meta.useExisting !== void 0) {
      result = compileFactoryFunction({
        ...factoryMeta,
        expression: importExpr(Identifiers.inject).callFn([meta.useExisting.expression])
      });
    } else {
      result = {
        statements: [],
        expression: delegateToFactory(meta.type.value, meta.type.value, resolveForwardRefs)
      };
    }
    const token = meta.type.value;
    const injectableProps = new DefinitionMap();
    injectableProps.set("token", token);
    injectableProps.set("factory", result.expression);
    if (meta.providedIn.expression.value !== null) {
      injectableProps.set("providedIn", convertFromMaybeForwardRefExpression(meta.providedIn));
    }
    const expression = importExpr(Identifiers.\u0275\u0275defineInjectable).callFn([injectableProps.toLiteralMap()], void 0, true);
    return {
      expression,
      type: createInjectableType(meta),
      statements: result.statements
    };
  }
  function createInjectableType(meta) {
    return new ExpressionType(importExpr(Identifiers.InjectableDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount)]));
  }
  function delegateToFactory(type, useType, unwrapForwardRefs) {
    if (type.node === useType.node) {
      return useType.prop("\u0275fac");
    }
    if (!unwrapForwardRefs) {
      return createFactoryFunction(useType);
    }
    const unwrappedType = importExpr(Identifiers.resolveForwardRef).callFn([useType]);
    return createFactoryFunction(unwrappedType);
  }
  function createFactoryFunction(type) {
    return arrowFn([new FnParam("t", DYNAMIC_TYPE)], type.prop("\u0275fac").callFn([variable("t")]));
  }
  var UNUSABLE_INTERPOLATION_REGEXPS = [
    /^\s*$/,
    // empty
    /[<>]/,
    // html tag
    /^[{}]$/,
    // i18n expansion
    /&(#|[a-z])/i,
    // character reference,
    /^\/\//
    // comment
  ];
  function assertInterpolationSymbols(identifier, value) {
    if (value != null && !(Array.isArray(value) && value.length == 2)) {
      throw new Error(`Expected '${identifier}' to be an array, [start, end].`);
    } else if (value != null) {
      const start = value[0];
      const end = value[1];
      UNUSABLE_INTERPOLATION_REGEXPS.forEach((regexp) => {
        if (regexp.test(start) || regexp.test(end)) {
          throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);
        }
      });
    }
  }
  var InterpolationConfig = class _InterpolationConfig {
    static fromArray(markers) {
      if (!markers) {
        return DEFAULT_INTERPOLATION_CONFIG;
      }
      assertInterpolationSymbols("interpolation", markers);
      return new _InterpolationConfig(markers[0], markers[1]);
    }
    constructor(start, end) {
      this.start = start;
      this.end = end;
    }
  };
  var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig("{{", "}}");
  var DEFAULT_CONTAINER_BLOCKS = /* @__PURE__ */ new Set(["switch"]);
  var $EOF = 0;
  var $BSPACE = 8;
  var $TAB = 9;
  var $LF = 10;
  var $VTAB = 11;
  var $FF = 12;
  var $CR = 13;
  var $SPACE = 32;
  var $BANG = 33;
  var $DQ = 34;
  var $HASH = 35;
  var $$ = 36;
  var $PERCENT = 37;
  var $AMPERSAND = 38;
  var $SQ = 39;
  var $LPAREN = 40;
  var $RPAREN = 41;
  var $STAR = 42;
  var $PLUS = 43;
  var $COMMA = 44;
  var $MINUS = 45;
  var $PERIOD = 46;
  var $SLASH = 47;
  var $COLON = 58;
  var $SEMICOLON = 59;
  var $LT = 60;
  var $EQ = 61;
  var $GT = 62;
  var $QUESTION = 63;
  var $0 = 48;
  var $7 = 55;
  var $9 = 57;
  var $A = 65;
  var $E = 69;
  var $F = 70;
  var $X = 88;
  var $Z = 90;
  var $LBRACKET = 91;
  var $BACKSLASH = 92;
  var $RBRACKET = 93;
  var $CARET = 94;
  var $_ = 95;
  var $a = 97;
  var $b = 98;
  var $e = 101;
  var $f = 102;
  var $n = 110;
  var $r = 114;
  var $t = 116;
  var $u = 117;
  var $v = 118;
  var $x = 120;
  var $z = 122;
  var $LBRACE = 123;
  var $BAR = 124;
  var $RBRACE = 125;
  var $NBSP = 160;
  var $AT = 64;
  var $BT = 96;
  function isWhitespace(code) {
    return code >= $TAB && code <= $SPACE || code == $NBSP;
  }
  function isDigit(code) {
    return $0 <= code && code <= $9;
  }
  function isAsciiLetter(code) {
    return code >= $a && code <= $z || code >= $A && code <= $Z;
  }
  function isAsciiHexDigit(code) {
    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
  }
  function isNewLine(code) {
    return code === $LF || code === $CR;
  }
  function isOctalDigit(code) {
    return $0 <= code && code <= $7;
  }
  function isQuote(code) {
    return code === $SQ || code === $DQ || code === $BT;
  }
  var ParseLocation = class _ParseLocation {
    constructor(file, offset, line, col) {
      this.file = file;
      this.offset = offset;
      this.line = line;
      this.col = col;
    }
    toString() {
      return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;
    }
    moveBy(delta) {
      const source = this.file.content;
      const len = source.length;
      let offset = this.offset;
      let line = this.line;
      let col = this.col;
      while (offset > 0 && delta < 0) {
        offset--;
        delta++;
        const ch = source.charCodeAt(offset);
        if (ch == $LF) {
          line--;
          const priorLine = source.substring(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
          col = priorLine > 0 ? offset - priorLine : offset;
        } else {
          col--;
        }
      }
      while (offset < len && delta > 0) {
        const ch = source.charCodeAt(offset);
        offset++;
        delta--;
        if (ch == $LF) {
          line++;
          col = 0;
        } else {
          col++;
        }
      }
      return new _ParseLocation(this.file, offset, line, col);
    }
    // Return the source around the location
    // Up to `maxChars` or `maxLines` on each side of the location
    getContext(maxChars, maxLines) {
      const content = this.file.content;
      let startOffset = this.offset;
      if (startOffset != null) {
        if (startOffset > content.length - 1) {
          startOffset = content.length - 1;
        }
        let endOffset = startOffset;
        let ctxChars = 0;
        let ctxLines = 0;
        while (ctxChars < maxChars && startOffset > 0) {
          startOffset--;
          ctxChars++;
          if (content[startOffset] == "\n") {
            if (++ctxLines == maxLines) {
              break;
            }
          }
        }
        ctxChars = 0;
        ctxLines = 0;
        while (ctxChars < maxChars && endOffset < content.length - 1) {
          endOffset++;
          ctxChars++;
          if (content[endOffset] == "\n") {
            if (++ctxLines == maxLines) {
              break;
            }
          }
        }
        return {
          before: content.substring(startOffset, this.offset),
          after: content.substring(this.offset, endOffset + 1)
        };
      }
      return null;
    }
  };
  var ParseSourceFile = class {
    constructor(content, url) {
      this.content = content;
      this.url = url;
    }
  };
  var ParseSourceSpan = class {
    /**
     * Create an object that holds information about spans of tokens/nodes captured during
     * lexing/parsing of text.
     *
     * @param start
     * The location of the start of the span (having skipped leading trivia).
     * Skipping leading trivia makes source-spans more "user friendly", since things like HTML
     * elements will appear to begin at the start of the opening tag, rather than at the start of any
     * leading trivia, which could include newlines.
     *
     * @param end
     * The location of the end of the span.
     *
     * @param fullStart
     * The start of the token without skipping the leading trivia.
     * This is used by tooling that splits tokens further, such as extracting Angular interpolations
     * from text tokens. Such tooling creates new source-spans relative to the original token's
     * source-span. If leading trivia characters have been skipped then the new source-spans may be
     * incorrectly offset.
     *
     * @param details
     * Additional information (such as identifier names) that should be associated with the span.
     */
    constructor(start, end, fullStart = start, details = null) {
      this.start = start;
      this.end = end;
      this.fullStart = fullStart;
      this.details = details;
    }
    toString() {
      return this.start.file.content.substring(this.start.offset, this.end.offset);
    }
  };
  var ParseErrorLevel;
  (function(ParseErrorLevel2) {
    ParseErrorLevel2[ParseErrorLevel2["WARNING"] = 0] = "WARNING";
    ParseErrorLevel2[ParseErrorLevel2["ERROR"] = 1] = "ERROR";
  })(ParseErrorLevel || (ParseErrorLevel = {}));
  var ParseError = class {
    constructor(span, msg, level = ParseErrorLevel.ERROR) {
      this.span = span;
      this.msg = msg;
      this.level = level;
    }
    contextualMessage() {
      const ctx = this.span.start.getContext(100, 3);
      return ctx ? `${this.msg} ("${ctx.before}[${ParseErrorLevel[this.level]} ->]${ctx.after}")` : this.msg;
    }
    toString() {
      const details = this.span.details ? `, ${this.span.details}` : "";
      return `${this.contextualMessage()}: ${this.span.start}${details}`;
    }
  };
  function r3JitTypeSourceSpan(kind, typeName, sourceUrl) {
    const sourceFileName = `in ${kind} ${typeName} in ${sourceUrl}`;
    const sourceFile = new ParseSourceFile("", sourceFileName);
    return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));
  }
  var _anonymousTypeIndex = 0;
  function identifierName(compileIdentifier) {
    if (!compileIdentifier || !compileIdentifier.reference) {
      return null;
    }
    const ref = compileIdentifier.reference;
    if (ref["__anonymousType"]) {
      return ref["__anonymousType"];
    }
    if (ref["__forward_ref__"]) {
      return "__forward_ref__";
    }
    let identifier = stringify2(ref);
    if (identifier.indexOf("(") >= 0) {
      identifier = `anonymous_${_anonymousTypeIndex++}`;
      ref["__anonymousType"] = identifier;
    } else {
      identifier = sanitizeIdentifier(identifier);
    }
    return identifier;
  }
  function sanitizeIdentifier(name) {
    return name.replace(/\W/g, "_");
  }
  var makeTemplateObjectPolyfill = '(this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e})';
  var AbstractJsEmitterVisitor = class extends AbstractEmitterVisitor {
    constructor() {
      super(false);
    }
    visitWrappedNodeExpr(ast, ctx) {
      throw new Error("Cannot emit a WrappedNodeExpr in Javascript.");
    }
    visitDeclareVarStmt(stmt, ctx) {
      ctx.print(stmt, `var ${stmt.name}`);
      if (stmt.value) {
        ctx.print(stmt, " = ");
        stmt.value.visitExpression(this, ctx);
      }
      ctx.println(stmt, `;`);
      return null;
    }
    visitTaggedTemplateExpr(ast, ctx) {
      const elements = ast.template.elements;
      ast.tag.visitExpression(this, ctx);
      ctx.print(ast, `(${makeTemplateObjectPolyfill}(`);
      ctx.print(ast, `[${elements.map((part) => escapeIdentifier(part.text, false)).join(", ")}], `);
      ctx.print(ast, `[${elements.map((part) => escapeIdentifier(part.rawText, false)).join(", ")}])`);
      ast.template.expressions.forEach((expression) => {
        ctx.print(ast, ", ");
        expression.visitExpression(this, ctx);
      });
      ctx.print(ast, ")");
      return null;
    }
    visitFunctionExpr(ast, ctx) {
      ctx.print(ast, `function${ast.name ? " " + ast.name : ""}(`);
      this._visitParams(ast.params, ctx);
      ctx.println(ast, `) {`);
      ctx.incIndent();
      this.visitAllStatements(ast.statements, ctx);
      ctx.decIndent();
      ctx.print(ast, `}`);
      return null;
    }
    visitArrowFunctionExpr(ast, ctx) {
      ctx.print(ast, "(");
      this._visitParams(ast.params, ctx);
      ctx.print(ast, ") =>");
      if (Array.isArray(ast.body)) {
        ctx.println(ast, `{`);
        ctx.incIndent();
        this.visitAllStatements(ast.body, ctx);
        ctx.decIndent();
        ctx.print(ast, `}`);
      } else {
        const isObjectLiteral = ast.body instanceof LiteralMapExpr;
        if (isObjectLiteral) {
          ctx.print(ast, "(");
        }
        ast.body.visitExpression(this, ctx);
        if (isObjectLiteral) {
          ctx.print(ast, ")");
        }
      }
      return null;
    }
    visitDeclareFunctionStmt(stmt, ctx) {
      ctx.print(stmt, `function ${stmt.name}(`);
      this._visitParams(stmt.params, ctx);
      ctx.println(stmt, `) {`);
      ctx.incIndent();
      this.visitAllStatements(stmt.statements, ctx);
      ctx.decIndent();
      ctx.println(stmt, `}`);
      return null;
    }
    visitLocalizedString(ast, ctx) {
      ctx.print(ast, `$localize(${makeTemplateObjectPolyfill}(`);
      const parts = [ast.serializeI18nHead()];
      for (let i = 1; i < ast.messageParts.length; i++) {
        parts.push(ast.serializeI18nTemplatePart(i));
      }
      ctx.print(ast, `[${parts.map((part) => escapeIdentifier(part.cooked, false)).join(", ")}], `);
      ctx.print(ast, `[${parts.map((part) => escapeIdentifier(part.raw, false)).join(", ")}])`);
      ast.expressions.forEach((expression) => {
        ctx.print(ast, ", ");
        expression.visitExpression(this, ctx);
      });
      ctx.print(ast, ")");
      return null;
    }
    _visitParams(params, ctx) {
      this.visitAllObjects((param) => ctx.print(null, param.name), params, ctx, ",");
    }
  };
  var policy2;
  function getPolicy2() {
    if (policy2 === void 0) {
      const trustedTypes = _global2["trustedTypes"];
      policy2 = null;
      if (trustedTypes) {
        try {
          policy2 = trustedTypes.createPolicy("angular#unsafe-jit", {
            createScript: (s) => s
          });
        } catch {
        }
      }
    }
    return policy2;
  }
  function trustedScriptFromString(script) {
    return getPolicy2()?.createScript(script) || script;
  }
  function newTrustedFunctionForJIT(...args) {
    if (!_global2["trustedTypes"]) {
      return new Function(...args);
    }
    const fnArgs = args.slice(0, -1).join(",");
    const fnBody = args[args.length - 1];
    const body = `(function anonymous(${fnArgs}
) { ${fnBody}
})`;
    const fn2 = _global2["eval"](trustedScriptFromString(body));
    if (fn2.bind === void 0) {
      return new Function(...args);
    }
    fn2.toString = () => body;
    return fn2.bind(_global2);
  }
  var JitEvaluator = class {
    /**
     *
     * @param sourceUrl The URL of the generated code.
     * @param statements An array of Angular statement AST nodes to be evaluated.
     * @param refResolver Resolves `o.ExternalReference`s into values.
     * @param createSourceMaps If true then create a source-map for the generated code and include it
     * inline as a source-map comment.
     * @returns A map of all the variables in the generated code.
     */
    evaluateStatements(sourceUrl, statements, refResolver, createSourceMaps) {
      const converter = new JitEmitterVisitor(refResolver);
      const ctx = EmitterVisitorContext.createRoot();
      if (statements.length > 0 && !isUseStrictStatement(statements[0])) {
        statements = [
          literal("use strict").toStmt(),
          ...statements
        ];
      }
      converter.visitAllStatements(statements, ctx);
      converter.createReturnStmt(ctx);
      return this.evaluateCode(sourceUrl, ctx, converter.getArgs(), createSourceMaps);
    }
    /**
     * Evaluate a piece of JIT generated code.
     * @param sourceUrl The URL of this generated code.
     * @param ctx A context object that contains an AST of the code to be evaluated.
     * @param vars A map containing the names and values of variables that the evaluated code might
     * reference.
     * @param createSourceMap If true then create a source-map for the generated code and include it
     * inline as a source-map comment.
     * @returns The result of evaluating the code.
     */
    evaluateCode(sourceUrl, ctx, vars, createSourceMap) {
      let fnBody = `"use strict";${ctx.toSource()}
//# sourceURL=${sourceUrl}`;
      const fnArgNames = [];
      const fnArgValues = [];
      for (const argName in vars) {
        fnArgValues.push(vars[argName]);
        fnArgNames.push(argName);
      }
      if (createSourceMap) {
        const emptyFn = newTrustedFunctionForJIT(...fnArgNames.concat("return null;")).toString();
        const headerLines = emptyFn.slice(0, emptyFn.indexOf("return null;")).split("\n").length - 1;
        fnBody += `
${ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment()}`;
      }
      const fn2 = newTrustedFunctionForJIT(...fnArgNames.concat(fnBody));
      return this.executeFunction(fn2, fnArgValues);
    }
    /**
     * Execute a JIT generated function by calling it.
     *
     * This method can be overridden in tests to capture the functions that are generated
     * by this `JitEvaluator` class.
     *
     * @param fn A function to execute.
     * @param args The arguments to pass to the function being executed.
     * @returns The return value of the executed function.
     */
    executeFunction(fn2, args) {
      return fn2(...args);
    }
  };
  var JitEmitterVisitor = class extends AbstractJsEmitterVisitor {
    constructor(refResolver) {
      super();
      this.refResolver = refResolver;
      this._evalArgNames = [];
      this._evalArgValues = [];
      this._evalExportedVars = [];
    }
    createReturnStmt(ctx) {
      const stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map((resultVar) => new LiteralMapEntry(resultVar, variable(resultVar), false))));
      stmt.visitStatement(this, ctx);
    }
    getArgs() {
      const result = {};
      for (let i = 0; i < this._evalArgNames.length; i++) {
        result[this._evalArgNames[i]] = this._evalArgValues[i];
      }
      return result;
    }
    visitExternalExpr(ast, ctx) {
      this._emitReferenceToExternal(ast, this.refResolver.resolveExternalReference(ast.value), ctx);
      return null;
    }
    visitWrappedNodeExpr(ast, ctx) {
      this._emitReferenceToExternal(ast, ast.node, ctx);
      return null;
    }
    visitDeclareVarStmt(stmt, ctx) {
      if (stmt.hasModifier(StmtModifier.Exported)) {
        this._evalExportedVars.push(stmt.name);
      }
      return super.visitDeclareVarStmt(stmt, ctx);
    }
    visitDeclareFunctionStmt(stmt, ctx) {
      if (stmt.hasModifier(StmtModifier.Exported)) {
        this._evalExportedVars.push(stmt.name);
      }
      return super.visitDeclareFunctionStmt(stmt, ctx);
    }
    _emitReferenceToExternal(ast, value, ctx) {
      let id = this._evalArgValues.indexOf(value);
      if (id === -1) {
        id = this._evalArgValues.length;
        this._evalArgValues.push(value);
        const name = identifierName({ reference: value }) || "val";
        this._evalArgNames.push(`jit_${name}_${id}`);
      }
      ctx.print(ast, this._evalArgNames[id]);
    }
  };
  function isUseStrictStatement(statement) {
    return statement.isEquivalent(literal("use strict").toStmt());
  }
  function compileInjector(meta) {
    const definitionMap = new DefinitionMap();
    if (meta.providers !== null) {
      definitionMap.set("providers", meta.providers);
    }
    if (meta.imports.length > 0) {
      definitionMap.set("imports", literalArr(meta.imports));
    }
    const expression = importExpr(Identifiers.defineInjector).callFn([definitionMap.toLiteralMap()], void 0, true);
    const type = createInjectorType(meta);
    return { expression, type, statements: [] };
  }
  function createInjectorType(meta) {
    return new ExpressionType(importExpr(Identifiers.InjectorDeclaration, [new ExpressionType(meta.type.type)]));
  }
  var R3JitReflector = class {
    constructor(context2) {
      this.context = context2;
    }
    resolveExternalReference(ref) {
      if (ref.moduleName !== "@angular/core") {
        throw new Error(`Cannot resolve external reference to ${ref.moduleName}, only references to @angular/core are supported.`);
      }
      if (!this.context.hasOwnProperty(ref.name)) {
        throw new Error(`No value provided for @angular/core symbol '${ref.name}'.`);
      }
      return this.context[ref.name];
    }
  };
  var R3SelectorScopeMode;
  (function(R3SelectorScopeMode2) {
    R3SelectorScopeMode2[R3SelectorScopeMode2["Inline"] = 0] = "Inline";
    R3SelectorScopeMode2[R3SelectorScopeMode2["SideEffect"] = 1] = "SideEffect";
    R3SelectorScopeMode2[R3SelectorScopeMode2["Omit"] = 2] = "Omit";
  })(R3SelectorScopeMode || (R3SelectorScopeMode = {}));
  var R3NgModuleMetadataKind;
  (function(R3NgModuleMetadataKind2) {
    R3NgModuleMetadataKind2[R3NgModuleMetadataKind2["Global"] = 0] = "Global";
    R3NgModuleMetadataKind2[R3NgModuleMetadataKind2["Local"] = 1] = "Local";
  })(R3NgModuleMetadataKind || (R3NgModuleMetadataKind = {}));
  function compileNgModule2(meta) {
    const statements = [];
    const definitionMap = new DefinitionMap();
    definitionMap.set("type", meta.type.value);
    if (meta.kind === R3NgModuleMetadataKind.Global && meta.bootstrap.length > 0) {
      definitionMap.set("bootstrap", refsToArray(meta.bootstrap, meta.containsForwardDecls));
    }
    if (meta.selectorScopeMode === R3SelectorScopeMode.Inline) {
      if (meta.declarations.length > 0) {
        definitionMap.set("declarations", refsToArray(meta.declarations, meta.containsForwardDecls));
      }
      if (meta.imports.length > 0) {
        definitionMap.set("imports", refsToArray(meta.imports, meta.containsForwardDecls));
      }
      if (meta.exports.length > 0) {
        definitionMap.set("exports", refsToArray(meta.exports, meta.containsForwardDecls));
      }
    } else if (meta.selectorScopeMode === R3SelectorScopeMode.SideEffect) {
      const setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);
      if (setNgModuleScopeCall !== null) {
        statements.push(setNgModuleScopeCall);
      }
    } else {
    }
    if (meta.schemas !== null && meta.schemas.length > 0) {
      definitionMap.set("schemas", literalArr(meta.schemas.map((ref) => ref.value)));
    }
    if (meta.id !== null) {
      definitionMap.set("id", meta.id);
      statements.push(importExpr(Identifiers.registerNgModuleType).callFn([meta.type.value, meta.id]).toStmt());
    }
    const expression = importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()], void 0, true);
    const type = createNgModuleType(meta);
    return { expression, type, statements };
  }
  function compileNgModuleDeclarationExpression(meta) {
    const definitionMap = new DefinitionMap();
    definitionMap.set("type", new WrappedNodeExpr(meta.type));
    if (meta.bootstrap !== void 0) {
      definitionMap.set("bootstrap", new WrappedNodeExpr(meta.bootstrap));
    }
    if (meta.declarations !== void 0) {
      definitionMap.set("declarations", new WrappedNodeExpr(meta.declarations));
    }
    if (meta.imports !== void 0) {
      definitionMap.set("imports", new WrappedNodeExpr(meta.imports));
    }
    if (meta.exports !== void 0) {
      definitionMap.set("exports", new WrappedNodeExpr(meta.exports));
    }
    if (meta.schemas !== void 0) {
      definitionMap.set("schemas", new WrappedNodeExpr(meta.schemas));
    }
    if (meta.id !== void 0) {
      definitionMap.set("id", new WrappedNodeExpr(meta.id));
    }
    return importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()]);
  }
  function createNgModuleType(meta) {
    if (meta.kind === R3NgModuleMetadataKind.Local) {
      return new ExpressionType(meta.type.value);
    }
    const { type: moduleType, declarations, exports, imports, includeImportTypes, publicDeclarationTypes } = meta;
    return new ExpressionType(importExpr(Identifiers.NgModuleDeclaration, [
      new ExpressionType(moduleType.type),
      publicDeclarationTypes === null ? tupleTypeOf(declarations) : tupleOfTypes(publicDeclarationTypes),
      includeImportTypes ? tupleTypeOf(imports) : NONE_TYPE,
      tupleTypeOf(exports)
    ]));
  }
  function generateSetNgModuleScopeCall(meta) {
    const scopeMap = new DefinitionMap();
    if (meta.kind === R3NgModuleMetadataKind.Global) {
      if (meta.declarations.length > 0) {
        scopeMap.set("declarations", refsToArray(meta.declarations, meta.containsForwardDecls));
      }
    } else {
      if (meta.declarationsExpression) {
        scopeMap.set("declarations", meta.declarationsExpression);
      }
    }
    if (meta.kind === R3NgModuleMetadataKind.Global) {
      if (meta.imports.length > 0) {
        scopeMap.set("imports", refsToArray(meta.imports, meta.containsForwardDecls));
      }
    } else {
      if (meta.importsExpression) {
        scopeMap.set("imports", meta.importsExpression);
      }
    }
    if (meta.kind === R3NgModuleMetadataKind.Global) {
      if (meta.exports.length > 0) {
        scopeMap.set("exports", refsToArray(meta.exports, meta.containsForwardDecls));
      }
    } else {
      if (meta.exportsExpression) {
        scopeMap.set("exports", meta.exportsExpression);
      }
    }
    if (meta.kind === R3NgModuleMetadataKind.Local && meta.bootstrapExpression) {
      scopeMap.set("bootstrap", meta.bootstrapExpression);
    }
    if (Object.keys(scopeMap.values).length === 0) {
      return null;
    }
    const fnCall = new InvokeFunctionExpr(
      /* fn */
      importExpr(Identifiers.setNgModuleScope),
      /* args */
      [meta.type.value, scopeMap.toLiteralMap()]
    );
    const guardedCall = jitOnlyGuardedExpression(fnCall);
    const iife = new FunctionExpr(
      /* params */
      [],
      /* statements */
      [guardedCall.toStmt()]
    );
    const iifeCall = new InvokeFunctionExpr(
      /* fn */
      iife,
      /* args */
      []
    );
    return iifeCall.toStmt();
  }
  function tupleTypeOf(exp) {
    const types = exp.map((ref) => typeofExpr(ref.type));
    return exp.length > 0 ? expressionType(literalArr(types)) : NONE_TYPE;
  }
  function tupleOfTypes(types) {
    const typeofTypes = types.map((type) => typeofExpr(type));
    return types.length > 0 ? expressionType(literalArr(typeofTypes)) : NONE_TYPE;
  }
  function compilePipeFromMetadata(metadata) {
    const definitionMapValues = [];
    definitionMapValues.push({ key: "name", value: literal(metadata.pipeName), quoted: false });
    definitionMapValues.push({ key: "type", value: metadata.type.value, quoted: false });
    definitionMapValues.push({ key: "pure", value: literal(metadata.pure), quoted: false });
    if (metadata.isStandalone) {
      definitionMapValues.push({ key: "standalone", value: literal(true), quoted: false });
    }
    const expression = importExpr(Identifiers.definePipe).callFn([literalMap(definitionMapValues)], void 0, true);
    const type = createPipeType(metadata);
    return { expression, type, statements: [] };
  }
  function createPipeType(metadata) {
    return new ExpressionType(importExpr(Identifiers.PipeDeclaration, [
      typeWithParameters(metadata.type.type, metadata.typeArgumentCount),
      new ExpressionType(new LiteralExpr(metadata.pipeName)),
      new ExpressionType(new LiteralExpr(metadata.isStandalone))
    ]));
  }
  var R3TemplateDependencyKind2;
  (function(R3TemplateDependencyKind3) {
    R3TemplateDependencyKind3[R3TemplateDependencyKind3["Directive"] = 0] = "Directive";
    R3TemplateDependencyKind3[R3TemplateDependencyKind3["Pipe"] = 1] = "Pipe";
    R3TemplateDependencyKind3[R3TemplateDependencyKind3["NgModule"] = 2] = "NgModule";
  })(R3TemplateDependencyKind2 || (R3TemplateDependencyKind2 = {}));
  var ParserError = class {
    constructor(message, input2, errLocation, ctxLocation) {
      this.input = input2;
      this.errLocation = errLocation;
      this.ctxLocation = ctxLocation;
      this.message = `Parser Error: ${message} ${errLocation} [${input2}] in ${ctxLocation}`;
    }
  };
  var ParseSpan = class {
    constructor(start, end) {
      this.start = start;
      this.end = end;
    }
    toAbsolute(absoluteOffset) {
      return new AbsoluteSourceSpan(absoluteOffset + this.start, absoluteOffset + this.end);
    }
  };
  var AST = class {
    constructor(span, sourceSpan) {
      this.span = span;
      this.sourceSpan = sourceSpan;
    }
    toString() {
      return "AST";
    }
  };
  var ASTWithName = class extends AST {
    constructor(span, sourceSpan, nameSpan) {
      super(span, sourceSpan);
      this.nameSpan = nameSpan;
    }
  };
  var EmptyExpr$1 = class extends AST {
    visit(visitor, context2 = null) {
    }
  };
  var ImplicitReceiver = class extends AST {
    visit(visitor, context2 = null) {
      return visitor.visitImplicitReceiver(this, context2);
    }
  };
  var ThisReceiver = class extends ImplicitReceiver {
    visit(visitor, context2 = null) {
      return visitor.visitThisReceiver?.(this, context2);
    }
  };
  var Chain = class extends AST {
    constructor(span, sourceSpan, expressions) {
      super(span, sourceSpan);
      this.expressions = expressions;
    }
    visit(visitor, context2 = null) {
      return visitor.visitChain(this, context2);
    }
  };
  var Conditional = class extends AST {
    constructor(span, sourceSpan, condition, trueExp, falseExp) {
      super(span, sourceSpan);
      this.condition = condition;
      this.trueExp = trueExp;
      this.falseExp = falseExp;
    }
    visit(visitor, context2 = null) {
      return visitor.visitConditional(this, context2);
    }
  };
  var PropertyRead = class extends ASTWithName {
    constructor(span, sourceSpan, nameSpan, receiver, name) {
      super(span, sourceSpan, nameSpan);
      this.receiver = receiver;
      this.name = name;
    }
    visit(visitor, context2 = null) {
      return visitor.visitPropertyRead(this, context2);
    }
  };
  var PropertyWrite = class extends ASTWithName {
    constructor(span, sourceSpan, nameSpan, receiver, name, value) {
      super(span, sourceSpan, nameSpan);
      this.receiver = receiver;
      this.name = name;
      this.value = value;
    }
    visit(visitor, context2 = null) {
      return visitor.visitPropertyWrite(this, context2);
    }
  };
  var SafePropertyRead = class extends ASTWithName {
    constructor(span, sourceSpan, nameSpan, receiver, name) {
      super(span, sourceSpan, nameSpan);
      this.receiver = receiver;
      this.name = name;
    }
    visit(visitor, context2 = null) {
      return visitor.visitSafePropertyRead(this, context2);
    }
  };
  var KeyedRead = class extends AST {
    constructor(span, sourceSpan, receiver, key) {
      super(span, sourceSpan);
      this.receiver = receiver;
      this.key = key;
    }
    visit(visitor, context2 = null) {
      return visitor.visitKeyedRead(this, context2);
    }
  };
  var SafeKeyedRead = class extends AST {
    constructor(span, sourceSpan, receiver, key) {
      super(span, sourceSpan);
      this.receiver = receiver;
      this.key = key;
    }
    visit(visitor, context2 = null) {
      return visitor.visitSafeKeyedRead(this, context2);
    }
  };
  var KeyedWrite = class extends AST {
    constructor(span, sourceSpan, receiver, key, value) {
      super(span, sourceSpan);
      this.receiver = receiver;
      this.key = key;
      this.value = value;
    }
    visit(visitor, context2 = null) {
      return visitor.visitKeyedWrite(this, context2);
    }
  };
  var BindingPipe = class extends ASTWithName {
    constructor(span, sourceSpan, exp, name, args, nameSpan) {
      super(span, sourceSpan, nameSpan);
      this.exp = exp;
      this.name = name;
      this.args = args;
    }
    visit(visitor, context2 = null) {
      return visitor.visitPipe(this, context2);
    }
  };
  var LiteralPrimitive = class extends AST {
    constructor(span, sourceSpan, value) {
      super(span, sourceSpan);
      this.value = value;
    }
    visit(visitor, context2 = null) {
      return visitor.visitLiteralPrimitive(this, context2);
    }
  };
  var LiteralArray = class extends AST {
    constructor(span, sourceSpan, expressions) {
      super(span, sourceSpan);
      this.expressions = expressions;
    }
    visit(visitor, context2 = null) {
      return visitor.visitLiteralArray(this, context2);
    }
  };
  var LiteralMap = class extends AST {
    constructor(span, sourceSpan, keys, values) {
      super(span, sourceSpan);
      this.keys = keys;
      this.values = values;
    }
    visit(visitor, context2 = null) {
      return visitor.visitLiteralMap(this, context2);
    }
  };
  var Interpolation$1 = class extends AST {
    constructor(span, sourceSpan, strings, expressions) {
      super(span, sourceSpan);
      this.strings = strings;
      this.expressions = expressions;
    }
    visit(visitor, context2 = null) {
      return visitor.visitInterpolation(this, context2);
    }
  };
  var Binary = class extends AST {
    constructor(span, sourceSpan, operation, left, right) {
      super(span, sourceSpan);
      this.operation = operation;
      this.left = left;
      this.right = right;
    }
    visit(visitor, context2 = null) {
      return visitor.visitBinary(this, context2);
    }
  };
  var Unary = class _Unary extends Binary {
    /**
     * Creates a unary minus expression "-x", represented as `Binary` using "0 - x".
     */
    static createMinus(span, sourceSpan, expr) {
      return new _Unary(span, sourceSpan, "-", expr, "-", new LiteralPrimitive(span, sourceSpan, 0), expr);
    }
    /**
     * Creates a unary plus expression "+x", represented as `Binary` using "x - 0".
     */
    static createPlus(span, sourceSpan, expr) {
      return new _Unary(span, sourceSpan, "+", expr, "-", expr, new LiteralPrimitive(span, sourceSpan, 0));
    }
    /**
     * During the deprecation period this constructor is private, to avoid consumers from creating
     * a `Unary` with the fallback properties for `Binary`.
     */
    constructor(span, sourceSpan, operator, expr, binaryOp, binaryLeft, binaryRight) {
      super(span, sourceSpan, binaryOp, binaryLeft, binaryRight);
      this.operator = operator;
      this.expr = expr;
      this.left = null;
      this.right = null;
      this.operation = null;
    }
    visit(visitor, context2 = null) {
      if (visitor.visitUnary !== void 0) {
        return visitor.visitUnary(this, context2);
      }
      return visitor.visitBinary(this, context2);
    }
  };
  var PrefixNot = class extends AST {
    constructor(span, sourceSpan, expression) {
      super(span, sourceSpan);
      this.expression = expression;
    }
    visit(visitor, context2 = null) {
      return visitor.visitPrefixNot(this, context2);
    }
  };
  var NonNullAssert = class extends AST {
    constructor(span, sourceSpan, expression) {
      super(span, sourceSpan);
      this.expression = expression;
    }
    visit(visitor, context2 = null) {
      return visitor.visitNonNullAssert(this, context2);
    }
  };
  var Call = class extends AST {
    constructor(span, sourceSpan, receiver, args, argumentSpan) {
      super(span, sourceSpan);
      this.receiver = receiver;
      this.args = args;
      this.argumentSpan = argumentSpan;
    }
    visit(visitor, context2 = null) {
      return visitor.visitCall(this, context2);
    }
  };
  var SafeCall = class extends AST {
    constructor(span, sourceSpan, receiver, args, argumentSpan) {
      super(span, sourceSpan);
      this.receiver = receiver;
      this.args = args;
      this.argumentSpan = argumentSpan;
    }
    visit(visitor, context2 = null) {
      return visitor.visitSafeCall(this, context2);
    }
  };
  var AbsoluteSourceSpan = class {
    constructor(start, end) {
      this.start = start;
      this.end = end;
    }
  };
  var ASTWithSource = class extends AST {
    constructor(ast, source, location2, absoluteOffset, errors) {
      super(new ParseSpan(0, source === null ? 0 : source.length), new AbsoluteSourceSpan(absoluteOffset, source === null ? absoluteOffset : absoluteOffset + source.length));
      this.ast = ast;
      this.source = source;
      this.location = location2;
      this.errors = errors;
    }
    visit(visitor, context2 = null) {
      if (visitor.visitASTWithSource) {
        return visitor.visitASTWithSource(this, context2);
      }
      return this.ast.visit(visitor, context2);
    }
    toString() {
      return `${this.source} in ${this.location}`;
    }
  };
  var VariableBinding = class {
    /**
     * @param sourceSpan entire span of the binding.
     * @param key name of the LHS along with its span.
     * @param value optional value for the RHS along with its span.
     */
    constructor(sourceSpan, key, value) {
      this.sourceSpan = sourceSpan;
      this.key = key;
      this.value = value;
    }
  };
  var ExpressionBinding = class {
    /**
     * @param sourceSpan entire span of the binding.
     * @param key binding name, like ngForOf, ngForTrackBy, ngIf, along with its
     * span. Note that the length of the span may not be the same as
     * `key.source.length`. For example,
     * 1. key.source = ngFor, key.span is for "ngFor"
     * 2. key.source = ngForOf, key.span is for "of"
     * 3. key.source = ngForTrackBy, key.span is for "trackBy"
     * @param value optional expression for the RHS.
     */
    constructor(sourceSpan, key, value) {
      this.sourceSpan = sourceSpan;
      this.key = key;
      this.value = value;
    }
  };
  var RecursiveAstVisitor = class {
    visit(ast, context2) {
      ast.visit(this, context2);
    }
    visitUnary(ast, context2) {
      this.visit(ast.expr, context2);
    }
    visitBinary(ast, context2) {
      this.visit(ast.left, context2);
      this.visit(ast.right, context2);
    }
    visitChain(ast, context2) {
      this.visitAll(ast.expressions, context2);
    }
    visitConditional(ast, context2) {
      this.visit(ast.condition, context2);
      this.visit(ast.trueExp, context2);
      this.visit(ast.falseExp, context2);
    }
    visitPipe(ast, context2) {
      this.visit(ast.exp, context2);
      this.visitAll(ast.args, context2);
    }
    visitImplicitReceiver(ast, context2) {
    }
    visitThisReceiver(ast, context2) {
    }
    visitInterpolation(ast, context2) {
      this.visitAll(ast.expressions, context2);
    }
    visitKeyedRead(ast, context2) {
      this.visit(ast.receiver, context2);
      this.visit(ast.key, context2);
    }
    visitKeyedWrite(ast, context2) {
      this.visit(ast.receiver, context2);
      this.visit(ast.key, context2);
      this.visit(ast.value, context2);
    }
    visitLiteralArray(ast, context2) {
      this.visitAll(ast.expressions, context2);
    }
    visitLiteralMap(ast, context2) {
      this.visitAll(ast.values, context2);
    }
    visitLiteralPrimitive(ast, context2) {
    }
    visitPrefixNot(ast, context2) {
      this.visit(ast.expression, context2);
    }
    visitNonNullAssert(ast, context2) {
      this.visit(ast.expression, context2);
    }
    visitPropertyRead(ast, context2) {
      this.visit(ast.receiver, context2);
    }
    visitPropertyWrite(ast, context2) {
      this.visit(ast.receiver, context2);
      this.visit(ast.value, context2);
    }
    visitSafePropertyRead(ast, context2) {
      this.visit(ast.receiver, context2);
    }
    visitSafeKeyedRead(ast, context2) {
      this.visit(ast.receiver, context2);
      this.visit(ast.key, context2);
    }
    visitCall(ast, context2) {
      this.visit(ast.receiver, context2);
      this.visitAll(ast.args, context2);
    }
    visitSafeCall(ast, context2) {
      this.visit(ast.receiver, context2);
      this.visitAll(ast.args, context2);
    }
    // This is not part of the AstVisitor interface, just a helper method
    visitAll(asts, context2) {
      for (const ast of asts) {
        this.visit(ast, context2);
      }
    }
  };
  var AstTransformer = class {
    visitImplicitReceiver(ast, context2) {
      return ast;
    }
    visitThisReceiver(ast, context2) {
      return ast;
    }
    visitInterpolation(ast, context2) {
      return new Interpolation$1(ast.span, ast.sourceSpan, ast.strings, this.visitAll(ast.expressions));
    }
    visitLiteralPrimitive(ast, context2) {
      return new LiteralPrimitive(ast.span, ast.sourceSpan, ast.value);
    }
    visitPropertyRead(ast, context2) {
      return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);
    }
    visitPropertyWrite(ast, context2) {
      return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name, ast.value.visit(this));
    }
    visitSafePropertyRead(ast, context2) {
      return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);
    }
    visitLiteralArray(ast, context2) {
      return new LiteralArray(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));
    }
    visitLiteralMap(ast, context2) {
      return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, this.visitAll(ast.values));
    }
    visitUnary(ast, context2) {
      switch (ast.operator) {
        case "+":
          return Unary.createPlus(ast.span, ast.sourceSpan, ast.expr.visit(this));
        case "-":
          return Unary.createMinus(ast.span, ast.sourceSpan, ast.expr.visit(this));
        default:
          throw new Error(`Unknown unary operator ${ast.operator}`);
      }
    }
    visitBinary(ast, context2) {
      return new Binary(ast.span, ast.sourceSpan, ast.operation, ast.left.visit(this), ast.right.visit(this));
    }
    visitPrefixNot(ast, context2) {
      return new PrefixNot(ast.span, ast.sourceSpan, ast.expression.visit(this));
    }
    visitNonNullAssert(ast, context2) {
      return new NonNullAssert(ast.span, ast.sourceSpan, ast.expression.visit(this));
    }
    visitConditional(ast, context2) {
      return new Conditional(ast.span, ast.sourceSpan, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
    }
    visitPipe(ast, context2) {
      return new BindingPipe(ast.span, ast.sourceSpan, ast.exp.visit(this), ast.name, this.visitAll(ast.args), ast.nameSpan);
    }
    visitKeyedRead(ast, context2) {
      return new KeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));
    }
    visitKeyedWrite(ast, context2) {
      return new KeyedWrite(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this), ast.value.visit(this));
    }
    visitCall(ast, context2) {
      return new Call(ast.span, ast.sourceSpan, ast.receiver.visit(this), this.visitAll(ast.args), ast.argumentSpan);
    }
    visitSafeCall(ast, context2) {
      return new SafeCall(ast.span, ast.sourceSpan, ast.receiver.visit(this), this.visitAll(ast.args), ast.argumentSpan);
    }
    visitAll(asts) {
      const res = [];
      for (let i = 0; i < asts.length; ++i) {
        res[i] = asts[i].visit(this);
      }
      return res;
    }
    visitChain(ast, context2) {
      return new Chain(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));
    }
    visitSafeKeyedRead(ast, context2) {
      return new SafeKeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));
    }
  };
  var AstMemoryEfficientTransformer = class {
    visitImplicitReceiver(ast, context2) {
      return ast;
    }
    visitThisReceiver(ast, context2) {
      return ast;
    }
    visitInterpolation(ast, context2) {
      const expressions = this.visitAll(ast.expressions);
      if (expressions !== ast.expressions)
        return new Interpolation$1(ast.span, ast.sourceSpan, ast.strings, expressions);
      return ast;
    }
    visitLiteralPrimitive(ast, context2) {
      return ast;
    }
    visitPropertyRead(ast, context2) {
      const receiver = ast.receiver.visit(this);
      if (receiver !== ast.receiver) {
        return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);
      }
      return ast;
    }
    visitPropertyWrite(ast, context2) {
      const receiver = ast.receiver.visit(this);
      const value = ast.value.visit(this);
      if (receiver !== ast.receiver || value !== ast.value) {
        return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name, value);
      }
      return ast;
    }
    visitSafePropertyRead(ast, context2) {
      const receiver = ast.receiver.visit(this);
      if (receiver !== ast.receiver) {
        return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);
      }
      return ast;
    }
    visitLiteralArray(ast, context2) {
      const expressions = this.visitAll(ast.expressions);
      if (expressions !== ast.expressions) {
        return new LiteralArray(ast.span, ast.sourceSpan, expressions);
      }
      return ast;
    }
    visitLiteralMap(ast, context2) {
      const values = this.visitAll(ast.values);
      if (values !== ast.values) {
        return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, values);
      }
      return ast;
    }
    visitUnary(ast, context2) {
      const expr = ast.expr.visit(this);
      if (expr !== ast.expr) {
        switch (ast.operator) {
          case "+":
            return Unary.createPlus(ast.span, ast.sourceSpan, expr);
          case "-":
            return Unary.createMinus(ast.span, ast.sourceSpan, expr);
          default:
            throw new Error(`Unknown unary operator ${ast.operator}`);
        }
      }
      return ast;
    }
    visitBinary(ast, context2) {
      const left = ast.left.visit(this);
      const right = ast.right.visit(this);
      if (left !== ast.left || right !== ast.right) {
        return new Binary(ast.span, ast.sourceSpan, ast.operation, left, right);
      }
      return ast;
    }
    visitPrefixNot(ast, context2) {
      const expression = ast.expression.visit(this);
      if (expression !== ast.expression) {
        return new PrefixNot(ast.span, ast.sourceSpan, expression);
      }
      return ast;
    }
    visitNonNullAssert(ast, context2) {
      const expression = ast.expression.visit(this);
      if (expression !== ast.expression) {
        return new NonNullAssert(ast.span, ast.sourceSpan, expression);
      }
      return ast;
    }
    visitConditional(ast, context2) {
      const condition = ast.condition.visit(this);
      const trueExp = ast.trueExp.visit(this);
      const falseExp = ast.falseExp.visit(this);
      if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== ast.falseExp) {
        return new Conditional(ast.span, ast.sourceSpan, condition, trueExp, falseExp);
      }
      return ast;
    }
    visitPipe(ast, context2) {
      const exp = ast.exp.visit(this);
      const args = this.visitAll(ast.args);
      if (exp !== ast.exp || args !== ast.args) {
        return new BindingPipe(ast.span, ast.sourceSpan, exp, ast.name, args, ast.nameSpan);
      }
      return ast;
    }
    visitKeyedRead(ast, context2) {
      const obj = ast.receiver.visit(this);
      const key = ast.key.visit(this);
      if (obj !== ast.receiver || key !== ast.key) {
        return new KeyedRead(ast.span, ast.sourceSpan, obj, key);
      }
      return ast;
    }
    visitKeyedWrite(ast, context2) {
      const obj = ast.receiver.visit(this);
      const key = ast.key.visit(this);
      const value = ast.value.visit(this);
      if (obj !== ast.receiver || key !== ast.key || value !== ast.value) {
        return new KeyedWrite(ast.span, ast.sourceSpan, obj, key, value);
      }
      return ast;
    }
    visitAll(asts) {
      const res = [];
      let modified = false;
      for (let i = 0; i < asts.length; ++i) {
        const original = asts[i];
        const value = original.visit(this);
        res[i] = value;
        modified = modified || value !== original;
      }
      return modified ? res : asts;
    }
    visitChain(ast, context2) {
      const expressions = this.visitAll(ast.expressions);
      if (expressions !== ast.expressions) {
        return new Chain(ast.span, ast.sourceSpan, expressions);
      }
      return ast;
    }
    visitCall(ast, context2) {
      const receiver = ast.receiver.visit(this);
      const args = this.visitAll(ast.args);
      if (receiver !== ast.receiver || args !== ast.args) {
        return new Call(ast.span, ast.sourceSpan, receiver, args, ast.argumentSpan);
      }
      return ast;
    }
    visitSafeCall(ast, context2) {
      const receiver = ast.receiver.visit(this);
      const args = this.visitAll(ast.args);
      if (receiver !== ast.receiver || args !== ast.args) {
        return new SafeCall(ast.span, ast.sourceSpan, receiver, args, ast.argumentSpan);
      }
      return ast;
    }
    visitSafeKeyedRead(ast, context2) {
      const obj = ast.receiver.visit(this);
      const key = ast.key.visit(this);
      if (obj !== ast.receiver || key !== ast.key) {
        return new SafeKeyedRead(ast.span, ast.sourceSpan, obj, key);
      }
      return ast;
    }
  };
  var ParsedProperty = class {
    constructor(name, expression, type, sourceSpan, keySpan, valueSpan) {
      this.name = name;
      this.expression = expression;
      this.type = type;
      this.sourceSpan = sourceSpan;
      this.keySpan = keySpan;
      this.valueSpan = valueSpan;
      this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;
      this.isAnimation = this.type === ParsedPropertyType.ANIMATION;
    }
  };
  var ParsedPropertyType;
  (function(ParsedPropertyType2) {
    ParsedPropertyType2[ParsedPropertyType2["DEFAULT"] = 0] = "DEFAULT";
    ParsedPropertyType2[ParsedPropertyType2["LITERAL_ATTR"] = 1] = "LITERAL_ATTR";
    ParsedPropertyType2[ParsedPropertyType2["ANIMATION"] = 2] = "ANIMATION";
    ParsedPropertyType2[ParsedPropertyType2["TWO_WAY"] = 3] = "TWO_WAY";
  })(ParsedPropertyType || (ParsedPropertyType = {}));
  var ParsedEvent = class {
    constructor(name, targetOrPhase, type, handler, sourceSpan, handlerSpan, keySpan) {
      this.name = name;
      this.targetOrPhase = targetOrPhase;
      this.type = type;
      this.handler = handler;
      this.sourceSpan = sourceSpan;
      this.handlerSpan = handlerSpan;
      this.keySpan = keySpan;
    }
  };
  var ParsedVariable = class {
    constructor(name, value, sourceSpan, keySpan, valueSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
      this.keySpan = keySpan;
      this.valueSpan = valueSpan;
    }
  };
  var BoundElementProperty = class {
    constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan) {
      this.name = name;
      this.type = type;
      this.securityContext = securityContext;
      this.value = value;
      this.unit = unit;
      this.sourceSpan = sourceSpan;
      this.keySpan = keySpan;
      this.valueSpan = valueSpan;
    }
  };
  var EventHandlerVars = class {
    static {
      this.event = variable("$event");
    }
  };
  function convertActionBinding(localResolver, implicitReceiver, action, bindingId, baseSourceSpan, implicitReceiverAccesses, globals) {
    localResolver ??= new DefaultLocalResolver(globals);
    const visitor = new _AstToIrVisitor(
      localResolver,
      implicitReceiver,
      bindingId,
      /* supportsInterpolation */
      false,
      baseSourceSpan,
      implicitReceiverAccesses
    );
    const actionStmts = [];
    flattenStatements(convertActionBuiltins(action).visit(visitor, _Mode.Statement), actionStmts);
    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
    if (visitor.usesImplicitReceiver) {
      localResolver.notifyImplicitReceiverUse();
    }
    const lastIndex = actionStmts.length - 1;
    if (lastIndex >= 0) {
      const lastStatement = actionStmts[lastIndex];
      if (lastStatement instanceof ExpressionStatement) {
        actionStmts[lastIndex] = new ReturnStatement(lastStatement.expr);
      }
    }
    return actionStmts;
  }
  function convertAssignmentActionBinding(localResolver, implicitReceiver, action, bindingId, baseSourceSpan, implicitReceiverAccesses, globals) {
    localResolver ??= new DefaultLocalResolver(globals);
    const visitor = new _AstToIrVisitor(
      localResolver,
      implicitReceiver,
      bindingId,
      /* supportsInterpolation */
      false,
      baseSourceSpan,
      implicitReceiverAccesses
    );
    let convertedAction = convertActionBuiltins(action).visit(visitor, _Mode.Statement);
    if (!(convertedAction instanceof ExpressionStatement)) {
      throw new Error(`Illegal state: unsupported expression in two-way action binding.`);
    }
    convertedAction = wrapAssignmentAction(convertedAction.expr).toStmt();
    const actionStmts = [];
    flattenStatements(convertedAction, actionStmts);
    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
    actionStmts.push(new ReturnStatement(EventHandlerVars.event));
    implicitReceiverAccesses?.add(EventHandlerVars.event.name);
    if (visitor.usesImplicitReceiver) {
      localResolver.notifyImplicitReceiverUse();
    }
    return actionStmts;
  }
  function wrapAssignmentReadExpression(ast) {
    return new ExternalExpr(Identifiers.twoWayBindingSet).callFn([ast, EventHandlerVars.event]).or(ast.set(EventHandlerVars.event));
  }
  function isReadExpression$1(value) {
    return value instanceof ReadPropExpr || value instanceof ReadKeyExpr;
  }
  function wrapAssignmentAction(ast) {
    if (isReadExpression$1(ast)) {
      return wrapAssignmentReadExpression(ast);
    }
    if (ast instanceof BinaryOperatorExpr && isReadExpression$1(ast.rhs)) {
      return new BinaryOperatorExpr(ast.operator, ast.lhs, wrapAssignmentReadExpression(ast.rhs));
    }
    if (ast instanceof ConditionalExpr && isReadExpression$1(ast.falseCase)) {
      return new ConditionalExpr(ast.condition, ast.trueCase, wrapAssignmentReadExpression(ast.falseCase));
    }
    if (ast instanceof NotExpr) {
      let expr = ast.condition;
      while (true) {
        if (expr instanceof NotExpr) {
          expr = expr.condition;
        } else {
          if (isReadExpression$1(expr)) {
            return wrapAssignmentReadExpression(expr);
          }
          break;
        }
      }
    }
    throw new Error(`Illegal state: unsupported expression in two-way action binding.`);
  }
  function convertPropertyBindingBuiltins(converterFactory, ast) {
    return convertBuiltins(converterFactory, ast);
  }
  var ConvertPropertyBindingResult = class {
    constructor(stmts, currValExpr) {
      this.stmts = stmts;
      this.currValExpr = currValExpr;
    }
  };
  function convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId) {
    if (!localResolver) {
      localResolver = new DefaultLocalResolver();
    }
    const visitor = new _AstToIrVisitor(
      localResolver,
      implicitReceiver,
      bindingId,
      /* supportsInterpolation */
      false
    );
    const outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);
    const stmts = getStatementsFromVisitor(visitor, bindingId);
    if (visitor.usesImplicitReceiver) {
      localResolver.notifyImplicitReceiverUse();
    }
    return new ConvertPropertyBindingResult(stmts, outputExpr);
  }
  function convertPureComponentScopeFunction(ast, localResolver, implicitReceiver, bindingId) {
    const converted = convertPropertyBindingBuiltins({
      createLiteralArrayConverter: () => (args) => literalArr(args),
      createLiteralMapConverter: (keys) => (values) => literalMap(keys.map((key, index) => {
        return {
          key: key.key,
          value: values[index],
          quoted: key.quoted
        };
      })),
      createPipeConverter: () => {
        throw new Error("Illegal State: Pipes are not allowed in this context");
      }
    }, ast);
    const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, false);
    const statements = [];
    flattenStatements(converted.visit(visitor, _Mode.Statement), statements);
    return statements;
  }
  function convertUpdateArguments(localResolver, contextVariableExpression, expressionWithArgumentsToExtract, bindingId) {
    const visitor = new _AstToIrVisitor(
      localResolver,
      contextVariableExpression,
      bindingId,
      /* supportsInterpolation */
      true
    );
    const outputExpr = visitor.visitInterpolation(expressionWithArgumentsToExtract, _Mode.Expression);
    if (visitor.usesImplicitReceiver) {
      localResolver.notifyImplicitReceiverUse();
    }
    const stmts = getStatementsFromVisitor(visitor, bindingId);
    const args = outputExpr.args;
    return { stmts, args };
  }
  function getStatementsFromVisitor(visitor, bindingId) {
    const stmts = [];
    for (let i = 0; i < visitor.temporaryCount; i++) {
      stmts.push(temporaryDeclaration(bindingId, i));
    }
    return stmts;
  }
  function convertBuiltins(converterFactory, ast) {
    const visitor = new _BuiltinAstConverter(converterFactory);
    return ast.visit(visitor);
  }
  function convertActionBuiltins(action) {
    const converterFactory = {
      createLiteralArrayConverter: () => {
        return (args) => literalArr(args);
      },
      createLiteralMapConverter: (keys) => {
        return (values) => {
          const entries = keys.map((k, i) => ({
            key: k.key,
            value: values[i],
            quoted: k.quoted
          }));
          return literalMap(entries);
        };
      },
      createPipeConverter: (name) => {
        throw new Error(`Illegal State: Actions are not allowed to contain pipes. Pipe: ${name}`);
      }
    };
    return convertPropertyBindingBuiltins(converterFactory, action);
  }
  function temporaryName(bindingId, temporaryNumber) {
    return `tmp_${bindingId}_${temporaryNumber}`;
  }
  function temporaryDeclaration(bindingId, temporaryNumber) {
    return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber));
  }
  function prependTemporaryDecls(temporaryCount, bindingId, statements) {
    for (let i = temporaryCount - 1; i >= 0; i--) {
      statements.unshift(temporaryDeclaration(bindingId, i));
    }
  }
  var _Mode;
  (function(_Mode2) {
    _Mode2[_Mode2["Statement"] = 0] = "Statement";
    _Mode2[_Mode2["Expression"] = 1] = "Expression";
  })(_Mode || (_Mode = {}));
  function ensureStatementMode(mode, ast) {
    if (mode !== _Mode.Statement) {
      throw new Error(`Expected a statement, but saw ${ast}`);
    }
  }
  function ensureExpressionMode(mode, ast) {
    if (mode !== _Mode.Expression) {
      throw new Error(`Expected an expression, but saw ${ast}`);
    }
  }
  function convertToStatementIfNeeded(mode, expr) {
    if (mode === _Mode.Statement) {
      return expr.toStmt();
    } else {
      return expr;
    }
  }
  var _BuiltinAstConverter = class extends AstTransformer {
    constructor(_converterFactory) {
      super();
      this._converterFactory = _converterFactory;
    }
    visitPipe(ast, context2) {
      const args = [ast.exp, ...ast.args].map((ast2) => ast2.visit(this, context2));
      return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createPipeConverter(ast.name, args.length));
    }
    visitLiteralArray(ast, context2) {
      const args = ast.expressions.map((ast2) => ast2.visit(this, context2));
      return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));
    }
    visitLiteralMap(ast, context2) {
      const args = ast.values.map((ast2) => ast2.visit(this, context2));
      return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralMapConverter(ast.keys));
    }
  };
  var _AstToIrVisitor = class {
    constructor(_localResolver, _implicitReceiver, bindingId, supportsInterpolation, baseSourceSpan, implicitReceiverAccesses) {
      this._localResolver = _localResolver;
      this._implicitReceiver = _implicitReceiver;
      this.bindingId = bindingId;
      this.supportsInterpolation = supportsInterpolation;
      this.baseSourceSpan = baseSourceSpan;
      this.implicitReceiverAccesses = implicitReceiverAccesses;
      this._nodeMap = /* @__PURE__ */ new Map();
      this._resultMap = /* @__PURE__ */ new Map();
      this._currentTemporary = 0;
      this.temporaryCount = 0;
      this.usesImplicitReceiver = false;
    }
    visitUnary(ast, mode) {
      let op;
      switch (ast.operator) {
        case "+":
          op = UnaryOperator.Plus;
          break;
        case "-":
          op = UnaryOperator.Minus;
          break;
        default:
          throw new Error(`Unsupported operator ${ast.operator}`);
      }
      return convertToStatementIfNeeded(mode, new UnaryOperatorExpr(op, this._visit(ast.expr, _Mode.Expression), void 0, this.convertSourceSpan(ast.span)));
    }
    visitBinary(ast, mode) {
      let op;
      switch (ast.operation) {
        case "+":
          op = BinaryOperator.Plus;
          break;
        case "-":
          op = BinaryOperator.Minus;
          break;
        case "*":
          op = BinaryOperator.Multiply;
          break;
        case "/":
          op = BinaryOperator.Divide;
          break;
        case "%":
          op = BinaryOperator.Modulo;
          break;
        case "&&":
          op = BinaryOperator.And;
          break;
        case "||":
          op = BinaryOperator.Or;
          break;
        case "==":
          op = BinaryOperator.Equals;
          break;
        case "!=":
          op = BinaryOperator.NotEquals;
          break;
        case "===":
          op = BinaryOperator.Identical;
          break;
        case "!==":
          op = BinaryOperator.NotIdentical;
          break;
        case "<":
          op = BinaryOperator.Lower;
          break;
        case ">":
          op = BinaryOperator.Bigger;
          break;
        case "<=":
          op = BinaryOperator.LowerEquals;
          break;
        case ">=":
          op = BinaryOperator.BiggerEquals;
          break;
        case "??":
          return this.convertNullishCoalesce(ast, mode);
        default:
          throw new Error(`Unsupported operation ${ast.operation}`);
      }
      return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this._visit(ast.left, _Mode.Expression), this._visit(ast.right, _Mode.Expression), void 0, this.convertSourceSpan(ast.span)));
    }
    visitChain(ast, mode) {
      ensureStatementMode(mode, ast);
      return this.visitAll(ast.expressions, mode);
    }
    visitConditional(ast, mode) {
      const value = this._visit(ast.condition, _Mode.Expression);
      return convertToStatementIfNeeded(mode, value.conditional(this._visit(ast.trueExp, _Mode.Expression), this._visit(ast.falseExp, _Mode.Expression), this.convertSourceSpan(ast.span)));
    }
    visitPipe(ast, mode) {
      throw new Error(`Illegal state: Pipes should have been converted into functions. Pipe: ${ast.name}`);
    }
    visitImplicitReceiver(ast, mode) {
      ensureExpressionMode(mode, ast);
      this.usesImplicitReceiver = true;
      return this._implicitReceiver;
    }
    visitThisReceiver(ast, mode) {
      return this.visitImplicitReceiver(ast, mode);
    }
    visitInterpolation(ast, mode) {
      if (!this.supportsInterpolation) {
        throw new Error("Unexpected interpolation");
      }
      ensureExpressionMode(mode, ast);
      let args = [];
      for (let i = 0; i < ast.strings.length - 1; i++) {
        args.push(literal(ast.strings[i]));
        args.push(this._visit(ast.expressions[i], _Mode.Expression));
      }
      args.push(literal(ast.strings[ast.strings.length - 1]));
      const strings = ast.strings;
      if (strings.length === 2 && strings[0] === "" && strings[1] === "") {
        args = [args[1]];
      } else if (ast.expressions.length >= 9) {
        args = [literalArr(args)];
      }
      return new InterpolationExpression(args);
    }
    visitKeyedRead(ast, mode) {
      const leftMostSafe = this.leftMostSafeNode(ast);
      if (leftMostSafe) {
        return this.convertSafeAccess(ast, leftMostSafe, mode);
      } else {
        return convertToStatementIfNeeded(mode, this._visit(ast.receiver, _Mode.Expression).key(this._visit(ast.key, _Mode.Expression)));
      }
    }
    visitKeyedWrite(ast, mode) {
      const obj = this._visit(ast.receiver, _Mode.Expression);
      const key = this._visit(ast.key, _Mode.Expression);
      const value = this._visit(ast.value, _Mode.Expression);
      if (obj === this._implicitReceiver) {
        this._localResolver.maybeRestoreView();
      }
      return convertToStatementIfNeeded(mode, obj.key(key).set(value));
    }
    visitLiteralArray(ast, mode) {
      throw new Error(`Illegal State: literal arrays should have been converted into functions`);
    }
    visitLiteralMap(ast, mode) {
      throw new Error(`Illegal State: literal maps should have been converted into functions`);
    }
    visitLiteralPrimitive(ast, mode) {
      const type = ast.value === null || ast.value === void 0 || ast.value === true || ast.value === true ? INFERRED_TYPE : void 0;
      return convertToStatementIfNeeded(mode, literal(ast.value, type, this.convertSourceSpan(ast.span)));
    }
    _getLocal(name, receiver) {
      if (this._localResolver.globals?.has(name) && receiver instanceof ThisReceiver) {
        return null;
      }
      return this._localResolver.getLocal(name);
    }
    visitPrefixNot(ast, mode) {
      return convertToStatementIfNeeded(mode, not(this._visit(ast.expression, _Mode.Expression)));
    }
    visitNonNullAssert(ast, mode) {
      return convertToStatementIfNeeded(mode, this._visit(ast.expression, _Mode.Expression));
    }
    visitPropertyRead(ast, mode) {
      const leftMostSafe = this.leftMostSafeNode(ast);
      if (leftMostSafe) {
        return this.convertSafeAccess(ast, leftMostSafe, mode);
      } else {
        let result = null;
        const prevUsesImplicitReceiver = this.usesImplicitReceiver;
        const receiver = this._visit(ast.receiver, _Mode.Expression);
        if (receiver === this._implicitReceiver) {
          result = this._getLocal(ast.name, ast.receiver);
          if (result) {
            this.usesImplicitReceiver = prevUsesImplicitReceiver;
            this.addImplicitReceiverAccess(ast.name);
          }
        }
        if (result == null) {
          result = receiver.prop(ast.name, this.convertSourceSpan(ast.span));
        }
        return convertToStatementIfNeeded(mode, result);
      }
    }
    visitPropertyWrite(ast, mode) {
      const receiver = this._visit(ast.receiver, _Mode.Expression);
      const prevUsesImplicitReceiver = this.usesImplicitReceiver;
      let varExpr = null;
      if (receiver === this._implicitReceiver) {
        const localExpr = this._getLocal(ast.name, ast.receiver);
        if (localExpr) {
          if (localExpr instanceof ReadPropExpr) {
            varExpr = localExpr;
            this.usesImplicitReceiver = prevUsesImplicitReceiver;
            this.addImplicitReceiverAccess(ast.name);
          } else {
            const receiver2 = ast.name;
            const value = ast.value instanceof PropertyRead ? ast.value.name : void 0;
            throw new Error(`Cannot assign value "${value}" to template variable "${receiver2}". Template variables are read-only.`);
          }
        }
      }
      if (varExpr === null) {
        varExpr = receiver.prop(ast.name, this.convertSourceSpan(ast.span));
      }
      return convertToStatementIfNeeded(mode, varExpr.set(this._visit(ast.value, _Mode.Expression)));
    }
    visitSafePropertyRead(ast, mode) {
      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
    }
    visitSafeKeyedRead(ast, mode) {
      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
    }
    visitAll(asts, mode) {
      return asts.map((ast) => this._visit(ast, mode));
    }
    visitCall(ast, mode) {
      const leftMostSafe = this.leftMostSafeNode(ast);
      if (leftMostSafe) {
        return this.convertSafeAccess(ast, leftMostSafe, mode);
      }
      const convertedArgs = this.visitAll(ast.args, _Mode.Expression);
      if (ast instanceof BuiltinFunctionCall) {
        return convertToStatementIfNeeded(mode, ast.converter(convertedArgs));
      }
      const receiver = ast.receiver;
      if (receiver instanceof PropertyRead && receiver.receiver instanceof ImplicitReceiver && !(receiver.receiver instanceof ThisReceiver) && receiver.name === "$any") {
        if (convertedArgs.length !== 1) {
          throw new Error(`Invalid call to $any, expected 1 argument but received ${convertedArgs.length || "none"}`);
        }
        return convertToStatementIfNeeded(mode, convertedArgs[0]);
      }
      const call2 = this._visit(receiver, _Mode.Expression).callFn(convertedArgs, this.convertSourceSpan(ast.span));
      return convertToStatementIfNeeded(mode, call2);
    }
    visitSafeCall(ast, mode) {
      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
    }
    _visit(ast, mode) {
      const result = this._resultMap.get(ast);
      if (result)
        return result;
      return (this._nodeMap.get(ast) || ast).visit(this, mode);
    }
    convertSafeAccess(ast, leftMostSafe, mode) {
      let guardedExpression2 = this._visit(leftMostSafe.receiver, _Mode.Expression);
      let temporary = void 0;
      if (this.needsTemporaryInSafeAccess(leftMostSafe.receiver)) {
        temporary = this.allocateTemporary();
        guardedExpression2 = temporary.set(guardedExpression2);
        this._resultMap.set(leftMostSafe.receiver, temporary);
      }
      const condition = guardedExpression2.isBlank();
      if (leftMostSafe instanceof SafeCall) {
        this._nodeMap.set(leftMostSafe, new Call(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.receiver, leftMostSafe.args, leftMostSafe.argumentSpan));
      } else if (leftMostSafe instanceof SafeKeyedRead) {
        this._nodeMap.set(leftMostSafe, new KeyedRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.receiver, leftMostSafe.key));
      } else {
        this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.nameSpan, leftMostSafe.receiver, leftMostSafe.name));
      }
      const access = this._visit(ast, _Mode.Expression);
      this._nodeMap.delete(leftMostSafe);
      if (temporary) {
        this.releaseTemporary(temporary);
      }
      return convertToStatementIfNeeded(mode, condition.conditional(NULL_EXPR, access));
    }
    convertNullishCoalesce(ast, mode) {
      const left = this._visit(ast.left, _Mode.Expression);
      const right = this._visit(ast.right, _Mode.Expression);
      const temporary = this.allocateTemporary();
      this.releaseTemporary(temporary);
      return convertToStatementIfNeeded(mode, temporary.set(left).notIdentical(NULL_EXPR).and(temporary.notIdentical(literal(void 0))).conditional(temporary, right));
    }
    // Given an expression of the form a?.b.c?.d.e then the left most safe node is
    // the (a?.b). The . and ?. are left associative thus can be rewritten as:
    // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or
    // safe method call as this needs to be transformed initially to:
    //   a == null ? null : a.c.b.c?.d.e
    // then to:
    //   a == null ? null : a.b.c == null ? null : a.b.c.d.e
    leftMostSafeNode(ast) {
      const visit = (visitor, ast2) => {
        return (this._nodeMap.get(ast2) || ast2).visit(visitor);
      };
      return ast.visit({
        visitUnary(ast2) {
          return null;
        },
        visitBinary(ast2) {
          return null;
        },
        visitChain(ast2) {
          return null;
        },
        visitConditional(ast2) {
          return null;
        },
        visitCall(ast2) {
          return visit(this, ast2.receiver);
        },
        visitSafeCall(ast2) {
          return visit(this, ast2.receiver) || ast2;
        },
        visitImplicitReceiver(ast2) {
          return null;
        },
        visitThisReceiver(ast2) {
          return null;
        },
        visitInterpolation(ast2) {
          return null;
        },
        visitKeyedRead(ast2) {
          return visit(this, ast2.receiver);
        },
        visitKeyedWrite(ast2) {
          return null;
        },
        visitLiteralArray(ast2) {
          return null;
        },
        visitLiteralMap(ast2) {
          return null;
        },
        visitLiteralPrimitive(ast2) {
          return null;
        },
        visitPipe(ast2) {
          return null;
        },
        visitPrefixNot(ast2) {
          return null;
        },
        visitNonNullAssert(ast2) {
          return visit(this, ast2.expression);
        },
        visitPropertyRead(ast2) {
          return visit(this, ast2.receiver);
        },
        visitPropertyWrite(ast2) {
          return null;
        },
        visitSafePropertyRead(ast2) {
          return visit(this, ast2.receiver) || ast2;
        },
        visitSafeKeyedRead(ast2) {
          return visit(this, ast2.receiver) || ast2;
        }
      });
    }
    // Returns true of the AST includes a method or a pipe indicating that, if the
    // expression is used as the target of a safe property or method access then
    // the expression should be stored into a temporary variable.
    needsTemporaryInSafeAccess(ast) {
      const visit = (visitor, ast2) => {
        return ast2 && (this._nodeMap.get(ast2) || ast2).visit(visitor);
      };
      const visitSome = (visitor, ast2) => {
        return ast2.some((ast3) => visit(visitor, ast3));
      };
      return ast.visit({
        visitUnary(ast2) {
          return visit(this, ast2.expr);
        },
        visitBinary(ast2) {
          return visit(this, ast2.left) || visit(this, ast2.right);
        },
        visitChain(ast2) {
          return false;
        },
        visitConditional(ast2) {
          return visit(this, ast2.condition) || visit(this, ast2.trueExp) || visit(this, ast2.falseExp);
        },
        visitCall(ast2) {
          return true;
        },
        visitSafeCall(ast2) {
          return true;
        },
        visitImplicitReceiver(ast2) {
          return false;
        },
        visitThisReceiver(ast2) {
          return false;
        },
        visitInterpolation(ast2) {
          return visitSome(this, ast2.expressions);
        },
        visitKeyedRead(ast2) {
          return false;
        },
        visitKeyedWrite(ast2) {
          return false;
        },
        visitLiteralArray(ast2) {
          return true;
        },
        visitLiteralMap(ast2) {
          return true;
        },
        visitLiteralPrimitive(ast2) {
          return false;
        },
        visitPipe(ast2) {
          return true;
        },
        visitPrefixNot(ast2) {
          return visit(this, ast2.expression);
        },
        visitNonNullAssert(ast2) {
          return visit(this, ast2.expression);
        },
        visitPropertyRead(ast2) {
          return false;
        },
        visitPropertyWrite(ast2) {
          return false;
        },
        visitSafePropertyRead(ast2) {
          return false;
        },
        visitSafeKeyedRead(ast2) {
          return false;
        }
      });
    }
    allocateTemporary() {
      const tempNumber = this._currentTemporary++;
      this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
      return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
    }
    releaseTemporary(temporary) {
      this._currentTemporary--;
      if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
        throw new Error(`Temporary ${temporary.name} released out of order`);
      }
    }
    /**
     * Creates an absolute `ParseSourceSpan` from the relative `ParseSpan`.
     *
     * `ParseSpan` objects are relative to the start of the expression.
     * This method converts these to full `ParseSourceSpan` objects that
     * show where the span is within the overall source file.
     *
     * @param span the relative span to convert.
     * @returns a `ParseSourceSpan` for the given span or null if no
     * `baseSourceSpan` was provided to this class.
     */
    convertSourceSpan(span) {
      if (this.baseSourceSpan) {
        const start = this.baseSourceSpan.start.moveBy(span.start);
        const end = this.baseSourceSpan.start.moveBy(span.end);
        const fullStart = this.baseSourceSpan.fullStart.moveBy(span.start);
        return new ParseSourceSpan(start, end, fullStart);
      } else {
        return null;
      }
    }
    /** Adds the name of an AST to the list of implicit receiver accesses. */
    addImplicitReceiverAccess(name) {
      if (this.implicitReceiverAccesses) {
        this.implicitReceiverAccesses.add(name);
      }
    }
  };
  function flattenStatements(arg, output2) {
    if (Array.isArray(arg)) {
      arg.forEach((entry) => flattenStatements(entry, output2));
    } else {
      output2.push(arg);
    }
  }
  function unsupported() {
    throw new Error("Unsupported operation");
  }
  var InterpolationExpression = class extends Expression {
    constructor(args) {
      super(null, null);
      this.args = args;
      this.isConstant = unsupported;
      this.isEquivalent = unsupported;
      this.visitExpression = unsupported;
      this.clone = unsupported;
    }
  };
  var DefaultLocalResolver = class {
    constructor(globals) {
      this.globals = globals;
    }
    notifyImplicitReceiverUse() {
    }
    maybeRestoreView() {
    }
    getLocal(name) {
      if (name === EventHandlerVars.event.name) {
        return EventHandlerVars.event;
      }
      return null;
    }
  };
  var BuiltinFunctionCall = class extends Call {
    constructor(span, sourceSpan, args, converter) {
      super(span, sourceSpan, new EmptyExpr$1(span, sourceSpan), args, null);
      this.converter = converter;
    }
  };
  var _SECURITY_SCHEMA;
  function SECURITY_SCHEMA() {
    if (!_SECURITY_SCHEMA) {
      _SECURITY_SCHEMA = {};
      registerContext(SecurityContext2.HTML, [
        "iframe|srcdoc",
        "*|innerHTML",
        "*|outerHTML"
      ]);
      registerContext(SecurityContext2.STYLE, ["*|style"]);
      registerContext(SecurityContext2.URL, [
        "*|formAction",
        "area|href",
        "area|ping",
        "audio|src",
        "a|href",
        "a|ping",
        "blockquote|cite",
        "body|background",
        "del|cite",
        "form|action",
        "img|src",
        "input|src",
        "ins|cite",
        "q|cite",
        "source|src",
        "track|src",
        "video|poster",
        "video|src"
      ]);
      registerContext(SecurityContext2.RESOURCE_URL, [
        "applet|code",
        "applet|codebase",
        "base|href",
        "embed|src",
        "frame|src",
        "head|profile",
        "html|manifest",
        "iframe|src",
        "link|href",
        "media|src",
        "object|codebase",
        "object|data",
        "script|src"
      ]);
    }
    return _SECURITY_SCHEMA;
  }
  function registerContext(ctx, specs) {
    for (const spec of specs)
      _SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
  }
  var IFRAME_SECURITY_SENSITIVE_ATTRS = /* @__PURE__ */ new Set(["sandbox", "allow", "allowfullscreen", "referrerpolicy", "csp", "fetchpriority"]);
  function isIframeSecuritySensitiveAttr(attrName) {
    return IFRAME_SECURITY_SENSITIVE_ATTRS.has(attrName.toLowerCase());
  }
  var animationKeywords = /* @__PURE__ */ new Set([
    // global values
    "inherit",
    "initial",
    "revert",
    "unset",
    // animation-direction
    "alternate",
    "alternate-reverse",
    "normal",
    "reverse",
    // animation-fill-mode
    "backwards",
    "both",
    "forwards",
    "none",
    // animation-play-state
    "paused",
    "running",
    // animation-timing-function
    "ease",
    "ease-in",
    "ease-in-out",
    "ease-out",
    "linear",
    "step-start",
    "step-end",
    // `steps()` function
    "end",
    "jump-both",
    "jump-end",
    "jump-none",
    "jump-start",
    "start"
  ]);
  var scopedAtRuleIdentifiers = ["@media", "@supports", "@document", "@layer", "@container", "@scope", "@starting-style"];
  var ShadowCss = class {
    constructor() {
      this._animationDeclarationKeyframesRe = /(^|\s+)(?:(?:(['"])((?:\\\\|\\\2|(?!\2).)+)\2)|(-?[A-Za-z][\w\-]*))(?=[,\s]|$)/g;
    }
    /*
     * Shim some cssText with the given selector. Returns cssText that can be included in the document
     *
     * The selector is the attribute added to all elements inside the host,
     * The hostSelector is the attribute added to the host itself.
     */
    shimCssText(cssText, selector, hostSelector = "") {
      const comments = [];
      cssText = cssText.replace(_commentRe, (m) => {
        if (m.match(_commentWithHashRe)) {
          comments.push(m);
        } else {
          const newLinesMatches = m.match(_newLinesRe);
          comments.push((newLinesMatches?.join("") ?? "") + "\n");
        }
        return COMMENT_PLACEHOLDER;
      });
      cssText = this._insertDirectives(cssText);
      const scopedCssText = this._scopeCssText(cssText, selector, hostSelector);
      let commentIdx = 0;
      return scopedCssText.replace(_commentWithHashPlaceHolderRe, () => comments[commentIdx++]);
    }
    _insertDirectives(cssText) {
      cssText = this._insertPolyfillDirectivesInCssText(cssText);
      return this._insertPolyfillRulesInCssText(cssText);
    }
    /**
     * Process styles to add scope to keyframes.
     *
     * Modify both the names of the keyframes defined in the component styles and also the css
     * animation rules using them.
     *
     * Animation rules using keyframes defined elsewhere are not modified to allow for globally
     * defined keyframes.
     *
     * For example, we convert this css:
     *
     * ```
     * .box {
     *   animation: box-animation 1s forwards;
     * }
     *
     * @keyframes box-animation {
     *   to {
     *     background-color: green;
     *   }
     * }
     * ```
     *
     * to this:
     *
     * ```
     * .box {
     *   animation: scopeName_box-animation 1s forwards;
     * }
     *
     * @keyframes scopeName_box-animation {
     *   to {
     *     background-color: green;
     *   }
     * }
     * ```
     *
     * @param cssText the component's css text that needs to be scoped.
     * @param scopeSelector the component's scope selector.
     *
     * @returns the scoped css text.
     */
    _scopeKeyframesRelatedCss(cssText, scopeSelector) {
      const unscopedKeyframesSet = /* @__PURE__ */ new Set();
      const scopedKeyframesCssText = processRules(cssText, (rule) => this._scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet));
      return processRules(scopedKeyframesCssText, (rule) => this._scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet));
    }
    /**
     * Scopes local keyframes names, returning the updated css rule and it also
     * adds the original keyframe name to a provided set to collect all keyframes names
     * so that it can later be used to scope the animation rules.
     *
     * For example, it takes a rule such as:
     *
     * ```
     * @keyframes box-animation {
     *   to {
     *     background-color: green;
     *   }
     * }
     * ```
     *
     * and returns:
     *
     * ```
     * @keyframes scopeName_box-animation {
     *   to {
     *     background-color: green;
     *   }
     * }
     * ```
     * and as a side effect it adds "box-animation" to the `unscopedKeyframesSet` set
     *
     * @param cssRule the css rule to process.
     * @param scopeSelector the component's scope selector.
     * @param unscopedKeyframesSet the set of unscoped keyframes names (which can be
     * modified as a side effect)
     *
     * @returns the css rule modified with the scoped keyframes name.
     */
    _scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet) {
      return {
        ...rule,
        selector: rule.selector.replace(/(^@(?:-webkit-)?keyframes(?:\s+))(['"]?)(.+)\2(\s*)$/, (_, start, quote, keyframeName, endSpaces) => {
          unscopedKeyframesSet.add(unescapeQuotes(keyframeName, quote));
          return `${start}${quote}${scopeSelector}_${keyframeName}${quote}${endSpaces}`;
        })
      };
    }
    /**
     * Function used to scope a keyframes name (obtained from an animation declaration)
     * using an existing set of unscopedKeyframes names to discern if the scoping needs to be
     * performed (keyframes names of keyframes not defined in the component's css need not to be
     * scoped).
     *
     * @param keyframe the keyframes name to check.
     * @param scopeSelector the component's scope selector.
     * @param unscopedKeyframesSet the set of unscoped keyframes names.
     *
     * @returns the scoped name of the keyframe, or the original name is the name need not to be
     * scoped.
     */
    _scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet) {
      return keyframe.replace(/^(\s*)(['"]?)(.+?)\2(\s*)$/, (_, spaces1, quote, name, spaces2) => {
        name = `${unscopedKeyframesSet.has(unescapeQuotes(name, quote)) ? scopeSelector + "_" : ""}${name}`;
        return `${spaces1}${quote}${name}${quote}${spaces2}`;
      });
    }
    /**
     * Scope an animation rule so that the keyframes mentioned in such rule
     * are scoped if defined in the component's css and left untouched otherwise.
     *
     * It can scope values of both the 'animation' and 'animation-name' properties.
     *
     * @param rule css rule to scope.
     * @param scopeSelector the component's scope selector.
     * @param unscopedKeyframesSet the set of unscoped keyframes names.
     *
     * @returns the updated css rule.
     **/
    _scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet) {
      let content = rule.content.replace(/((?:^|\s+|;)(?:-webkit-)?animation(?:\s*):(?:\s*))([^;]+)/g, (_, start, animationDeclarations) => start + animationDeclarations.replace(this._animationDeclarationKeyframesRe, (original, leadingSpaces, quote = "", quotedName, nonQuotedName) => {
        if (quotedName) {
          return `${leadingSpaces}${this._scopeAnimationKeyframe(`${quote}${quotedName}${quote}`, scopeSelector, unscopedKeyframesSet)}`;
        } else {
          return animationKeywords.has(nonQuotedName) ? original : `${leadingSpaces}${this._scopeAnimationKeyframe(nonQuotedName, scopeSelector, unscopedKeyframesSet)}`;
        }
      }));
      content = content.replace(/((?:^|\s+|;)(?:-webkit-)?animation-name(?:\s*):(?:\s*))([^;]+)/g, (_match, start, commaSeparatedKeyframes) => `${start}${commaSeparatedKeyframes.split(",").map((keyframe) => this._scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet)).join(",")}`);
      return { ...rule, content };
    }
    /*
     * Process styles to convert native ShadowDOM rules that will trip
     * up the css parser; we rely on decorating the stylesheet with inert rules.
     *
     * For example, we convert this rule:
     *
     * polyfill-next-selector { content: ':host menu-item'; }
     * ::content menu-item {
     *
     * to this:
     *
     * scopeName menu-item {
     *
     **/
    _insertPolyfillDirectivesInCssText(cssText) {
      return cssText.replace(_cssContentNextSelectorRe, function(...m) {
        return m[2] + "{";
      });
    }
    /*
     * Process styles to add rules which will only apply under the polyfill
     *
     * For example, we convert this rule:
     *
     * polyfill-rule {
     *   content: ':host menu-item';
     * ...
     * }
     *
     * to this:
     *
     * scopeName menu-item {...}
     *
     **/
    _insertPolyfillRulesInCssText(cssText) {
      return cssText.replace(_cssContentRuleRe, (...m) => {
        const rule = m[0].replace(m[1], "").replace(m[2], "");
        return m[4] + rule;
      });
    }
    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
     *
     *  .foo {... }
     *
     *  and converts this to
     *
     *  scopeName .foo { ... }
     */
    _scopeCssText(cssText, scopeSelector, hostSelector) {
      const unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
      cssText = this._insertPolyfillHostInCssText(cssText);
      cssText = this._convertColonHost(cssText);
      cssText = this._convertColonHostContext(cssText);
      cssText = this._convertShadowDOMSelectors(cssText);
      if (scopeSelector) {
        cssText = this._scopeKeyframesRelatedCss(cssText, scopeSelector);
        cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
      }
      cssText = cssText + "\n" + unscopedRules;
      return cssText.trim();
    }
    /*
     * Process styles to add rules which will only apply under the polyfill
     * and do not process via CSSOM. (CSSOM is destructive to rules on rare
     * occasions, e.g. -webkit-calc on Safari.)
     * For example, we convert this rule:
     *
     * @polyfill-unscoped-rule {
     *   content: 'menu-item';
     * ... }
     *
     * to this:
     *
     * menu-item {...}
     *
     **/
    _extractUnscopedRulesFromCssText(cssText) {
      let r = "";
      let m;
      _cssContentUnscopedRuleRe.lastIndex = 0;
      while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
        const rule = m[0].replace(m[2], "").replace(m[1], m[4]);
        r += rule + "\n\n";
      }
      return r;
    }
    /*
     * convert a rule like :host(.foo) > .bar { }
     *
     * to
     *
     * .foo<scopeName> > .bar
     */
    _convertColonHost(cssText) {
      return cssText.replace(_cssColonHostRe, (_, hostSelectors, otherSelectors) => {
        if (hostSelectors) {
          const convertedSelectors = [];
          const hostSelectorArray = hostSelectors.split(",").map((p) => p.trim());
          for (const hostSelector of hostSelectorArray) {
            if (!hostSelector)
              break;
            const convertedSelector = _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, "") + otherSelectors;
            convertedSelectors.push(convertedSelector);
          }
          return convertedSelectors.join(",");
        } else {
          return _polyfillHostNoCombinator + otherSelectors;
        }
      });
    }
    /*
     * convert a rule like :host-context(.foo) > .bar { }
     *
     * to
     *
     * .foo<scopeName> > .bar, .foo <scopeName> > .bar { }
     *
     * and
     *
     * :host-context(.foo:host) .bar { ... }
     *
     * to
     *
     * .foo<scopeName> .bar { ... }
     */
    _convertColonHostContext(cssText) {
      return cssText.replace(_cssColonHostContextReGlobal, (selectorText) => {
        const contextSelectorGroups = [[]];
        let match2;
        while (match2 = _cssColonHostContextRe.exec(selectorText)) {
          const newContextSelectors = (match2[1] ?? "").trim().split(",").map((m) => m.trim()).filter((m) => m !== "");
          const contextSelectorGroupsLength = contextSelectorGroups.length;
          repeatGroups(contextSelectorGroups, newContextSelectors.length);
          for (let i = 0; i < newContextSelectors.length; i++) {
            for (let j = 0; j < contextSelectorGroupsLength; j++) {
              contextSelectorGroups[j + i * contextSelectorGroupsLength].push(newContextSelectors[i]);
            }
          }
          selectorText = match2[2];
        }
        return contextSelectorGroups.map((contextSelectors) => combineHostContextSelectors(contextSelectors, selectorText)).join(", ");
      });
    }
    /*
     * Convert combinators like ::shadow and pseudo-elements like ::content
     * by replacing with space.
     */
    _convertShadowDOMSelectors(cssText) {
      return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, " "), cssText);
    }
    // change a selector like 'div' to 'name div'
    _scopeSelectors(cssText, scopeSelector, hostSelector) {
      return processRules(cssText, (rule) => {
        let selector = rule.selector;
        let content = rule.content;
        if (rule.selector[0] !== "@") {
          selector = this._scopeSelector(rule.selector, scopeSelector, hostSelector);
        } else if (scopedAtRuleIdentifiers.some((atRule) => rule.selector.startsWith(atRule))) {
          content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);
        } else if (rule.selector.startsWith("@font-face") || rule.selector.startsWith("@page")) {
          content = this._stripScopingSelectors(rule.content);
        }
        return new CssRule(selector, content);
      });
    }
    /**
     * Handle a css text that is within a rule that should not contain scope selectors by simply
     * removing them! An example of such a rule is `@font-face`.
     *
     * `@font-face` rules cannot contain nested selectors. Nor can they be nested under a selector.
     * Normally this would be a syntax error by the author of the styles. But in some rare cases, such
     * as importing styles from a library, and applying `:host ::ng-deep` to the imported styles, we
     * can end up with broken css if the imported styles happen to contain @font-face rules.
     *
     * For example:
     *
     * ```
     * :host ::ng-deep {
     *   import 'some/lib/containing/font-face';
     * }
     *
     * Similar logic applies to `@page` rules which can contain a particular set of properties,
     * as well as some specific at-rules. Since they can't be encapsulated, we have to strip
     * any scoping selectors from them. For more information: https://www.w3.org/TR/css-page-3
     * ```
     */
    _stripScopingSelectors(cssText) {
      return processRules(cssText, (rule) => {
        const selector = rule.selector.replace(_shadowDeepSelectors, " ").replace(_polyfillHostNoCombinatorRe, " ");
        return new CssRule(selector, rule.content);
      });
    }
    _scopeSelector(selector, scopeSelector, hostSelector) {
      return selector.split(",").map((part) => part.trim().split(_shadowDeepSelectors)).map((deepParts) => {
        const [shallowPart, ...otherParts] = deepParts;
        const applyScope = (shallowPart2) => {
          if (this._selectorNeedsScoping(shallowPart2, scopeSelector)) {
            return this._applySelectorScope(shallowPart2, scopeSelector, hostSelector);
          } else {
            return shallowPart2;
          }
        };
        return [applyScope(shallowPart), ...otherParts].join(" ");
      }).join(", ");
    }
    _selectorNeedsScoping(selector, scopeSelector) {
      const re = this._makeScopeMatcher(scopeSelector);
      return !re.test(selector);
    }
    _makeScopeMatcher(scopeSelector) {
      const lre = /\[/g;
      const rre = /\]/g;
      scopeSelector = scopeSelector.replace(lre, "\\[").replace(rre, "\\]");
      return new RegExp("^(" + scopeSelector + ")" + _selectorReSuffix, "m");
    }
    // scope via name and [is=name]
    _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {
      _polyfillHostRe.lastIndex = 0;
      if (_polyfillHostRe.test(selector)) {
        const replaceBy = `[${hostSelector}]`;
        return selector.replace(_polyfillHostNoCombinatorRe, (hnc, selector2) => {
          return selector2.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {
            return before + replaceBy + colon + after;
          });
        }).replace(_polyfillHostRe, replaceBy + " ");
      }
      return scopeSelector + " " + selector;
    }
    // return a selector with [name] suffix on each simple selector
    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
    _applySelectorScope(selector, scopeSelector, hostSelector) {
      const isRe = /\[is=([^\]]*)\]/g;
      scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);
      const attrName = "[" + scopeSelector + "]";
      const _scopeSelectorPart = (p) => {
        let scopedP = p.trim();
        if (!scopedP) {
          return "";
        }
        if (p.indexOf(_polyfillHostNoCombinator) > -1) {
          scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
        } else {
          const t = p.replace(_polyfillHostRe, "");
          if (t.length > 0) {
            const matches2 = t.match(/([^:]*)(:*)(.*)/);
            if (matches2) {
              scopedP = matches2[1] + attrName + matches2[2] + matches2[3];
            }
          }
        }
        return scopedP;
      };
      const safeContent = new SafeSelector(selector);
      selector = safeContent.content();
      let scopedSelector = "";
      let startIndex = 0;
      let res;
      const sep = /( |>|\+|~(?!=))\s*/g;
      const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;
      let shouldScope = !hasHost;
      while ((res = sep.exec(selector)) !== null) {
        const separator = res[1];
        const part2 = selector.slice(startIndex, res.index).trim();
        if (part2.match(/__esc-ph-(\d+)__/) && selector[res.index + 1]?.match(/[a-fA-F\d]/)) {
          continue;
        }
        shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;
        const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;
        scopedSelector += `${scopedPart} ${separator} `;
        startIndex = sep.lastIndex;
      }
      const part = selector.substring(startIndex);
      shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;
      scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;
      return safeContent.restore(scopedSelector);
    }
    _insertPolyfillHostInCssText(selector) {
      return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
    }
  };
  var SafeSelector = class {
    constructor(selector) {
      this.placeholders = [];
      this.index = 0;
      selector = this._escapeRegexMatches(selector, /(\[[^\]]*\])/g);
      selector = selector.replace(/(\\.)/g, (_, keep) => {
        const replaceBy = `__esc-ph-${this.index}__`;
        this.placeholders.push(keep);
        this.index++;
        return replaceBy;
      });
      this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, (_, pseudo, exp) => {
        const replaceBy = `__ph-${this.index}__`;
        this.placeholders.push(exp);
        this.index++;
        return pseudo + replaceBy;
      });
    }
    restore(content) {
      return content.replace(/__(?:ph|esc-ph)-(\d+)__/g, (_ph, index) => this.placeholders[+index]);
    }
    content() {
      return this._content;
    }
    /**
     * Replaces all of the substrings that match a regex within a
     * special string (e.g. `__ph-0__`, `__ph-1__`, etc).
     */
    _escapeRegexMatches(content, pattern) {
      return content.replace(pattern, (_, keep) => {
        const replaceBy = `__ph-${this.index}__`;
        this.placeholders.push(keep);
        this.index++;
        return replaceBy;
      });
    }
  };
  var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
  var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
  var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
  var _polyfillHost = "-shadowcsshost";
  var _polyfillHostContext = "-shadowcsscontext";
  var _parenSuffix = "(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))?([^,{]*)";
  var _cssColonHostRe = new RegExp(_polyfillHost + _parenSuffix, "gim");
  var _cssColonHostContextReGlobal = new RegExp(_polyfillHostContext + _parenSuffix, "gim");
  var _cssColonHostContextRe = new RegExp(_polyfillHostContext + _parenSuffix, "im");
  var _polyfillHostNoCombinator = _polyfillHost + "-no-combinator";
  var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
  var _shadowDOMSelectorsRe = [
    /::shadow/g,
    /::content/g,
    // Deprecated selectors
    /\/shadow-deep\//g,
    /\/shadow\//g
  ];
  var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)|(?:::ng-deep)/g;
  var _selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$";
  var _polyfillHostRe = /-shadowcsshost/gim;
  var _colonHostRe = /:host/gim;
  var _colonHostContextRe = /:host-context/gim;
  var _newLinesRe = /\r?\n/g;
  var _commentRe = /\/\*[\s\S]*?\*\//g;
  var _commentWithHashRe = /\/\*\s*#\s*source(Mapping)?URL=/g;
  var COMMENT_PLACEHOLDER = "%COMMENT%";
  var _commentWithHashPlaceHolderRe = new RegExp(COMMENT_PLACEHOLDER, "g");
  var BLOCK_PLACEHOLDER = "%BLOCK%";
  var _ruleRe = new RegExp(`(\\s*(?:${COMMENT_PLACEHOLDER}\\s*)*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))`, "g");
  var CONTENT_PAIRS = /* @__PURE__ */ new Map([["{", "}"]]);
  var COMMA_IN_PLACEHOLDER = "%COMMA_IN_PLACEHOLDER%";
  var SEMI_IN_PLACEHOLDER = "%SEMI_IN_PLACEHOLDER%";
  var COLON_IN_PLACEHOLDER = "%COLON_IN_PLACEHOLDER%";
  var _cssCommaInPlaceholderReGlobal = new RegExp(COMMA_IN_PLACEHOLDER, "g");
  var _cssSemiInPlaceholderReGlobal = new RegExp(SEMI_IN_PLACEHOLDER, "g");
  var _cssColonInPlaceholderReGlobal = new RegExp(COLON_IN_PLACEHOLDER, "g");
  var CssRule = class {
    constructor(selector, content) {
      this.selector = selector;
      this.content = content;
    }
  };
  function processRules(input2, ruleCallback) {
    const escaped = escapeInStrings(input2);
    const inputWithEscapedBlocks = escapeBlocks(escaped, CONTENT_PAIRS, BLOCK_PLACEHOLDER);
    let nextBlockIndex = 0;
    const escapedResult = inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {
      const selector = m[2];
      let content = "";
      let suffix = m[4];
      let contentPrefix = "";
      if (suffix && suffix.startsWith("{" + BLOCK_PLACEHOLDER)) {
        content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
        suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
        contentPrefix = "{";
      }
      const rule = ruleCallback(new CssRule(selector, content));
      return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;
    });
    return unescapeInStrings(escapedResult);
  }
  var StringWithEscapedBlocks = class {
    constructor(escapedString, blocks) {
      this.escapedString = escapedString;
      this.blocks = blocks;
    }
  };
  function escapeBlocks(input2, charPairs, placeholder) {
    const resultParts = [];
    const escapedBlocks = [];
    let openCharCount = 0;
    let nonBlockStartIndex = 0;
    let blockStartIndex = -1;
    let openChar;
    let closeChar;
    for (let i = 0; i < input2.length; i++) {
      const char = input2[i];
      if (char === "\\") {
        i++;
      } else if (char === closeChar) {
        openCharCount--;
        if (openCharCount === 0) {
          escapedBlocks.push(input2.substring(blockStartIndex, i));
          resultParts.push(placeholder);
          nonBlockStartIndex = i;
          blockStartIndex = -1;
          openChar = closeChar = void 0;
        }
      } else if (char === openChar) {
        openCharCount++;
      } else if (openCharCount === 0 && charPairs.has(char)) {
        openChar = char;
        closeChar = charPairs.get(char);
        openCharCount = 1;
        blockStartIndex = i + 1;
        resultParts.push(input2.substring(nonBlockStartIndex, blockStartIndex));
      }
    }
    if (blockStartIndex !== -1) {
      escapedBlocks.push(input2.substring(blockStartIndex));
      resultParts.push(placeholder);
    } else {
      resultParts.push(input2.substring(nonBlockStartIndex));
    }
    return new StringWithEscapedBlocks(resultParts.join(""), escapedBlocks);
  }
  var ESCAPE_IN_STRING_MAP = {
    ";": SEMI_IN_PLACEHOLDER,
    ",": COMMA_IN_PLACEHOLDER,
    ":": COLON_IN_PLACEHOLDER
  };
  function escapeInStrings(input2) {
    let result = input2;
    let currentQuoteChar = null;
    for (let i = 0; i < result.length; i++) {
      const char = result[i];
      if (char === "\\") {
        i++;
      } else {
        if (currentQuoteChar !== null) {
          if (char === currentQuoteChar) {
            currentQuoteChar = null;
          } else {
            const placeholder = ESCAPE_IN_STRING_MAP[char];
            if (placeholder) {
              result = `${result.substr(0, i)}${placeholder}${result.substr(i + 1)}`;
              i += placeholder.length - 1;
            }
          }
        } else if (char === "'" || char === '"') {
          currentQuoteChar = char;
        }
      }
    }
    return result;
  }
  function unescapeInStrings(input2) {
    let result = input2.replace(_cssCommaInPlaceholderReGlobal, ",");
    result = result.replace(_cssSemiInPlaceholderReGlobal, ";");
    result = result.replace(_cssColonInPlaceholderReGlobal, ":");
    return result;
  }
  function unescapeQuotes(str, isQuoted) {
    return !isQuoted ? str : str.replace(/((?:^|[^\\])(?:\\\\)*)\\(?=['"])/g, "$1");
  }
  function combineHostContextSelectors(contextSelectors, otherSelectors) {
    const hostMarker = _polyfillHostNoCombinator;
    _polyfillHostRe.lastIndex = 0;
    const otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors);
    if (contextSelectors.length === 0) {
      return hostMarker + otherSelectors;
    }
    const combined = [contextSelectors.pop() || ""];
    while (contextSelectors.length > 0) {
      const length = combined.length;
      const contextSelector = contextSelectors.pop();
      for (let i = 0; i < length; i++) {
        const previousSelectors = combined[i];
        combined[length * 2 + i] = previousSelectors + " " + contextSelector;
        combined[length + i] = contextSelector + " " + previousSelectors;
        combined[i] = contextSelector + previousSelectors;
      }
    }
    return combined.map((s) => otherSelectorsHasHost ? `${s}${otherSelectors}` : `${s}${hostMarker}${otherSelectors}, ${s} ${hostMarker}${otherSelectors}`).join(",");
  }
  function repeatGroups(groups, multiples) {
    const length = groups.length;
    for (let i = 1; i < multiples; i++) {
      for (let j = 0; j < length; j++) {
        groups[j + i * length] = groups[j].slice(0);
      }
    }
  }
  var OpKind;
  (function(OpKind2) {
    OpKind2[OpKind2["ListEnd"] = 0] = "ListEnd";
    OpKind2[OpKind2["Statement"] = 1] = "Statement";
    OpKind2[OpKind2["Variable"] = 2] = "Variable";
    OpKind2[OpKind2["ElementStart"] = 3] = "ElementStart";
    OpKind2[OpKind2["Element"] = 4] = "Element";
    OpKind2[OpKind2["Template"] = 5] = "Template";
    OpKind2[OpKind2["ElementEnd"] = 6] = "ElementEnd";
    OpKind2[OpKind2["ContainerStart"] = 7] = "ContainerStart";
    OpKind2[OpKind2["Container"] = 8] = "Container";
    OpKind2[OpKind2["ContainerEnd"] = 9] = "ContainerEnd";
    OpKind2[OpKind2["DisableBindings"] = 10] = "DisableBindings";
    OpKind2[OpKind2["Conditional"] = 11] = "Conditional";
    OpKind2[OpKind2["EnableBindings"] = 12] = "EnableBindings";
    OpKind2[OpKind2["Text"] = 13] = "Text";
    OpKind2[OpKind2["Listener"] = 14] = "Listener";
    OpKind2[OpKind2["InterpolateText"] = 15] = "InterpolateText";
    OpKind2[OpKind2["Binding"] = 16] = "Binding";
    OpKind2[OpKind2["Property"] = 17] = "Property";
    OpKind2[OpKind2["StyleProp"] = 18] = "StyleProp";
    OpKind2[OpKind2["ClassProp"] = 19] = "ClassProp";
    OpKind2[OpKind2["StyleMap"] = 20] = "StyleMap";
    OpKind2[OpKind2["ClassMap"] = 21] = "ClassMap";
    OpKind2[OpKind2["Advance"] = 22] = "Advance";
    OpKind2[OpKind2["Pipe"] = 23] = "Pipe";
    OpKind2[OpKind2["Attribute"] = 24] = "Attribute";
    OpKind2[OpKind2["ExtractedAttribute"] = 25] = "ExtractedAttribute";
    OpKind2[OpKind2["Defer"] = 26] = "Defer";
    OpKind2[OpKind2["DeferOn"] = 27] = "DeferOn";
    OpKind2[OpKind2["DeferWhen"] = 28] = "DeferWhen";
    OpKind2[OpKind2["I18nMessage"] = 29] = "I18nMessage";
    OpKind2[OpKind2["HostProperty"] = 30] = "HostProperty";
    OpKind2[OpKind2["Namespace"] = 31] = "Namespace";
    OpKind2[OpKind2["ProjectionDef"] = 32] = "ProjectionDef";
    OpKind2[OpKind2["Projection"] = 33] = "Projection";
    OpKind2[OpKind2["RepeaterCreate"] = 34] = "RepeaterCreate";
    OpKind2[OpKind2["Repeater"] = 35] = "Repeater";
    OpKind2[OpKind2["TwoWayProperty"] = 36] = "TwoWayProperty";
    OpKind2[OpKind2["TwoWayListener"] = 37] = "TwoWayListener";
    OpKind2[OpKind2["I18nStart"] = 38] = "I18nStart";
    OpKind2[OpKind2["I18n"] = 39] = "I18n";
    OpKind2[OpKind2["I18nEnd"] = 40] = "I18nEnd";
    OpKind2[OpKind2["I18nExpression"] = 41] = "I18nExpression";
    OpKind2[OpKind2["I18nApply"] = 42] = "I18nApply";
    OpKind2[OpKind2["IcuStart"] = 43] = "IcuStart";
    OpKind2[OpKind2["IcuEnd"] = 44] = "IcuEnd";
    OpKind2[OpKind2["IcuPlaceholder"] = 45] = "IcuPlaceholder";
    OpKind2[OpKind2["I18nContext"] = 46] = "I18nContext";
    OpKind2[OpKind2["I18nAttributes"] = 47] = "I18nAttributes";
  })(OpKind || (OpKind = {}));
  var ExpressionKind;
  (function(ExpressionKind2) {
    ExpressionKind2[ExpressionKind2["LexicalRead"] = 0] = "LexicalRead";
    ExpressionKind2[ExpressionKind2["Context"] = 1] = "Context";
    ExpressionKind2[ExpressionKind2["TrackContext"] = 2] = "TrackContext";
    ExpressionKind2[ExpressionKind2["ReadVariable"] = 3] = "ReadVariable";
    ExpressionKind2[ExpressionKind2["NextContext"] = 4] = "NextContext";
    ExpressionKind2[ExpressionKind2["Reference"] = 5] = "Reference";
    ExpressionKind2[ExpressionKind2["GetCurrentView"] = 6] = "GetCurrentView";
    ExpressionKind2[ExpressionKind2["RestoreView"] = 7] = "RestoreView";
    ExpressionKind2[ExpressionKind2["ResetView"] = 8] = "ResetView";
    ExpressionKind2[ExpressionKind2["PureFunctionExpr"] = 9] = "PureFunctionExpr";
    ExpressionKind2[ExpressionKind2["PureFunctionParameterExpr"] = 10] = "PureFunctionParameterExpr";
    ExpressionKind2[ExpressionKind2["PipeBinding"] = 11] = "PipeBinding";
    ExpressionKind2[ExpressionKind2["PipeBindingVariadic"] = 12] = "PipeBindingVariadic";
    ExpressionKind2[ExpressionKind2["SafePropertyRead"] = 13] = "SafePropertyRead";
    ExpressionKind2[ExpressionKind2["SafeKeyedRead"] = 14] = "SafeKeyedRead";
    ExpressionKind2[ExpressionKind2["SafeInvokeFunction"] = 15] = "SafeInvokeFunction";
    ExpressionKind2[ExpressionKind2["SafeTernaryExpr"] = 16] = "SafeTernaryExpr";
    ExpressionKind2[ExpressionKind2["EmptyExpr"] = 17] = "EmptyExpr";
    ExpressionKind2[ExpressionKind2["AssignTemporaryExpr"] = 18] = "AssignTemporaryExpr";
    ExpressionKind2[ExpressionKind2["ReadTemporaryExpr"] = 19] = "ReadTemporaryExpr";
    ExpressionKind2[ExpressionKind2["SlotLiteralExpr"] = 20] = "SlotLiteralExpr";
    ExpressionKind2[ExpressionKind2["ConditionalCase"] = 21] = "ConditionalCase";
    ExpressionKind2[ExpressionKind2["ConstCollected"] = 22] = "ConstCollected";
    ExpressionKind2[ExpressionKind2["TwoWayBindingSet"] = 23] = "TwoWayBindingSet";
  })(ExpressionKind || (ExpressionKind = {}));
  var VariableFlags;
  (function(VariableFlags2) {
    VariableFlags2[VariableFlags2["None"] = 0] = "None";
    VariableFlags2[VariableFlags2["AlwaysInline"] = 1] = "AlwaysInline";
  })(VariableFlags || (VariableFlags = {}));
  var SemanticVariableKind;
  (function(SemanticVariableKind2) {
    SemanticVariableKind2[SemanticVariableKind2["Context"] = 0] = "Context";
    SemanticVariableKind2[SemanticVariableKind2["Identifier"] = 1] = "Identifier";
    SemanticVariableKind2[SemanticVariableKind2["SavedView"] = 2] = "SavedView";
    SemanticVariableKind2[SemanticVariableKind2["Alias"] = 3] = "Alias";
  })(SemanticVariableKind || (SemanticVariableKind = {}));
  var CompatibilityMode;
  (function(CompatibilityMode2) {
    CompatibilityMode2[CompatibilityMode2["Normal"] = 0] = "Normal";
    CompatibilityMode2[CompatibilityMode2["TemplateDefinitionBuilder"] = 1] = "TemplateDefinitionBuilder";
  })(CompatibilityMode || (CompatibilityMode = {}));
  var BindingKind;
  (function(BindingKind2) {
    BindingKind2[BindingKind2["Attribute"] = 0] = "Attribute";
    BindingKind2[BindingKind2["ClassName"] = 1] = "ClassName";
    BindingKind2[BindingKind2["StyleProperty"] = 2] = "StyleProperty";
    BindingKind2[BindingKind2["Property"] = 3] = "Property";
    BindingKind2[BindingKind2["Template"] = 4] = "Template";
    BindingKind2[BindingKind2["I18n"] = 5] = "I18n";
    BindingKind2[BindingKind2["Animation"] = 6] = "Animation";
    BindingKind2[BindingKind2["TwoWayProperty"] = 7] = "TwoWayProperty";
  })(BindingKind || (BindingKind = {}));
  var I18nParamResolutionTime;
  (function(I18nParamResolutionTime2) {
    I18nParamResolutionTime2[I18nParamResolutionTime2["Creation"] = 0] = "Creation";
    I18nParamResolutionTime2[I18nParamResolutionTime2["Postproccessing"] = 1] = "Postproccessing";
  })(I18nParamResolutionTime || (I18nParamResolutionTime = {}));
  var I18nExpressionFor;
  (function(I18nExpressionFor2) {
    I18nExpressionFor2[I18nExpressionFor2["I18nText"] = 0] = "I18nText";
    I18nExpressionFor2[I18nExpressionFor2["I18nAttribute"] = 1] = "I18nAttribute";
  })(I18nExpressionFor || (I18nExpressionFor = {}));
  var I18nParamValueFlags;
  (function(I18nParamValueFlags2) {
    I18nParamValueFlags2[I18nParamValueFlags2["None"] = 0] = "None";
    I18nParamValueFlags2[I18nParamValueFlags2["ElementTag"] = 1] = "ElementTag";
    I18nParamValueFlags2[I18nParamValueFlags2["TemplateTag"] = 2] = "TemplateTag";
    I18nParamValueFlags2[I18nParamValueFlags2["OpenTag"] = 4] = "OpenTag";
    I18nParamValueFlags2[I18nParamValueFlags2["CloseTag"] = 8] = "CloseTag";
    I18nParamValueFlags2[I18nParamValueFlags2["ExpressionIndex"] = 16] = "ExpressionIndex";
  })(I18nParamValueFlags || (I18nParamValueFlags = {}));
  var Namespace;
  (function(Namespace2) {
    Namespace2[Namespace2["HTML"] = 0] = "HTML";
    Namespace2[Namespace2["SVG"] = 1] = "SVG";
    Namespace2[Namespace2["Math"] = 2] = "Math";
  })(Namespace || (Namespace = {}));
  var DeferTriggerKind;
  (function(DeferTriggerKind2) {
    DeferTriggerKind2[DeferTriggerKind2["Idle"] = 0] = "Idle";
    DeferTriggerKind2[DeferTriggerKind2["Immediate"] = 1] = "Immediate";
    DeferTriggerKind2[DeferTriggerKind2["Timer"] = 2] = "Timer";
    DeferTriggerKind2[DeferTriggerKind2["Hover"] = 3] = "Hover";
    DeferTriggerKind2[DeferTriggerKind2["Interaction"] = 4] = "Interaction";
    DeferTriggerKind2[DeferTriggerKind2["Viewport"] = 5] = "Viewport";
  })(DeferTriggerKind || (DeferTriggerKind = {}));
  var I18nContextKind;
  (function(I18nContextKind2) {
    I18nContextKind2[I18nContextKind2["RootI18n"] = 0] = "RootI18n";
    I18nContextKind2[I18nContextKind2["Icu"] = 1] = "Icu";
    I18nContextKind2[I18nContextKind2["Attr"] = 2] = "Attr";
  })(I18nContextKind || (I18nContextKind = {}));
  var TemplateKind;
  (function(TemplateKind2) {
    TemplateKind2[TemplateKind2["NgTemplate"] = 0] = "NgTemplate";
    TemplateKind2[TemplateKind2["Structural"] = 1] = "Structural";
    TemplateKind2[TemplateKind2["Block"] = 2] = "Block";
  })(TemplateKind || (TemplateKind = {}));
  var ConsumesSlot = Symbol("ConsumesSlot");
  var DependsOnSlotContext = Symbol("DependsOnSlotContext");
  var ConsumesVarsTrait = Symbol("ConsumesVars");
  var UsesVarOffset = Symbol("UsesVarOffset");
  var TRAIT_CONSUMES_SLOT = {
    [ConsumesSlot]: true,
    numSlotsUsed: 1
  };
  var TRAIT_DEPENDS_ON_SLOT_CONTEXT = {
    [DependsOnSlotContext]: true
  };
  var TRAIT_CONSUMES_VARS = {
    [ConsumesVarsTrait]: true
  };
  function hasConsumesSlotTrait(op) {
    return op[ConsumesSlot] === true;
  }
  function hasDependsOnSlotContextTrait(op) {
    return op[DependsOnSlotContext] === true;
  }
  function hasConsumesVarsTrait(value) {
    return value[ConsumesVarsTrait] === true;
  }
  function hasUsesVarOffsetTrait(expr) {
    return expr[UsesVarOffset] === true;
  }
  function createStatementOp(statement) {
    return {
      kind: OpKind.Statement,
      statement,
      ...NEW_OP
    };
  }
  function createVariableOp(xref, variable2, initializer, flags) {
    return {
      kind: OpKind.Variable,
      xref,
      variable: variable2,
      initializer,
      flags,
      ...NEW_OP
    };
  }
  var NEW_OP = {
    debugListId: null,
    prev: null,
    next: null
  };
  function createInterpolateTextOp(xref, interpolation, sourceSpan) {
    return {
      kind: OpKind.InterpolateText,
      target: xref,
      interpolation,
      sourceSpan,
      ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
      ...TRAIT_CONSUMES_VARS,
      ...NEW_OP
    };
  }
  var Interpolation = class {
    constructor(strings, expressions, i18nPlaceholders) {
      this.strings = strings;
      this.expressions = expressions;
      this.i18nPlaceholders = i18nPlaceholders;
      if (i18nPlaceholders.length !== 0 && i18nPlaceholders.length !== expressions.length) {
        throw new Error(`Expected ${expressions.length} placeholders to match interpolation expression count, but got ${i18nPlaceholders.length}`);
      }
    }
  };
  function createBindingOp(target, kind, name, expression, unit, securityContext, isTextAttribute, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {
    return {
      kind: OpKind.Binding,
      bindingKind: kind,
      target,
      name,
      expression,
      unit,
      securityContext,
      isTextAttribute,
      isStructuralTemplateAttribute,
      templateKind,
      i18nContext: null,
      i18nMessage,
      sourceSpan,
      ...NEW_OP
    };
  }
  function createPropertyOp(target, name, expression, isAnimationTrigger, securityContext, isStructuralTemplateAttribute, templateKind, i18nContext, i18nMessage, sourceSpan) {
    return {
      kind: OpKind.Property,
      target,
      name,
      expression,
      isAnimationTrigger,
      securityContext,
      sanitizer: null,
      isStructuralTemplateAttribute,
      templateKind,
      i18nContext,
      i18nMessage,
      sourceSpan,
      ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
      ...TRAIT_CONSUMES_VARS,
      ...NEW_OP
    };
  }
  function createTwoWayPropertyOp(target, name, expression, securityContext, isStructuralTemplateAttribute, templateKind, i18nContext, i18nMessage, sourceSpan) {
    return {
      kind: OpKind.TwoWayProperty,
      target,
      name,
      expression,
      securityContext,
      sanitizer: null,
      isStructuralTemplateAttribute,
      templateKind,
      i18nContext,
      i18nMessage,
      sourceSpan,
      ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
      ...TRAIT_CONSUMES_VARS,
      ...NEW_OP
    };
  }
  function createStylePropOp(xref, name, expression, unit, sourceSpan) {
    return {
      kind: OpKind.StyleProp,
      target: xref,
      name,
      expression,
      unit,
      sourceSpan,
      ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
      ...TRAIT_CONSUMES_VARS,
      ...NEW_OP
    };
  }
  function createClassPropOp(xref, name, expression, sourceSpan) {
    return {
      kind: OpKind.ClassProp,
      target: xref,
      name,
      expression,
      sourceSpan,
      ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
      ...TRAIT_CONSUMES_VARS,
      ...NEW_OP
    };
  }
  function createStyleMapOp(xref, expression, sourceSpan) {
    return {
      kind: OpKind.StyleMap,
      target: xref,
      expression,
      sourceSpan,
      ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
      ...TRAIT_CONSUMES_VARS,
      ...NEW_OP
    };
  }
  function createClassMapOp(xref, expression, sourceSpan) {
    return {
      kind: OpKind.ClassMap,
      target: xref,
      expression,
      sourceSpan,
      ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
      ...TRAIT_CONSUMES_VARS,
      ...NEW_OP
    };
  }
  function createAttributeOp(target, namespace, name, expression, securityContext, isTextAttribute, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {
    return {
      kind: OpKind.Attribute,
      target,
      namespace,
      name,
      expression,
      securityContext,
      sanitizer: null,
      isTextAttribute,
      isStructuralTemplateAttribute,
      templateKind,
      i18nContext: null,
      i18nMessage,
      sourceSpan,
      ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
      ...TRAIT_CONSUMES_VARS,
      ...NEW_OP
    };
  }
  function createAdvanceOp(delta, sourceSpan) {
    return {
      kind: OpKind.Advance,
      delta,
      sourceSpan,
      ...NEW_OP
    };
  }
  function createConditionalOp(target, targetSlot, test, conditions, sourceSpan) {
    return {
      kind: OpKind.Conditional,
      target,
      targetSlot,
      test,
      conditions,
      processed: null,
      sourceSpan,
      contextValue: null,
      ...NEW_OP,
      ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
      ...TRAIT_CONSUMES_VARS
    };
  }
  function createRepeaterOp(repeaterCreate2, targetSlot, collection, sourceSpan) {
    return {
      kind: OpKind.Repeater,
      target: repeaterCreate2,
      targetSlot,
      collection,
      sourceSpan,
      ...NEW_OP,
      ...TRAIT_DEPENDS_ON_SLOT_CONTEXT
    };
  }
  function createDeferWhenOp(target, expr, prefetch, sourceSpan) {
    return {
      kind: OpKind.DeferWhen,
      target,
      expr,
      prefetch,
      sourceSpan,
      ...NEW_OP,
      ...TRAIT_DEPENDS_ON_SLOT_CONTEXT,
      ...TRAIT_CONSUMES_VARS
    };
  }
  function createI18nExpressionOp(context2, target, i18nOwner, handle, expression, icuPlaceholder, i18nPlaceholder, resolutionTime, usage, name, sourceSpan) {
    return {
      kind: OpKind.I18nExpression,
      context: context2,
      target,
      i18nOwner,
      handle,
      expression,
      icuPlaceholder,
      i18nPlaceholder,
      resolutionTime,
      usage,
      name,
      sourceSpan,
      ...NEW_OP,
      ...TRAIT_CONSUMES_VARS,
      ...TRAIT_DEPENDS_ON_SLOT_CONTEXT
    };
  }
  function createI18nApplyOp(owner, handle, sourceSpan) {
    return {
      kind: OpKind.I18nApply,
      owner,
      handle,
      sourceSpan,
      ...NEW_OP
    };
  }
  var _a;
  var _b;
  var _c;
  var _d;
  var _e;
  var _f;
  function isIrExpression(expr) {
    return expr instanceof ExpressionBase;
  }
  var ExpressionBase = class extends Expression {
    constructor(sourceSpan = null) {
      super(null, sourceSpan);
    }
  };
  var LexicalReadExpr = class _LexicalReadExpr extends ExpressionBase {
    constructor(name) {
      super();
      this.name = name;
      this.kind = ExpressionKind.LexicalRead;
    }
    visitExpression(visitor, context2) {
    }
    isEquivalent(other) {
      return this.name === other.name;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions() {
    }
    clone() {
      return new _LexicalReadExpr(this.name);
    }
  };
  var ReferenceExpr = class _ReferenceExpr extends ExpressionBase {
    constructor(target, targetSlot, offset) {
      super();
      this.target = target;
      this.targetSlot = targetSlot;
      this.offset = offset;
      this.kind = ExpressionKind.Reference;
    }
    visitExpression() {
    }
    isEquivalent(e2) {
      return e2 instanceof _ReferenceExpr && e2.target === this.target;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions() {
    }
    clone() {
      return new _ReferenceExpr(this.target, this.targetSlot, this.offset);
    }
  };
  var ContextExpr = class _ContextExpr extends ExpressionBase {
    constructor(view) {
      super();
      this.view = view;
      this.kind = ExpressionKind.Context;
    }
    visitExpression() {
    }
    isEquivalent(e2) {
      return e2 instanceof _ContextExpr && e2.view === this.view;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions() {
    }
    clone() {
      return new _ContextExpr(this.view);
    }
  };
  var TrackContextExpr = class _TrackContextExpr extends ExpressionBase {
    constructor(view) {
      super();
      this.view = view;
      this.kind = ExpressionKind.TrackContext;
    }
    visitExpression() {
    }
    isEquivalent(e2) {
      return e2 instanceof _TrackContextExpr && e2.view === this.view;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions() {
    }
    clone() {
      return new _TrackContextExpr(this.view);
    }
  };
  var NextContextExpr = class _NextContextExpr extends ExpressionBase {
    constructor() {
      super();
      this.kind = ExpressionKind.NextContext;
      this.steps = 1;
    }
    visitExpression() {
    }
    isEquivalent(e2) {
      return e2 instanceof _NextContextExpr && e2.steps === this.steps;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions() {
    }
    clone() {
      const expr = new _NextContextExpr();
      expr.steps = this.steps;
      return expr;
    }
  };
  var GetCurrentViewExpr = class _GetCurrentViewExpr extends ExpressionBase {
    constructor() {
      super();
      this.kind = ExpressionKind.GetCurrentView;
    }
    visitExpression() {
    }
    isEquivalent(e2) {
      return e2 instanceof _GetCurrentViewExpr;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions() {
    }
    clone() {
      return new _GetCurrentViewExpr();
    }
  };
  var RestoreViewExpr = class _RestoreViewExpr extends ExpressionBase {
    constructor(view) {
      super();
      this.view = view;
      this.kind = ExpressionKind.RestoreView;
    }
    visitExpression(visitor, context2) {
      if (typeof this.view !== "number") {
        this.view.visitExpression(visitor, context2);
      }
    }
    isEquivalent(e2) {
      if (!(e2 instanceof _RestoreViewExpr) || typeof e2.view !== typeof this.view) {
        return false;
      }
      if (typeof this.view === "number") {
        return this.view === e2.view;
      } else {
        return this.view.isEquivalent(e2.view);
      }
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions(transform2, flags) {
      if (typeof this.view !== "number") {
        this.view = transformExpressionsInExpression(this.view, transform2, flags);
      }
    }
    clone() {
      return new _RestoreViewExpr(this.view instanceof Expression ? this.view.clone() : this.view);
    }
  };
  var ResetViewExpr = class _ResetViewExpr extends ExpressionBase {
    constructor(expr) {
      super();
      this.expr = expr;
      this.kind = ExpressionKind.ResetView;
    }
    visitExpression(visitor, context2) {
      this.expr.visitExpression(visitor, context2);
    }
    isEquivalent(e2) {
      return e2 instanceof _ResetViewExpr && this.expr.isEquivalent(e2.expr);
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions(transform2, flags) {
      this.expr = transformExpressionsInExpression(this.expr, transform2, flags);
    }
    clone() {
      return new _ResetViewExpr(this.expr.clone());
    }
  };
  var TwoWayBindingSetExpr = class _TwoWayBindingSetExpr extends ExpressionBase {
    constructor(target, value) {
      super();
      this.target = target;
      this.value = value;
      this.kind = ExpressionKind.TwoWayBindingSet;
    }
    visitExpression(visitor, context2) {
      this.target.visitExpression(visitor, context2);
      this.value.visitExpression(visitor, context2);
    }
    isEquivalent(other) {
      return this.target.isEquivalent(other.target) && this.value.isEquivalent(other.value);
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions(transform2, flags) {
      this.target = transformExpressionsInExpression(this.target, transform2, flags);
      this.value = transformExpressionsInExpression(this.value, transform2, flags);
    }
    clone() {
      return new _TwoWayBindingSetExpr(this.target, this.value);
    }
  };
  var ReadVariableExpr = class _ReadVariableExpr extends ExpressionBase {
    constructor(xref) {
      super();
      this.xref = xref;
      this.kind = ExpressionKind.ReadVariable;
      this.name = null;
    }
    visitExpression() {
    }
    isEquivalent(other) {
      return other instanceof _ReadVariableExpr && other.xref === this.xref;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions() {
    }
    clone() {
      const expr = new _ReadVariableExpr(this.xref);
      expr.name = this.name;
      return expr;
    }
  };
  var PureFunctionExpr = class _PureFunctionExpr extends ExpressionBase {
    static {
      _a = ConsumesVarsTrait, _b = UsesVarOffset;
    }
    constructor(expression, args) {
      super();
      this.kind = ExpressionKind.PureFunctionExpr;
      this[_a] = true;
      this[_b] = true;
      this.varOffset = null;
      this.fn = null;
      this.body = expression;
      this.args = args;
    }
    visitExpression(visitor, context2) {
      this.body?.visitExpression(visitor, context2);
      for (const arg of this.args) {
        arg.visitExpression(visitor, context2);
      }
    }
    isEquivalent(other) {
      if (!(other instanceof _PureFunctionExpr) || other.args.length !== this.args.length) {
        return false;
      }
      return other.body !== null && this.body !== null && other.body.isEquivalent(this.body) && other.args.every((arg, idx) => arg.isEquivalent(this.args[idx]));
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions(transform2, flags) {
      if (this.body !== null) {
        this.body = transformExpressionsInExpression(this.body, transform2, flags | VisitorContextFlag.InChildOperation);
      } else if (this.fn !== null) {
        this.fn = transformExpressionsInExpression(this.fn, transform2, flags);
      }
      for (let i = 0; i < this.args.length; i++) {
        this.args[i] = transformExpressionsInExpression(this.args[i], transform2, flags);
      }
    }
    clone() {
      const expr = new _PureFunctionExpr(this.body?.clone() ?? null, this.args.map((arg) => arg.clone()));
      expr.fn = this.fn?.clone() ?? null;
      expr.varOffset = this.varOffset;
      return expr;
    }
  };
  var PureFunctionParameterExpr = class _PureFunctionParameterExpr extends ExpressionBase {
    constructor(index) {
      super();
      this.index = index;
      this.kind = ExpressionKind.PureFunctionParameterExpr;
    }
    visitExpression() {
    }
    isEquivalent(other) {
      return other instanceof _PureFunctionParameterExpr && other.index === this.index;
    }
    isConstant() {
      return true;
    }
    transformInternalExpressions() {
    }
    clone() {
      return new _PureFunctionParameterExpr(this.index);
    }
  };
  var PipeBindingExpr = class _PipeBindingExpr extends ExpressionBase {
    static {
      _c = ConsumesVarsTrait, _d = UsesVarOffset;
    }
    constructor(target, targetSlot, name, args) {
      super();
      this.target = target;
      this.targetSlot = targetSlot;
      this.name = name;
      this.args = args;
      this.kind = ExpressionKind.PipeBinding;
      this[_c] = true;
      this[_d] = true;
      this.varOffset = null;
    }
    visitExpression(visitor, context2) {
      for (const arg of this.args) {
        arg.visitExpression(visitor, context2);
      }
    }
    isEquivalent() {
      return false;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions(transform2, flags) {
      for (let idx = 0; idx < this.args.length; idx++) {
        this.args[idx] = transformExpressionsInExpression(this.args[idx], transform2, flags);
      }
    }
    clone() {
      const r = new _PipeBindingExpr(this.target, this.targetSlot, this.name, this.args.map((a) => a.clone()));
      r.varOffset = this.varOffset;
      return r;
    }
  };
  var PipeBindingVariadicExpr = class _PipeBindingVariadicExpr extends ExpressionBase {
    static {
      _e = ConsumesVarsTrait, _f = UsesVarOffset;
    }
    constructor(target, targetSlot, name, args, numArgs) {
      super();
      this.target = target;
      this.targetSlot = targetSlot;
      this.name = name;
      this.args = args;
      this.numArgs = numArgs;
      this.kind = ExpressionKind.PipeBindingVariadic;
      this[_e] = true;
      this[_f] = true;
      this.varOffset = null;
    }
    visitExpression(visitor, context2) {
      this.args.visitExpression(visitor, context2);
    }
    isEquivalent() {
      return false;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions(transform2, flags) {
      this.args = transformExpressionsInExpression(this.args, transform2, flags);
    }
    clone() {
      const r = new _PipeBindingVariadicExpr(this.target, this.targetSlot, this.name, this.args.clone(), this.numArgs);
      r.varOffset = this.varOffset;
      return r;
    }
  };
  var SafePropertyReadExpr = class _SafePropertyReadExpr extends ExpressionBase {
    constructor(receiver, name) {
      super();
      this.receiver = receiver;
      this.name = name;
      this.kind = ExpressionKind.SafePropertyRead;
    }
    // An alias for name, which allows other logic to handle property reads and keyed reads together.
    get index() {
      return this.name;
    }
    visitExpression(visitor, context2) {
      this.receiver.visitExpression(visitor, context2);
    }
    isEquivalent() {
      return false;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions(transform2, flags) {
      this.receiver = transformExpressionsInExpression(this.receiver, transform2, flags);
    }
    clone() {
      return new _SafePropertyReadExpr(this.receiver.clone(), this.name);
    }
  };
  var SafeKeyedReadExpr = class _SafeKeyedReadExpr extends ExpressionBase {
    constructor(receiver, index, sourceSpan) {
      super(sourceSpan);
      this.receiver = receiver;
      this.index = index;
      this.kind = ExpressionKind.SafeKeyedRead;
    }
    visitExpression(visitor, context2) {
      this.receiver.visitExpression(visitor, context2);
      this.index.visitExpression(visitor, context2);
    }
    isEquivalent() {
      return false;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions(transform2, flags) {
      this.receiver = transformExpressionsInExpression(this.receiver, transform2, flags);
      this.index = transformExpressionsInExpression(this.index, transform2, flags);
    }
    clone() {
      return new _SafeKeyedReadExpr(this.receiver.clone(), this.index.clone(), this.sourceSpan);
    }
  };
  var SafeInvokeFunctionExpr = class _SafeInvokeFunctionExpr extends ExpressionBase {
    constructor(receiver, args) {
      super();
      this.receiver = receiver;
      this.args = args;
      this.kind = ExpressionKind.SafeInvokeFunction;
    }
    visitExpression(visitor, context2) {
      this.receiver.visitExpression(visitor, context2);
      for (const a of this.args) {
        a.visitExpression(visitor, context2);
      }
    }
    isEquivalent() {
      return false;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions(transform2, flags) {
      this.receiver = transformExpressionsInExpression(this.receiver, transform2, flags);
      for (let i = 0; i < this.args.length; i++) {
        this.args[i] = transformExpressionsInExpression(this.args[i], transform2, flags);
      }
    }
    clone() {
      return new _SafeInvokeFunctionExpr(this.receiver.clone(), this.args.map((a) => a.clone()));
    }
  };
  var SafeTernaryExpr = class _SafeTernaryExpr extends ExpressionBase {
    constructor(guard, expr) {
      super();
      this.guard = guard;
      this.expr = expr;
      this.kind = ExpressionKind.SafeTernaryExpr;
    }
    visitExpression(visitor, context2) {
      this.guard.visitExpression(visitor, context2);
      this.expr.visitExpression(visitor, context2);
    }
    isEquivalent() {
      return false;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions(transform2, flags) {
      this.guard = transformExpressionsInExpression(this.guard, transform2, flags);
      this.expr = transformExpressionsInExpression(this.expr, transform2, flags);
    }
    clone() {
      return new _SafeTernaryExpr(this.guard.clone(), this.expr.clone());
    }
  };
  var EmptyExpr = class _EmptyExpr extends ExpressionBase {
    constructor() {
      super(...arguments);
      this.kind = ExpressionKind.EmptyExpr;
    }
    visitExpression(visitor, context2) {
    }
    isEquivalent(e2) {
      return e2 instanceof _EmptyExpr;
    }
    isConstant() {
      return true;
    }
    clone() {
      return new _EmptyExpr();
    }
    transformInternalExpressions() {
    }
  };
  var AssignTemporaryExpr = class _AssignTemporaryExpr extends ExpressionBase {
    constructor(expr, xref) {
      super();
      this.expr = expr;
      this.xref = xref;
      this.kind = ExpressionKind.AssignTemporaryExpr;
      this.name = null;
    }
    visitExpression(visitor, context2) {
      this.expr.visitExpression(visitor, context2);
    }
    isEquivalent() {
      return false;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions(transform2, flags) {
      this.expr = transformExpressionsInExpression(this.expr, transform2, flags);
    }
    clone() {
      const a = new _AssignTemporaryExpr(this.expr.clone(), this.xref);
      a.name = this.name;
      return a;
    }
  };
  var ReadTemporaryExpr = class _ReadTemporaryExpr extends ExpressionBase {
    constructor(xref) {
      super();
      this.xref = xref;
      this.kind = ExpressionKind.ReadTemporaryExpr;
      this.name = null;
    }
    visitExpression(visitor, context2) {
    }
    isEquivalent() {
      return this.xref === this.xref;
    }
    isConstant() {
      return false;
    }
    transformInternalExpressions(transform2, flags) {
    }
    clone() {
      const r = new _ReadTemporaryExpr(this.xref);
      r.name = this.name;
      return r;
    }
  };
  var SlotLiteralExpr = class _SlotLiteralExpr extends ExpressionBase {
    constructor(slot) {
      super();
      this.slot = slot;
      this.kind = ExpressionKind.SlotLiteralExpr;
    }
    visitExpression(visitor, context2) {
    }
    isEquivalent(e2) {
      return e2 instanceof _SlotLiteralExpr && e2.slot === this.slot;
    }
    isConstant() {
      return true;
    }
    clone() {
      return new _SlotLiteralExpr(this.slot);
    }
    transformInternalExpressions() {
    }
  };
  var ConditionalCaseExpr = class _ConditionalCaseExpr extends ExpressionBase {
    /**
     * Create an expression for one branch of a conditional.
     * @param expr The expression to be tested for this case. Might be null, as in an `else` case.
     * @param target The Xref of the view to be displayed if this condition is true.
     */
    constructor(expr, target, targetSlot, alias = null) {
      super();
      this.expr = expr;
      this.target = target;
      this.targetSlot = targetSlot;
      this.alias = alias;
      this.kind = ExpressionKind.ConditionalCase;
    }
    visitExpression(visitor, context2) {
      if (this.expr !== null) {
        this.expr.visitExpression(visitor, context2);
      }
    }
    isEquivalent(e2) {
      return e2 instanceof _ConditionalCaseExpr && e2.expr === this.expr;
    }
    isConstant() {
      return true;
    }
    clone() {
      return new _ConditionalCaseExpr(this.expr, this.target, this.targetSlot);
    }
    transformInternalExpressions(transform2, flags) {
      if (this.expr !== null) {
        this.expr = transformExpressionsInExpression(this.expr, transform2, flags);
      }
    }
  };
  var ConstCollectedExpr = class _ConstCollectedExpr extends ExpressionBase {
    constructor(expr) {
      super();
      this.expr = expr;
      this.kind = ExpressionKind.ConstCollected;
    }
    transformInternalExpressions(transform2, flags) {
      this.expr = transform2(this.expr, flags);
    }
    visitExpression(visitor, context2) {
      this.expr.visitExpression(visitor, context2);
    }
    isEquivalent(e2) {
      if (!(e2 instanceof _ConstCollectedExpr)) {
        return false;
      }
      return this.expr.isEquivalent(e2.expr);
    }
    isConstant() {
      return this.expr.isConstant();
    }
    clone() {
      return new _ConstCollectedExpr(this.expr);
    }
  };
  function visitExpressionsInOp(op, visitor) {
    transformExpressionsInOp(op, (expr, flags) => {
      visitor(expr, flags);
      return expr;
    }, VisitorContextFlag.None);
  }
  var VisitorContextFlag;
  (function(VisitorContextFlag2) {
    VisitorContextFlag2[VisitorContextFlag2["None"] = 0] = "None";
    VisitorContextFlag2[VisitorContextFlag2["InChildOperation"] = 1] = "InChildOperation";
  })(VisitorContextFlag || (VisitorContextFlag = {}));
  function transformExpressionsInInterpolation(interpolation, transform2, flags) {
    for (let i = 0; i < interpolation.expressions.length; i++) {
      interpolation.expressions[i] = transformExpressionsInExpression(interpolation.expressions[i], transform2, flags);
    }
  }
  function transformExpressionsInOp(op, transform2, flags) {
    switch (op.kind) {
      case OpKind.StyleProp:
      case OpKind.StyleMap:
      case OpKind.ClassProp:
      case OpKind.ClassMap:
      case OpKind.Binding:
        if (op.expression instanceof Interpolation) {
          transformExpressionsInInterpolation(op.expression, transform2, flags);
        } else {
          op.expression = transformExpressionsInExpression(op.expression, transform2, flags);
        }
        break;
      case OpKind.Property:
      case OpKind.HostProperty:
      case OpKind.Attribute:
        if (op.expression instanceof Interpolation) {
          transformExpressionsInInterpolation(op.expression, transform2, flags);
        } else {
          op.expression = transformExpressionsInExpression(op.expression, transform2, flags);
        }
        op.sanitizer = op.sanitizer && transformExpressionsInExpression(op.sanitizer, transform2, flags);
        break;
      case OpKind.TwoWayProperty:
        op.expression = transformExpressionsInExpression(op.expression, transform2, flags);
        op.sanitizer = op.sanitizer && transformExpressionsInExpression(op.sanitizer, transform2, flags);
        break;
      case OpKind.I18nExpression:
        op.expression = transformExpressionsInExpression(op.expression, transform2, flags);
        break;
      case OpKind.InterpolateText:
        transformExpressionsInInterpolation(op.interpolation, transform2, flags);
        break;
      case OpKind.Statement:
        transformExpressionsInStatement(op.statement, transform2, flags);
        break;
      case OpKind.Variable:
        op.initializer = transformExpressionsInExpression(op.initializer, transform2, flags);
        break;
      case OpKind.Conditional:
        for (const condition of op.conditions) {
          if (condition.expr === null) {
            continue;
          }
          condition.expr = transformExpressionsInExpression(condition.expr, transform2, flags);
        }
        if (op.processed !== null) {
          op.processed = transformExpressionsInExpression(op.processed, transform2, flags);
        }
        if (op.contextValue !== null) {
          op.contextValue = transformExpressionsInExpression(op.contextValue, transform2, flags);
        }
        break;
      case OpKind.Listener:
      case OpKind.TwoWayListener:
        for (const innerOp of op.handlerOps) {
          transformExpressionsInOp(innerOp, transform2, flags | VisitorContextFlag.InChildOperation);
        }
        break;
      case OpKind.ExtractedAttribute:
        op.expression = op.expression && transformExpressionsInExpression(op.expression, transform2, flags);
        op.trustedValueFn = op.trustedValueFn && transformExpressionsInExpression(op.trustedValueFn, transform2, flags);
        break;
      case OpKind.RepeaterCreate:
        op.track = transformExpressionsInExpression(op.track, transform2, flags);
        if (op.trackByFn !== null) {
          op.trackByFn = transformExpressionsInExpression(op.trackByFn, transform2, flags);
        }
        break;
      case OpKind.Repeater:
        op.collection = transformExpressionsInExpression(op.collection, transform2, flags);
        break;
      case OpKind.Defer:
        if (op.loadingConfig !== null) {
          op.loadingConfig = transformExpressionsInExpression(op.loadingConfig, transform2, flags);
        }
        if (op.placeholderConfig !== null) {
          op.placeholderConfig = transformExpressionsInExpression(op.placeholderConfig, transform2, flags);
        }
        if (op.resolverFn !== null) {
          op.resolverFn = transformExpressionsInExpression(op.resolverFn, transform2, flags);
        }
        break;
      case OpKind.I18nMessage:
        for (const [placeholder, expr] of op.params) {
          op.params.set(placeholder, transformExpressionsInExpression(expr, transform2, flags));
        }
        for (const [placeholder, expr] of op.postprocessingParams) {
          op.postprocessingParams.set(placeholder, transformExpressionsInExpression(expr, transform2, flags));
        }
        break;
      case OpKind.DeferWhen:
        op.expr = transformExpressionsInExpression(op.expr, transform2, flags);
        break;
      case OpKind.Advance:
      case OpKind.Container:
      case OpKind.ContainerEnd:
      case OpKind.ContainerStart:
      case OpKind.DeferOn:
      case OpKind.DisableBindings:
      case OpKind.Element:
      case OpKind.ElementEnd:
      case OpKind.ElementStart:
      case OpKind.EnableBindings:
      case OpKind.I18n:
      case OpKind.I18nApply:
      case OpKind.I18nContext:
      case OpKind.I18nEnd:
      case OpKind.I18nStart:
      case OpKind.IcuEnd:
      case OpKind.IcuStart:
      case OpKind.Namespace:
      case OpKind.Pipe:
      case OpKind.Projection:
      case OpKind.ProjectionDef:
      case OpKind.Template:
      case OpKind.Text:
      case OpKind.I18nAttributes:
      case OpKind.IcuPlaceholder:
        break;
      default:
        throw new Error(`AssertionError: transformExpressionsInOp doesn't handle ${OpKind[op.kind]}`);
    }
  }
  function transformExpressionsInExpression(expr, transform2, flags) {
    if (expr instanceof ExpressionBase) {
      expr.transformInternalExpressions(transform2, flags);
    } else if (expr instanceof BinaryOperatorExpr) {
      expr.lhs = transformExpressionsInExpression(expr.lhs, transform2, flags);
      expr.rhs = transformExpressionsInExpression(expr.rhs, transform2, flags);
    } else if (expr instanceof UnaryOperatorExpr) {
      expr.expr = transformExpressionsInExpression(expr.expr, transform2, flags);
    } else if (expr instanceof ReadPropExpr) {
      expr.receiver = transformExpressionsInExpression(expr.receiver, transform2, flags);
    } else if (expr instanceof ReadKeyExpr) {
      expr.receiver = transformExpressionsInExpression(expr.receiver, transform2, flags);
      expr.index = transformExpressionsInExpression(expr.index, transform2, flags);
    } else if (expr instanceof WritePropExpr) {
      expr.receiver = transformExpressionsInExpression(expr.receiver, transform2, flags);
      expr.value = transformExpressionsInExpression(expr.value, transform2, flags);
    } else if (expr instanceof WriteKeyExpr) {
      expr.receiver = transformExpressionsInExpression(expr.receiver, transform2, flags);
      expr.index = transformExpressionsInExpression(expr.index, transform2, flags);
      expr.value = transformExpressionsInExpression(expr.value, transform2, flags);
    } else if (expr instanceof InvokeFunctionExpr) {
      expr.fn = transformExpressionsInExpression(expr.fn, transform2, flags);
      for (let i = 0; i < expr.args.length; i++) {
        expr.args[i] = transformExpressionsInExpression(expr.args[i], transform2, flags);
      }
    } else if (expr instanceof LiteralArrayExpr) {
      for (let i = 0; i < expr.entries.length; i++) {
        expr.entries[i] = transformExpressionsInExpression(expr.entries[i], transform2, flags);
      }
    } else if (expr instanceof LiteralMapExpr) {
      for (let i = 0; i < expr.entries.length; i++) {
        expr.entries[i].value = transformExpressionsInExpression(expr.entries[i].value, transform2, flags);
      }
    } else if (expr instanceof ConditionalExpr) {
      expr.condition = transformExpressionsInExpression(expr.condition, transform2, flags);
      expr.trueCase = transformExpressionsInExpression(expr.trueCase, transform2, flags);
      if (expr.falseCase !== null) {
        expr.falseCase = transformExpressionsInExpression(expr.falseCase, transform2, flags);
      }
    } else if (expr instanceof TypeofExpr) {
      expr.expr = transformExpressionsInExpression(expr.expr, transform2, flags);
    } else if (expr instanceof WriteVarExpr) {
      expr.value = transformExpressionsInExpression(expr.value, transform2, flags);
    } else if (expr instanceof LocalizedString) {
      for (let i = 0; i < expr.expressions.length; i++) {
        expr.expressions[i] = transformExpressionsInExpression(expr.expressions[i], transform2, flags);
      }
    } else if (expr instanceof NotExpr) {
      expr.condition = transformExpressionsInExpression(expr.condition, transform2, flags);
    } else if (expr instanceof TaggedTemplateExpr) {
      expr.tag = transformExpressionsInExpression(expr.tag, transform2, flags);
      expr.template.expressions = expr.template.expressions.map((e2) => transformExpressionsInExpression(e2, transform2, flags));
    } else if (expr instanceof ArrowFunctionExpr) {
      if (Array.isArray(expr.body)) {
        for (let i = 0; i < expr.body.length; i++) {
          transformExpressionsInStatement(expr.body[i], transform2, flags);
        }
      } else {
        expr.body = transformExpressionsInExpression(expr.body, transform2, flags);
      }
    } else if (expr instanceof WrappedNodeExpr) {
    } else if (expr instanceof ReadVarExpr || expr instanceof ExternalExpr || expr instanceof LiteralExpr) {
    } else {
      throw new Error(`Unhandled expression kind: ${expr.constructor.name}`);
    }
    return transform2(expr, flags);
  }
  function transformExpressionsInStatement(stmt, transform2, flags) {
    if (stmt instanceof ExpressionStatement) {
      stmt.expr = transformExpressionsInExpression(stmt.expr, transform2, flags);
    } else if (stmt instanceof ReturnStatement) {
      stmt.value = transformExpressionsInExpression(stmt.value, transform2, flags);
    } else if (stmt instanceof DeclareVarStmt) {
      if (stmt.value !== void 0) {
        stmt.value = transformExpressionsInExpression(stmt.value, transform2, flags);
      }
    } else if (stmt instanceof IfStmt) {
      stmt.condition = transformExpressionsInExpression(stmt.condition, transform2, flags);
      for (const caseStatement of stmt.trueCase) {
        transformExpressionsInStatement(caseStatement, transform2, flags);
      }
      for (const caseStatement of stmt.falseCase) {
        transformExpressionsInStatement(caseStatement, transform2, flags);
      }
    } else {
      throw new Error(`Unhandled statement kind: ${stmt.constructor.name}`);
    }
  }
  function isStringLiteral(expr) {
    return expr instanceof LiteralExpr && typeof expr.value === "string";
  }
  var OpList = class _OpList {
    static {
      this.nextListId = 0;
    }
    constructor() {
      this.debugListId = _OpList.nextListId++;
      this.head = {
        kind: OpKind.ListEnd,
        next: null,
        prev: null,
        debugListId: this.debugListId
      };
      this.tail = {
        kind: OpKind.ListEnd,
        next: null,
        prev: null,
        debugListId: this.debugListId
      };
      this.head.next = this.tail;
      this.tail.prev = this.head;
    }
    /**
     * Push a new operation to the tail of the list.
     */
    push(op) {
      if (Array.isArray(op)) {
        for (const o of op) {
          this.push(o);
        }
        return;
      }
      _OpList.assertIsNotEnd(op);
      _OpList.assertIsUnowned(op);
      op.debugListId = this.debugListId;
      const oldLast = this.tail.prev;
      op.prev = oldLast;
      oldLast.next = op;
      op.next = this.tail;
      this.tail.prev = op;
    }
    /**
     * Prepend one or more nodes to the start of the list.
     */
    prepend(ops) {
      if (ops.length === 0) {
        return;
      }
      for (const op of ops) {
        _OpList.assertIsNotEnd(op);
        _OpList.assertIsUnowned(op);
        op.debugListId = this.debugListId;
      }
      const first2 = this.head.next;
      let prev = this.head;
      for (const op of ops) {
        prev.next = op;
        op.prev = prev;
        prev = op;
      }
      prev.next = first2;
      first2.prev = prev;
    }
    /**
     * `OpList` is iterable via the iteration protocol.
     *
     * It's safe to mutate the part of the list that has already been returned by the iterator, up to
     * and including the last operation returned. Mutations beyond that point _may_ be safe, but may
     * also corrupt the iteration position and should be avoided.
     */
    *[Symbol.iterator]() {
      let current = this.head.next;
      while (current !== this.tail) {
        _OpList.assertIsOwned(current, this.debugListId);
        const next = current.next;
        yield current;
        current = next;
      }
    }
    *reversed() {
      let current = this.tail.prev;
      while (current !== this.head) {
        _OpList.assertIsOwned(current, this.debugListId);
        const prev = current.prev;
        yield current;
        current = prev;
      }
    }
    /**
     * Replace `oldOp` with `newOp` in the list.
     */
    static replace(oldOp, newOp) {
      _OpList.assertIsNotEnd(oldOp);
      _OpList.assertIsNotEnd(newOp);
      _OpList.assertIsOwned(oldOp);
      _OpList.assertIsUnowned(newOp);
      newOp.debugListId = oldOp.debugListId;
      if (oldOp.prev !== null) {
        oldOp.prev.next = newOp;
        newOp.prev = oldOp.prev;
      }
      if (oldOp.next !== null) {
        oldOp.next.prev = newOp;
        newOp.next = oldOp.next;
      }
      oldOp.debugListId = null;
      oldOp.prev = null;
      oldOp.next = null;
    }
    /**
     * Replace `oldOp` with some number of new operations in the list (which may include `oldOp`).
     */
    static replaceWithMany(oldOp, newOps) {
      if (newOps.length === 0) {
        _OpList.remove(oldOp);
        return;
      }
      _OpList.assertIsNotEnd(oldOp);
      _OpList.assertIsOwned(oldOp);
      const listId = oldOp.debugListId;
      oldOp.debugListId = null;
      for (const newOp of newOps) {
        _OpList.assertIsNotEnd(newOp);
        _OpList.assertIsUnowned(newOp);
      }
      const { prev: oldPrev, next: oldNext } = oldOp;
      oldOp.prev = null;
      oldOp.next = null;
      let prev = oldPrev;
      for (const newOp of newOps) {
        this.assertIsUnowned(newOp);
        newOp.debugListId = listId;
        prev.next = newOp;
        newOp.prev = prev;
        newOp.next = null;
        prev = newOp;
      }
      const first2 = newOps[0];
      const last4 = prev;
      if (oldPrev !== null) {
        oldPrev.next = first2;
        first2.prev = oldPrev;
      }
      if (oldNext !== null) {
        oldNext.prev = last4;
        last4.next = oldNext;
      }
    }
    /**
     * Remove the given node from the list which contains it.
     */
    static remove(op) {
      _OpList.assertIsNotEnd(op);
      _OpList.assertIsOwned(op);
      op.prev.next = op.next;
      op.next.prev = op.prev;
      op.debugListId = null;
      op.prev = null;
      op.next = null;
    }
    /**
     * Insert `op` before `target`.
     */
    static insertBefore(op, target) {
      if (Array.isArray(op)) {
        for (const o of op) {
          this.insertBefore(o, target);
        }
        return;
      }
      _OpList.assertIsOwned(target);
      if (target.prev === null) {
        throw new Error(`AssertionError: illegal operation on list start`);
      }
      _OpList.assertIsNotEnd(op);
      _OpList.assertIsUnowned(op);
      op.debugListId = target.debugListId;
      op.prev = null;
      target.prev.next = op;
      op.prev = target.prev;
      op.next = target;
      target.prev = op;
    }
    /**
     * Insert `op` after `target`.
     */
    static insertAfter(op, target) {
      _OpList.assertIsOwned(target);
      if (target.next === null) {
        throw new Error(`AssertionError: illegal operation on list end`);
      }
      _OpList.assertIsNotEnd(op);
      _OpList.assertIsUnowned(op);
      op.debugListId = target.debugListId;
      target.next.prev = op;
      op.next = target.next;
      op.prev = target;
      target.next = op;
    }
    /**
     * Asserts that `op` does not currently belong to a list.
     */
    static assertIsUnowned(op) {
      if (op.debugListId !== null) {
        throw new Error(`AssertionError: illegal operation on owned node: ${OpKind[op.kind]}`);
      }
    }
    /**
     * Asserts that `op` currently belongs to a list. If `byList` is passed, `op` is asserted to
     * specifically belong to that list.
     */
    static assertIsOwned(op, byList) {
      if (op.debugListId === null) {
        throw new Error(`AssertionError: illegal operation on unowned node: ${OpKind[op.kind]}`);
      } else if (byList !== void 0 && op.debugListId !== byList) {
        throw new Error(`AssertionError: node belongs to the wrong list (expected ${byList}, actual ${op.debugListId})`);
      }
    }
    /**
     * Asserts that `op` is not a special `ListEnd` node.
     */
    static assertIsNotEnd(op) {
      if (op.kind === OpKind.ListEnd) {
        throw new Error(`AssertionError: illegal operation on list head or tail`);
      }
    }
  };
  var SlotHandle = class {
    constructor() {
      this.slot = null;
    }
  };
  var elementContainerOpKinds = /* @__PURE__ */ new Set([
    OpKind.Element,
    OpKind.ElementStart,
    OpKind.Container,
    OpKind.ContainerStart,
    OpKind.Template,
    OpKind.RepeaterCreate
  ]);
  function isElementOrContainerOp(op) {
    return elementContainerOpKinds.has(op.kind);
  }
  function createElementStartOp(tag, xref, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {
    return {
      kind: OpKind.ElementStart,
      xref,
      tag,
      handle: new SlotHandle(),
      attributes: null,
      localRefs: [],
      nonBindable: false,
      namespace,
      i18nPlaceholder,
      startSourceSpan,
      wholeSourceSpan,
      ...TRAIT_CONSUMES_SLOT,
      ...NEW_OP
    };
  }
  function createTemplateOp(xref, templateKind, tag, functionNameSuffix, namespace, i18nPlaceholder, startSourceSpan, wholeSourceSpan) {
    return {
      kind: OpKind.Template,
      xref,
      templateKind,
      attributes: null,
      tag,
      handle: new SlotHandle(),
      functionNameSuffix,
      decls: null,
      vars: null,
      localRefs: [],
      nonBindable: false,
      namespace,
      i18nPlaceholder,
      startSourceSpan,
      wholeSourceSpan,
      ...TRAIT_CONSUMES_SLOT,
      ...NEW_OP
    };
  }
  function createRepeaterCreateOp(primaryView, emptyView, tag, track, varNames, emptyTag, i18nPlaceholder, emptyI18nPlaceholder, startSourceSpan, wholeSourceSpan) {
    return {
      kind: OpKind.RepeaterCreate,
      attributes: null,
      xref: primaryView,
      handle: new SlotHandle(),
      emptyView,
      track,
      trackByFn: null,
      tag,
      emptyTag,
      emptyAttributes: null,
      functionNameSuffix: "For",
      namespace: Namespace.HTML,
      nonBindable: false,
      localRefs: [],
      decls: null,
      vars: null,
      varNames,
      usesComponentInstance: false,
      i18nPlaceholder,
      emptyI18nPlaceholder,
      startSourceSpan,
      wholeSourceSpan,
      ...TRAIT_CONSUMES_SLOT,
      ...NEW_OP,
      ...TRAIT_CONSUMES_VARS,
      numSlotsUsed: emptyView === null ? 2 : 3
    };
  }
  function createElementEndOp(xref, sourceSpan) {
    return {
      kind: OpKind.ElementEnd,
      xref,
      sourceSpan,
      ...NEW_OP
    };
  }
  function createDisableBindingsOp(xref) {
    return {
      kind: OpKind.DisableBindings,
      xref,
      ...NEW_OP
    };
  }
  function createEnableBindingsOp(xref) {
    return {
      kind: OpKind.EnableBindings,
      xref,
      ...NEW_OP
    };
  }
  function createTextOp(xref, initialValue, icuPlaceholder, sourceSpan) {
    return {
      kind: OpKind.Text,
      xref,
      handle: new SlotHandle(),
      initialValue,
      icuPlaceholder,
      sourceSpan,
      ...TRAIT_CONSUMES_SLOT,
      ...NEW_OP
    };
  }
  function createListenerOp(target, targetSlot, name, tag, handlerOps, animationPhase, eventTarget, hostListener, sourceSpan) {
    const handlerList = new OpList();
    handlerList.push(handlerOps);
    return {
      kind: OpKind.Listener,
      target,
      targetSlot,
      tag,
      hostListener,
      name,
      handlerOps: handlerList,
      handlerFnName: null,
      consumesDollarEvent: false,
      isAnimationListener: animationPhase !== null,
      animationPhase,
      eventTarget,
      sourceSpan,
      ...NEW_OP
    };
  }
  function createTwoWayListenerOp(target, targetSlot, name, tag, handlerOps, sourceSpan) {
    const handlerList = new OpList();
    handlerList.push(handlerOps);
    return {
      kind: OpKind.TwoWayListener,
      target,
      targetSlot,
      tag,
      name,
      handlerOps: handlerList,
      handlerFnName: null,
      sourceSpan,
      ...NEW_OP
    };
  }
  function createPipeOp(xref, slot, name) {
    return {
      kind: OpKind.Pipe,
      xref,
      handle: slot,
      name,
      ...NEW_OP,
      ...TRAIT_CONSUMES_SLOT
    };
  }
  function createNamespaceOp(namespace) {
    return {
      kind: OpKind.Namespace,
      active: namespace,
      ...NEW_OP
    };
  }
  function createProjectionDefOp(def) {
    return {
      kind: OpKind.ProjectionDef,
      def,
      ...NEW_OP
    };
  }
  function createProjectionOp(xref, selector, i18nPlaceholder, sourceSpan) {
    return {
      kind: OpKind.Projection,
      xref,
      handle: new SlotHandle(),
      selector,
      i18nPlaceholder,
      projectionSlotIndex: 0,
      attributes: null,
      localRefs: [],
      sourceSpan,
      ...NEW_OP,
      ...TRAIT_CONSUMES_SLOT
    };
  }
  function createExtractedAttributeOp(target, bindingKind, namespace, name, expression, i18nContext, i18nMessage, securityContext) {
    return {
      kind: OpKind.ExtractedAttribute,
      target,
      bindingKind,
      namespace,
      name,
      expression,
      i18nContext,
      i18nMessage,
      securityContext,
      trustedValueFn: null,
      ...NEW_OP
    };
  }
  function createDeferOp(xref, main, mainSlot, metadata, resolverFn, sourceSpan) {
    return {
      kind: OpKind.Defer,
      xref,
      handle: new SlotHandle(),
      mainView: main,
      mainSlot,
      loadingView: null,
      loadingSlot: null,
      loadingConfig: null,
      loadingMinimumTime: null,
      loadingAfterTime: null,
      placeholderView: null,
      placeholderSlot: null,
      placeholderConfig: null,
      placeholderMinimumTime: null,
      errorView: null,
      errorSlot: null,
      metadata,
      resolverFn,
      sourceSpan,
      ...NEW_OP,
      ...TRAIT_CONSUMES_SLOT,
      numSlotsUsed: 2
    };
  }
  function createDeferOnOp(defer3, trigger, prefetch, sourceSpan) {
    return {
      kind: OpKind.DeferOn,
      defer: defer3,
      trigger,
      prefetch,
      sourceSpan,
      ...NEW_OP
    };
  }
  function createI18nMessageOp(xref, i18nContext, i18nBlock, message, messagePlaceholder, params, postprocessingParams, needsPostprocessing) {
    return {
      kind: OpKind.I18nMessage,
      xref,
      i18nContext,
      i18nBlock,
      message,
      messagePlaceholder,
      params,
      postprocessingParams,
      needsPostprocessing,
      subMessages: [],
      ...NEW_OP
    };
  }
  function createI18nStartOp(xref, message, root, sourceSpan) {
    return {
      kind: OpKind.I18nStart,
      xref,
      handle: new SlotHandle(),
      root: root ?? xref,
      message,
      messageIndex: null,
      subTemplateIndex: null,
      context: null,
      sourceSpan,
      ...NEW_OP,
      ...TRAIT_CONSUMES_SLOT
    };
  }
  function createI18nEndOp(xref, sourceSpan) {
    return {
      kind: OpKind.I18nEnd,
      xref,
      sourceSpan,
      ...NEW_OP
    };
  }
  function createIcuStartOp(xref, message, messagePlaceholder, sourceSpan) {
    return {
      kind: OpKind.IcuStart,
      xref,
      message,
      messagePlaceholder,
      context: null,
      sourceSpan,
      ...NEW_OP
    };
  }
  function createIcuEndOp(xref) {
    return {
      kind: OpKind.IcuEnd,
      xref,
      ...NEW_OP
    };
  }
  function createIcuPlaceholderOp(xref, name, strings) {
    return {
      kind: OpKind.IcuPlaceholder,
      xref,
      name,
      strings,
      expressionPlaceholders: [],
      ...NEW_OP
    };
  }
  function createI18nContextOp(contextKind, xref, i18nBlock, message, sourceSpan) {
    if (i18nBlock === null && contextKind !== I18nContextKind.Attr) {
      throw new Error("AssertionError: i18nBlock must be provided for non-attribute contexts.");
    }
    return {
      kind: OpKind.I18nContext,
      contextKind,
      xref,
      i18nBlock,
      message,
      sourceSpan,
      params: /* @__PURE__ */ new Map(),
      postprocessingParams: /* @__PURE__ */ new Map(),
      ...NEW_OP
    };
  }
  function createI18nAttributesOp(xref, handle, target) {
    return {
      kind: OpKind.I18nAttributes,
      xref,
      handle,
      target,
      i18nAttributesConfig: null,
      ...NEW_OP,
      ...TRAIT_CONSUMES_SLOT
    };
  }
  function createHostPropertyOp(name, expression, isAnimationTrigger, i18nContext, securityContext, sourceSpan) {
    return {
      kind: OpKind.HostProperty,
      name,
      expression,
      isAnimationTrigger,
      i18nContext,
      securityContext,
      sanitizer: null,
      sourceSpan,
      ...TRAIT_CONSUMES_VARS,
      ...NEW_OP
    };
  }
  var CTX_REF = "CTX_REF_MARKER";
  var CompilationJobKind;
  (function(CompilationJobKind2) {
    CompilationJobKind2[CompilationJobKind2["Tmpl"] = 0] = "Tmpl";
    CompilationJobKind2[CompilationJobKind2["Host"] = 1] = "Host";
    CompilationJobKind2[CompilationJobKind2["Both"] = 2] = "Both";
  })(CompilationJobKind || (CompilationJobKind = {}));
  var CompilationJob = class {
    constructor(componentName, pool, compatibility) {
      this.componentName = componentName;
      this.pool = pool;
      this.compatibility = compatibility;
      this.kind = CompilationJobKind.Both;
      this.nextXrefId = 0;
    }
    /**
     * Generate a new unique `ir.XrefId` in this job.
     */
    allocateXrefId() {
      return this.nextXrefId++;
    }
  };
  var ComponentCompilationJob = class extends CompilationJob {
    constructor(componentName, pool, compatibility, relativeContextFilePath, i18nUseExternalIds, deferBlocksMeta, allDeferrableDepsFn) {
      super(componentName, pool, compatibility);
      this.relativeContextFilePath = relativeContextFilePath;
      this.i18nUseExternalIds = i18nUseExternalIds;
      this.deferBlocksMeta = deferBlocksMeta;
      this.allDeferrableDepsFn = allDeferrableDepsFn;
      this.kind = CompilationJobKind.Tmpl;
      this.fnSuffix = "Template";
      this.views = /* @__PURE__ */ new Map();
      this.contentSelectors = null;
      this.consts = [];
      this.constsInitializers = [];
      this.root = new ViewCompilationUnit(this, this.allocateXrefId(), null);
      this.views.set(this.root.xref, this.root);
    }
    /**
     * Add a `ViewCompilation` for a new embedded view to this compilation.
     */
    allocateView(parent) {
      const view = new ViewCompilationUnit(this, this.allocateXrefId(), parent);
      this.views.set(view.xref, view);
      return view;
    }
    get units() {
      return this.views.values();
    }
    /**
     * Add a constant `o.Expression` to the compilation and return its index in the `consts` array.
     */
    addConst(newConst, initializers) {
      for (let idx2 = 0; idx2 < this.consts.length; idx2++) {
        if (this.consts[idx2].isEquivalent(newConst)) {
          return idx2;
        }
      }
      const idx = this.consts.length;
      this.consts.push(newConst);
      if (initializers) {
        this.constsInitializers.push(...initializers);
      }
      return idx;
    }
  };
  var CompilationUnit = class {
    constructor(xref) {
      this.xref = xref;
      this.create = new OpList();
      this.update = new OpList();
      this.fnName = null;
      this.vars = null;
    }
    /**
     * Iterate over all `ir.Op`s within this view.
     *
     * Some operations may have child operations, which this iterator will visit.
     */
    *ops() {
      for (const op of this.create) {
        yield op;
        if (op.kind === OpKind.Listener || op.kind === OpKind.TwoWayListener) {
          for (const listenerOp of op.handlerOps) {
            yield listenerOp;
          }
        }
      }
      for (const op of this.update) {
        yield op;
      }
    }
  };
  var ViewCompilationUnit = class extends CompilationUnit {
    constructor(job, xref, parent) {
      super(xref);
      this.job = job;
      this.parent = parent;
      this.contextVariables = /* @__PURE__ */ new Map();
      this.aliases = /* @__PURE__ */ new Set();
      this.decls = null;
    }
  };
  var HostBindingCompilationJob = class extends CompilationJob {
    constructor(componentName, pool, compatibility) {
      super(componentName, pool, compatibility);
      this.kind = CompilationJobKind.Host;
      this.fnSuffix = "HostBindings";
      this.root = new HostBindingCompilationUnit(this);
    }
    get units() {
      return [this.root];
    }
  };
  var HostBindingCompilationUnit = class extends CompilationUnit {
    constructor(job) {
      super(0);
      this.job = job;
      this.attributes = null;
    }
  };
  function deleteAnyCasts(job) {
    for (const unit of job.units) {
      for (const op of unit.ops()) {
        transformExpressionsInOp(op, removeAnys, VisitorContextFlag.None);
      }
    }
  }
  function removeAnys(e2) {
    if (e2 instanceof InvokeFunctionExpr && e2.fn instanceof LexicalReadExpr && e2.fn.name === "$any") {
      if (e2.args.length !== 1) {
        throw new Error("The $any builtin function expects exactly one argument.");
      }
      return e2.args[0];
    }
    return e2;
  }
  function applyI18nExpressions(job) {
    const i18nContexts = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind === OpKind.I18nContext) {
          i18nContexts.set(op.xref, op);
        }
      }
    }
    for (const unit of job.units) {
      for (const op of unit.update) {
        if (op.kind === OpKind.I18nExpression && needsApplication(i18nContexts, op)) {
          OpList.insertAfter(createI18nApplyOp(op.i18nOwner, op.handle, null), op);
        }
      }
    }
  }
  function needsApplication(i18nContexts, op) {
    if (op.next?.kind !== OpKind.I18nExpression) {
      return true;
    }
    const context2 = i18nContexts.get(op.context);
    const nextContext2 = i18nContexts.get(op.next.context);
    if (context2 === void 0) {
      throw new Error("AssertionError: expected an I18nContextOp to exist for the I18nExpressionOp's context");
    }
    if (nextContext2 === void 0) {
      throw new Error("AssertionError: expected an I18nContextOp to exist for the next I18nExpressionOp's context");
    }
    if (context2.i18nBlock !== null) {
      if (context2.i18nBlock !== nextContext2.i18nBlock) {
        return true;
      }
      return false;
    }
    if (op.i18nOwner !== op.next.i18nOwner) {
      return true;
    }
    return false;
  }
  function assignI18nSlotDependencies(job) {
    for (const unit of job.units) {
      let updateOp = unit.update.head;
      let i18nExpressionsInProgress = [];
      let state = null;
      for (const createOp of unit.create) {
        if (createOp.kind === OpKind.I18nStart) {
          state = {
            blockXref: createOp.xref,
            lastSlotConsumer: createOp.xref
          };
        } else if (createOp.kind === OpKind.I18nEnd) {
          for (const op of i18nExpressionsInProgress) {
            op.target = state.lastSlotConsumer;
            OpList.insertBefore(op, updateOp);
          }
          i18nExpressionsInProgress.length = 0;
          state = null;
        }
        if (hasConsumesSlotTrait(createOp)) {
          if (state !== null) {
            state.lastSlotConsumer = createOp.xref;
          }
          while (true) {
            if (updateOp.next === null) {
              break;
            }
            if (state !== null && updateOp.kind === OpKind.I18nExpression && updateOp.usage === I18nExpressionFor.I18nText && updateOp.i18nOwner === state.blockXref) {
              const opToRemove = updateOp;
              updateOp = updateOp.next;
              OpList.remove(opToRemove);
              i18nExpressionsInProgress.push(opToRemove);
              continue;
            }
            if (hasDependsOnSlotContextTrait(updateOp) && updateOp.target !== createOp.xref) {
              break;
            }
            updateOp = updateOp.next;
          }
        }
      }
    }
  }
  function createOpXrefMap(unit) {
    const map3 = /* @__PURE__ */ new Map();
    for (const op of unit.create) {
      if (!hasConsumesSlotTrait(op)) {
        continue;
      }
      map3.set(op.xref, op);
      if (op.kind === OpKind.RepeaterCreate && op.emptyView !== null) {
        map3.set(op.emptyView, op);
      }
    }
    return map3;
  }
  function extractAttributes(job) {
    for (const unit of job.units) {
      const elements = createOpXrefMap(unit);
      for (const op of unit.ops()) {
        switch (op.kind) {
          case OpKind.Attribute:
            extractAttributeOp(unit, op, elements);
            break;
          case OpKind.Property:
            if (!op.isAnimationTrigger) {
              let bindingKind;
              if (op.i18nMessage !== null && op.templateKind === null) {
                bindingKind = BindingKind.I18n;
              } else if (op.isStructuralTemplateAttribute) {
                bindingKind = BindingKind.Template;
              } else {
                bindingKind = BindingKind.Property;
              }
              OpList.insertBefore(
                // Deliberately null i18nMessage value
                createExtractedAttributeOp(
                  op.target,
                  bindingKind,
                  null,
                  op.name,
                  /* expression */
                  null,
                  /* i18nContext */
                  null,
                  /* i18nMessage */
                  null,
                  op.securityContext
                ),
                lookupElement$2(elements, op.target)
              );
            }
            break;
          case OpKind.TwoWayProperty:
            OpList.insertBefore(createExtractedAttributeOp(
              op.target,
              BindingKind.TwoWayProperty,
              null,
              op.name,
              /* expression */
              null,
              /* i18nContext */
              null,
              /* i18nMessage */
              null,
              op.securityContext
            ), lookupElement$2(elements, op.target));
            break;
          case OpKind.StyleProp:
          case OpKind.ClassProp:
            if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder && op.expression instanceof EmptyExpr) {
              OpList.insertBefore(createExtractedAttributeOp(
                op.target,
                BindingKind.Property,
                null,
                op.name,
                /* expression */
                null,
                /* i18nContext */
                null,
                /* i18nMessage */
                null,
                SecurityContext2.STYLE
              ), lookupElement$2(elements, op.target));
            }
            break;
          case OpKind.Listener:
            if (!op.isAnimationListener) {
              const extractedAttributeOp = createExtractedAttributeOp(
                op.target,
                BindingKind.Property,
                null,
                op.name,
                /* expression */
                null,
                /* i18nContext */
                null,
                /* i18nMessage */
                null,
                SecurityContext2.NONE
              );
              if (job.kind === CompilationJobKind.Host) {
                if (job.compatibility) {
                  break;
                }
                unit.create.push(extractedAttributeOp);
              } else {
                OpList.insertBefore(extractedAttributeOp, lookupElement$2(elements, op.target));
              }
            }
            break;
          case OpKind.TwoWayListener:
            if (job.kind !== CompilationJobKind.Host) {
              const extractedAttributeOp = createExtractedAttributeOp(
                op.target,
                BindingKind.Property,
                null,
                op.name,
                /* expression */
                null,
                /* i18nContext */
                null,
                /* i18nMessage */
                null,
                SecurityContext2.NONE
              );
              OpList.insertBefore(extractedAttributeOp, lookupElement$2(elements, op.target));
            }
            break;
        }
      }
    }
  }
  function lookupElement$2(elements, xref) {
    const el = elements.get(xref);
    if (el === void 0) {
      throw new Error("All attributes should have an element-like target.");
    }
    return el;
  }
  function extractAttributeOp(unit, op, elements) {
    if (op.expression instanceof Interpolation) {
      return;
    }
    let extractable = op.isTextAttribute || op.expression.isConstant();
    if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {
      extractable &&= op.isTextAttribute;
    }
    if (extractable) {
      const extractedAttributeOp = createExtractedAttributeOp(op.target, op.isStructuralTemplateAttribute ? BindingKind.Template : BindingKind.Attribute, op.namespace, op.name, op.expression, op.i18nContext, op.i18nMessage, op.securityContext);
      if (unit.job.kind === CompilationJobKind.Host) {
        unit.create.push(extractedAttributeOp);
      } else {
        const ownerOp = lookupElement$2(elements, op.target);
        OpList.insertBefore(extractedAttributeOp, ownerOp);
      }
      OpList.remove(op);
    }
  }
  function lookupElement$1(elements, xref) {
    const el = elements.get(xref);
    if (el === void 0) {
      throw new Error("All attributes should have an element-like target.");
    }
    return el;
  }
  function specializeBindings(job) {
    const elements = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (!isElementOrContainerOp(op)) {
          continue;
        }
        elements.set(op.xref, op);
      }
    }
    for (const unit of job.units) {
      for (const op of unit.ops()) {
        if (op.kind !== OpKind.Binding) {
          continue;
        }
        switch (op.bindingKind) {
          case BindingKind.Attribute:
            if (op.name === "ngNonBindable") {
              OpList.remove(op);
              const target = lookupElement$1(elements, op.target);
              target.nonBindable = true;
            } else {
              const [namespace, name] = splitNsName(op.name);
              OpList.replace(op, createAttributeOp(op.target, namespace, name, op.expression, op.securityContext, op.isTextAttribute, op.isStructuralTemplateAttribute, op.templateKind, op.i18nMessage, op.sourceSpan));
            }
            break;
          case BindingKind.Property:
          case BindingKind.Animation:
            if (job.kind === CompilationJobKind.Host) {
              OpList.replace(op, createHostPropertyOp(op.name, op.expression, op.bindingKind === BindingKind.Animation, op.i18nContext, op.securityContext, op.sourceSpan));
            } else {
              OpList.replace(op, createPropertyOp(op.target, op.name, op.expression, op.bindingKind === BindingKind.Animation, op.securityContext, op.isStructuralTemplateAttribute, op.templateKind, op.i18nContext, op.i18nMessage, op.sourceSpan));
            }
            break;
          case BindingKind.TwoWayProperty:
            if (!(op.expression instanceof Expression)) {
              throw new Error(`Expected value of two-way property binding "${op.name}" to be an expression`);
            }
            OpList.replace(op, createTwoWayPropertyOp(op.target, op.name, op.expression, op.securityContext, op.isStructuralTemplateAttribute, op.templateKind, op.i18nContext, op.i18nMessage, op.sourceSpan));
            break;
          case BindingKind.I18n:
          case BindingKind.ClassName:
          case BindingKind.StyleProperty:
            throw new Error(`Unhandled binding of kind ${BindingKind[op.bindingKind]}`);
        }
      }
    }
  }
  var CHAINABLE = /* @__PURE__ */ new Set([
    Identifiers.attribute,
    Identifiers.classProp,
    Identifiers.element,
    Identifiers.elementContainer,
    Identifiers.elementContainerEnd,
    Identifiers.elementContainerStart,
    Identifiers.elementEnd,
    Identifiers.elementStart,
    Identifiers.hostProperty,
    Identifiers.i18nExp,
    Identifiers.listener,
    Identifiers.listener,
    Identifiers.property,
    Identifiers.styleProp,
    Identifiers.stylePropInterpolate1,
    Identifiers.stylePropInterpolate2,
    Identifiers.stylePropInterpolate3,
    Identifiers.stylePropInterpolate4,
    Identifiers.stylePropInterpolate5,
    Identifiers.stylePropInterpolate6,
    Identifiers.stylePropInterpolate7,
    Identifiers.stylePropInterpolate8,
    Identifiers.stylePropInterpolateV,
    Identifiers.syntheticHostListener,
    Identifiers.syntheticHostProperty,
    Identifiers.templateCreate,
    Identifiers.twoWayProperty,
    Identifiers.twoWayListener
  ]);
  function chain(job) {
    for (const unit of job.units) {
      chainOperationsInList(unit.create);
      chainOperationsInList(unit.update);
    }
  }
  function chainOperationsInList(opList) {
    let chain2 = null;
    for (const op of opList) {
      if (op.kind !== OpKind.Statement || !(op.statement instanceof ExpressionStatement)) {
        chain2 = null;
        continue;
      }
      if (!(op.statement.expr instanceof InvokeFunctionExpr) || !(op.statement.expr.fn instanceof ExternalExpr)) {
        chain2 = null;
        continue;
      }
      const instruction = op.statement.expr.fn.value;
      if (!CHAINABLE.has(instruction)) {
        chain2 = null;
        continue;
      }
      if (chain2 !== null && chain2.instruction === instruction) {
        const expression = chain2.expression.callFn(op.statement.expr.args, op.statement.expr.sourceSpan, op.statement.expr.pure);
        chain2.expression = expression;
        chain2.op.statement = expression.toStmt();
        OpList.remove(op);
      } else {
        chain2 = {
          op,
          instruction,
          expression: op.statement.expr
        };
      }
    }
  }
  function collapseSingletonInterpolations(job) {
    for (const unit of job.units) {
      for (const op of unit.update) {
        const eligibleOpKind = op.kind === OpKind.Attribute;
        if (eligibleOpKind && op.expression instanceof Interpolation && op.expression.strings.length === 2 && op.expression.strings.every((s) => s === "")) {
          op.expression = op.expression.expressions[0];
        }
      }
    }
  }
  function generateConditionalExpressions(job) {
    for (const unit of job.units) {
      for (const op of unit.ops()) {
        if (op.kind !== OpKind.Conditional) {
          continue;
        }
        let test;
        const defaultCase = op.conditions.findIndex((cond) => cond.expr === null);
        if (defaultCase >= 0) {
          const slot = op.conditions.splice(defaultCase, 1)[0].targetSlot;
          test = new SlotLiteralExpr(slot);
        } else {
          test = literal(-1);
        }
        let tmp = op.test == null ? null : new AssignTemporaryExpr(op.test, job.allocateXrefId());
        for (let i = op.conditions.length - 1; i >= 0; i--) {
          let conditionalCase = op.conditions[i];
          if (conditionalCase.expr === null) {
            continue;
          }
          if (tmp !== null) {
            const useTmp = i === 0 ? tmp : new ReadTemporaryExpr(tmp.xref);
            conditionalCase.expr = new BinaryOperatorExpr(BinaryOperator.Identical, useTmp, conditionalCase.expr);
          } else if (conditionalCase.alias !== null) {
            const caseExpressionTemporaryXref = job.allocateXrefId();
            conditionalCase.expr = new AssignTemporaryExpr(conditionalCase.expr, caseExpressionTemporaryXref);
            op.contextValue = new ReadTemporaryExpr(caseExpressionTemporaryXref);
          }
          test = new ConditionalExpr(conditionalCase.expr, new SlotLiteralExpr(conditionalCase.targetSlot), test);
        }
        op.processed = test;
        op.conditions = [];
      }
    }
  }
  var BINARY_OPERATORS = /* @__PURE__ */ new Map([
    ["&&", BinaryOperator.And],
    [">", BinaryOperator.Bigger],
    [">=", BinaryOperator.BiggerEquals],
    ["|", BinaryOperator.BitwiseOr],
    ["&", BinaryOperator.BitwiseAnd],
    ["/", BinaryOperator.Divide],
    ["==", BinaryOperator.Equals],
    ["===", BinaryOperator.Identical],
    ["<", BinaryOperator.Lower],
    ["<=", BinaryOperator.LowerEquals],
    ["-", BinaryOperator.Minus],
    ["%", BinaryOperator.Modulo],
    ["*", BinaryOperator.Multiply],
    ["!=", BinaryOperator.NotEquals],
    ["!==", BinaryOperator.NotIdentical],
    ["??", BinaryOperator.NullishCoalesce],
    ["||", BinaryOperator.Or],
    ["+", BinaryOperator.Plus]
  ]);
  function namespaceForKey(namespacePrefixKey) {
    const NAMESPACES = /* @__PURE__ */ new Map([["svg", Namespace.SVG], ["math", Namespace.Math]]);
    if (namespacePrefixKey === null) {
      return Namespace.HTML;
    }
    return NAMESPACES.get(namespacePrefixKey) ?? Namespace.HTML;
  }
  function keyForNamespace(namespace) {
    const NAMESPACES = /* @__PURE__ */ new Map([["svg", Namespace.SVG], ["math", Namespace.Math]]);
    for (const [k, n] of NAMESPACES.entries()) {
      if (n === namespace) {
        return k;
      }
    }
    return null;
  }
  function prefixWithNamespace(strippedTag, namespace) {
    if (namespace === Namespace.HTML) {
      return strippedTag;
    }
    return `:${keyForNamespace(namespace)}:${strippedTag}`;
  }
  function literalOrArrayLiteral(value) {
    if (Array.isArray(value)) {
      return literalArr(value.map(literalOrArrayLiteral));
    }
    return literal(value);
  }
  function collectElementConsts(job) {
    const allElementAttributes = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind === OpKind.ExtractedAttribute) {
          const attributes = allElementAttributes.get(op.target) || new ElementAttributes(job.compatibility);
          allElementAttributes.set(op.target, attributes);
          attributes.add(op.bindingKind, op.name, op.expression, op.namespace, op.trustedValueFn);
          OpList.remove(op);
        }
      }
    }
    if (job instanceof ComponentCompilationJob) {
      for (const unit of job.units) {
        for (const op of unit.create) {
          if (op.kind == OpKind.Projection) {
            const attributes = allElementAttributes.get(op.xref);
            if (attributes !== void 0) {
              const attrArray = serializeAttributes(attributes);
              if (attrArray.entries.length > 0) {
                op.attributes = attrArray;
              }
            }
          } else if (isElementOrContainerOp(op)) {
            op.attributes = getConstIndex(job, allElementAttributes, op.xref);
            if (op.kind === OpKind.RepeaterCreate && op.emptyView !== null) {
              op.emptyAttributes = getConstIndex(job, allElementAttributes, op.emptyView);
            }
          }
        }
      }
    } else if (job instanceof HostBindingCompilationJob) {
      for (const [xref, attributes] of allElementAttributes.entries()) {
        if (xref !== job.root.xref) {
          throw new Error(`An attribute would be const collected into the host binding's template function, but is not associated with the root xref.`);
        }
        const attrArray = serializeAttributes(attributes);
        if (attrArray.entries.length > 0) {
          job.root.attributes = attrArray;
        }
      }
    }
  }
  function getConstIndex(job, allElementAttributes, xref) {
    const attributes = allElementAttributes.get(xref);
    if (attributes !== void 0) {
      const attrArray = serializeAttributes(attributes);
      if (attrArray.entries.length > 0) {
        return job.addConst(attrArray);
      }
    }
    return null;
  }
  var FLYWEIGHT_ARRAY = Object.freeze([]);
  var ElementAttributes = class {
    get attributes() {
      return this.byKind.get(BindingKind.Attribute) ?? FLYWEIGHT_ARRAY;
    }
    get classes() {
      return this.byKind.get(BindingKind.ClassName) ?? FLYWEIGHT_ARRAY;
    }
    get styles() {
      return this.byKind.get(BindingKind.StyleProperty) ?? FLYWEIGHT_ARRAY;
    }
    get bindings() {
      return this.propertyBindings ?? FLYWEIGHT_ARRAY;
    }
    get template() {
      return this.byKind.get(BindingKind.Template) ?? FLYWEIGHT_ARRAY;
    }
    get i18n() {
      return this.byKind.get(BindingKind.I18n) ?? FLYWEIGHT_ARRAY;
    }
    constructor(compatibility) {
      this.compatibility = compatibility;
      this.known = /* @__PURE__ */ new Map();
      this.byKind = /* @__PURE__ */ new Map();
      this.propertyBindings = null;
      this.projectAs = null;
    }
    isKnown(kind, name) {
      const nameToValue = this.known.get(kind) ?? /* @__PURE__ */ new Set();
      this.known.set(kind, nameToValue);
      if (nameToValue.has(name)) {
        return true;
      }
      nameToValue.add(name);
      return false;
    }
    add(kind, name, value, namespace, trustedValueFn) {
      const allowDuplicates = this.compatibility === CompatibilityMode.TemplateDefinitionBuilder && (kind === BindingKind.Attribute || kind === BindingKind.ClassName || kind === BindingKind.StyleProperty);
      if (!allowDuplicates && this.isKnown(kind, name)) {
        return;
      }
      if (name === "ngProjectAs") {
        if (value === null || !(value instanceof LiteralExpr) || value.value == null || typeof value.value?.toString() !== "string") {
          throw Error("ngProjectAs must have a string literal value");
        }
        this.projectAs = value.value.toString();
      }
      const array = this.arrayFor(kind);
      array.push(...getAttributeNameLiterals$1(namespace, name));
      if (kind === BindingKind.Attribute || kind === BindingKind.StyleProperty) {
        if (value === null) {
          throw Error("Attribute, i18n attribute, & style element attributes must have a value");
        }
        if (trustedValueFn !== null) {
          if (!isStringLiteral(value)) {
            throw Error("AssertionError: extracted attribute value should be string literal");
          }
          array.push(taggedTemplate(trustedValueFn, new TemplateLiteral([new TemplateLiteralElement(value.value)], []), void 0, value.sourceSpan));
        } else {
          array.push(value);
        }
      }
    }
    arrayFor(kind) {
      if (kind === BindingKind.Property || kind === BindingKind.TwoWayProperty) {
        this.propertyBindings ??= [];
        return this.propertyBindings;
      } else {
        if (!this.byKind.has(kind)) {
          this.byKind.set(kind, []);
        }
        return this.byKind.get(kind);
      }
    }
  };
  function getAttributeNameLiterals$1(namespace, name) {
    const nameLiteral = literal(name);
    if (namespace) {
      return [literal(
        0
        /* core.AttributeMarker.NamespaceURI */
      ), literal(namespace), nameLiteral];
    }
    return [nameLiteral];
  }
  function serializeAttributes({ attributes, bindings, classes, i18n: i18n2, projectAs, styles: styles2, template: template2 }) {
    const attrArray = [...attributes];
    if (projectAs !== null) {
      const parsedR3Selector = parseSelectorToR3Selector(projectAs)[0];
      attrArray.push(literal(
        5
        /* core.AttributeMarker.ProjectAs */
      ), literalOrArrayLiteral(parsedR3Selector));
    }
    if (classes.length > 0) {
      attrArray.push(literal(
        1
        /* core.AttributeMarker.Classes */
      ), ...classes);
    }
    if (styles2.length > 0) {
      attrArray.push(literal(
        2
        /* core.AttributeMarker.Styles */
      ), ...styles2);
    }
    if (bindings.length > 0) {
      attrArray.push(literal(
        3
        /* core.AttributeMarker.Bindings */
      ), ...bindings);
    }
    if (template2.length > 0) {
      attrArray.push(literal(
        4
        /* core.AttributeMarker.Template */
      ), ...template2);
    }
    if (i18n2.length > 0) {
      attrArray.push(literal(
        6
        /* core.AttributeMarker.I18n */
      ), ...i18n2);
    }
    return literalArr(attrArray);
  }
  function convertI18nBindings(job) {
    const i18nAttributesByElem = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind === OpKind.I18nAttributes) {
          i18nAttributesByElem.set(op.target, op);
        }
      }
      for (const op of unit.update) {
        switch (op.kind) {
          case OpKind.Property:
          case OpKind.Attribute:
            if (op.i18nContext === null) {
              continue;
            }
            if (!(op.expression instanceof Interpolation)) {
              continue;
            }
            const i18nAttributesForElem = i18nAttributesByElem.get(op.target);
            if (i18nAttributesForElem === void 0) {
              throw new Error("AssertionError: An i18n attribute binding instruction requires the owning element to have an I18nAttributes create instruction");
            }
            if (i18nAttributesForElem.target !== op.target) {
              throw new Error("AssertionError: Expected i18nAttributes target element to match binding target element");
            }
            const ops = [];
            for (let i = 0; i < op.expression.expressions.length; i++) {
              const expr = op.expression.expressions[i];
              if (op.expression.i18nPlaceholders.length !== op.expression.expressions.length) {
                throw new Error(`AssertionError: An i18n attribute binding instruction requires the same number of expressions and placeholders, but found ${op.expression.i18nPlaceholders.length} placeholders and ${op.expression.expressions.length} expressions`);
              }
              ops.push(createI18nExpressionOp(op.i18nContext, i18nAttributesForElem.target, i18nAttributesForElem.xref, i18nAttributesForElem.handle, expr, null, op.expression.i18nPlaceholders[i], I18nParamResolutionTime.Creation, I18nExpressionFor.I18nAttribute, op.name, op.sourceSpan));
            }
            OpList.replaceWithMany(op, ops);
            break;
        }
      }
    }
  }
  function createDeferDepsFns(job) {
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind === OpKind.Defer) {
          if (op.metadata.deps.length === 0) {
            continue;
          }
          if (op.resolverFn !== null) {
            continue;
          }
          const dependencies = [];
          for (const dep of op.metadata.deps) {
            if (dep.isDeferrable) {
              const innerFn = arrowFn(
                // Default imports are always accessed through the `default` property.
                [new FnParam("m", DYNAMIC_TYPE)],
                variable("m").prop(dep.isDefaultImport ? "default" : dep.symbolName)
              );
              const importExpr2 = new DynamicImportExpr(dep.importPath).prop("then").callFn([innerFn]);
              dependencies.push(importExpr2);
            } else {
              dependencies.push(dep.type);
            }
          }
          const depsFnExpr = arrowFn([], literalArr(dependencies));
          if (op.handle.slot === null) {
            throw new Error("AssertionError: slot must be assigned bfore extracting defer deps functions");
          }
          const fullPathName = unit.fnName?.replace(`_Template`, ``);
          op.resolverFn = job.pool.getSharedFunctionReference(
            depsFnExpr,
            `${fullPathName}_Defer_${op.handle.slot}_DepsFn`,
            /* Don't use unique names for TDB compatibility */
            false
          );
        }
      }
    }
  }
  function createI18nContexts(job) {
    const attrContextByMessage = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      for (const op of unit.ops()) {
        switch (op.kind) {
          case OpKind.Binding:
          case OpKind.Property:
          case OpKind.Attribute:
          case OpKind.ExtractedAttribute:
            if (op.i18nMessage === null) {
              continue;
            }
            if (!attrContextByMessage.has(op.i18nMessage)) {
              const i18nContext = createI18nContextOp(I18nContextKind.Attr, job.allocateXrefId(), null, op.i18nMessage, null);
              unit.create.push(i18nContext);
              attrContextByMessage.set(op.i18nMessage, i18nContext.xref);
            }
            op.i18nContext = attrContextByMessage.get(op.i18nMessage);
            break;
        }
      }
    }
    const blockContextByI18nBlock = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      for (const op of unit.create) {
        switch (op.kind) {
          case OpKind.I18nStart:
            if (op.xref === op.root) {
              const contextOp = createI18nContextOp(I18nContextKind.RootI18n, job.allocateXrefId(), op.xref, op.message, null);
              unit.create.push(contextOp);
              op.context = contextOp.xref;
              blockContextByI18nBlock.set(op.xref, contextOp);
            }
            break;
        }
      }
    }
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind === OpKind.I18nStart && op.xref !== op.root) {
          const rootContext = blockContextByI18nBlock.get(op.root);
          if (rootContext === void 0) {
            throw Error("AssertionError: Root i18n block i18n context should have been created.");
          }
          op.context = rootContext.xref;
          blockContextByI18nBlock.set(op.xref, rootContext);
        }
      }
    }
    let currentI18nOp = null;
    for (const unit of job.units) {
      for (const op of unit.create) {
        switch (op.kind) {
          case OpKind.I18nStart:
            currentI18nOp = op;
            break;
          case OpKind.I18nEnd:
            currentI18nOp = null;
            break;
          case OpKind.IcuStart:
            if (currentI18nOp === null) {
              throw Error("AssertionError: Unexpected ICU outside of an i18n block.");
            }
            if (op.message.id !== currentI18nOp.message.id) {
              const contextOp = createI18nContextOp(I18nContextKind.Icu, job.allocateXrefId(), currentI18nOp.root, op.message, null);
              unit.create.push(contextOp);
              op.context = contextOp.xref;
            } else {
              op.context = currentI18nOp.context;
              blockContextByI18nBlock.get(currentI18nOp.xref).contextKind = I18nContextKind.Icu;
            }
            break;
        }
      }
    }
  }
  function deduplicateTextBindings(job) {
    const seen = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      for (const op of unit.update.reversed()) {
        if (op.kind === OpKind.Binding && op.isTextAttribute) {
          const seenForElement = seen.get(op.target) || /* @__PURE__ */ new Set();
          if (seenForElement.has(op.name)) {
            if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {
              if (op.name === "style" || op.name === "class") {
                OpList.remove(op);
              }
            } else {
            }
          }
          seenForElement.add(op.name);
          seen.set(op.target, seenForElement);
        }
      }
    }
  }
  function configureDeferInstructions(job) {
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind !== OpKind.Defer) {
          continue;
        }
        if (op.placeholderMinimumTime !== null) {
          op.placeholderConfig = new ConstCollectedExpr(literalOrArrayLiteral([op.placeholderMinimumTime]));
        }
        if (op.loadingMinimumTime !== null || op.loadingAfterTime !== null) {
          op.loadingConfig = new ConstCollectedExpr(literalOrArrayLiteral([op.loadingMinimumTime, op.loadingAfterTime]));
        }
      }
    }
  }
  function resolveDeferTargetNames(job) {
    const scopes = /* @__PURE__ */ new Map();
    function getScopeForView2(view) {
      if (scopes.has(view.xref)) {
        return scopes.get(view.xref);
      }
      const scope = new Scope$1();
      for (const op of view.create) {
        if (!isElementOrContainerOp(op) || op.localRefs === null) {
          continue;
        }
        if (!Array.isArray(op.localRefs)) {
          throw new Error("LocalRefs were already processed, but were needed to resolve defer targets.");
        }
        for (const ref of op.localRefs) {
          if (ref.target !== "") {
            continue;
          }
          scope.targets.set(ref.name, { xref: op.xref, slot: op.handle });
        }
      }
      scopes.set(view.xref, scope);
      return scope;
    }
    function resolveTrigger(deferOwnerView, op, placeholderView) {
      switch (op.trigger.kind) {
        case DeferTriggerKind.Idle:
        case DeferTriggerKind.Immediate:
        case DeferTriggerKind.Timer:
          return;
        case DeferTriggerKind.Hover:
        case DeferTriggerKind.Interaction:
        case DeferTriggerKind.Viewport:
          if (op.trigger.targetName === null) {
            if (placeholderView === null) {
              throw new Error("defer on trigger with no target name must have a placeholder block");
            }
            const placeholder = job.views.get(placeholderView);
            if (placeholder == void 0) {
              throw new Error("AssertionError: could not find placeholder view for defer on trigger");
            }
            for (const placeholderOp of placeholder.create) {
              if (hasConsumesSlotTrait(placeholderOp) && (isElementOrContainerOp(placeholderOp) || placeholderOp.kind === OpKind.Projection)) {
                op.trigger.targetXref = placeholderOp.xref;
                op.trigger.targetView = placeholderView;
                op.trigger.targetSlotViewSteps = -1;
                op.trigger.targetSlot = placeholderOp.handle;
                return;
              }
            }
            return;
          }
          let view = placeholderView !== null ? job.views.get(placeholderView) : deferOwnerView;
          let step = placeholderView !== null ? -1 : 0;
          while (view !== null) {
            const scope = getScopeForView2(view);
            if (scope.targets.has(op.trigger.targetName)) {
              const { xref, slot } = scope.targets.get(op.trigger.targetName);
              op.trigger.targetXref = xref;
              op.trigger.targetView = view.xref;
              op.trigger.targetSlotViewSteps = step;
              op.trigger.targetSlot = slot;
              return;
            }
            view = view.parent !== null ? job.views.get(view.parent) : null;
            step++;
          }
          break;
        default:
          throw new Error(`Trigger kind ${op.trigger.kind} not handled`);
      }
    }
    for (const unit of job.units) {
      const defers = /* @__PURE__ */ new Map();
      for (const op of unit.create) {
        switch (op.kind) {
          case OpKind.Defer:
            defers.set(op.xref, op);
            break;
          case OpKind.DeferOn:
            const deferOp = defers.get(op.defer);
            resolveTrigger(unit, op, deferOp.placeholderView);
            break;
        }
      }
    }
  }
  var Scope$1 = class {
    constructor() {
      this.targets = /* @__PURE__ */ new Map();
    }
  };
  var REPLACEMENTS = /* @__PURE__ */ new Map([
    [OpKind.ElementEnd, [OpKind.ElementStart, OpKind.Element]],
    [OpKind.ContainerEnd, [OpKind.ContainerStart, OpKind.Container]],
    [OpKind.I18nEnd, [OpKind.I18nStart, OpKind.I18n]]
  ]);
  var IGNORED_OP_KINDS = /* @__PURE__ */ new Set([OpKind.Pipe]);
  function collapseEmptyInstructions(job) {
    for (const unit of job.units) {
      for (const op of unit.create) {
        const opReplacements = REPLACEMENTS.get(op.kind);
        if (opReplacements === void 0) {
          continue;
        }
        const [startKind, mergedKind] = opReplacements;
        let prevOp = op.prev;
        while (prevOp !== null && IGNORED_OP_KINDS.has(prevOp.kind)) {
          prevOp = prevOp.prev;
        }
        if (prevOp !== null && prevOp.kind === startKind) {
          prevOp.kind = mergedKind;
          OpList.remove(op);
        }
      }
    }
  }
  function expandSafeReads(job) {
    for (const unit of job.units) {
      for (const op of unit.ops()) {
        transformExpressionsInOp(op, (e2) => safeTransform(e2, { job }), VisitorContextFlag.None);
        transformExpressionsInOp(op, ternaryTransform, VisitorContextFlag.None);
      }
    }
  }
  var requiresTemporary = [
    InvokeFunctionExpr,
    LiteralArrayExpr,
    LiteralMapExpr,
    SafeInvokeFunctionExpr,
    PipeBindingExpr
  ].map((e2) => e2.constructor.name);
  function needsTemporaryInSafeAccess(e2) {
    if (e2 instanceof UnaryOperatorExpr) {
      return needsTemporaryInSafeAccess(e2.expr);
    } else if (e2 instanceof BinaryOperatorExpr) {
      return needsTemporaryInSafeAccess(e2.lhs) || needsTemporaryInSafeAccess(e2.rhs);
    } else if (e2 instanceof ConditionalExpr) {
      if (e2.falseCase && needsTemporaryInSafeAccess(e2.falseCase))
        return true;
      return needsTemporaryInSafeAccess(e2.condition) || needsTemporaryInSafeAccess(e2.trueCase);
    } else if (e2 instanceof NotExpr) {
      return needsTemporaryInSafeAccess(e2.condition);
    } else if (e2 instanceof AssignTemporaryExpr) {
      return needsTemporaryInSafeAccess(e2.expr);
    } else if (e2 instanceof ReadPropExpr) {
      return needsTemporaryInSafeAccess(e2.receiver);
    } else if (e2 instanceof ReadKeyExpr) {
      return needsTemporaryInSafeAccess(e2.receiver) || needsTemporaryInSafeAccess(e2.index);
    }
    return e2 instanceof InvokeFunctionExpr || e2 instanceof LiteralArrayExpr || e2 instanceof LiteralMapExpr || e2 instanceof SafeInvokeFunctionExpr || e2 instanceof PipeBindingExpr;
  }
  function temporariesIn(e2) {
    const temporaries = /* @__PURE__ */ new Set();
    transformExpressionsInExpression(e2, (e3) => {
      if (e3 instanceof AssignTemporaryExpr) {
        temporaries.add(e3.xref);
      }
      return e3;
    }, VisitorContextFlag.None);
    return temporaries;
  }
  function eliminateTemporaryAssignments(e2, tmps, ctx) {
    transformExpressionsInExpression(e2, (e3) => {
      if (e3 instanceof AssignTemporaryExpr && tmps.has(e3.xref)) {
        const read = new ReadTemporaryExpr(e3.xref);
        return ctx.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder ? new AssignTemporaryExpr(read, read.xref) : read;
      }
      return e3;
    }, VisitorContextFlag.None);
    return e2;
  }
  function safeTernaryWithTemporary(guard, body, ctx) {
    let result;
    if (needsTemporaryInSafeAccess(guard)) {
      const xref = ctx.job.allocateXrefId();
      result = [new AssignTemporaryExpr(guard, xref), new ReadTemporaryExpr(xref)];
    } else {
      result = [guard, guard.clone()];
      eliminateTemporaryAssignments(result[1], temporariesIn(result[0]), ctx);
    }
    return new SafeTernaryExpr(result[0], body(result[1]));
  }
  function isSafeAccessExpression(e2) {
    return e2 instanceof SafePropertyReadExpr || e2 instanceof SafeKeyedReadExpr || e2 instanceof SafeInvokeFunctionExpr;
  }
  function isUnsafeAccessExpression(e2) {
    return e2 instanceof ReadPropExpr || e2 instanceof ReadKeyExpr || e2 instanceof InvokeFunctionExpr;
  }
  function isAccessExpression(e2) {
    return isSafeAccessExpression(e2) || isUnsafeAccessExpression(e2);
  }
  function deepestSafeTernary(e2) {
    if (isAccessExpression(e2) && e2.receiver instanceof SafeTernaryExpr) {
      let st = e2.receiver;
      while (st.expr instanceof SafeTernaryExpr) {
        st = st.expr;
      }
      return st;
    }
    return null;
  }
  function safeTransform(e2, ctx) {
    if (!isAccessExpression(e2)) {
      return e2;
    }
    const dst = deepestSafeTernary(e2);
    if (dst) {
      if (e2 instanceof InvokeFunctionExpr) {
        dst.expr = dst.expr.callFn(e2.args);
        return e2.receiver;
      }
      if (e2 instanceof ReadPropExpr) {
        dst.expr = dst.expr.prop(e2.name);
        return e2.receiver;
      }
      if (e2 instanceof ReadKeyExpr) {
        dst.expr = dst.expr.key(e2.index);
        return e2.receiver;
      }
      if (e2 instanceof SafeInvokeFunctionExpr) {
        dst.expr = safeTernaryWithTemporary(dst.expr, (r) => r.callFn(e2.args), ctx);
        return e2.receiver;
      }
      if (e2 instanceof SafePropertyReadExpr) {
        dst.expr = safeTernaryWithTemporary(dst.expr, (r) => r.prop(e2.name), ctx);
        return e2.receiver;
      }
      if (e2 instanceof SafeKeyedReadExpr) {
        dst.expr = safeTernaryWithTemporary(dst.expr, (r) => r.key(e2.index), ctx);
        return e2.receiver;
      }
    } else {
      if (e2 instanceof SafeInvokeFunctionExpr) {
        return safeTernaryWithTemporary(e2.receiver, (r) => r.callFn(e2.args), ctx);
      }
      if (e2 instanceof SafePropertyReadExpr) {
        return safeTernaryWithTemporary(e2.receiver, (r) => r.prop(e2.name), ctx);
      }
      if (e2 instanceof SafeKeyedReadExpr) {
        return safeTernaryWithTemporary(e2.receiver, (r) => r.key(e2.index), ctx);
      }
    }
    return e2;
  }
  function ternaryTransform(e2) {
    if (!(e2 instanceof SafeTernaryExpr)) {
      return e2;
    }
    return new ConditionalExpr(new BinaryOperatorExpr(BinaryOperator.Equals, e2.guard, NULL_EXPR), NULL_EXPR, e2.expr);
  }
  var ESCAPE$1 = "\uFFFD";
  var ELEMENT_MARKER2 = "#";
  var TEMPLATE_MARKER = "*";
  var TAG_CLOSE_MARKER = "/";
  var CONTEXT_MARKER = ":";
  var LIST_START_MARKER = "[";
  var LIST_END_MARKER = "]";
  var LIST_DELIMITER = "|";
  function extractI18nMessages(job) {
    const i18nMessagesByContext = /* @__PURE__ */ new Map();
    const i18nBlocks = /* @__PURE__ */ new Map();
    const i18nContexts = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      for (const op of unit.create) {
        switch (op.kind) {
          case OpKind.I18nContext:
            const i18nMessageOp = createI18nMessage(job, op);
            unit.create.push(i18nMessageOp);
            i18nMessagesByContext.set(op.xref, i18nMessageOp);
            i18nContexts.set(op.xref, op);
            break;
          case OpKind.I18nStart:
            i18nBlocks.set(op.xref, op);
            break;
        }
      }
    }
    let currentIcu = null;
    for (const unit of job.units) {
      for (const op of unit.create) {
        switch (op.kind) {
          case OpKind.IcuStart:
            currentIcu = op;
            OpList.remove(op);
            const icuContext = i18nContexts.get(op.context);
            if (icuContext.contextKind !== I18nContextKind.Icu) {
              continue;
            }
            const i18nBlock = i18nBlocks.get(icuContext.i18nBlock);
            if (i18nBlock.context === icuContext.xref) {
              continue;
            }
            const rootI18nBlock = i18nBlocks.get(i18nBlock.root);
            const rootMessage = i18nMessagesByContext.get(rootI18nBlock.context);
            if (rootMessage === void 0) {
              throw Error("AssertionError: ICU sub-message should belong to a root message.");
            }
            const subMessage = i18nMessagesByContext.get(icuContext.xref);
            subMessage.messagePlaceholder = op.messagePlaceholder;
            rootMessage.subMessages.push(subMessage.xref);
            break;
          case OpKind.IcuEnd:
            currentIcu = null;
            OpList.remove(op);
            break;
          case OpKind.IcuPlaceholder:
            if (currentIcu === null || currentIcu.context == null) {
              throw Error("AssertionError: Unexpected ICU placeholder outside of i18n context");
            }
            const msg = i18nMessagesByContext.get(currentIcu.context);
            msg.postprocessingParams.set(op.name, literal(formatIcuPlaceholder(op)));
            OpList.remove(op);
            break;
        }
      }
    }
  }
  function createI18nMessage(job, context2, messagePlaceholder) {
    let formattedParams = formatParams(context2.params);
    const formattedPostprocessingParams = formatParams(context2.postprocessingParams);
    let needsPostprocessing = [...context2.params.values()].some((v) => v.length > 1);
    return createI18nMessageOp(job.allocateXrefId(), context2.xref, context2.i18nBlock, context2.message, messagePlaceholder ?? null, formattedParams, formattedPostprocessingParams, needsPostprocessing);
  }
  function formatIcuPlaceholder(op) {
    if (op.strings.length !== op.expressionPlaceholders.length + 1) {
      throw Error(`AssertionError: Invalid ICU placeholder with ${op.strings.length} strings and ${op.expressionPlaceholders.length} expressions`);
    }
    const values = op.expressionPlaceholders.map(formatValue2);
    return op.strings.flatMap((str, i) => [str, values[i] || ""]).join("");
  }
  function formatParams(params) {
    const formattedParams = /* @__PURE__ */ new Map();
    for (const [placeholder, placeholderValues] of params) {
      const serializedValues = formatParamValues(placeholderValues);
      if (serializedValues !== null) {
        formattedParams.set(placeholder, literal(serializedValues));
      }
    }
    return formattedParams;
  }
  function formatParamValues(values) {
    if (values.length === 0) {
      return null;
    }
    const serializedValues = values.map((value) => formatValue2(value));
    return serializedValues.length === 1 ? serializedValues[0] : `${LIST_START_MARKER}${serializedValues.join(LIST_DELIMITER)}${LIST_END_MARKER}`;
  }
  function formatValue2(value) {
    if (value.flags & I18nParamValueFlags.ElementTag && value.flags & I18nParamValueFlags.TemplateTag) {
      if (typeof value.value !== "object") {
        throw Error("AssertionError: Expected i18n param value to have an element and template slot");
      }
      const elementValue = formatValue2({
        ...value,
        value: value.value.element,
        flags: value.flags & ~I18nParamValueFlags.TemplateTag
      });
      const templateValue = formatValue2({
        ...value,
        value: value.value.template,
        flags: value.flags & ~I18nParamValueFlags.ElementTag
      });
      if (value.flags & I18nParamValueFlags.OpenTag && value.flags & I18nParamValueFlags.CloseTag) {
        return `${templateValue}${elementValue}${templateValue}`;
      }
      return value.flags & I18nParamValueFlags.CloseTag ? `${elementValue}${templateValue}` : `${templateValue}${elementValue}`;
    }
    if (value.flags & I18nParamValueFlags.OpenTag && value.flags & I18nParamValueFlags.CloseTag) {
      return `${formatValue2({ ...value, flags: value.flags & ~I18nParamValueFlags.CloseTag })}${formatValue2({ ...value, flags: value.flags & ~I18nParamValueFlags.OpenTag })}`;
    }
    if (value.flags === I18nParamValueFlags.None) {
      return `${value.value}`;
    }
    let tagMarker = "";
    let closeMarker = "";
    if (value.flags & I18nParamValueFlags.ElementTag) {
      tagMarker = ELEMENT_MARKER2;
    } else if (value.flags & I18nParamValueFlags.TemplateTag) {
      tagMarker = TEMPLATE_MARKER;
    }
    if (tagMarker !== "") {
      closeMarker = value.flags & I18nParamValueFlags.CloseTag ? TAG_CLOSE_MARKER : "";
    }
    const context2 = value.subTemplateIndex === null ? "" : `${CONTEXT_MARKER}${value.subTemplateIndex}`;
    return `${ESCAPE$1}${closeMarker}${tagMarker}${value.value}${context2}${ESCAPE$1}`;
  }
  function generateAdvance(job) {
    for (const unit of job.units) {
      const slotMap = /* @__PURE__ */ new Map();
      for (const op of unit.create) {
        if (!hasConsumesSlotTrait(op)) {
          continue;
        } else if (op.handle.slot === null) {
          throw new Error(`AssertionError: expected slots to have been allocated before generating advance() calls`);
        }
        slotMap.set(op.xref, op.handle.slot);
      }
      let slotContext = 0;
      for (const op of unit.update) {
        if (!hasDependsOnSlotContextTrait(op)) {
          continue;
        } else if (!slotMap.has(op.target)) {
          throw new Error(`AssertionError: reference to unknown slot for target ${op.target}`);
        }
        const slot = slotMap.get(op.target);
        if (slotContext !== slot) {
          const delta = slot - slotContext;
          if (delta < 0) {
            throw new Error(`AssertionError: slot counter should never need to move backwards`);
          }
          OpList.insertBefore(createAdvanceOp(delta, op.sourceSpan), op);
          slotContext = slot;
        }
      }
    }
  }
  function generateProjectionDefs(job) {
    const share = job.compatibility === CompatibilityMode.TemplateDefinitionBuilder;
    const selectors = [];
    let projectionSlotIndex = 0;
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind === OpKind.Projection) {
          selectors.push(op.selector);
          op.projectionSlotIndex = projectionSlotIndex++;
        }
      }
    }
    if (selectors.length > 0) {
      let defExpr = null;
      if (selectors.length > 1 || selectors[0] !== "*") {
        const def = selectors.map((s) => s === "*" ? s : parseSelectorToR3Selector(s));
        defExpr = job.pool.getConstLiteral(literalOrArrayLiteral(def), share);
      }
      job.contentSelectors = job.pool.getConstLiteral(literalOrArrayLiteral(selectors), share);
      job.root.create.prepend([createProjectionDefOp(defExpr)]);
    }
  }
  function generateVariables(job) {
    recursivelyProcessView(
      job.root,
      /* there is no parent scope for the root view */
      null
    );
  }
  function recursivelyProcessView(view, parentScope) {
    const scope = getScopeForView(view, parentScope);
    for (const op of view.create) {
      switch (op.kind) {
        case OpKind.Template:
          recursivelyProcessView(view.job.views.get(op.xref), scope);
          break;
        case OpKind.RepeaterCreate:
          recursivelyProcessView(view.job.views.get(op.xref), scope);
          if (op.emptyView) {
            recursivelyProcessView(view.job.views.get(op.emptyView), scope);
          }
          break;
        case OpKind.Listener:
        case OpKind.TwoWayListener:
          op.handlerOps.prepend(generateVariablesInScopeForView(view, scope));
          break;
      }
    }
    const preambleOps = generateVariablesInScopeForView(view, scope);
    view.update.prepend(preambleOps);
  }
  function getScopeForView(view, parent) {
    const scope = {
      view: view.xref,
      viewContextVariable: {
        kind: SemanticVariableKind.Context,
        name: null,
        view: view.xref
      },
      contextVariables: /* @__PURE__ */ new Map(),
      aliases: view.aliases,
      references: [],
      parent
    };
    for (const identifier of view.contextVariables.keys()) {
      scope.contextVariables.set(identifier, {
        kind: SemanticVariableKind.Identifier,
        name: null,
        identifier
      });
    }
    for (const op of view.create) {
      switch (op.kind) {
        case OpKind.ElementStart:
        case OpKind.Template:
          if (!Array.isArray(op.localRefs)) {
            throw new Error(`AssertionError: expected localRefs to be an array`);
          }
          for (let offset = 0; offset < op.localRefs.length; offset++) {
            scope.references.push({
              name: op.localRefs[offset].name,
              targetId: op.xref,
              targetSlot: op.handle,
              offset,
              variable: {
                kind: SemanticVariableKind.Identifier,
                name: null,
                identifier: op.localRefs[offset].name
              }
            });
          }
          break;
      }
    }
    return scope;
  }
  function generateVariablesInScopeForView(view, scope) {
    const newOps = [];
    if (scope.view !== view.xref) {
      newOps.push(createVariableOp(view.job.allocateXrefId(), scope.viewContextVariable, new NextContextExpr(), VariableFlags.None));
    }
    const scopeView = view.job.views.get(scope.view);
    for (const [name, value] of scopeView.contextVariables) {
      const context2 = new ContextExpr(scope.view);
      const variable2 = value === CTX_REF ? context2 : new ReadPropExpr(context2, value);
      newOps.push(createVariableOp(view.job.allocateXrefId(), scope.contextVariables.get(name), variable2, VariableFlags.None));
    }
    for (const alias of scopeView.aliases) {
      newOps.push(createVariableOp(view.job.allocateXrefId(), alias, alias.expression.clone(), VariableFlags.AlwaysInline));
    }
    for (const ref of scope.references) {
      newOps.push(createVariableOp(view.job.allocateXrefId(), ref.variable, new ReferenceExpr(ref.targetId, ref.targetSlot, ref.offset), VariableFlags.None));
    }
    if (scope.parent !== null) {
      newOps.push(...generateVariablesInScopeForView(view, scope.parent));
    }
    return newOps;
  }
  function collectConstExpressions(job) {
    for (const unit of job.units) {
      for (const op of unit.ops()) {
        transformExpressionsInOp(op, (expr) => {
          if (!(expr instanceof ConstCollectedExpr)) {
            return expr;
          }
          return literal(job.addConst(expr.expr));
        }, VisitorContextFlag.None);
      }
    }
  }
  var STYLE_DOT = "style.";
  var CLASS_DOT = "class.";
  var STYLE_BANG = "style!";
  var CLASS_BANG = "class!";
  var BANG_IMPORTANT = "!important";
  function parseHostStyleProperties(job) {
    for (const op of job.root.update) {
      if (!(op.kind === OpKind.Binding && op.bindingKind === BindingKind.Property)) {
        continue;
      }
      if (op.name.endsWith(BANG_IMPORTANT)) {
        op.name = op.name.substring(0, op.name.length - BANG_IMPORTANT.length);
      }
      if (op.name.startsWith(STYLE_DOT)) {
        op.bindingKind = BindingKind.StyleProperty;
        op.name = op.name.substring(STYLE_DOT.length);
        if (!isCssCustomProperty$1(op.name)) {
          op.name = hyphenate$1(op.name);
        }
        const { property: property2, suffix } = parseProperty$1(op.name);
        op.name = property2;
        op.unit = suffix;
      } else if (op.name.startsWith(STYLE_BANG)) {
        op.bindingKind = BindingKind.StyleProperty;
        op.name = "style";
      } else if (op.name.startsWith(CLASS_DOT)) {
        op.bindingKind = BindingKind.ClassName;
        op.name = parseProperty$1(op.name.substring(CLASS_DOT.length)).property;
      } else if (op.name.startsWith(CLASS_BANG)) {
        op.bindingKind = BindingKind.ClassName;
        op.name = parseProperty$1(op.name.substring(CLASS_BANG.length)).property;
      }
    }
  }
  function isCssCustomProperty$1(name) {
    return name.startsWith("--");
  }
  function hyphenate$1(value) {
    return value.replace(/[a-z][A-Z]/g, (v) => {
      return v.charAt(0) + "-" + v.charAt(1);
    }).toLowerCase();
  }
  function parseProperty$1(name) {
    const overrideIndex = name.indexOf("!important");
    if (overrideIndex !== -1) {
      name = overrideIndex > 0 ? name.substring(0, overrideIndex) : "";
    }
    let suffix = null;
    let property2 = name;
    const unitIndex = name.lastIndexOf(".");
    if (unitIndex > 0) {
      suffix = name.slice(unitIndex + 1);
      property2 = name.substring(0, unitIndex);
    }
    return { property: property2, suffix };
  }
  function mapLiteral(obj, quoted = false) {
    return literalMap(Object.keys(obj).map((key) => ({
      key,
      quoted,
      value: obj[key]
    })));
  }
  var IcuSerializerVisitor = class {
    visitText(text2) {
      return text2.value;
    }
    visitContainer(container) {
      return container.children.map((child) => child.visit(this)).join("");
    }
    visitIcu(icu) {
      const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);
      const result = `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(" ")}}`;
      return result;
    }
    visitTagPlaceholder(ph) {
      return ph.isVoid ? this.formatPh(ph.startName) : `${this.formatPh(ph.startName)}${ph.children.map((child) => child.visit(this)).join("")}${this.formatPh(ph.closeName)}`;
    }
    visitPlaceholder(ph) {
      return this.formatPh(ph.name);
    }
    visitBlockPlaceholder(ph) {
      return `${this.formatPh(ph.startName)}${ph.children.map((child) => child.visit(this)).join("")}${this.formatPh(ph.closeName)}`;
    }
    visitIcuPlaceholder(ph, context2) {
      return this.formatPh(ph.name);
    }
    formatPh(value) {
      return `{${formatI18nPlaceholderName(
        value,
        /* useCamelCase */
        false
      )}}`;
    }
  };
  var serializer = new IcuSerializerVisitor();
  function serializeIcuNode(icu) {
    return icu.visit(serializer);
  }
  var TokenType;
  (function(TokenType2) {
    TokenType2[TokenType2["Character"] = 0] = "Character";
    TokenType2[TokenType2["Identifier"] = 1] = "Identifier";
    TokenType2[TokenType2["PrivateIdentifier"] = 2] = "PrivateIdentifier";
    TokenType2[TokenType2["Keyword"] = 3] = "Keyword";
    TokenType2[TokenType2["String"] = 4] = "String";
    TokenType2[TokenType2["Operator"] = 5] = "Operator";
    TokenType2[TokenType2["Number"] = 6] = "Number";
    TokenType2[TokenType2["Error"] = 7] = "Error";
  })(TokenType || (TokenType = {}));
  var KEYWORDS = ["var", "let", "as", "null", "undefined", "true", "false", "if", "else", "this"];
  var Lexer = class {
    tokenize(text2) {
      const scanner = new _Scanner(text2);
      const tokens = [];
      let token = scanner.scanToken();
      while (token != null) {
        tokens.push(token);
        token = scanner.scanToken();
      }
      return tokens;
    }
  };
  var Token = class {
    constructor(index, end, type, numValue, strValue) {
      this.index = index;
      this.end = end;
      this.type = type;
      this.numValue = numValue;
      this.strValue = strValue;
    }
    isCharacter(code) {
      return this.type == TokenType.Character && this.numValue == code;
    }
    isNumber() {
      return this.type == TokenType.Number;
    }
    isString() {
      return this.type == TokenType.String;
    }
    isOperator(operator) {
      return this.type == TokenType.Operator && this.strValue == operator;
    }
    isIdentifier() {
      return this.type == TokenType.Identifier;
    }
    isPrivateIdentifier() {
      return this.type == TokenType.PrivateIdentifier;
    }
    isKeyword() {
      return this.type == TokenType.Keyword;
    }
    isKeywordLet() {
      return this.type == TokenType.Keyword && this.strValue == "let";
    }
    isKeywordAs() {
      return this.type == TokenType.Keyword && this.strValue == "as";
    }
    isKeywordNull() {
      return this.type == TokenType.Keyword && this.strValue == "null";
    }
    isKeywordUndefined() {
      return this.type == TokenType.Keyword && this.strValue == "undefined";
    }
    isKeywordTrue() {
      return this.type == TokenType.Keyword && this.strValue == "true";
    }
    isKeywordFalse() {
      return this.type == TokenType.Keyword && this.strValue == "false";
    }
    isKeywordThis() {
      return this.type == TokenType.Keyword && this.strValue == "this";
    }
    isError() {
      return this.type == TokenType.Error;
    }
    toNumber() {
      return this.type == TokenType.Number ? this.numValue : -1;
    }
    toString() {
      switch (this.type) {
        case TokenType.Character:
        case TokenType.Identifier:
        case TokenType.Keyword:
        case TokenType.Operator:
        case TokenType.PrivateIdentifier:
        case TokenType.String:
        case TokenType.Error:
          return this.strValue;
        case TokenType.Number:
          return this.numValue.toString();
        default:
          return null;
      }
    }
  };
  function newCharacterToken(index, end, code) {
    return new Token(index, end, TokenType.Character, code, String.fromCharCode(code));
  }
  function newIdentifierToken(index, end, text2) {
    return new Token(index, end, TokenType.Identifier, 0, text2);
  }
  function newPrivateIdentifierToken(index, end, text2) {
    return new Token(index, end, TokenType.PrivateIdentifier, 0, text2);
  }
  function newKeywordToken(index, end, text2) {
    return new Token(index, end, TokenType.Keyword, 0, text2);
  }
  function newOperatorToken(index, end, text2) {
    return new Token(index, end, TokenType.Operator, 0, text2);
  }
  function newStringToken(index, end, text2) {
    return new Token(index, end, TokenType.String, 0, text2);
  }
  function newNumberToken(index, end, n) {
    return new Token(index, end, TokenType.Number, n, "");
  }
  function newErrorToken(index, end, message) {
    return new Token(index, end, TokenType.Error, 0, message);
  }
  var EOF = new Token(-1, -1, TokenType.Character, 0, "");
  var _Scanner = class {
    constructor(input2) {
      this.input = input2;
      this.peek = 0;
      this.index = -1;
      this.length = input2.length;
      this.advance();
    }
    advance() {
      this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
    }
    scanToken() {
      const input2 = this.input, length = this.length;
      let peek = this.peek, index = this.index;
      while (peek <= $SPACE) {
        if (++index >= length) {
          peek = $EOF;
          break;
        } else {
          peek = input2.charCodeAt(index);
        }
      }
      this.peek = peek;
      this.index = index;
      if (index >= length) {
        return null;
      }
      if (isIdentifierStart(peek))
        return this.scanIdentifier();
      if (isDigit(peek))
        return this.scanNumber(index);
      const start = index;
      switch (peek) {
        case $PERIOD:
          this.advance();
          return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, this.index, $PERIOD);
        case $LPAREN:
        case $RPAREN:
        case $LBRACE:
        case $RBRACE:
        case $LBRACKET:
        case $RBRACKET:
        case $COMMA:
        case $COLON:
        case $SEMICOLON:
          return this.scanCharacter(start, peek);
        case $SQ:
        case $DQ:
          return this.scanString();
        case $HASH:
          return this.scanPrivateIdentifier();
        case $PLUS:
        case $MINUS:
        case $STAR:
        case $SLASH:
        case $PERCENT:
        case $CARET:
          return this.scanOperator(start, String.fromCharCode(peek));
        case $QUESTION:
          return this.scanQuestion(start);
        case $LT:
        case $GT:
          return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=");
        case $BANG:
        case $EQ:
          return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=", $EQ, "=");
        case $AMPERSAND:
          return this.scanComplexOperator(start, "&", $AMPERSAND, "&");
        case $BAR:
          return this.scanComplexOperator(start, "|", $BAR, "|");
        case $NBSP:
          while (isWhitespace(this.peek))
            this.advance();
          return this.scanToken();
      }
      this.advance();
      return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);
    }
    scanCharacter(start, code) {
      this.advance();
      return newCharacterToken(start, this.index, code);
    }
    scanOperator(start, str) {
      this.advance();
      return newOperatorToken(start, this.index, str);
    }
    /**
     * Tokenize a 2/3 char long operator
     *
     * @param start start index in the expression
     * @param one first symbol (always part of the operator)
     * @param twoCode code point for the second symbol
     * @param two second symbol (part of the operator when the second code point matches)
     * @param threeCode code point for the third symbol
     * @param three third symbol (part of the operator when provided and matches source expression)
     */
    scanComplexOperator(start, one, twoCode, two, threeCode, three) {
      this.advance();
      let str = one;
      if (this.peek == twoCode) {
        this.advance();
        str += two;
      }
      if (threeCode != null && this.peek == threeCode) {
        this.advance();
        str += three;
      }
      return newOperatorToken(start, this.index, str);
    }
    scanIdentifier() {
      const start = this.index;
      this.advance();
      while (isIdentifierPart(this.peek))
        this.advance();
      const str = this.input.substring(start, this.index);
      return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, this.index, str) : newIdentifierToken(start, this.index, str);
    }
    /** Scans an ECMAScript private identifier. */
    scanPrivateIdentifier() {
      const start = this.index;
      this.advance();
      if (!isIdentifierStart(this.peek)) {
        return this.error("Invalid character [#]", -1);
      }
      while (isIdentifierPart(this.peek))
        this.advance();
      const identifierName2 = this.input.substring(start, this.index);
      return newPrivateIdentifierToken(start, this.index, identifierName2);
    }
    scanNumber(start) {
      let simple = this.index === start;
      let hasSeparators = false;
      this.advance();
      while (true) {
        if (isDigit(this.peek)) {
        } else if (this.peek === $_) {
          if (!isDigit(this.input.charCodeAt(this.index - 1)) || !isDigit(this.input.charCodeAt(this.index + 1))) {
            return this.error("Invalid numeric separator", 0);
          }
          hasSeparators = true;
        } else if (this.peek === $PERIOD) {
          simple = false;
        } else if (isExponentStart(this.peek)) {
          this.advance();
          if (isExponentSign(this.peek))
            this.advance();
          if (!isDigit(this.peek))
            return this.error("Invalid exponent", -1);
          simple = false;
        } else {
          break;
        }
        this.advance();
      }
      let str = this.input.substring(start, this.index);
      if (hasSeparators) {
        str = str.replace(/_/g, "");
      }
      const value = simple ? parseIntAutoRadix(str) : parseFloat(str);
      return newNumberToken(start, this.index, value);
    }
    scanString() {
      const start = this.index;
      const quote = this.peek;
      this.advance();
      let buffer = "";
      let marker = this.index;
      const input2 = this.input;
      while (this.peek != quote) {
        if (this.peek == $BACKSLASH) {
          buffer += input2.substring(marker, this.index);
          let unescapedCode;
          this.advance();
          if (this.peek == $u) {
            const hex = input2.substring(this.index + 1, this.index + 5);
            if (/^[0-9a-f]+$/i.test(hex)) {
              unescapedCode = parseInt(hex, 16);
            } else {
              return this.error(`Invalid unicode escape [\\u${hex}]`, 0);
            }
            for (let i = 0; i < 5; i++) {
              this.advance();
            }
          } else {
            unescapedCode = unescape(this.peek);
            this.advance();
          }
          buffer += String.fromCharCode(unescapedCode);
          marker = this.index;
        } else if (this.peek == $EOF) {
          return this.error("Unterminated quote", 0);
        } else {
          this.advance();
        }
      }
      const last4 = input2.substring(marker, this.index);
      this.advance();
      return newStringToken(start, this.index, buffer + last4);
    }
    scanQuestion(start) {
      this.advance();
      let str = "?";
      if (this.peek === $QUESTION || this.peek === $PERIOD) {
        str += this.peek === $PERIOD ? "." : "?";
        this.advance();
      }
      return newOperatorToken(start, this.index, str);
    }
    error(message, offset) {
      const position = this.index + offset;
      return newErrorToken(position, this.index, `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);
    }
  };
  function isIdentifierStart(code) {
    return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;
  }
  function isIdentifierPart(code) {
    return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;
  }
  function isExponentStart(code) {
    return code == $e || code == $E;
  }
  function isExponentSign(code) {
    return code == $MINUS || code == $PLUS;
  }
  function unescape(code) {
    switch (code) {
      case $n:
        return $LF;
      case $f:
        return $FF;
      case $r:
        return $CR;
      case $t:
        return $TAB;
      case $v:
        return $VTAB;
      default:
        return code;
    }
  }
  function parseIntAutoRadix(text2) {
    const result = parseInt(text2);
    if (isNaN(result)) {
      throw new Error("Invalid integer literal when parsing " + text2);
    }
    return result;
  }
  var SplitInterpolation = class {
    constructor(strings, expressions, offsets) {
      this.strings = strings;
      this.expressions = expressions;
      this.offsets = offsets;
    }
  };
  var TemplateBindingParseResult = class {
    constructor(templateBindings, warnings, errors) {
      this.templateBindings = templateBindings;
      this.warnings = warnings;
      this.errors = errors;
    }
  };
  var Parser$1 = class {
    constructor(_lexer) {
      this._lexer = _lexer;
      this.errors = [];
    }
    parseAction(input2, location2, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
      this._checkNoInterpolation(input2, location2, interpolationConfig);
      const sourceToLex = this._stripComments(input2);
      const tokens = this._lexer.tokenize(sourceToLex);
      const ast = new _ParseAST(input2, location2, absoluteOffset, tokens, 1, this.errors, 0).parseChain();
      return new ASTWithSource(ast, input2, location2, absoluteOffset, this.errors);
    }
    parseBinding(input2, location2, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
      const ast = this._parseBindingAst(input2, location2, absoluteOffset, interpolationConfig);
      return new ASTWithSource(ast, input2, location2, absoluteOffset, this.errors);
    }
    checkSimpleExpression(ast) {
      const checker = new SimpleExpressionChecker();
      ast.visit(checker);
      return checker.errors;
    }
    // Host bindings parsed here
    parseSimpleBinding(input2, location2, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
      const ast = this._parseBindingAst(input2, location2, absoluteOffset, interpolationConfig);
      const errors = this.checkSimpleExpression(ast);
      if (errors.length > 0) {
        this._reportError(`Host binding expression cannot contain ${errors.join(" ")}`, input2, location2);
      }
      return new ASTWithSource(ast, input2, location2, absoluteOffset, this.errors);
    }
    _reportError(message, input2, errLocation, ctxLocation) {
      this.errors.push(new ParserError(message, input2, errLocation, ctxLocation));
    }
    _parseBindingAst(input2, location2, absoluteOffset, interpolationConfig) {
      this._checkNoInterpolation(input2, location2, interpolationConfig);
      const sourceToLex = this._stripComments(input2);
      const tokens = this._lexer.tokenize(sourceToLex);
      return new _ParseAST(input2, location2, absoluteOffset, tokens, 0, this.errors, 0).parseChain();
    }
    /**
     * Parse microsyntax template expression and return a list of bindings or
     * parsing errors in case the given expression is invalid.
     *
     * For example,
     * ```
     *   <div *ngFor="let item of items">
     *         ^      ^ absoluteValueOffset for `templateValue`
     *         absoluteKeyOffset for `templateKey`
     * ```
     * contains three bindings:
     * 1. ngFor -> null
     * 2. item -> NgForOfContext.$implicit
     * 3. ngForOf -> items
     *
     * This is apparent from the de-sugared template:
     * ```
     *   <ng-template ngFor let-item [ngForOf]="items">
     * ```
     *
     * @param templateKey name of directive, without the * prefix. For example: ngIf, ngFor
     * @param templateValue RHS of the microsyntax attribute
     * @param templateUrl template filename if it's external, component filename if it's inline
     * @param absoluteKeyOffset start of the `templateKey`
     * @param absoluteValueOffset start of the `templateValue`
     */
    parseTemplateBindings(templateKey, templateValue, templateUrl, absoluteKeyOffset, absoluteValueOffset) {
      const tokens = this._lexer.tokenize(templateValue);
      const parser = new _ParseAST(
        templateValue,
        templateUrl,
        absoluteValueOffset,
        tokens,
        0,
        this.errors,
        0
        /* relative offset */
      );
      return parser.parseTemplateBindings({
        source: templateKey,
        span: new AbsoluteSourceSpan(absoluteKeyOffset, absoluteKeyOffset + templateKey.length)
      });
    }
    parseInterpolation(input2, location2, absoluteOffset, interpolatedTokens, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
      const { strings, expressions, offsets } = this.splitInterpolation(input2, location2, interpolatedTokens, interpolationConfig);
      if (expressions.length === 0)
        return null;
      const expressionNodes = [];
      for (let i = 0; i < expressions.length; ++i) {
        const expressionText = expressions[i].text;
        const sourceToLex = this._stripComments(expressionText);
        const tokens = this._lexer.tokenize(sourceToLex);
        const ast = new _ParseAST(input2, location2, absoluteOffset, tokens, 0, this.errors, offsets[i]).parseChain();
        expressionNodes.push(ast);
      }
      return this.createInterpolationAst(strings.map((s) => s.text), expressionNodes, input2, location2, absoluteOffset);
    }
    /**
     * Similar to `parseInterpolation`, but treats the provided string as a single expression
     * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).
     * This is used for parsing the switch expression in ICUs.
     */
    parseInterpolationExpression(expression, location2, absoluteOffset) {
      const sourceToLex = this._stripComments(expression);
      const tokens = this._lexer.tokenize(sourceToLex);
      const ast = new _ParseAST(expression, location2, absoluteOffset, tokens, 0, this.errors, 0).parseChain();
      const strings = ["", ""];
      return this.createInterpolationAst(strings, [ast], expression, location2, absoluteOffset);
    }
    createInterpolationAst(strings, expressions, input2, location2, absoluteOffset) {
      const span = new ParseSpan(0, input2.length);
      const interpolation = new Interpolation$1(span, span.toAbsolute(absoluteOffset), strings, expressions);
      return new ASTWithSource(interpolation, input2, location2, absoluteOffset, this.errors);
    }
    /**
     * Splits a string of text into "raw" text segments and expressions present in interpolations in
     * the string.
     * Returns `null` if there are no interpolations, otherwise a
     * `SplitInterpolation` with splits that look like
     *   <raw text> <expression> <raw text> ... <raw text> <expression> <raw text>
     */
    splitInterpolation(input2, location2, interpolatedTokens, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
      const strings = [];
      const expressions = [];
      const offsets = [];
      const inputToTemplateIndexMap = interpolatedTokens ? getIndexMapForOriginalTemplate(interpolatedTokens) : null;
      let i = 0;
      let atInterpolation = false;
      let extendLastString = false;
      let { start: interpStart, end: interpEnd } = interpolationConfig;
      while (i < input2.length) {
        if (!atInterpolation) {
          const start = i;
          i = input2.indexOf(interpStart, i);
          if (i === -1) {
            i = input2.length;
          }
          const text2 = input2.substring(start, i);
          strings.push({ text: text2, start, end: i });
          atInterpolation = true;
        } else {
          const fullStart = i;
          const exprStart = fullStart + interpStart.length;
          const exprEnd = this._getInterpolationEndIndex(input2, interpEnd, exprStart);
          if (exprEnd === -1) {
            atInterpolation = false;
            extendLastString = true;
            break;
          }
          const fullEnd = exprEnd + interpEnd.length;
          const text2 = input2.substring(exprStart, exprEnd);
          if (text2.trim().length === 0) {
            this._reportError("Blank expressions are not allowed in interpolated strings", input2, `at column ${i} in`, location2);
          }
          expressions.push({ text: text2, start: fullStart, end: fullEnd });
          const startInOriginalTemplate = inputToTemplateIndexMap?.get(fullStart) ?? fullStart;
          const offset = startInOriginalTemplate + interpStart.length;
          offsets.push(offset);
          i = fullEnd;
          atInterpolation = false;
        }
      }
      if (!atInterpolation) {
        if (extendLastString) {
          const piece = strings[strings.length - 1];
          piece.text += input2.substring(i);
          piece.end = input2.length;
        } else {
          strings.push({ text: input2.substring(i), start: i, end: input2.length });
        }
      }
      return new SplitInterpolation(strings, expressions, offsets);
    }
    wrapLiteralPrimitive(input2, location2, absoluteOffset) {
      const span = new ParseSpan(0, input2 == null ? 0 : input2.length);
      return new ASTWithSource(new LiteralPrimitive(span, span.toAbsolute(absoluteOffset), input2), input2, location2, absoluteOffset, this.errors);
    }
    _stripComments(input2) {
      const i = this._commentStart(input2);
      return i != null ? input2.substring(0, i) : input2;
    }
    _commentStart(input2) {
      let outerQuote = null;
      for (let i = 0; i < input2.length - 1; i++) {
        const char = input2.charCodeAt(i);
        const nextChar = input2.charCodeAt(i + 1);
        if (char === $SLASH && nextChar == $SLASH && outerQuote == null)
          return i;
        if (outerQuote === char) {
          outerQuote = null;
        } else if (outerQuote == null && isQuote(char)) {
          outerQuote = char;
        }
      }
      return null;
    }
    _checkNoInterpolation(input2, location2, { start, end }) {
      let startIndex = -1;
      let endIndex = -1;
      for (const charIndex of this._forEachUnquotedChar(input2, 0)) {
        if (startIndex === -1) {
          if (input2.startsWith(start)) {
            startIndex = charIndex;
          }
        } else {
          endIndex = this._getInterpolationEndIndex(input2, end, charIndex);
          if (endIndex > -1) {
            break;
          }
        }
      }
      if (startIndex > -1 && endIndex > -1) {
        this._reportError(`Got interpolation (${start}${end}) where expression was expected`, input2, `at column ${startIndex} in`, location2);
      }
    }
    /**
     * Finds the index of the end of an interpolation expression
     * while ignoring comments and quoted content.
     */
    _getInterpolationEndIndex(input2, expressionEnd, start) {
      for (const charIndex of this._forEachUnquotedChar(input2, start)) {
        if (input2.startsWith(expressionEnd, charIndex)) {
          return charIndex;
        }
        if (input2.startsWith("//", charIndex)) {
          return input2.indexOf(expressionEnd, charIndex);
        }
      }
      return -1;
    }
    /**
     * Generator used to iterate over the character indexes of a string that are outside of quotes.
     * @param input String to loop through.
     * @param start Index within the string at which to start.
     */
    *_forEachUnquotedChar(input2, start) {
      let currentQuote = null;
      let escapeCount = 0;
      for (let i = start; i < input2.length; i++) {
        const char = input2[i];
        if (isQuote(input2.charCodeAt(i)) && (currentQuote === null || currentQuote === char) && escapeCount % 2 === 0) {
          currentQuote = currentQuote === null ? char : null;
        } else if (currentQuote === null) {
          yield i;
        }
        escapeCount = char === "\\" ? escapeCount + 1 : 0;
      }
    }
  };
  var ParseContextFlags;
  (function(ParseContextFlags2) {
    ParseContextFlags2[ParseContextFlags2["None"] = 0] = "None";
    ParseContextFlags2[ParseContextFlags2["Writable"] = 1] = "Writable";
  })(ParseContextFlags || (ParseContextFlags = {}));
  var _ParseAST = class {
    constructor(input2, location2, absoluteOffset, tokens, parseFlags, errors, offset) {
      this.input = input2;
      this.location = location2;
      this.absoluteOffset = absoluteOffset;
      this.tokens = tokens;
      this.parseFlags = parseFlags;
      this.errors = errors;
      this.offset = offset;
      this.rparensExpected = 0;
      this.rbracketsExpected = 0;
      this.rbracesExpected = 0;
      this.context = ParseContextFlags.None;
      this.sourceSpanCache = /* @__PURE__ */ new Map();
      this.index = 0;
    }
    peek(offset) {
      const i = this.index + offset;
      return i < this.tokens.length ? this.tokens[i] : EOF;
    }
    get next() {
      return this.peek(0);
    }
    /** Whether all the parser input has been processed. */
    get atEOF() {
      return this.index >= this.tokens.length;
    }
    /**
     * Index of the next token to be processed, or the end of the last token if all have been
     * processed.
     */
    get inputIndex() {
      return this.atEOF ? this.currentEndIndex : this.next.index + this.offset;
    }
    /**
     * End index of the last processed token, or the start of the first token if none have been
     * processed.
     */
    get currentEndIndex() {
      if (this.index > 0) {
        const curToken = this.peek(-1);
        return curToken.end + this.offset;
      }
      if (this.tokens.length === 0) {
        return this.input.length + this.offset;
      }
      return this.next.index + this.offset;
    }
    /**
     * Returns the absolute offset of the start of the current token.
     */
    get currentAbsoluteOffset() {
      return this.absoluteOffset + this.inputIndex;
    }
    /**
     * Retrieve a `ParseSpan` from `start` to the current position (or to `artificialEndIndex` if
     * provided).
     *
     * @param start Position from which the `ParseSpan` will start.
     * @param artificialEndIndex Optional ending index to be used if provided (and if greater than the
     *     natural ending index)
     */
    span(start, artificialEndIndex) {
      let endIndex = this.currentEndIndex;
      if (artificialEndIndex !== void 0 && artificialEndIndex > this.currentEndIndex) {
        endIndex = artificialEndIndex;
      }
      if (start > endIndex) {
        const tmp = endIndex;
        endIndex = start;
        start = tmp;
      }
      return new ParseSpan(start, endIndex);
    }
    sourceSpan(start, artificialEndIndex) {
      const serial = `${start}@${this.inputIndex}:${artificialEndIndex}`;
      if (!this.sourceSpanCache.has(serial)) {
        this.sourceSpanCache.set(serial, this.span(start, artificialEndIndex).toAbsolute(this.absoluteOffset));
      }
      return this.sourceSpanCache.get(serial);
    }
    advance() {
      this.index++;
    }
    /**
     * Executes a callback in the provided context.
     */
    withContext(context2, cb) {
      this.context |= context2;
      const ret = cb();
      this.context ^= context2;
      return ret;
    }
    consumeOptionalCharacter(code) {
      if (this.next.isCharacter(code)) {
        this.advance();
        return true;
      } else {
        return false;
      }
    }
    peekKeywordLet() {
      return this.next.isKeywordLet();
    }
    peekKeywordAs() {
      return this.next.isKeywordAs();
    }
    /**
     * Consumes an expected character, otherwise emits an error about the missing expected character
     * and skips over the token stream until reaching a recoverable point.
     *
     * See `this.error` and `this.skip` for more details.
     */
    expectCharacter(code) {
      if (this.consumeOptionalCharacter(code))
        return;
      this.error(`Missing expected ${String.fromCharCode(code)}`);
    }
    consumeOptionalOperator(op) {
      if (this.next.isOperator(op)) {
        this.advance();
        return true;
      } else {
        return false;
      }
    }
    expectOperator(operator) {
      if (this.consumeOptionalOperator(operator))
        return;
      this.error(`Missing expected operator ${operator}`);
    }
    prettyPrintToken(tok) {
      return tok === EOF ? "end of input" : `token ${tok}`;
    }
    expectIdentifierOrKeyword() {
      const n = this.next;
      if (!n.isIdentifier() && !n.isKeyword()) {
        if (n.isPrivateIdentifier()) {
          this._reportErrorForPrivateIdentifier(n, "expected identifier or keyword");
        } else {
          this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier or keyword`);
        }
        return null;
      }
      this.advance();
      return n.toString();
    }
    expectIdentifierOrKeywordOrString() {
      const n = this.next;
      if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
        if (n.isPrivateIdentifier()) {
          this._reportErrorForPrivateIdentifier(n, "expected identifier, keyword or string");
        } else {
          this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier, keyword, or string`);
        }
        return "";
      }
      this.advance();
      return n.toString();
    }
    parseChain() {
      const exprs = [];
      const start = this.inputIndex;
      while (this.index < this.tokens.length) {
        const expr = this.parsePipe();
        exprs.push(expr);
        if (this.consumeOptionalCharacter($SEMICOLON)) {
          if (!(this.parseFlags & 1)) {
            this.error("Binding expression cannot contain chained expression");
          }
          while (this.consumeOptionalCharacter($SEMICOLON)) {
          }
        } else if (this.index < this.tokens.length) {
          const errorIndex = this.index;
          this.error(`Unexpected token '${this.next}'`);
          if (this.index === errorIndex) {
            break;
          }
        }
      }
      if (exprs.length === 0) {
        const artificialStart = this.offset;
        const artificialEnd = this.offset + this.input.length;
        return new EmptyExpr$1(this.span(artificialStart, artificialEnd), this.sourceSpan(artificialStart, artificialEnd));
      }
      if (exprs.length == 1)
        return exprs[0];
      return new Chain(this.span(start), this.sourceSpan(start), exprs);
    }
    parsePipe() {
      const start = this.inputIndex;
      let result = this.parseExpression();
      if (this.consumeOptionalOperator("|")) {
        if (this.parseFlags & 1) {
          this.error(`Cannot have a pipe in an action expression`);
        }
        do {
          const nameStart = this.inputIndex;
          let nameId = this.expectIdentifierOrKeyword();
          let nameSpan;
          let fullSpanEnd = void 0;
          if (nameId !== null) {
            nameSpan = this.sourceSpan(nameStart);
          } else {
            nameId = "";
            fullSpanEnd = this.next.index !== -1 ? this.next.index : this.input.length + this.offset;
            nameSpan = new ParseSpan(fullSpanEnd, fullSpanEnd).toAbsolute(this.absoluteOffset);
          }
          const args = [];
          while (this.consumeOptionalCharacter($COLON)) {
            args.push(this.parseExpression());
          }
          result = new BindingPipe(this.span(start), this.sourceSpan(start, fullSpanEnd), result, nameId, args, nameSpan);
        } while (this.consumeOptionalOperator("|"));
      }
      return result;
    }
    parseExpression() {
      return this.parseConditional();
    }
    parseConditional() {
      const start = this.inputIndex;
      const result = this.parseLogicalOr();
      if (this.consumeOptionalOperator("?")) {
        const yes = this.parsePipe();
        let no;
        if (!this.consumeOptionalCharacter($COLON)) {
          const end = this.inputIndex;
          const expression = this.input.substring(start, end);
          this.error(`Conditional expression ${expression} requires all 3 expressions`);
          no = new EmptyExpr$1(this.span(start), this.sourceSpan(start));
        } else {
          no = this.parsePipe();
        }
        return new Conditional(this.span(start), this.sourceSpan(start), result, yes, no);
      } else {
        return result;
      }
    }
    parseLogicalOr() {
      const start = this.inputIndex;
      let result = this.parseLogicalAnd();
      while (this.consumeOptionalOperator("||")) {
        const right = this.parseLogicalAnd();
        result = new Binary(this.span(start), this.sourceSpan(start), "||", result, right);
      }
      return result;
    }
    parseLogicalAnd() {
      const start = this.inputIndex;
      let result = this.parseNullishCoalescing();
      while (this.consumeOptionalOperator("&&")) {
        const right = this.parseNullishCoalescing();
        result = new Binary(this.span(start), this.sourceSpan(start), "&&", result, right);
      }
      return result;
    }
    parseNullishCoalescing() {
      const start = this.inputIndex;
      let result = this.parseEquality();
      while (this.consumeOptionalOperator("??")) {
        const right = this.parseEquality();
        result = new Binary(this.span(start), this.sourceSpan(start), "??", result, right);
      }
      return result;
    }
    parseEquality() {
      const start = this.inputIndex;
      let result = this.parseRelational();
      while (this.next.type == TokenType.Operator) {
        const operator = this.next.strValue;
        switch (operator) {
          case "==":
          case "===":
          case "!=":
          case "!==":
            this.advance();
            const right = this.parseRelational();
            result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    }
    parseRelational() {
      const start = this.inputIndex;
      let result = this.parseAdditive();
      while (this.next.type == TokenType.Operator) {
        const operator = this.next.strValue;
        switch (operator) {
          case "<":
          case ">":
          case "<=":
          case ">=":
            this.advance();
            const right = this.parseAdditive();
            result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    }
    parseAdditive() {
      const start = this.inputIndex;
      let result = this.parseMultiplicative();
      while (this.next.type == TokenType.Operator) {
        const operator = this.next.strValue;
        switch (operator) {
          case "+":
          case "-":
            this.advance();
            let right = this.parseMultiplicative();
            result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    }
    parseMultiplicative() {
      const start = this.inputIndex;
      let result = this.parsePrefix();
      while (this.next.type == TokenType.Operator) {
        const operator = this.next.strValue;
        switch (operator) {
          case "*":
          case "%":
          case "/":
            this.advance();
            let right = this.parsePrefix();
            result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    }
    parsePrefix() {
      if (this.next.type == TokenType.Operator) {
        const start = this.inputIndex;
        const operator = this.next.strValue;
        let result;
        switch (operator) {
          case "+":
            this.advance();
            result = this.parsePrefix();
            return Unary.createPlus(this.span(start), this.sourceSpan(start), result);
          case "-":
            this.advance();
            result = this.parsePrefix();
            return Unary.createMinus(this.span(start), this.sourceSpan(start), result);
          case "!":
            this.advance();
            result = this.parsePrefix();
            return new PrefixNot(this.span(start), this.sourceSpan(start), result);
        }
      }
      return this.parseCallChain();
    }
    parseCallChain() {
      const start = this.inputIndex;
      let result = this.parsePrimary();
      while (true) {
        if (this.consumeOptionalCharacter($PERIOD)) {
          result = this.parseAccessMember(result, start, false);
        } else if (this.consumeOptionalOperator("?.")) {
          if (this.consumeOptionalCharacter($LPAREN)) {
            result = this.parseCall(result, start, true);
          } else {
            result = this.consumeOptionalCharacter($LBRACKET) ? this.parseKeyedReadOrWrite(result, start, true) : this.parseAccessMember(result, start, true);
          }
        } else if (this.consumeOptionalCharacter($LBRACKET)) {
          result = this.parseKeyedReadOrWrite(result, start, false);
        } else if (this.consumeOptionalCharacter($LPAREN)) {
          result = this.parseCall(result, start, false);
        } else if (this.consumeOptionalOperator("!")) {
          result = new NonNullAssert(this.span(start), this.sourceSpan(start), result);
        } else {
          return result;
        }
      }
    }
    parsePrimary() {
      const start = this.inputIndex;
      if (this.consumeOptionalCharacter($LPAREN)) {
        this.rparensExpected++;
        const result = this.parsePipe();
        this.rparensExpected--;
        this.expectCharacter($RPAREN);
        return result;
      } else if (this.next.isKeywordNull()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), this.sourceSpan(start), null);
      } else if (this.next.isKeywordUndefined()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), this.sourceSpan(start), void 0);
      } else if (this.next.isKeywordTrue()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), this.sourceSpan(start), true);
      } else if (this.next.isKeywordFalse()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), this.sourceSpan(start), false);
      } else if (this.next.isKeywordThis()) {
        this.advance();
        return new ThisReceiver(this.span(start), this.sourceSpan(start));
      } else if (this.consumeOptionalCharacter($LBRACKET)) {
        this.rbracketsExpected++;
        const elements = this.parseExpressionList($RBRACKET);
        this.rbracketsExpected--;
        this.expectCharacter($RBRACKET);
        return new LiteralArray(this.span(start), this.sourceSpan(start), elements);
      } else if (this.next.isCharacter($LBRACE)) {
        return this.parseLiteralMap();
      } else if (this.next.isIdentifier()) {
        return this.parseAccessMember(new ImplicitReceiver(this.span(start), this.sourceSpan(start)), start, false);
      } else if (this.next.isNumber()) {
        const value = this.next.toNumber();
        this.advance();
        return new LiteralPrimitive(this.span(start), this.sourceSpan(start), value);
      } else if (this.next.isString()) {
        const literalValue = this.next.toString();
        this.advance();
        return new LiteralPrimitive(this.span(start), this.sourceSpan(start), literalValue);
      } else if (this.next.isPrivateIdentifier()) {
        this._reportErrorForPrivateIdentifier(this.next, null);
        return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
      } else if (this.index >= this.tokens.length) {
        this.error(`Unexpected end of expression: ${this.input}`);
        return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
      } else {
        this.error(`Unexpected token ${this.next}`);
        return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
      }
    }
    parseExpressionList(terminator) {
      const result = [];
      do {
        if (!this.next.isCharacter(terminator)) {
          result.push(this.parsePipe());
        } else {
          break;
        }
      } while (this.consumeOptionalCharacter($COMMA));
      return result;
    }
    parseLiteralMap() {
      const keys = [];
      const values = [];
      const start = this.inputIndex;
      this.expectCharacter($LBRACE);
      if (!this.consumeOptionalCharacter($RBRACE)) {
        this.rbracesExpected++;
        do {
          const keyStart = this.inputIndex;
          const quoted = this.next.isString();
          const key = this.expectIdentifierOrKeywordOrString();
          keys.push({ key, quoted });
          if (quoted) {
            this.expectCharacter($COLON);
            values.push(this.parsePipe());
          } else if (this.consumeOptionalCharacter($COLON)) {
            values.push(this.parsePipe());
          } else {
            const span = this.span(keyStart);
            const sourceSpan = this.sourceSpan(keyStart);
            values.push(new PropertyRead(span, sourceSpan, sourceSpan, new ImplicitReceiver(span, sourceSpan), key));
          }
        } while (this.consumeOptionalCharacter($COMMA) && !this.next.isCharacter($RBRACE));
        this.rbracesExpected--;
        this.expectCharacter($RBRACE);
      }
      return new LiteralMap(this.span(start), this.sourceSpan(start), keys, values);
    }
    parseAccessMember(readReceiver, start, isSafe) {
      const nameStart = this.inputIndex;
      const id = this.withContext(ParseContextFlags.Writable, () => {
        const id2 = this.expectIdentifierOrKeyword() ?? "";
        if (id2.length === 0) {
          this.error(`Expected identifier for property access`, readReceiver.span.end);
        }
        return id2;
      });
      const nameSpan = this.sourceSpan(nameStart);
      let receiver;
      if (isSafe) {
        if (this.consumeOptionalOperator("=")) {
          this.error("The '?.' operator cannot be used in the assignment");
          receiver = new EmptyExpr$1(this.span(start), this.sourceSpan(start));
        } else {
          receiver = new SafePropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);
        }
      } else {
        if (this.consumeOptionalOperator("=")) {
          if (!(this.parseFlags & 1)) {
            this.error("Bindings cannot contain assignments");
            return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
          }
          const value = this.parseConditional();
          receiver = new PropertyWrite(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id, value);
        } else {
          receiver = new PropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);
        }
      }
      return receiver;
    }
    parseCall(receiver, start, isSafe) {
      const argumentStart = this.inputIndex;
      this.rparensExpected++;
      const args = this.parseCallArguments();
      const argumentSpan = this.span(argumentStart, this.inputIndex).toAbsolute(this.absoluteOffset);
      this.expectCharacter($RPAREN);
      this.rparensExpected--;
      const span = this.span(start);
      const sourceSpan = this.sourceSpan(start);
      return isSafe ? new SafeCall(span, sourceSpan, receiver, args, argumentSpan) : new Call(span, sourceSpan, receiver, args, argumentSpan);
    }
    parseCallArguments() {
      if (this.next.isCharacter($RPAREN))
        return [];
      const positionals = [];
      do {
        positionals.push(this.parsePipe());
      } while (this.consumeOptionalCharacter($COMMA));
      return positionals;
    }
    /**
     * Parses an identifier, a keyword, a string with an optional `-` in between,
     * and returns the string along with its absolute source span.
     */
    expectTemplateBindingKey() {
      let result = "";
      let operatorFound = false;
      const start = this.currentAbsoluteOffset;
      do {
        result += this.expectIdentifierOrKeywordOrString();
        operatorFound = this.consumeOptionalOperator("-");
        if (operatorFound) {
          result += "-";
        }
      } while (operatorFound);
      return {
        source: result,
        span: new AbsoluteSourceSpan(start, start + result.length)
      };
    }
    /**
     * Parse microsyntax template expression and return a list of bindings or
     * parsing errors in case the given expression is invalid.
     *
     * For example,
     * ```
     *   <div *ngFor="let item of items; index as i; trackBy: func">
     * ```
     * contains five bindings:
     * 1. ngFor -> null
     * 2. item -> NgForOfContext.$implicit
     * 3. ngForOf -> items
     * 4. i -> NgForOfContext.index
     * 5. ngForTrackBy -> func
     *
     * For a full description of the microsyntax grammar, see
     * https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855
     *
     * @param templateKey name of the microsyntax directive, like ngIf, ngFor,
     * without the *, along with its absolute span.
     */
    parseTemplateBindings(templateKey) {
      const bindings = [];
      bindings.push(...this.parseDirectiveKeywordBindings(templateKey));
      while (this.index < this.tokens.length) {
        const letBinding = this.parseLetBinding();
        if (letBinding) {
          bindings.push(letBinding);
        } else {
          const key = this.expectTemplateBindingKey();
          const binding = this.parseAsBinding(key);
          if (binding) {
            bindings.push(binding);
          } else {
            key.source = templateKey.source + key.source.charAt(0).toUpperCase() + key.source.substring(1);
            bindings.push(...this.parseDirectiveKeywordBindings(key));
          }
        }
        this.consumeStatementTerminator();
      }
      return new TemplateBindingParseResult(bindings, [], this.errors);
    }
    parseKeyedReadOrWrite(receiver, start, isSafe) {
      return this.withContext(ParseContextFlags.Writable, () => {
        this.rbracketsExpected++;
        const key = this.parsePipe();
        if (key instanceof EmptyExpr$1) {
          this.error(`Key access cannot be empty`);
        }
        this.rbracketsExpected--;
        this.expectCharacter($RBRACKET);
        if (this.consumeOptionalOperator("=")) {
          if (isSafe) {
            this.error("The '?.' operator cannot be used in the assignment");
          } else {
            const value = this.parseConditional();
            return new KeyedWrite(this.span(start), this.sourceSpan(start), receiver, key, value);
          }
        } else {
          return isSafe ? new SafeKeyedRead(this.span(start), this.sourceSpan(start), receiver, key) : new KeyedRead(this.span(start), this.sourceSpan(start), receiver, key);
        }
        return new EmptyExpr$1(this.span(start), this.sourceSpan(start));
      });
    }
    /**
     * Parse a directive keyword, followed by a mandatory expression.
     * For example, "of items", "trackBy: func".
     * The bindings are: ngForOf -> items, ngForTrackBy -> func
     * There could be an optional "as" binding that follows the expression.
     * For example,
     * ```
     *   *ngFor="let item of items | slice:0:1 as collection".
     *                    ^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
     *               keyword    bound target   optional 'as' binding
     * ```
     *
     * @param key binding key, for example, ngFor, ngIf, ngForOf, along with its
     * absolute span.
     */
    parseDirectiveKeywordBindings(key) {
      const bindings = [];
      this.consumeOptionalCharacter($COLON);
      const value = this.getDirectiveBoundTarget();
      let spanEnd = this.currentAbsoluteOffset;
      const asBinding = this.parseAsBinding(key);
      if (!asBinding) {
        this.consumeStatementTerminator();
        spanEnd = this.currentAbsoluteOffset;
      }
      const sourceSpan = new AbsoluteSourceSpan(key.span.start, spanEnd);
      bindings.push(new ExpressionBinding(sourceSpan, key, value));
      if (asBinding) {
        bindings.push(asBinding);
      }
      return bindings;
    }
    /**
     * Return the expression AST for the bound target of a directive keyword
     * binding. For example,
     * ```
     *   *ngIf="condition | pipe"
     *          ^^^^^^^^^^^^^^^^ bound target for "ngIf"
     *   *ngFor="let item of items"
     *                       ^^^^^ bound target for "ngForOf"
     * ```
     */
    getDirectiveBoundTarget() {
      if (this.next === EOF || this.peekKeywordAs() || this.peekKeywordLet()) {
        return null;
      }
      const ast = this.parsePipe();
      const { start, end } = ast.span;
      const value = this.input.substring(start, end);
      return new ASTWithSource(ast, value, this.location, this.absoluteOffset + start, this.errors);
    }
    /**
     * Return the binding for a variable declared using `as`. Note that the order
     * of the key-value pair in this declaration is reversed. For example,
     * ```
     *   *ngFor="let item of items; index as i"
     *                              ^^^^^    ^
     *                              value    key
     * ```
     *
     * @param value name of the value in the declaration, "ngIf" in the example
     * above, along with its absolute span.
     */
    parseAsBinding(value) {
      if (!this.peekKeywordAs()) {
        return null;
      }
      this.advance();
      const key = this.expectTemplateBindingKey();
      this.consumeStatementTerminator();
      const sourceSpan = new AbsoluteSourceSpan(value.span.start, this.currentAbsoluteOffset);
      return new VariableBinding(sourceSpan, key, value);
    }
    /**
     * Return the binding for a variable declared using `let`. For example,
     * ```
     *   *ngFor="let item of items; let i=index;"
     *           ^^^^^^^^           ^^^^^^^^^^^
     * ```
     * In the first binding, `item` is bound to `NgForOfContext.$implicit`.
     * In the second binding, `i` is bound to `NgForOfContext.index`.
     */
    parseLetBinding() {
      if (!this.peekKeywordLet()) {
        return null;
      }
      const spanStart = this.currentAbsoluteOffset;
      this.advance();
      const key = this.expectTemplateBindingKey();
      let value = null;
      if (this.consumeOptionalOperator("=")) {
        value = this.expectTemplateBindingKey();
      }
      this.consumeStatementTerminator();
      const sourceSpan = new AbsoluteSourceSpan(spanStart, this.currentAbsoluteOffset);
      return new VariableBinding(sourceSpan, key, value);
    }
    /**
     * Consume the optional statement terminator: semicolon or comma.
     */
    consumeStatementTerminator() {
      this.consumeOptionalCharacter($SEMICOLON) || this.consumeOptionalCharacter($COMMA);
    }
    /**
     * Records an error and skips over the token stream until reaching a recoverable point. See
     * `this.skip` for more details on token skipping.
     */
    error(message, index = null) {
      this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
      this.skip();
    }
    locationText(index = null) {
      if (index == null)
        index = this.index;
      return index < this.tokens.length ? `at column ${this.tokens[index].index + 1} in` : `at the end of the expression`;
    }
    /**
     * Records an error for an unexpected private identifier being discovered.
     * @param token Token representing a private identifier.
     * @param extraMessage Optional additional message being appended to the error.
     */
    _reportErrorForPrivateIdentifier(token, extraMessage) {
      let errorMessage = `Private identifiers are not supported. Unexpected private identifier: ${token}`;
      if (extraMessage !== null) {
        errorMessage += `, ${extraMessage}`;
      }
      this.error(errorMessage);
    }
    /**
     * Error recovery should skip tokens until it encounters a recovery point.
     *
     * The following are treated as unconditional recovery points:
     *   - end of input
     *   - ';' (parseChain() is always the root production, and it expects a ';')
     *   - '|' (since pipes may be chained and each pipe expression may be treated independently)
     *
     * The following are conditional recovery points:
     *   - ')', '}', ']' if one of calling productions is expecting one of these symbols
     *     - This allows skip() to recover from errors such as '(a.) + 1' allowing more of the AST to
     *       be retained (it doesn't skip any tokens as the ')' is retained because of the '(' begins
     *       an '(' <expr> ')' production).
     *       The recovery points of grouping symbols must be conditional as they must be skipped if
     *       none of the calling productions are not expecting the closing token else we will never
     *       make progress in the case of an extraneous group closing symbol (such as a stray ')').
     *       That is, we skip a closing symbol if we are not in a grouping production.
     *   - '=' in a `Writable` context
     *     - In this context, we are able to recover after seeing the `=` operator, which
     *       signals the presence of an independent rvalue expression following the `=` operator.
     *
     * If a production expects one of these token it increments the corresponding nesting count,
     * and then decrements it just prior to checking if the token is in the input.
     */
    skip() {
      let n = this.next;
      while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && !n.isOperator("|") && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET)) && (!(this.context & ParseContextFlags.Writable) || !n.isOperator("="))) {
        if (this.next.isError()) {
          this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
        }
        this.advance();
        n = this.next;
      }
    }
  };
  var SimpleExpressionChecker = class extends RecursiveAstVisitor {
    constructor() {
      super(...arguments);
      this.errors = [];
    }
    visitPipe() {
      this.errors.push("pipes");
    }
  };
  function getIndexMapForOriginalTemplate(interpolatedTokens) {
    let offsetMap = /* @__PURE__ */ new Map();
    let consumedInOriginalTemplate = 0;
    let consumedInInput = 0;
    let tokenIndex = 0;
    while (tokenIndex < interpolatedTokens.length) {
      const currentToken = interpolatedTokens[tokenIndex];
      if (currentToken.type === 9) {
        const [decoded, encoded] = currentToken.parts;
        consumedInOriginalTemplate += encoded.length;
        consumedInInput += decoded.length;
      } else {
        const lengthOfParts = currentToken.parts.reduce((sum, current) => sum + current.length, 0);
        consumedInInput += lengthOfParts;
        consumedInOriginalTemplate += lengthOfParts;
      }
      offsetMap.set(consumedInInput, consumedInOriginalTemplate);
      tokenIndex++;
    }
    return offsetMap;
  }
  var NodeWithI18n = class {
    constructor(sourceSpan, i18n2) {
      this.sourceSpan = sourceSpan;
      this.i18n = i18n2;
    }
  };
  var Text2 = class extends NodeWithI18n {
    constructor(value, sourceSpan, tokens, i18n2) {
      super(sourceSpan, i18n2);
      this.value = value;
      this.tokens = tokens;
    }
    visit(visitor, context2) {
      return visitor.visitText(this, context2);
    }
  };
  var Expansion = class extends NodeWithI18n {
    constructor(switchValue, type, cases, sourceSpan, switchValueSourceSpan, i18n2) {
      super(sourceSpan, i18n2);
      this.switchValue = switchValue;
      this.type = type;
      this.cases = cases;
      this.switchValueSourceSpan = switchValueSourceSpan;
    }
    visit(visitor, context2) {
      return visitor.visitExpansion(this, context2);
    }
  };
  var ExpansionCase = class {
    constructor(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
      this.value = value;
      this.expression = expression;
      this.sourceSpan = sourceSpan;
      this.valueSourceSpan = valueSourceSpan;
      this.expSourceSpan = expSourceSpan;
    }
    visit(visitor, context2) {
      return visitor.visitExpansionCase(this, context2);
    }
  };
  var Attribute2 = class extends NodeWithI18n {
    constructor(name, value, sourceSpan, keySpan, valueSpan, valueTokens, i18n2) {
      super(sourceSpan, i18n2);
      this.name = name;
      this.value = value;
      this.keySpan = keySpan;
      this.valueSpan = valueSpan;
      this.valueTokens = valueTokens;
    }
    visit(visitor, context2) {
      return visitor.visitAttribute(this, context2);
    }
  };
  var Element2 = class extends NodeWithI18n {
    constructor(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan = null, i18n2) {
      super(sourceSpan, i18n2);
      this.name = name;
      this.attrs = attrs;
      this.children = children;
      this.startSourceSpan = startSourceSpan;
      this.endSourceSpan = endSourceSpan;
    }
    visit(visitor, context2) {
      return visitor.visitElement(this, context2);
    }
  };
  var Comment = class {
    constructor(value, sourceSpan) {
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    visit(visitor, context2) {
      return visitor.visitComment(this, context2);
    }
  };
  var Block = class extends NodeWithI18n {
    constructor(name, parameters, children, sourceSpan, nameSpan, startSourceSpan, endSourceSpan = null, i18n2) {
      super(sourceSpan, i18n2);
      this.name = name;
      this.parameters = parameters;
      this.children = children;
      this.nameSpan = nameSpan;
      this.startSourceSpan = startSourceSpan;
      this.endSourceSpan = endSourceSpan;
    }
    visit(visitor, context2) {
      return visitor.visitBlock(this, context2);
    }
  };
  var BlockParameter = class {
    constructor(expression, sourceSpan) {
      this.expression = expression;
      this.sourceSpan = sourceSpan;
    }
    visit(visitor, context2) {
      return visitor.visitBlockParameter(this, context2);
    }
  };
  function visitAll(visitor, nodes, context2 = null) {
    const result = [];
    const visit = visitor.visit ? (ast) => visitor.visit(ast, context2) || ast.visit(visitor, context2) : (ast) => ast.visit(visitor, context2);
    nodes.forEach((ast) => {
      const astResult = visit(ast);
      if (astResult) {
        result.push(astResult);
      }
    });
    return result;
  }
  var ElementSchemaRegistry = class {
  };
  var BOOLEAN = "boolean";
  var NUMBER = "number";
  var STRING = "string";
  var OBJECT = "object";
  var SCHEMA = [
    "[Element]|textContent,%ariaAtomic,%ariaAutoComplete,%ariaBusy,%ariaChecked,%ariaColCount,%ariaColIndex,%ariaColSpan,%ariaCurrent,%ariaDescription,%ariaDisabled,%ariaExpanded,%ariaHasPopup,%ariaHidden,%ariaKeyShortcuts,%ariaLabel,%ariaLevel,%ariaLive,%ariaModal,%ariaMultiLine,%ariaMultiSelectable,%ariaOrientation,%ariaPlaceholder,%ariaPosInSet,%ariaPressed,%ariaReadOnly,%ariaRelevant,%ariaRequired,%ariaRoleDescription,%ariaRowCount,%ariaRowIndex,%ariaRowSpan,%ariaSelected,%ariaSetSize,%ariaSort,%ariaValueMax,%ariaValueMin,%ariaValueNow,%ariaValueText,%classList,className,elementTiming,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*fullscreenchange,*fullscreenerror,*search,*webkitfullscreenchange,*webkitfullscreenerror,outerHTML,%part,#scrollLeft,#scrollTop,slot,*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored",
    "[HTMLElement]^[Element]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,!inert,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy",
    "abbr,address,article,aside,b,bdi,bdo,cite,content,code,dd,dfn,dt,em,figcaption,figure,footer,header,hgroup,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy",
    "media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,!preservesPitch,src,%srcObject,#volume",
    ":svg:^[HTMLElement]|!autofocus,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,%style,#tabIndex",
    ":svg:graphics^:svg:|",
    ":svg:animation^:svg:|*begin,*end,*repeat",
    ":svg:geometry^:svg:|",
    ":svg:componentTransferFunction^:svg:|",
    ":svg:gradient^:svg:|",
    ":svg:textContent^:svg:graphics|",
    ":svg:textPositioning^:svg:textContent|",
    "a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,rev,search,shape,target,text,type,username",
    "area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,search,shape,target,username",
    "audio^media|",
    "br^[HTMLElement]|clear",
    "base^[HTMLElement]|href,target",
    "body^[HTMLElement]|aLink,background,bgColor,link,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink",
    "button^[HTMLElement]|!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value",
    "canvas^[HTMLElement]|#height,#width",
    "content^[HTMLElement]|select",
    "dl^[HTMLElement]|!compact",
    "data^[HTMLElement]|value",
    "datalist^[HTMLElement]|",
    "details^[HTMLElement]|!open",
    "dialog^[HTMLElement]|!open,returnValue",
    "dir^[HTMLElement]|!compact",
    "div^[HTMLElement]|align",
    "embed^[HTMLElement]|align,height,name,src,type,width",
    "fieldset^[HTMLElement]|!disabled,name",
    "font^[HTMLElement]|color,face,size",
    "form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target",
    "frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src",
    "frameset^[HTMLElement]|cols,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows",
    "hr^[HTMLElement]|align,color,!noShade,size,width",
    "head^[HTMLElement]|",
    "h1,h2,h3,h4,h5,h6^[HTMLElement]|align",
    "html^[HTMLElement]|version",
    "iframe^[HTMLElement]|align,allow,!allowFullscreen,!allowPaymentRequest,csp,frameBorder,height,loading,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width",
    "img^[HTMLElement]|align,alt,border,%crossOrigin,decoding,#height,#hspace,!isMap,loading,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width",
    "input^[HTMLElement]|accept,align,alt,autocomplete,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width",
    "li^[HTMLElement]|type,#value",
    "label^[HTMLElement]|htmlFor",
    "legend^[HTMLElement]|align",
    "link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,imageSizes,imageSrcset,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type",
    "map^[HTMLElement]|name",
    "marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width",
    "menu^[HTMLElement]|!compact",
    "meta^[HTMLElement]|content,httpEquiv,media,name,scheme",
    "meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value",
    "ins,del^[HTMLElement]|cite,dateTime",
    "ol^[HTMLElement]|!compact,!reversed,#start,type",
    "object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width",
    "optgroup^[HTMLElement]|!disabled,label",
    "option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value",
    "output^[HTMLElement]|defaultValue,%htmlFor,name,value",
    "p^[HTMLElement]|align",
    "param^[HTMLElement]|name,type,value,valueType",
    "picture^[HTMLElement]|",
    "pre^[HTMLElement]|#width",
    "progress^[HTMLElement]|#max,#value",
    "q,blockquote,cite^[HTMLElement]|",
    "script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,!noModule,%referrerPolicy,src,text,type",
    "select^[HTMLElement]|autocomplete,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value",
    "slot^[HTMLElement]|name",
    "source^[HTMLElement]|#height,media,sizes,src,srcset,type,#width",
    "span^[HTMLElement]|",
    "style^[HTMLElement]|!disabled,media,type",
    "caption^[HTMLElement]|align",
    "th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width",
    "col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width",
    "table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width",
    "tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign",
    "tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign",
    "template^[HTMLElement]|",
    "textarea^[HTMLElement]|autocomplete,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap",
    "time^[HTMLElement]|dateTime",
    "title^[HTMLElement]|text",
    "track^[HTMLElement]|!default,kind,label,src,srclang",
    "ul^[HTMLElement]|!compact,type",
    "unknown^[HTMLElement]|",
    "video^media|!disablePictureInPicture,#height,*enterpictureinpicture,*leavepictureinpicture,!playsInline,poster,#width",
    ":svg:a^:svg:graphics|",
    ":svg:animate^:svg:animation|",
    ":svg:animateMotion^:svg:animation|",
    ":svg:animateTransform^:svg:animation|",
    ":svg:circle^:svg:geometry|",
    ":svg:clipPath^:svg:graphics|",
    ":svg:defs^:svg:graphics|",
    ":svg:desc^:svg:|",
    ":svg:discard^:svg:|",
    ":svg:ellipse^:svg:geometry|",
    ":svg:feBlend^:svg:|",
    ":svg:feColorMatrix^:svg:|",
    ":svg:feComponentTransfer^:svg:|",
    ":svg:feComposite^:svg:|",
    ":svg:feConvolveMatrix^:svg:|",
    ":svg:feDiffuseLighting^:svg:|",
    ":svg:feDisplacementMap^:svg:|",
    ":svg:feDistantLight^:svg:|",
    ":svg:feDropShadow^:svg:|",
    ":svg:feFlood^:svg:|",
    ":svg:feFuncA^:svg:componentTransferFunction|",
    ":svg:feFuncB^:svg:componentTransferFunction|",
    ":svg:feFuncG^:svg:componentTransferFunction|",
    ":svg:feFuncR^:svg:componentTransferFunction|",
    ":svg:feGaussianBlur^:svg:|",
    ":svg:feImage^:svg:|",
    ":svg:feMerge^:svg:|",
    ":svg:feMergeNode^:svg:|",
    ":svg:feMorphology^:svg:|",
    ":svg:feOffset^:svg:|",
    ":svg:fePointLight^:svg:|",
    ":svg:feSpecularLighting^:svg:|",
    ":svg:feSpotLight^:svg:|",
    ":svg:feTile^:svg:|",
    ":svg:feTurbulence^:svg:|",
    ":svg:filter^:svg:|",
    ":svg:foreignObject^:svg:graphics|",
    ":svg:g^:svg:graphics|",
    ":svg:image^:svg:graphics|decoding",
    ":svg:line^:svg:geometry|",
    ":svg:linearGradient^:svg:gradient|",
    ":svg:mpath^:svg:|",
    ":svg:marker^:svg:|",
    ":svg:mask^:svg:|",
    ":svg:metadata^:svg:|",
    ":svg:path^:svg:geometry|",
    ":svg:pattern^:svg:|",
    ":svg:polygon^:svg:geometry|",
    ":svg:polyline^:svg:geometry|",
    ":svg:radialGradient^:svg:gradient|",
    ":svg:rect^:svg:geometry|",
    ":svg:svg^:svg:graphics|#currentScale,#zoomAndPan",
    ":svg:script^:svg:|type",
    ":svg:set^:svg:animation|",
    ":svg:stop^:svg:|",
    ":svg:style^:svg:|!disabled,media,title,type",
    ":svg:switch^:svg:graphics|",
    ":svg:symbol^:svg:|",
    ":svg:tspan^:svg:textPositioning|",
    ":svg:text^:svg:textPositioning|",
    ":svg:textPath^:svg:textContent|",
    ":svg:title^:svg:|",
    ":svg:use^:svg:graphics|",
    ":svg:view^:svg:|#zoomAndPan",
    "data^[HTMLElement]|value",
    "keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name",
    "menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default",
    "summary^[HTMLElement]|",
    "time^[HTMLElement]|dateTime",
    ":svg:cursor^:svg:|"
  ];
  var _ATTR_TO_PROP = new Map(Object.entries({
    "class": "className",
    "for": "htmlFor",
    "formaction": "formAction",
    "innerHtml": "innerHTML",
    "readonly": "readOnly",
    "tabindex": "tabIndex"
  }));
  var _PROP_TO_ATTR = Array.from(_ATTR_TO_PROP).reduce((inverted, [propertyName, attributeName]) => {
    inverted.set(propertyName, attributeName);
    return inverted;
  }, /* @__PURE__ */ new Map());
  var DomElementSchemaRegistry = class extends ElementSchemaRegistry {
    constructor() {
      super();
      this._schema = /* @__PURE__ */ new Map();
      this._eventSchema = /* @__PURE__ */ new Map();
      SCHEMA.forEach((encodedType) => {
        const type = /* @__PURE__ */ new Map();
        const events = /* @__PURE__ */ new Set();
        const [strType, strProperties] = encodedType.split("|");
        const properties = strProperties.split(",");
        const [typeNames, superName] = strType.split("^");
        typeNames.split(",").forEach((tag) => {
          this._schema.set(tag.toLowerCase(), type);
          this._eventSchema.set(tag.toLowerCase(), events);
        });
        const superType = superName && this._schema.get(superName.toLowerCase());
        if (superType) {
          for (const [prop, value] of superType) {
            type.set(prop, value);
          }
          for (const superEvent of this._eventSchema.get(superName.toLowerCase())) {
            events.add(superEvent);
          }
        }
        properties.forEach((property2) => {
          if (property2.length > 0) {
            switch (property2[0]) {
              case "*":
                events.add(property2.substring(1));
                break;
              case "!":
                type.set(property2.substring(1), BOOLEAN);
                break;
              case "#":
                type.set(property2.substring(1), NUMBER);
                break;
              case "%":
                type.set(property2.substring(1), OBJECT);
                break;
              default:
                type.set(property2, STRING);
            }
          }
        });
      });
    }
    hasProperty(tagName, propName, schemaMetas) {
      if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA2.name)) {
        return true;
      }
      if (tagName.indexOf("-") > -1) {
        if (isNgContainer(tagName) || isNgContent(tagName)) {
          return false;
        }
        if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA2.name)) {
          return true;
        }
      }
      const elementProperties = this._schema.get(tagName.toLowerCase()) || this._schema.get("unknown");
      return elementProperties.has(propName);
    }
    hasElement(tagName, schemaMetas) {
      if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA2.name)) {
        return true;
      }
      if (tagName.indexOf("-") > -1) {
        if (isNgContainer(tagName) || isNgContent(tagName)) {
          return true;
        }
        if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA2.name)) {
          return true;
        }
      }
      return this._schema.has(tagName.toLowerCase());
    }
    /**
     * securityContext returns the security context for the given property on the given DOM tag.
     *
     * Tag and property name are statically known and cannot change at runtime, i.e. it is not
     * possible to bind a value into a changing attribute or tag name.
     *
     * The filtering is based on a list of allowed tags|attributes. All attributes in the schema
     * above are assumed to have the 'NONE' security context, i.e. that they are safe inert
     * string values. Only specific well known attack vectors are assigned their appropriate context.
     */
    securityContext(tagName, propName, isAttribute) {
      if (isAttribute) {
        propName = this.getMappedPropName(propName);
      }
      tagName = tagName.toLowerCase();
      propName = propName.toLowerCase();
      let ctx = SECURITY_SCHEMA()[tagName + "|" + propName];
      if (ctx) {
        return ctx;
      }
      ctx = SECURITY_SCHEMA()["*|" + propName];
      return ctx ? ctx : SecurityContext2.NONE;
    }
    getMappedPropName(propName) {
      return _ATTR_TO_PROP.get(propName) ?? propName;
    }
    getDefaultComponentElementName() {
      return "ng-component";
    }
    validateProperty(name) {
      if (name.toLowerCase().startsWith("on")) {
        const msg = `Binding to event property '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...
If '${name}' is a directive input, make sure the directive is imported by the current module.`;
        return { error: true, msg };
      } else {
        return { error: false };
      }
    }
    validateAttribute(name) {
      if (name.toLowerCase().startsWith("on")) {
        const msg = `Binding to event attribute '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...`;
        return { error: true, msg };
      } else {
        return { error: false };
      }
    }
    allKnownElementNames() {
      return Array.from(this._schema.keys());
    }
    allKnownAttributesOfElement(tagName) {
      const elementProperties = this._schema.get(tagName.toLowerCase()) || this._schema.get("unknown");
      return Array.from(elementProperties.keys()).map((prop) => _PROP_TO_ATTR.get(prop) ?? prop);
    }
    allKnownEventsOfElement(tagName) {
      return Array.from(this._eventSchema.get(tagName.toLowerCase()) ?? []);
    }
    normalizeAnimationStyleProperty(propName) {
      return dashCaseToCamelCase(propName);
    }
    normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {
      let unit = "";
      const strVal = val.toString().trim();
      let errorMsg = null;
      if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== "0") {
        if (typeof val === "number") {
          unit = "px";
        } else {
          const valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
          if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
            errorMsg = `Please provide a CSS unit value for ${userProvidedProp}:${val}`;
          }
        }
      }
      return { error: errorMsg, value: strVal + unit };
    }
  };
  function _isPixelDimensionStyle(prop) {
    switch (prop) {
      case "width":
      case "height":
      case "minWidth":
      case "minHeight":
      case "maxWidth":
      case "maxHeight":
      case "left":
      case "top":
      case "bottom":
      case "right":
      case "fontSize":
      case "outlineWidth":
      case "outlineOffset":
      case "paddingTop":
      case "paddingLeft":
      case "paddingBottom":
      case "paddingRight":
      case "marginTop":
      case "marginLeft":
      case "marginBottom":
      case "marginRight":
      case "borderRadius":
      case "borderWidth":
      case "borderTopWidth":
      case "borderLeftWidth":
      case "borderRightWidth":
      case "borderBottomWidth":
      case "textIndent":
        return true;
      default:
        return false;
    }
  }
  var HtmlTagDefinition = class {
    constructor({ closedByChildren, implicitNamespacePrefix, contentType = TagContentType.PARSABLE_DATA, closedByParent = false, isVoid = false, ignoreFirstLf = false, preventNamespaceInheritance = false, canSelfClose = false } = {}) {
      this.closedByChildren = {};
      this.closedByParent = false;
      if (closedByChildren && closedByChildren.length > 0) {
        closedByChildren.forEach((tagName) => this.closedByChildren[tagName] = true);
      }
      this.isVoid = isVoid;
      this.closedByParent = closedByParent || isVoid;
      this.implicitNamespacePrefix = implicitNamespacePrefix || null;
      this.contentType = contentType;
      this.ignoreFirstLf = ignoreFirstLf;
      this.preventNamespaceInheritance = preventNamespaceInheritance;
      this.canSelfClose = canSelfClose ?? isVoid;
    }
    isClosedByChild(name) {
      return this.isVoid || name.toLowerCase() in this.closedByChildren;
    }
    getContentType(prefix) {
      if (typeof this.contentType === "object") {
        const overrideType = prefix === void 0 ? void 0 : this.contentType[prefix];
        return overrideType ?? this.contentType.default;
      }
      return this.contentType;
    }
  };
  var DEFAULT_TAG_DEFINITION;
  var TAG_DEFINITIONS;
  function getHtmlTagDefinition(tagName) {
    if (!TAG_DEFINITIONS) {
      DEFAULT_TAG_DEFINITION = new HtmlTagDefinition({ canSelfClose: true });
      TAG_DEFINITIONS = Object.assign(/* @__PURE__ */ Object.create(null), {
        "base": new HtmlTagDefinition({ isVoid: true }),
        "meta": new HtmlTagDefinition({ isVoid: true }),
        "area": new HtmlTagDefinition({ isVoid: true }),
        "embed": new HtmlTagDefinition({ isVoid: true }),
        "link": new HtmlTagDefinition({ isVoid: true }),
        "img": new HtmlTagDefinition({ isVoid: true }),
        "input": new HtmlTagDefinition({ isVoid: true }),
        "param": new HtmlTagDefinition({ isVoid: true }),
        "hr": new HtmlTagDefinition({ isVoid: true }),
        "br": new HtmlTagDefinition({ isVoid: true }),
        "source": new HtmlTagDefinition({ isVoid: true }),
        "track": new HtmlTagDefinition({ isVoid: true }),
        "wbr": new HtmlTagDefinition({ isVoid: true }),
        "p": new HtmlTagDefinition({
          closedByChildren: [
            "address",
            "article",
            "aside",
            "blockquote",
            "div",
            "dl",
            "fieldset",
            "footer",
            "form",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "header",
            "hgroup",
            "hr",
            "main",
            "nav",
            "ol",
            "p",
            "pre",
            "section",
            "table",
            "ul"
          ],
          closedByParent: true
        }),
        "thead": new HtmlTagDefinition({ closedByChildren: ["tbody", "tfoot"] }),
        "tbody": new HtmlTagDefinition({ closedByChildren: ["tbody", "tfoot"], closedByParent: true }),
        "tfoot": new HtmlTagDefinition({ closedByChildren: ["tbody"], closedByParent: true }),
        "tr": new HtmlTagDefinition({ closedByChildren: ["tr"], closedByParent: true }),
        "td": new HtmlTagDefinition({ closedByChildren: ["td", "th"], closedByParent: true }),
        "th": new HtmlTagDefinition({ closedByChildren: ["td", "th"], closedByParent: true }),
        "col": new HtmlTagDefinition({ isVoid: true }),
        "svg": new HtmlTagDefinition({ implicitNamespacePrefix: "svg" }),
        "foreignObject": new HtmlTagDefinition({
          // Usually the implicit namespace here would be redundant since it will be inherited from
          // the parent `svg`, but we have to do it for `foreignObject`, because the way the parser
          // works is that the parent node of an end tag is its own start tag which means that
          // the `preventNamespaceInheritance` on `foreignObject` would have it default to the
          // implicit namespace which is `html`, unless specified otherwise.
          implicitNamespacePrefix: "svg",
          // We want to prevent children of foreignObject from inheriting its namespace, because
          // the point of the element is to allow nodes from other namespaces to be inserted.
          preventNamespaceInheritance: true
        }),
        "math": new HtmlTagDefinition({ implicitNamespacePrefix: "math" }),
        "li": new HtmlTagDefinition({ closedByChildren: ["li"], closedByParent: true }),
        "dt": new HtmlTagDefinition({ closedByChildren: ["dt", "dd"] }),
        "dd": new HtmlTagDefinition({ closedByChildren: ["dt", "dd"], closedByParent: true }),
        "rb": new HtmlTagDefinition({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: true }),
        "rt": new HtmlTagDefinition({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: true }),
        "rtc": new HtmlTagDefinition({ closedByChildren: ["rb", "rtc", "rp"], closedByParent: true }),
        "rp": new HtmlTagDefinition({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: true }),
        "optgroup": new HtmlTagDefinition({ closedByChildren: ["optgroup"], closedByParent: true }),
        "option": new HtmlTagDefinition({ closedByChildren: ["option", "optgroup"], closedByParent: true }),
        "pre": new HtmlTagDefinition({ ignoreFirstLf: true }),
        "listing": new HtmlTagDefinition({ ignoreFirstLf: true }),
        "style": new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
        "script": new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
        "title": new HtmlTagDefinition({
          // The browser supports two separate `title` tags which have to use
          // a different content type: `HTMLTitleElement` and `SVGTitleElement`
          contentType: { default: TagContentType.ESCAPABLE_RAW_TEXT, svg: TagContentType.PARSABLE_DATA }
        }),
        "textarea": new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true })
      });
      new DomElementSchemaRegistry().allKnownElementNames().forEach((knownTagName) => {
        if (!TAG_DEFINITIONS[knownTagName] && getNsPrefix(knownTagName) === null) {
          TAG_DEFINITIONS[knownTagName] = new HtmlTagDefinition({ canSelfClose: false });
        }
      });
    }
    return TAG_DEFINITIONS[tagName] ?? TAG_DEFINITIONS[tagName.toLowerCase()] ?? DEFAULT_TAG_DEFINITION;
  }
  var TAG_TO_PLACEHOLDER_NAMES = {
    "A": "LINK",
    "B": "BOLD_TEXT",
    "BR": "LINE_BREAK",
    "EM": "EMPHASISED_TEXT",
    "H1": "HEADING_LEVEL1",
    "H2": "HEADING_LEVEL2",
    "H3": "HEADING_LEVEL3",
    "H4": "HEADING_LEVEL4",
    "H5": "HEADING_LEVEL5",
    "H6": "HEADING_LEVEL6",
    "HR": "HORIZONTAL_RULE",
    "I": "ITALIC_TEXT",
    "LI": "LIST_ITEM",
    "LINK": "MEDIA_LINK",
    "OL": "ORDERED_LIST",
    "P": "PARAGRAPH",
    "Q": "QUOTATION",
    "S": "STRIKETHROUGH_TEXT",
    "SMALL": "SMALL_TEXT",
    "SUB": "SUBSTRIPT",
    "SUP": "SUPERSCRIPT",
    "TBODY": "TABLE_BODY",
    "TD": "TABLE_CELL",
    "TFOOT": "TABLE_FOOTER",
    "TH": "TABLE_HEADER_CELL",
    "THEAD": "TABLE_HEADER",
    "TR": "TABLE_ROW",
    "TT": "MONOSPACED_TEXT",
    "U": "UNDERLINED_TEXT",
    "UL": "UNORDERED_LIST"
  };
  var PlaceholderRegistry = class {
    constructor() {
      this._placeHolderNameCounts = {};
      this._signatureToName = {};
    }
    getStartTagPlaceholderName(tag, attrs, isVoid) {
      const signature = this._hashTag(tag, attrs, isVoid);
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      const upperTag = tag.toUpperCase();
      const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;
      const name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);
      this._signatureToName[signature] = name;
      return name;
    }
    getCloseTagPlaceholderName(tag) {
      const signature = this._hashClosingTag(tag);
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      const upperTag = tag.toUpperCase();
      const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;
      const name = this._generateUniqueName(`CLOSE_${baseName}`);
      this._signatureToName[signature] = name;
      return name;
    }
    getPlaceholderName(name, content) {
      const upperName = name.toUpperCase();
      const signature = `PH: ${upperName}=${content}`;
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      const uniqueName = this._generateUniqueName(upperName);
      this._signatureToName[signature] = uniqueName;
      return uniqueName;
    }
    getUniquePlaceholder(name) {
      return this._generateUniqueName(name.toUpperCase());
    }
    getStartBlockPlaceholderName(name, parameters) {
      const signature = this._hashBlock(name, parameters);
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      const placeholder = this._generateUniqueName(`START_BLOCK_${this._toSnakeCase(name)}`);
      this._signatureToName[signature] = placeholder;
      return placeholder;
    }
    getCloseBlockPlaceholderName(name) {
      const signature = this._hashClosingBlock(name);
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      const placeholder = this._generateUniqueName(`CLOSE_BLOCK_${this._toSnakeCase(name)}`);
      this._signatureToName[signature] = placeholder;
      return placeholder;
    }
    // Generate a hash for a tag - does not take attribute order into account
    _hashTag(tag, attrs, isVoid) {
      const start = `<${tag}`;
      const strAttrs = Object.keys(attrs).sort().map((name) => ` ${name}=${attrs[name]}`).join("");
      const end = isVoid ? "/>" : `></${tag}>`;
      return start + strAttrs + end;
    }
    _hashClosingTag(tag) {
      return this._hashTag(`/${tag}`, {}, false);
    }
    _hashBlock(name, parameters) {
      const params = parameters.length === 0 ? "" : ` (${parameters.sort().join("; ")})`;
      return `@${name}${params} {}`;
    }
    _hashClosingBlock(name) {
      return this._hashBlock(`close_${name}`, []);
    }
    _toSnakeCase(name) {
      return name.toUpperCase().replace(/[^A-Z0-9]/g, "_");
    }
    _generateUniqueName(base) {
      const seen = this._placeHolderNameCounts.hasOwnProperty(base);
      if (!seen) {
        this._placeHolderNameCounts[base] = 1;
        return base;
      }
      const id = this._placeHolderNameCounts[base];
      this._placeHolderNameCounts[base] = id + 1;
      return `${base}_${id}`;
    }
  };
  var _expParser = new Parser$1(new Lexer());
  function createI18nMessageFactory(interpolationConfig, containerBlocks) {
    const visitor = new _I18nVisitor(_expParser, interpolationConfig, containerBlocks);
    return (nodes, meaning, description, customId, visitNodeFn) => visitor.toI18nMessage(nodes, meaning, description, customId, visitNodeFn);
  }
  function noopVisitNodeFn(_html, i18n2) {
    return i18n2;
  }
  var _I18nVisitor = class {
    constructor(_expressionParser, _interpolationConfig, _containerBlocks) {
      this._expressionParser = _expressionParser;
      this._interpolationConfig = _interpolationConfig;
      this._containerBlocks = _containerBlocks;
    }
    toI18nMessage(nodes, meaning = "", description = "", customId = "", visitNodeFn) {
      const context2 = {
        isIcu: nodes.length == 1 && nodes[0] instanceof Expansion,
        icuDepth: 0,
        placeholderRegistry: new PlaceholderRegistry(),
        placeholderToContent: {},
        placeholderToMessage: {},
        visitNodeFn: visitNodeFn || noopVisitNodeFn
      };
      const i18nodes = visitAll(this, nodes, context2);
      return new Message(i18nodes, context2.placeholderToContent, context2.placeholderToMessage, meaning, description, customId);
    }
    visitElement(el, context2) {
      const children = visitAll(this, el.children, context2);
      const attrs = {};
      el.attrs.forEach((attr) => {
        attrs[attr.name] = attr.value;
      });
      const isVoid = getHtmlTagDefinition(el.name).isVoid;
      const startPhName = context2.placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
      context2.placeholderToContent[startPhName] = {
        text: el.startSourceSpan.toString(),
        sourceSpan: el.startSourceSpan
      };
      let closePhName = "";
      if (!isVoid) {
        closePhName = context2.placeholderRegistry.getCloseTagPlaceholderName(el.name);
        context2.placeholderToContent[closePhName] = {
          text: `</${el.name}>`,
          sourceSpan: el.endSourceSpan ?? el.sourceSpan
        };
      }
      const node = new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
      return context2.visitNodeFn(el, node);
    }
    visitAttribute(attribute2, context2) {
      const node = attribute2.valueTokens === void 0 || attribute2.valueTokens.length === 1 ? new Text$2(attribute2.value, attribute2.valueSpan || attribute2.sourceSpan) : this._visitTextWithInterpolation(attribute2.valueTokens, attribute2.valueSpan || attribute2.sourceSpan, context2, attribute2.i18n);
      return context2.visitNodeFn(attribute2, node);
    }
    visitText(text2, context2) {
      const node = text2.tokens.length === 1 ? new Text$2(text2.value, text2.sourceSpan) : this._visitTextWithInterpolation(text2.tokens, text2.sourceSpan, context2, text2.i18n);
      return context2.visitNodeFn(text2, node);
    }
    visitComment(comment, context2) {
      return null;
    }
    visitExpansion(icu, context2) {
      context2.icuDepth++;
      const i18nIcuCases = {};
      const i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
      icu.cases.forEach((caze) => {
        i18nIcuCases[caze.value] = new Container(caze.expression.map((node2) => node2.visit(this, context2)), caze.expSourceSpan);
      });
      context2.icuDepth--;
      if (context2.isIcu || context2.icuDepth > 0) {
        const expPh = context2.placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);
        i18nIcu.expressionPlaceholder = expPh;
        context2.placeholderToContent[expPh] = {
          text: icu.switchValue,
          sourceSpan: icu.switchValueSourceSpan
        };
        return context2.visitNodeFn(icu, i18nIcu);
      }
      const phName = context2.placeholderRegistry.getPlaceholderName("ICU", icu.sourceSpan.toString());
      context2.placeholderToMessage[phName] = this.toI18nMessage([icu], "", "", "", void 0);
      const node = new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
      return context2.visitNodeFn(icu, node);
    }
    visitExpansionCase(_icuCase, _context) {
      throw new Error("Unreachable code");
    }
    visitBlock(block, context2) {
      const children = visitAll(this, block.children, context2);
      if (this._containerBlocks.has(block.name)) {
        return new Container(children, block.sourceSpan);
      }
      const parameters = block.parameters.map((param) => param.expression);
      const startPhName = context2.placeholderRegistry.getStartBlockPlaceholderName(block.name, parameters);
      const closePhName = context2.placeholderRegistry.getCloseBlockPlaceholderName(block.name);
      context2.placeholderToContent[startPhName] = {
        text: block.startSourceSpan.toString(),
        sourceSpan: block.startSourceSpan
      };
      context2.placeholderToContent[closePhName] = {
        text: block.endSourceSpan ? block.endSourceSpan.toString() : "}",
        sourceSpan: block.endSourceSpan ?? block.sourceSpan
      };
      const node = new BlockPlaceholder(block.name, parameters, startPhName, closePhName, children, block.sourceSpan, block.startSourceSpan, block.endSourceSpan);
      return context2.visitNodeFn(block, node);
    }
    visitBlockParameter(_parameter, _context) {
      throw new Error("Unreachable code");
    }
    /**
     * Convert, text and interpolated tokens up into text and placeholder pieces.
     *
     * @param tokens The text and interpolated tokens.
     * @param sourceSpan The span of the whole of the `text` string.
     * @param context The current context of the visitor, used to compute and store placeholders.
     * @param previousI18n Any i18n metadata associated with this `text` from a previous pass.
     */
    _visitTextWithInterpolation(tokens, sourceSpan, context2, previousI18n) {
      const nodes = [];
      let hasInterpolation = false;
      for (const token of tokens) {
        switch (token.type) {
          case 8:
          case 17:
            hasInterpolation = true;
            const expression = token.parts[1];
            const baseName = extractPlaceholderName(expression) || "INTERPOLATION";
            const phName = context2.placeholderRegistry.getPlaceholderName(baseName, expression);
            context2.placeholderToContent[phName] = {
              text: token.parts.join(""),
              sourceSpan: token.sourceSpan
            };
            nodes.push(new Placeholder(expression, phName, token.sourceSpan));
            break;
          default:
            if (token.parts[0].length > 0) {
              const previous = nodes[nodes.length - 1];
              if (previous instanceof Text$2) {
                previous.value += token.parts[0];
                previous.sourceSpan = new ParseSourceSpan(previous.sourceSpan.start, token.sourceSpan.end, previous.sourceSpan.fullStart, previous.sourceSpan.details);
              } else {
                nodes.push(new Text$2(token.parts[0], token.sourceSpan));
              }
            }
            break;
        }
      }
      if (hasInterpolation) {
        reusePreviousSourceSpans(nodes, previousI18n);
        return new Container(nodes, sourceSpan);
      } else {
        return nodes[0];
      }
    }
  };
  function reusePreviousSourceSpans(nodes, previousI18n) {
    if (previousI18n instanceof Message) {
      assertSingleContainerMessage(previousI18n);
      previousI18n = previousI18n.nodes[0];
    }
    if (previousI18n instanceof Container) {
      assertEquivalentNodes(previousI18n.children, nodes);
      for (let i = 0; i < nodes.length; i++) {
        nodes[i].sourceSpan = previousI18n.children[i].sourceSpan;
      }
    }
  }
  function assertSingleContainerMessage(message) {
    const nodes = message.nodes;
    if (nodes.length !== 1 || !(nodes[0] instanceof Container)) {
      throw new Error("Unexpected previous i18n message - expected it to consist of only a single `Container` node.");
    }
  }
  function assertEquivalentNodes(previousNodes, nodes) {
    if (previousNodes.length !== nodes.length) {
      throw new Error("The number of i18n message children changed between first and second pass.");
    }
    if (previousNodes.some((node, i) => nodes[i].constructor !== node.constructor)) {
      throw new Error("The types of the i18n message children changed between first and second pass.");
    }
  }
  var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*("|')([\s\S]*?)\1[\s\S]*\)/g;
  function extractPlaceholderName(input2) {
    return input2.split(_CUSTOM_PH_EXP)[2];
  }
  var I18nError = class extends ParseError {
    constructor(span, msg) {
      super(span, msg);
    }
  };
  var NAMED_ENTITIES = {
    "AElig": "\xC6",
    "AMP": "&",
    "amp": "&",
    "Aacute": "\xC1",
    "Abreve": "\u0102",
    "Acirc": "\xC2",
    "Acy": "\u0410",
    "Afr": "\u{1D504}",
    "Agrave": "\xC0",
    "Alpha": "\u0391",
    "Amacr": "\u0100",
    "And": "\u2A53",
    "Aogon": "\u0104",
    "Aopf": "\u{1D538}",
    "ApplyFunction": "\u2061",
    "af": "\u2061",
    "Aring": "\xC5",
    "angst": "\xC5",
    "Ascr": "\u{1D49C}",
    "Assign": "\u2254",
    "colone": "\u2254",
    "coloneq": "\u2254",
    "Atilde": "\xC3",
    "Auml": "\xC4",
    "Backslash": "\u2216",
    "setminus": "\u2216",
    "setmn": "\u2216",
    "smallsetminus": "\u2216",
    "ssetmn": "\u2216",
    "Barv": "\u2AE7",
    "Barwed": "\u2306",
    "doublebarwedge": "\u2306",
    "Bcy": "\u0411",
    "Because": "\u2235",
    "becaus": "\u2235",
    "because": "\u2235",
    "Bernoullis": "\u212C",
    "Bscr": "\u212C",
    "bernou": "\u212C",
    "Beta": "\u0392",
    "Bfr": "\u{1D505}",
    "Bopf": "\u{1D539}",
    "Breve": "\u02D8",
    "breve": "\u02D8",
    "Bumpeq": "\u224E",
    "HumpDownHump": "\u224E",
    "bump": "\u224E",
    "CHcy": "\u0427",
    "COPY": "\xA9",
    "copy": "\xA9",
    "Cacute": "\u0106",
    "Cap": "\u22D2",
    "CapitalDifferentialD": "\u2145",
    "DD": "\u2145",
    "Cayleys": "\u212D",
    "Cfr": "\u212D",
    "Ccaron": "\u010C",
    "Ccedil": "\xC7",
    "Ccirc": "\u0108",
    "Cconint": "\u2230",
    "Cdot": "\u010A",
    "Cedilla": "\xB8",
    "cedil": "\xB8",
    "CenterDot": "\xB7",
    "centerdot": "\xB7",
    "middot": "\xB7",
    "Chi": "\u03A7",
    "CircleDot": "\u2299",
    "odot": "\u2299",
    "CircleMinus": "\u2296",
    "ominus": "\u2296",
    "CirclePlus": "\u2295",
    "oplus": "\u2295",
    "CircleTimes": "\u2297",
    "otimes": "\u2297",
    "ClockwiseContourIntegral": "\u2232",
    "cwconint": "\u2232",
    "CloseCurlyDoubleQuote": "\u201D",
    "rdquo": "\u201D",
    "rdquor": "\u201D",
    "CloseCurlyQuote": "\u2019",
    "rsquo": "\u2019",
    "rsquor": "\u2019",
    "Colon": "\u2237",
    "Proportion": "\u2237",
    "Colone": "\u2A74",
    "Congruent": "\u2261",
    "equiv": "\u2261",
    "Conint": "\u222F",
    "DoubleContourIntegral": "\u222F",
    "ContourIntegral": "\u222E",
    "conint": "\u222E",
    "oint": "\u222E",
    "Copf": "\u2102",
    "complexes": "\u2102",
    "Coproduct": "\u2210",
    "coprod": "\u2210",
    "CounterClockwiseContourIntegral": "\u2233",
    "awconint": "\u2233",
    "Cross": "\u2A2F",
    "Cscr": "\u{1D49E}",
    "Cup": "\u22D3",
    "CupCap": "\u224D",
    "asympeq": "\u224D",
    "DDotrahd": "\u2911",
    "DJcy": "\u0402",
    "DScy": "\u0405",
    "DZcy": "\u040F",
    "Dagger": "\u2021",
    "ddagger": "\u2021",
    "Darr": "\u21A1",
    "Dashv": "\u2AE4",
    "DoubleLeftTee": "\u2AE4",
    "Dcaron": "\u010E",
    "Dcy": "\u0414",
    "Del": "\u2207",
    "nabla": "\u2207",
    "Delta": "\u0394",
    "Dfr": "\u{1D507}",
    "DiacriticalAcute": "\xB4",
    "acute": "\xB4",
    "DiacriticalDot": "\u02D9",
    "dot": "\u02D9",
    "DiacriticalDoubleAcute": "\u02DD",
    "dblac": "\u02DD",
    "DiacriticalGrave": "`",
    "grave": "`",
    "DiacriticalTilde": "\u02DC",
    "tilde": "\u02DC",
    "Diamond": "\u22C4",
    "diam": "\u22C4",
    "diamond": "\u22C4",
    "DifferentialD": "\u2146",
    "dd": "\u2146",
    "Dopf": "\u{1D53B}",
    "Dot": "\xA8",
    "DoubleDot": "\xA8",
    "die": "\xA8",
    "uml": "\xA8",
    "DotDot": "\u20DC",
    "DotEqual": "\u2250",
    "doteq": "\u2250",
    "esdot": "\u2250",
    "DoubleDownArrow": "\u21D3",
    "Downarrow": "\u21D3",
    "dArr": "\u21D3",
    "DoubleLeftArrow": "\u21D0",
    "Leftarrow": "\u21D0",
    "lArr": "\u21D0",
    "DoubleLeftRightArrow": "\u21D4",
    "Leftrightarrow": "\u21D4",
    "hArr": "\u21D4",
    "iff": "\u21D4",
    "DoubleLongLeftArrow": "\u27F8",
    "Longleftarrow": "\u27F8",
    "xlArr": "\u27F8",
    "DoubleLongLeftRightArrow": "\u27FA",
    "Longleftrightarrow": "\u27FA",
    "xhArr": "\u27FA",
    "DoubleLongRightArrow": "\u27F9",
    "Longrightarrow": "\u27F9",
    "xrArr": "\u27F9",
    "DoubleRightArrow": "\u21D2",
    "Implies": "\u21D2",
    "Rightarrow": "\u21D2",
    "rArr": "\u21D2",
    "DoubleRightTee": "\u22A8",
    "vDash": "\u22A8",
    "DoubleUpArrow": "\u21D1",
    "Uparrow": "\u21D1",
    "uArr": "\u21D1",
    "DoubleUpDownArrow": "\u21D5",
    "Updownarrow": "\u21D5",
    "vArr": "\u21D5",
    "DoubleVerticalBar": "\u2225",
    "par": "\u2225",
    "parallel": "\u2225",
    "shortparallel": "\u2225",
    "spar": "\u2225",
    "DownArrow": "\u2193",
    "ShortDownArrow": "\u2193",
    "darr": "\u2193",
    "downarrow": "\u2193",
    "DownArrowBar": "\u2913",
    "DownArrowUpArrow": "\u21F5",
    "duarr": "\u21F5",
    "DownBreve": "\u0311",
    "DownLeftRightVector": "\u2950",
    "DownLeftTeeVector": "\u295E",
    "DownLeftVector": "\u21BD",
    "leftharpoondown": "\u21BD",
    "lhard": "\u21BD",
    "DownLeftVectorBar": "\u2956",
    "DownRightTeeVector": "\u295F",
    "DownRightVector": "\u21C1",
    "rhard": "\u21C1",
    "rightharpoondown": "\u21C1",
    "DownRightVectorBar": "\u2957",
    "DownTee": "\u22A4",
    "top": "\u22A4",
    "DownTeeArrow": "\u21A7",
    "mapstodown": "\u21A7",
    "Dscr": "\u{1D49F}",
    "Dstrok": "\u0110",
    "ENG": "\u014A",
    "ETH": "\xD0",
    "Eacute": "\xC9",
    "Ecaron": "\u011A",
    "Ecirc": "\xCA",
    "Ecy": "\u042D",
    "Edot": "\u0116",
    "Efr": "\u{1D508}",
    "Egrave": "\xC8",
    "Element": "\u2208",
    "in": "\u2208",
    "isin": "\u2208",
    "isinv": "\u2208",
    "Emacr": "\u0112",
    "EmptySmallSquare": "\u25FB",
    "EmptyVerySmallSquare": "\u25AB",
    "Eogon": "\u0118",
    "Eopf": "\u{1D53C}",
    "Epsilon": "\u0395",
    "Equal": "\u2A75",
    "EqualTilde": "\u2242",
    "eqsim": "\u2242",
    "esim": "\u2242",
    "Equilibrium": "\u21CC",
    "rightleftharpoons": "\u21CC",
    "rlhar": "\u21CC",
    "Escr": "\u2130",
    "expectation": "\u2130",
    "Esim": "\u2A73",
    "Eta": "\u0397",
    "Euml": "\xCB",
    "Exists": "\u2203",
    "exist": "\u2203",
    "ExponentialE": "\u2147",
    "ee": "\u2147",
    "exponentiale": "\u2147",
    "Fcy": "\u0424",
    "Ffr": "\u{1D509}",
    "FilledSmallSquare": "\u25FC",
    "FilledVerySmallSquare": "\u25AA",
    "blacksquare": "\u25AA",
    "squarf": "\u25AA",
    "squf": "\u25AA",
    "Fopf": "\u{1D53D}",
    "ForAll": "\u2200",
    "forall": "\u2200",
    "Fouriertrf": "\u2131",
    "Fscr": "\u2131",
    "GJcy": "\u0403",
    "GT": ">",
    "gt": ">",
    "Gamma": "\u0393",
    "Gammad": "\u03DC",
    "Gbreve": "\u011E",
    "Gcedil": "\u0122",
    "Gcirc": "\u011C",
    "Gcy": "\u0413",
    "Gdot": "\u0120",
    "Gfr": "\u{1D50A}",
    "Gg": "\u22D9",
    "ggg": "\u22D9",
    "Gopf": "\u{1D53E}",
    "GreaterEqual": "\u2265",
    "ge": "\u2265",
    "geq": "\u2265",
    "GreaterEqualLess": "\u22DB",
    "gel": "\u22DB",
    "gtreqless": "\u22DB",
    "GreaterFullEqual": "\u2267",
    "gE": "\u2267",
    "geqq": "\u2267",
    "GreaterGreater": "\u2AA2",
    "GreaterLess": "\u2277",
    "gl": "\u2277",
    "gtrless": "\u2277",
    "GreaterSlantEqual": "\u2A7E",
    "geqslant": "\u2A7E",
    "ges": "\u2A7E",
    "GreaterTilde": "\u2273",
    "gsim": "\u2273",
    "gtrsim": "\u2273",
    "Gscr": "\u{1D4A2}",
    "Gt": "\u226B",
    "NestedGreaterGreater": "\u226B",
    "gg": "\u226B",
    "HARDcy": "\u042A",
    "Hacek": "\u02C7",
    "caron": "\u02C7",
    "Hat": "^",
    "Hcirc": "\u0124",
    "Hfr": "\u210C",
    "Poincareplane": "\u210C",
    "HilbertSpace": "\u210B",
    "Hscr": "\u210B",
    "hamilt": "\u210B",
    "Hopf": "\u210D",
    "quaternions": "\u210D",
    "HorizontalLine": "\u2500",
    "boxh": "\u2500",
    "Hstrok": "\u0126",
    "HumpEqual": "\u224F",
    "bumpe": "\u224F",
    "bumpeq": "\u224F",
    "IEcy": "\u0415",
    "IJlig": "\u0132",
    "IOcy": "\u0401",
    "Iacute": "\xCD",
    "Icirc": "\xCE",
    "Icy": "\u0418",
    "Idot": "\u0130",
    "Ifr": "\u2111",
    "Im": "\u2111",
    "image": "\u2111",
    "imagpart": "\u2111",
    "Igrave": "\xCC",
    "Imacr": "\u012A",
    "ImaginaryI": "\u2148",
    "ii": "\u2148",
    "Int": "\u222C",
    "Integral": "\u222B",
    "int": "\u222B",
    "Intersection": "\u22C2",
    "bigcap": "\u22C2",
    "xcap": "\u22C2",
    "InvisibleComma": "\u2063",
    "ic": "\u2063",
    "InvisibleTimes": "\u2062",
    "it": "\u2062",
    "Iogon": "\u012E",
    "Iopf": "\u{1D540}",
    "Iota": "\u0399",
    "Iscr": "\u2110",
    "imagline": "\u2110",
    "Itilde": "\u0128",
    "Iukcy": "\u0406",
    "Iuml": "\xCF",
    "Jcirc": "\u0134",
    "Jcy": "\u0419",
    "Jfr": "\u{1D50D}",
    "Jopf": "\u{1D541}",
    "Jscr": "\u{1D4A5}",
    "Jsercy": "\u0408",
    "Jukcy": "\u0404",
    "KHcy": "\u0425",
    "KJcy": "\u040C",
    "Kappa": "\u039A",
    "Kcedil": "\u0136",
    "Kcy": "\u041A",
    "Kfr": "\u{1D50E}",
    "Kopf": "\u{1D542}",
    "Kscr": "\u{1D4A6}",
    "LJcy": "\u0409",
    "LT": "<",
    "lt": "<",
    "Lacute": "\u0139",
    "Lambda": "\u039B",
    "Lang": "\u27EA",
    "Laplacetrf": "\u2112",
    "Lscr": "\u2112",
    "lagran": "\u2112",
    "Larr": "\u219E",
    "twoheadleftarrow": "\u219E",
    "Lcaron": "\u013D",
    "Lcedil": "\u013B",
    "Lcy": "\u041B",
    "LeftAngleBracket": "\u27E8",
    "lang": "\u27E8",
    "langle": "\u27E8",
    "LeftArrow": "\u2190",
    "ShortLeftArrow": "\u2190",
    "larr": "\u2190",
    "leftarrow": "\u2190",
    "slarr": "\u2190",
    "LeftArrowBar": "\u21E4",
    "larrb": "\u21E4",
    "LeftArrowRightArrow": "\u21C6",
    "leftrightarrows": "\u21C6",
    "lrarr": "\u21C6",
    "LeftCeiling": "\u2308",
    "lceil": "\u2308",
    "LeftDoubleBracket": "\u27E6",
    "lobrk": "\u27E6",
    "LeftDownTeeVector": "\u2961",
    "LeftDownVector": "\u21C3",
    "dharl": "\u21C3",
    "downharpoonleft": "\u21C3",
    "LeftDownVectorBar": "\u2959",
    "LeftFloor": "\u230A",
    "lfloor": "\u230A",
    "LeftRightArrow": "\u2194",
    "harr": "\u2194",
    "leftrightarrow": "\u2194",
    "LeftRightVector": "\u294E",
    "LeftTee": "\u22A3",
    "dashv": "\u22A3",
    "LeftTeeArrow": "\u21A4",
    "mapstoleft": "\u21A4",
    "LeftTeeVector": "\u295A",
    "LeftTriangle": "\u22B2",
    "vartriangleleft": "\u22B2",
    "vltri": "\u22B2",
    "LeftTriangleBar": "\u29CF",
    "LeftTriangleEqual": "\u22B4",
    "ltrie": "\u22B4",
    "trianglelefteq": "\u22B4",
    "LeftUpDownVector": "\u2951",
    "LeftUpTeeVector": "\u2960",
    "LeftUpVector": "\u21BF",
    "uharl": "\u21BF",
    "upharpoonleft": "\u21BF",
    "LeftUpVectorBar": "\u2958",
    "LeftVector": "\u21BC",
    "leftharpoonup": "\u21BC",
    "lharu": "\u21BC",
    "LeftVectorBar": "\u2952",
    "LessEqualGreater": "\u22DA",
    "leg": "\u22DA",
    "lesseqgtr": "\u22DA",
    "LessFullEqual": "\u2266",
    "lE": "\u2266",
    "leqq": "\u2266",
    "LessGreater": "\u2276",
    "lessgtr": "\u2276",
    "lg": "\u2276",
    "LessLess": "\u2AA1",
    "LessSlantEqual": "\u2A7D",
    "leqslant": "\u2A7D",
    "les": "\u2A7D",
    "LessTilde": "\u2272",
    "lesssim": "\u2272",
    "lsim": "\u2272",
    "Lfr": "\u{1D50F}",
    "Ll": "\u22D8",
    "Lleftarrow": "\u21DA",
    "lAarr": "\u21DA",
    "Lmidot": "\u013F",
    "LongLeftArrow": "\u27F5",
    "longleftarrow": "\u27F5",
    "xlarr": "\u27F5",
    "LongLeftRightArrow": "\u27F7",
    "longleftrightarrow": "\u27F7",
    "xharr": "\u27F7",
    "LongRightArrow": "\u27F6",
    "longrightarrow": "\u27F6",
    "xrarr": "\u27F6",
    "Lopf": "\u{1D543}",
    "LowerLeftArrow": "\u2199",
    "swarr": "\u2199",
    "swarrow": "\u2199",
    "LowerRightArrow": "\u2198",
    "searr": "\u2198",
    "searrow": "\u2198",
    "Lsh": "\u21B0",
    "lsh": "\u21B0",
    "Lstrok": "\u0141",
    "Lt": "\u226A",
    "NestedLessLess": "\u226A",
    "ll": "\u226A",
    "Map": "\u2905",
    "Mcy": "\u041C",
    "MediumSpace": "\u205F",
    "Mellintrf": "\u2133",
    "Mscr": "\u2133",
    "phmmat": "\u2133",
    "Mfr": "\u{1D510}",
    "MinusPlus": "\u2213",
    "mnplus": "\u2213",
    "mp": "\u2213",
    "Mopf": "\u{1D544}",
    "Mu": "\u039C",
    "NJcy": "\u040A",
    "Nacute": "\u0143",
    "Ncaron": "\u0147",
    "Ncedil": "\u0145",
    "Ncy": "\u041D",
    "NegativeMediumSpace": "\u200B",
    "NegativeThickSpace": "\u200B",
    "NegativeThinSpace": "\u200B",
    "NegativeVeryThinSpace": "\u200B",
    "ZeroWidthSpace": "\u200B",
    "NewLine": "\n",
    "Nfr": "\u{1D511}",
    "NoBreak": "\u2060",
    "NonBreakingSpace": "\xA0",
    "nbsp": "\xA0",
    "Nopf": "\u2115",
    "naturals": "\u2115",
    "Not": "\u2AEC",
    "NotCongruent": "\u2262",
    "nequiv": "\u2262",
    "NotCupCap": "\u226D",
    "NotDoubleVerticalBar": "\u2226",
    "npar": "\u2226",
    "nparallel": "\u2226",
    "nshortparallel": "\u2226",
    "nspar": "\u2226",
    "NotElement": "\u2209",
    "notin": "\u2209",
    "notinva": "\u2209",
    "NotEqual": "\u2260",
    "ne": "\u2260",
    "NotEqualTilde": "\u2242\u0338",
    "nesim": "\u2242\u0338",
    "NotExists": "\u2204",
    "nexist": "\u2204",
    "nexists": "\u2204",
    "NotGreater": "\u226F",
    "ngt": "\u226F",
    "ngtr": "\u226F",
    "NotGreaterEqual": "\u2271",
    "nge": "\u2271",
    "ngeq": "\u2271",
    "NotGreaterFullEqual": "\u2267\u0338",
    "ngE": "\u2267\u0338",
    "ngeqq": "\u2267\u0338",
    "NotGreaterGreater": "\u226B\u0338",
    "nGtv": "\u226B\u0338",
    "NotGreaterLess": "\u2279",
    "ntgl": "\u2279",
    "NotGreaterSlantEqual": "\u2A7E\u0338",
    "ngeqslant": "\u2A7E\u0338",
    "nges": "\u2A7E\u0338",
    "NotGreaterTilde": "\u2275",
    "ngsim": "\u2275",
    "NotHumpDownHump": "\u224E\u0338",
    "nbump": "\u224E\u0338",
    "NotHumpEqual": "\u224F\u0338",
    "nbumpe": "\u224F\u0338",
    "NotLeftTriangle": "\u22EA",
    "nltri": "\u22EA",
    "ntriangleleft": "\u22EA",
    "NotLeftTriangleBar": "\u29CF\u0338",
    "NotLeftTriangleEqual": "\u22EC",
    "nltrie": "\u22EC",
    "ntrianglelefteq": "\u22EC",
    "NotLess": "\u226E",
    "nless": "\u226E",
    "nlt": "\u226E",
    "NotLessEqual": "\u2270",
    "nle": "\u2270",
    "nleq": "\u2270",
    "NotLessGreater": "\u2278",
    "ntlg": "\u2278",
    "NotLessLess": "\u226A\u0338",
    "nLtv": "\u226A\u0338",
    "NotLessSlantEqual": "\u2A7D\u0338",
    "nleqslant": "\u2A7D\u0338",
    "nles": "\u2A7D\u0338",
    "NotLessTilde": "\u2274",
    "nlsim": "\u2274",
    "NotNestedGreaterGreater": "\u2AA2\u0338",
    "NotNestedLessLess": "\u2AA1\u0338",
    "NotPrecedes": "\u2280",
    "npr": "\u2280",
    "nprec": "\u2280",
    "NotPrecedesEqual": "\u2AAF\u0338",
    "npre": "\u2AAF\u0338",
    "npreceq": "\u2AAF\u0338",
    "NotPrecedesSlantEqual": "\u22E0",
    "nprcue": "\u22E0",
    "NotReverseElement": "\u220C",
    "notni": "\u220C",
    "notniva": "\u220C",
    "NotRightTriangle": "\u22EB",
    "nrtri": "\u22EB",
    "ntriangleright": "\u22EB",
    "NotRightTriangleBar": "\u29D0\u0338",
    "NotRightTriangleEqual": "\u22ED",
    "nrtrie": "\u22ED",
    "ntrianglerighteq": "\u22ED",
    "NotSquareSubset": "\u228F\u0338",
    "NotSquareSubsetEqual": "\u22E2",
    "nsqsube": "\u22E2",
    "NotSquareSuperset": "\u2290\u0338",
    "NotSquareSupersetEqual": "\u22E3",
    "nsqsupe": "\u22E3",
    "NotSubset": "\u2282\u20D2",
    "nsubset": "\u2282\u20D2",
    "vnsub": "\u2282\u20D2",
    "NotSubsetEqual": "\u2288",
    "nsube": "\u2288",
    "nsubseteq": "\u2288",
    "NotSucceeds": "\u2281",
    "nsc": "\u2281",
    "nsucc": "\u2281",
    "NotSucceedsEqual": "\u2AB0\u0338",
    "nsce": "\u2AB0\u0338",
    "nsucceq": "\u2AB0\u0338",
    "NotSucceedsSlantEqual": "\u22E1",
    "nsccue": "\u22E1",
    "NotSucceedsTilde": "\u227F\u0338",
    "NotSuperset": "\u2283\u20D2",
    "nsupset": "\u2283\u20D2",
    "vnsup": "\u2283\u20D2",
    "NotSupersetEqual": "\u2289",
    "nsupe": "\u2289",
    "nsupseteq": "\u2289",
    "NotTilde": "\u2241",
    "nsim": "\u2241",
    "NotTildeEqual": "\u2244",
    "nsime": "\u2244",
    "nsimeq": "\u2244",
    "NotTildeFullEqual": "\u2247",
    "ncong": "\u2247",
    "NotTildeTilde": "\u2249",
    "nap": "\u2249",
    "napprox": "\u2249",
    "NotVerticalBar": "\u2224",
    "nmid": "\u2224",
    "nshortmid": "\u2224",
    "nsmid": "\u2224",
    "Nscr": "\u{1D4A9}",
    "Ntilde": "\xD1",
    "Nu": "\u039D",
    "OElig": "\u0152",
    "Oacute": "\xD3",
    "Ocirc": "\xD4",
    "Ocy": "\u041E",
    "Odblac": "\u0150",
    "Ofr": "\u{1D512}",
    "Ograve": "\xD2",
    "Omacr": "\u014C",
    "Omega": "\u03A9",
    "ohm": "\u03A9",
    "Omicron": "\u039F",
    "Oopf": "\u{1D546}",
    "OpenCurlyDoubleQuote": "\u201C",
    "ldquo": "\u201C",
    "OpenCurlyQuote": "\u2018",
    "lsquo": "\u2018",
    "Or": "\u2A54",
    "Oscr": "\u{1D4AA}",
    "Oslash": "\xD8",
    "Otilde": "\xD5",
    "Otimes": "\u2A37",
    "Ouml": "\xD6",
    "OverBar": "\u203E",
    "oline": "\u203E",
    "OverBrace": "\u23DE",
    "OverBracket": "\u23B4",
    "tbrk": "\u23B4",
    "OverParenthesis": "\u23DC",
    "PartialD": "\u2202",
    "part": "\u2202",
    "Pcy": "\u041F",
    "Pfr": "\u{1D513}",
    "Phi": "\u03A6",
    "Pi": "\u03A0",
    "PlusMinus": "\xB1",
    "plusmn": "\xB1",
    "pm": "\xB1",
    "Popf": "\u2119",
    "primes": "\u2119",
    "Pr": "\u2ABB",
    "Precedes": "\u227A",
    "pr": "\u227A",
    "prec": "\u227A",
    "PrecedesEqual": "\u2AAF",
    "pre": "\u2AAF",
    "preceq": "\u2AAF",
    "PrecedesSlantEqual": "\u227C",
    "prcue": "\u227C",
    "preccurlyeq": "\u227C",
    "PrecedesTilde": "\u227E",
    "precsim": "\u227E",
    "prsim": "\u227E",
    "Prime": "\u2033",
    "Product": "\u220F",
    "prod": "\u220F",
    "Proportional": "\u221D",
    "prop": "\u221D",
    "propto": "\u221D",
    "varpropto": "\u221D",
    "vprop": "\u221D",
    "Pscr": "\u{1D4AB}",
    "Psi": "\u03A8",
    "QUOT": '"',
    "quot": '"',
    "Qfr": "\u{1D514}",
    "Qopf": "\u211A",
    "rationals": "\u211A",
    "Qscr": "\u{1D4AC}",
    "RBarr": "\u2910",
    "drbkarow": "\u2910",
    "REG": "\xAE",
    "circledR": "\xAE",
    "reg": "\xAE",
    "Racute": "\u0154",
    "Rang": "\u27EB",
    "Rarr": "\u21A0",
    "twoheadrightarrow": "\u21A0",
    "Rarrtl": "\u2916",
    "Rcaron": "\u0158",
    "Rcedil": "\u0156",
    "Rcy": "\u0420",
    "Re": "\u211C",
    "Rfr": "\u211C",
    "real": "\u211C",
    "realpart": "\u211C",
    "ReverseElement": "\u220B",
    "SuchThat": "\u220B",
    "ni": "\u220B",
    "niv": "\u220B",
    "ReverseEquilibrium": "\u21CB",
    "leftrightharpoons": "\u21CB",
    "lrhar": "\u21CB",
    "ReverseUpEquilibrium": "\u296F",
    "duhar": "\u296F",
    "Rho": "\u03A1",
    "RightAngleBracket": "\u27E9",
    "rang": "\u27E9",
    "rangle": "\u27E9",
    "RightArrow": "\u2192",
    "ShortRightArrow": "\u2192",
    "rarr": "\u2192",
    "rightarrow": "\u2192",
    "srarr": "\u2192",
    "RightArrowBar": "\u21E5",
    "rarrb": "\u21E5",
    "RightArrowLeftArrow": "\u21C4",
    "rightleftarrows": "\u21C4",
    "rlarr": "\u21C4",
    "RightCeiling": "\u2309",
    "rceil": "\u2309",
    "RightDoubleBracket": "\u27E7",
    "robrk": "\u27E7",
    "RightDownTeeVector": "\u295D",
    "RightDownVector": "\u21C2",
    "dharr": "\u21C2",
    "downharpoonright": "\u21C2",
    "RightDownVectorBar": "\u2955",
    "RightFloor": "\u230B",
    "rfloor": "\u230B",
    "RightTee": "\u22A2",
    "vdash": "\u22A2",
    "RightTeeArrow": "\u21A6",
    "map": "\u21A6",
    "mapsto": "\u21A6",
    "RightTeeVector": "\u295B",
    "RightTriangle": "\u22B3",
    "vartriangleright": "\u22B3",
    "vrtri": "\u22B3",
    "RightTriangleBar": "\u29D0",
    "RightTriangleEqual": "\u22B5",
    "rtrie": "\u22B5",
    "trianglerighteq": "\u22B5",
    "RightUpDownVector": "\u294F",
    "RightUpTeeVector": "\u295C",
    "RightUpVector": "\u21BE",
    "uharr": "\u21BE",
    "upharpoonright": "\u21BE",
    "RightUpVectorBar": "\u2954",
    "RightVector": "\u21C0",
    "rharu": "\u21C0",
    "rightharpoonup": "\u21C0",
    "RightVectorBar": "\u2953",
    "Ropf": "\u211D",
    "reals": "\u211D",
    "RoundImplies": "\u2970",
    "Rrightarrow": "\u21DB",
    "rAarr": "\u21DB",
    "Rscr": "\u211B",
    "realine": "\u211B",
    "Rsh": "\u21B1",
    "rsh": "\u21B1",
    "RuleDelayed": "\u29F4",
    "SHCHcy": "\u0429",
    "SHcy": "\u0428",
    "SOFTcy": "\u042C",
    "Sacute": "\u015A",
    "Sc": "\u2ABC",
    "Scaron": "\u0160",
    "Scedil": "\u015E",
    "Scirc": "\u015C",
    "Scy": "\u0421",
    "Sfr": "\u{1D516}",
    "ShortUpArrow": "\u2191",
    "UpArrow": "\u2191",
    "uarr": "\u2191",
    "uparrow": "\u2191",
    "Sigma": "\u03A3",
    "SmallCircle": "\u2218",
    "compfn": "\u2218",
    "Sopf": "\u{1D54A}",
    "Sqrt": "\u221A",
    "radic": "\u221A",
    "Square": "\u25A1",
    "squ": "\u25A1",
    "square": "\u25A1",
    "SquareIntersection": "\u2293",
    "sqcap": "\u2293",
    "SquareSubset": "\u228F",
    "sqsub": "\u228F",
    "sqsubset": "\u228F",
    "SquareSubsetEqual": "\u2291",
    "sqsube": "\u2291",
    "sqsubseteq": "\u2291",
    "SquareSuperset": "\u2290",
    "sqsup": "\u2290",
    "sqsupset": "\u2290",
    "SquareSupersetEqual": "\u2292",
    "sqsupe": "\u2292",
    "sqsupseteq": "\u2292",
    "SquareUnion": "\u2294",
    "sqcup": "\u2294",
    "Sscr": "\u{1D4AE}",
    "Star": "\u22C6",
    "sstarf": "\u22C6",
    "Sub": "\u22D0",
    "Subset": "\u22D0",
    "SubsetEqual": "\u2286",
    "sube": "\u2286",
    "subseteq": "\u2286",
    "Succeeds": "\u227B",
    "sc": "\u227B",
    "succ": "\u227B",
    "SucceedsEqual": "\u2AB0",
    "sce": "\u2AB0",
    "succeq": "\u2AB0",
    "SucceedsSlantEqual": "\u227D",
    "sccue": "\u227D",
    "succcurlyeq": "\u227D",
    "SucceedsTilde": "\u227F",
    "scsim": "\u227F",
    "succsim": "\u227F",
    "Sum": "\u2211",
    "sum": "\u2211",
    "Sup": "\u22D1",
    "Supset": "\u22D1",
    "Superset": "\u2283",
    "sup": "\u2283",
    "supset": "\u2283",
    "SupersetEqual": "\u2287",
    "supe": "\u2287",
    "supseteq": "\u2287",
    "THORN": "\xDE",
    "TRADE": "\u2122",
    "trade": "\u2122",
    "TSHcy": "\u040B",
    "TScy": "\u0426",
    "Tab": "	",
    "Tau": "\u03A4",
    "Tcaron": "\u0164",
    "Tcedil": "\u0162",
    "Tcy": "\u0422",
    "Tfr": "\u{1D517}",
    "Therefore": "\u2234",
    "there4": "\u2234",
    "therefore": "\u2234",
    "Theta": "\u0398",
    "ThickSpace": "\u205F\u200A",
    "ThinSpace": "\u2009",
    "thinsp": "\u2009",
    "Tilde": "\u223C",
    "sim": "\u223C",
    "thicksim": "\u223C",
    "thksim": "\u223C",
    "TildeEqual": "\u2243",
    "sime": "\u2243",
    "simeq": "\u2243",
    "TildeFullEqual": "\u2245",
    "cong": "\u2245",
    "TildeTilde": "\u2248",
    "ap": "\u2248",
    "approx": "\u2248",
    "asymp": "\u2248",
    "thickapprox": "\u2248",
    "thkap": "\u2248",
    "Topf": "\u{1D54B}",
    "TripleDot": "\u20DB",
    "tdot": "\u20DB",
    "Tscr": "\u{1D4AF}",
    "Tstrok": "\u0166",
    "Uacute": "\xDA",
    "Uarr": "\u219F",
    "Uarrocir": "\u2949",
    "Ubrcy": "\u040E",
    "Ubreve": "\u016C",
    "Ucirc": "\xDB",
    "Ucy": "\u0423",
    "Udblac": "\u0170",
    "Ufr": "\u{1D518}",
    "Ugrave": "\xD9",
    "Umacr": "\u016A",
    "UnderBar": "_",
    "lowbar": "_",
    "UnderBrace": "\u23DF",
    "UnderBracket": "\u23B5",
    "bbrk": "\u23B5",
    "UnderParenthesis": "\u23DD",
    "Union": "\u22C3",
    "bigcup": "\u22C3",
    "xcup": "\u22C3",
    "UnionPlus": "\u228E",
    "uplus": "\u228E",
    "Uogon": "\u0172",
    "Uopf": "\u{1D54C}",
    "UpArrowBar": "\u2912",
    "UpArrowDownArrow": "\u21C5",
    "udarr": "\u21C5",
    "UpDownArrow": "\u2195",
    "updownarrow": "\u2195",
    "varr": "\u2195",
    "UpEquilibrium": "\u296E",
    "udhar": "\u296E",
    "UpTee": "\u22A5",
    "bot": "\u22A5",
    "bottom": "\u22A5",
    "perp": "\u22A5",
    "UpTeeArrow": "\u21A5",
    "mapstoup": "\u21A5",
    "UpperLeftArrow": "\u2196",
    "nwarr": "\u2196",
    "nwarrow": "\u2196",
    "UpperRightArrow": "\u2197",
    "nearr": "\u2197",
    "nearrow": "\u2197",
    "Upsi": "\u03D2",
    "upsih": "\u03D2",
    "Upsilon": "\u03A5",
    "Uring": "\u016E",
    "Uscr": "\u{1D4B0}",
    "Utilde": "\u0168",
    "Uuml": "\xDC",
    "VDash": "\u22AB",
    "Vbar": "\u2AEB",
    "Vcy": "\u0412",
    "Vdash": "\u22A9",
    "Vdashl": "\u2AE6",
    "Vee": "\u22C1",
    "bigvee": "\u22C1",
    "xvee": "\u22C1",
    "Verbar": "\u2016",
    "Vert": "\u2016",
    "VerticalBar": "\u2223",
    "mid": "\u2223",
    "shortmid": "\u2223",
    "smid": "\u2223",
    "VerticalLine": "|",
    "verbar": "|",
    "vert": "|",
    "VerticalSeparator": "\u2758",
    "VerticalTilde": "\u2240",
    "wr": "\u2240",
    "wreath": "\u2240",
    "VeryThinSpace": "\u200A",
    "hairsp": "\u200A",
    "Vfr": "\u{1D519}",
    "Vopf": "\u{1D54D}",
    "Vscr": "\u{1D4B1}",
    "Vvdash": "\u22AA",
    "Wcirc": "\u0174",
    "Wedge": "\u22C0",
    "bigwedge": "\u22C0",
    "xwedge": "\u22C0",
    "Wfr": "\u{1D51A}",
    "Wopf": "\u{1D54E}",
    "Wscr": "\u{1D4B2}",
    "Xfr": "\u{1D51B}",
    "Xi": "\u039E",
    "Xopf": "\u{1D54F}",
    "Xscr": "\u{1D4B3}",
    "YAcy": "\u042F",
    "YIcy": "\u0407",
    "YUcy": "\u042E",
    "Yacute": "\xDD",
    "Ycirc": "\u0176",
    "Ycy": "\u042B",
    "Yfr": "\u{1D51C}",
    "Yopf": "\u{1D550}",
    "Yscr": "\u{1D4B4}",
    "Yuml": "\u0178",
    "ZHcy": "\u0416",
    "Zacute": "\u0179",
    "Zcaron": "\u017D",
    "Zcy": "\u0417",
    "Zdot": "\u017B",
    "Zeta": "\u0396",
    "Zfr": "\u2128",
    "zeetrf": "\u2128",
    "Zopf": "\u2124",
    "integers": "\u2124",
    "Zscr": "\u{1D4B5}",
    "aacute": "\xE1",
    "abreve": "\u0103",
    "ac": "\u223E",
    "mstpos": "\u223E",
    "acE": "\u223E\u0333",
    "acd": "\u223F",
    "acirc": "\xE2",
    "acy": "\u0430",
    "aelig": "\xE6",
    "afr": "\u{1D51E}",
    "agrave": "\xE0",
    "alefsym": "\u2135",
    "aleph": "\u2135",
    "alpha": "\u03B1",
    "amacr": "\u0101",
    "amalg": "\u2A3F",
    "and": "\u2227",
    "wedge": "\u2227",
    "andand": "\u2A55",
    "andd": "\u2A5C",
    "andslope": "\u2A58",
    "andv": "\u2A5A",
    "ang": "\u2220",
    "angle": "\u2220",
    "ange": "\u29A4",
    "angmsd": "\u2221",
    "measuredangle": "\u2221",
    "angmsdaa": "\u29A8",
    "angmsdab": "\u29A9",
    "angmsdac": "\u29AA",
    "angmsdad": "\u29AB",
    "angmsdae": "\u29AC",
    "angmsdaf": "\u29AD",
    "angmsdag": "\u29AE",
    "angmsdah": "\u29AF",
    "angrt": "\u221F",
    "angrtvb": "\u22BE",
    "angrtvbd": "\u299D",
    "angsph": "\u2222",
    "angzarr": "\u237C",
    "aogon": "\u0105",
    "aopf": "\u{1D552}",
    "apE": "\u2A70",
    "apacir": "\u2A6F",
    "ape": "\u224A",
    "approxeq": "\u224A",
    "apid": "\u224B",
    "apos": "'",
    "aring": "\xE5",
    "ascr": "\u{1D4B6}",
    "ast": "*",
    "midast": "*",
    "atilde": "\xE3",
    "auml": "\xE4",
    "awint": "\u2A11",
    "bNot": "\u2AED",
    "backcong": "\u224C",
    "bcong": "\u224C",
    "backepsilon": "\u03F6",
    "bepsi": "\u03F6",
    "backprime": "\u2035",
    "bprime": "\u2035",
    "backsim": "\u223D",
    "bsim": "\u223D",
    "backsimeq": "\u22CD",
    "bsime": "\u22CD",
    "barvee": "\u22BD",
    "barwed": "\u2305",
    "barwedge": "\u2305",
    "bbrktbrk": "\u23B6",
    "bcy": "\u0431",
    "bdquo": "\u201E",
    "ldquor": "\u201E",
    "bemptyv": "\u29B0",
    "beta": "\u03B2",
    "beth": "\u2136",
    "between": "\u226C",
    "twixt": "\u226C",
    "bfr": "\u{1D51F}",
    "bigcirc": "\u25EF",
    "xcirc": "\u25EF",
    "bigodot": "\u2A00",
    "xodot": "\u2A00",
    "bigoplus": "\u2A01",
    "xoplus": "\u2A01",
    "bigotimes": "\u2A02",
    "xotime": "\u2A02",
    "bigsqcup": "\u2A06",
    "xsqcup": "\u2A06",
    "bigstar": "\u2605",
    "starf": "\u2605",
    "bigtriangledown": "\u25BD",
    "xdtri": "\u25BD",
    "bigtriangleup": "\u25B3",
    "xutri": "\u25B3",
    "biguplus": "\u2A04",
    "xuplus": "\u2A04",
    "bkarow": "\u290D",
    "rbarr": "\u290D",
    "blacklozenge": "\u29EB",
    "lozf": "\u29EB",
    "blacktriangle": "\u25B4",
    "utrif": "\u25B4",
    "blacktriangledown": "\u25BE",
    "dtrif": "\u25BE",
    "blacktriangleleft": "\u25C2",
    "ltrif": "\u25C2",
    "blacktriangleright": "\u25B8",
    "rtrif": "\u25B8",
    "blank": "\u2423",
    "blk12": "\u2592",
    "blk14": "\u2591",
    "blk34": "\u2593",
    "block": "\u2588",
    "bne": "=\u20E5",
    "bnequiv": "\u2261\u20E5",
    "bnot": "\u2310",
    "bopf": "\u{1D553}",
    "bowtie": "\u22C8",
    "boxDL": "\u2557",
    "boxDR": "\u2554",
    "boxDl": "\u2556",
    "boxDr": "\u2553",
    "boxH": "\u2550",
    "boxHD": "\u2566",
    "boxHU": "\u2569",
    "boxHd": "\u2564",
    "boxHu": "\u2567",
    "boxUL": "\u255D",
    "boxUR": "\u255A",
    "boxUl": "\u255C",
    "boxUr": "\u2559",
    "boxV": "\u2551",
    "boxVH": "\u256C",
    "boxVL": "\u2563",
    "boxVR": "\u2560",
    "boxVh": "\u256B",
    "boxVl": "\u2562",
    "boxVr": "\u255F",
    "boxbox": "\u29C9",
    "boxdL": "\u2555",
    "boxdR": "\u2552",
    "boxdl": "\u2510",
    "boxdr": "\u250C",
    "boxhD": "\u2565",
    "boxhU": "\u2568",
    "boxhd": "\u252C",
    "boxhu": "\u2534",
    "boxminus": "\u229F",
    "minusb": "\u229F",
    "boxplus": "\u229E",
    "plusb": "\u229E",
    "boxtimes": "\u22A0",
    "timesb": "\u22A0",
    "boxuL": "\u255B",
    "boxuR": "\u2558",
    "boxul": "\u2518",
    "boxur": "\u2514",
    "boxv": "\u2502",
    "boxvH": "\u256A",
    "boxvL": "\u2561",
    "boxvR": "\u255E",
    "boxvh": "\u253C",
    "boxvl": "\u2524",
    "boxvr": "\u251C",
    "brvbar": "\xA6",
    "bscr": "\u{1D4B7}",
    "bsemi": "\u204F",
    "bsol": "\\",
    "bsolb": "\u29C5",
    "bsolhsub": "\u27C8",
    "bull": "\u2022",
    "bullet": "\u2022",
    "bumpE": "\u2AAE",
    "cacute": "\u0107",
    "cap": "\u2229",
    "capand": "\u2A44",
    "capbrcup": "\u2A49",
    "capcap": "\u2A4B",
    "capcup": "\u2A47",
    "capdot": "\u2A40",
    "caps": "\u2229\uFE00",
    "caret": "\u2041",
    "ccaps": "\u2A4D",
    "ccaron": "\u010D",
    "ccedil": "\xE7",
    "ccirc": "\u0109",
    "ccups": "\u2A4C",
    "ccupssm": "\u2A50",
    "cdot": "\u010B",
    "cemptyv": "\u29B2",
    "cent": "\xA2",
    "cfr": "\u{1D520}",
    "chcy": "\u0447",
    "check": "\u2713",
    "checkmark": "\u2713",
    "chi": "\u03C7",
    "cir": "\u25CB",
    "cirE": "\u29C3",
    "circ": "\u02C6",
    "circeq": "\u2257",
    "cire": "\u2257",
    "circlearrowleft": "\u21BA",
    "olarr": "\u21BA",
    "circlearrowright": "\u21BB",
    "orarr": "\u21BB",
    "circledS": "\u24C8",
    "oS": "\u24C8",
    "circledast": "\u229B",
    "oast": "\u229B",
    "circledcirc": "\u229A",
    "ocir": "\u229A",
    "circleddash": "\u229D",
    "odash": "\u229D",
    "cirfnint": "\u2A10",
    "cirmid": "\u2AEF",
    "cirscir": "\u29C2",
    "clubs": "\u2663",
    "clubsuit": "\u2663",
    "colon": ":",
    "comma": ",",
    "commat": "@",
    "comp": "\u2201",
    "complement": "\u2201",
    "congdot": "\u2A6D",
    "copf": "\u{1D554}",
    "copysr": "\u2117",
    "crarr": "\u21B5",
    "cross": "\u2717",
    "cscr": "\u{1D4B8}",
    "csub": "\u2ACF",
    "csube": "\u2AD1",
    "csup": "\u2AD0",
    "csupe": "\u2AD2",
    "ctdot": "\u22EF",
    "cudarrl": "\u2938",
    "cudarrr": "\u2935",
    "cuepr": "\u22DE",
    "curlyeqprec": "\u22DE",
    "cuesc": "\u22DF",
    "curlyeqsucc": "\u22DF",
    "cularr": "\u21B6",
    "curvearrowleft": "\u21B6",
    "cularrp": "\u293D",
    "cup": "\u222A",
    "cupbrcap": "\u2A48",
    "cupcap": "\u2A46",
    "cupcup": "\u2A4A",
    "cupdot": "\u228D",
    "cupor": "\u2A45",
    "cups": "\u222A\uFE00",
    "curarr": "\u21B7",
    "curvearrowright": "\u21B7",
    "curarrm": "\u293C",
    "curlyvee": "\u22CE",
    "cuvee": "\u22CE",
    "curlywedge": "\u22CF",
    "cuwed": "\u22CF",
    "curren": "\xA4",
    "cwint": "\u2231",
    "cylcty": "\u232D",
    "dHar": "\u2965",
    "dagger": "\u2020",
    "daleth": "\u2138",
    "dash": "\u2010",
    "hyphen": "\u2010",
    "dbkarow": "\u290F",
    "rBarr": "\u290F",
    "dcaron": "\u010F",
    "dcy": "\u0434",
    "ddarr": "\u21CA",
    "downdownarrows": "\u21CA",
    "ddotseq": "\u2A77",
    "eDDot": "\u2A77",
    "deg": "\xB0",
    "delta": "\u03B4",
    "demptyv": "\u29B1",
    "dfisht": "\u297F",
    "dfr": "\u{1D521}",
    "diamondsuit": "\u2666",
    "diams": "\u2666",
    "digamma": "\u03DD",
    "gammad": "\u03DD",
    "disin": "\u22F2",
    "div": "\xF7",
    "divide": "\xF7",
    "divideontimes": "\u22C7",
    "divonx": "\u22C7",
    "djcy": "\u0452",
    "dlcorn": "\u231E",
    "llcorner": "\u231E",
    "dlcrop": "\u230D",
    "dollar": "$",
    "dopf": "\u{1D555}",
    "doteqdot": "\u2251",
    "eDot": "\u2251",
    "dotminus": "\u2238",
    "minusd": "\u2238",
    "dotplus": "\u2214",
    "plusdo": "\u2214",
    "dotsquare": "\u22A1",
    "sdotb": "\u22A1",
    "drcorn": "\u231F",
    "lrcorner": "\u231F",
    "drcrop": "\u230C",
    "dscr": "\u{1D4B9}",
    "dscy": "\u0455",
    "dsol": "\u29F6",
    "dstrok": "\u0111",
    "dtdot": "\u22F1",
    "dtri": "\u25BF",
    "triangledown": "\u25BF",
    "dwangle": "\u29A6",
    "dzcy": "\u045F",
    "dzigrarr": "\u27FF",
    "eacute": "\xE9",
    "easter": "\u2A6E",
    "ecaron": "\u011B",
    "ecir": "\u2256",
    "eqcirc": "\u2256",
    "ecirc": "\xEA",
    "ecolon": "\u2255",
    "eqcolon": "\u2255",
    "ecy": "\u044D",
    "edot": "\u0117",
    "efDot": "\u2252",
    "fallingdotseq": "\u2252",
    "efr": "\u{1D522}",
    "eg": "\u2A9A",
    "egrave": "\xE8",
    "egs": "\u2A96",
    "eqslantgtr": "\u2A96",
    "egsdot": "\u2A98",
    "el": "\u2A99",
    "elinters": "\u23E7",
    "ell": "\u2113",
    "els": "\u2A95",
    "eqslantless": "\u2A95",
    "elsdot": "\u2A97",
    "emacr": "\u0113",
    "empty": "\u2205",
    "emptyset": "\u2205",
    "emptyv": "\u2205",
    "varnothing": "\u2205",
    "emsp13": "\u2004",
    "emsp14": "\u2005",
    "emsp": "\u2003",
    "eng": "\u014B",
    "ensp": "\u2002",
    "eogon": "\u0119",
    "eopf": "\u{1D556}",
    "epar": "\u22D5",
    "eparsl": "\u29E3",
    "eplus": "\u2A71",
    "epsi": "\u03B5",
    "epsilon": "\u03B5",
    "epsiv": "\u03F5",
    "straightepsilon": "\u03F5",
    "varepsilon": "\u03F5",
    "equals": "=",
    "equest": "\u225F",
    "questeq": "\u225F",
    "equivDD": "\u2A78",
    "eqvparsl": "\u29E5",
    "erDot": "\u2253",
    "risingdotseq": "\u2253",
    "erarr": "\u2971",
    "escr": "\u212F",
    "eta": "\u03B7",
    "eth": "\xF0",
    "euml": "\xEB",
    "euro": "\u20AC",
    "excl": "!",
    "fcy": "\u0444",
    "female": "\u2640",
    "ffilig": "\uFB03",
    "fflig": "\uFB00",
    "ffllig": "\uFB04",
    "ffr": "\u{1D523}",
    "filig": "\uFB01",
    "fjlig": "fj",
    "flat": "\u266D",
    "fllig": "\uFB02",
    "fltns": "\u25B1",
    "fnof": "\u0192",
    "fopf": "\u{1D557}",
    "fork": "\u22D4",
    "pitchfork": "\u22D4",
    "forkv": "\u2AD9",
    "fpartint": "\u2A0D",
    "frac12": "\xBD",
    "half": "\xBD",
    "frac13": "\u2153",
    "frac14": "\xBC",
    "frac15": "\u2155",
    "frac16": "\u2159",
    "frac18": "\u215B",
    "frac23": "\u2154",
    "frac25": "\u2156",
    "frac34": "\xBE",
    "frac35": "\u2157",
    "frac38": "\u215C",
    "frac45": "\u2158",
    "frac56": "\u215A",
    "frac58": "\u215D",
    "frac78": "\u215E",
    "frasl": "\u2044",
    "frown": "\u2322",
    "sfrown": "\u2322",
    "fscr": "\u{1D4BB}",
    "gEl": "\u2A8C",
    "gtreqqless": "\u2A8C",
    "gacute": "\u01F5",
    "gamma": "\u03B3",
    "gap": "\u2A86",
    "gtrapprox": "\u2A86",
    "gbreve": "\u011F",
    "gcirc": "\u011D",
    "gcy": "\u0433",
    "gdot": "\u0121",
    "gescc": "\u2AA9",
    "gesdot": "\u2A80",
    "gesdoto": "\u2A82",
    "gesdotol": "\u2A84",
    "gesl": "\u22DB\uFE00",
    "gesles": "\u2A94",
    "gfr": "\u{1D524}",
    "gimel": "\u2137",
    "gjcy": "\u0453",
    "glE": "\u2A92",
    "gla": "\u2AA5",
    "glj": "\u2AA4",
    "gnE": "\u2269",
    "gneqq": "\u2269",
    "gnap": "\u2A8A",
    "gnapprox": "\u2A8A",
    "gne": "\u2A88",
    "gneq": "\u2A88",
    "gnsim": "\u22E7",
    "gopf": "\u{1D558}",
    "gscr": "\u210A",
    "gsime": "\u2A8E",
    "gsiml": "\u2A90",
    "gtcc": "\u2AA7",
    "gtcir": "\u2A7A",
    "gtdot": "\u22D7",
    "gtrdot": "\u22D7",
    "gtlPar": "\u2995",
    "gtquest": "\u2A7C",
    "gtrarr": "\u2978",
    "gvertneqq": "\u2269\uFE00",
    "gvnE": "\u2269\uFE00",
    "hardcy": "\u044A",
    "harrcir": "\u2948",
    "harrw": "\u21AD",
    "leftrightsquigarrow": "\u21AD",
    "hbar": "\u210F",
    "hslash": "\u210F",
    "planck": "\u210F",
    "plankv": "\u210F",
    "hcirc": "\u0125",
    "hearts": "\u2665",
    "heartsuit": "\u2665",
    "hellip": "\u2026",
    "mldr": "\u2026",
    "hercon": "\u22B9",
    "hfr": "\u{1D525}",
    "hksearow": "\u2925",
    "searhk": "\u2925",
    "hkswarow": "\u2926",
    "swarhk": "\u2926",
    "hoarr": "\u21FF",
    "homtht": "\u223B",
    "hookleftarrow": "\u21A9",
    "larrhk": "\u21A9",
    "hookrightarrow": "\u21AA",
    "rarrhk": "\u21AA",
    "hopf": "\u{1D559}",
    "horbar": "\u2015",
    "hscr": "\u{1D4BD}",
    "hstrok": "\u0127",
    "hybull": "\u2043",
    "iacute": "\xED",
    "icirc": "\xEE",
    "icy": "\u0438",
    "iecy": "\u0435",
    "iexcl": "\xA1",
    "ifr": "\u{1D526}",
    "igrave": "\xEC",
    "iiiint": "\u2A0C",
    "qint": "\u2A0C",
    "iiint": "\u222D",
    "tint": "\u222D",
    "iinfin": "\u29DC",
    "iiota": "\u2129",
    "ijlig": "\u0133",
    "imacr": "\u012B",
    "imath": "\u0131",
    "inodot": "\u0131",
    "imof": "\u22B7",
    "imped": "\u01B5",
    "incare": "\u2105",
    "infin": "\u221E",
    "infintie": "\u29DD",
    "intcal": "\u22BA",
    "intercal": "\u22BA",
    "intlarhk": "\u2A17",
    "intprod": "\u2A3C",
    "iprod": "\u2A3C",
    "iocy": "\u0451",
    "iogon": "\u012F",
    "iopf": "\u{1D55A}",
    "iota": "\u03B9",
    "iquest": "\xBF",
    "iscr": "\u{1D4BE}",
    "isinE": "\u22F9",
    "isindot": "\u22F5",
    "isins": "\u22F4",
    "isinsv": "\u22F3",
    "itilde": "\u0129",
    "iukcy": "\u0456",
    "iuml": "\xEF",
    "jcirc": "\u0135",
    "jcy": "\u0439",
    "jfr": "\u{1D527}",
    "jmath": "\u0237",
    "jopf": "\u{1D55B}",
    "jscr": "\u{1D4BF}",
    "jsercy": "\u0458",
    "jukcy": "\u0454",
    "kappa": "\u03BA",
    "kappav": "\u03F0",
    "varkappa": "\u03F0",
    "kcedil": "\u0137",
    "kcy": "\u043A",
    "kfr": "\u{1D528}",
    "kgreen": "\u0138",
    "khcy": "\u0445",
    "kjcy": "\u045C",
    "kopf": "\u{1D55C}",
    "kscr": "\u{1D4C0}",
    "lAtail": "\u291B",
    "lBarr": "\u290E",
    "lEg": "\u2A8B",
    "lesseqqgtr": "\u2A8B",
    "lHar": "\u2962",
    "lacute": "\u013A",
    "laemptyv": "\u29B4",
    "lambda": "\u03BB",
    "langd": "\u2991",
    "lap": "\u2A85",
    "lessapprox": "\u2A85",
    "laquo": "\xAB",
    "larrbfs": "\u291F",
    "larrfs": "\u291D",
    "larrlp": "\u21AB",
    "looparrowleft": "\u21AB",
    "larrpl": "\u2939",
    "larrsim": "\u2973",
    "larrtl": "\u21A2",
    "leftarrowtail": "\u21A2",
    "lat": "\u2AAB",
    "latail": "\u2919",
    "late": "\u2AAD",
    "lates": "\u2AAD\uFE00",
    "lbarr": "\u290C",
    "lbbrk": "\u2772",
    "lbrace": "{",
    "lcub": "{",
    "lbrack": "[",
    "lsqb": "[",
    "lbrke": "\u298B",
    "lbrksld": "\u298F",
    "lbrkslu": "\u298D",
    "lcaron": "\u013E",
    "lcedil": "\u013C",
    "lcy": "\u043B",
    "ldca": "\u2936",
    "ldrdhar": "\u2967",
    "ldrushar": "\u294B",
    "ldsh": "\u21B2",
    "le": "\u2264",
    "leq": "\u2264",
    "leftleftarrows": "\u21C7",
    "llarr": "\u21C7",
    "leftthreetimes": "\u22CB",
    "lthree": "\u22CB",
    "lescc": "\u2AA8",
    "lesdot": "\u2A7F",
    "lesdoto": "\u2A81",
    "lesdotor": "\u2A83",
    "lesg": "\u22DA\uFE00",
    "lesges": "\u2A93",
    "lessdot": "\u22D6",
    "ltdot": "\u22D6",
    "lfisht": "\u297C",
    "lfr": "\u{1D529}",
    "lgE": "\u2A91",
    "lharul": "\u296A",
    "lhblk": "\u2584",
    "ljcy": "\u0459",
    "llhard": "\u296B",
    "lltri": "\u25FA",
    "lmidot": "\u0140",
    "lmoust": "\u23B0",
    "lmoustache": "\u23B0",
    "lnE": "\u2268",
    "lneqq": "\u2268",
    "lnap": "\u2A89",
    "lnapprox": "\u2A89",
    "lne": "\u2A87",
    "lneq": "\u2A87",
    "lnsim": "\u22E6",
    "loang": "\u27EC",
    "loarr": "\u21FD",
    "longmapsto": "\u27FC",
    "xmap": "\u27FC",
    "looparrowright": "\u21AC",
    "rarrlp": "\u21AC",
    "lopar": "\u2985",
    "lopf": "\u{1D55D}",
    "loplus": "\u2A2D",
    "lotimes": "\u2A34",
    "lowast": "\u2217",
    "loz": "\u25CA",
    "lozenge": "\u25CA",
    "lpar": "(",
    "lparlt": "\u2993",
    "lrhard": "\u296D",
    "lrm": "\u200E",
    "lrtri": "\u22BF",
    "lsaquo": "\u2039",
    "lscr": "\u{1D4C1}",
    "lsime": "\u2A8D",
    "lsimg": "\u2A8F",
    "lsquor": "\u201A",
    "sbquo": "\u201A",
    "lstrok": "\u0142",
    "ltcc": "\u2AA6",
    "ltcir": "\u2A79",
    "ltimes": "\u22C9",
    "ltlarr": "\u2976",
    "ltquest": "\u2A7B",
    "ltrPar": "\u2996",
    "ltri": "\u25C3",
    "triangleleft": "\u25C3",
    "lurdshar": "\u294A",
    "luruhar": "\u2966",
    "lvertneqq": "\u2268\uFE00",
    "lvnE": "\u2268\uFE00",
    "mDDot": "\u223A",
    "macr": "\xAF",
    "strns": "\xAF",
    "male": "\u2642",
    "malt": "\u2720",
    "maltese": "\u2720",
    "marker": "\u25AE",
    "mcomma": "\u2A29",
    "mcy": "\u043C",
    "mdash": "\u2014",
    "mfr": "\u{1D52A}",
    "mho": "\u2127",
    "micro": "\xB5",
    "midcir": "\u2AF0",
    "minus": "\u2212",
    "minusdu": "\u2A2A",
    "mlcp": "\u2ADB",
    "models": "\u22A7",
    "mopf": "\u{1D55E}",
    "mscr": "\u{1D4C2}",
    "mu": "\u03BC",
    "multimap": "\u22B8",
    "mumap": "\u22B8",
    "nGg": "\u22D9\u0338",
    "nGt": "\u226B\u20D2",
    "nLeftarrow": "\u21CD",
    "nlArr": "\u21CD",
    "nLeftrightarrow": "\u21CE",
    "nhArr": "\u21CE",
    "nLl": "\u22D8\u0338",
    "nLt": "\u226A\u20D2",
    "nRightarrow": "\u21CF",
    "nrArr": "\u21CF",
    "nVDash": "\u22AF",
    "nVdash": "\u22AE",
    "nacute": "\u0144",
    "nang": "\u2220\u20D2",
    "napE": "\u2A70\u0338",
    "napid": "\u224B\u0338",
    "napos": "\u0149",
    "natur": "\u266E",
    "natural": "\u266E",
    "ncap": "\u2A43",
    "ncaron": "\u0148",
    "ncedil": "\u0146",
    "ncongdot": "\u2A6D\u0338",
    "ncup": "\u2A42",
    "ncy": "\u043D",
    "ndash": "\u2013",
    "neArr": "\u21D7",
    "nearhk": "\u2924",
    "nedot": "\u2250\u0338",
    "nesear": "\u2928",
    "toea": "\u2928",
    "nfr": "\u{1D52B}",
    "nharr": "\u21AE",
    "nleftrightarrow": "\u21AE",
    "nhpar": "\u2AF2",
    "nis": "\u22FC",
    "nisd": "\u22FA",
    "njcy": "\u045A",
    "nlE": "\u2266\u0338",
    "nleqq": "\u2266\u0338",
    "nlarr": "\u219A",
    "nleftarrow": "\u219A",
    "nldr": "\u2025",
    "nopf": "\u{1D55F}",
    "not": "\xAC",
    "notinE": "\u22F9\u0338",
    "notindot": "\u22F5\u0338",
    "notinvb": "\u22F7",
    "notinvc": "\u22F6",
    "notnivb": "\u22FE",
    "notnivc": "\u22FD",
    "nparsl": "\u2AFD\u20E5",
    "npart": "\u2202\u0338",
    "npolint": "\u2A14",
    "nrarr": "\u219B",
    "nrightarrow": "\u219B",
    "nrarrc": "\u2933\u0338",
    "nrarrw": "\u219D\u0338",
    "nscr": "\u{1D4C3}",
    "nsub": "\u2284",
    "nsubE": "\u2AC5\u0338",
    "nsubseteqq": "\u2AC5\u0338",
    "nsup": "\u2285",
    "nsupE": "\u2AC6\u0338",
    "nsupseteqq": "\u2AC6\u0338",
    "ntilde": "\xF1",
    "nu": "\u03BD",
    "num": "#",
    "numero": "\u2116",
    "numsp": "\u2007",
    "nvDash": "\u22AD",
    "nvHarr": "\u2904",
    "nvap": "\u224D\u20D2",
    "nvdash": "\u22AC",
    "nvge": "\u2265\u20D2",
    "nvgt": ">\u20D2",
    "nvinfin": "\u29DE",
    "nvlArr": "\u2902",
    "nvle": "\u2264\u20D2",
    "nvlt": "<\u20D2",
    "nvltrie": "\u22B4\u20D2",
    "nvrArr": "\u2903",
    "nvrtrie": "\u22B5\u20D2",
    "nvsim": "\u223C\u20D2",
    "nwArr": "\u21D6",
    "nwarhk": "\u2923",
    "nwnear": "\u2927",
    "oacute": "\xF3",
    "ocirc": "\xF4",
    "ocy": "\u043E",
    "odblac": "\u0151",
    "odiv": "\u2A38",
    "odsold": "\u29BC",
    "oelig": "\u0153",
    "ofcir": "\u29BF",
    "ofr": "\u{1D52C}",
    "ogon": "\u02DB",
    "ograve": "\xF2",
    "ogt": "\u29C1",
    "ohbar": "\u29B5",
    "olcir": "\u29BE",
    "olcross": "\u29BB",
    "olt": "\u29C0",
    "omacr": "\u014D",
    "omega": "\u03C9",
    "omicron": "\u03BF",
    "omid": "\u29B6",
    "oopf": "\u{1D560}",
    "opar": "\u29B7",
    "operp": "\u29B9",
    "or": "\u2228",
    "vee": "\u2228",
    "ord": "\u2A5D",
    "order": "\u2134",
    "orderof": "\u2134",
    "oscr": "\u2134",
    "ordf": "\xAA",
    "ordm": "\xBA",
    "origof": "\u22B6",
    "oror": "\u2A56",
    "orslope": "\u2A57",
    "orv": "\u2A5B",
    "oslash": "\xF8",
    "osol": "\u2298",
    "otilde": "\xF5",
    "otimesas": "\u2A36",
    "ouml": "\xF6",
    "ovbar": "\u233D",
    "para": "\xB6",
    "parsim": "\u2AF3",
    "parsl": "\u2AFD",
    "pcy": "\u043F",
    "percnt": "%",
    "period": ".",
    "permil": "\u2030",
    "pertenk": "\u2031",
    "pfr": "\u{1D52D}",
    "phi": "\u03C6",
    "phiv": "\u03D5",
    "straightphi": "\u03D5",
    "varphi": "\u03D5",
    "phone": "\u260E",
    "pi": "\u03C0",
    "piv": "\u03D6",
    "varpi": "\u03D6",
    "planckh": "\u210E",
    "plus": "+",
    "plusacir": "\u2A23",
    "pluscir": "\u2A22",
    "plusdu": "\u2A25",
    "pluse": "\u2A72",
    "plussim": "\u2A26",
    "plustwo": "\u2A27",
    "pointint": "\u2A15",
    "popf": "\u{1D561}",
    "pound": "\xA3",
    "prE": "\u2AB3",
    "prap": "\u2AB7",
    "precapprox": "\u2AB7",
    "precnapprox": "\u2AB9",
    "prnap": "\u2AB9",
    "precneqq": "\u2AB5",
    "prnE": "\u2AB5",
    "precnsim": "\u22E8",
    "prnsim": "\u22E8",
    "prime": "\u2032",
    "profalar": "\u232E",
    "profline": "\u2312",
    "profsurf": "\u2313",
    "prurel": "\u22B0",
    "pscr": "\u{1D4C5}",
    "psi": "\u03C8",
    "puncsp": "\u2008",
    "qfr": "\u{1D52E}",
    "qopf": "\u{1D562}",
    "qprime": "\u2057",
    "qscr": "\u{1D4C6}",
    "quatint": "\u2A16",
    "quest": "?",
    "rAtail": "\u291C",
    "rHar": "\u2964",
    "race": "\u223D\u0331",
    "racute": "\u0155",
    "raemptyv": "\u29B3",
    "rangd": "\u2992",
    "range": "\u29A5",
    "raquo": "\xBB",
    "rarrap": "\u2975",
    "rarrbfs": "\u2920",
    "rarrc": "\u2933",
    "rarrfs": "\u291E",
    "rarrpl": "\u2945",
    "rarrsim": "\u2974",
    "rarrtl": "\u21A3",
    "rightarrowtail": "\u21A3",
    "rarrw": "\u219D",
    "rightsquigarrow": "\u219D",
    "ratail": "\u291A",
    "ratio": "\u2236",
    "rbbrk": "\u2773",
    "rbrace": "}",
    "rcub": "}",
    "rbrack": "]",
    "rsqb": "]",
    "rbrke": "\u298C",
    "rbrksld": "\u298E",
    "rbrkslu": "\u2990",
    "rcaron": "\u0159",
    "rcedil": "\u0157",
    "rcy": "\u0440",
    "rdca": "\u2937",
    "rdldhar": "\u2969",
    "rdsh": "\u21B3",
    "rect": "\u25AD",
    "rfisht": "\u297D",
    "rfr": "\u{1D52F}",
    "rharul": "\u296C",
    "rho": "\u03C1",
    "rhov": "\u03F1",
    "varrho": "\u03F1",
    "rightrightarrows": "\u21C9",
    "rrarr": "\u21C9",
    "rightthreetimes": "\u22CC",
    "rthree": "\u22CC",
    "ring": "\u02DA",
    "rlm": "\u200F",
    "rmoust": "\u23B1",
    "rmoustache": "\u23B1",
    "rnmid": "\u2AEE",
    "roang": "\u27ED",
    "roarr": "\u21FE",
    "ropar": "\u2986",
    "ropf": "\u{1D563}",
    "roplus": "\u2A2E",
    "rotimes": "\u2A35",
    "rpar": ")",
    "rpargt": "\u2994",
    "rppolint": "\u2A12",
    "rsaquo": "\u203A",
    "rscr": "\u{1D4C7}",
    "rtimes": "\u22CA",
    "rtri": "\u25B9",
    "triangleright": "\u25B9",
    "rtriltri": "\u29CE",
    "ruluhar": "\u2968",
    "rx": "\u211E",
    "sacute": "\u015B",
    "scE": "\u2AB4",
    "scap": "\u2AB8",
    "succapprox": "\u2AB8",
    "scaron": "\u0161",
    "scedil": "\u015F",
    "scirc": "\u015D",
    "scnE": "\u2AB6",
    "succneqq": "\u2AB6",
    "scnap": "\u2ABA",
    "succnapprox": "\u2ABA",
    "scnsim": "\u22E9",
    "succnsim": "\u22E9",
    "scpolint": "\u2A13",
    "scy": "\u0441",
    "sdot": "\u22C5",
    "sdote": "\u2A66",
    "seArr": "\u21D8",
    "sect": "\xA7",
    "semi": ";",
    "seswar": "\u2929",
    "tosa": "\u2929",
    "sext": "\u2736",
    "sfr": "\u{1D530}",
    "sharp": "\u266F",
    "shchcy": "\u0449",
    "shcy": "\u0448",
    "shy": "\xAD",
    "sigma": "\u03C3",
    "sigmaf": "\u03C2",
    "sigmav": "\u03C2",
    "varsigma": "\u03C2",
    "simdot": "\u2A6A",
    "simg": "\u2A9E",
    "simgE": "\u2AA0",
    "siml": "\u2A9D",
    "simlE": "\u2A9F",
    "simne": "\u2246",
    "simplus": "\u2A24",
    "simrarr": "\u2972",
    "smashp": "\u2A33",
    "smeparsl": "\u29E4",
    "smile": "\u2323",
    "ssmile": "\u2323",
    "smt": "\u2AAA",
    "smte": "\u2AAC",
    "smtes": "\u2AAC\uFE00",
    "softcy": "\u044C",
    "sol": "/",
    "solb": "\u29C4",
    "solbar": "\u233F",
    "sopf": "\u{1D564}",
    "spades": "\u2660",
    "spadesuit": "\u2660",
    "sqcaps": "\u2293\uFE00",
    "sqcups": "\u2294\uFE00",
    "sscr": "\u{1D4C8}",
    "star": "\u2606",
    "sub": "\u2282",
    "subset": "\u2282",
    "subE": "\u2AC5",
    "subseteqq": "\u2AC5",
    "subdot": "\u2ABD",
    "subedot": "\u2AC3",
    "submult": "\u2AC1",
    "subnE": "\u2ACB",
    "subsetneqq": "\u2ACB",
    "subne": "\u228A",
    "subsetneq": "\u228A",
    "subplus": "\u2ABF",
    "subrarr": "\u2979",
    "subsim": "\u2AC7",
    "subsub": "\u2AD5",
    "subsup": "\u2AD3",
    "sung": "\u266A",
    "sup1": "\xB9",
    "sup2": "\xB2",
    "sup3": "\xB3",
    "supE": "\u2AC6",
    "supseteqq": "\u2AC6",
    "supdot": "\u2ABE",
    "supdsub": "\u2AD8",
    "supedot": "\u2AC4",
    "suphsol": "\u27C9",
    "suphsub": "\u2AD7",
    "suplarr": "\u297B",
    "supmult": "\u2AC2",
    "supnE": "\u2ACC",
    "supsetneqq": "\u2ACC",
    "supne": "\u228B",
    "supsetneq": "\u228B",
    "supplus": "\u2AC0",
    "supsim": "\u2AC8",
    "supsub": "\u2AD4",
    "supsup": "\u2AD6",
    "swArr": "\u21D9",
    "swnwar": "\u292A",
    "szlig": "\xDF",
    "target": "\u2316",
    "tau": "\u03C4",
    "tcaron": "\u0165",
    "tcedil": "\u0163",
    "tcy": "\u0442",
    "telrec": "\u2315",
    "tfr": "\u{1D531}",
    "theta": "\u03B8",
    "thetasym": "\u03D1",
    "thetav": "\u03D1",
    "vartheta": "\u03D1",
    "thorn": "\xFE",
    "times": "\xD7",
    "timesbar": "\u2A31",
    "timesd": "\u2A30",
    "topbot": "\u2336",
    "topcir": "\u2AF1",
    "topf": "\u{1D565}",
    "topfork": "\u2ADA",
    "tprime": "\u2034",
    "triangle": "\u25B5",
    "utri": "\u25B5",
    "triangleq": "\u225C",
    "trie": "\u225C",
    "tridot": "\u25EC",
    "triminus": "\u2A3A",
    "triplus": "\u2A39",
    "trisb": "\u29CD",
    "tritime": "\u2A3B",
    "trpezium": "\u23E2",
    "tscr": "\u{1D4C9}",
    "tscy": "\u0446",
    "tshcy": "\u045B",
    "tstrok": "\u0167",
    "uHar": "\u2963",
    "uacute": "\xFA",
    "ubrcy": "\u045E",
    "ubreve": "\u016D",
    "ucirc": "\xFB",
    "ucy": "\u0443",
    "udblac": "\u0171",
    "ufisht": "\u297E",
    "ufr": "\u{1D532}",
    "ugrave": "\xF9",
    "uhblk": "\u2580",
    "ulcorn": "\u231C",
    "ulcorner": "\u231C",
    "ulcrop": "\u230F",
    "ultri": "\u25F8",
    "umacr": "\u016B",
    "uogon": "\u0173",
    "uopf": "\u{1D566}",
    "upsi": "\u03C5",
    "upsilon": "\u03C5",
    "upuparrows": "\u21C8",
    "uuarr": "\u21C8",
    "urcorn": "\u231D",
    "urcorner": "\u231D",
    "urcrop": "\u230E",
    "uring": "\u016F",
    "urtri": "\u25F9",
    "uscr": "\u{1D4CA}",
    "utdot": "\u22F0",
    "utilde": "\u0169",
    "uuml": "\xFC",
    "uwangle": "\u29A7",
    "vBar": "\u2AE8",
    "vBarv": "\u2AE9",
    "vangrt": "\u299C",
    "varsubsetneq": "\u228A\uFE00",
    "vsubne": "\u228A\uFE00",
    "varsubsetneqq": "\u2ACB\uFE00",
    "vsubnE": "\u2ACB\uFE00",
    "varsupsetneq": "\u228B\uFE00",
    "vsupne": "\u228B\uFE00",
    "varsupsetneqq": "\u2ACC\uFE00",
    "vsupnE": "\u2ACC\uFE00",
    "vcy": "\u0432",
    "veebar": "\u22BB",
    "veeeq": "\u225A",
    "vellip": "\u22EE",
    "vfr": "\u{1D533}",
    "vopf": "\u{1D567}",
    "vscr": "\u{1D4CB}",
    "vzigzag": "\u299A",
    "wcirc": "\u0175",
    "wedbar": "\u2A5F",
    "wedgeq": "\u2259",
    "weierp": "\u2118",
    "wp": "\u2118",
    "wfr": "\u{1D534}",
    "wopf": "\u{1D568}",
    "wscr": "\u{1D4CC}",
    "xfr": "\u{1D535}",
    "xi": "\u03BE",
    "xnis": "\u22FB",
    "xopf": "\u{1D569}",
    "xscr": "\u{1D4CD}",
    "yacute": "\xFD",
    "yacy": "\u044F",
    "ycirc": "\u0177",
    "ycy": "\u044B",
    "yen": "\xA5",
    "yfr": "\u{1D536}",
    "yicy": "\u0457",
    "yopf": "\u{1D56A}",
    "yscr": "\u{1D4CE}",
    "yucy": "\u044E",
    "yuml": "\xFF",
    "zacute": "\u017A",
    "zcaron": "\u017E",
    "zcy": "\u0437",
    "zdot": "\u017C",
    "zeta": "\u03B6",
    "zfr": "\u{1D537}",
    "zhcy": "\u0436",
    "zigrarr": "\u21DD",
    "zopf": "\u{1D56B}",
    "zscr": "\u{1D4CF}",
    "zwj": "\u200D",
    "zwnj": "\u200C"
  };
  var NGSP_UNICODE = "\uE500";
  NAMED_ENTITIES["ngsp"] = NGSP_UNICODE;
  var TokenError = class extends ParseError {
    constructor(errorMsg, tokenType, span) {
      super(span, errorMsg);
      this.tokenType = tokenType;
    }
  };
  var TokenizeResult = class {
    constructor(tokens, errors, nonNormalizedIcuExpressions) {
      this.tokens = tokens;
      this.errors = errors;
      this.nonNormalizedIcuExpressions = nonNormalizedIcuExpressions;
    }
  };
  function tokenize(source, url, getTagDefinition, options = {}) {
    const tokenizer = new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, options);
    tokenizer.tokenize();
    return new TokenizeResult(mergeTextTokens(tokenizer.tokens), tokenizer.errors, tokenizer.nonNormalizedIcuExpressions);
  }
  var _CR_OR_CRLF_REGEXP = /\r\n?/g;
  function _unexpectedCharacterErrorMsg(charCode) {
    const char = charCode === $EOF ? "EOF" : String.fromCharCode(charCode);
    return `Unexpected character "${char}"`;
  }
  function _unknownEntityErrorMsg(entitySrc) {
    return `Unknown entity "${entitySrc}" - use the "&#<decimal>;" or  "&#x<hex>;" syntax`;
  }
  function _unparsableEntityErrorMsg(type, entityStr) {
    return `Unable to parse entity "${entityStr}" - ${type} character reference entities must end with ";"`;
  }
  var CharacterReferenceType;
  (function(CharacterReferenceType2) {
    CharacterReferenceType2["HEX"] = "hexadecimal";
    CharacterReferenceType2["DEC"] = "decimal";
  })(CharacterReferenceType || (CharacterReferenceType = {}));
  var _ControlFlowError = class {
    constructor(error2) {
      this.error = error2;
    }
  };
  var _Tokenizer = class {
    /**
     * @param _file The html source file being tokenized.
     * @param _getTagDefinition A function that will retrieve a tag definition for a given tag name.
     * @param options Configuration of the tokenization.
     */
    constructor(_file, _getTagDefinition, options) {
      this._getTagDefinition = _getTagDefinition;
      this._currentTokenStart = null;
      this._currentTokenType = null;
      this._expansionCaseStack = [];
      this._inInterpolation = false;
      this.tokens = [];
      this.errors = [];
      this.nonNormalizedIcuExpressions = [];
      this._tokenizeIcu = options.tokenizeExpansionForms || false;
      this._interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;
      this._leadingTriviaCodePoints = options.leadingTriviaChars && options.leadingTriviaChars.map((c) => c.codePointAt(0) || 0);
      const range = options.range || { endPos: _file.content.length, startPos: 0, startLine: 0, startCol: 0 };
      this._cursor = options.escapedString ? new EscapedCharacterCursor(_file, range) : new PlainCharacterCursor(_file, range);
      this._preserveLineEndings = options.preserveLineEndings || false;
      this._i18nNormalizeLineEndingsInICUs = options.i18nNormalizeLineEndingsInICUs || false;
      this._tokenizeBlocks = options.tokenizeBlocks ?? true;
      try {
        this._cursor.init();
      } catch (e2) {
        this.handleError(e2);
      }
    }
    _processCarriageReturns(content) {
      if (this._preserveLineEndings) {
        return content;
      }
      return content.replace(_CR_OR_CRLF_REGEXP, "\n");
    }
    tokenize() {
      while (this._cursor.peek() !== $EOF) {
        const start = this._cursor.clone();
        try {
          if (this._attemptCharCode($LT)) {
            if (this._attemptCharCode($BANG)) {
              if (this._attemptCharCode($LBRACKET)) {
                this._consumeCdata(start);
              } else if (this._attemptCharCode($MINUS)) {
                this._consumeComment(start);
              } else {
                this._consumeDocType(start);
              }
            } else if (this._attemptCharCode($SLASH)) {
              this._consumeTagClose(start);
            } else {
              this._consumeTagOpen(start);
            }
          } else if (this._tokenizeBlocks && this._attemptCharCode($AT)) {
            this._consumeBlockStart(start);
          } else if (this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansionCase() && !this._isInExpansionForm() && this._attemptCharCode($RBRACE)) {
            this._consumeBlockEnd(start);
          } else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
            this._consumeWithInterpolation(5, 8, () => this._isTextEnd(), () => this._isTagStart());
          }
        } catch (e2) {
          this.handleError(e2);
        }
      }
      this._beginToken(
        29
        /* TokenType.EOF */
      );
      this._endToken([]);
    }
    _getBlockName() {
      let spacesInNameAllowed = false;
      const nameCursor = this._cursor.clone();
      this._attemptCharCodeUntilFn((code) => {
        if (isWhitespace(code)) {
          return !spacesInNameAllowed;
        }
        if (isBlockNameChar(code)) {
          spacesInNameAllowed = true;
          return false;
        }
        return true;
      });
      return this._cursor.getChars(nameCursor).trim();
    }
    _consumeBlockStart(start) {
      this._beginToken(24, start);
      const startToken = this._endToken([this._getBlockName()]);
      if (this._cursor.peek() === $LPAREN) {
        this._cursor.advance();
        this._consumeBlockParameters();
        this._attemptCharCodeUntilFn(isNotWhitespace);
        if (this._attemptCharCode($RPAREN)) {
          this._attemptCharCodeUntilFn(isNotWhitespace);
        } else {
          startToken.type = 28;
          return;
        }
      }
      if (this._attemptCharCode($LBRACE)) {
        this._beginToken(
          25
          /* TokenType.BLOCK_OPEN_END */
        );
        this._endToken([]);
      } else {
        startToken.type = 28;
      }
    }
    _consumeBlockEnd(start) {
      this._beginToken(26, start);
      this._endToken([]);
    }
    _consumeBlockParameters() {
      this._attemptCharCodeUntilFn(isBlockParameterChar);
      while (this._cursor.peek() !== $RPAREN && this._cursor.peek() !== $EOF) {
        this._beginToken(
          27
          /* TokenType.BLOCK_PARAMETER */
        );
        const start = this._cursor.clone();
        let inQuote = null;
        let openParens = 0;
        while (this._cursor.peek() !== $SEMICOLON && this._cursor.peek() !== $EOF || inQuote !== null) {
          const char = this._cursor.peek();
          if (char === $BACKSLASH) {
            this._cursor.advance();
          } else if (char === inQuote) {
            inQuote = null;
          } else if (inQuote === null && isQuote(char)) {
            inQuote = char;
          } else if (char === $LPAREN && inQuote === null) {
            openParens++;
          } else if (char === $RPAREN && inQuote === null) {
            if (openParens === 0) {
              break;
            } else if (openParens > 0) {
              openParens--;
            }
          }
          this._cursor.advance();
        }
        this._endToken([this._cursor.getChars(start)]);
        this._attemptCharCodeUntilFn(isBlockParameterChar);
      }
    }
    /**
     * @returns whether an ICU token has been created
     * @internal
     */
    _tokenizeExpansionForm() {
      if (this.isExpansionFormStart()) {
        this._consumeExpansionFormStart();
        return true;
      }
      if (isExpansionCaseStart(this._cursor.peek()) && this._isInExpansionForm()) {
        this._consumeExpansionCaseStart();
        return true;
      }
      if (this._cursor.peek() === $RBRACE) {
        if (this._isInExpansionCase()) {
          this._consumeExpansionCaseEnd();
          return true;
        }
        if (this._isInExpansionForm()) {
          this._consumeExpansionFormEnd();
          return true;
        }
      }
      return false;
    }
    _beginToken(type, start = this._cursor.clone()) {
      this._currentTokenStart = start;
      this._currentTokenType = type;
    }
    _endToken(parts, end) {
      if (this._currentTokenStart === null) {
        throw new TokenError("Programming error - attempted to end a token when there was no start to the token", this._currentTokenType, this._cursor.getSpan(end));
      }
      if (this._currentTokenType === null) {
        throw new TokenError("Programming error - attempted to end a token which has no token type", null, this._cursor.getSpan(this._currentTokenStart));
      }
      const token = {
        type: this._currentTokenType,
        parts,
        sourceSpan: (end ?? this._cursor).getSpan(this._currentTokenStart, this._leadingTriviaCodePoints)
      };
      this.tokens.push(token);
      this._currentTokenStart = null;
      this._currentTokenType = null;
      return token;
    }
    _createError(msg, span) {
      if (this._isInExpansionForm()) {
        msg += ` (Do you have an unescaped "{" in your template? Use "{{ '{' }}") to escape it.)`;
      }
      const error2 = new TokenError(msg, this._currentTokenType, span);
      this._currentTokenStart = null;
      this._currentTokenType = null;
      return new _ControlFlowError(error2);
    }
    handleError(e2) {
      if (e2 instanceof CursorError) {
        e2 = this._createError(e2.msg, this._cursor.getSpan(e2.cursor));
      }
      if (e2 instanceof _ControlFlowError) {
        this.errors.push(e2.error);
      } else {
        throw e2;
      }
    }
    _attemptCharCode(charCode) {
      if (this._cursor.peek() === charCode) {
        this._cursor.advance();
        return true;
      }
      return false;
    }
    _attemptCharCodeCaseInsensitive(charCode) {
      if (compareCharCodeCaseInsensitive(this._cursor.peek(), charCode)) {
        this._cursor.advance();
        return true;
      }
      return false;
    }
    _requireCharCode(charCode) {
      const location2 = this._cursor.clone();
      if (!this._attemptCharCode(charCode)) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location2));
      }
    }
    _attemptStr(chars) {
      const len = chars.length;
      if (this._cursor.charsLeft() < len) {
        return false;
      }
      const initialPosition = this._cursor.clone();
      for (let i = 0; i < len; i++) {
        if (!this._attemptCharCode(chars.charCodeAt(i))) {
          this._cursor = initialPosition;
          return false;
        }
      }
      return true;
    }
    _attemptStrCaseInsensitive(chars) {
      for (let i = 0; i < chars.length; i++) {
        if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
          return false;
        }
      }
      return true;
    }
    _requireStr(chars) {
      const location2 = this._cursor.clone();
      if (!this._attemptStr(chars)) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location2));
      }
    }
    _attemptCharCodeUntilFn(predicate) {
      while (!predicate(this._cursor.peek())) {
        this._cursor.advance();
      }
    }
    _requireCharCodeUntilFn(predicate, len) {
      const start = this._cursor.clone();
      this._attemptCharCodeUntilFn(predicate);
      if (this._cursor.diff(start) < len) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));
      }
    }
    _attemptUntilChar(char) {
      while (this._cursor.peek() !== char) {
        this._cursor.advance();
      }
    }
    _readChar() {
      const char = String.fromCodePoint(this._cursor.peek());
      this._cursor.advance();
      return char;
    }
    _consumeEntity(textTokenType) {
      this._beginToken(
        9
        /* TokenType.ENCODED_ENTITY */
      );
      const start = this._cursor.clone();
      this._cursor.advance();
      if (this._attemptCharCode($HASH)) {
        const isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
        const codeStart = this._cursor.clone();
        this._attemptCharCodeUntilFn(isDigitEntityEnd);
        if (this._cursor.peek() != $SEMICOLON) {
          this._cursor.advance();
          const entityType = isHex ? CharacterReferenceType.HEX : CharacterReferenceType.DEC;
          throw this._createError(_unparsableEntityErrorMsg(entityType, this._cursor.getChars(start)), this._cursor.getSpan());
        }
        const strNum = this._cursor.getChars(codeStart);
        this._cursor.advance();
        try {
          const charCode = parseInt(strNum, isHex ? 16 : 10);
          this._endToken([String.fromCharCode(charCode), this._cursor.getChars(start)]);
        } catch {
          throw this._createError(_unknownEntityErrorMsg(this._cursor.getChars(start)), this._cursor.getSpan());
        }
      } else {
        const nameStart = this._cursor.clone();
        this._attemptCharCodeUntilFn(isNamedEntityEnd);
        if (this._cursor.peek() != $SEMICOLON) {
          this._beginToken(textTokenType, start);
          this._cursor = nameStart;
          this._endToken(["&"]);
        } else {
          const name = this._cursor.getChars(nameStart);
          this._cursor.advance();
          const char = NAMED_ENTITIES[name];
          if (!char) {
            throw this._createError(_unknownEntityErrorMsg(name), this._cursor.getSpan(start));
          }
          this._endToken([char, `&${name};`]);
        }
      }
    }
    _consumeRawText(consumeEntities, endMarkerPredicate) {
      this._beginToken(
        consumeEntities ? 6 : 7
        /* TokenType.RAW_TEXT */
      );
      const parts = [];
      while (true) {
        const tagCloseStart = this._cursor.clone();
        const foundEndMarker = endMarkerPredicate();
        this._cursor = tagCloseStart;
        if (foundEndMarker) {
          break;
        }
        if (consumeEntities && this._cursor.peek() === $AMPERSAND) {
          this._endToken([this._processCarriageReturns(parts.join(""))]);
          parts.length = 0;
          this._consumeEntity(
            6
            /* TokenType.ESCAPABLE_RAW_TEXT */
          );
          this._beginToken(
            6
            /* TokenType.ESCAPABLE_RAW_TEXT */
          );
        } else {
          parts.push(this._readChar());
        }
      }
      this._endToken([this._processCarriageReturns(parts.join(""))]);
    }
    _consumeComment(start) {
      this._beginToken(10, start);
      this._requireCharCode($MINUS);
      this._endToken([]);
      this._consumeRawText(false, () => this._attemptStr("-->"));
      this._beginToken(
        11
        /* TokenType.COMMENT_END */
      );
      this._requireStr("-->");
      this._endToken([]);
    }
    _consumeCdata(start) {
      this._beginToken(12, start);
      this._requireStr("CDATA[");
      this._endToken([]);
      this._consumeRawText(false, () => this._attemptStr("]]>"));
      this._beginToken(
        13
        /* TokenType.CDATA_END */
      );
      this._requireStr("]]>");
      this._endToken([]);
    }
    _consumeDocType(start) {
      this._beginToken(18, start);
      const contentStart = this._cursor.clone();
      this._attemptUntilChar($GT);
      const content = this._cursor.getChars(contentStart);
      this._cursor.advance();
      this._endToken([content]);
    }
    _consumePrefixAndName() {
      const nameOrPrefixStart = this._cursor.clone();
      let prefix = "";
      while (this._cursor.peek() !== $COLON && !isPrefixEnd(this._cursor.peek())) {
        this._cursor.advance();
      }
      let nameStart;
      if (this._cursor.peek() === $COLON) {
        prefix = this._cursor.getChars(nameOrPrefixStart);
        this._cursor.advance();
        nameStart = this._cursor.clone();
      } else {
        nameStart = nameOrPrefixStart;
      }
      this._requireCharCodeUntilFn(isNameEnd, prefix === "" ? 0 : 1);
      const name = this._cursor.getChars(nameStart);
      return [prefix, name];
    }
    _consumeTagOpen(start) {
      let tagName;
      let prefix;
      let openTagToken;
      try {
        if (!isAsciiLetter(this._cursor.peek())) {
          throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));
        }
        openTagToken = this._consumeTagOpenStart(start);
        prefix = openTagToken.parts[0];
        tagName = openTagToken.parts[1];
        this._attemptCharCodeUntilFn(isNotWhitespace);
        while (this._cursor.peek() !== $SLASH && this._cursor.peek() !== $GT && this._cursor.peek() !== $LT && this._cursor.peek() !== $EOF) {
          this._consumeAttributeName();
          this._attemptCharCodeUntilFn(isNotWhitespace);
          if (this._attemptCharCode($EQ)) {
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._consumeAttributeValue();
          }
          this._attemptCharCodeUntilFn(isNotWhitespace);
        }
        this._consumeTagOpenEnd();
      } catch (e2) {
        if (e2 instanceof _ControlFlowError) {
          if (openTagToken) {
            openTagToken.type = 4;
          } else {
            this._beginToken(5, start);
            this._endToken(["<"]);
          }
          return;
        }
        throw e2;
      }
      const contentTokenType = this._getTagDefinition(tagName).getContentType(prefix);
      if (contentTokenType === TagContentType.RAW_TEXT) {
        this._consumeRawTextWithTagClose(prefix, tagName, false);
      } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
        this._consumeRawTextWithTagClose(prefix, tagName, true);
      }
    }
    _consumeRawTextWithTagClose(prefix, tagName, consumeEntities) {
      this._consumeRawText(consumeEntities, () => {
        if (!this._attemptCharCode($LT))
          return false;
        if (!this._attemptCharCode($SLASH))
          return false;
        this._attemptCharCodeUntilFn(isNotWhitespace);
        if (!this._attemptStrCaseInsensitive(tagName))
          return false;
        this._attemptCharCodeUntilFn(isNotWhitespace);
        return this._attemptCharCode($GT);
      });
      this._beginToken(
        3
        /* TokenType.TAG_CLOSE */
      );
      this._requireCharCodeUntilFn((code) => code === $GT, 3);
      this._cursor.advance();
      this._endToken([prefix, tagName]);
    }
    _consumeTagOpenStart(start) {
      this._beginToken(0, start);
      const parts = this._consumePrefixAndName();
      return this._endToken(parts);
    }
    _consumeAttributeName() {
      const attrNameStart = this._cursor.peek();
      if (attrNameStart === $SQ || attrNameStart === $DQ) {
        throw this._createError(_unexpectedCharacterErrorMsg(attrNameStart), this._cursor.getSpan());
      }
      this._beginToken(
        14
        /* TokenType.ATTR_NAME */
      );
      const prefixAndName = this._consumePrefixAndName();
      this._endToken(prefixAndName);
    }
    _consumeAttributeValue() {
      if (this._cursor.peek() === $SQ || this._cursor.peek() === $DQ) {
        const quoteChar = this._cursor.peek();
        this._consumeQuote(quoteChar);
        const endPredicate = () => this._cursor.peek() === quoteChar;
        this._consumeWithInterpolation(16, 17, endPredicate, endPredicate);
        this._consumeQuote(quoteChar);
      } else {
        const endPredicate = () => isNameEnd(this._cursor.peek());
        this._consumeWithInterpolation(16, 17, endPredicate, endPredicate);
      }
    }
    _consumeQuote(quoteChar) {
      this._beginToken(
        15
        /* TokenType.ATTR_QUOTE */
      );
      this._requireCharCode(quoteChar);
      this._endToken([String.fromCodePoint(quoteChar)]);
    }
    _consumeTagOpenEnd() {
      const tokenType = this._attemptCharCode($SLASH) ? 2 : 1;
      this._beginToken(tokenType);
      this._requireCharCode($GT);
      this._endToken([]);
    }
    _consumeTagClose(start) {
      this._beginToken(3, start);
      this._attemptCharCodeUntilFn(isNotWhitespace);
      const prefixAndName = this._consumePrefixAndName();
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._requireCharCode($GT);
      this._endToken(prefixAndName);
    }
    _consumeExpansionFormStart() {
      this._beginToken(
        19
        /* TokenType.EXPANSION_FORM_START */
      );
      this._requireCharCode($LBRACE);
      this._endToken([]);
      this._expansionCaseStack.push(
        19
        /* TokenType.EXPANSION_FORM_START */
      );
      this._beginToken(
        7
        /* TokenType.RAW_TEXT */
      );
      const condition = this._readUntil($COMMA);
      const normalizedCondition = this._processCarriageReturns(condition);
      if (this._i18nNormalizeLineEndingsInICUs) {
        this._endToken([normalizedCondition]);
      } else {
        const conditionToken = this._endToken([condition]);
        if (normalizedCondition !== condition) {
          this.nonNormalizedIcuExpressions.push(conditionToken);
        }
      }
      this._requireCharCode($COMMA);
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._beginToken(
        7
        /* TokenType.RAW_TEXT */
      );
      const type = this._readUntil($COMMA);
      this._endToken([type]);
      this._requireCharCode($COMMA);
      this._attemptCharCodeUntilFn(isNotWhitespace);
    }
    _consumeExpansionCaseStart() {
      this._beginToken(
        20
        /* TokenType.EXPANSION_CASE_VALUE */
      );
      const value = this._readUntil($LBRACE).trim();
      this._endToken([value]);
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._beginToken(
        21
        /* TokenType.EXPANSION_CASE_EXP_START */
      );
      this._requireCharCode($LBRACE);
      this._endToken([]);
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._expansionCaseStack.push(
        21
        /* TokenType.EXPANSION_CASE_EXP_START */
      );
    }
    _consumeExpansionCaseEnd() {
      this._beginToken(
        22
        /* TokenType.EXPANSION_CASE_EXP_END */
      );
      this._requireCharCode($RBRACE);
      this._endToken([]);
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._expansionCaseStack.pop();
    }
    _consumeExpansionFormEnd() {
      this._beginToken(
        23
        /* TokenType.EXPANSION_FORM_END */
      );
      this._requireCharCode($RBRACE);
      this._endToken([]);
      this._expansionCaseStack.pop();
    }
    /**
     * Consume a string that may contain interpolation expressions.
     *
     * The first token consumed will be of `tokenType` and then there will be alternating
     * `interpolationTokenType` and `tokenType` tokens until the `endPredicate()` returns true.
     *
     * If an interpolation token ends prematurely it will have no end marker in its `parts` array.
     *
     * @param textTokenType the kind of tokens to interleave around interpolation tokens.
     * @param interpolationTokenType the kind of tokens that contain interpolation.
     * @param endPredicate a function that should return true when we should stop consuming.
     * @param endInterpolation a function that should return true if there is a premature end to an
     *     interpolation expression - i.e. before we get to the normal interpolation closing marker.
     */
    _consumeWithInterpolation(textTokenType, interpolationTokenType, endPredicate, endInterpolation) {
      this._beginToken(textTokenType);
      const parts = [];
      while (!endPredicate()) {
        const current = this._cursor.clone();
        if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
          this._endToken([this._processCarriageReturns(parts.join(""))], current);
          parts.length = 0;
          this._consumeInterpolation(interpolationTokenType, current, endInterpolation);
          this._beginToken(textTokenType);
        } else if (this._cursor.peek() === $AMPERSAND) {
          this._endToken([this._processCarriageReturns(parts.join(""))]);
          parts.length = 0;
          this._consumeEntity(textTokenType);
          this._beginToken(textTokenType);
        } else {
          parts.push(this._readChar());
        }
      }
      this._inInterpolation = false;
      this._endToken([this._processCarriageReturns(parts.join(""))]);
    }
    /**
     * Consume a block of text that has been interpreted as an Angular interpolation.
     *
     * @param interpolationTokenType the type of the interpolation token to generate.
     * @param interpolationStart a cursor that points to the start of this interpolation.
     * @param prematureEndPredicate a function that should return true if the next characters indicate
     *     an end to the interpolation before its normal closing marker.
     */
    _consumeInterpolation(interpolationTokenType, interpolationStart, prematureEndPredicate) {
      const parts = [];
      this._beginToken(interpolationTokenType, interpolationStart);
      parts.push(this._interpolationConfig.start);
      const expressionStart = this._cursor.clone();
      let inQuote = null;
      let inComment = false;
      while (this._cursor.peek() !== $EOF && (prematureEndPredicate === null || !prematureEndPredicate())) {
        const current = this._cursor.clone();
        if (this._isTagStart()) {
          this._cursor = current;
          parts.push(this._getProcessedChars(expressionStart, current));
          this._endToken(parts);
          return;
        }
        if (inQuote === null) {
          if (this._attemptStr(this._interpolationConfig.end)) {
            parts.push(this._getProcessedChars(expressionStart, current));
            parts.push(this._interpolationConfig.end);
            this._endToken(parts);
            return;
          } else if (this._attemptStr("//")) {
            inComment = true;
          }
        }
        const char = this._cursor.peek();
        this._cursor.advance();
        if (char === $BACKSLASH) {
          this._cursor.advance();
        } else if (char === inQuote) {
          inQuote = null;
        } else if (!inComment && inQuote === null && isQuote(char)) {
          inQuote = char;
        }
      }
      parts.push(this._getProcessedChars(expressionStart, this._cursor));
      this._endToken(parts);
    }
    _getProcessedChars(start, end) {
      return this._processCarriageReturns(end.getChars(start));
    }
    _isTextEnd() {
      if (this._isTagStart() || this._cursor.peek() === $EOF) {
        return true;
      }
      if (this._tokenizeIcu && !this._inInterpolation) {
        if (this.isExpansionFormStart()) {
          return true;
        }
        if (this._cursor.peek() === $RBRACE && this._isInExpansionCase()) {
          return true;
        }
      }
      if (this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansion() && (this._cursor.peek() === $AT || this._cursor.peek() === $RBRACE)) {
        return true;
      }
      return false;
    }
    /**
     * Returns true if the current cursor is pointing to the start of a tag
     * (opening/closing/comments/cdata/etc).
     */
    _isTagStart() {
      if (this._cursor.peek() === $LT) {
        const tmp = this._cursor.clone();
        tmp.advance();
        const code = tmp.peek();
        if ($a <= code && code <= $z || $A <= code && code <= $Z || code === $SLASH || code === $BANG) {
          return true;
        }
      }
      return false;
    }
    _readUntil(char) {
      const start = this._cursor.clone();
      this._attemptUntilChar(char);
      return this._cursor.getChars(start);
    }
    _isInExpansion() {
      return this._isInExpansionCase() || this._isInExpansionForm();
    }
    _isInExpansionCase() {
      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 21;
    }
    _isInExpansionForm() {
      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 19;
    }
    isExpansionFormStart() {
      if (this._cursor.peek() !== $LBRACE) {
        return false;
      }
      if (this._interpolationConfig) {
        const start = this._cursor.clone();
        const isInterpolation = this._attemptStr(this._interpolationConfig.start);
        this._cursor = start;
        return !isInterpolation;
      }
      return true;
    }
  };
  function isNotWhitespace(code) {
    return !isWhitespace(code) || code === $EOF;
  }
  function isNameEnd(code) {
    return isWhitespace(code) || code === $GT || code === $LT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ || code === $EOF;
  }
  function isPrefixEnd(code) {
    return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
  }
  function isDigitEntityEnd(code) {
    return code === $SEMICOLON || code === $EOF || !isAsciiHexDigit(code);
  }
  function isNamedEntityEnd(code) {
    return code === $SEMICOLON || code === $EOF || !isAsciiLetter(code);
  }
  function isExpansionCaseStart(peek) {
    return peek !== $RBRACE;
  }
  function compareCharCodeCaseInsensitive(code1, code2) {
    return toUpperCaseCharCode(code1) === toUpperCaseCharCode(code2);
  }
  function toUpperCaseCharCode(code) {
    return code >= $a && code <= $z ? code - $a + $A : code;
  }
  function isBlockNameChar(code) {
    return isAsciiLetter(code) || isDigit(code) || code === $_;
  }
  function isBlockParameterChar(code) {
    return code !== $SEMICOLON && isNotWhitespace(code);
  }
  function mergeTextTokens(srcTokens) {
    const dstTokens = [];
    let lastDstToken = void 0;
    for (let i = 0; i < srcTokens.length; i++) {
      const token = srcTokens[i];
      if (lastDstToken && lastDstToken.type === 5 && token.type === 5 || lastDstToken && lastDstToken.type === 16 && token.type === 16) {
        lastDstToken.parts[0] += token.parts[0];
        lastDstToken.sourceSpan.end = token.sourceSpan.end;
      } else {
        lastDstToken = token;
        dstTokens.push(lastDstToken);
      }
    }
    return dstTokens;
  }
  var PlainCharacterCursor = class _PlainCharacterCursor {
    constructor(fileOrCursor, range) {
      if (fileOrCursor instanceof _PlainCharacterCursor) {
        this.file = fileOrCursor.file;
        this.input = fileOrCursor.input;
        this.end = fileOrCursor.end;
        const state = fileOrCursor.state;
        this.state = {
          peek: state.peek,
          offset: state.offset,
          line: state.line,
          column: state.column
        };
      } else {
        if (!range) {
          throw new Error("Programming error: the range argument must be provided with a file argument.");
        }
        this.file = fileOrCursor;
        this.input = fileOrCursor.content;
        this.end = range.endPos;
        this.state = {
          peek: -1,
          offset: range.startPos,
          line: range.startLine,
          column: range.startCol
        };
      }
    }
    clone() {
      return new _PlainCharacterCursor(this);
    }
    peek() {
      return this.state.peek;
    }
    charsLeft() {
      return this.end - this.state.offset;
    }
    diff(other) {
      return this.state.offset - other.state.offset;
    }
    advance() {
      this.advanceState(this.state);
    }
    init() {
      this.updatePeek(this.state);
    }
    getSpan(start, leadingTriviaCodePoints) {
      start = start || this;
      let fullStart = start;
      if (leadingTriviaCodePoints) {
        while (this.diff(start) > 0 && leadingTriviaCodePoints.indexOf(start.peek()) !== -1) {
          if (fullStart === start) {
            start = start.clone();
          }
          start.advance();
        }
      }
      const startLocation = this.locationFromCursor(start);
      const endLocation = this.locationFromCursor(this);
      const fullStartLocation = fullStart !== start ? this.locationFromCursor(fullStart) : startLocation;
      return new ParseSourceSpan(startLocation, endLocation, fullStartLocation);
    }
    getChars(start) {
      return this.input.substring(start.state.offset, this.state.offset);
    }
    charAt(pos) {
      return this.input.charCodeAt(pos);
    }
    advanceState(state) {
      if (state.offset >= this.end) {
        this.state = state;
        throw new CursorError('Unexpected character "EOF"', this);
      }
      const currentChar = this.charAt(state.offset);
      if (currentChar === $LF) {
        state.line++;
        state.column = 0;
      } else if (!isNewLine(currentChar)) {
        state.column++;
      }
      state.offset++;
      this.updatePeek(state);
    }
    updatePeek(state) {
      state.peek = state.offset >= this.end ? $EOF : this.charAt(state.offset);
    }
    locationFromCursor(cursor) {
      return new ParseLocation(cursor.file, cursor.state.offset, cursor.state.line, cursor.state.column);
    }
  };
  var EscapedCharacterCursor = class _EscapedCharacterCursor extends PlainCharacterCursor {
    constructor(fileOrCursor, range) {
      if (fileOrCursor instanceof _EscapedCharacterCursor) {
        super(fileOrCursor);
        this.internalState = { ...fileOrCursor.internalState };
      } else {
        super(fileOrCursor, range);
        this.internalState = this.state;
      }
    }
    advance() {
      this.state = this.internalState;
      super.advance();
      this.processEscapeSequence();
    }
    init() {
      super.init();
      this.processEscapeSequence();
    }
    clone() {
      return new _EscapedCharacterCursor(this);
    }
    getChars(start) {
      const cursor = start.clone();
      let chars = "";
      while (cursor.internalState.offset < this.internalState.offset) {
        chars += String.fromCodePoint(cursor.peek());
        cursor.advance();
      }
      return chars;
    }
    /**
     * Process the escape sequence that starts at the current position in the text.
     *
     * This method is called to ensure that `peek` has the unescaped value of escape sequences.
     */
    processEscapeSequence() {
      const peek = () => this.internalState.peek;
      if (peek() === $BACKSLASH) {
        this.internalState = { ...this.state };
        this.advanceState(this.internalState);
        if (peek() === $n) {
          this.state.peek = $LF;
        } else if (peek() === $r) {
          this.state.peek = $CR;
        } else if (peek() === $v) {
          this.state.peek = $VTAB;
        } else if (peek() === $t) {
          this.state.peek = $TAB;
        } else if (peek() === $b) {
          this.state.peek = $BSPACE;
        } else if (peek() === $f) {
          this.state.peek = $FF;
        } else if (peek() === $u) {
          this.advanceState(this.internalState);
          if (peek() === $LBRACE) {
            this.advanceState(this.internalState);
            const digitStart = this.clone();
            let length = 0;
            while (peek() !== $RBRACE) {
              this.advanceState(this.internalState);
              length++;
            }
            this.state.peek = this.decodeHexDigits(digitStart, length);
          } else {
            const digitStart = this.clone();
            this.advanceState(this.internalState);
            this.advanceState(this.internalState);
            this.advanceState(this.internalState);
            this.state.peek = this.decodeHexDigits(digitStart, 4);
          }
        } else if (peek() === $x) {
          this.advanceState(this.internalState);
          const digitStart = this.clone();
          this.advanceState(this.internalState);
          this.state.peek = this.decodeHexDigits(digitStart, 2);
        } else if (isOctalDigit(peek())) {
          let octal = "";
          let length = 0;
          let previous = this.clone();
          while (isOctalDigit(peek()) && length < 3) {
            previous = this.clone();
            octal += String.fromCodePoint(peek());
            this.advanceState(this.internalState);
            length++;
          }
          this.state.peek = parseInt(octal, 8);
          this.internalState = previous.internalState;
        } else if (isNewLine(this.internalState.peek)) {
          this.advanceState(this.internalState);
          this.state = this.internalState;
        } else {
          this.state.peek = this.internalState.peek;
        }
      }
    }
    decodeHexDigits(start, length) {
      const hex = this.input.slice(start.internalState.offset, start.internalState.offset + length);
      const charCode = parseInt(hex, 16);
      if (!isNaN(charCode)) {
        return charCode;
      } else {
        start.state = start.internalState;
        throw new CursorError("Invalid hexadecimal escape sequence", start);
      }
    }
  };
  var CursorError = class {
    constructor(msg, cursor) {
      this.msg = msg;
      this.cursor = cursor;
    }
  };
  var TreeError = class _TreeError extends ParseError {
    static create(elementName, span, msg) {
      return new _TreeError(elementName, span, msg);
    }
    constructor(elementName, span, msg) {
      super(span, msg);
      this.elementName = elementName;
    }
  };
  var ParseTreeResult = class {
    constructor(rootNodes, errors) {
      this.rootNodes = rootNodes;
      this.errors = errors;
    }
  };
  var Parser = class {
    constructor(getTagDefinition) {
      this.getTagDefinition = getTagDefinition;
    }
    parse(source, url, options) {
      const tokenizeResult = tokenize(source, url, this.getTagDefinition, options);
      const parser = new _TreeBuilder(tokenizeResult.tokens, this.getTagDefinition);
      parser.build();
      return new ParseTreeResult(parser.rootNodes, tokenizeResult.errors.concat(parser.errors));
    }
  };
  var _TreeBuilder = class __TreeBuilder {
    constructor(tokens, getTagDefinition) {
      this.tokens = tokens;
      this.getTagDefinition = getTagDefinition;
      this._index = -1;
      this._containerStack = [];
      this.rootNodes = [];
      this.errors = [];
      this._advance();
    }
    build() {
      while (this._peek.type !== 29) {
        if (this._peek.type === 0 || this._peek.type === 4) {
          this._consumeStartTag(this._advance());
        } else if (this._peek.type === 3) {
          this._consumeEndTag(this._advance());
        } else if (this._peek.type === 12) {
          this._closeVoidElement();
          this._consumeCdata(this._advance());
        } else if (this._peek.type === 10) {
          this._closeVoidElement();
          this._consumeComment(this._advance());
        } else if (this._peek.type === 5 || this._peek.type === 7 || this._peek.type === 6) {
          this._closeVoidElement();
          this._consumeText(this._advance());
        } else if (this._peek.type === 19) {
          this._consumeExpansion(this._advance());
        } else if (this._peek.type === 24) {
          this._closeVoidElement();
          this._consumeBlockOpen(this._advance());
        } else if (this._peek.type === 26) {
          this._closeVoidElement();
          this._consumeBlockClose(this._advance());
        } else if (this._peek.type === 28) {
          this._closeVoidElement();
          this._consumeIncompleteBlock(this._advance());
        } else {
          this._advance();
        }
      }
      for (const leftoverContainer of this._containerStack) {
        if (leftoverContainer instanceof Block) {
          this.errors.push(TreeError.create(leftoverContainer.name, leftoverContainer.sourceSpan, `Unclosed block "${leftoverContainer.name}"`));
        }
      }
    }
    _advance() {
      const prev = this._peek;
      if (this._index < this.tokens.length - 1) {
        this._index++;
      }
      this._peek = this.tokens[this._index];
      return prev;
    }
    _advanceIf(type) {
      if (this._peek.type === type) {
        return this._advance();
      }
      return null;
    }
    _consumeCdata(_startToken) {
      this._consumeText(this._advance());
      this._advanceIf(
        13
        /* TokenType.CDATA_END */
      );
    }
    _consumeComment(token) {
      const text2 = this._advanceIf(
        7
        /* TokenType.RAW_TEXT */
      );
      const endToken = this._advanceIf(
        11
        /* TokenType.COMMENT_END */
      );
      const value = text2 != null ? text2.parts[0].trim() : null;
      const sourceSpan = endToken == null ? token.sourceSpan : new ParseSourceSpan(token.sourceSpan.start, endToken.sourceSpan.end, token.sourceSpan.fullStart);
      this._addToParent(new Comment(value, sourceSpan));
    }
    _consumeExpansion(token) {
      const switchValue = this._advance();
      const type = this._advance();
      const cases = [];
      while (this._peek.type === 20) {
        const expCase = this._parseExpansionCase();
        if (!expCase)
          return;
        cases.push(expCase);
      }
      if (this._peek.type !== 23) {
        this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '}'.`));
        return;
      }
      const sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end, token.sourceSpan.fullStart);
      this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
      this._advance();
    }
    _parseExpansionCase() {
      const value = this._advance();
      if (this._peek.type !== 21) {
        this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '{'.`));
        return null;
      }
      const start = this._advance();
      const exp = this._collectExpansionExpTokens(start);
      if (!exp)
        return null;
      const end = this._advance();
      exp.push({ type: 29, parts: [], sourceSpan: end.sourceSpan });
      const expansionCaseParser = new __TreeBuilder(exp, this.getTagDefinition);
      expansionCaseParser.build();
      if (expansionCaseParser.errors.length > 0) {
        this.errors = this.errors.concat(expansionCaseParser.errors);
        return null;
      }
      const sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end, value.sourceSpan.fullStart);
      const expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end, start.sourceSpan.fullStart);
      return new ExpansionCase(value.parts[0], expansionCaseParser.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
    }
    _collectExpansionExpTokens(start) {
      const exp = [];
      const expansionFormStack = [
        21
        /* TokenType.EXPANSION_CASE_EXP_START */
      ];
      while (true) {
        if (this._peek.type === 19 || this._peek.type === 21) {
          expansionFormStack.push(this._peek.type);
        }
        if (this._peek.type === 22) {
          if (lastOnStack(
            expansionFormStack,
            21
            /* TokenType.EXPANSION_CASE_EXP_START */
          )) {
            expansionFormStack.pop();
            if (expansionFormStack.length === 0)
              return exp;
          } else {
            this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
            return null;
          }
        }
        if (this._peek.type === 23) {
          if (lastOnStack(
            expansionFormStack,
            19
            /* TokenType.EXPANSION_FORM_START */
          )) {
            expansionFormStack.pop();
          } else {
            this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
            return null;
          }
        }
        if (this._peek.type === 29) {
          this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
          return null;
        }
        exp.push(this._advance());
      }
    }
    _consumeText(token) {
      const tokens = [token];
      const startSpan = token.sourceSpan;
      let text2 = token.parts[0];
      if (text2.length > 0 && text2[0] === "\n") {
        const parent = this._getContainer();
        if (parent != null && parent.children.length === 0 && this.getTagDefinition(parent.name).ignoreFirstLf) {
          text2 = text2.substring(1);
          tokens[0] = { type: token.type, sourceSpan: token.sourceSpan, parts: [text2] };
        }
      }
      while (this._peek.type === 8 || this._peek.type === 5 || this._peek.type === 9) {
        token = this._advance();
        tokens.push(token);
        if (token.type === 8) {
          text2 += token.parts.join("").replace(/&([^;]+);/g, decodeEntity);
        } else if (token.type === 9) {
          text2 += token.parts[0];
        } else {
          text2 += token.parts.join("");
        }
      }
      if (text2.length > 0) {
        const endSpan = token.sourceSpan;
        this._addToParent(new Text2(text2, new ParseSourceSpan(startSpan.start, endSpan.end, startSpan.fullStart, startSpan.details), tokens));
      }
    }
    _closeVoidElement() {
      const el = this._getContainer();
      if (el instanceof Element2 && this.getTagDefinition(el.name).isVoid) {
        this._containerStack.pop();
      }
    }
    _consumeStartTag(startTagToken) {
      const [prefix, name] = startTagToken.parts;
      const attrs = [];
      while (this._peek.type === 14) {
        attrs.push(this._consumeAttr(this._advance()));
      }
      const fullName = this._getElementFullName(prefix, name, this._getClosestParentElement());
      let selfClosing = false;
      if (this._peek.type === 2) {
        this._advance();
        selfClosing = true;
        const tagDef = this.getTagDefinition(fullName);
        if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
          this.errors.push(TreeError.create(fullName, startTagToken.sourceSpan, `Only void, custom and foreign elements can be self closed "${startTagToken.parts[1]}"`));
        }
      } else if (this._peek.type === 1) {
        this._advance();
        selfClosing = false;
      }
      const end = this._peek.sourceSpan.fullStart;
      const span = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);
      const startSpan = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);
      const el = new Element2(fullName, attrs, [], span, startSpan, void 0);
      const parentEl = this._getContainer();
      this._pushContainer(el, parentEl instanceof Element2 && this.getTagDefinition(parentEl.name).isClosedByChild(el.name));
      if (selfClosing) {
        this._popContainer(fullName, Element2, span);
      } else if (startTagToken.type === 4) {
        this._popContainer(fullName, Element2, null);
        this.errors.push(TreeError.create(fullName, span, `Opening tag "${fullName}" not terminated.`));
      }
    }
    _pushContainer(node, isClosedByChild) {
      if (isClosedByChild) {
        this._containerStack.pop();
      }
      this._addToParent(node);
      this._containerStack.push(node);
    }
    _consumeEndTag(endTagToken) {
      const fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getClosestParentElement());
      if (this.getTagDefinition(fullName).isVoid) {
        this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, `Void elements do not have end tags "${endTagToken.parts[1]}"`));
      } else if (!this._popContainer(fullName, Element2, endTagToken.sourceSpan)) {
        const errMsg = `Unexpected closing tag "${fullName}". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;
        this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));
      }
    }
    /**
     * Closes the nearest element with the tag name `fullName` in the parse tree.
     * `endSourceSpan` is the span of the closing tag, or null if the element does
     * not have a closing tag (for example, this happens when an incomplete
     * opening tag is recovered).
     */
    _popContainer(expectedName, expectedType, endSourceSpan) {
      let unexpectedCloseTagDetected = false;
      for (let stackIndex = this._containerStack.length - 1; stackIndex >= 0; stackIndex--) {
        const node = this._containerStack[stackIndex];
        if ((node.name === expectedName || expectedName === null) && node instanceof expectedType) {
          node.endSourceSpan = endSourceSpan;
          node.sourceSpan.end = endSourceSpan !== null ? endSourceSpan.end : node.sourceSpan.end;
          this._containerStack.splice(stackIndex, this._containerStack.length - stackIndex);
          return !unexpectedCloseTagDetected;
        }
        if (node instanceof Block || node instanceof Element2 && !this.getTagDefinition(node.name).closedByParent) {
          unexpectedCloseTagDetected = true;
        }
      }
      return false;
    }
    _consumeAttr(attrName) {
      const fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
      let attrEnd = attrName.sourceSpan.end;
      if (this._peek.type === 15) {
        this._advance();
      }
      let value = "";
      const valueTokens = [];
      let valueStartSpan = void 0;
      let valueEnd = void 0;
      const nextTokenType = this._peek.type;
      if (nextTokenType === 16) {
        valueStartSpan = this._peek.sourceSpan;
        valueEnd = this._peek.sourceSpan.end;
        while (this._peek.type === 16 || this._peek.type === 17 || this._peek.type === 9) {
          const valueToken = this._advance();
          valueTokens.push(valueToken);
          if (valueToken.type === 17) {
            value += valueToken.parts.join("").replace(/&([^;]+);/g, decodeEntity);
          } else if (valueToken.type === 9) {
            value += valueToken.parts[0];
          } else {
            value += valueToken.parts.join("");
          }
          valueEnd = attrEnd = valueToken.sourceSpan.end;
        }
      }
      if (this._peek.type === 15) {
        const quoteToken = this._advance();
        attrEnd = quoteToken.sourceSpan.end;
      }
      const valueSpan = valueStartSpan && valueEnd && new ParseSourceSpan(valueStartSpan.start, valueEnd, valueStartSpan.fullStart);
      return new Attribute2(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, attrEnd, attrName.sourceSpan.fullStart), attrName.sourceSpan, valueSpan, valueTokens.length > 0 ? valueTokens : void 0, void 0);
    }
    _consumeBlockOpen(token) {
      const parameters = [];
      while (this._peek.type === 27) {
        const paramToken = this._advance();
        parameters.push(new BlockParameter(paramToken.parts[0], paramToken.sourceSpan));
      }
      if (this._peek.type === 25) {
        this._advance();
      }
      const end = this._peek.sourceSpan.fullStart;
      const span = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);
      const startSpan = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);
      const block = new Block(token.parts[0], parameters, [], span, token.sourceSpan, startSpan);
      this._pushContainer(block, false);
    }
    _consumeBlockClose(token) {
      if (!this._popContainer(null, Block, token.sourceSpan)) {
        this.errors.push(TreeError.create(null, token.sourceSpan, `Unexpected closing block. The block may have been closed earlier. If you meant to write the } character, you should use the "&#125;" HTML entity instead.`));
      }
    }
    _consumeIncompleteBlock(token) {
      const parameters = [];
      while (this._peek.type === 27) {
        const paramToken = this._advance();
        parameters.push(new BlockParameter(paramToken.parts[0], paramToken.sourceSpan));
      }
      const end = this._peek.sourceSpan.fullStart;
      const span = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);
      const startSpan = new ParseSourceSpan(token.sourceSpan.start, end, token.sourceSpan.fullStart);
      const block = new Block(token.parts[0], parameters, [], span, token.sourceSpan, startSpan);
      this._pushContainer(block, false);
      this._popContainer(null, Block, null);
      this.errors.push(TreeError.create(token.parts[0], span, `Incomplete block "${token.parts[0]}". If you meant to write the @ character, you should use the "&#64;" HTML entity instead.`));
    }
    _getContainer() {
      return this._containerStack.length > 0 ? this._containerStack[this._containerStack.length - 1] : null;
    }
    _getClosestParentElement() {
      for (let i = this._containerStack.length - 1; i > -1; i--) {
        if (this._containerStack[i] instanceof Element2) {
          return this._containerStack[i];
        }
      }
      return null;
    }
    _addToParent(node) {
      const parent = this._getContainer();
      if (parent === null) {
        this.rootNodes.push(node);
      } else {
        parent.children.push(node);
      }
    }
    _getElementFullName(prefix, localName, parentElement) {
      if (prefix === "") {
        prefix = this.getTagDefinition(localName).implicitNamespacePrefix || "";
        if (prefix === "" && parentElement != null) {
          const parentTagName = splitNsName(parentElement.name)[1];
          const parentTagDefinition = this.getTagDefinition(parentTagName);
          if (!parentTagDefinition.preventNamespaceInheritance) {
            prefix = getNsPrefix(parentElement.name);
          }
        }
      }
      return mergeNsAndName(prefix, localName);
    }
  };
  function lastOnStack(stack, element2) {
    return stack.length > 0 && stack[stack.length - 1] === element2;
  }
  function decodeEntity(match2, entity) {
    if (NAMED_ENTITIES[entity] !== void 0) {
      return NAMED_ENTITIES[entity] || match2;
    }
    if (/^#x[a-f0-9]+$/i.test(entity)) {
      return String.fromCodePoint(parseInt(entity.slice(2), 16));
    }
    if (/^#\d+$/.test(entity)) {
      return String.fromCodePoint(parseInt(entity.slice(1), 10));
    }
    return match2;
  }
  var TRUSTED_TYPES_SINKS = /* @__PURE__ */ new Set([
    // NOTE: All strings in this set *must* be lowercase!
    // TrustedHTML
    "iframe|srcdoc",
    "*|innerhtml",
    "*|outerhtml",
    // NB: no TrustedScript here, as the corresponding tags are stripped by the compiler.
    // TrustedScriptURL
    "embed|src",
    "object|codebase",
    "object|data"
  ]);
  function isTrustedTypesSink(tagName, propName) {
    tagName = tagName.toLowerCase();
    propName = propName.toLowerCase();
    return TRUSTED_TYPES_SINKS.has(tagName + "|" + propName) || TRUSTED_TYPES_SINKS.has("*|" + propName);
  }
  var setI18nRefs = (htmlNode, i18nNode) => {
    if (htmlNode instanceof NodeWithI18n) {
      if (i18nNode instanceof IcuPlaceholder && htmlNode.i18n instanceof Message) {
        i18nNode.previousMessage = htmlNode.i18n;
      }
      htmlNode.i18n = i18nNode;
    }
    return i18nNode;
  };
  var I18nMetaVisitor = class {
    constructor(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG, keepI18nAttrs = false, enableI18nLegacyMessageIdFormat = false, containerBlocks = DEFAULT_CONTAINER_BLOCKS) {
      this.interpolationConfig = interpolationConfig;
      this.keepI18nAttrs = keepI18nAttrs;
      this.enableI18nLegacyMessageIdFormat = enableI18nLegacyMessageIdFormat;
      this.containerBlocks = containerBlocks;
      this.hasI18nMeta = false;
      this._errors = [];
    }
    _generateI18nMessage(nodes, meta = "", visitNodeFn) {
      const { meaning, description, customId } = this._parseMetadata(meta);
      const createI18nMessage2 = createI18nMessageFactory(this.interpolationConfig, this.containerBlocks);
      const message = createI18nMessage2(nodes, meaning, description, customId, visitNodeFn);
      this._setMessageId(message, meta);
      this._setLegacyIds(message, meta);
      return message;
    }
    visitAllWithErrors(nodes) {
      const result = nodes.map((node) => node.visit(this, null));
      return new ParseTreeResult(result, this._errors);
    }
    visitElement(element2) {
      let message = void 0;
      if (hasI18nAttrs(element2)) {
        this.hasI18nMeta = true;
        const attrs = [];
        const attrsMeta = {};
        for (const attr of element2.attrs) {
          if (attr.name === I18N_ATTR) {
            const i18n2 = element2.i18n || attr.value;
            message = this._generateI18nMessage(element2.children, i18n2, setI18nRefs);
            if (message.nodes.length === 0) {
              message = void 0;
            }
            element2.i18n = message;
          } else if (attr.name.startsWith(I18N_ATTR_PREFIX)) {
            const name = attr.name.slice(I18N_ATTR_PREFIX.length);
            if (isTrustedTypesSink(element2.name, name)) {
              this._reportError(attr, `Translating attribute '${name}' is disallowed for security reasons.`);
            } else {
              attrsMeta[name] = attr.value;
            }
          } else {
            attrs.push(attr);
          }
        }
        if (Object.keys(attrsMeta).length) {
          for (const attr of attrs) {
            const meta = attrsMeta[attr.name];
            if (meta !== void 0 && attr.value) {
              attr.i18n = this._generateI18nMessage([attr], attr.i18n || meta);
            }
          }
        }
        if (!this.keepI18nAttrs) {
          element2.attrs = attrs;
        }
      }
      visitAll(this, element2.children, message);
      return element2;
    }
    visitExpansion(expansion, currentMessage) {
      let message;
      const meta = expansion.i18n;
      this.hasI18nMeta = true;
      if (meta instanceof IcuPlaceholder) {
        const name = meta.name;
        message = this._generateI18nMessage([expansion], meta);
        const icu = icuFromI18nMessage(message);
        icu.name = name;
        if (currentMessage !== null) {
          currentMessage.placeholderToMessage[name] = message;
        }
      } else {
        message = this._generateI18nMessage([expansion], currentMessage || meta);
      }
      expansion.i18n = message;
      return expansion;
    }
    visitText(text2) {
      return text2;
    }
    visitAttribute(attribute2) {
      return attribute2;
    }
    visitComment(comment) {
      return comment;
    }
    visitExpansionCase(expansionCase) {
      return expansionCase;
    }
    visitBlock(block, context2) {
      visitAll(this, block.children, context2);
      return block;
    }
    visitBlockParameter(parameter, context2) {
      return parameter;
    }
    /**
     * Parse the general form `meta` passed into extract the explicit metadata needed to create a
     * `Message`.
     *
     * There are three possibilities for the `meta` variable
     * 1) a string from an `i18n` template attribute: parse it to extract the metadata values.
     * 2) a `Message` from a previous processing pass: reuse the metadata values in the message.
     * 4) other: ignore this and just process the message metadata as normal
     *
     * @param meta the bucket that holds information about the message
     * @returns the parsed metadata.
     */
    _parseMetadata(meta) {
      return typeof meta === "string" ? parseI18nMeta(meta) : meta instanceof Message ? meta : {};
    }
    /**
     * Generate (or restore) message id if not specified already.
     */
    _setMessageId(message, meta) {
      if (!message.id) {
        message.id = meta instanceof Message && meta.id || decimalDigest(message);
      }
    }
    /**
     * Update the `message` with a `legacyId` if necessary.
     *
     * @param message the message whose legacy id should be set
     * @param meta information about the message being processed
     */
    _setLegacyIds(message, meta) {
      if (this.enableI18nLegacyMessageIdFormat) {
        message.legacyIds = [computeDigest(message), computeDecimalDigest(message)];
      } else if (typeof meta !== "string") {
        const previousMessage = meta instanceof Message ? meta : meta instanceof IcuPlaceholder ? meta.previousMessage : void 0;
        message.legacyIds = previousMessage ? previousMessage.legacyIds : [];
      }
    }
    _reportError(node, msg) {
      this._errors.push(new I18nError(node.sourceSpan, msg));
    }
  };
  var I18N_MEANING_SEPARATOR = "|";
  var I18N_ID_SEPARATOR = "@@";
  function parseI18nMeta(meta = "") {
    let customId;
    let meaning;
    let description;
    meta = meta.trim();
    if (meta) {
      const idIndex = meta.indexOf(I18N_ID_SEPARATOR);
      const descIndex = meta.indexOf(I18N_MEANING_SEPARATOR);
      let meaningAndDesc;
      [meaningAndDesc, customId] = idIndex > -1 ? [meta.slice(0, idIndex), meta.slice(idIndex + 2)] : [meta, ""];
      [meaning, description] = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ["", meaningAndDesc];
    }
    return { customId, meaning, description };
  }
  function i18nMetaToJSDoc(meta) {
    const tags = [];
    if (meta.description) {
      tags.push({ tagName: "desc", text: meta.description });
    } else {
      tags.push({ tagName: "suppress", text: "{msgDescriptions}" });
    }
    if (meta.meaning) {
      tags.push({ tagName: "meaning", text: meta.meaning });
    }
    return jsDocComment(tags);
  }
  var GOOG_GET_MSG = "goog.getMsg";
  function createGoogleGetMsgStatements(variable$1, message, closureVar, placeholderValues) {
    const messageString = serializeI18nMessageForGetMsg(message);
    const args = [literal(messageString)];
    if (Object.keys(placeholderValues).length) {
      args.push(mapLiteral(
        formatI18nPlaceholderNamesInMap(
          placeholderValues,
          true
          /* useCamelCase */
        ),
        true
        /* quoted */
      ));
      args.push(mapLiteral({
        original_code: literalMap(Object.keys(placeholderValues).map((param) => ({
          key: formatI18nPlaceholderName(param),
          quoted: true,
          value: message.placeholders[param] ? (
            // Get source span for typical placeholder if it exists.
            literal(message.placeholders[param].sourceSpan.toString())
          ) : (
            // Otherwise must be an ICU expression, get it's source span.
            literal(message.placeholderToMessage[param].nodes.map((node) => node.sourceSpan.toString()).join(""))
          )
        })))
      }));
    }
    const googGetMsgStmt = closureVar.set(variable(GOOG_GET_MSG).callFn(args)).toConstDecl();
    googGetMsgStmt.addLeadingComment(i18nMetaToJSDoc(message));
    const i18nAssignmentStmt = new ExpressionStatement(variable$1.set(closureVar));
    return [googGetMsgStmt, i18nAssignmentStmt];
  }
  var GetMsgSerializerVisitor = class {
    formatPh(value) {
      return `{$${formatI18nPlaceholderName(value)}}`;
    }
    visitText(text2) {
      return text2.value;
    }
    visitContainer(container) {
      return container.children.map((child) => child.visit(this)).join("");
    }
    visitIcu(icu) {
      return serializeIcuNode(icu);
    }
    visitTagPlaceholder(ph) {
      return ph.isVoid ? this.formatPh(ph.startName) : `${this.formatPh(ph.startName)}${ph.children.map((child) => child.visit(this)).join("")}${this.formatPh(ph.closeName)}`;
    }
    visitPlaceholder(ph) {
      return this.formatPh(ph.name);
    }
    visitBlockPlaceholder(ph) {
      return `${this.formatPh(ph.startName)}${ph.children.map((child) => child.visit(this)).join("")}${this.formatPh(ph.closeName)}`;
    }
    visitIcuPlaceholder(ph, context2) {
      return this.formatPh(ph.name);
    }
  };
  var serializerVisitor = new GetMsgSerializerVisitor();
  function serializeI18nMessageForGetMsg(message) {
    return message.nodes.map((node) => node.visit(serializerVisitor, null)).join("");
  }
  function createLocalizeStatements(variable2, message, params) {
    const { messageParts, placeHolders } = serializeI18nMessageForLocalize(message);
    const sourceSpan = getSourceSpan(message);
    const expressions = placeHolders.map((ph) => params[ph.text]);
    const localizedString$1 = localizedString(message, messageParts, placeHolders, expressions, sourceSpan);
    const variableInitialization = variable2.set(localizedString$1);
    return [new ExpressionStatement(variableInitialization)];
  }
  var LocalizeSerializerVisitor = class {
    constructor(placeholderToMessage, pieces) {
      this.placeholderToMessage = placeholderToMessage;
      this.pieces = pieces;
    }
    visitText(text2) {
      if (this.pieces[this.pieces.length - 1] instanceof LiteralPiece) {
        this.pieces[this.pieces.length - 1].text += text2.value;
      } else {
        const sourceSpan = new ParseSourceSpan(text2.sourceSpan.fullStart, text2.sourceSpan.end, text2.sourceSpan.fullStart, text2.sourceSpan.details);
        this.pieces.push(new LiteralPiece(text2.value, sourceSpan));
      }
    }
    visitContainer(container) {
      container.children.forEach((child) => child.visit(this));
    }
    visitIcu(icu) {
      this.pieces.push(new LiteralPiece(serializeIcuNode(icu), icu.sourceSpan));
    }
    visitTagPlaceholder(ph) {
      this.pieces.push(this.createPlaceholderPiece(ph.startName, ph.startSourceSpan ?? ph.sourceSpan));
      if (!ph.isVoid) {
        ph.children.forEach((child) => child.visit(this));
        this.pieces.push(this.createPlaceholderPiece(ph.closeName, ph.endSourceSpan ?? ph.sourceSpan));
      }
    }
    visitPlaceholder(ph) {
      this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan));
    }
    visitBlockPlaceholder(ph) {
      this.pieces.push(this.createPlaceholderPiece(ph.startName, ph.startSourceSpan ?? ph.sourceSpan));
      ph.children.forEach((child) => child.visit(this));
      this.pieces.push(this.createPlaceholderPiece(ph.closeName, ph.endSourceSpan ?? ph.sourceSpan));
    }
    visitIcuPlaceholder(ph) {
      this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan, this.placeholderToMessage[ph.name]));
    }
    createPlaceholderPiece(name, sourceSpan, associatedMessage) {
      return new PlaceholderPiece(formatI18nPlaceholderName(
        name,
        /* useCamelCase */
        false
      ), sourceSpan, associatedMessage);
    }
  };
  function serializeI18nMessageForLocalize(message) {
    const pieces = [];
    const serializerVisitor2 = new LocalizeSerializerVisitor(message.placeholderToMessage, pieces);
    message.nodes.forEach((node) => node.visit(serializerVisitor2));
    return processMessagePieces(pieces);
  }
  function getSourceSpan(message) {
    const startNode = message.nodes[0];
    const endNode = message.nodes[message.nodes.length - 1];
    return new ParseSourceSpan(startNode.sourceSpan.fullStart, endNode.sourceSpan.end, startNode.sourceSpan.fullStart, startNode.sourceSpan.details);
  }
  function processMessagePieces(pieces) {
    const messageParts = [];
    const placeHolders = [];
    if (pieces[0] instanceof PlaceholderPiece) {
      messageParts.push(createEmptyMessagePart(pieces[0].sourceSpan.start));
    }
    for (let i = 0; i < pieces.length; i++) {
      const part = pieces[i];
      if (part instanceof LiteralPiece) {
        messageParts.push(part);
      } else {
        placeHolders.push(part);
        if (pieces[i - 1] instanceof PlaceholderPiece) {
          messageParts.push(createEmptyMessagePart(pieces[i - 1].sourceSpan.end));
        }
      }
    }
    if (pieces[pieces.length - 1] instanceof PlaceholderPiece) {
      messageParts.push(createEmptyMessagePart(pieces[pieces.length - 1].sourceSpan.end));
    }
    return { messageParts, placeHolders };
  }
  function createEmptyMessagePart(location2) {
    return new LiteralPiece("", new ParseSourceSpan(location2, location2));
  }
  var NG_I18N_CLOSURE_MODE$1 = "ngI18nClosureMode";
  var TRANSLATION_VAR_PREFIX = "i18n_";
  var I18N_ICU_MAPPING_PREFIX = "I18N_EXP_";
  var ESCAPE = "\uFFFD";
  function collectI18nConsts(job) {
    const fileBasedI18nSuffix = job.relativeContextFilePath.replace(/[^A-Za-z0-9]/g, "_").toUpperCase() + "_";
    const extractedAttributesByI18nContext = /* @__PURE__ */ new Map();
    const i18nAttributesByElement = /* @__PURE__ */ new Map();
    const i18nExpressionsByElement = /* @__PURE__ */ new Map();
    const messages = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      for (const op of unit.ops()) {
        if (op.kind === OpKind.ExtractedAttribute && op.i18nContext !== null) {
          const attributes = extractedAttributesByI18nContext.get(op.i18nContext) ?? [];
          attributes.push(op);
          extractedAttributesByI18nContext.set(op.i18nContext, attributes);
        } else if (op.kind === OpKind.I18nAttributes) {
          i18nAttributesByElement.set(op.target, op);
        } else if (op.kind === OpKind.I18nExpression && op.usage === I18nExpressionFor.I18nAttribute) {
          const expressions = i18nExpressionsByElement.get(op.target) ?? [];
          expressions.push(op);
          i18nExpressionsByElement.set(op.target, expressions);
        } else if (op.kind === OpKind.I18nMessage) {
          messages.set(op.xref, op);
        }
      }
    }
    const i18nValuesByContext = /* @__PURE__ */ new Map();
    const messageConstIndices = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind === OpKind.I18nMessage) {
          if (op.messagePlaceholder === null) {
            const { mainVar, statements } = collectMessage(job, fileBasedI18nSuffix, messages, op);
            if (op.i18nBlock !== null) {
              const i18nConst = job.addConst(mainVar, statements);
              messageConstIndices.set(op.i18nBlock, i18nConst);
            } else {
              job.constsInitializers.push(...statements);
              i18nValuesByContext.set(op.i18nContext, mainVar);
              const attributesForMessage = extractedAttributesByI18nContext.get(op.i18nContext);
              if (attributesForMessage !== void 0) {
                for (const attr of attributesForMessage) {
                  attr.expression = mainVar.clone();
                }
              }
            }
          }
          OpList.remove(op);
        }
      }
    }
    for (const unit of job.units) {
      for (const elem of unit.create) {
        if (isElementOrContainerOp(elem)) {
          const i18nAttributes2 = i18nAttributesByElement.get(elem.xref);
          if (i18nAttributes2 === void 0) {
            continue;
          }
          let i18nExpressions = i18nExpressionsByElement.get(elem.xref);
          if (i18nExpressions === void 0) {
            throw new Error("AssertionError: Could not find any i18n expressions associated with an I18nAttributes instruction");
          }
          const seenPropertyNames = /* @__PURE__ */ new Set();
          i18nExpressions = i18nExpressions.filter((i18nExpr) => {
            const seen = seenPropertyNames.has(i18nExpr.name);
            seenPropertyNames.add(i18nExpr.name);
            return !seen;
          });
          const i18nAttributeConfig = i18nExpressions.flatMap((i18nExpr) => {
            const i18nExprValue = i18nValuesByContext.get(i18nExpr.context);
            if (i18nExprValue === void 0) {
              throw new Error("AssertionError: Could not find i18n expression's value");
            }
            return [literal(i18nExpr.name), i18nExprValue];
          });
          i18nAttributes2.i18nAttributesConfig = job.addConst(new LiteralArrayExpr(i18nAttributeConfig));
        }
      }
    }
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind === OpKind.I18nStart) {
          const msgIndex = messageConstIndices.get(op.root);
          if (msgIndex === void 0) {
            throw new Error("AssertionError: Could not find corresponding i18n block index for an i18n message op; was an i18n message incorrectly assumed to correspond to an attribute?");
          }
          op.messageIndex = msgIndex;
        }
      }
    }
  }
  function collectMessage(job, fileBasedI18nSuffix, messages, messageOp) {
    const statements = [];
    const subMessagePlaceholders = /* @__PURE__ */ new Map();
    for (const subMessageId of messageOp.subMessages) {
      const subMessage = messages.get(subMessageId);
      const { mainVar: subMessageVar, statements: subMessageStatements } = collectMessage(job, fileBasedI18nSuffix, messages, subMessage);
      statements.push(...subMessageStatements);
      const subMessages = subMessagePlaceholders.get(subMessage.messagePlaceholder) ?? [];
      subMessages.push(subMessageVar);
      subMessagePlaceholders.set(subMessage.messagePlaceholder, subMessages);
    }
    addSubMessageParams(messageOp, subMessagePlaceholders);
    messageOp.params = new Map([...messageOp.params.entries()].sort());
    const mainVar = variable(job.pool.uniqueName(TRANSLATION_VAR_PREFIX));
    const closureVar = i18nGenerateClosureVar(job.pool, messageOp.message.id, fileBasedI18nSuffix, job.i18nUseExternalIds);
    let transformFn = void 0;
    if (messageOp.needsPostprocessing || messageOp.postprocessingParams.size > 0) {
      const postprocessingParams = Object.fromEntries([...messageOp.postprocessingParams.entries()].sort());
      const formattedPostprocessingParams = formatI18nPlaceholderNamesInMap(
        postprocessingParams,
        /* useCamelCase */
        false
      );
      const extraTransformFnParams = [];
      if (messageOp.postprocessingParams.size > 0) {
        extraTransformFnParams.push(mapLiteral(
          formattedPostprocessingParams,
          /* quoted */
          true
        ));
      }
      transformFn = (expr) => importExpr(Identifiers.i18nPostprocess).callFn([expr, ...extraTransformFnParams]);
    }
    statements.push(...getTranslationDeclStmts$1(messageOp.message, mainVar, closureVar, messageOp.params, transformFn));
    return { mainVar, statements };
  }
  function addSubMessageParams(messageOp, subMessagePlaceholders) {
    for (const [placeholder, subMessages] of subMessagePlaceholders) {
      if (subMessages.length === 1) {
        messageOp.params.set(placeholder, subMessages[0]);
      } else {
        messageOp.params.set(placeholder, literal(`${ESCAPE}${I18N_ICU_MAPPING_PREFIX}${placeholder}${ESCAPE}`));
        messageOp.postprocessingParams.set(placeholder, literalArr(subMessages));
      }
    }
  }
  function getTranslationDeclStmts$1(message, variable2, closureVar, params, transformFn) {
    const paramsObject = Object.fromEntries(params);
    const statements = [
      declareI18nVariable(variable2),
      ifStmt(createClosureModeGuard$1(), createGoogleGetMsgStatements(variable2, message, closureVar, paramsObject), createLocalizeStatements(variable2, message, formatI18nPlaceholderNamesInMap(
        paramsObject,
        /* useCamelCase */
        false
      )))
    ];
    if (transformFn) {
      statements.push(new ExpressionStatement(variable2.set(transformFn(variable2))));
    }
    return statements;
  }
  function createClosureModeGuard$1() {
    return typeofExpr(variable(NG_I18N_CLOSURE_MODE$1)).notIdentical(literal("undefined", STRING_TYPE)).and(variable(NG_I18N_CLOSURE_MODE$1));
  }
  function i18nGenerateClosureVar(pool, messageId, fileBasedI18nSuffix, useExternalIds) {
    let name;
    const suffix = fileBasedI18nSuffix;
    if (useExternalIds) {
      const prefix = getTranslationConstPrefix(`EXTERNAL_`);
      const uniqueSuffix = pool.uniqueName(suffix);
      name = `${prefix}${sanitizeIdentifier(messageId)}$$${uniqueSuffix}`;
    } else {
      const prefix = getTranslationConstPrefix(suffix);
      name = pool.uniqueName(prefix);
    }
    return variable(name);
  }
  function convertI18nText(job) {
    for (const unit of job.units) {
      let currentI18n = null;
      let currentIcu = null;
      const textNodeI18nBlocks = /* @__PURE__ */ new Map();
      const textNodeIcus = /* @__PURE__ */ new Map();
      const icuPlaceholderByText = /* @__PURE__ */ new Map();
      for (const op of unit.create) {
        switch (op.kind) {
          case OpKind.I18nStart:
            if (op.context === null) {
              throw Error("I18n op should have its context set.");
            }
            currentI18n = op;
            break;
          case OpKind.I18nEnd:
            currentI18n = null;
            break;
          case OpKind.IcuStart:
            if (op.context === null) {
              throw Error("Icu op should have its context set.");
            }
            currentIcu = op;
            break;
          case OpKind.IcuEnd:
            currentIcu = null;
            break;
          case OpKind.Text:
            if (currentI18n !== null) {
              textNodeI18nBlocks.set(op.xref, currentI18n);
              textNodeIcus.set(op.xref, currentIcu);
              if (op.icuPlaceholder !== null) {
                const icuPlaceholderOp = createIcuPlaceholderOp(job.allocateXrefId(), op.icuPlaceholder, [op.initialValue]);
                OpList.replace(op, icuPlaceholderOp);
                icuPlaceholderByText.set(op.xref, icuPlaceholderOp);
              } else {
                OpList.remove(op);
              }
            }
            break;
        }
      }
      for (const op of unit.update) {
        switch (op.kind) {
          case OpKind.InterpolateText:
            if (!textNodeI18nBlocks.has(op.target)) {
              continue;
            }
            const i18nOp = textNodeI18nBlocks.get(op.target);
            const icuOp = textNodeIcus.get(op.target);
            const icuPlaceholder = icuPlaceholderByText.get(op.target);
            const contextId = icuOp ? icuOp.context : i18nOp.context;
            const resolutionTime = icuOp ? I18nParamResolutionTime.Postproccessing : I18nParamResolutionTime.Creation;
            const ops = [];
            for (let i = 0; i < op.interpolation.expressions.length; i++) {
              const expr = op.interpolation.expressions[i];
              ops.push(createI18nExpressionOp(contextId, i18nOp.xref, i18nOp.xref, i18nOp.handle, expr, icuPlaceholder?.xref ?? null, op.interpolation.i18nPlaceholders[i] ?? null, resolutionTime, I18nExpressionFor.I18nText, "", expr.sourceSpan ?? op.sourceSpan));
            }
            OpList.replaceWithMany(op, ops);
            if (icuPlaceholder !== void 0) {
              icuPlaceholder.strings = op.interpolation.strings;
            }
            break;
        }
      }
    }
  }
  function liftLocalRefs(job) {
    for (const unit of job.units) {
      for (const op of unit.create) {
        switch (op.kind) {
          case OpKind.ElementStart:
          case OpKind.Template:
            if (!Array.isArray(op.localRefs)) {
              throw new Error(`AssertionError: expected localRefs to be an array still`);
            }
            op.numSlotsUsed += op.localRefs.length;
            if (op.localRefs.length > 0) {
              const localRefs = serializeLocalRefs(op.localRefs);
              op.localRefs = job.addConst(localRefs);
            } else {
              op.localRefs = null;
            }
            break;
        }
      }
    }
  }
  function serializeLocalRefs(refs) {
    const constRefs = [];
    for (const ref of refs) {
      constRefs.push(literal(ref.name), literal(ref.target));
    }
    return literalArr(constRefs);
  }
  function emitNamespaceChanges(job) {
    for (const unit of job.units) {
      let activeNamespace = Namespace.HTML;
      for (const op of unit.create) {
        if (op.kind !== OpKind.ElementStart) {
          continue;
        }
        if (op.namespace !== activeNamespace) {
          OpList.insertBefore(createNamespaceOp(op.namespace), op);
          activeNamespace = op.namespace;
        }
      }
    }
  }
  function parse(value) {
    const styles2 = [];
    let i = 0;
    let parenDepth = 0;
    let quote = 0;
    let valueStart = 0;
    let propStart = 0;
    let currentProp = null;
    while (i < value.length) {
      const token = value.charCodeAt(i++);
      switch (token) {
        case 40:
          parenDepth++;
          break;
        case 41:
          parenDepth--;
          break;
        case 39:
          if (quote === 0) {
            quote = 39;
          } else if (quote === 39 && value.charCodeAt(i - 1) !== 92) {
            quote = 0;
          }
          break;
        case 34:
          if (quote === 0) {
            quote = 34;
          } else if (quote === 34 && value.charCodeAt(i - 1) !== 92) {
            quote = 0;
          }
          break;
        case 58:
          if (!currentProp && parenDepth === 0 && quote === 0) {
            currentProp = hyphenate(value.substring(propStart, i - 1).trim());
            valueStart = i;
          }
          break;
        case 59:
          if (currentProp && valueStart > 0 && parenDepth === 0 && quote === 0) {
            const styleVal = value.substring(valueStart, i - 1).trim();
            styles2.push(currentProp, styleVal);
            propStart = i;
            valueStart = 0;
            currentProp = null;
          }
          break;
      }
    }
    if (currentProp && valueStart) {
      const styleVal = value.slice(valueStart).trim();
      styles2.push(currentProp, styleVal);
    }
    return styles2;
  }
  function hyphenate(value) {
    return value.replace(/[a-z][A-Z]/g, (v) => {
      return v.charAt(0) + "-" + v.charAt(1);
    }).toLowerCase();
  }
  function nameFunctionsAndVariables(job) {
    addNamesToView(job.root, job.componentName, { index: 0 }, job.compatibility === CompatibilityMode.TemplateDefinitionBuilder);
  }
  function addNamesToView(unit, baseName, state, compatibility) {
    if (unit.fnName === null) {
      unit.fnName = unit.job.pool.uniqueName(
        sanitizeIdentifier(`${baseName}_${unit.job.fnSuffix}`),
        /* alwaysIncludeSuffix */
        false
      );
    }
    const varNames = /* @__PURE__ */ new Map();
    for (const op of unit.ops()) {
      switch (op.kind) {
        case OpKind.Property:
        case OpKind.HostProperty:
          if (op.isAnimationTrigger) {
            op.name = "@" + op.name;
          }
          break;
        case OpKind.Listener:
          if (op.handlerFnName !== null) {
            break;
          }
          if (!op.hostListener && op.targetSlot.slot === null) {
            throw new Error(`Expected a slot to be assigned`);
          }
          let animation = "";
          if (op.isAnimationListener) {
            op.name = `@${op.name}.${op.animationPhase}`;
            animation = "animation";
          }
          if (op.hostListener) {
            op.handlerFnName = `${baseName}_${animation}${op.name}_HostBindingHandler`;
          } else {
            op.handlerFnName = `${unit.fnName}_${op.tag.replace("-", "_")}_${animation}${op.name}_${op.targetSlot.slot}_listener`;
          }
          op.handlerFnName = sanitizeIdentifier(op.handlerFnName);
          break;
        case OpKind.TwoWayListener:
          if (op.handlerFnName !== null) {
            break;
          }
          if (op.targetSlot.slot === null) {
            throw new Error(`Expected a slot to be assigned`);
          }
          op.handlerFnName = sanitizeIdentifier(`${unit.fnName}_${op.tag.replace("-", "_")}_${op.name}_${op.targetSlot.slot}_listener`);
          break;
        case OpKind.Variable:
          varNames.set(op.xref, getVariableName(unit, op.variable, state));
          break;
        case OpKind.RepeaterCreate:
          if (!(unit instanceof ViewCompilationUnit)) {
            throw new Error(`AssertionError: must be compiling a component`);
          }
          if (op.handle.slot === null) {
            throw new Error(`Expected slot to be assigned`);
          }
          if (op.emptyView !== null) {
            const emptyView = unit.job.views.get(op.emptyView);
            addNamesToView(emptyView, `${baseName}_${op.functionNameSuffix}Empty_${op.handle.slot + 2}`, state, compatibility);
          }
          addNamesToView(unit.job.views.get(op.xref), `${baseName}_${op.functionNameSuffix}_${op.handle.slot + 1}`, state, compatibility);
          break;
        case OpKind.Template:
          if (!(unit instanceof ViewCompilationUnit)) {
            throw new Error(`AssertionError: must be compiling a component`);
          }
          const childView = unit.job.views.get(op.xref);
          if (op.handle.slot === null) {
            throw new Error(`Expected slot to be assigned`);
          }
          const suffix = op.functionNameSuffix.length === 0 ? "" : `_${op.functionNameSuffix}`;
          addNamesToView(childView, `${baseName}${suffix}_${op.handle.slot}`, state, compatibility);
          break;
        case OpKind.StyleProp:
          op.name = normalizeStylePropName(op.name);
          if (compatibility) {
            op.name = stripImportant(op.name);
          }
          break;
        case OpKind.ClassProp:
          if (compatibility) {
            op.name = stripImportant(op.name);
          }
          break;
      }
    }
    for (const op of unit.ops()) {
      visitExpressionsInOp(op, (expr) => {
        if (!(expr instanceof ReadVariableExpr) || expr.name !== null) {
          return;
        }
        if (!varNames.has(expr.xref)) {
          throw new Error(`Variable ${expr.xref} not yet named`);
        }
        expr.name = varNames.get(expr.xref);
      });
    }
  }
  function getVariableName(unit, variable2, state) {
    if (variable2.name === null) {
      switch (variable2.kind) {
        case SemanticVariableKind.Context:
          variable2.name = `ctx_r${state.index++}`;
          break;
        case SemanticVariableKind.Identifier:
          if (unit.job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {
            const compatPrefix = variable2.identifier === "ctx" ? "i" : "";
            variable2.name = `${variable2.identifier}_${compatPrefix}r${++state.index}`;
          } else {
            variable2.name = `${variable2.identifier}_i${state.index++}`;
          }
          break;
        default:
          variable2.name = `_r${++state.index}`;
          break;
      }
    }
    return variable2.name;
  }
  function normalizeStylePropName(name) {
    return name.startsWith("--") ? name : hyphenate(name);
  }
  function stripImportant(name) {
    const importantIndex = name.indexOf("!important");
    if (importantIndex > -1) {
      return name.substring(0, importantIndex);
    }
    return name;
  }
  function mergeNextContextExpressions(job) {
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind === OpKind.Listener || op.kind === OpKind.TwoWayListener) {
          mergeNextContextsInOps(op.handlerOps);
        }
      }
      mergeNextContextsInOps(unit.update);
    }
  }
  function mergeNextContextsInOps(ops) {
    for (const op of ops) {
      if (op.kind !== OpKind.Statement || !(op.statement instanceof ExpressionStatement) || !(op.statement.expr instanceof NextContextExpr)) {
        continue;
      }
      const mergeSteps = op.statement.expr.steps;
      let tryToMerge = true;
      for (let candidate = op.next; candidate.kind !== OpKind.ListEnd && tryToMerge; candidate = candidate.next) {
        visitExpressionsInOp(candidate, (expr, flags) => {
          if (!isIrExpression(expr)) {
            return expr;
          }
          if (!tryToMerge) {
            return;
          }
          if (flags & VisitorContextFlag.InChildOperation) {
            return;
          }
          switch (expr.kind) {
            case ExpressionKind.NextContext:
              expr.steps += mergeSteps;
              OpList.remove(op);
              tryToMerge = false;
              break;
            case ExpressionKind.GetCurrentView:
            case ExpressionKind.Reference:
              tryToMerge = false;
              break;
          }
          return;
        });
      }
    }
  }
  var CONTAINER_TAG = "ng-container";
  function generateNgContainerOps(job) {
    for (const unit of job.units) {
      const updatedElementXrefs = /* @__PURE__ */ new Set();
      for (const op of unit.create) {
        if (op.kind === OpKind.ElementStart && op.tag === CONTAINER_TAG) {
          op.kind = OpKind.ContainerStart;
          updatedElementXrefs.add(op.xref);
        }
        if (op.kind === OpKind.ElementEnd && updatedElementXrefs.has(op.xref)) {
          op.kind = OpKind.ContainerEnd;
        }
      }
    }
  }
  function lookupElement(elements, xref) {
    const el = elements.get(xref);
    if (el === void 0) {
      throw new Error("All attributes should have an element-like target.");
    }
    return el;
  }
  function disableBindings$1(job) {
    const elements = /* @__PURE__ */ new Map();
    for (const view of job.units) {
      for (const op of view.create) {
        if (!isElementOrContainerOp(op)) {
          continue;
        }
        elements.set(op.xref, op);
      }
    }
    for (const unit of job.units) {
      for (const op of unit.create) {
        if ((op.kind === OpKind.ElementStart || op.kind === OpKind.ContainerStart) && op.nonBindable) {
          OpList.insertAfter(createDisableBindingsOp(op.xref), op);
        }
        if ((op.kind === OpKind.ElementEnd || op.kind === OpKind.ContainerEnd) && lookupElement(elements, op.xref).nonBindable) {
          OpList.insertBefore(createEnableBindingsOp(op.xref), op);
        }
      }
    }
  }
  function generateNullishCoalesceExpressions(job) {
    for (const unit of job.units) {
      for (const op of unit.ops()) {
        transformExpressionsInOp(op, (expr) => {
          if (!(expr instanceof BinaryOperatorExpr) || expr.operator !== BinaryOperator.NullishCoalesce) {
            return expr;
          }
          const assignment = new AssignTemporaryExpr(expr.lhs.clone(), job.allocateXrefId());
          const read = new ReadTemporaryExpr(assignment.xref);
          return new ConditionalExpr(new BinaryOperatorExpr(BinaryOperator.And, new BinaryOperatorExpr(BinaryOperator.NotIdentical, assignment, NULL_EXPR), new BinaryOperatorExpr(BinaryOperator.NotIdentical, read, new LiteralExpr(void 0))), read.clone(), expr.rhs);
        }, VisitorContextFlag.None);
      }
    }
  }
  function kindTest(kind) {
    return (op) => op.kind === kind;
  }
  function kindWithInterpolationTest(kind, interpolation) {
    return (op) => {
      return op.kind === kind && interpolation === op.expression instanceof Interpolation;
    };
  }
  function basicListenerKindTest(op) {
    return op.kind === OpKind.Listener && !(op.hostListener && op.isAnimationListener) || op.kind === OpKind.TwoWayListener;
  }
  function nonInterpolationPropertyKindTest(op) {
    return (op.kind === OpKind.Property || op.kind === OpKind.TwoWayProperty) && !(op.expression instanceof Interpolation);
  }
  var CREATE_ORDERING = [
    { test: (op) => op.kind === OpKind.Listener && op.hostListener && op.isAnimationListener },
    { test: basicListenerKindTest }
  ];
  var UPDATE_ORDERING = [
    { test: kindTest(OpKind.StyleMap), transform: keepLast },
    { test: kindTest(OpKind.ClassMap), transform: keepLast },
    { test: kindTest(OpKind.StyleProp) },
    { test: kindTest(OpKind.ClassProp) },
    { test: kindWithInterpolationTest(OpKind.Attribute, true) },
    { test: kindWithInterpolationTest(OpKind.Property, true) },
    { test: nonInterpolationPropertyKindTest },
    { test: kindWithInterpolationTest(OpKind.Attribute, false) }
  ];
  var UPDATE_HOST_ORDERING = [
    { test: kindWithInterpolationTest(OpKind.HostProperty, true) },
    { test: kindWithInterpolationTest(OpKind.HostProperty, false) },
    { test: kindTest(OpKind.Attribute) },
    { test: kindTest(OpKind.StyleMap), transform: keepLast },
    { test: kindTest(OpKind.ClassMap), transform: keepLast },
    { test: kindTest(OpKind.StyleProp) },
    { test: kindTest(OpKind.ClassProp) }
  ];
  var handledOpKinds = /* @__PURE__ */ new Set([
    OpKind.Listener,
    OpKind.TwoWayListener,
    OpKind.StyleMap,
    OpKind.ClassMap,
    OpKind.StyleProp,
    OpKind.ClassProp,
    OpKind.Property,
    OpKind.TwoWayProperty,
    OpKind.HostProperty,
    OpKind.Attribute
  ]);
  function orderOps(job) {
    for (const unit of job.units) {
      orderWithin(unit.create, CREATE_ORDERING);
      const ordering = unit.job.kind === CompilationJobKind.Host ? UPDATE_HOST_ORDERING : UPDATE_ORDERING;
      orderWithin(unit.update, ordering);
    }
  }
  function orderWithin(opList, ordering) {
    let opsToOrder = [];
    let firstTargetInGroup = null;
    for (const op of opList) {
      const currentTarget = hasDependsOnSlotContextTrait(op) ? op.target : null;
      if (!handledOpKinds.has(op.kind) || currentTarget !== firstTargetInGroup && (firstTargetInGroup !== null && currentTarget !== null)) {
        OpList.insertBefore(reorder(opsToOrder, ordering), op);
        opsToOrder = [];
        firstTargetInGroup = null;
      }
      if (handledOpKinds.has(op.kind)) {
        opsToOrder.push(op);
        OpList.remove(op);
        firstTargetInGroup = currentTarget ?? firstTargetInGroup;
      }
    }
    opList.push(reorder(opsToOrder, ordering));
  }
  function reorder(ops, ordering) {
    const groups = Array.from(ordering, () => new Array());
    for (const op of ops) {
      const groupIndex = ordering.findIndex((o) => o.test(op));
      groups[groupIndex].push(op);
    }
    return groups.flatMap((group, i) => {
      const transform2 = ordering[i].transform;
      return transform2 ? transform2(group) : group;
    });
  }
  function keepLast(ops) {
    return ops.slice(ops.length - 1);
  }
  function parseExtractedStyles(job) {
    const elements = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (isElementOrContainerOp(op)) {
          elements.set(op.xref, op);
        }
      }
    }
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind === OpKind.ExtractedAttribute && op.bindingKind === BindingKind.Attribute && isStringLiteral(op.expression)) {
          const target = elements.get(op.target);
          if (target !== void 0 && target.kind === OpKind.Template && target.templateKind === TemplateKind.Structural) {
            continue;
          }
          if (op.name === "style") {
            const parsedStyles = parse(op.expression.value);
            for (let i = 0; i < parsedStyles.length - 1; i += 2) {
              OpList.insertBefore(createExtractedAttributeOp(op.target, BindingKind.StyleProperty, null, parsedStyles[i], literal(parsedStyles[i + 1]), null, null, SecurityContext2.STYLE), op);
            }
            OpList.remove(op);
          } else if (op.name === "class") {
            const parsedClasses = op.expression.value.trim().split(/\s+/g);
            for (const parsedClass of parsedClasses) {
              OpList.insertBefore(createExtractedAttributeOp(op.target, BindingKind.ClassName, null, parsedClass, null, null, null, SecurityContext2.NONE), op);
            }
            OpList.remove(op);
          }
        }
      }
    }
  }
  function removeContentSelectors(job) {
    for (const unit of job.units) {
      const elements = createOpXrefMap(unit);
      for (const op of unit.ops()) {
        switch (op.kind) {
          case OpKind.Binding:
            const target = lookupInXrefMap(elements, op.target);
            if (isSelectAttribute(op.name) && target.kind === OpKind.Projection) {
              OpList.remove(op);
            }
            break;
        }
      }
    }
  }
  function isSelectAttribute(name) {
    return name.toLowerCase() === "select";
  }
  function lookupInXrefMap(map3, xref) {
    const el = map3.get(xref);
    if (el === void 0) {
      throw new Error("All attributes should have an slottable target.");
    }
    return el;
  }
  function createPipes(job) {
    for (const unit of job.units) {
      processPipeBindingsInView(unit);
    }
  }
  function processPipeBindingsInView(unit) {
    for (const updateOp of unit.update) {
      visitExpressionsInOp(updateOp, (expr, flags) => {
        if (!isIrExpression(expr)) {
          return;
        }
        if (expr.kind !== ExpressionKind.PipeBinding) {
          return;
        }
        if (flags & VisitorContextFlag.InChildOperation) {
          throw new Error(`AssertionError: pipe bindings should not appear in child expressions`);
        }
        if (unit.job.compatibility) {
          const slotHandle = updateOp.target;
          if (slotHandle == void 0) {
            throw new Error(`AssertionError: expected slot handle to be assigned for pipe creation`);
          }
          addPipeToCreationBlock(unit, updateOp.target, expr);
        } else {
          unit.create.push(createPipeOp(expr.target, expr.targetSlot, expr.name));
        }
      });
    }
  }
  function addPipeToCreationBlock(unit, afterTargetXref, binding) {
    for (let op = unit.create.head.next; op.kind !== OpKind.ListEnd; op = op.next) {
      if (!hasConsumesSlotTrait(op)) {
        continue;
      }
      if (op.xref !== afterTargetXref) {
        continue;
      }
      while (op.next.kind === OpKind.Pipe) {
        op = op.next;
      }
      const pipe3 = createPipeOp(binding.target, binding.targetSlot, binding.name);
      OpList.insertBefore(pipe3, op.next);
      return;
    }
    throw new Error(`AssertionError: unable to find insertion point for pipe ${binding.name}`);
  }
  function createVariadicPipes(job) {
    for (const unit of job.units) {
      for (const op of unit.update) {
        transformExpressionsInOp(op, (expr) => {
          if (!(expr instanceof PipeBindingExpr)) {
            return expr;
          }
          if (expr.args.length <= 4) {
            return expr;
          }
          return new PipeBindingVariadicExpr(expr.target, expr.targetSlot, expr.name, literalArr(expr.args), expr.args.length);
        }, VisitorContextFlag.None);
      }
    }
  }
  function propagateI18nBlocks(job) {
    propagateI18nBlocksToTemplates(job.root, 0);
  }
  function propagateI18nBlocksToTemplates(unit, subTemplateIndex) {
    let i18nBlock = null;
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.I18nStart:
          op.subTemplateIndex = subTemplateIndex === 0 ? null : subTemplateIndex;
          i18nBlock = op;
          break;
        case OpKind.I18nEnd:
          if (i18nBlock.subTemplateIndex === null) {
            subTemplateIndex = 0;
          }
          i18nBlock = null;
          break;
        case OpKind.Template:
          subTemplateIndex = propagateI18nBlocksForView(unit.job.views.get(op.xref), i18nBlock, op.i18nPlaceholder, subTemplateIndex);
          break;
        case OpKind.RepeaterCreate:
          const forView = unit.job.views.get(op.xref);
          subTemplateIndex = propagateI18nBlocksForView(forView, i18nBlock, op.i18nPlaceholder, subTemplateIndex);
          if (op.emptyView !== null) {
            subTemplateIndex = propagateI18nBlocksForView(unit.job.views.get(op.emptyView), i18nBlock, op.emptyI18nPlaceholder, subTemplateIndex);
          }
          break;
      }
    }
    return subTemplateIndex;
  }
  function propagateI18nBlocksForView(view, i18nBlock, i18nPlaceholder, subTemplateIndex) {
    if (i18nPlaceholder !== void 0) {
      if (i18nBlock === null) {
        throw Error("Expected template with i18n placeholder to be in an i18n block.");
      }
      subTemplateIndex++;
      wrapTemplateWithI18n(view, i18nBlock);
    }
    return propagateI18nBlocksToTemplates(view, subTemplateIndex);
  }
  function wrapTemplateWithI18n(unit, parentI18n) {
    if (unit.create.head.next?.kind !== OpKind.I18nStart) {
      const id = unit.job.allocateXrefId();
      OpList.insertAfter(
        // Nested ng-template i18n start/end ops should not recieve source spans.
        createI18nStartOp(id, parentI18n.message, parentI18n.root, null),
        unit.create.head
      );
      OpList.insertBefore(createI18nEndOp(id, null), unit.create.tail);
    }
  }
  function extractPureFunctions(job) {
    for (const view of job.units) {
      for (const op of view.ops()) {
        visitExpressionsInOp(op, (expr) => {
          if (!(expr instanceof PureFunctionExpr) || expr.body === null) {
            return;
          }
          const constantDef = new PureFunctionConstant(expr.args.length);
          expr.fn = job.pool.getSharedConstant(constantDef, expr.body);
          expr.body = null;
        });
      }
    }
  }
  var PureFunctionConstant = class extends GenericKeyFn {
    constructor(numArgs) {
      super();
      this.numArgs = numArgs;
    }
    keyOf(expr) {
      if (expr instanceof PureFunctionParameterExpr) {
        return `param(${expr.index})`;
      } else {
        return super.keyOf(expr);
      }
    }
    // TODO: Use the new pool method `getSharedFunctionReference`
    toSharedConstantDeclaration(declName, keyExpr) {
      const fnParams = [];
      for (let idx = 0; idx < this.numArgs; idx++) {
        fnParams.push(new FnParam("a" + idx));
      }
      const returnExpr = transformExpressionsInExpression(keyExpr, (expr) => {
        if (!(expr instanceof PureFunctionParameterExpr)) {
          return expr;
        }
        return variable("a" + expr.index);
      }, VisitorContextFlag.None);
      return new DeclareVarStmt(declName, new ArrowFunctionExpr(fnParams, returnExpr), void 0, StmtModifier.Final);
    }
  };
  function generatePureLiteralStructures(job) {
    for (const unit of job.units) {
      for (const op of unit.update) {
        transformExpressionsInOp(op, (expr, flags) => {
          if (flags & VisitorContextFlag.InChildOperation) {
            return expr;
          }
          if (expr instanceof LiteralArrayExpr) {
            return transformLiteralArray(expr);
          } else if (expr instanceof LiteralMapExpr) {
            return transformLiteralMap(expr);
          }
          return expr;
        }, VisitorContextFlag.None);
      }
    }
  }
  function transformLiteralArray(expr) {
    const derivedEntries = [];
    const nonConstantArgs = [];
    for (const entry of expr.entries) {
      if (entry.isConstant()) {
        derivedEntries.push(entry);
      } else {
        const idx = nonConstantArgs.length;
        nonConstantArgs.push(entry);
        derivedEntries.push(new PureFunctionParameterExpr(idx));
      }
    }
    return new PureFunctionExpr(literalArr(derivedEntries), nonConstantArgs);
  }
  function transformLiteralMap(expr) {
    let derivedEntries = [];
    const nonConstantArgs = [];
    for (const entry of expr.entries) {
      if (entry.value.isConstant()) {
        derivedEntries.push(entry);
      } else {
        const idx = nonConstantArgs.length;
        nonConstantArgs.push(entry.value);
        derivedEntries.push(new LiteralMapEntry(entry.key, new PureFunctionParameterExpr(idx), entry.quoted));
      }
    }
    return new PureFunctionExpr(literalMap(derivedEntries), nonConstantArgs);
  }
  function element(slot, tag, constIndex, localRefIndex, sourceSpan) {
    return elementOrContainerBase(Identifiers.element, slot, tag, constIndex, localRefIndex, sourceSpan);
  }
  function elementStart(slot, tag, constIndex, localRefIndex, sourceSpan) {
    return elementOrContainerBase(Identifiers.elementStart, slot, tag, constIndex, localRefIndex, sourceSpan);
  }
  function elementOrContainerBase(instruction, slot, tag, constIndex, localRefIndex, sourceSpan) {
    const args = [literal(slot)];
    if (tag !== null) {
      args.push(literal(tag));
    }
    if (localRefIndex !== null) {
      args.push(
        literal(constIndex),
        // might be null, but that's okay.
        literal(localRefIndex)
      );
    } else if (constIndex !== null) {
      args.push(literal(constIndex));
    }
    return call(instruction, args, sourceSpan);
  }
  function elementEnd(sourceSpan) {
    return call(Identifiers.elementEnd, [], sourceSpan);
  }
  function elementContainerStart(slot, constIndex, localRefIndex, sourceSpan) {
    return elementOrContainerBase(
      Identifiers.elementContainerStart,
      slot,
      /* tag */
      null,
      constIndex,
      localRefIndex,
      sourceSpan
    );
  }
  function elementContainer(slot, constIndex, localRefIndex, sourceSpan) {
    return elementOrContainerBase(
      Identifiers.elementContainer,
      slot,
      /* tag */
      null,
      constIndex,
      localRefIndex,
      sourceSpan
    );
  }
  function elementContainerEnd() {
    return call(Identifiers.elementContainerEnd, [], null);
  }
  function template(slot, templateFnRef, decls, vars, tag, constIndex, localRefs, sourceSpan) {
    const args = [
      literal(slot),
      templateFnRef,
      literal(decls),
      literal(vars),
      literal(tag),
      literal(constIndex)
    ];
    if (localRefs !== null) {
      args.push(literal(localRefs));
      args.push(importExpr(Identifiers.templateRefExtractor));
    }
    while (args[args.length - 1].isEquivalent(NULL_EXPR)) {
      args.pop();
    }
    return call(Identifiers.templateCreate, args, sourceSpan);
  }
  function disableBindings() {
    return call(Identifiers.disableBindings, [], null);
  }
  function enableBindings() {
    return call(Identifiers.enableBindings, [], null);
  }
  function listener(name, handlerFn, eventTargetResolver, syntheticHost, sourceSpan) {
    const args = [literal(name), handlerFn];
    if (eventTargetResolver !== null) {
      args.push(literal(false));
      args.push(importExpr(eventTargetResolver));
    }
    return call(syntheticHost ? Identifiers.syntheticHostListener : Identifiers.listener, args, sourceSpan);
  }
  function twoWayBindingSet(target, value) {
    return importExpr(Identifiers.twoWayBindingSet).callFn([target, value]);
  }
  function twoWayListener(name, handlerFn, sourceSpan) {
    return call(Identifiers.twoWayListener, [literal(name), handlerFn], sourceSpan);
  }
  function pipe2(slot, name) {
    return call(Identifiers.pipe, [
      literal(slot),
      literal(name)
    ], null);
  }
  function namespaceHTML() {
    return call(Identifiers.namespaceHTML, [], null);
  }
  function namespaceSVG() {
    return call(Identifiers.namespaceSVG, [], null);
  }
  function namespaceMath() {
    return call(Identifiers.namespaceMathML, [], null);
  }
  function advance(delta, sourceSpan) {
    return call(Identifiers.advance, delta > 1 ? [literal(delta)] : [], sourceSpan);
  }
  function reference(slot) {
    return importExpr(Identifiers.reference).callFn([
      literal(slot)
    ]);
  }
  function nextContext(steps) {
    return importExpr(Identifiers.nextContext).callFn(steps === 1 ? [] : [literal(steps)]);
  }
  function getCurrentView() {
    return importExpr(Identifiers.getCurrentView).callFn([]);
  }
  function restoreView(savedView) {
    return importExpr(Identifiers.restoreView).callFn([
      savedView
    ]);
  }
  function resetView(returnValue) {
    return importExpr(Identifiers.resetView).callFn([
      returnValue
    ]);
  }
  function text(slot, initialValue, sourceSpan) {
    const args = [literal(slot, null)];
    if (initialValue !== "") {
      args.push(literal(initialValue));
    }
    return call(Identifiers.text, args, sourceSpan);
  }
  function defer2(selfSlot, primarySlot, dependencyResolverFn, loadingSlot, placeholderSlot, errorSlot, loadingConfig, placeholderConfig, enableTimerScheduling, sourceSpan) {
    const args = [
      literal(selfSlot),
      literal(primarySlot),
      dependencyResolverFn ?? literal(null),
      literal(loadingSlot),
      literal(placeholderSlot),
      literal(errorSlot),
      loadingConfig ?? literal(null),
      placeholderConfig ?? literal(null),
      enableTimerScheduling ? importExpr(Identifiers.deferEnableTimerScheduling) : literal(null)
    ];
    let expr;
    while ((expr = args[args.length - 1]) !== null && expr instanceof LiteralExpr && expr.value === null) {
      args.pop();
    }
    return call(Identifiers.defer, args, sourceSpan);
  }
  var deferTriggerToR3TriggerInstructionsMap = /* @__PURE__ */ new Map([
    [DeferTriggerKind.Idle, [Identifiers.deferOnIdle, Identifiers.deferPrefetchOnIdle]],
    [
      DeferTriggerKind.Immediate,
      [Identifiers.deferOnImmediate, Identifiers.deferPrefetchOnImmediate]
    ],
    [DeferTriggerKind.Timer, [Identifiers.deferOnTimer, Identifiers.deferPrefetchOnTimer]],
    [DeferTriggerKind.Hover, [Identifiers.deferOnHover, Identifiers.deferPrefetchOnHover]],
    [
      DeferTriggerKind.Interaction,
      [Identifiers.deferOnInteraction, Identifiers.deferPrefetchOnInteraction]
    ],
    [
      DeferTriggerKind.Viewport,
      [Identifiers.deferOnViewport, Identifiers.deferPrefetchOnViewport]
    ]
  ]);
  function deferOn(trigger, args, prefetch, sourceSpan) {
    const instructions = deferTriggerToR3TriggerInstructionsMap.get(trigger);
    if (instructions === void 0) {
      throw new Error(`Unable to determine instruction for trigger ${trigger}`);
    }
    const instructionToCall = prefetch ? instructions[1] : instructions[0];
    return call(instructionToCall, args.map((a) => literal(a)), sourceSpan);
  }
  function projectionDef(def) {
    return call(Identifiers.projectionDef, def ? [def] : [], null);
  }
  function projection(slot, projectionSlotIndex, attributes, sourceSpan) {
    const args = [literal(slot)];
    if (projectionSlotIndex !== 0 || attributes !== null) {
      args.push(literal(projectionSlotIndex));
      if (attributes !== null) {
        args.push(attributes);
      }
    }
    return call(Identifiers.projection, args, sourceSpan);
  }
  function i18nStart(slot, constIndex, subTemplateIndex, sourceSpan) {
    const args = [literal(slot), literal(constIndex)];
    if (subTemplateIndex !== null) {
      args.push(literal(subTemplateIndex));
    }
    return call(Identifiers.i18nStart, args, sourceSpan);
  }
  function repeaterCreate(slot, viewFnName, decls, vars, tag, constIndex, trackByFn, trackByUsesComponentInstance, emptyViewFnName, emptyDecls, emptyVars, emptyTag, emptyConstIndex, sourceSpan) {
    const args = [
      literal(slot),
      variable(viewFnName),
      literal(decls),
      literal(vars),
      literal(tag),
      literal(constIndex),
      trackByFn
    ];
    if (trackByUsesComponentInstance || emptyViewFnName !== null) {
      args.push(literal(trackByUsesComponentInstance));
      if (emptyViewFnName !== null) {
        args.push(variable(emptyViewFnName), literal(emptyDecls), literal(emptyVars));
        if (emptyTag !== null || emptyConstIndex !== null) {
          args.push(literal(emptyTag));
        }
        if (emptyConstIndex !== null) {
          args.push(literal(emptyConstIndex));
        }
      }
    }
    return call(Identifiers.repeaterCreate, args, sourceSpan);
  }
  function repeater(collection, sourceSpan) {
    return call(Identifiers.repeater, [collection], sourceSpan);
  }
  function deferWhen(prefetch, expr, sourceSpan) {
    return call(prefetch ? Identifiers.deferPrefetchWhen : Identifiers.deferWhen, [expr], sourceSpan);
  }
  function i18n(slot, constIndex, subTemplateIndex, sourceSpan) {
    const args = [literal(slot), literal(constIndex)];
    if (subTemplateIndex) {
      args.push(literal(subTemplateIndex));
    }
    return call(Identifiers.i18n, args, sourceSpan);
  }
  function i18nEnd(endSourceSpan) {
    return call(Identifiers.i18nEnd, [], endSourceSpan);
  }
  function i18nAttributes(slot, i18nAttributesConfig) {
    const args = [literal(slot), literal(i18nAttributesConfig)];
    return call(Identifiers.i18nAttributes, args, null);
  }
  function property(name, expression, sanitizer, sourceSpan) {
    const args = [literal(name), expression];
    if (sanitizer !== null) {
      args.push(sanitizer);
    }
    return call(Identifiers.property, args, sourceSpan);
  }
  function twoWayProperty(name, expression, sanitizer, sourceSpan) {
    const args = [literal(name), expression];
    if (sanitizer !== null) {
      args.push(sanitizer);
    }
    return call(Identifiers.twoWayProperty, args, sourceSpan);
  }
  function attribute(name, expression, sanitizer, namespace) {
    const args = [literal(name), expression];
    if (sanitizer !== null || namespace !== null) {
      args.push(sanitizer ?? literal(null));
    }
    if (namespace !== null) {
      args.push(literal(namespace));
    }
    return call(Identifiers.attribute, args, null);
  }
  function styleProp(name, expression, unit, sourceSpan) {
    const args = [literal(name), expression];
    if (unit !== null) {
      args.push(literal(unit));
    }
    return call(Identifiers.styleProp, args, sourceSpan);
  }
  function classProp(name, expression, sourceSpan) {
    return call(Identifiers.classProp, [literal(name), expression], sourceSpan);
  }
  function styleMap(expression, sourceSpan) {
    return call(Identifiers.styleMap, [expression], sourceSpan);
  }
  function classMap(expression, sourceSpan) {
    return call(Identifiers.classMap, [expression], sourceSpan);
  }
  var PIPE_BINDINGS = [
    Identifiers.pipeBind1,
    Identifiers.pipeBind2,
    Identifiers.pipeBind3,
    Identifiers.pipeBind4
  ];
  function pipeBind(slot, varOffset, args) {
    if (args.length < 1 || args.length > PIPE_BINDINGS.length) {
      throw new Error(`pipeBind() argument count out of bounds`);
    }
    const instruction = PIPE_BINDINGS[args.length - 1];
    return importExpr(instruction).callFn([
      literal(slot),
      literal(varOffset),
      ...args
    ]);
  }
  function pipeBindV(slot, varOffset, args) {
    return importExpr(Identifiers.pipeBindV).callFn([
      literal(slot),
      literal(varOffset),
      args
    ]);
  }
  function textInterpolate(strings, expressions, sourceSpan) {
    if (strings.length < 1 || expressions.length !== strings.length - 1) {
      throw new Error(`AssertionError: expected specific shape of args for strings/expressions in interpolation`);
    }
    const interpolationArgs = [];
    if (expressions.length === 1 && strings[0] === "" && strings[1] === "") {
      interpolationArgs.push(expressions[0]);
    } else {
      let idx;
      for (idx = 0; idx < expressions.length; idx++) {
        interpolationArgs.push(literal(strings[idx]), expressions[idx]);
      }
      interpolationArgs.push(literal(strings[idx]));
    }
    return callVariadicInstruction(TEXT_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);
  }
  function i18nExp(expr, sourceSpan) {
    return call(Identifiers.i18nExp, [expr], sourceSpan);
  }
  function i18nApply(slot, sourceSpan) {
    return call(Identifiers.i18nApply, [literal(slot)], sourceSpan);
  }
  function propertyInterpolate(name, strings, expressions, sanitizer, sourceSpan) {
    const interpolationArgs = collateInterpolationArgs(strings, expressions);
    const extraArgs = [];
    if (sanitizer !== null) {
      extraArgs.push(sanitizer);
    }
    return callVariadicInstruction(PROPERTY_INTERPOLATE_CONFIG, [literal(name)], interpolationArgs, extraArgs, sourceSpan);
  }
  function attributeInterpolate(name, strings, expressions, sanitizer, sourceSpan) {
    const interpolationArgs = collateInterpolationArgs(strings, expressions);
    const extraArgs = [];
    if (sanitizer !== null) {
      extraArgs.push(sanitizer);
    }
    return callVariadicInstruction(ATTRIBUTE_INTERPOLATE_CONFIG, [literal(name)], interpolationArgs, extraArgs, sourceSpan);
  }
  function stylePropInterpolate(name, strings, expressions, unit, sourceSpan) {
    const interpolationArgs = collateInterpolationArgs(strings, expressions);
    const extraArgs = [];
    if (unit !== null) {
      extraArgs.push(literal(unit));
    }
    return callVariadicInstruction(STYLE_PROP_INTERPOLATE_CONFIG, [literal(name)], interpolationArgs, extraArgs, sourceSpan);
  }
  function styleMapInterpolate(strings, expressions, sourceSpan) {
    const interpolationArgs = collateInterpolationArgs(strings, expressions);
    return callVariadicInstruction(STYLE_MAP_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);
  }
  function classMapInterpolate(strings, expressions, sourceSpan) {
    const interpolationArgs = collateInterpolationArgs(strings, expressions);
    return callVariadicInstruction(CLASS_MAP_INTERPOLATE_CONFIG, [], interpolationArgs, [], sourceSpan);
  }
  function hostProperty(name, expression, sanitizer, sourceSpan) {
    const args = [literal(name), expression];
    if (sanitizer !== null) {
      args.push(sanitizer);
    }
    return call(Identifiers.hostProperty, args, sourceSpan);
  }
  function syntheticHostProperty(name, expression, sourceSpan) {
    return call(Identifiers.syntheticHostProperty, [literal(name), expression], sourceSpan);
  }
  function pureFunction(varOffset, fn2, args) {
    return callVariadicInstructionExpr(PURE_FUNCTION_CONFIG, [
      literal(varOffset),
      fn2
    ], args, [], null);
  }
  function collateInterpolationArgs(strings, expressions) {
    if (strings.length < 1 || expressions.length !== strings.length - 1) {
      throw new Error(`AssertionError: expected specific shape of args for strings/expressions in interpolation`);
    }
    const interpolationArgs = [];
    if (expressions.length === 1 && strings[0] === "" && strings[1] === "") {
      interpolationArgs.push(expressions[0]);
    } else {
      let idx;
      for (idx = 0; idx < expressions.length; idx++) {
        interpolationArgs.push(literal(strings[idx]), expressions[idx]);
      }
      interpolationArgs.push(literal(strings[idx]));
    }
    return interpolationArgs;
  }
  function call(instruction, args, sourceSpan) {
    const expr = importExpr(instruction).callFn(args, sourceSpan);
    return createStatementOp(new ExpressionStatement(expr, sourceSpan));
  }
  function conditional(slot, condition, contextValue, sourceSpan) {
    const args = [literal(slot), condition];
    if (contextValue !== null) {
      args.push(contextValue);
    }
    return call(Identifiers.conditional, args, sourceSpan);
  }
  var TEXT_INTERPOLATE_CONFIG = {
    constant: [
      Identifiers.textInterpolate,
      Identifiers.textInterpolate1,
      Identifiers.textInterpolate2,
      Identifiers.textInterpolate3,
      Identifiers.textInterpolate4,
      Identifiers.textInterpolate5,
      Identifiers.textInterpolate6,
      Identifiers.textInterpolate7,
      Identifiers.textInterpolate8
    ],
    variable: Identifiers.textInterpolateV,
    mapping: (n) => {
      if (n % 2 === 0) {
        throw new Error(`Expected odd number of arguments`);
      }
      return (n - 1) / 2;
    }
  };
  var PROPERTY_INTERPOLATE_CONFIG = {
    constant: [
      Identifiers.propertyInterpolate,
      Identifiers.propertyInterpolate1,
      Identifiers.propertyInterpolate2,
      Identifiers.propertyInterpolate3,
      Identifiers.propertyInterpolate4,
      Identifiers.propertyInterpolate5,
      Identifiers.propertyInterpolate6,
      Identifiers.propertyInterpolate7,
      Identifiers.propertyInterpolate8
    ],
    variable: Identifiers.propertyInterpolateV,
    mapping: (n) => {
      if (n % 2 === 0) {
        throw new Error(`Expected odd number of arguments`);
      }
      return (n - 1) / 2;
    }
  };
  var STYLE_PROP_INTERPOLATE_CONFIG = {
    constant: [
      Identifiers.styleProp,
      Identifiers.stylePropInterpolate1,
      Identifiers.stylePropInterpolate2,
      Identifiers.stylePropInterpolate3,
      Identifiers.stylePropInterpolate4,
      Identifiers.stylePropInterpolate5,
      Identifiers.stylePropInterpolate6,
      Identifiers.stylePropInterpolate7,
      Identifiers.stylePropInterpolate8
    ],
    variable: Identifiers.stylePropInterpolateV,
    mapping: (n) => {
      if (n % 2 === 0) {
        throw new Error(`Expected odd number of arguments`);
      }
      return (n - 1) / 2;
    }
  };
  var ATTRIBUTE_INTERPOLATE_CONFIG = {
    constant: [
      Identifiers.attribute,
      Identifiers.attributeInterpolate1,
      Identifiers.attributeInterpolate2,
      Identifiers.attributeInterpolate3,
      Identifiers.attributeInterpolate4,
      Identifiers.attributeInterpolate5,
      Identifiers.attributeInterpolate6,
      Identifiers.attributeInterpolate7,
      Identifiers.attributeInterpolate8
    ],
    variable: Identifiers.attributeInterpolateV,
    mapping: (n) => {
      if (n % 2 === 0) {
        throw new Error(`Expected odd number of arguments`);
      }
      return (n - 1) / 2;
    }
  };
  var STYLE_MAP_INTERPOLATE_CONFIG = {
    constant: [
      Identifiers.styleMap,
      Identifiers.styleMapInterpolate1,
      Identifiers.styleMapInterpolate2,
      Identifiers.styleMapInterpolate3,
      Identifiers.styleMapInterpolate4,
      Identifiers.styleMapInterpolate5,
      Identifiers.styleMapInterpolate6,
      Identifiers.styleMapInterpolate7,
      Identifiers.styleMapInterpolate8
    ],
    variable: Identifiers.styleMapInterpolateV,
    mapping: (n) => {
      if (n % 2 === 0) {
        throw new Error(`Expected odd number of arguments`);
      }
      return (n - 1) / 2;
    }
  };
  var CLASS_MAP_INTERPOLATE_CONFIG = {
    constant: [
      Identifiers.classMap,
      Identifiers.classMapInterpolate1,
      Identifiers.classMapInterpolate2,
      Identifiers.classMapInterpolate3,
      Identifiers.classMapInterpolate4,
      Identifiers.classMapInterpolate5,
      Identifiers.classMapInterpolate6,
      Identifiers.classMapInterpolate7,
      Identifiers.classMapInterpolate8
    ],
    variable: Identifiers.classMapInterpolateV,
    mapping: (n) => {
      if (n % 2 === 0) {
        throw new Error(`Expected odd number of arguments`);
      }
      return (n - 1) / 2;
    }
  };
  var PURE_FUNCTION_CONFIG = {
    constant: [
      Identifiers.pureFunction0,
      Identifiers.pureFunction1,
      Identifiers.pureFunction2,
      Identifiers.pureFunction3,
      Identifiers.pureFunction4,
      Identifiers.pureFunction5,
      Identifiers.pureFunction6,
      Identifiers.pureFunction7,
      Identifiers.pureFunction8
    ],
    variable: Identifiers.pureFunctionV,
    mapping: (n) => n
  };
  function callVariadicInstructionExpr(config4, baseArgs, interpolationArgs, extraArgs, sourceSpan) {
    const n = config4.mapping(interpolationArgs.length);
    if (n < config4.constant.length) {
      return importExpr(config4.constant[n]).callFn([...baseArgs, ...interpolationArgs, ...extraArgs], sourceSpan);
    } else if (config4.variable !== null) {
      return importExpr(config4.variable).callFn([...baseArgs, literalArr(interpolationArgs), ...extraArgs], sourceSpan);
    } else {
      throw new Error(`AssertionError: unable to call variadic function`);
    }
  }
  function callVariadicInstruction(config4, baseArgs, interpolationArgs, extraArgs, sourceSpan) {
    return createStatementOp(callVariadicInstructionExpr(config4, baseArgs, interpolationArgs, extraArgs, sourceSpan).toStmt());
  }
  var GLOBAL_TARGET_RESOLVERS$1 = /* @__PURE__ */ new Map([
    ["window", Identifiers.resolveWindow],
    ["document", Identifiers.resolveDocument],
    ["body", Identifiers.resolveBody]
  ]);
  function reify(job) {
    for (const unit of job.units) {
      reifyCreateOperations(unit, unit.create);
      reifyUpdateOperations(unit, unit.update);
    }
  }
  function reifyCreateOperations(unit, ops) {
    for (const op of ops) {
      transformExpressionsInOp(op, reifyIrExpression, VisitorContextFlag.None);
      switch (op.kind) {
        case OpKind.Text:
          OpList.replace(op, text(op.handle.slot, op.initialValue, op.sourceSpan));
          break;
        case OpKind.ElementStart:
          OpList.replace(op, elementStart(op.handle.slot, op.tag, op.attributes, op.localRefs, op.startSourceSpan));
          break;
        case OpKind.Element:
          OpList.replace(op, element(op.handle.slot, op.tag, op.attributes, op.localRefs, op.wholeSourceSpan));
          break;
        case OpKind.ElementEnd:
          OpList.replace(op, elementEnd(op.sourceSpan));
          break;
        case OpKind.ContainerStart:
          OpList.replace(op, elementContainerStart(op.handle.slot, op.attributes, op.localRefs, op.startSourceSpan));
          break;
        case OpKind.Container:
          OpList.replace(op, elementContainer(op.handle.slot, op.attributes, op.localRefs, op.wholeSourceSpan));
          break;
        case OpKind.ContainerEnd:
          OpList.replace(op, elementContainerEnd());
          break;
        case OpKind.I18nStart:
          OpList.replace(op, i18nStart(op.handle.slot, op.messageIndex, op.subTemplateIndex, op.sourceSpan));
          break;
        case OpKind.I18nEnd:
          OpList.replace(op, i18nEnd(op.sourceSpan));
          break;
        case OpKind.I18n:
          OpList.replace(op, i18n(op.handle.slot, op.messageIndex, op.subTemplateIndex, op.sourceSpan));
          break;
        case OpKind.I18nAttributes:
          if (op.i18nAttributesConfig === null) {
            throw new Error(`AssertionError: i18nAttributesConfig was not set`);
          }
          OpList.replace(op, i18nAttributes(op.handle.slot, op.i18nAttributesConfig));
          break;
        case OpKind.Template:
          if (!(unit instanceof ViewCompilationUnit)) {
            throw new Error(`AssertionError: must be compiling a component`);
          }
          if (Array.isArray(op.localRefs)) {
            throw new Error(`AssertionError: local refs array should have been extracted into a constant`);
          }
          const childView = unit.job.views.get(op.xref);
          OpList.replace(op, template(op.handle.slot, variable(childView.fnName), childView.decls, childView.vars, op.tag, op.attributes, op.localRefs, op.startSourceSpan));
          break;
        case OpKind.DisableBindings:
          OpList.replace(op, disableBindings());
          break;
        case OpKind.EnableBindings:
          OpList.replace(op, enableBindings());
          break;
        case OpKind.Pipe:
          OpList.replace(op, pipe2(op.handle.slot, op.name));
          break;
        case OpKind.Listener:
          const listenerFn = reifyListenerHandler(unit, op.handlerFnName, op.handlerOps, op.consumesDollarEvent);
          const eventTargetResolver = op.eventTarget ? GLOBAL_TARGET_RESOLVERS$1.get(op.eventTarget) : null;
          if (eventTargetResolver === void 0) {
            throw new Error(`Unexpected global target '${op.eventTarget}' defined for '${op.name}' event. Supported list of global targets: window,document,body.`);
          }
          OpList.replace(op, listener(op.name, listenerFn, eventTargetResolver, op.hostListener && op.isAnimationListener, op.sourceSpan));
          break;
        case OpKind.TwoWayListener:
          OpList.replace(op, twoWayListener(op.name, reifyListenerHandler(unit, op.handlerFnName, op.handlerOps, true), op.sourceSpan));
          break;
        case OpKind.Variable:
          if (op.variable.name === null) {
            throw new Error(`AssertionError: unnamed variable ${op.xref}`);
          }
          OpList.replace(op, createStatementOp(new DeclareVarStmt(op.variable.name, op.initializer, void 0, StmtModifier.Final)));
          break;
        case OpKind.Namespace:
          switch (op.active) {
            case Namespace.HTML:
              OpList.replace(op, namespaceHTML());
              break;
            case Namespace.SVG:
              OpList.replace(op, namespaceSVG());
              break;
            case Namespace.Math:
              OpList.replace(op, namespaceMath());
              break;
          }
          break;
        case OpKind.Defer:
          const timerScheduling = !!op.loadingMinimumTime || !!op.loadingAfterTime || !!op.placeholderMinimumTime;
          OpList.replace(op, defer2(op.handle.slot, op.mainSlot.slot, op.resolverFn, op.loadingSlot?.slot ?? null, op.placeholderSlot?.slot ?? null, op.errorSlot?.slot ?? null, op.loadingConfig, op.placeholderConfig, timerScheduling, op.sourceSpan));
          break;
        case OpKind.DeferOn:
          let args = [];
          switch (op.trigger.kind) {
            case DeferTriggerKind.Idle:
            case DeferTriggerKind.Immediate:
              break;
            case DeferTriggerKind.Timer:
              args = [op.trigger.delay];
              break;
            case DeferTriggerKind.Interaction:
            case DeferTriggerKind.Hover:
            case DeferTriggerKind.Viewport:
              if (op.trigger.targetSlot?.slot == null || op.trigger.targetSlotViewSteps === null) {
                throw new Error(`Slot or view steps not set in trigger reification for trigger kind ${op.trigger.kind}`);
              }
              args = [op.trigger.targetSlot.slot];
              if (op.trigger.targetSlotViewSteps !== 0) {
                args.push(op.trigger.targetSlotViewSteps);
              }
              break;
            default:
              throw new Error(`AssertionError: Unsupported reification of defer trigger kind ${op.trigger.kind}`);
          }
          OpList.replace(op, deferOn(op.trigger.kind, args, op.prefetch, op.sourceSpan));
          break;
        case OpKind.ProjectionDef:
          OpList.replace(op, projectionDef(op.def));
          break;
        case OpKind.Projection:
          if (op.handle.slot === null) {
            throw new Error("No slot was assigned for project instruction");
          }
          OpList.replace(op, projection(op.handle.slot, op.projectionSlotIndex, op.attributes, op.sourceSpan));
          break;
        case OpKind.RepeaterCreate:
          if (op.handle.slot === null) {
            throw new Error("No slot was assigned for repeater instruction");
          }
          if (!(unit instanceof ViewCompilationUnit)) {
            throw new Error(`AssertionError: must be compiling a component`);
          }
          const repeaterView = unit.job.views.get(op.xref);
          if (repeaterView.fnName === null) {
            throw new Error(`AssertionError: expected repeater primary view to have been named`);
          }
          let emptyViewFnName = null;
          let emptyDecls = null;
          let emptyVars = null;
          if (op.emptyView !== null) {
            const emptyView = unit.job.views.get(op.emptyView);
            if (emptyView === void 0) {
              throw new Error("AssertionError: repeater had empty view xref, but empty view was not found");
            }
            if (emptyView.fnName === null || emptyView.decls === null || emptyView.vars === null) {
              throw new Error(`AssertionError: expected repeater empty view to have been named and counted`);
            }
            emptyViewFnName = emptyView.fnName;
            emptyDecls = emptyView.decls;
            emptyVars = emptyView.vars;
          }
          OpList.replace(op, repeaterCreate(op.handle.slot, repeaterView.fnName, op.decls, op.vars, op.tag, op.attributes, op.trackByFn, op.usesComponentInstance, emptyViewFnName, emptyDecls, emptyVars, op.emptyTag, op.emptyAttributes, op.wholeSourceSpan));
          break;
        case OpKind.Statement:
          break;
        default:
          throw new Error(`AssertionError: Unsupported reification of create op ${OpKind[op.kind]}`);
      }
    }
  }
  function reifyUpdateOperations(_unit, ops) {
    for (const op of ops) {
      transformExpressionsInOp(op, reifyIrExpression, VisitorContextFlag.None);
      switch (op.kind) {
        case OpKind.Advance:
          OpList.replace(op, advance(op.delta, op.sourceSpan));
          break;
        case OpKind.Property:
          if (op.expression instanceof Interpolation) {
            OpList.replace(op, propertyInterpolate(op.name, op.expression.strings, op.expression.expressions, op.sanitizer, op.sourceSpan));
          } else {
            OpList.replace(op, property(op.name, op.expression, op.sanitizer, op.sourceSpan));
          }
          break;
        case OpKind.TwoWayProperty:
          OpList.replace(op, twoWayProperty(op.name, op.expression, op.sanitizer, op.sourceSpan));
          break;
        case OpKind.StyleProp:
          if (op.expression instanceof Interpolation) {
            OpList.replace(op, stylePropInterpolate(op.name, op.expression.strings, op.expression.expressions, op.unit, op.sourceSpan));
          } else {
            OpList.replace(op, styleProp(op.name, op.expression, op.unit, op.sourceSpan));
          }
          break;
        case OpKind.ClassProp:
          OpList.replace(op, classProp(op.name, op.expression, op.sourceSpan));
          break;
        case OpKind.StyleMap:
          if (op.expression instanceof Interpolation) {
            OpList.replace(op, styleMapInterpolate(op.expression.strings, op.expression.expressions, op.sourceSpan));
          } else {
            OpList.replace(op, styleMap(op.expression, op.sourceSpan));
          }
          break;
        case OpKind.ClassMap:
          if (op.expression instanceof Interpolation) {
            OpList.replace(op, classMapInterpolate(op.expression.strings, op.expression.expressions, op.sourceSpan));
          } else {
            OpList.replace(op, classMap(op.expression, op.sourceSpan));
          }
          break;
        case OpKind.I18nExpression:
          OpList.replace(op, i18nExp(op.expression, op.sourceSpan));
          break;
        case OpKind.I18nApply:
          OpList.replace(op, i18nApply(op.handle.slot, op.sourceSpan));
          break;
        case OpKind.InterpolateText:
          OpList.replace(op, textInterpolate(op.interpolation.strings, op.interpolation.expressions, op.sourceSpan));
          break;
        case OpKind.Attribute:
          if (op.expression instanceof Interpolation) {
            OpList.replace(op, attributeInterpolate(op.name, op.expression.strings, op.expression.expressions, op.sanitizer, op.sourceSpan));
          } else {
            OpList.replace(op, attribute(op.name, op.expression, op.sanitizer, op.namespace));
          }
          break;
        case OpKind.HostProperty:
          if (op.expression instanceof Interpolation) {
            throw new Error("not yet handled");
          } else {
            if (op.isAnimationTrigger) {
              OpList.replace(op, syntheticHostProperty(op.name, op.expression, op.sourceSpan));
            } else {
              OpList.replace(op, hostProperty(op.name, op.expression, op.sanitizer, op.sourceSpan));
            }
          }
          break;
        case OpKind.Variable:
          if (op.variable.name === null) {
            throw new Error(`AssertionError: unnamed variable ${op.xref}`);
          }
          OpList.replace(op, createStatementOp(new DeclareVarStmt(op.variable.name, op.initializer, void 0, StmtModifier.Final)));
          break;
        case OpKind.Conditional:
          if (op.processed === null) {
            throw new Error(`Conditional test was not set.`);
          }
          if (op.targetSlot.slot === null) {
            throw new Error(`Conditional slot was not set.`);
          }
          OpList.replace(op, conditional(op.targetSlot.slot, op.processed, op.contextValue, op.sourceSpan));
          break;
        case OpKind.Repeater:
          OpList.replace(op, repeater(op.collection, op.sourceSpan));
          break;
        case OpKind.DeferWhen:
          OpList.replace(op, deferWhen(op.prefetch, op.expr, op.sourceSpan));
          break;
        case OpKind.Statement:
          break;
        default:
          throw new Error(`AssertionError: Unsupported reification of update op ${OpKind[op.kind]}`);
      }
    }
  }
  function reifyIrExpression(expr) {
    if (!isIrExpression(expr)) {
      return expr;
    }
    switch (expr.kind) {
      case ExpressionKind.NextContext:
        return nextContext(expr.steps);
      case ExpressionKind.Reference:
        return reference(expr.targetSlot.slot + 1 + expr.offset);
      case ExpressionKind.LexicalRead:
        throw new Error(`AssertionError: unresolved LexicalRead of ${expr.name}`);
      case ExpressionKind.TwoWayBindingSet:
        throw new Error(`AssertionError: unresolved TwoWayBindingSet`);
      case ExpressionKind.RestoreView:
        if (typeof expr.view === "number") {
          throw new Error(`AssertionError: unresolved RestoreView`);
        }
        return restoreView(expr.view);
      case ExpressionKind.ResetView:
        return resetView(expr.expr);
      case ExpressionKind.GetCurrentView:
        return getCurrentView();
      case ExpressionKind.ReadVariable:
        if (expr.name === null) {
          throw new Error(`Read of unnamed variable ${expr.xref}`);
        }
        return variable(expr.name);
      case ExpressionKind.ReadTemporaryExpr:
        if (expr.name === null) {
          throw new Error(`Read of unnamed temporary ${expr.xref}`);
        }
        return variable(expr.name);
      case ExpressionKind.AssignTemporaryExpr:
        if (expr.name === null) {
          throw new Error(`Assign of unnamed temporary ${expr.xref}`);
        }
        return variable(expr.name).set(expr.expr);
      case ExpressionKind.PureFunctionExpr:
        if (expr.fn === null) {
          throw new Error(`AssertionError: expected PureFunctions to have been extracted`);
        }
        return pureFunction(expr.varOffset, expr.fn, expr.args);
      case ExpressionKind.PureFunctionParameterExpr:
        throw new Error(`AssertionError: expected PureFunctionParameterExpr to have been extracted`);
      case ExpressionKind.PipeBinding:
        return pipeBind(expr.targetSlot.slot, expr.varOffset, expr.args);
      case ExpressionKind.PipeBindingVariadic:
        return pipeBindV(expr.targetSlot.slot, expr.varOffset, expr.args);
      case ExpressionKind.SlotLiteralExpr:
        return literal(expr.slot.slot);
      default:
        throw new Error(`AssertionError: Unsupported reification of ir.Expression kind: ${ExpressionKind[expr.kind]}`);
    }
  }
  function reifyListenerHandler(unit, name, handlerOps, consumesDollarEvent) {
    reifyUpdateOperations(unit, handlerOps);
    const handlerStmts = [];
    for (const op of handlerOps) {
      if (op.kind !== OpKind.Statement) {
        throw new Error(`AssertionError: expected reified statements, but found op ${OpKind[op.kind]}`);
      }
      handlerStmts.push(op.statement);
    }
    const params = [];
    if (consumesDollarEvent) {
      params.push(new FnParam("$event"));
    }
    return fn(params, handlerStmts, void 0, void 0, name);
  }
  function removeEmptyBindings(job) {
    for (const unit of job.units) {
      for (const op of unit.update) {
        switch (op.kind) {
          case OpKind.Attribute:
          case OpKind.Binding:
          case OpKind.ClassProp:
          case OpKind.ClassMap:
          case OpKind.Property:
          case OpKind.StyleProp:
          case OpKind.StyleMap:
            if (op.expression instanceof EmptyExpr) {
              OpList.remove(op);
            }
            break;
        }
      }
    }
  }
  function removeI18nContexts(job) {
    for (const unit of job.units) {
      for (const op of unit.create) {
        switch (op.kind) {
          case OpKind.I18nContext:
            OpList.remove(op);
            break;
          case OpKind.I18nStart:
            op.context = null;
            break;
        }
      }
    }
  }
  function removeUnusedI18nAttributesOps(job) {
    for (const unit of job.units) {
      const ownersWithI18nExpressions = /* @__PURE__ */ new Set();
      for (const op of unit.update) {
        switch (op.kind) {
          case OpKind.I18nExpression:
            ownersWithI18nExpressions.add(op.i18nOwner);
        }
      }
      for (const op of unit.create) {
        switch (op.kind) {
          case OpKind.I18nAttributes:
            if (ownersWithI18nExpressions.has(op.xref)) {
              continue;
            }
            OpList.remove(op);
        }
      }
    }
  }
  function resolveContexts(job) {
    for (const unit of job.units) {
      processLexicalScope$1(unit, unit.create);
      processLexicalScope$1(unit, unit.update);
    }
  }
  function processLexicalScope$1(view, ops) {
    const scope = /* @__PURE__ */ new Map();
    scope.set(view.xref, variable("ctx"));
    for (const op of ops) {
      switch (op.kind) {
        case OpKind.Variable:
          switch (op.variable.kind) {
            case SemanticVariableKind.Context:
              scope.set(op.variable.view, new ReadVariableExpr(op.xref));
              break;
          }
          break;
        case OpKind.Listener:
        case OpKind.TwoWayListener:
          processLexicalScope$1(view, op.handlerOps);
          break;
      }
    }
    if (view === view.job.root) {
      scope.set(view.xref, variable("ctx"));
    }
    for (const op of ops) {
      transformExpressionsInOp(op, (expr) => {
        if (expr instanceof ContextExpr) {
          if (!scope.has(expr.view)) {
            throw new Error(`No context found for reference to view ${expr.view} from view ${view.xref}`);
          }
          return scope.get(expr.view);
        } else {
          return expr;
        }
      }, VisitorContextFlag.None);
    }
  }
  function resolveDollarEvent(job) {
    for (const unit of job.units) {
      transformDollarEvent(unit.create);
      transformDollarEvent(unit.update);
    }
  }
  function transformDollarEvent(ops) {
    for (const op of ops) {
      if (op.kind === OpKind.Listener || op.kind === OpKind.TwoWayListener) {
        transformExpressionsInOp(op, (expr) => {
          if (expr instanceof LexicalReadExpr && expr.name === "$event") {
            if (op.kind === OpKind.Listener) {
              op.consumesDollarEvent = true;
            }
            return new ReadVarExpr(expr.name);
          }
          return expr;
        }, VisitorContextFlag.InChildOperation);
      }
    }
  }
  function resolveI18nElementPlaceholders(job) {
    const i18nContexts = /* @__PURE__ */ new Map();
    const elements = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      for (const op of unit.create) {
        switch (op.kind) {
          case OpKind.I18nContext:
            i18nContexts.set(op.xref, op);
            break;
          case OpKind.ElementStart:
            elements.set(op.xref, op);
            break;
        }
      }
    }
    resolvePlaceholdersForView(job, job.root, i18nContexts, elements);
  }
  function resolvePlaceholdersForView(job, unit, i18nContexts, elements, pendingStructuralDirective) {
    let currentOps = null;
    let pendingStructuralDirectiveCloses = /* @__PURE__ */ new Map();
    for (const op of unit.create) {
      switch (op.kind) {
        case OpKind.I18nStart:
          if (!op.context) {
            throw Error("Could not find i18n context for i18n op");
          }
          currentOps = { i18nBlock: op, i18nContext: i18nContexts.get(op.context) };
          break;
        case OpKind.I18nEnd:
          currentOps = null;
          break;
        case OpKind.ElementStart:
          if (op.i18nPlaceholder !== void 0) {
            if (currentOps === null) {
              throw Error("i18n tag placeholder should only occur inside an i18n block");
            }
            recordElementStart(op, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
            if (pendingStructuralDirective && op.i18nPlaceholder.closeName) {
              pendingStructuralDirectiveCloses.set(op.xref, pendingStructuralDirective);
            }
            pendingStructuralDirective = void 0;
          }
          break;
        case OpKind.ElementEnd:
          const startOp = elements.get(op.xref);
          if (startOp && startOp.i18nPlaceholder !== void 0) {
            if (currentOps === null) {
              throw Error("AssertionError: i18n tag placeholder should only occur inside an i18n block");
            }
            recordElementClose(startOp, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirectiveCloses.get(op.xref));
            pendingStructuralDirectiveCloses.delete(op.xref);
          }
          break;
        case OpKind.Projection:
          if (op.i18nPlaceholder !== void 0) {
            if (currentOps === null) {
              throw Error("i18n tag placeholder should only occur inside an i18n block");
            }
            recordElementStart(op, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
            recordElementClose(op, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
            pendingStructuralDirective = void 0;
          }
          break;
        case OpKind.Template:
          const view = job.views.get(op.xref);
          if (op.i18nPlaceholder === void 0) {
            resolvePlaceholdersForView(job, view, i18nContexts, elements);
          } else {
            if (currentOps === null) {
              throw Error("i18n tag placeholder should only occur inside an i18n block");
            }
            if (op.templateKind === TemplateKind.Structural) {
              resolvePlaceholdersForView(job, view, i18nContexts, elements, op);
            } else {
              recordTemplateStart(job, view, op.handle.slot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
              resolvePlaceholdersForView(job, view, i18nContexts, elements);
              recordTemplateClose(job, view, op.handle.slot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
              pendingStructuralDirective = void 0;
            }
          }
          break;
        case OpKind.RepeaterCreate:
          if (pendingStructuralDirective !== void 0) {
            throw Error("AssertionError: Unexpected structural directive associated with @for block");
          }
          const forSlot = op.handle.slot + 1;
          const forView = job.views.get(op.xref);
          if (op.i18nPlaceholder === void 0) {
            resolvePlaceholdersForView(job, forView, i18nContexts, elements);
          } else {
            if (currentOps === null) {
              throw Error("i18n tag placeholder should only occur inside an i18n block");
            }
            recordTemplateStart(job, forView, forSlot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
            resolvePlaceholdersForView(job, forView, i18nContexts, elements);
            recordTemplateClose(job, forView, forSlot, op.i18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
            pendingStructuralDirective = void 0;
          }
          if (op.emptyView !== null) {
            const emptySlot = op.handle.slot + 2;
            const emptyView = job.views.get(op.emptyView);
            if (op.emptyI18nPlaceholder === void 0) {
              resolvePlaceholdersForView(job, emptyView, i18nContexts, elements);
            } else {
              if (currentOps === null) {
                throw Error("i18n tag placeholder should only occur inside an i18n block");
              }
              recordTemplateStart(job, emptyView, emptySlot, op.emptyI18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
              resolvePlaceholdersForView(job, emptyView, i18nContexts, elements);
              recordTemplateClose(job, emptyView, emptySlot, op.emptyI18nPlaceholder, currentOps.i18nContext, currentOps.i18nBlock, pendingStructuralDirective);
              pendingStructuralDirective = void 0;
            }
          }
          break;
      }
    }
  }
  function recordElementStart(op, i18nContext, i18nBlock, structuralDirective) {
    const { startName, closeName } = op.i18nPlaceholder;
    let flags = I18nParamValueFlags.ElementTag | I18nParamValueFlags.OpenTag;
    let value = op.handle.slot;
    if (structuralDirective !== void 0) {
      flags |= I18nParamValueFlags.TemplateTag;
      value = { element: value, template: structuralDirective.handle.slot };
    }
    if (!closeName) {
      flags |= I18nParamValueFlags.CloseTag;
    }
    addParam(i18nContext.params, startName, value, i18nBlock.subTemplateIndex, flags);
  }
  function recordElementClose(op, i18nContext, i18nBlock, structuralDirective) {
    const { closeName } = op.i18nPlaceholder;
    if (closeName) {
      let flags = I18nParamValueFlags.ElementTag | I18nParamValueFlags.CloseTag;
      let value = op.handle.slot;
      if (structuralDirective !== void 0) {
        flags |= I18nParamValueFlags.TemplateTag;
        value = { element: value, template: structuralDirective.handle.slot };
      }
      addParam(i18nContext.params, closeName, value, i18nBlock.subTemplateIndex, flags);
    }
  }
  function recordTemplateStart(job, view, slot, i18nPlaceholder, i18nContext, i18nBlock, structuralDirective) {
    let { startName, closeName } = i18nPlaceholder;
    let flags = I18nParamValueFlags.TemplateTag | I18nParamValueFlags.OpenTag;
    if (!closeName) {
      flags |= I18nParamValueFlags.CloseTag;
    }
    if (structuralDirective !== void 0) {
      addParam(i18nContext.params, startName, structuralDirective.handle.slot, i18nBlock.subTemplateIndex, flags);
    }
    addParam(i18nContext.params, startName, slot, getSubTemplateIndexForTemplateTag(job, i18nBlock, view), flags);
  }
  function recordTemplateClose(job, view, slot, i18nPlaceholder, i18nContext, i18nBlock, structuralDirective) {
    const { closeName } = i18nPlaceholder;
    const flags = I18nParamValueFlags.TemplateTag | I18nParamValueFlags.CloseTag;
    if (closeName) {
      addParam(i18nContext.params, closeName, slot, getSubTemplateIndexForTemplateTag(job, i18nBlock, view), flags);
      if (structuralDirective !== void 0) {
        addParam(i18nContext.params, closeName, structuralDirective.handle.slot, i18nBlock.subTemplateIndex, flags);
      }
    }
  }
  function getSubTemplateIndexForTemplateTag(job, i18nOp, view) {
    for (const childOp of view.create) {
      if (childOp.kind === OpKind.I18nStart) {
        return childOp.subTemplateIndex;
      }
    }
    return i18nOp.subTemplateIndex;
  }
  function addParam(params, placeholder, value, subTemplateIndex, flags) {
    const values = params.get(placeholder) ?? [];
    values.push({ value, subTemplateIndex, flags });
    params.set(placeholder, values);
  }
  function resolveI18nExpressionPlaceholders(job) {
    const subTemplateIndices = /* @__PURE__ */ new Map();
    const i18nContexts = /* @__PURE__ */ new Map();
    const icuPlaceholders = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      for (const op of unit.create) {
        switch (op.kind) {
          case OpKind.I18nStart:
            subTemplateIndices.set(op.xref, op.subTemplateIndex);
            break;
          case OpKind.I18nContext:
            i18nContexts.set(op.xref, op);
            break;
          case OpKind.IcuPlaceholder:
            icuPlaceholders.set(op.xref, op);
            break;
        }
      }
    }
    const expressionIndices = /* @__PURE__ */ new Map();
    const referenceIndex = (op) => op.usage === I18nExpressionFor.I18nText ? op.i18nOwner : op.context;
    for (const unit of job.units) {
      for (const op of unit.update) {
        if (op.kind === OpKind.I18nExpression) {
          const index = expressionIndices.get(referenceIndex(op)) || 0;
          const subTemplateIndex = subTemplateIndices.get(op.i18nOwner) ?? null;
          const value = {
            value: index,
            subTemplateIndex,
            flags: I18nParamValueFlags.ExpressionIndex
          };
          updatePlaceholder(op, value, i18nContexts, icuPlaceholders);
          expressionIndices.set(referenceIndex(op), index + 1);
        }
      }
    }
  }
  function updatePlaceholder(op, value, i18nContexts, icuPlaceholders) {
    if (op.i18nPlaceholder !== null) {
      const i18nContext = i18nContexts.get(op.context);
      const params = op.resolutionTime === I18nParamResolutionTime.Creation ? i18nContext.params : i18nContext.postprocessingParams;
      const values = params.get(op.i18nPlaceholder) || [];
      values.push(value);
      params.set(op.i18nPlaceholder, values);
    }
    if (op.icuPlaceholder !== null) {
      const icuPlaceholderOp = icuPlaceholders.get(op.icuPlaceholder);
      icuPlaceholderOp?.expressionPlaceholders.push(value);
    }
  }
  function resolveNames(job) {
    for (const unit of job.units) {
      processLexicalScope(unit, unit.create, null);
      processLexicalScope(unit, unit.update, null);
    }
  }
  function processLexicalScope(unit, ops, savedView) {
    const scope = /* @__PURE__ */ new Map();
    for (const op of ops) {
      switch (op.kind) {
        case OpKind.Variable:
          switch (op.variable.kind) {
            case SemanticVariableKind.Identifier:
            case SemanticVariableKind.Alias:
              if (scope.has(op.variable.identifier)) {
                continue;
              }
              scope.set(op.variable.identifier, op.xref);
              break;
            case SemanticVariableKind.SavedView:
              savedView = {
                view: op.variable.view,
                variable: op.xref
              };
              break;
          }
          break;
        case OpKind.Listener:
        case OpKind.TwoWayListener:
          processLexicalScope(unit, op.handlerOps, savedView);
          break;
      }
    }
    for (const op of ops) {
      if (op.kind == OpKind.Listener || op.kind === OpKind.TwoWayListener) {
        continue;
      }
      transformExpressionsInOp(op, (expr) => {
        if (expr instanceof LexicalReadExpr) {
          if (scope.has(expr.name)) {
            return new ReadVariableExpr(scope.get(expr.name));
          } else {
            return new ReadPropExpr(new ContextExpr(unit.job.root.xref), expr.name);
          }
        } else if (expr instanceof RestoreViewExpr && typeof expr.view === "number") {
          if (savedView === null || savedView.view !== expr.view) {
            throw new Error(`AssertionError: no saved view ${expr.view} from view ${unit.xref}`);
          }
          expr.view = new ReadVariableExpr(savedView.variable);
          return expr;
        } else {
          return expr;
        }
      }, VisitorContextFlag.None);
    }
    for (const op of ops) {
      visitExpressionsInOp(op, (expr) => {
        if (expr instanceof LexicalReadExpr) {
          throw new Error(`AssertionError: no lexical reads should remain, but found read of ${expr.name}`);
        }
      });
    }
  }
  var sanitizerFns = /* @__PURE__ */ new Map([
    [SecurityContext2.HTML, Identifiers.sanitizeHtml],
    [SecurityContext2.RESOURCE_URL, Identifiers.sanitizeResourceUrl],
    [SecurityContext2.SCRIPT, Identifiers.sanitizeScript],
    [SecurityContext2.STYLE, Identifiers.sanitizeStyle],
    [SecurityContext2.URL, Identifiers.sanitizeUrl]
  ]);
  var trustedValueFns = /* @__PURE__ */ new Map([
    [SecurityContext2.HTML, Identifiers.trustConstantHtml],
    [SecurityContext2.RESOURCE_URL, Identifiers.trustConstantResourceUrl]
  ]);
  function resolveSanitizers(job) {
    for (const unit of job.units) {
      const elements = createOpXrefMap(unit);
      if (job.kind !== CompilationJobKind.Host) {
        for (const op of unit.create) {
          if (op.kind === OpKind.ExtractedAttribute) {
            const trustedValueFn = trustedValueFns.get(getOnlySecurityContext(op.securityContext)) ?? null;
            op.trustedValueFn = trustedValueFn !== null ? importExpr(trustedValueFn) : null;
          }
        }
      }
      for (const op of unit.update) {
        switch (op.kind) {
          case OpKind.Property:
          case OpKind.Attribute:
          case OpKind.HostProperty:
            let sanitizerFn = null;
            if (Array.isArray(op.securityContext) && op.securityContext.length === 2 && op.securityContext.indexOf(SecurityContext2.URL) > -1 && op.securityContext.indexOf(SecurityContext2.RESOURCE_URL) > -1) {
              sanitizerFn = Identifiers.sanitizeUrlOrResourceUrl;
            } else {
              sanitizerFn = sanitizerFns.get(getOnlySecurityContext(op.securityContext)) ?? null;
            }
            op.sanitizer = sanitizerFn !== null ? importExpr(sanitizerFn) : null;
            if (op.sanitizer === null) {
              let isIframe = false;
              if (job.kind === CompilationJobKind.Host || op.kind === OpKind.HostProperty) {
                isIframe = true;
              } else {
                const ownerOp = elements.get(op.target);
                if (ownerOp === void 0 || !isElementOrContainerOp(ownerOp)) {
                  throw Error("Property should have an element-like owner");
                }
                isIframe = isIframeElement$1(ownerOp);
              }
              if (isIframe && isIframeSecuritySensitiveAttr(op.name)) {
                op.sanitizer = importExpr(Identifiers.validateIframeAttribute);
              }
            }
            break;
        }
      }
    }
  }
  function isIframeElement$1(op) {
    return op.kind === OpKind.ElementStart && op.tag?.toLowerCase() === "iframe";
  }
  function getOnlySecurityContext(securityContext) {
    if (Array.isArray(securityContext)) {
      if (securityContext.length > 1) {
        throw Error(`AssertionError: Ambiguous security context`);
      }
      return securityContext[0] || SecurityContext2.NONE;
    }
    return securityContext;
  }
  function transformTwoWayBindingSet(job) {
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind === OpKind.TwoWayListener) {
          transformExpressionsInOp(op, (expr) => {
            if (expr instanceof TwoWayBindingSetExpr) {
              return wrapAction(expr.target, expr.value);
            }
            return expr;
          }, VisitorContextFlag.InChildOperation);
        }
      }
    }
  }
  function wrapSetOperation(target, value) {
    if (target instanceof ReadVariableExpr) {
      return twoWayBindingSet(target, value);
    }
    return twoWayBindingSet(target, value).or(target.set(value));
  }
  function isReadExpression(value) {
    return value instanceof ReadPropExpr || value instanceof ReadKeyExpr || value instanceof ReadVariableExpr;
  }
  function wrapAction(target, value) {
    if (isReadExpression(target)) {
      return wrapSetOperation(target, value);
    }
    if (target instanceof BinaryOperatorExpr && isReadExpression(target.rhs)) {
      return new BinaryOperatorExpr(target.operator, target.lhs, wrapSetOperation(target.rhs, value));
    }
    if (target instanceof ConditionalExpr && isReadExpression(target.falseCase)) {
      return new ConditionalExpr(target.condition, target.trueCase, wrapSetOperation(target.falseCase, value));
    }
    if (target instanceof NotExpr) {
      let expr = target.condition;
      while (true) {
        if (expr instanceof NotExpr) {
          expr = expr.condition;
        } else {
          if (isReadExpression(expr)) {
            return wrapSetOperation(expr, value);
          }
          break;
        }
      }
    }
    throw new Error(`Unsupported expression in two-way action binding.`);
  }
  function saveAndRestoreView(job) {
    for (const unit of job.units) {
      unit.create.prepend([
        createVariableOp(unit.job.allocateXrefId(), {
          kind: SemanticVariableKind.SavedView,
          name: null,
          view: unit.xref
        }, new GetCurrentViewExpr(), VariableFlags.None)
      ]);
      for (const op of unit.create) {
        if (op.kind !== OpKind.Listener && op.kind !== OpKind.TwoWayListener) {
          continue;
        }
        let needsRestoreView = unit !== job.root;
        if (!needsRestoreView) {
          for (const handlerOp of op.handlerOps) {
            visitExpressionsInOp(handlerOp, (expr) => {
              if (expr instanceof ReferenceExpr) {
                needsRestoreView = true;
              }
            });
          }
        }
        if (needsRestoreView) {
          addSaveRestoreViewOperationToListener(unit, op);
        }
      }
    }
  }
  function addSaveRestoreViewOperationToListener(unit, op) {
    op.handlerOps.prepend([
      createVariableOp(unit.job.allocateXrefId(), {
        kind: SemanticVariableKind.Context,
        name: null,
        view: unit.xref
      }, new RestoreViewExpr(unit.xref), VariableFlags.None)
    ]);
    for (const handlerOp of op.handlerOps) {
      if (handlerOp.kind === OpKind.Statement && handlerOp.statement instanceof ReturnStatement) {
        handlerOp.statement.value = new ResetViewExpr(handlerOp.statement.value);
      }
    }
  }
  function allocateSlots(job) {
    const slotMap = /* @__PURE__ */ new Map();
    for (const unit of job.units) {
      let slotCount = 0;
      for (const op of unit.create) {
        if (!hasConsumesSlotTrait(op)) {
          continue;
        }
        op.handle.slot = slotCount;
        slotMap.set(op.xref, op.handle.slot);
        slotCount += op.numSlotsUsed;
      }
      unit.decls = slotCount;
    }
    for (const unit of job.units) {
      for (const op of unit.ops()) {
        if (op.kind === OpKind.Template || op.kind === OpKind.RepeaterCreate) {
          const childView = job.views.get(op.xref);
          op.decls = childView.decls;
        }
      }
    }
  }
  function specializeStyleBindings(job) {
    for (const unit of job.units) {
      for (const op of unit.update) {
        if (op.kind !== OpKind.Binding) {
          continue;
        }
        switch (op.bindingKind) {
          case BindingKind.ClassName:
            if (op.expression instanceof Interpolation) {
              throw new Error(`Unexpected interpolation in ClassName binding`);
            }
            OpList.replace(op, createClassPropOp(op.target, op.name, op.expression, op.sourceSpan));
            break;
          case BindingKind.StyleProperty:
            OpList.replace(op, createStylePropOp(op.target, op.name, op.expression, op.unit, op.sourceSpan));
            break;
          case BindingKind.Property:
          case BindingKind.Template:
            if (op.name === "style") {
              OpList.replace(op, createStyleMapOp(op.target, op.expression, op.sourceSpan));
            } else if (op.name === "class") {
              OpList.replace(op, createClassMapOp(op.target, op.expression, op.sourceSpan));
            }
            break;
        }
      }
    }
  }
  function generateTemporaryVariables(job) {
    for (const unit of job.units) {
      unit.create.prepend(generateTemporaries(unit.create));
      unit.update.prepend(generateTemporaries(unit.update));
    }
  }
  function generateTemporaries(ops) {
    let opCount = 0;
    let generatedStatements = [];
    for (const op of ops) {
      const finalReads = /* @__PURE__ */ new Map();
      visitExpressionsInOp(op, (expr, flag) => {
        if (flag & VisitorContextFlag.InChildOperation) {
          return;
        }
        if (expr instanceof ReadTemporaryExpr) {
          finalReads.set(expr.xref, expr);
        }
      });
      let count = 0;
      const assigned = /* @__PURE__ */ new Set();
      const released = /* @__PURE__ */ new Set();
      const defs = /* @__PURE__ */ new Map();
      visitExpressionsInOp(op, (expr, flag) => {
        if (flag & VisitorContextFlag.InChildOperation) {
          return;
        }
        if (expr instanceof AssignTemporaryExpr) {
          if (!assigned.has(expr.xref)) {
            assigned.add(expr.xref);
            defs.set(expr.xref, `tmp_${opCount}_${count++}`);
          }
          assignName(defs, expr);
        } else if (expr instanceof ReadTemporaryExpr) {
          if (finalReads.get(expr.xref) === expr) {
            released.add(expr.xref);
            count--;
          }
          assignName(defs, expr);
        }
      });
      generatedStatements.push(...Array.from(new Set(defs.values())).map((name) => createStatementOp(new DeclareVarStmt(name))));
      opCount++;
      if (op.kind === OpKind.Listener || op.kind === OpKind.TwoWayListener) {
        op.handlerOps.prepend(generateTemporaries(op.handlerOps));
      }
    }
    return generatedStatements;
  }
  function assignName(names, expr) {
    const name = names.get(expr.xref);
    if (name === void 0) {
      throw new Error(`Found xref with unassigned name: ${expr.xref}`);
    }
    expr.name = name;
  }
  function generateTrackFns(job) {
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind !== OpKind.RepeaterCreate) {
          continue;
        }
        if (op.trackByFn !== null) {
          continue;
        }
        let usesComponentContext = false;
        op.track = transformExpressionsInExpression(op.track, (expr) => {
          if (expr instanceof PipeBindingExpr || expr instanceof PipeBindingVariadicExpr) {
            throw new Error(`Illegal State: Pipes are not allowed in this context`);
          }
          if (expr instanceof TrackContextExpr) {
            usesComponentContext = true;
            return variable("this");
          }
          return expr;
        }, VisitorContextFlag.None);
        let fn2;
        const fnParams = [new FnParam("$index"), new FnParam("$item")];
        if (usesComponentContext) {
          fn2 = new FunctionExpr(fnParams, [new ReturnStatement(op.track)]);
        } else {
          fn2 = arrowFn(fnParams, op.track);
        }
        op.trackByFn = job.pool.getSharedFunctionReference(fn2, "_forTrack");
      }
    }
  }
  function optimizeTrackFns(job) {
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind !== OpKind.RepeaterCreate) {
          continue;
        }
        if (op.track instanceof ReadVarExpr && op.track.name === "$index") {
          op.trackByFn = importExpr(Identifiers.repeaterTrackByIndex);
        } else if (op.track instanceof ReadVarExpr && op.track.name === "$item") {
          op.trackByFn = importExpr(Identifiers.repeaterTrackByIdentity);
        } else if (isTrackByFunctionCall(job.root.xref, op.track)) {
          op.usesComponentInstance = true;
          if (op.track.receiver.receiver.view === unit.xref) {
            op.trackByFn = op.track.receiver;
          } else {
            op.trackByFn = importExpr(Identifiers.componentInstance).callFn([]).prop(op.track.receiver.name);
            op.track = op.trackByFn;
          }
        } else {
          op.track = transformExpressionsInExpression(op.track, (expr) => {
            if (expr instanceof ContextExpr) {
              op.usesComponentInstance = true;
              return new TrackContextExpr(expr.view);
            }
            return expr;
          }, VisitorContextFlag.None);
        }
      }
    }
  }
  function isTrackByFunctionCall(rootView, expr) {
    if (!(expr instanceof InvokeFunctionExpr) || expr.args.length !== 2) {
      return false;
    }
    if (!(expr.receiver instanceof ReadPropExpr && expr.receiver.receiver instanceof ContextExpr) || expr.receiver.receiver.view !== rootView) {
      return false;
    }
    const [arg0, arg1] = expr.args;
    if (!(arg0 instanceof ReadVarExpr) || arg0.name !== "$index") {
      return false;
    }
    if (!(arg1 instanceof ReadVarExpr) || arg1.name !== "$item") {
      return false;
    }
    return true;
  }
  function generateTrackVariables(job) {
    for (const unit of job.units) {
      for (const op of unit.create) {
        if (op.kind !== OpKind.RepeaterCreate) {
          continue;
        }
        op.track = transformExpressionsInExpression(op.track, (expr) => {
          if (expr instanceof LexicalReadExpr) {
            if (expr.name === op.varNames.$index) {
              return variable("$index");
            } else if (expr.name === op.varNames.$implicit) {
              return variable("$item");
            }
          }
          return expr;
        }, VisitorContextFlag.None);
      }
    }
  }
  function countVariables(job) {
    for (const unit of job.units) {
      let varCount = 0;
      for (const op of unit.ops()) {
        if (hasConsumesVarsTrait(op)) {
          varCount += varsUsedByOp(op);
        }
      }
      for (const op of unit.ops()) {
        visitExpressionsInOp(op, (expr) => {
          if (!isIrExpression(expr)) {
            return;
          }
          if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder && expr instanceof PureFunctionExpr) {
            return;
          }
          if (hasUsesVarOffsetTrait(expr)) {
            expr.varOffset = varCount;
          }
          if (hasConsumesVarsTrait(expr)) {
            varCount += varsUsedByIrExpression(expr);
          }
        });
      }
      if (job.compatibility === CompatibilityMode.TemplateDefinitionBuilder) {
        for (const op of unit.ops()) {
          visitExpressionsInOp(op, (expr) => {
            if (!isIrExpression(expr) || !(expr instanceof PureFunctionExpr)) {
              return;
            }
            if (hasUsesVarOffsetTrait(expr)) {
              expr.varOffset = varCount;
            }
            if (hasConsumesVarsTrait(expr)) {
              varCount += varsUsedByIrExpression(expr);
            }
          });
        }
      }
      unit.vars = varCount;
    }
    if (job instanceof ComponentCompilationJob) {
      for (const unit of job.units) {
        for (const op of unit.create) {
          if (op.kind !== OpKind.Template && op.kind !== OpKind.RepeaterCreate) {
            continue;
          }
          const childView = job.views.get(op.xref);
          op.vars = childView.vars;
        }
      }
    }
  }
  function varsUsedByOp(op) {
    let slots;
    switch (op.kind) {
      case OpKind.Property:
      case OpKind.HostProperty:
      case OpKind.Attribute:
        slots = 1;
        if (op.expression instanceof Interpolation && !isSingletonInterpolation(op.expression)) {
          slots += op.expression.expressions.length;
        }
        return slots;
      case OpKind.TwoWayProperty:
        return 1;
      case OpKind.StyleProp:
      case OpKind.ClassProp:
      case OpKind.StyleMap:
      case OpKind.ClassMap:
        slots = 2;
        if (op.expression instanceof Interpolation) {
          slots += op.expression.expressions.length;
        }
        return slots;
      case OpKind.InterpolateText:
        return op.interpolation.expressions.length;
      case OpKind.I18nExpression:
      case OpKind.Conditional:
      case OpKind.DeferWhen:
        return 1;
      case OpKind.RepeaterCreate:
        return op.emptyView ? 1 : 0;
      default:
        throw new Error(`Unhandled op: ${OpKind[op.kind]}`);
    }
  }
  function varsUsedByIrExpression(expr) {
    switch (expr.kind) {
      case ExpressionKind.PureFunctionExpr:
        return 1 + expr.args.length;
      case ExpressionKind.PipeBinding:
        return 1 + expr.args.length;
      case ExpressionKind.PipeBindingVariadic:
        return 1 + expr.numArgs;
      default:
        throw new Error(`AssertionError: unhandled ConsumesVarsTrait expression ${expr.constructor.name}`);
    }
  }
  function isSingletonInterpolation(expr) {
    if (expr.expressions.length !== 1 || expr.strings.length !== 2) {
      return false;
    }
    if (expr.strings[0] !== "" || expr.strings[1] !== "") {
      return false;
    }
    return true;
  }
  function optimizeVariables(job) {
    for (const unit of job.units) {
      inlineAlwaysInlineVariables(unit.create);
      inlineAlwaysInlineVariables(unit.update);
      for (const op of unit.create) {
        if (op.kind === OpKind.Listener || op.kind === OpKind.TwoWayListener) {
          inlineAlwaysInlineVariables(op.handlerOps);
        }
      }
      optimizeVariablesInOpList(unit.create, job.compatibility);
      optimizeVariablesInOpList(unit.update, job.compatibility);
      for (const op of unit.create) {
        if (op.kind === OpKind.Listener || op.kind === OpKind.TwoWayListener) {
          optimizeVariablesInOpList(op.handlerOps, job.compatibility);
        }
      }
    }
  }
  var Fence;
  (function(Fence2) {
    Fence2[Fence2["None"] = 0] = "None";
    Fence2[Fence2["ViewContextRead"] = 1] = "ViewContextRead";
    Fence2[Fence2["ViewContextWrite"] = 2] = "ViewContextWrite";
    Fence2[Fence2["SideEffectful"] = 4] = "SideEffectful";
  })(Fence || (Fence = {}));
  function inlineAlwaysInlineVariables(ops) {
    const vars = /* @__PURE__ */ new Map();
    for (const op of ops) {
      if (op.kind === OpKind.Variable && op.flags & VariableFlags.AlwaysInline) {
        visitExpressionsInOp(op, (expr) => {
          if (isIrExpression(expr) && fencesForIrExpression(expr) !== Fence.None) {
            throw new Error(`AssertionError: A context-sensitive variable was marked AlwaysInline`);
          }
        });
        vars.set(op.xref, op);
      }
      transformExpressionsInOp(op, (expr) => {
        if (expr instanceof ReadVariableExpr && vars.has(expr.xref)) {
          const varOp = vars.get(expr.xref);
          return varOp.initializer.clone();
        }
        return expr;
      }, VisitorContextFlag.None);
    }
    for (const op of vars.values()) {
      OpList.remove(op);
    }
  }
  function optimizeVariablesInOpList(ops, compatibility) {
    const varDecls = /* @__PURE__ */ new Map();
    const varUsages = /* @__PURE__ */ new Map();
    const varRemoteUsages = /* @__PURE__ */ new Set();
    const opMap = /* @__PURE__ */ new Map();
    for (const op of ops) {
      if (op.kind === OpKind.Variable) {
        if (varDecls.has(op.xref) || varUsages.has(op.xref)) {
          throw new Error(`Should not see two declarations of the same variable: ${op.xref}`);
        }
        varDecls.set(op.xref, op);
        varUsages.set(op.xref, 0);
      }
      opMap.set(op, collectOpInfo(op));
      countVariableUsages(op, varUsages, varRemoteUsages);
    }
    let contextIsUsed = false;
    for (const op of ops.reversed()) {
      const opInfo = opMap.get(op);
      if (op.kind === OpKind.Variable && varUsages.get(op.xref) === 0) {
        if (contextIsUsed && opInfo.fences & Fence.ViewContextWrite || opInfo.fences & Fence.SideEffectful) {
          const stmtOp = createStatementOp(op.initializer.toStmt());
          opMap.set(stmtOp, opInfo);
          OpList.replace(op, stmtOp);
        } else {
          uncountVariableUsages(op, varUsages);
          OpList.remove(op);
        }
        opMap.delete(op);
        varDecls.delete(op.xref);
        varUsages.delete(op.xref);
        continue;
      }
      if (opInfo.fences & Fence.ViewContextRead) {
        contextIsUsed = true;
      }
    }
    const toInline = [];
    for (const [id, count] of varUsages) {
      const decl = varDecls.get(id);
      const isAlwaysInline = !!(decl.flags & VariableFlags.AlwaysInline);
      if (count !== 1 || isAlwaysInline) {
        continue;
      }
      if (varRemoteUsages.has(id)) {
        continue;
      }
      toInline.push(id);
    }
    let candidate;
    while (candidate = toInline.pop()) {
      const decl = varDecls.get(candidate);
      const varInfo = opMap.get(decl);
      const isAlwaysInline = !!(decl.flags & VariableFlags.AlwaysInline);
      if (isAlwaysInline) {
        throw new Error(`AssertionError: Found an 'AlwaysInline' variable after the always inlining pass.`);
      }
      for (let targetOp = decl.next; targetOp.kind !== OpKind.ListEnd; targetOp = targetOp.next) {
        const opInfo = opMap.get(targetOp);
        if (opInfo.variablesUsed.has(candidate)) {
          if (compatibility === CompatibilityMode.TemplateDefinitionBuilder && !allowConservativeInlining(decl, targetOp)) {
            break;
          }
          if (tryInlineVariableInitializer(candidate, decl.initializer, targetOp, varInfo.fences)) {
            opInfo.variablesUsed.delete(candidate);
            for (const id of varInfo.variablesUsed) {
              opInfo.variablesUsed.add(id);
            }
            opInfo.fences |= varInfo.fences;
            varDecls.delete(candidate);
            varUsages.delete(candidate);
            opMap.delete(decl);
            OpList.remove(decl);
          }
          break;
        }
        if (!safeToInlinePastFences(opInfo.fences, varInfo.fences)) {
          break;
        }
      }
    }
  }
  function fencesForIrExpression(expr) {
    switch (expr.kind) {
      case ExpressionKind.NextContext:
        return Fence.ViewContextRead | Fence.ViewContextWrite;
      case ExpressionKind.RestoreView:
        return Fence.ViewContextRead | Fence.ViewContextWrite | Fence.SideEffectful;
      case ExpressionKind.Reference:
        return Fence.ViewContextRead;
      default:
        return Fence.None;
    }
  }
  function collectOpInfo(op) {
    let fences = Fence.None;
    const variablesUsed = /* @__PURE__ */ new Set();
    visitExpressionsInOp(op, (expr) => {
      if (!isIrExpression(expr)) {
        return;
      }
      switch (expr.kind) {
        case ExpressionKind.ReadVariable:
          variablesUsed.add(expr.xref);
          break;
        default:
          fences |= fencesForIrExpression(expr);
      }
    });
    return { fences, variablesUsed };
  }
  function countVariableUsages(op, varUsages, varRemoteUsage) {
    visitExpressionsInOp(op, (expr, flags) => {
      if (!isIrExpression(expr)) {
        return;
      }
      if (expr.kind !== ExpressionKind.ReadVariable) {
        return;
      }
      const count = varUsages.get(expr.xref);
      if (count === void 0) {
        return;
      }
      varUsages.set(expr.xref, count + 1);
      if (flags & VisitorContextFlag.InChildOperation) {
        varRemoteUsage.add(expr.xref);
      }
    });
  }
  function uncountVariableUsages(op, varUsages) {
    visitExpressionsInOp(op, (expr) => {
      if (!isIrExpression(expr)) {
        return;
      }
      if (expr.kind !== ExpressionKind.ReadVariable) {
        return;
      }
      const count = varUsages.get(expr.xref);
      if (count === void 0) {
        return;
      } else if (count === 0) {
        throw new Error(`Inaccurate variable count: ${expr.xref} - found another read but count is already 0`);
      }
      varUsages.set(expr.xref, count - 1);
    });
  }
  function safeToInlinePastFences(fences, declFences) {
    if (fences & Fence.ViewContextWrite) {
      if (declFences & Fence.ViewContextRead) {
        return false;
      }
    } else if (fences & Fence.ViewContextRead) {
      if (declFences & Fence.ViewContextWrite) {
        return false;
      }
    }
    return true;
  }
  function tryInlineVariableInitializer(id, initializer, target, declFences) {
    let inlined = false;
    let inliningAllowed = true;
    transformExpressionsInOp(target, (expr, flags) => {
      if (!isIrExpression(expr)) {
        return expr;
      }
      if (inlined || !inliningAllowed) {
        return expr;
      } else if (flags & VisitorContextFlag.InChildOperation && declFences & Fence.ViewContextRead) {
        return expr;
      }
      switch (expr.kind) {
        case ExpressionKind.ReadVariable:
          if (expr.xref === id) {
            inlined = true;
            return initializer;
          }
          break;
        default:
          const exprFences = fencesForIrExpression(expr);
          inliningAllowed = inliningAllowed && safeToInlinePastFences(exprFences, declFences);
          break;
      }
      return expr;
    }, VisitorContextFlag.None);
    return inlined;
  }
  function allowConservativeInlining(decl, target) {
    switch (decl.variable.kind) {
      case SemanticVariableKind.Identifier:
        if (decl.initializer instanceof ReadVarExpr && decl.initializer.name === "ctx") {
          return true;
        }
        return false;
      case SemanticVariableKind.Context:
        return target.kind === OpKind.Variable;
      default:
        return true;
    }
  }
  function wrapI18nIcus(job) {
    for (const unit of job.units) {
      let currentI18nOp = null;
      let addedI18nId = null;
      for (const op of unit.create) {
        switch (op.kind) {
          case OpKind.I18nStart:
            currentI18nOp = op;
            break;
          case OpKind.I18nEnd:
            currentI18nOp = null;
            break;
          case OpKind.IcuStart:
            if (currentI18nOp === null) {
              addedI18nId = job.allocateXrefId();
              OpList.insertBefore(createI18nStartOp(addedI18nId, op.message, void 0, null), op);
            }
            break;
          case OpKind.IcuEnd:
            if (addedI18nId !== null) {
              OpList.insertAfter(createI18nEndOp(addedI18nId, null), op);
              addedI18nId = null;
            }
            break;
        }
      }
    }
  }
  var phases = [
    { kind: CompilationJobKind.Tmpl, fn: removeContentSelectors },
    { kind: CompilationJobKind.Host, fn: parseHostStyleProperties },
    { kind: CompilationJobKind.Tmpl, fn: emitNamespaceChanges },
    { kind: CompilationJobKind.Tmpl, fn: propagateI18nBlocks },
    { kind: CompilationJobKind.Tmpl, fn: wrapI18nIcus },
    { kind: CompilationJobKind.Both, fn: deduplicateTextBindings },
    { kind: CompilationJobKind.Both, fn: specializeStyleBindings },
    { kind: CompilationJobKind.Both, fn: specializeBindings },
    { kind: CompilationJobKind.Both, fn: extractAttributes },
    { kind: CompilationJobKind.Tmpl, fn: createI18nContexts },
    { kind: CompilationJobKind.Both, fn: parseExtractedStyles },
    { kind: CompilationJobKind.Tmpl, fn: removeEmptyBindings },
    { kind: CompilationJobKind.Both, fn: collapseSingletonInterpolations },
    { kind: CompilationJobKind.Both, fn: orderOps },
    { kind: CompilationJobKind.Tmpl, fn: generateConditionalExpressions },
    { kind: CompilationJobKind.Tmpl, fn: createPipes },
    { kind: CompilationJobKind.Tmpl, fn: configureDeferInstructions },
    { kind: CompilationJobKind.Tmpl, fn: convertI18nText },
    { kind: CompilationJobKind.Tmpl, fn: convertI18nBindings },
    { kind: CompilationJobKind.Tmpl, fn: removeUnusedI18nAttributesOps },
    { kind: CompilationJobKind.Tmpl, fn: assignI18nSlotDependencies },
    { kind: CompilationJobKind.Tmpl, fn: applyI18nExpressions },
    { kind: CompilationJobKind.Tmpl, fn: createVariadicPipes },
    { kind: CompilationJobKind.Both, fn: generatePureLiteralStructures },
    { kind: CompilationJobKind.Tmpl, fn: generateProjectionDefs },
    { kind: CompilationJobKind.Tmpl, fn: generateVariables },
    { kind: CompilationJobKind.Tmpl, fn: saveAndRestoreView },
    { kind: CompilationJobKind.Both, fn: deleteAnyCasts },
    { kind: CompilationJobKind.Both, fn: resolveDollarEvent },
    { kind: CompilationJobKind.Tmpl, fn: generateTrackVariables },
    { kind: CompilationJobKind.Both, fn: resolveNames },
    { kind: CompilationJobKind.Tmpl, fn: resolveDeferTargetNames },
    { kind: CompilationJobKind.Tmpl, fn: transformTwoWayBindingSet },
    { kind: CompilationJobKind.Tmpl, fn: optimizeTrackFns },
    { kind: CompilationJobKind.Both, fn: resolveContexts },
    { kind: CompilationJobKind.Both, fn: resolveSanitizers },
    { kind: CompilationJobKind.Tmpl, fn: liftLocalRefs },
    { kind: CompilationJobKind.Both, fn: generateNullishCoalesceExpressions },
    { kind: CompilationJobKind.Both, fn: expandSafeReads },
    { kind: CompilationJobKind.Both, fn: generateTemporaryVariables },
    { kind: CompilationJobKind.Tmpl, fn: allocateSlots },
    { kind: CompilationJobKind.Tmpl, fn: resolveI18nElementPlaceholders },
    { kind: CompilationJobKind.Tmpl, fn: resolveI18nExpressionPlaceholders },
    { kind: CompilationJobKind.Tmpl, fn: extractI18nMessages },
    { kind: CompilationJobKind.Tmpl, fn: generateTrackFns },
    { kind: CompilationJobKind.Tmpl, fn: collectI18nConsts },
    { kind: CompilationJobKind.Tmpl, fn: collectConstExpressions },
    { kind: CompilationJobKind.Both, fn: collectElementConsts },
    { kind: CompilationJobKind.Tmpl, fn: removeI18nContexts },
    { kind: CompilationJobKind.Both, fn: countVariables },
    { kind: CompilationJobKind.Tmpl, fn: generateAdvance },
    { kind: CompilationJobKind.Both, fn: optimizeVariables },
    { kind: CompilationJobKind.Both, fn: nameFunctionsAndVariables },
    { kind: CompilationJobKind.Tmpl, fn: createDeferDepsFns },
    { kind: CompilationJobKind.Tmpl, fn: mergeNextContextExpressions },
    { kind: CompilationJobKind.Tmpl, fn: generateNgContainerOps },
    { kind: CompilationJobKind.Tmpl, fn: collapseEmptyInstructions },
    { kind: CompilationJobKind.Tmpl, fn: disableBindings$1 },
    { kind: CompilationJobKind.Both, fn: extractPureFunctions },
    { kind: CompilationJobKind.Both, fn: reify },
    { kind: CompilationJobKind.Both, fn: chain }
  ];
  function transform(job, kind) {
    for (const phase of phases) {
      if (phase.kind === kind || phase.kind === CompilationJobKind.Both) {
        phase.fn(job);
      }
    }
  }
  function emitTemplateFn(tpl, pool) {
    const rootFn = emitView(tpl.root);
    emitChildViews(tpl.root, pool);
    return rootFn;
  }
  function emitChildViews(parent, pool) {
    for (const unit of parent.job.units) {
      if (unit.parent !== parent.xref) {
        continue;
      }
      emitChildViews(unit, pool);
      const viewFn = emitView(unit);
      pool.statements.push(viewFn.toDeclStmt(viewFn.name));
    }
  }
  function emitView(view) {
    if (view.fnName === null) {
      throw new Error(`AssertionError: view ${view.xref} is unnamed`);
    }
    const createStatements = [];
    for (const op of view.create) {
      if (op.kind !== OpKind.Statement) {
        throw new Error(`AssertionError: expected all create ops to have been compiled, but got ${OpKind[op.kind]}`);
      }
      createStatements.push(op.statement);
    }
    const updateStatements = [];
    for (const op of view.update) {
      if (op.kind !== OpKind.Statement) {
        throw new Error(`AssertionError: expected all update ops to have been compiled, but got ${OpKind[op.kind]}`);
      }
      updateStatements.push(op.statement);
    }
    const createCond = maybeGenerateRfBlock(1, createStatements);
    const updateCond = maybeGenerateRfBlock(2, updateStatements);
    return fn(
      [
        new FnParam("rf"),
        new FnParam("ctx")
      ],
      [
        ...createCond,
        ...updateCond
      ],
      /* type */
      void 0,
      /* sourceSpan */
      void 0,
      view.fnName
    );
  }
  function maybeGenerateRfBlock(flag, statements) {
    if (statements.length === 0) {
      return [];
    }
    return [
      ifStmt(new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, variable("rf"), literal(flag)), statements)
    ];
  }
  function emitHostBindingFunction(job) {
    if (job.root.fnName === null) {
      throw new Error(`AssertionError: host binding function is unnamed`);
    }
    const createStatements = [];
    for (const op of job.root.create) {
      if (op.kind !== OpKind.Statement) {
        throw new Error(`AssertionError: expected all create ops to have been compiled, but got ${OpKind[op.kind]}`);
      }
      createStatements.push(op.statement);
    }
    const updateStatements = [];
    for (const op of job.root.update) {
      if (op.kind !== OpKind.Statement) {
        throw new Error(`AssertionError: expected all update ops to have been compiled, but got ${OpKind[op.kind]}`);
      }
      updateStatements.push(op.statement);
    }
    if (createStatements.length === 0 && updateStatements.length === 0) {
      return null;
    }
    const createCond = maybeGenerateRfBlock(1, createStatements);
    const updateCond = maybeGenerateRfBlock(2, updateStatements);
    return fn(
      [
        new FnParam("rf"),
        new FnParam("ctx")
      ],
      [
        ...createCond,
        ...updateCond
      ],
      /* type */
      void 0,
      /* sourceSpan */
      void 0,
      job.root.fnName
    );
  }
  var compatibilityMode = CompatibilityMode.TemplateDefinitionBuilder;
  var domSchema = new DomElementSchemaRegistry();
  var NG_TEMPLATE_TAG_NAME$1 = "ng-template";
  function ingestComponent(componentName, template2, constantPool, relativeContextFilePath, i18nUseExternalIds, deferBlocksMeta, allDeferrableDepsFn) {
    const job = new ComponentCompilationJob(componentName, constantPool, compatibilityMode, relativeContextFilePath, i18nUseExternalIds, deferBlocksMeta, allDeferrableDepsFn);
    ingestNodes(job.root, template2);
    return job;
  }
  function ingestHostBinding(input2, bindingParser, constantPool) {
    const job = new HostBindingCompilationJob(input2.componentName, constantPool, compatibilityMode);
    for (const property2 of input2.properties ?? []) {
      let bindingKind = BindingKind.Property;
      if (property2.name.startsWith("attr.")) {
        property2.name = property2.name.substring("attr.".length);
        bindingKind = BindingKind.Attribute;
      }
      if (property2.isAnimation) {
        bindingKind = BindingKind.Animation;
      }
      const securityContexts = bindingParser.calcPossibleSecurityContexts(input2.componentSelector, property2.name, bindingKind === BindingKind.Attribute).filter((context2) => context2 !== SecurityContext2.NONE);
      ingestHostProperty(job, property2, bindingKind, securityContexts);
    }
    for (const [name, expr] of Object.entries(input2.attributes) ?? []) {
      const securityContexts = bindingParser.calcPossibleSecurityContexts(input2.componentSelector, name, true).filter((context2) => context2 !== SecurityContext2.NONE);
      ingestHostAttribute(job, name, expr, securityContexts);
    }
    for (const event of input2.events ?? []) {
      ingestHostEvent(job, event);
    }
    return job;
  }
  function ingestHostProperty(job, property2, bindingKind, securityContexts) {
    let expression;
    const ast = property2.expression.ast;
    if (ast instanceof Interpolation$1) {
      expression = new Interpolation(ast.strings, ast.expressions.map((expr) => convertAst(expr, job, property2.sourceSpan)), []);
    } else {
      expression = convertAst(ast, job, property2.sourceSpan);
    }
    job.root.update.push(createBindingOp(
      job.root.xref,
      bindingKind,
      property2.name,
      expression,
      null,
      securityContexts,
      false,
      false,
      null,
      /* TODO: How do Host bindings handle i18n attrs? */
      null,
      property2.sourceSpan
    ));
  }
  function ingestHostAttribute(job, name, value, securityContexts) {
    const attrBinding = createBindingOp(
      job.root.xref,
      BindingKind.Attribute,
      name,
      value,
      null,
      securityContexts,
      /* Host attributes should always be extracted to const hostAttrs, even if they are not
       *strictly* text literals */
      true,
      false,
      null,
      /* TODO */
      null,
      /** TODO: May be null? */
      value.sourceSpan
    );
    job.root.update.push(attrBinding);
  }
  function ingestHostEvent(job, event) {
    const [phase, target] = event.type !== 1 ? [null, event.targetOrPhase] : [event.targetOrPhase, null];
    const eventBinding = createListenerOp(job.root.xref, new SlotHandle(), event.name, null, makeListenerHandlerOps(job.root, event.handler, event.handlerSpan), phase, target, true, event.sourceSpan);
    job.root.create.push(eventBinding);
  }
  function ingestNodes(unit, template2) {
    for (const node of template2) {
      if (node instanceof Element$1) {
        ingestElement(unit, node);
      } else if (node instanceof Template) {
        ingestTemplate(unit, node);
      } else if (node instanceof Content) {
        ingestContent(unit, node);
      } else if (node instanceof Text$3) {
        ingestText(unit, node, null);
      } else if (node instanceof BoundText) {
        ingestBoundText(unit, node, null);
      } else if (node instanceof IfBlock) {
        ingestIfBlock(unit, node);
      } else if (node instanceof SwitchBlock) {
        ingestSwitchBlock(unit, node);
      } else if (node instanceof DeferredBlock) {
        ingestDeferBlock(unit, node);
      } else if (node instanceof Icu$1) {
        ingestIcu(unit, node);
      } else if (node instanceof ForLoopBlock) {
        ingestForBlock(unit, node);
      } else {
        throw new Error(`Unsupported template node: ${node.constructor.name}`);
      }
    }
  }
  function ingestElement(unit, element2) {
    if (element2.i18n !== void 0 && !(element2.i18n instanceof Message || element2.i18n instanceof TagPlaceholder)) {
      throw Error(`Unhandled i18n metadata type for element: ${element2.i18n.constructor.name}`);
    }
    const id = unit.job.allocateXrefId();
    const [namespaceKey, elementName] = splitNsName(element2.name);
    const startOp = createElementStartOp(elementName, id, namespaceForKey(namespaceKey), element2.i18n instanceof TagPlaceholder ? element2.i18n : void 0, element2.startSourceSpan, element2.sourceSpan);
    unit.create.push(startOp);
    ingestElementBindings(unit, startOp, element2);
    ingestReferences(startOp, element2);
    let i18nBlockId = null;
    if (element2.i18n instanceof Message) {
      i18nBlockId = unit.job.allocateXrefId();
      unit.create.push(createI18nStartOp(i18nBlockId, element2.i18n, void 0, element2.startSourceSpan));
    }
    ingestNodes(unit, element2.children);
    const endOp = createElementEndOp(id, element2.endSourceSpan ?? element2.startSourceSpan);
    unit.create.push(endOp);
    if (i18nBlockId !== null) {
      OpList.insertBefore(createI18nEndOp(i18nBlockId, element2.endSourceSpan ?? element2.startSourceSpan), endOp);
    }
  }
  function ingestTemplate(unit, tmpl) {
    if (tmpl.i18n !== void 0 && !(tmpl.i18n instanceof Message || tmpl.i18n instanceof TagPlaceholder)) {
      throw Error(`Unhandled i18n metadata type for template: ${tmpl.i18n.constructor.name}`);
    }
    const childView = unit.job.allocateView(unit.xref);
    let tagNameWithoutNamespace = tmpl.tagName;
    let namespacePrefix = "";
    if (tmpl.tagName) {
      [namespacePrefix, tagNameWithoutNamespace] = splitNsName(tmpl.tagName);
    }
    const i18nPlaceholder = tmpl.i18n instanceof TagPlaceholder ? tmpl.i18n : void 0;
    const namespace = namespaceForKey(namespacePrefix);
    const functionNameSuffix = tagNameWithoutNamespace === null ? "" : prefixWithNamespace(tagNameWithoutNamespace, namespace);
    const templateKind = isPlainTemplate(tmpl) ? TemplateKind.NgTemplate : TemplateKind.Structural;
    const templateOp = createTemplateOp(childView.xref, templateKind, tagNameWithoutNamespace, functionNameSuffix, namespace, i18nPlaceholder, tmpl.startSourceSpan, tmpl.sourceSpan);
    unit.create.push(templateOp);
    ingestTemplateBindings(unit, templateOp, tmpl, templateKind);
    ingestReferences(templateOp, tmpl);
    ingestNodes(childView, tmpl.children);
    for (const { name, value } of tmpl.variables) {
      childView.contextVariables.set(name, value !== "" ? value : "$implicit");
    }
    if (templateKind === TemplateKind.NgTemplate && tmpl.i18n instanceof Message) {
      const id = unit.job.allocateXrefId();
      OpList.insertAfter(createI18nStartOp(id, tmpl.i18n, void 0, tmpl.startSourceSpan), childView.create.head);
      OpList.insertBefore(createI18nEndOp(id, tmpl.endSourceSpan ?? tmpl.startSourceSpan), childView.create.tail);
    }
  }
  function ingestContent(unit, content) {
    if (content.i18n !== void 0 && !(content.i18n instanceof TagPlaceholder)) {
      throw Error(`Unhandled i18n metadata type for element: ${content.i18n.constructor.name}`);
    }
    const op = createProjectionOp(unit.job.allocateXrefId(), content.selector, content.i18n, content.sourceSpan);
    for (const attr of content.attributes) {
      const securityContext = domSchema.securityContext(content.name, attr.name, true);
      unit.update.push(createBindingOp(op.xref, BindingKind.Attribute, attr.name, literal(attr.value), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));
    }
    unit.create.push(op);
  }
  function ingestText(unit, text2, icuPlaceholder) {
    unit.create.push(createTextOp(unit.job.allocateXrefId(), text2.value, icuPlaceholder, text2.sourceSpan));
  }
  function ingestBoundText(unit, text2, icuPlaceholder) {
    let value = text2.value;
    if (value instanceof ASTWithSource) {
      value = value.ast;
    }
    if (!(value instanceof Interpolation$1)) {
      throw new Error(`AssertionError: expected Interpolation for BoundText node, got ${value.constructor.name}`);
    }
    if (text2.i18n !== void 0 && !(text2.i18n instanceof Container)) {
      throw Error(`Unhandled i18n metadata type for text interpolation: ${text2.i18n?.constructor.name}`);
    }
    const i18nPlaceholders = text2.i18n instanceof Container ? text2.i18n.children.filter((node) => node instanceof Placeholder).map((placeholder) => placeholder.name) : [];
    if (i18nPlaceholders.length > 0 && i18nPlaceholders.length !== value.expressions.length) {
      throw Error(`Unexpected number of i18n placeholders (${value.expressions.length}) for BoundText with ${value.expressions.length} expressions`);
    }
    const textXref = unit.job.allocateXrefId();
    unit.create.push(createTextOp(textXref, "", icuPlaceholder, text2.sourceSpan));
    const baseSourceSpan = unit.job.compatibility ? null : text2.sourceSpan;
    unit.update.push(createInterpolateTextOp(textXref, new Interpolation(value.strings, value.expressions.map((expr) => convertAst(expr, unit.job, baseSourceSpan)), i18nPlaceholders), text2.sourceSpan));
  }
  function ingestIfBlock(unit, ifBlock) {
    let firstXref = null;
    let firstSlotHandle = null;
    let conditions = [];
    for (let i = 0; i < ifBlock.branches.length; i++) {
      const ifCase = ifBlock.branches[i];
      const cView = unit.job.allocateView(unit.xref);
      let tagName = null;
      if (i === 0) {
        tagName = ingestControlFlowInsertionPoint(unit, cView.xref, ifCase);
      }
      if (ifCase.expressionAlias !== null) {
        cView.contextVariables.set(ifCase.expressionAlias.name, CTX_REF);
      }
      let ifCaseI18nMeta = void 0;
      if (ifCase.i18n !== void 0) {
        if (!(ifCase.i18n instanceof BlockPlaceholder)) {
          throw Error(`Unhandled i18n metadata type for if block: ${ifCase.i18n?.constructor.name}`);
        }
        ifCaseI18nMeta = ifCase.i18n;
      }
      const templateOp = createTemplateOp(cView.xref, TemplateKind.Block, tagName, "Conditional", Namespace.HTML, ifCaseI18nMeta, ifCase.startSourceSpan, ifCase.sourceSpan);
      unit.create.push(templateOp);
      if (firstXref === null) {
        firstXref = cView.xref;
        firstSlotHandle = templateOp.handle;
      }
      const caseExpr = ifCase.expression ? convertAst(ifCase.expression, unit.job, null) : null;
      const conditionalCaseExpr = new ConditionalCaseExpr(caseExpr, templateOp.xref, templateOp.handle, ifCase.expressionAlias);
      conditions.push(conditionalCaseExpr);
      ingestNodes(cView, ifCase.children);
    }
    const conditional2 = createConditionalOp(firstXref, firstSlotHandle, null, conditions, ifBlock.sourceSpan);
    unit.update.push(conditional2);
  }
  function ingestSwitchBlock(unit, switchBlock) {
    if (switchBlock.cases.length === 0) {
      return;
    }
    let firstXref = null;
    let firstSlotHandle = null;
    let conditions = [];
    for (const switchCase of switchBlock.cases) {
      const cView = unit.job.allocateView(unit.xref);
      let switchCaseI18nMeta = void 0;
      if (switchCase.i18n !== void 0) {
        if (!(switchCase.i18n instanceof BlockPlaceholder)) {
          throw Error(`Unhandled i18n metadata type for switch block: ${switchCase.i18n?.constructor.name}`);
        }
        switchCaseI18nMeta = switchCase.i18n;
      }
      const templateOp = createTemplateOp(cView.xref, TemplateKind.Block, null, "Case", Namespace.HTML, switchCaseI18nMeta, switchCase.startSourceSpan, switchCase.sourceSpan);
      unit.create.push(templateOp);
      if (firstXref === null) {
        firstXref = cView.xref;
        firstSlotHandle = templateOp.handle;
      }
      const caseExpr = switchCase.expression ? convertAst(switchCase.expression, unit.job, switchBlock.startSourceSpan) : null;
      const conditionalCaseExpr = new ConditionalCaseExpr(caseExpr, templateOp.xref, templateOp.handle);
      conditions.push(conditionalCaseExpr);
      ingestNodes(cView, switchCase.children);
    }
    const conditional2 = createConditionalOp(firstXref, firstSlotHandle, convertAst(switchBlock.expression, unit.job, null), conditions, switchBlock.sourceSpan);
    unit.update.push(conditional2);
  }
  function ingestDeferView(unit, suffix, i18nMeta, children, sourceSpan) {
    if (i18nMeta !== void 0 && !(i18nMeta instanceof BlockPlaceholder)) {
      throw Error("Unhandled i18n metadata type for defer block");
    }
    if (children === void 0) {
      return null;
    }
    const secondaryView = unit.job.allocateView(unit.xref);
    ingestNodes(secondaryView, children);
    const templateOp = createTemplateOp(secondaryView.xref, TemplateKind.Block, null, `Defer${suffix}`, Namespace.HTML, i18nMeta, sourceSpan, sourceSpan);
    unit.create.push(templateOp);
    return templateOp;
  }
  function ingestDeferBlock(unit, deferBlock) {
    const blockMeta = unit.job.deferBlocksMeta.get(deferBlock);
    if (blockMeta === void 0) {
      throw new Error(`AssertionError: unable to find metadata for deferred block`);
    }
    const main = ingestDeferView(unit, "", deferBlock.i18n, deferBlock.children, deferBlock.sourceSpan);
    const loading = ingestDeferView(unit, "Loading", deferBlock.loading?.i18n, deferBlock.loading?.children, deferBlock.loading?.sourceSpan);
    const placeholder = ingestDeferView(unit, "Placeholder", deferBlock.placeholder?.i18n, deferBlock.placeholder?.children, deferBlock.placeholder?.sourceSpan);
    const error2 = ingestDeferView(unit, "Error", deferBlock.error?.i18n, deferBlock.error?.children, deferBlock.error?.sourceSpan);
    const deferXref = unit.job.allocateXrefId();
    const deferOp = createDeferOp(deferXref, main.xref, main.handle, blockMeta, unit.job.allDeferrableDepsFn, deferBlock.sourceSpan);
    deferOp.placeholderView = placeholder?.xref ?? null;
    deferOp.placeholderSlot = placeholder?.handle ?? null;
    deferOp.loadingSlot = loading?.handle ?? null;
    deferOp.errorSlot = error2?.handle ?? null;
    deferOp.placeholderMinimumTime = deferBlock.placeholder?.minimumTime ?? null;
    deferOp.loadingMinimumTime = deferBlock.loading?.minimumTime ?? null;
    deferOp.loadingAfterTime = deferBlock.loading?.afterTime ?? null;
    unit.create.push(deferOp);
    let prefetch = false;
    let deferOnOps = [];
    let deferWhenOps = [];
    for (const triggers of [deferBlock.triggers, deferBlock.prefetchTriggers]) {
      if (triggers.idle !== void 0) {
        const deferOnOp = createDeferOnOp(deferXref, { kind: DeferTriggerKind.Idle }, prefetch, triggers.idle.sourceSpan);
        deferOnOps.push(deferOnOp);
      }
      if (triggers.immediate !== void 0) {
        const deferOnOp = createDeferOnOp(deferXref, { kind: DeferTriggerKind.Immediate }, prefetch, triggers.immediate.sourceSpan);
        deferOnOps.push(deferOnOp);
      }
      if (triggers.timer !== void 0) {
        const deferOnOp = createDeferOnOp(deferXref, { kind: DeferTriggerKind.Timer, delay: triggers.timer.delay }, prefetch, triggers.timer.sourceSpan);
        deferOnOps.push(deferOnOp);
      }
      if (triggers.hover !== void 0) {
        const deferOnOp = createDeferOnOp(deferXref, {
          kind: DeferTriggerKind.Hover,
          targetName: triggers.hover.reference,
          targetXref: null,
          targetSlot: null,
          targetView: null,
          targetSlotViewSteps: null
        }, prefetch, triggers.hover.sourceSpan);
        deferOnOps.push(deferOnOp);
      }
      if (triggers.interaction !== void 0) {
        const deferOnOp = createDeferOnOp(deferXref, {
          kind: DeferTriggerKind.Interaction,
          targetName: triggers.interaction.reference,
          targetXref: null,
          targetSlot: null,
          targetView: null,
          targetSlotViewSteps: null
        }, prefetch, triggers.interaction.sourceSpan);
        deferOnOps.push(deferOnOp);
      }
      if (triggers.viewport !== void 0) {
        const deferOnOp = createDeferOnOp(deferXref, {
          kind: DeferTriggerKind.Viewport,
          targetName: triggers.viewport.reference,
          targetXref: null,
          targetSlot: null,
          targetView: null,
          targetSlotViewSteps: null
        }, prefetch, triggers.viewport.sourceSpan);
        deferOnOps.push(deferOnOp);
      }
      if (triggers.when !== void 0) {
        if (triggers.when.value instanceof Interpolation$1) {
          throw new Error(`Unexpected interpolation in defer block when trigger`);
        }
        const deferOnOp = createDeferWhenOp(deferXref, convertAst(triggers.when.value, unit.job, triggers.when.sourceSpan), prefetch, triggers.when.sourceSpan);
        deferWhenOps.push(deferOnOp);
      }
      if (deferOnOps.length === 0 && deferWhenOps.length === 0) {
        deferOnOps.push(createDeferOnOp(deferXref, { kind: DeferTriggerKind.Idle }, false, null));
      }
      prefetch = true;
    }
    unit.create.push(deferOnOps);
    unit.update.push(deferWhenOps);
  }
  function ingestIcu(unit, icu) {
    if (icu.i18n instanceof Message && isSingleI18nIcu(icu.i18n)) {
      const xref = unit.job.allocateXrefId();
      unit.create.push(createIcuStartOp(xref, icu.i18n, icuFromI18nMessage(icu.i18n).name, null));
      for (const [placeholder, text2] of Object.entries({ ...icu.vars, ...icu.placeholders })) {
        if (text2 instanceof BoundText) {
          ingestBoundText(unit, text2, placeholder);
        } else {
          ingestText(unit, text2, placeholder);
        }
      }
      unit.create.push(createIcuEndOp(xref));
    } else {
      throw Error(`Unhandled i18n metadata type for ICU: ${icu.i18n?.constructor.name}`);
    }
  }
  function ingestForBlock(unit, forBlock) {
    const repeaterView = unit.job.allocateView(unit.xref);
    repeaterView.contextVariables.set(forBlock.item.name, forBlock.item.value);
    repeaterView.contextVariables.set(forBlock.contextVariables.$index.name, forBlock.contextVariables.$index.value);
    repeaterView.contextVariables.set(forBlock.contextVariables.$count.name, forBlock.contextVariables.$count.value);
    const indexName = `\u0275${forBlock.contextVariables.$index.name}_${repeaterView.xref}`;
    const countName = `\u0275${forBlock.contextVariables.$count.name}_${repeaterView.xref}`;
    repeaterView.contextVariables.set(indexName, forBlock.contextVariables.$index.value);
    repeaterView.contextVariables.set(countName, forBlock.contextVariables.$count.value);
    repeaterView.aliases.add({
      kind: SemanticVariableKind.Alias,
      name: null,
      identifier: forBlock.contextVariables.$first.name,
      expression: new LexicalReadExpr(indexName).identical(literal(0))
    });
    repeaterView.aliases.add({
      kind: SemanticVariableKind.Alias,
      name: null,
      identifier: forBlock.contextVariables.$last.name,
      expression: new LexicalReadExpr(indexName).identical(new LexicalReadExpr(countName).minus(literal(1)))
    });
    repeaterView.aliases.add({
      kind: SemanticVariableKind.Alias,
      name: null,
      identifier: forBlock.contextVariables.$even.name,
      expression: new LexicalReadExpr(indexName).modulo(literal(2)).identical(literal(0))
    });
    repeaterView.aliases.add({
      kind: SemanticVariableKind.Alias,
      name: null,
      identifier: forBlock.contextVariables.$odd.name,
      expression: new LexicalReadExpr(indexName).modulo(literal(2)).notIdentical(literal(0))
    });
    const sourceSpan = convertSourceSpan(forBlock.trackBy.span, forBlock.sourceSpan);
    const track = convertAst(forBlock.trackBy, unit.job, sourceSpan);
    ingestNodes(repeaterView, forBlock.children);
    let emptyView = null;
    let emptyTagName = null;
    if (forBlock.empty !== null) {
      emptyView = unit.job.allocateView(unit.xref);
      ingestNodes(emptyView, forBlock.empty.children);
      emptyTagName = ingestControlFlowInsertionPoint(unit, emptyView.xref, forBlock.empty);
    }
    const varNames = {
      $index: forBlock.contextVariables.$index.name,
      $count: forBlock.contextVariables.$count.name,
      $first: forBlock.contextVariables.$first.name,
      $last: forBlock.contextVariables.$last.name,
      $even: forBlock.contextVariables.$even.name,
      $odd: forBlock.contextVariables.$odd.name,
      $implicit: forBlock.item.name
    };
    if (forBlock.i18n !== void 0 && !(forBlock.i18n instanceof BlockPlaceholder)) {
      throw Error("AssertionError: Unhandled i18n metadata type or @for");
    }
    if (forBlock.empty?.i18n !== void 0 && !(forBlock.empty.i18n instanceof BlockPlaceholder)) {
      throw Error("AssertionError: Unhandled i18n metadata type or @empty");
    }
    const i18nPlaceholder = forBlock.i18n;
    const emptyI18nPlaceholder = forBlock.empty?.i18n;
    const tagName = ingestControlFlowInsertionPoint(unit, repeaterView.xref, forBlock);
    const repeaterCreate2 = createRepeaterCreateOp(repeaterView.xref, emptyView?.xref ?? null, tagName, track, varNames, emptyTagName, i18nPlaceholder, emptyI18nPlaceholder, forBlock.startSourceSpan, forBlock.sourceSpan);
    unit.create.push(repeaterCreate2);
    const expression = convertAst(forBlock.expression, unit.job, convertSourceSpan(forBlock.expression.span, forBlock.sourceSpan));
    const repeater2 = createRepeaterOp(repeaterCreate2.xref, repeaterCreate2.handle, expression, forBlock.sourceSpan);
    unit.update.push(repeater2);
  }
  function convertAst(ast, job, baseSourceSpan) {
    if (ast instanceof ASTWithSource) {
      return convertAst(ast.ast, job, baseSourceSpan);
    } else if (ast instanceof PropertyRead) {
      const isThisReceiver = ast.receiver instanceof ThisReceiver;
      const isImplicitReceiver = ast.receiver instanceof ImplicitReceiver && !(ast.receiver instanceof ThisReceiver);
      const isSpecialNode = ast.name === "$any" || ast.name === "$event";
      if (isImplicitReceiver || isThisReceiver && !isSpecialNode) {
        return new LexicalReadExpr(ast.name);
      } else {
        return new ReadPropExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name, null, convertSourceSpan(ast.span, baseSourceSpan));
      }
    } else if (ast instanceof PropertyWrite) {
      if (ast.receiver instanceof ImplicitReceiver) {
        return new WritePropExpr(
          // TODO: Is it correct to always use the root context in place of the implicit receiver?
          new ContextExpr(job.root.xref),
          ast.name,
          convertAst(ast.value, job, baseSourceSpan),
          null,
          convertSourceSpan(ast.span, baseSourceSpan)
        );
      }
      return new WritePropExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name, convertAst(ast.value, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
    } else if (ast instanceof KeyedWrite) {
      return new WriteKeyExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), convertAst(ast.value, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
    } else if (ast instanceof Call) {
      if (ast.receiver instanceof ImplicitReceiver) {
        throw new Error(`Unexpected ImplicitReceiver`);
      } else {
        return new InvokeFunctionExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.args.map((arg) => convertAst(arg, job, baseSourceSpan)), void 0, convertSourceSpan(ast.span, baseSourceSpan));
      }
    } else if (ast instanceof LiteralPrimitive) {
      return literal(ast.value, void 0, convertSourceSpan(ast.span, baseSourceSpan));
    } else if (ast instanceof Unary) {
      switch (ast.operator) {
        case "+":
          return new UnaryOperatorExpr(UnaryOperator.Plus, convertAst(ast.expr, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
        case "-":
          return new UnaryOperatorExpr(UnaryOperator.Minus, convertAst(ast.expr, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
        default:
          throw new Error(`AssertionError: unknown unary operator ${ast.operator}`);
      }
    } else if (ast instanceof Binary) {
      const operator = BINARY_OPERATORS.get(ast.operation);
      if (operator === void 0) {
        throw new Error(`AssertionError: unknown binary operator ${ast.operation}`);
      }
      return new BinaryOperatorExpr(operator, convertAst(ast.left, job, baseSourceSpan), convertAst(ast.right, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
    } else if (ast instanceof ThisReceiver) {
      return new ContextExpr(job.root.xref);
    } else if (ast instanceof KeyedRead) {
      return new ReadKeyExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
    } else if (ast instanceof Chain) {
      throw new Error(`AssertionError: Chain in unknown context`);
    } else if (ast instanceof LiteralMap) {
      const entries = ast.keys.map((key, idx) => {
        const value = ast.values[idx];
        return new LiteralMapEntry(key.key, convertAst(value, job, baseSourceSpan), key.quoted);
      });
      return new LiteralMapExpr(entries, void 0, convertSourceSpan(ast.span, baseSourceSpan));
    } else if (ast instanceof LiteralArray) {
      return new LiteralArrayExpr(ast.expressions.map((expr) => convertAst(expr, job, baseSourceSpan)));
    } else if (ast instanceof Conditional) {
      return new ConditionalExpr(convertAst(ast.condition, job, baseSourceSpan), convertAst(ast.trueExp, job, baseSourceSpan), convertAst(ast.falseExp, job, baseSourceSpan), void 0, convertSourceSpan(ast.span, baseSourceSpan));
    } else if (ast instanceof NonNullAssert) {
      return convertAst(ast.expression, job, baseSourceSpan);
    } else if (ast instanceof BindingPipe) {
      return new PipeBindingExpr(job.allocateXrefId(), new SlotHandle(), ast.name, [
        convertAst(ast.exp, job, baseSourceSpan),
        ...ast.args.map((arg) => convertAst(arg, job, baseSourceSpan))
      ]);
    } else if (ast instanceof SafeKeyedRead) {
      return new SafeKeyedReadExpr(convertAst(ast.receiver, job, baseSourceSpan), convertAst(ast.key, job, baseSourceSpan), convertSourceSpan(ast.span, baseSourceSpan));
    } else if (ast instanceof SafePropertyRead) {
      return new SafePropertyReadExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.name);
    } else if (ast instanceof SafeCall) {
      return new SafeInvokeFunctionExpr(convertAst(ast.receiver, job, baseSourceSpan), ast.args.map((a) => convertAst(a, job, baseSourceSpan)));
    } else if (ast instanceof EmptyExpr$1) {
      return new EmptyExpr(convertSourceSpan(ast.span, baseSourceSpan));
    } else if (ast instanceof PrefixNot) {
      return not(convertAst(ast.expression, job, baseSourceSpan), convertSourceSpan(ast.span, baseSourceSpan));
    } else {
      throw new Error(`Unhandled expression type "${ast.constructor.name}" in file "${baseSourceSpan?.start.file.url}"`);
    }
  }
  function convertAstWithInterpolation(job, value, i18nMeta, sourceSpan) {
    let expression;
    if (value instanceof Interpolation$1) {
      expression = new Interpolation(value.strings, value.expressions.map((e2) => convertAst(e2, job, sourceSpan ?? null)), Object.keys(asMessage(i18nMeta)?.placeholders ?? {}));
    } else if (value instanceof AST) {
      expression = convertAst(value, job, sourceSpan ?? null);
    } else {
      expression = literal(value);
    }
    return expression;
  }
  var BINDING_KINDS = /* @__PURE__ */ new Map([
    [0, BindingKind.Property],
    [5, BindingKind.TwoWayProperty],
    [1, BindingKind.Attribute],
    [2, BindingKind.ClassName],
    [3, BindingKind.StyleProperty],
    [4, BindingKind.Animation]
  ]);
  function isPlainTemplate(tmpl) {
    return splitNsName(tmpl.tagName ?? "")[1] === NG_TEMPLATE_TAG_NAME$1;
  }
  function asMessage(i18nMeta) {
    if (i18nMeta == null) {
      return null;
    }
    if (!(i18nMeta instanceof Message)) {
      throw Error(`Expected i18n meta to be a Message, but got: ${i18nMeta.constructor.name}`);
    }
    return i18nMeta;
  }
  function ingestElementBindings(unit, op, element2) {
    let bindings = new Array();
    let i18nAttributeBindingNames = /* @__PURE__ */ new Set();
    for (const attr of element2.attributes) {
      const securityContext = domSchema.securityContext(element2.name, attr.name, true);
      bindings.push(createBindingOp(op.xref, BindingKind.Attribute, attr.name, convertAstWithInterpolation(unit.job, attr.value, attr.i18n), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));
      if (attr.i18n) {
        i18nAttributeBindingNames.add(attr.name);
      }
    }
    for (const input2 of element2.inputs) {
      if (i18nAttributeBindingNames.has(input2.name)) {
        console.error(`On component ${unit.job.componentName}, the binding ${input2.name} is both an i18n attribute and a property. You may want to remove the property binding. This will become a compilation error in future versions of Angular.`);
      }
      bindings.push(createBindingOp(op.xref, BINDING_KINDS.get(input2.type), input2.name, convertAstWithInterpolation(unit.job, astOf(input2.value), input2.i18n), input2.unit, input2.securityContext, false, false, null, asMessage(input2.i18n) ?? null, input2.sourceSpan));
    }
    unit.create.push(bindings.filter((b) => b?.kind === OpKind.ExtractedAttribute));
    unit.update.push(bindings.filter((b) => b?.kind === OpKind.Binding));
    for (const output2 of element2.outputs) {
      if (output2.type === 1 && output2.phase === null) {
        throw Error("Animation listener should have a phase");
      }
      if (output2.type === 2) {
        unit.create.push(createTwoWayListenerOp(op.xref, op.handle, output2.name, op.tag, makeTwoWayListenerHandlerOps(unit, output2.handler, output2.handlerSpan), output2.sourceSpan));
      } else {
        unit.create.push(createListenerOp(op.xref, op.handle, output2.name, op.tag, makeListenerHandlerOps(unit, output2.handler, output2.handlerSpan), output2.phase, output2.target, false, output2.sourceSpan));
      }
    }
    if (bindings.some((b) => b?.i18nMessage) !== null) {
      unit.create.push(createI18nAttributesOp(unit.job.allocateXrefId(), new SlotHandle(), op.xref));
    }
  }
  function ingestTemplateBindings(unit, op, template2, templateKind) {
    let bindings = new Array();
    for (const attr of template2.templateAttrs) {
      if (attr instanceof TextAttribute) {
        const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME$1, attr.name, true);
        bindings.push(createTemplateBinding(unit, op.xref, 1, attr.name, attr.value, null, securityContext, true, templateKind, asMessage(attr.i18n), attr.sourceSpan));
      } else {
        bindings.push(createTemplateBinding(unit, op.xref, attr.type, attr.name, astOf(attr.value), attr.unit, attr.securityContext, true, templateKind, asMessage(attr.i18n), attr.sourceSpan));
      }
    }
    for (const attr of template2.attributes) {
      const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME$1, attr.name, true);
      bindings.push(createTemplateBinding(unit, op.xref, 1, attr.name, attr.value, null, securityContext, false, templateKind, asMessage(attr.i18n), attr.sourceSpan));
    }
    for (const input2 of template2.inputs) {
      bindings.push(createTemplateBinding(unit, op.xref, input2.type, input2.name, astOf(input2.value), input2.unit, input2.securityContext, false, templateKind, asMessage(input2.i18n), input2.sourceSpan));
    }
    unit.create.push(bindings.filter((b) => b?.kind === OpKind.ExtractedAttribute));
    unit.update.push(bindings.filter((b) => b?.kind === OpKind.Binding));
    for (const output2 of template2.outputs) {
      if (output2.type === 1 && output2.phase === null) {
        throw Error("Animation listener should have a phase");
      }
      if (templateKind === TemplateKind.NgTemplate) {
        if (output2.type === 2) {
          unit.create.push(createTwoWayListenerOp(op.xref, op.handle, output2.name, op.tag, makeTwoWayListenerHandlerOps(unit, output2.handler, output2.handlerSpan), output2.sourceSpan));
        } else {
          unit.create.push(createListenerOp(op.xref, op.handle, output2.name, op.tag, makeListenerHandlerOps(unit, output2.handler, output2.handlerSpan), output2.phase, output2.target, false, output2.sourceSpan));
        }
      }
      if (templateKind === TemplateKind.Structural && output2.type !== 1) {
        const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME$1, output2.name, false);
        unit.create.push(createExtractedAttributeOp(op.xref, BindingKind.Property, null, output2.name, null, null, null, securityContext));
      }
    }
    if (bindings.some((b) => b?.i18nMessage) !== null) {
      unit.create.push(createI18nAttributesOp(unit.job.allocateXrefId(), new SlotHandle(), op.xref));
    }
  }
  function createTemplateBinding(view, xref, type, name, value, unit, securityContext, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan) {
    const isTextBinding = typeof value === "string";
    if (templateKind === TemplateKind.Structural) {
      if (!isStructuralTemplateAttribute) {
        switch (type) {
          case 0:
          case 2:
          case 3:
            return createExtractedAttributeOp(xref, BindingKind.Property, null, name, null, null, i18nMessage, securityContext);
          case 5:
            return createExtractedAttributeOp(xref, BindingKind.TwoWayProperty, null, name, null, null, i18nMessage, securityContext);
        }
      }
      if (!isTextBinding && (type === 1 || type === 4)) {
        return null;
      }
    }
    let bindingType = BINDING_KINDS.get(type);
    if (templateKind === TemplateKind.NgTemplate) {
      if (type === 2 || type === 3 || type === 1 && !isTextBinding) {
        bindingType = BindingKind.Property;
      }
    }
    return createBindingOp(xref, bindingType, name, convertAstWithInterpolation(view.job, value, i18nMessage), unit, securityContext, isTextBinding, isStructuralTemplateAttribute, templateKind, i18nMessage, sourceSpan);
  }
  function makeListenerHandlerOps(unit, handler, handlerSpan) {
    handler = astOf(handler);
    const handlerOps = new Array();
    let handlerExprs = handler instanceof Chain ? handler.expressions : [handler];
    if (handlerExprs.length === 0) {
      throw new Error("Expected listener to have non-empty expression list.");
    }
    const expressions = handlerExprs.map((expr) => convertAst(expr, unit.job, handlerSpan));
    const returnExpr = expressions.pop();
    handlerOps.push(...expressions.map((e2) => createStatementOp(new ExpressionStatement(e2, e2.sourceSpan))));
    handlerOps.push(createStatementOp(new ReturnStatement(returnExpr, returnExpr.sourceSpan)));
    return handlerOps;
  }
  function makeTwoWayListenerHandlerOps(unit, handler, handlerSpan) {
    handler = astOf(handler);
    const handlerOps = new Array();
    if (handler instanceof Chain) {
      if (handler.expressions.length === 1) {
        handler = handler.expressions[0];
      } else {
        throw new Error("Expected two-way listener to have a single expression.");
      }
    }
    const handlerExpr = convertAst(handler, unit.job, handlerSpan);
    const eventReference = new LexicalReadExpr("$event");
    const twoWaySetExpr = new TwoWayBindingSetExpr(handlerExpr, eventReference);
    handlerOps.push(createStatementOp(new ExpressionStatement(twoWaySetExpr)));
    handlerOps.push(createStatementOp(new ReturnStatement(eventReference)));
    return handlerOps;
  }
  function astOf(ast) {
    return ast instanceof ASTWithSource ? ast.ast : ast;
  }
  function ingestReferences(op, element2) {
    assertIsArray(op.localRefs);
    for (const { name, value } of element2.references) {
      op.localRefs.push({
        name,
        target: value
      });
    }
  }
  function assertIsArray(value) {
    if (!Array.isArray(value)) {
      throw new Error(`AssertionError: expected an array`);
    }
  }
  function convertSourceSpan(span, baseSourceSpan) {
    if (baseSourceSpan === null) {
      return null;
    }
    const start = baseSourceSpan.start.moveBy(span.start);
    const end = baseSourceSpan.start.moveBy(span.end);
    const fullStart = baseSourceSpan.fullStart.moveBy(span.start);
    return new ParseSourceSpan(start, end, fullStart);
  }
  function ingestControlFlowInsertionPoint(unit, xref, node) {
    let root = null;
    for (const child of node.children) {
      if (child instanceof Comment$1) {
        continue;
      }
      if (root !== null) {
        return null;
      }
      if (child instanceof Element$1 || child instanceof Template && child.tagName !== null) {
        root = child;
      }
    }
    if (root !== null) {
      for (const attr of root.attributes) {
        const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME$1, attr.name, true);
        unit.update.push(createBindingOp(xref, BindingKind.Attribute, attr.name, literal(attr.value), null, securityContext, true, false, null, asMessage(attr.i18n), attr.sourceSpan));
      }
      for (const attr of root.inputs) {
        if (attr.type !== 4 && attr.type !== 1) {
          const securityContext = domSchema.securityContext(NG_TEMPLATE_TAG_NAME$1, attr.name, true);
          unit.create.push(createExtractedAttributeOp(xref, BindingKind.Property, null, attr.name, null, null, null, securityContext));
        }
      }
      const tagName = root instanceof Element$1 ? root.name : root.tagName;
      return tagName === NG_TEMPLATE_TAG_NAME$1 ? null : tagName;
    }
    return null;
  }
  var USE_TEMPLATE_PIPELINE = false;
  var HtmlParser = class extends Parser {
    constructor() {
      super(getHtmlTagDefinition);
    }
    parse(source, url, options) {
      return super.parse(source, url, options);
    }
  };
  var PRESERVE_WS_ATTR_NAME = "ngPreserveWhitespaces";
  var SKIP_WS_TRIM_TAGS = /* @__PURE__ */ new Set(["pre", "template", "textarea", "script", "style"]);
  var WS_CHARS = " \f\n\r	\v\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF";
  var NO_WS_REGEXP = new RegExp(`[^${WS_CHARS}]`);
  var WS_REPLACE_REGEXP = new RegExp(`[${WS_CHARS}]{2,}`, "g");
  function hasPreserveWhitespacesAttr(attrs) {
    return attrs.some((attr) => attr.name === PRESERVE_WS_ATTR_NAME);
  }
  function replaceNgsp2(value) {
    return value.replace(new RegExp(NGSP_UNICODE, "g"), " ");
  }
  var WhitespaceVisitor = class {
    visitElement(element2, context2) {
      if (SKIP_WS_TRIM_TAGS.has(element2.name) || hasPreserveWhitespacesAttr(element2.attrs)) {
        return new Element2(element2.name, visitAll(this, element2.attrs), element2.children, element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, element2.i18n);
      }
      return new Element2(element2.name, element2.attrs, visitAllWithSiblings(this, element2.children), element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, element2.i18n);
    }
    visitAttribute(attribute2, context2) {
      return attribute2.name !== PRESERVE_WS_ATTR_NAME ? attribute2 : null;
    }
    visitText(text2, context2) {
      const isNotBlank = text2.value.match(NO_WS_REGEXP);
      const hasExpansionSibling = context2 && (context2.prev instanceof Expansion || context2.next instanceof Expansion);
      if (isNotBlank || hasExpansionSibling) {
        const tokens = text2.tokens.map((token) => token.type === 5 ? createWhitespaceProcessedTextToken(token) : token);
        const value = processWhitespace(text2.value);
        return new Text2(value, text2.sourceSpan, tokens, text2.i18n);
      }
      return null;
    }
    visitComment(comment, context2) {
      return comment;
    }
    visitExpansion(expansion, context2) {
      return expansion;
    }
    visitExpansionCase(expansionCase, context2) {
      return expansionCase;
    }
    visitBlock(block, context2) {
      return new Block(block.name, block.parameters, visitAllWithSiblings(this, block.children), block.sourceSpan, block.nameSpan, block.startSourceSpan, block.endSourceSpan);
    }
    visitBlockParameter(parameter, context2) {
      return parameter;
    }
  };
  function createWhitespaceProcessedTextToken({ type, parts, sourceSpan }) {
    return { type, parts: [processWhitespace(parts[0])], sourceSpan };
  }
  function processWhitespace(text2) {
    return replaceNgsp2(text2).replace(WS_REPLACE_REGEXP, " ");
  }
  function visitAllWithSiblings(visitor, nodes) {
    const result = [];
    nodes.forEach((ast, i) => {
      const context2 = { prev: nodes[i - 1], next: nodes[i + 1] };
      const astResult = ast.visit(visitor, context2);
      if (astResult) {
        result.push(astResult);
      }
    });
    return result;
  }
  var PROPERTY_PARTS_SEPARATOR = ".";
  var ATTRIBUTE_PREFIX = "attr";
  var CLASS_PREFIX = "class";
  var STYLE_PREFIX = "style";
  var TEMPLATE_ATTR_PREFIX$1 = "*";
  var ANIMATE_PROP_PREFIX = "animate-";
  var BindingParser = class {
    constructor(_exprParser, _interpolationConfig, _schemaRegistry, errors) {
      this._exprParser = _exprParser;
      this._interpolationConfig = _interpolationConfig;
      this._schemaRegistry = _schemaRegistry;
      this.errors = errors;
    }
    get interpolationConfig() {
      return this._interpolationConfig;
    }
    createBoundHostProperties(properties, sourceSpan) {
      const boundProps = [];
      for (const propName of Object.keys(properties)) {
        const expression = properties[propName];
        if (typeof expression === "string") {
          this.parsePropertyBinding(
            propName,
            expression,
            true,
            false,
            sourceSpan,
            sourceSpan.start.offset,
            void 0,
            [],
            // Use the `sourceSpan` for  `keySpan`. This isn't really accurate, but neither is the
            // sourceSpan, as it represents the sourceSpan of the host itself rather than the
            // source of the host binding (which doesn't exist in the template). Regardless,
            // neither of these values are used in Ivy but are only here to satisfy the function
            // signature. This should likely be refactored in the future so that `sourceSpan`
            // isn't being used inaccurately.
            boundProps,
            sourceSpan
          );
        } else {
          this._reportError(`Value of the host property binding "${propName}" needs to be a string representing an expression but got "${expression}" (${typeof expression})`, sourceSpan);
        }
      }
      return boundProps;
    }
    createDirectiveHostEventAsts(hostListeners, sourceSpan) {
      const targetEvents = [];
      for (const propName of Object.keys(hostListeners)) {
        const expression = hostListeners[propName];
        if (typeof expression === "string") {
          this.parseEvent(
            propName,
            expression,
            /* isAssignmentEvent */
            false,
            sourceSpan,
            sourceSpan,
            [],
            targetEvents,
            sourceSpan
          );
        } else {
          this._reportError(`Value of the host listener "${propName}" needs to be a string representing an expression but got "${expression}" (${typeof expression})`, sourceSpan);
        }
      }
      return targetEvents;
    }
    parseInterpolation(value, sourceSpan, interpolatedTokens) {
      const sourceInfo = sourceSpan.start.toString();
      const absoluteOffset = sourceSpan.fullStart.offset;
      try {
        const ast = this._exprParser.parseInterpolation(value, sourceInfo, absoluteOffset, interpolatedTokens, this._interpolationConfig);
        if (ast)
          this._reportExpressionParserErrors(ast.errors, sourceSpan);
        return ast;
      } catch (e2) {
        this._reportError(`${e2}`, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo, absoluteOffset);
      }
    }
    /**
     * Similar to `parseInterpolation`, but treats the provided string as a single expression
     * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).
     * This is used for parsing the switch expression in ICUs.
     */
    parseInterpolationExpression(expression, sourceSpan) {
      const sourceInfo = sourceSpan.start.toString();
      const absoluteOffset = sourceSpan.start.offset;
      try {
        const ast = this._exprParser.parseInterpolationExpression(expression, sourceInfo, absoluteOffset);
        if (ast)
          this._reportExpressionParserErrors(ast.errors, sourceSpan);
        return ast;
      } catch (e2) {
        this._reportError(`${e2}`, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo, absoluteOffset);
      }
    }
    /**
     * Parses the bindings in a microsyntax expression, and converts them to
     * `ParsedProperty` or `ParsedVariable`.
     *
     * @param tplKey template binding name
     * @param tplValue template binding value
     * @param sourceSpan span of template binding relative to entire the template
     * @param absoluteValueOffset start of the tplValue relative to the entire template
     * @param targetMatchableAttrs potential attributes to match in the template
     * @param targetProps target property bindings in the template
     * @param targetVars target variables in the template
     */
    parseInlineTemplateBinding(tplKey, tplValue, sourceSpan, absoluteValueOffset, targetMatchableAttrs, targetProps, targetVars, isIvyAst) {
      const absoluteKeyOffset = sourceSpan.start.offset + TEMPLATE_ATTR_PREFIX$1.length;
      const bindings = this._parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset);
      for (const binding of bindings) {
        const bindingSpan = moveParseSourceSpan(sourceSpan, binding.sourceSpan);
        const key = binding.key.source;
        const keySpan = moveParseSourceSpan(sourceSpan, binding.key.span);
        if (binding instanceof VariableBinding) {
          const value = binding.value ? binding.value.source : "$implicit";
          const valueSpan = binding.value ? moveParseSourceSpan(sourceSpan, binding.value.span) : void 0;
          targetVars.push(new ParsedVariable(key, value, bindingSpan, keySpan, valueSpan));
        } else if (binding.value) {
          const srcSpan = isIvyAst ? bindingSpan : sourceSpan;
          const valueSpan = moveParseSourceSpan(sourceSpan, binding.value.ast.sourceSpan);
          this._parsePropertyAst(key, binding.value, false, srcSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);
        } else {
          targetMatchableAttrs.push([
            key,
            ""
            /* value */
          ]);
          this.parseLiteralAttr(key, null, keySpan, absoluteValueOffset, void 0, targetMatchableAttrs, targetProps, keySpan);
        }
      }
    }
    /**
     * Parses the bindings in a microsyntax expression, e.g.
     * ```
     *    <tag *tplKey="let value1 = prop; let value2 = localVar">
     * ```
     *
     * @param tplKey template binding name
     * @param tplValue template binding value
     * @param sourceSpan span of template binding relative to entire the template
     * @param absoluteKeyOffset start of the `tplKey`
     * @param absoluteValueOffset start of the `tplValue`
     */
    _parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset) {
      const sourceInfo = sourceSpan.start.toString();
      try {
        const bindingsResult = this._exprParser.parseTemplateBindings(tplKey, tplValue, sourceInfo, absoluteKeyOffset, absoluteValueOffset);
        this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
        bindingsResult.warnings.forEach((warning) => {
          this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
        });
        return bindingsResult.templateBindings;
      } catch (e2) {
        this._reportError(`${e2}`, sourceSpan);
        return [];
      }
    }
    parseLiteralAttr(name, value, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps, keySpan) {
      if (isAnimationLabel(name)) {
        name = name.substring(1);
        if (keySpan !== void 0) {
          keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
        }
        if (value) {
          this._reportError(`Assigning animation triggers via @prop="exp" attributes with an expression is invalid. Use property bindings (e.g. [@prop]="exp") or use an attribute without a value (e.g. @prop) instead.`, sourceSpan, ParseErrorLevel.ERROR);
        }
        this._parseAnimation(name, value, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);
      } else {
        targetProps.push(new ParsedProperty(name, this._exprParser.wrapLiteralPrimitive(value, "", absoluteOffset), ParsedPropertyType.LITERAL_ATTR, sourceSpan, keySpan, valueSpan));
      }
    }
    parsePropertyBinding(name, expression, isHost2, isPartOfAssignmentBinding, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps, keySpan) {
      if (name.length === 0) {
        this._reportError(`Property name is missing in binding`, sourceSpan);
      }
      let isAnimationProp2 = false;
      if (name.startsWith(ANIMATE_PROP_PREFIX)) {
        isAnimationProp2 = true;
        name = name.substring(ANIMATE_PROP_PREFIX.length);
        if (keySpan !== void 0) {
          keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + ANIMATE_PROP_PREFIX.length, keySpan.end.offset));
        }
      } else if (isAnimationLabel(name)) {
        isAnimationProp2 = true;
        name = name.substring(1);
        if (keySpan !== void 0) {
          keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
        }
      }
      if (isAnimationProp2) {
        this._parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);
      } else {
        this._parsePropertyAst(name, this.parseBinding(expression, isHost2, valueSpan || sourceSpan, absoluteOffset), isPartOfAssignmentBinding, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);
      }
    }
    parsePropertyInterpolation(name, value, sourceSpan, valueSpan, targetMatchableAttrs, targetProps, keySpan, interpolatedTokens) {
      const expr = this.parseInterpolation(value, valueSpan || sourceSpan, interpolatedTokens);
      if (expr) {
        this._parsePropertyAst(name, expr, false, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);
        return true;
      }
      return false;
    }
    _parsePropertyAst(name, ast, isPartOfAssignmentBinding, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps) {
      targetMatchableAttrs.push([name, ast.source]);
      targetProps.push(new ParsedProperty(name, ast, isPartOfAssignmentBinding ? ParsedPropertyType.TWO_WAY : ParsedPropertyType.DEFAULT, sourceSpan, keySpan, valueSpan));
    }
    _parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps) {
      if (name.length === 0) {
        this._reportError("Animation trigger is missing", sourceSpan);
      }
      const ast = this.parseBinding(expression || "undefined", false, valueSpan || sourceSpan, absoluteOffset);
      targetMatchableAttrs.push([name, ast.source]);
      targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.ANIMATION, sourceSpan, keySpan, valueSpan));
    }
    parseBinding(value, isHostBinding2, sourceSpan, absoluteOffset) {
      const sourceInfo = (sourceSpan && sourceSpan.start || "(unknown)").toString();
      try {
        const ast = isHostBinding2 ? this._exprParser.parseSimpleBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig);
        if (ast)
          this._reportExpressionParserErrors(ast.errors, sourceSpan);
        return ast;
      } catch (e2) {
        this._reportError(`${e2}`, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo, absoluteOffset);
      }
    }
    createBoundElementProperty(elementSelector, boundProp, skipValidation = false, mapPropertyName = true) {
      if (boundProp.isAnimation) {
        return new BoundElementProperty(boundProp.name, 4, SecurityContext2.NONE, boundProp.expression, null, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);
      }
      let unit = null;
      let bindingType = void 0;
      let boundPropertyName = null;
      const parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
      let securityContexts = void 0;
      if (parts.length > 1) {
        if (parts[0] == ATTRIBUTE_PREFIX) {
          boundPropertyName = parts.slice(1).join(PROPERTY_PARTS_SEPARATOR);
          if (!skipValidation) {
            this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
          }
          securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
          const nsSeparatorIdx = boundPropertyName.indexOf(":");
          if (nsSeparatorIdx > -1) {
            const ns = boundPropertyName.substring(0, nsSeparatorIdx);
            const name = boundPropertyName.substring(nsSeparatorIdx + 1);
            boundPropertyName = mergeNsAndName(ns, name);
          }
          bindingType = 1;
        } else if (parts[0] == CLASS_PREFIX) {
          boundPropertyName = parts[1];
          bindingType = 2;
          securityContexts = [SecurityContext2.NONE];
        } else if (parts[0] == STYLE_PREFIX) {
          unit = parts.length > 2 ? parts[2] : null;
          boundPropertyName = parts[1];
          bindingType = 3;
          securityContexts = [SecurityContext2.STYLE];
        }
      }
      if (boundPropertyName === null) {
        const mappedPropName = this._schemaRegistry.getMappedPropName(boundProp.name);
        boundPropertyName = mapPropertyName ? mappedPropName : boundProp.name;
        securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, mappedPropName, false);
        bindingType = boundProp.type === ParsedPropertyType.TWO_WAY ? 5 : 0;
        if (!skipValidation) {
          this._validatePropertyOrAttributeName(mappedPropName, boundProp.sourceSpan, false);
        }
      }
      return new BoundElementProperty(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);
    }
    // TODO: keySpan should be required but was made optional to avoid changing VE parser.
    parseEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {
      if (name.length === 0) {
        this._reportError(`Event name is missing in binding`, sourceSpan);
      }
      if (isAnimationLabel(name)) {
        name = name.slice(1);
        if (keySpan !== void 0) {
          keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
        }
        this._parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan);
      } else {
        this._parseRegularEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan);
      }
    }
    calcPossibleSecurityContexts(selector, propName, isAttribute) {
      const prop = this._schemaRegistry.getMappedPropName(propName);
      return calcPossibleSecurityContexts(this._schemaRegistry, selector, prop, isAttribute);
    }
    _parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan) {
      const matches2 = splitAtPeriod(name, [name, ""]);
      const eventName = matches2[0];
      const phase = matches2[1].toLowerCase();
      const ast = this._parseAction(expression, handlerSpan);
      targetEvents.push(new ParsedEvent(eventName, phase, 1, ast, sourceSpan, handlerSpan, keySpan));
      if (eventName.length === 0) {
        this._reportError(`Animation event name is missing in binding`, sourceSpan);
      }
      if (phase) {
        if (phase !== "start" && phase !== "done") {
          this._reportError(`The provided animation output phase value "${phase}" for "@${eventName}" is not supported (use start or done)`, sourceSpan);
        }
      } else {
        this._reportError(`The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`, sourceSpan);
      }
    }
    _parseRegularEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {
      const [target, eventName] = splitAtColon(name, [null, name]);
      const prevErrorCount = this.errors.length;
      const ast = this._parseAction(expression, handlerSpan);
      const isValid = this.errors.length === prevErrorCount;
      targetMatchableAttrs.push([name, ast.source]);
      if (isAssignmentEvent && isValid && !this._isAllowedAssignmentEvent(ast)) {
        this._reportError("Unsupported expression in a two-way binding", sourceSpan);
      }
      targetEvents.push(new ParsedEvent(eventName, target, isAssignmentEvent ? 2 : 0, ast, sourceSpan, handlerSpan, keySpan));
    }
    _parseAction(value, sourceSpan) {
      const sourceInfo = (sourceSpan && sourceSpan.start || "(unknown").toString();
      const absoluteOffset = sourceSpan && sourceSpan.start ? sourceSpan.start.offset : 0;
      try {
        const ast = this._exprParser.parseAction(value, sourceInfo, absoluteOffset, this._interpolationConfig);
        if (ast) {
          this._reportExpressionParserErrors(ast.errors, sourceSpan);
        }
        if (!ast || ast.ast instanceof EmptyExpr$1) {
          this._reportError(`Empty expressions are not allowed`, sourceSpan);
          return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo, absoluteOffset);
        }
        return ast;
      } catch (e2) {
        this._reportError(`${e2}`, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo, absoluteOffset);
      }
    }
    _reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {
      this.errors.push(new ParseError(sourceSpan, message, level));
    }
    _reportExpressionParserErrors(errors, sourceSpan) {
      for (const error2 of errors) {
        this._reportError(error2.message, sourceSpan);
      }
    }
    /**
     * @param propName the name of the property / attribute
     * @param sourceSpan
     * @param isAttr true when binding to an attribute
     */
    _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {
      const report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);
      if (report.error) {
        this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);
      }
    }
    /**
     * Returns whether a parsed AST is allowed to be used within the event side of a two-way binding.
     * @param ast Parsed AST to be checked.
     */
    _isAllowedAssignmentEvent(ast) {
      if (ast instanceof ASTWithSource) {
        return this._isAllowedAssignmentEvent(ast.ast);
      }
      if (ast instanceof NonNullAssert) {
        return this._isAllowedAssignmentEvent(ast.expression);
      }
      if (ast instanceof PropertyRead || ast instanceof KeyedRead) {
        return true;
      }
      if (ast instanceof Binary) {
        return (ast.operation === "&&" || ast.operation === "||" || ast.operation === "??") && (ast.right instanceof PropertyRead || ast.right instanceof KeyedRead);
      }
      return ast instanceof Conditional || ast instanceof PrefixNot;
    }
  };
  function isAnimationLabel(name) {
    return name[0] == "@";
  }
  function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
    const ctxs = [];
    CssSelector.parse(selector).forEach((selector2) => {
      const elementNames = selector2.element ? [selector2.element] : registry.allKnownElementNames();
      const notElementNames = new Set(selector2.notSelectors.filter((selector3) => selector3.isElementSelector()).map((selector3) => selector3.element));
      const possibleElementNames = elementNames.filter((elementName) => !notElementNames.has(elementName));
      ctxs.push(...possibleElementNames.map((elementName) => registry.securityContext(elementName, propName, isAttribute)));
    });
    return ctxs.length === 0 ? [SecurityContext2.NONE] : Array.from(new Set(ctxs)).sort();
  }
  function moveParseSourceSpan(sourceSpan, absoluteSpan) {
    const startDiff = absoluteSpan.start - sourceSpan.start.offset;
    const endDiff = absoluteSpan.end - sourceSpan.end.offset;
    return new ParseSourceSpan(sourceSpan.start.moveBy(startDiff), sourceSpan.end.moveBy(endDiff), sourceSpan.fullStart.moveBy(startDiff), sourceSpan.details);
  }
  function isStyleUrlResolvable(url) {
    if (url == null || url.length === 0 || url[0] == "/")
      return false;
    const schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
    return schemeMatch === null || schemeMatch[1] == "package" || schemeMatch[1] == "asset";
  }
  var URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;
  var NG_CONTENT_SELECT_ATTR$1 = "select";
  var LINK_ELEMENT = "link";
  var LINK_STYLE_REL_ATTR = "rel";
  var LINK_STYLE_HREF_ATTR = "href";
  var LINK_STYLE_REL_VALUE = "stylesheet";
  var STYLE_ELEMENT = "style";
  var SCRIPT_ELEMENT = "script";
  var NG_NON_BINDABLE_ATTR = "ngNonBindable";
  var NG_PROJECT_AS = "ngProjectAs";
  function preparseElement(ast) {
    let selectAttr = null;
    let hrefAttr = null;
    let relAttr = null;
    let nonBindable = false;
    let projectAs = "";
    ast.attrs.forEach((attr) => {
      const lcAttrName = attr.name.toLowerCase();
      if (lcAttrName == NG_CONTENT_SELECT_ATTR$1) {
        selectAttr = attr.value;
      } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
        hrefAttr = attr.value;
      } else if (lcAttrName == LINK_STYLE_REL_ATTR) {
        relAttr = attr.value;
      } else if (attr.name == NG_NON_BINDABLE_ATTR) {
        nonBindable = true;
      } else if (attr.name == NG_PROJECT_AS) {
        if (attr.value.length > 0) {
          projectAs = attr.value;
        }
      }
    });
    selectAttr = normalizeNgContentSelect(selectAttr);
    const nodeName = ast.name.toLowerCase();
    let type = PreparsedElementType.OTHER;
    if (isNgContent(nodeName)) {
      type = PreparsedElementType.NG_CONTENT;
    } else if (nodeName == STYLE_ELEMENT) {
      type = PreparsedElementType.STYLE;
    } else if (nodeName == SCRIPT_ELEMENT) {
      type = PreparsedElementType.SCRIPT;
    } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
      type = PreparsedElementType.STYLESHEET;
    }
    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
  }
  var PreparsedElementType;
  (function(PreparsedElementType2) {
    PreparsedElementType2[PreparsedElementType2["NG_CONTENT"] = 0] = "NG_CONTENT";
    PreparsedElementType2[PreparsedElementType2["STYLE"] = 1] = "STYLE";
    PreparsedElementType2[PreparsedElementType2["STYLESHEET"] = 2] = "STYLESHEET";
    PreparsedElementType2[PreparsedElementType2["SCRIPT"] = 3] = "SCRIPT";
    PreparsedElementType2[PreparsedElementType2["OTHER"] = 4] = "OTHER";
  })(PreparsedElementType || (PreparsedElementType = {}));
  var PreparsedElement = class {
    constructor(type, selectAttr, hrefAttr, nonBindable, projectAs) {
      this.type = type;
      this.selectAttr = selectAttr;
      this.hrefAttr = hrefAttr;
      this.nonBindable = nonBindable;
      this.projectAs = projectAs;
    }
  };
  function normalizeNgContentSelect(selectAttr) {
    if (selectAttr === null || selectAttr.length === 0) {
      return "*";
    }
    return selectAttr;
  }
  var FOR_LOOP_EXPRESSION_PATTERN = /^\s*([0-9A-Za-z_$]*)\s+of\s+([\S\s]*)/;
  var FOR_LOOP_TRACK_PATTERN = /^track\s+([\S\s]*)/;
  var CONDITIONAL_ALIAS_PATTERN = /^(as\s)+(.*)/;
  var ELSE_IF_PATTERN = /^else[^\S\r\n]+if/;
  var FOR_LOOP_LET_PATTERN = /^let\s+([\S\s]*)/;
  var CHARACTERS_IN_SURROUNDING_WHITESPACE_PATTERN = /(\s*)(\S+)(\s*)/;
  var ALLOWED_FOR_LOOP_LET_VARIABLES = /* @__PURE__ */ new Set(["$index", "$first", "$last", "$even", "$odd", "$count"]);
  function isConnectedForLoopBlock(name) {
    return name === "empty";
  }
  function isConnectedIfLoopBlock(name) {
    return name === "else" || ELSE_IF_PATTERN.test(name);
  }
  function createIfBlock(ast, connectedBlocks, visitor, bindingParser) {
    const errors = validateIfConnectedBlocks(connectedBlocks);
    const branches = [];
    const mainBlockParams = parseConditionalBlockParameters(ast, errors, bindingParser);
    if (mainBlockParams !== null) {
      branches.push(new IfBlockBranch(mainBlockParams.expression, visitAll(visitor, ast.children, ast.children), mainBlockParams.expressionAlias, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.nameSpan, ast.i18n));
    }
    for (const block of connectedBlocks) {
      if (ELSE_IF_PATTERN.test(block.name)) {
        const params = parseConditionalBlockParameters(block, errors, bindingParser);
        if (params !== null) {
          const children = visitAll(visitor, block.children, block.children);
          branches.push(new IfBlockBranch(params.expression, children, params.expressionAlias, block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n));
        }
      } else if (block.name === "else") {
        const children = visitAll(visitor, block.children, block.children);
        branches.push(new IfBlockBranch(null, children, null, block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n));
      }
    }
    const ifBlockStartSourceSpan = branches.length > 0 ? branches[0].startSourceSpan : ast.startSourceSpan;
    const ifBlockEndSourceSpan = branches.length > 0 ? branches[branches.length - 1].endSourceSpan : ast.endSourceSpan;
    let wholeSourceSpan = ast.sourceSpan;
    const lastBranch = branches[branches.length - 1];
    if (lastBranch !== void 0) {
      wholeSourceSpan = new ParseSourceSpan(ifBlockStartSourceSpan.start, lastBranch.sourceSpan.end);
    }
    return {
      node: new IfBlock(branches, wholeSourceSpan, ast.startSourceSpan, ifBlockEndSourceSpan, ast.nameSpan),
      errors
    };
  }
  function createForLoop(ast, connectedBlocks, visitor, bindingParser) {
    const errors = [];
    const params = parseForLoopParameters(ast, errors, bindingParser);
    let node = null;
    let empty = null;
    for (const block of connectedBlocks) {
      if (block.name === "empty") {
        if (empty !== null) {
          errors.push(new ParseError(block.sourceSpan, "@for loop can only have one @empty block"));
        } else if (block.parameters.length > 0) {
          errors.push(new ParseError(block.sourceSpan, "@empty block cannot have parameters"));
        } else {
          empty = new ForLoopBlockEmpty(visitAll(visitor, block.children, block.children), block.sourceSpan, block.startSourceSpan, block.endSourceSpan, block.nameSpan, block.i18n);
        }
      } else {
        errors.push(new ParseError(block.sourceSpan, `Unrecognized @for loop block "${block.name}"`));
      }
    }
    if (params !== null) {
      if (params.trackBy === null) {
        errors.push(new ParseError(ast.sourceSpan, '@for loop must have a "track" expression'));
      } else {
        const endSpan = empty?.endSourceSpan ?? ast.endSourceSpan;
        const sourceSpan = new ParseSourceSpan(ast.sourceSpan.start, endSpan?.end ?? ast.sourceSpan.end);
        node = new ForLoopBlock(params.itemName, params.expression, params.trackBy.expression, params.trackBy.keywordSpan, params.context, visitAll(visitor, ast.children, ast.children), empty, sourceSpan, ast.sourceSpan, ast.startSourceSpan, endSpan, ast.nameSpan, ast.i18n);
      }
    }
    return { node, errors };
  }
  function createSwitchBlock(ast, visitor, bindingParser) {
    const errors = validateSwitchBlock(ast);
    const primaryExpression = ast.parameters.length > 0 ? parseBlockParameterToBinding(ast.parameters[0], bindingParser) : bindingParser.parseBinding("", false, ast.sourceSpan, 0);
    const cases = [];
    const unknownBlocks = [];
    let defaultCase = null;
    for (const node of ast.children) {
      if (!(node instanceof Block)) {
        continue;
      }
      if ((node.name !== "case" || node.parameters.length === 0) && node.name !== "default") {
        unknownBlocks.push(new UnknownBlock(node.name, node.sourceSpan, node.nameSpan));
        continue;
      }
      const expression = node.name === "case" ? parseBlockParameterToBinding(node.parameters[0], bindingParser) : null;
      const ast2 = new SwitchBlockCase(expression, visitAll(visitor, node.children, node.children), node.sourceSpan, node.startSourceSpan, node.endSourceSpan, node.nameSpan, node.i18n);
      if (expression === null) {
        defaultCase = ast2;
      } else {
        cases.push(ast2);
      }
    }
    if (defaultCase !== null) {
      cases.push(defaultCase);
    }
    return {
      node: new SwitchBlock(primaryExpression, cases, unknownBlocks, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.nameSpan),
      errors
    };
  }
  function parseForLoopParameters(block, errors, bindingParser) {
    if (block.parameters.length === 0) {
      errors.push(new ParseError(block.sourceSpan, "@for loop does not have an expression"));
      return null;
    }
    const [expressionParam, ...secondaryParams] = block.parameters;
    const match2 = stripOptionalParentheses(expressionParam, errors)?.match(FOR_LOOP_EXPRESSION_PATTERN);
    if (!match2 || match2[2].trim().length === 0) {
      errors.push(new ParseError(expressionParam.sourceSpan, 'Cannot parse expression. @for loop expression must match the pattern "<identifier> of <expression>"'));
      return null;
    }
    const [, itemName, rawExpression] = match2;
    const variableName = expressionParam.expression.split(" ")[0];
    const variableSpan = new ParseSourceSpan(expressionParam.sourceSpan.start, expressionParam.sourceSpan.start.moveBy(variableName.length));
    const result = {
      itemName: new Variable(itemName, "$implicit", variableSpan, variableSpan),
      trackBy: null,
      expression: parseBlockParameterToBinding(expressionParam, bindingParser, rawExpression),
      context: {}
    };
    for (const param of secondaryParams) {
      const letMatch = param.expression.match(FOR_LOOP_LET_PATTERN);
      if (letMatch !== null) {
        const variablesSpan = new ParseSourceSpan(param.sourceSpan.start.moveBy(letMatch[0].length - letMatch[1].length), param.sourceSpan.end);
        parseLetParameter(param.sourceSpan, letMatch[1], variablesSpan, result.context, errors);
        continue;
      }
      const trackMatch = param.expression.match(FOR_LOOP_TRACK_PATTERN);
      if (trackMatch !== null) {
        if (result.trackBy !== null) {
          errors.push(new ParseError(param.sourceSpan, '@for loop can only have one "track" expression'));
        } else {
          const expression = parseBlockParameterToBinding(param, bindingParser, trackMatch[1]);
          if (expression.ast instanceof EmptyExpr$1) {
            errors.push(new ParseError(param.sourceSpan, '@for loop must have a "track" expression'));
          }
          const keywordSpan = new ParseSourceSpan(param.sourceSpan.start, param.sourceSpan.start.moveBy("track".length));
          result.trackBy = { expression, keywordSpan };
        }
        continue;
      }
      errors.push(new ParseError(param.sourceSpan, `Unrecognized @for loop paramater "${param.expression}"`));
    }
    for (const variableName2 of ALLOWED_FOR_LOOP_LET_VARIABLES) {
      if (!result.context.hasOwnProperty(variableName2)) {
        const emptySpanAfterForBlockStart = new ParseSourceSpan(block.startSourceSpan.end, block.startSourceSpan.end);
        result.context[variableName2] = new Variable(variableName2, variableName2, emptySpanAfterForBlockStart, emptySpanAfterForBlockStart);
      }
    }
    return result;
  }
  function parseLetParameter(sourceSpan, expression, span, context2, errors) {
    const parts = expression.split(",");
    let startSpan = span.start;
    for (const part of parts) {
      const expressionParts = part.split("=");
      const name = expressionParts.length === 2 ? expressionParts[0].trim() : "";
      const variableName = expressionParts.length === 2 ? expressionParts[1].trim() : "";
      if (name.length === 0 || variableName.length === 0) {
        errors.push(new ParseError(sourceSpan, `Invalid @for loop "let" parameter. Parameter should match the pattern "<name> = <variable name>"`));
      } else if (!ALLOWED_FOR_LOOP_LET_VARIABLES.has(variableName)) {
        errors.push(new ParseError(sourceSpan, `Unknown "let" parameter variable "${variableName}". The allowed variables are: ${Array.from(ALLOWED_FOR_LOOP_LET_VARIABLES).join(", ")}`));
      } else if (context2.hasOwnProperty(variableName)) {
        errors.push(new ParseError(sourceSpan, `Duplicate "let" parameter variable "${variableName}"`));
      } else {
        const [, keyLeadingWhitespace, keyName] = expressionParts[0].match(CHARACTERS_IN_SURROUNDING_WHITESPACE_PATTERN) ?? [];
        const keySpan = keyLeadingWhitespace !== void 0 && expressionParts.length === 2 ? new ParseSourceSpan(
          /* strip leading spaces */
          startSpan.moveBy(keyLeadingWhitespace.length),
          /* advance to end of the variable name */
          startSpan.moveBy(keyLeadingWhitespace.length + keyName.length)
        ) : span;
        let valueSpan = void 0;
        if (expressionParts.length === 2) {
          const [, valueLeadingWhitespace, implicit] = expressionParts[1].match(CHARACTERS_IN_SURROUNDING_WHITESPACE_PATTERN) ?? [];
          valueSpan = valueLeadingWhitespace !== void 0 ? new ParseSourceSpan(startSpan.moveBy(expressionParts[0].length + 1 + valueLeadingWhitespace.length), startSpan.moveBy(expressionParts[0].length + 1 + valueLeadingWhitespace.length + implicit.length)) : void 0;
        }
        const sourceSpan2 = new ParseSourceSpan(keySpan.start, valueSpan?.end ?? keySpan.end);
        context2[variableName] = new Variable(name, variableName, sourceSpan2, keySpan, valueSpan);
      }
      startSpan = startSpan.moveBy(
        part.length + 1
        /* add 1 to move past the comma */
      );
    }
  }
  function validateIfConnectedBlocks(connectedBlocks) {
    const errors = [];
    let hasElse = false;
    for (let i = 0; i < connectedBlocks.length; i++) {
      const block = connectedBlocks[i];
      if (block.name === "else") {
        if (hasElse) {
          errors.push(new ParseError(block.sourceSpan, "Conditional can only have one @else block"));
        } else if (connectedBlocks.length > 1 && i < connectedBlocks.length - 1) {
          errors.push(new ParseError(block.sourceSpan, "@else block must be last inside the conditional"));
        } else if (block.parameters.length > 0) {
          errors.push(new ParseError(block.sourceSpan, "@else block cannot have parameters"));
        }
        hasElse = true;
      } else if (!ELSE_IF_PATTERN.test(block.name)) {
        errors.push(new ParseError(block.sourceSpan, `Unrecognized conditional block @${block.name}`));
      }
    }
    return errors;
  }
  function validateSwitchBlock(ast) {
    const errors = [];
    let hasDefault = false;
    if (ast.parameters.length !== 1) {
      errors.push(new ParseError(ast.sourceSpan, "@switch block must have exactly one parameter"));
      return errors;
    }
    for (const node of ast.children) {
      if (node instanceof Comment || node instanceof Text2 && node.value.trim().length === 0) {
        continue;
      }
      if (!(node instanceof Block) || node.name !== "case" && node.name !== "default") {
        errors.push(new ParseError(node.sourceSpan, "@switch block can only contain @case and @default blocks"));
        continue;
      }
      if (node.name === "default") {
        if (hasDefault) {
          errors.push(new ParseError(node.sourceSpan, "@switch block can only have one @default block"));
        } else if (node.parameters.length > 0) {
          errors.push(new ParseError(node.sourceSpan, "@default block cannot have parameters"));
        }
        hasDefault = true;
      } else if (node.name === "case" && node.parameters.length !== 1) {
        errors.push(new ParseError(node.sourceSpan, "@case block must have exactly one parameter"));
      }
    }
    return errors;
  }
  function parseBlockParameterToBinding(ast, bindingParser, part) {
    let start;
    let end;
    if (typeof part === "string") {
      start = Math.max(0, ast.expression.lastIndexOf(part));
      end = start + part.length;
    } else {
      start = 0;
      end = ast.expression.length;
    }
    return bindingParser.parseBinding(ast.expression.slice(start, end), false, ast.sourceSpan, ast.sourceSpan.start.offset + start);
  }
  function parseConditionalBlockParameters(block, errors, bindingParser) {
    if (block.parameters.length === 0) {
      errors.push(new ParseError(block.sourceSpan, "Conditional block does not have an expression"));
      return null;
    }
    const expression = parseBlockParameterToBinding(block.parameters[0], bindingParser);
    let expressionAlias = null;
    for (let i = 1; i < block.parameters.length; i++) {
      const param = block.parameters[i];
      const aliasMatch = param.expression.match(CONDITIONAL_ALIAS_PATTERN);
      if (aliasMatch === null) {
        errors.push(new ParseError(param.sourceSpan, `Unrecognized conditional paramater "${param.expression}"`));
      } else if (block.name !== "if") {
        errors.push(new ParseError(param.sourceSpan, '"as" expression is only allowed on the primary @if block'));
      } else if (expressionAlias !== null) {
        errors.push(new ParseError(param.sourceSpan, 'Conditional can only have one "as" expression'));
      } else {
        const name = aliasMatch[2].trim();
        const variableStart = param.sourceSpan.start.moveBy(aliasMatch[1].length);
        const variableSpan = new ParseSourceSpan(variableStart, variableStart.moveBy(name.length));
        expressionAlias = new Variable(name, name, variableSpan, variableSpan);
      }
    }
    return { expression, expressionAlias };
  }
  function stripOptionalParentheses(param, errors) {
    const expression = param.expression;
    const spaceRegex = /^\s$/;
    let openParens = 0;
    let start = 0;
    let end = expression.length - 1;
    for (let i = 0; i < expression.length; i++) {
      const char = expression[i];
      if (char === "(") {
        start = i + 1;
        openParens++;
      } else if (spaceRegex.test(char)) {
        continue;
      } else {
        break;
      }
    }
    if (openParens === 0) {
      return expression;
    }
    for (let i = expression.length - 1; i > -1; i--) {
      const char = expression[i];
      if (char === ")") {
        end = i;
        openParens--;
        if (openParens === 0) {
          break;
        }
      } else if (spaceRegex.test(char)) {
        continue;
      } else {
        break;
      }
    }
    if (openParens !== 0) {
      errors.push(new ParseError(param.sourceSpan, "Unclosed parentheses in expression"));
      return null;
    }
    return expression.slice(start, end);
  }
  var TIME_PATTERN = /^\d+\.?\d*(ms|s)?$/;
  var SEPARATOR_PATTERN = /^\s$/;
  var COMMA_DELIMITED_SYNTAX = /* @__PURE__ */ new Map([
    [$LBRACE, $RBRACE],
    // Object literals
    [$LBRACKET, $RBRACKET],
    // Array literals
    [$LPAREN, $RPAREN]
    // Function calls
  ]);
  var OnTriggerType;
  (function(OnTriggerType2) {
    OnTriggerType2["IDLE"] = "idle";
    OnTriggerType2["TIMER"] = "timer";
    OnTriggerType2["INTERACTION"] = "interaction";
    OnTriggerType2["IMMEDIATE"] = "immediate";
    OnTriggerType2["HOVER"] = "hover";
    OnTriggerType2["VIEWPORT"] = "viewport";
  })(OnTriggerType || (OnTriggerType = {}));
  function parseWhenTrigger({ expression, sourceSpan }, bindingParser, triggers, errors) {
    const whenIndex = expression.indexOf("when");
    const whenSourceSpan = new ParseSourceSpan(sourceSpan.start.moveBy(whenIndex), sourceSpan.start.moveBy(whenIndex + "when".length));
    const prefetchSpan = getPrefetchSpan(expression, sourceSpan);
    if (whenIndex === -1) {
      errors.push(new ParseError(sourceSpan, `Could not find "when" keyword in expression`));
    } else {
      const start = getTriggerParametersStart(expression, whenIndex + 1);
      const parsed = bindingParser.parseBinding(expression.slice(start), false, sourceSpan, sourceSpan.start.offset + start);
      trackTrigger("when", triggers, errors, new BoundDeferredTrigger(parsed, sourceSpan, prefetchSpan, whenSourceSpan));
    }
  }
  function parseOnTrigger({ expression, sourceSpan }, triggers, errors, placeholder) {
    const onIndex = expression.indexOf("on");
    const onSourceSpan = new ParseSourceSpan(sourceSpan.start.moveBy(onIndex), sourceSpan.start.moveBy(onIndex + "on".length));
    const prefetchSpan = getPrefetchSpan(expression, sourceSpan);
    if (onIndex === -1) {
      errors.push(new ParseError(sourceSpan, `Could not find "on" keyword in expression`));
    } else {
      const start = getTriggerParametersStart(expression, onIndex + 1);
      const parser = new OnTriggerParser(expression, start, sourceSpan, triggers, errors, placeholder, prefetchSpan, onSourceSpan);
      parser.parse();
    }
  }
  function getPrefetchSpan(expression, sourceSpan) {
    if (!expression.startsWith("prefetch")) {
      return null;
    }
    return new ParseSourceSpan(sourceSpan.start, sourceSpan.start.moveBy("prefetch".length));
  }
  var OnTriggerParser = class {
    constructor(expression, start, span, triggers, errors, placeholder, prefetchSpan, onSourceSpan) {
      this.expression = expression;
      this.start = start;
      this.span = span;
      this.triggers = triggers;
      this.errors = errors;
      this.placeholder = placeholder;
      this.prefetchSpan = prefetchSpan;
      this.onSourceSpan = onSourceSpan;
      this.index = 0;
      this.tokens = new Lexer().tokenize(expression.slice(start));
    }
    parse() {
      while (this.tokens.length > 0 && this.index < this.tokens.length) {
        const token = this.token();
        if (!token.isIdentifier()) {
          this.unexpectedToken(token);
          break;
        }
        if (this.isFollowedByOrLast($COMMA)) {
          this.consumeTrigger(token, []);
          this.advance();
        } else if (this.isFollowedByOrLast($LPAREN)) {
          this.advance();
          const prevErrors = this.errors.length;
          const parameters = this.consumeParameters();
          if (this.errors.length !== prevErrors) {
            break;
          }
          this.consumeTrigger(token, parameters);
          this.advance();
        } else if (this.index < this.tokens.length - 1) {
          this.unexpectedToken(this.tokens[this.index + 1]);
        }
        this.advance();
      }
    }
    advance() {
      this.index++;
    }
    isFollowedByOrLast(char) {
      if (this.index === this.tokens.length - 1) {
        return true;
      }
      return this.tokens[this.index + 1].isCharacter(char);
    }
    token() {
      return this.tokens[Math.min(this.index, this.tokens.length - 1)];
    }
    consumeTrigger(identifier, parameters) {
      const triggerNameStartSpan = this.span.start.moveBy(this.start + identifier.index - this.tokens[0].index);
      const nameSpan = new ParseSourceSpan(triggerNameStartSpan, triggerNameStartSpan.moveBy(identifier.strValue.length));
      const endSpan = triggerNameStartSpan.moveBy(this.token().end - identifier.index);
      const isFirstTrigger = identifier.index === 0;
      const onSourceSpan = isFirstTrigger ? this.onSourceSpan : null;
      const prefetchSourceSpan = isFirstTrigger ? this.prefetchSpan : null;
      const sourceSpan = new ParseSourceSpan(isFirstTrigger ? this.span.start : triggerNameStartSpan, endSpan);
      try {
        switch (identifier.toString()) {
          case OnTriggerType.IDLE:
            this.trackTrigger("idle", createIdleTrigger(parameters, nameSpan, sourceSpan, prefetchSourceSpan, onSourceSpan));
            break;
          case OnTriggerType.TIMER:
            this.trackTrigger("timer", createTimerTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan));
            break;
          case OnTriggerType.INTERACTION:
            this.trackTrigger("interaction", createInteractionTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.placeholder));
            break;
          case OnTriggerType.IMMEDIATE:
            this.trackTrigger("immediate", createImmediateTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan));
            break;
          case OnTriggerType.HOVER:
            this.trackTrigger("hover", createHoverTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.placeholder));
            break;
          case OnTriggerType.VIEWPORT:
            this.trackTrigger("viewport", createViewportTrigger(parameters, nameSpan, sourceSpan, this.prefetchSpan, this.onSourceSpan, this.placeholder));
            break;
          default:
            throw new Error(`Unrecognized trigger type "${identifier}"`);
        }
      } catch (e2) {
        this.error(identifier, e2.message);
      }
    }
    consumeParameters() {
      const parameters = [];
      if (!this.token().isCharacter($LPAREN)) {
        this.unexpectedToken(this.token());
        return parameters;
      }
      this.advance();
      const commaDelimStack = [];
      let current = "";
      while (this.index < this.tokens.length) {
        const token = this.token();
        if (token.isCharacter($RPAREN) && commaDelimStack.length === 0) {
          if (current.length) {
            parameters.push(current);
          }
          break;
        }
        if (token.type === TokenType.Character && COMMA_DELIMITED_SYNTAX.has(token.numValue)) {
          commaDelimStack.push(COMMA_DELIMITED_SYNTAX.get(token.numValue));
        }
        if (commaDelimStack.length > 0 && token.isCharacter(commaDelimStack[commaDelimStack.length - 1])) {
          commaDelimStack.pop();
        }
        if (commaDelimStack.length === 0 && token.isCharacter($COMMA) && current.length > 0) {
          parameters.push(current);
          current = "";
          this.advance();
          continue;
        }
        current += this.tokenText();
        this.advance();
      }
      if (!this.token().isCharacter($RPAREN) || commaDelimStack.length > 0) {
        this.error(this.token(), "Unexpected end of expression");
      }
      if (this.index < this.tokens.length - 1 && !this.tokens[this.index + 1].isCharacter($COMMA)) {
        this.unexpectedToken(this.tokens[this.index + 1]);
      }
      return parameters;
    }
    tokenText() {
      return this.expression.slice(this.start + this.token().index, this.start + this.token().end);
    }
    trackTrigger(name, trigger) {
      trackTrigger(name, this.triggers, this.errors, trigger);
    }
    error(token, message) {
      const newStart = this.span.start.moveBy(this.start + token.index);
      const newEnd = newStart.moveBy(token.end - token.index);
      this.errors.push(new ParseError(new ParseSourceSpan(newStart, newEnd), message));
    }
    unexpectedToken(token) {
      this.error(token, `Unexpected token "${token}"`);
    }
  };
  function trackTrigger(name, allTriggers, errors, trigger) {
    if (allTriggers[name]) {
      errors.push(new ParseError(trigger.sourceSpan, `Duplicate "${name}" trigger is not allowed`));
    } else {
      allTriggers[name] = trigger;
    }
  }
  function createIdleTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {
    if (parameters.length > 0) {
      throw new Error(`"${OnTriggerType.IDLE}" trigger cannot have parameters`);
    }
    return new IdleDeferredTrigger(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
  }
  function createTimerTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {
    if (parameters.length !== 1) {
      throw new Error(`"${OnTriggerType.TIMER}" trigger must have exactly one parameter`);
    }
    const delay = parseDeferredTime(parameters[0]);
    if (delay === null) {
      throw new Error(`Could not parse time value of trigger "${OnTriggerType.TIMER}"`);
    }
    return new TimerDeferredTrigger(delay, nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
  }
  function createImmediateTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan) {
    if (parameters.length > 0) {
      throw new Error(`"${OnTriggerType.IMMEDIATE}" trigger cannot have parameters`);
    }
    return new ImmediateDeferredTrigger(nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
  }
  function createHoverTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, placeholder) {
    validateReferenceBasedTrigger(OnTriggerType.HOVER, parameters, placeholder);
    return new HoverDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
  }
  function createInteractionTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, placeholder) {
    validateReferenceBasedTrigger(OnTriggerType.INTERACTION, parameters, placeholder);
    return new InteractionDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
  }
  function createViewportTrigger(parameters, nameSpan, sourceSpan, prefetchSpan, onSourceSpan, placeholder) {
    validateReferenceBasedTrigger(OnTriggerType.VIEWPORT, parameters, placeholder);
    return new ViewportDeferredTrigger(parameters[0] ?? null, nameSpan, sourceSpan, prefetchSpan, onSourceSpan);
  }
  function validateReferenceBasedTrigger(type, parameters, placeholder) {
    if (parameters.length > 1) {
      throw new Error(`"${type}" trigger can only have zero or one parameters`);
    }
    if (parameters.length === 0) {
      if (placeholder === null) {
        throw new Error(`"${type}" trigger with no parameters can only be placed on an @defer that has a @placeholder block`);
      }
      if (placeholder.children.length !== 1 || !(placeholder.children[0] instanceof Element$1)) {
        throw new Error(`"${type}" trigger with no parameters can only be placed on an @defer that has a @placeholder block with exactly one root element node`);
      }
    }
  }
  function getTriggerParametersStart(value, startPosition = 0) {
    let hasFoundSeparator = false;
    for (let i = startPosition; i < value.length; i++) {
      if (SEPARATOR_PATTERN.test(value[i])) {
        hasFoundSeparator = true;
      } else if (hasFoundSeparator) {
        return i;
      }
    }
    return -1;
  }
  function parseDeferredTime(value) {
    const match2 = value.match(TIME_PATTERN);
    if (!match2) {
      return null;
    }
    const [time, units] = match2;
    return parseFloat(time) * (units === "s" ? 1e3 : 1);
  }
  var PREFETCH_WHEN_PATTERN = /^prefetch\s+when\s/;
  var PREFETCH_ON_PATTERN = /^prefetch\s+on\s/;
  var MINIMUM_PARAMETER_PATTERN = /^minimum\s/;
  var AFTER_PARAMETER_PATTERN = /^after\s/;
  var WHEN_PARAMETER_PATTERN = /^when\s/;
  var ON_PARAMETER_PATTERN = /^on\s/;
  function isConnectedDeferLoopBlock(name) {
    return name === "placeholder" || name === "loading" || name === "error";
  }
  function createDeferredBlock(ast, connectedBlocks, visitor, bindingParser) {
    const errors = [];
    const { placeholder, loading, error: error2 } = parseConnectedBlocks(connectedBlocks, errors, visitor);
    const { triggers, prefetchTriggers } = parsePrimaryTriggers(ast.parameters, bindingParser, errors, placeholder);
    let lastEndSourceSpan = ast.endSourceSpan;
    let endOfLastSourceSpan = ast.sourceSpan.end;
    if (connectedBlocks.length > 0) {
      const lastConnectedBlock = connectedBlocks[connectedBlocks.length - 1];
      lastEndSourceSpan = lastConnectedBlock.endSourceSpan;
      endOfLastSourceSpan = lastConnectedBlock.sourceSpan.end;
    }
    const sourceSpanWithConnectedBlocks = new ParseSourceSpan(ast.sourceSpan.start, endOfLastSourceSpan);
    const node = new DeferredBlock(visitAll(visitor, ast.children, ast.children), triggers, prefetchTriggers, placeholder, loading, error2, ast.nameSpan, sourceSpanWithConnectedBlocks, ast.sourceSpan, ast.startSourceSpan, lastEndSourceSpan, ast.i18n);
    return { node, errors };
  }
  function parseConnectedBlocks(connectedBlocks, errors, visitor) {
    let placeholder = null;
    let loading = null;
    let error2 = null;
    for (const block of connectedBlocks) {
      try {
        if (!isConnectedDeferLoopBlock(block.name)) {
          errors.push(new ParseError(block.startSourceSpan, `Unrecognized block "@${block.name}"`));
          break;
        }
        switch (block.name) {
          case "placeholder":
            if (placeholder !== null) {
              errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @placeholder block`));
            } else {
              placeholder = parsePlaceholderBlock(block, visitor);
            }
            break;
          case "loading":
            if (loading !== null) {
              errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @loading block`));
            } else {
              loading = parseLoadingBlock(block, visitor);
            }
            break;
          case "error":
            if (error2 !== null) {
              errors.push(new ParseError(block.startSourceSpan, `@defer block can only have one @error block`));
            } else {
              error2 = parseErrorBlock(block, visitor);
            }
            break;
        }
      } catch (e2) {
        errors.push(new ParseError(block.startSourceSpan, e2.message));
      }
    }
    return { placeholder, loading, error: error2 };
  }
  function parsePlaceholderBlock(ast, visitor) {
    let minimumTime = null;
    for (const param of ast.parameters) {
      if (MINIMUM_PARAMETER_PATTERN.test(param.expression)) {
        if (minimumTime != null) {
          throw new Error(`@placeholder block can only have one "minimum" parameter`);
        }
        const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));
        if (parsedTime === null) {
          throw new Error(`Could not parse time value of parameter "minimum"`);
        }
        minimumTime = parsedTime;
      } else {
        throw new Error(`Unrecognized parameter in @placeholder block: "${param.expression}"`);
      }
    }
    return new DeferredBlockPlaceholder(visitAll(visitor, ast.children, ast.children), minimumTime, ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);
  }
  function parseLoadingBlock(ast, visitor) {
    let afterTime = null;
    let minimumTime = null;
    for (const param of ast.parameters) {
      if (AFTER_PARAMETER_PATTERN.test(param.expression)) {
        if (afterTime != null) {
          throw new Error(`@loading block can only have one "after" parameter`);
        }
        const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));
        if (parsedTime === null) {
          throw new Error(`Could not parse time value of parameter "after"`);
        }
        afterTime = parsedTime;
      } else if (MINIMUM_PARAMETER_PATTERN.test(param.expression)) {
        if (minimumTime != null) {
          throw new Error(`@loading block can only have one "minimum" parameter`);
        }
        const parsedTime = parseDeferredTime(param.expression.slice(getTriggerParametersStart(param.expression)));
        if (parsedTime === null) {
          throw new Error(`Could not parse time value of parameter "minimum"`);
        }
        minimumTime = parsedTime;
      } else {
        throw new Error(`Unrecognized parameter in @loading block: "${param.expression}"`);
      }
    }
    return new DeferredBlockLoading(visitAll(visitor, ast.children, ast.children), afterTime, minimumTime, ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);
  }
  function parseErrorBlock(ast, visitor) {
    if (ast.parameters.length > 0) {
      throw new Error(`@error block cannot have parameters`);
    }
    return new DeferredBlockError(visitAll(visitor, ast.children, ast.children), ast.nameSpan, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan, ast.i18n);
  }
  function parsePrimaryTriggers(params, bindingParser, errors, placeholder) {
    const triggers = {};
    const prefetchTriggers = {};
    for (const param of params) {
      if (WHEN_PARAMETER_PATTERN.test(param.expression)) {
        parseWhenTrigger(param, bindingParser, triggers, errors);
      } else if (ON_PARAMETER_PATTERN.test(param.expression)) {
        parseOnTrigger(param, triggers, errors, placeholder);
      } else if (PREFETCH_WHEN_PATTERN.test(param.expression)) {
        parseWhenTrigger(param, bindingParser, prefetchTriggers, errors);
      } else if (PREFETCH_ON_PATTERN.test(param.expression)) {
        parseOnTrigger(param, prefetchTriggers, errors, placeholder);
      } else {
        errors.push(new ParseError(param.sourceSpan, "Unrecognized trigger"));
      }
    }
    return { triggers, prefetchTriggers };
  }
  var BIND_NAME_REGEXP = /^(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*)$/;
  var KW_BIND_IDX = 1;
  var KW_LET_IDX = 2;
  var KW_REF_IDX = 3;
  var KW_ON_IDX = 4;
  var KW_BINDON_IDX = 5;
  var KW_AT_IDX = 6;
  var IDENT_KW_IDX = 7;
  var BINDING_DELIMS = {
    BANANA_BOX: { start: "[(", end: ")]" },
    PROPERTY: { start: "[", end: "]" },
    EVENT: { start: "(", end: ")" }
  };
  var TEMPLATE_ATTR_PREFIX = "*";
  function htmlAstToRender3Ast(htmlNodes, bindingParser, options) {
    const transformer = new HtmlAstToIvyAst(bindingParser, options);
    const ivyNodes = visitAll(transformer, htmlNodes, htmlNodes);
    const allErrors = bindingParser.errors.concat(transformer.errors);
    const result = {
      nodes: ivyNodes,
      errors: allErrors,
      styleUrls: transformer.styleUrls,
      styles: transformer.styles,
      ngContentSelectors: transformer.ngContentSelectors
    };
    if (options.collectCommentNodes) {
      result.commentNodes = transformer.commentNodes;
    }
    return result;
  }
  var HtmlAstToIvyAst = class {
    constructor(bindingParser, options) {
      this.bindingParser = bindingParser;
      this.options = options;
      this.errors = [];
      this.styles = [];
      this.styleUrls = [];
      this.ngContentSelectors = [];
      this.commentNodes = [];
      this.inI18nBlock = false;
      this.processedNodes = /* @__PURE__ */ new Set();
    }
    // HTML visitor
    visitElement(element2) {
      const isI18nRootElement = isI18nRootNode(element2.i18n);
      if (isI18nRootElement) {
        if (this.inI18nBlock) {
          this.reportError("Cannot mark an element as translatable inside of a translatable section. Please remove the nested i18n marker.", element2.sourceSpan);
        }
        this.inI18nBlock = true;
      }
      const preparsedElement = preparseElement(element2);
      if (preparsedElement.type === PreparsedElementType.SCRIPT) {
        return null;
      } else if (preparsedElement.type === PreparsedElementType.STYLE) {
        const contents = textContents(element2);
        if (contents !== null) {
          this.styles.push(contents);
        }
        return null;
      } else if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
        this.styleUrls.push(preparsedElement.hrefAttr);
        return null;
      }
      const isTemplateElement2 = isNgTemplate(element2.name);
      const parsedProperties = [];
      const boundEvents = [];
      const variables = [];
      const references = [];
      const attributes = [];
      const i18nAttrsMeta = {};
      const templateParsedProperties = [];
      const templateVariables = [];
      let elementHasInlineTemplate = false;
      for (const attribute2 of element2.attrs) {
        let hasBinding = false;
        const normalizedName = normalizeAttributeName(attribute2.name);
        let isTemplateBinding = false;
        if (attribute2.i18n) {
          i18nAttrsMeta[attribute2.name] = attribute2.i18n;
        }
        if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {
          if (elementHasInlineTemplate) {
            this.reportError(`Can't have multiple template bindings on one element. Use only one attribute prefixed with *`, attribute2.sourceSpan);
          }
          isTemplateBinding = true;
          elementHasInlineTemplate = true;
          const templateValue = attribute2.value;
          const templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length);
          const parsedVariables = [];
          const absoluteValueOffset = attribute2.valueSpan ? attribute2.valueSpan.start.offset : (
            // If there is no value span the attribute does not have a value, like `attr` in
            //`<div attr></div>`. In this case, point to one character beyond the last character of
            // the attribute name.
            attribute2.sourceSpan.start.offset + attribute2.name.length
          );
          this.bindingParser.parseInlineTemplateBinding(
            templateKey,
            templateValue,
            attribute2.sourceSpan,
            absoluteValueOffset,
            [],
            templateParsedProperties,
            parsedVariables,
            true
            /* isIvyAst */
          );
          templateVariables.push(...parsedVariables.map((v) => new Variable(v.name, v.value, v.sourceSpan, v.keySpan, v.valueSpan)));
        } else {
          hasBinding = this.parseAttribute(isTemplateElement2, attribute2, [], parsedProperties, boundEvents, variables, references);
        }
        if (!hasBinding && !isTemplateBinding) {
          attributes.push(this.visitAttribute(attribute2));
        }
      }
      let children;
      if (preparsedElement.nonBindable) {
        children = visitAll(NON_BINDABLE_VISITOR, element2.children).flat(Infinity);
      } else {
        children = visitAll(this, element2.children, element2.children);
      }
      let parsedElement;
      if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
        if (element2.children && !element2.children.every((node) => isEmptyTextNode(node) || isCommentNode(node))) {
          this.reportError(`<ng-content> element cannot have content.`, element2.sourceSpan);
        }
        const selector = preparsedElement.selectAttr;
        const attrs = element2.attrs.map((attr) => this.visitAttribute(attr));
        parsedElement = new Content(selector, attrs, element2.sourceSpan, element2.i18n);
        this.ngContentSelectors.push(selector);
      } else if (isTemplateElement2) {
        const attrs = this.extractAttributes(element2.name, parsedProperties, i18nAttrsMeta);
        parsedElement = new Template(element2.name, attributes, attrs.bound, boundEvents, [
          /* no template attributes */
        ], children, references, variables, element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, element2.i18n);
      } else {
        const attrs = this.extractAttributes(element2.name, parsedProperties, i18nAttrsMeta);
        parsedElement = new Element$1(element2.name, attributes, attrs.bound, boundEvents, children, references, element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, element2.i18n);
      }
      if (elementHasInlineTemplate) {
        const attrs = this.extractAttributes("ng-template", templateParsedProperties, i18nAttrsMeta);
        const templateAttrs = [];
        attrs.literal.forEach((attr) => templateAttrs.push(attr));
        attrs.bound.forEach((attr) => templateAttrs.push(attr));
        const hoistedAttrs = parsedElement instanceof Element$1 ? {
          attributes: parsedElement.attributes,
          inputs: parsedElement.inputs,
          outputs: parsedElement.outputs
        } : { attributes: [], inputs: [], outputs: [] };
        const i18n2 = isTemplateElement2 && isI18nRootElement ? void 0 : element2.i18n;
        const name = parsedElement instanceof Template ? null : parsedElement.name;
        parsedElement = new Template(name, hoistedAttrs.attributes, hoistedAttrs.inputs, hoistedAttrs.outputs, templateAttrs, [parsedElement], [
          /* no references */
        ], templateVariables, element2.sourceSpan, element2.startSourceSpan, element2.endSourceSpan, i18n2);
      }
      if (isI18nRootElement) {
        this.inI18nBlock = false;
      }
      return parsedElement;
    }
    visitAttribute(attribute2) {
      return new TextAttribute(attribute2.name, attribute2.value, attribute2.sourceSpan, attribute2.keySpan, attribute2.valueSpan, attribute2.i18n);
    }
    visitText(text2) {
      return this.processedNodes.has(text2) ? null : this._visitTextWithInterpolation(text2.value, text2.sourceSpan, text2.tokens, text2.i18n);
    }
    visitExpansion(expansion) {
      if (!expansion.i18n) {
        return null;
      }
      if (!isI18nRootNode(expansion.i18n)) {
        throw new Error(`Invalid type "${expansion.i18n.constructor}" for "i18n" property of ${expansion.sourceSpan.toString()}. Expected a "Message"`);
      }
      const message = expansion.i18n;
      const vars = {};
      const placeholders = {};
      Object.keys(message.placeholders).forEach((key) => {
        const value = message.placeholders[key];
        if (key.startsWith(I18N_ICU_VAR_PREFIX)) {
          const formattedKey = key.trim();
          const ast = this.bindingParser.parseInterpolationExpression(value.text, value.sourceSpan);
          vars[formattedKey] = new BoundText(ast, value.sourceSpan);
        } else {
          placeholders[key] = this._visitTextWithInterpolation(value.text, value.sourceSpan, null);
        }
      });
      return new Icu$1(vars, placeholders, expansion.sourceSpan, message);
    }
    visitExpansionCase(expansionCase) {
      return null;
    }
    visitComment(comment) {
      if (this.options.collectCommentNodes) {
        this.commentNodes.push(new Comment$1(comment.value || "", comment.sourceSpan));
      }
      return null;
    }
    visitBlockParameter() {
      return null;
    }
    visitBlock(block, context2) {
      const index = Array.isArray(context2) ? context2.indexOf(block) : -1;
      if (index === -1) {
        throw new Error("Visitor invoked incorrectly. Expecting visitBlock to be invoked siblings array as its context");
      }
      if (this.processedNodes.has(block)) {
        return null;
      }
      let result = null;
      switch (block.name) {
        case "defer":
          result = createDeferredBlock(block, this.findConnectedBlocks(index, context2, isConnectedDeferLoopBlock), this, this.bindingParser);
          break;
        case "switch":
          result = createSwitchBlock(block, this, this.bindingParser);
          break;
        case "for":
          result = createForLoop(block, this.findConnectedBlocks(index, context2, isConnectedForLoopBlock), this, this.bindingParser);
          break;
        case "if":
          result = createIfBlock(block, this.findConnectedBlocks(index, context2, isConnectedIfLoopBlock), this, this.bindingParser);
          break;
        default:
          let errorMessage;
          if (isConnectedDeferLoopBlock(block.name)) {
            errorMessage = `@${block.name} block can only be used after an @defer block.`;
            this.processedNodes.add(block);
          } else if (isConnectedForLoopBlock(block.name)) {
            errorMessage = `@${block.name} block can only be used after an @for block.`;
            this.processedNodes.add(block);
          } else if (isConnectedIfLoopBlock(block.name)) {
            errorMessage = `@${block.name} block can only be used after an @if or @else if block.`;
            this.processedNodes.add(block);
          } else {
            errorMessage = `Unrecognized block @${block.name}.`;
          }
          result = {
            node: new UnknownBlock(block.name, block.sourceSpan, block.nameSpan),
            errors: [new ParseError(block.sourceSpan, errorMessage)]
          };
          break;
      }
      this.errors.push(...result.errors);
      return result.node;
    }
    findConnectedBlocks(primaryBlockIndex, siblings, predicate) {
      const relatedBlocks = [];
      for (let i = primaryBlockIndex + 1; i < siblings.length; i++) {
        const node = siblings[i];
        if (node instanceof Text2 && node.value.trim().length === 0) {
          this.processedNodes.add(node);
          continue;
        }
        if (!(node instanceof Block) || !predicate(node.name)) {
          break;
        }
        relatedBlocks.push(node);
        this.processedNodes.add(node);
      }
      return relatedBlocks;
    }
    // convert view engine `ParsedProperty` to a format suitable for IVY
    extractAttributes(elementName, properties, i18nPropsMeta) {
      const bound = [];
      const literal2 = [];
      properties.forEach((prop) => {
        const i18n2 = i18nPropsMeta[prop.name];
        if (prop.isLiteral) {
          literal2.push(new TextAttribute(prop.name, prop.expression.source || "", prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n2));
        } else {
          const bep = this.bindingParser.createBoundElementProperty(
            elementName,
            prop,
            /* skipValidation */
            true,
            /* mapPropertyName */
            false
          );
          bound.push(BoundAttribute.fromBoundElementProperty(bep, i18n2));
        }
      });
      return { bound, literal: literal2 };
    }
    parseAttribute(isTemplateElement2, attribute2, matchableAttributes, parsedProperties, boundEvents, variables, references) {
      const name = normalizeAttributeName(attribute2.name);
      const value = attribute2.value;
      const srcSpan = attribute2.sourceSpan;
      const absoluteOffset = attribute2.valueSpan ? attribute2.valueSpan.start.offset : srcSpan.start.offset;
      function createKeySpan(srcSpan2, prefix, identifier) {
        const normalizationAdjustment = attribute2.name.length - name.length;
        const keySpanStart = srcSpan2.start.moveBy(prefix.length + normalizationAdjustment);
        const keySpanEnd = keySpanStart.moveBy(identifier.length);
        return new ParseSourceSpan(keySpanStart, keySpanEnd, keySpanStart, identifier);
      }
      const bindParts = name.match(BIND_NAME_REGEXP);
      if (bindParts) {
        if (bindParts[KW_BIND_IDX] != null) {
          const identifier = bindParts[IDENT_KW_IDX];
          const keySpan2 = createKeySpan(srcSpan, bindParts[KW_BIND_IDX], identifier);
          this.bindingParser.parsePropertyBinding(identifier, value, false, false, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
        } else if (bindParts[KW_LET_IDX]) {
          if (isTemplateElement2) {
            const identifier = bindParts[IDENT_KW_IDX];
            const keySpan2 = createKeySpan(srcSpan, bindParts[KW_LET_IDX], identifier);
            this.parseVariable(identifier, value, srcSpan, keySpan2, attribute2.valueSpan, variables);
          } else {
            this.reportError(`"let-" is only supported on ng-template elements.`, srcSpan);
          }
        } else if (bindParts[KW_REF_IDX]) {
          const identifier = bindParts[IDENT_KW_IDX];
          const keySpan2 = createKeySpan(srcSpan, bindParts[KW_REF_IDX], identifier);
          this.parseReference(identifier, value, srcSpan, keySpan2, attribute2.valueSpan, references);
        } else if (bindParts[KW_ON_IDX]) {
          const events = [];
          const identifier = bindParts[IDENT_KW_IDX];
          const keySpan2 = createKeySpan(srcSpan, bindParts[KW_ON_IDX], identifier);
          this.bindingParser.parseEvent(
            identifier,
            value,
            /* isAssignmentEvent */
            false,
            srcSpan,
            attribute2.valueSpan || srcSpan,
            matchableAttributes,
            events,
            keySpan2
          );
          addEvents(events, boundEvents);
        } else if (bindParts[KW_BINDON_IDX]) {
          const identifier = bindParts[IDENT_KW_IDX];
          const keySpan2 = createKeySpan(srcSpan, bindParts[KW_BINDON_IDX], identifier);
          this.bindingParser.parsePropertyBinding(identifier, value, false, true, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
          this.parseAssignmentEvent(identifier, value, srcSpan, attribute2.valueSpan, matchableAttributes, boundEvents, keySpan2);
        } else if (bindParts[KW_AT_IDX]) {
          const keySpan2 = createKeySpan(srcSpan, "", name);
          this.bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
        }
        return true;
      }
      let delims = null;
      if (name.startsWith(BINDING_DELIMS.BANANA_BOX.start)) {
        delims = BINDING_DELIMS.BANANA_BOX;
      } else if (name.startsWith(BINDING_DELIMS.PROPERTY.start)) {
        delims = BINDING_DELIMS.PROPERTY;
      } else if (name.startsWith(BINDING_DELIMS.EVENT.start)) {
        delims = BINDING_DELIMS.EVENT;
      }
      if (delims !== null && // NOTE: older versions of the parser would match a start/end delimited
      // binding iff the property name was terminated by the ending delimiter
      // and the identifier in the binding was non-empty.
      // TODO(ayazhafiz): update this to handle malformed bindings.
      name.endsWith(delims.end) && name.length > delims.start.length + delims.end.length) {
        const identifier = name.substring(delims.start.length, name.length - delims.end.length);
        const keySpan2 = createKeySpan(srcSpan, delims.start, identifier);
        if (delims.start === BINDING_DELIMS.BANANA_BOX.start) {
          this.bindingParser.parsePropertyBinding(identifier, value, false, true, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
          this.parseAssignmentEvent(identifier, value, srcSpan, attribute2.valueSpan, matchableAttributes, boundEvents, keySpan2);
        } else if (delims.start === BINDING_DELIMS.PROPERTY.start) {
          this.bindingParser.parsePropertyBinding(identifier, value, false, false, srcSpan, absoluteOffset, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan2);
        } else {
          const events = [];
          this.bindingParser.parseEvent(
            identifier,
            value,
            /* isAssignmentEvent */
            false,
            srcSpan,
            attribute2.valueSpan || srcSpan,
            matchableAttributes,
            events,
            keySpan2
          );
          addEvents(events, boundEvents);
        }
        return true;
      }
      const keySpan = createKeySpan(srcSpan, "", name);
      const hasBinding = this.bindingParser.parsePropertyInterpolation(name, value, srcSpan, attribute2.valueSpan, matchableAttributes, parsedProperties, keySpan, attribute2.valueTokens ?? null);
      return hasBinding;
    }
    _visitTextWithInterpolation(value, sourceSpan, interpolatedTokens, i18n2) {
      const valueNoNgsp = replaceNgsp2(value);
      const expr = this.bindingParser.parseInterpolation(valueNoNgsp, sourceSpan, interpolatedTokens);
      return expr ? new BoundText(expr, sourceSpan, i18n2) : new Text$3(valueNoNgsp, sourceSpan);
    }
    parseVariable(identifier, value, sourceSpan, keySpan, valueSpan, variables) {
      if (identifier.indexOf("-") > -1) {
        this.reportError(`"-" is not allowed in variable names`, sourceSpan);
      } else if (identifier.length === 0) {
        this.reportError(`Variable does not have a name`, sourceSpan);
      }
      variables.push(new Variable(identifier, value, sourceSpan, keySpan, valueSpan));
    }
    parseReference(identifier, value, sourceSpan, keySpan, valueSpan, references) {
      if (identifier.indexOf("-") > -1) {
        this.reportError(`"-" is not allowed in reference names`, sourceSpan);
      } else if (identifier.length === 0) {
        this.reportError(`Reference does not have a name`, sourceSpan);
      } else if (references.some((reference2) => reference2.name === identifier)) {
        this.reportError(`Reference "#${identifier}" is defined more than once`, sourceSpan);
      }
      references.push(new Reference(identifier, value, sourceSpan, keySpan, valueSpan));
    }
    parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, boundEvents, keySpan) {
      const events = [];
      this.bindingParser.parseEvent(
        `${name}Change`,
        expression,
        /* isAssignmentEvent */
        true,
        sourceSpan,
        valueSpan || sourceSpan,
        targetMatchableAttrs,
        events,
        keySpan
      );
      addEvents(events, boundEvents);
    }
    reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {
      this.errors.push(new ParseError(sourceSpan, message, level));
    }
  };
  var NonBindableVisitor = class {
    visitElement(ast) {
      const preparsedElement = preparseElement(ast);
      if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
        return null;
      }
      const children = visitAll(this, ast.children, null);
      return new Element$1(
        ast.name,
        visitAll(this, ast.attrs),
        /* inputs */
        [],
        /* outputs */
        [],
        children,
        /* references */
        [],
        ast.sourceSpan,
        ast.startSourceSpan,
        ast.endSourceSpan
      );
    }
    visitComment(comment) {
      return null;
    }
    visitAttribute(attribute2) {
      return new TextAttribute(attribute2.name, attribute2.value, attribute2.sourceSpan, attribute2.keySpan, attribute2.valueSpan, attribute2.i18n);
    }
    visitText(text2) {
      return new Text$3(text2.value, text2.sourceSpan);
    }
    visitExpansion(expansion) {
      return null;
    }
    visitExpansionCase(expansionCase) {
      return null;
    }
    visitBlock(block, context2) {
      const nodes = [
        // In an ngNonBindable context we treat the opening/closing tags of block as plain text.
        // This is the as if the `tokenizeBlocks` option was disabled.
        new Text$3(block.startSourceSpan.toString(), block.startSourceSpan),
        ...visitAll(this, block.children)
      ];
      if (block.endSourceSpan !== null) {
        nodes.push(new Text$3(block.endSourceSpan.toString(), block.endSourceSpan));
      }
      return nodes;
    }
    visitBlockParameter(parameter, context2) {
      return null;
    }
  };
  var NON_BINDABLE_VISITOR = new NonBindableVisitor();
  function normalizeAttributeName(attrName) {
    return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
  }
  function addEvents(events, boundEvents) {
    boundEvents.push(...events.map((e2) => BoundEvent.fromParsedEvent(e2)));
  }
  function isEmptyTextNode(node) {
    return node instanceof Text2 && node.value.trim().length == 0;
  }
  function isCommentNode(node) {
    return node instanceof Comment;
  }
  function textContents(node) {
    if (node.children.length !== 1 || !(node.children[0] instanceof Text2)) {
      return null;
    } else {
      return node.children[0].value;
    }
  }
  var TagType;
  (function(TagType2) {
    TagType2[TagType2["ELEMENT"] = 0] = "ELEMENT";
    TagType2[TagType2["TEMPLATE"] = 1] = "TEMPLATE";
  })(TagType || (TagType = {}));
  function setupRegistry() {
    return { getUniqueId: getSeqNumberGenerator(), icus: /* @__PURE__ */ new Map() };
  }
  var I18nContext = class _I18nContext {
    constructor(index, ref, level = 0, templateIndex = null, meta, registry) {
      this.index = index;
      this.ref = ref;
      this.level = level;
      this.templateIndex = templateIndex;
      this.meta = meta;
      this.registry = registry;
      this.bindings = /* @__PURE__ */ new Set();
      this.placeholders = /* @__PURE__ */ new Map();
      this.isEmitted = false;
      this._unresolvedCtxCount = 0;
      this._registry = registry || setupRegistry();
      this.id = this._registry.getUniqueId();
    }
    appendTag(type, node, index, closed) {
      if (node.isVoid && closed) {
        return;
      }
      const ph = node.isVoid || !closed ? node.startName : node.closeName;
      const content = { type, index, ctx: this.id, isVoid: node.isVoid, closed };
      updatePlaceholderMap(this.placeholders, ph, content);
    }
    appendBlockPart(node, index, closed) {
      const ph = closed ? node.closeName : node.startName;
      const content = { type: TagType.TEMPLATE, index, ctx: this.id, closed };
      updatePlaceholderMap(this.placeholders, ph, content);
    }
    get icus() {
      return this._registry.icus;
    }
    get isRoot() {
      return this.level === 0;
    }
    get isResolved() {
      return this._unresolvedCtxCount === 0;
    }
    getSerializedPlaceholders() {
      const result = /* @__PURE__ */ new Map();
      this.placeholders.forEach((values, key) => result.set(key, values.map(serializePlaceholderValue)));
      return result;
    }
    // public API to accumulate i18n-related content
    appendBinding(binding) {
      this.bindings.add(binding);
    }
    appendIcu(name, ref) {
      updatePlaceholderMap(this._registry.icus, name, ref);
    }
    appendBoundText(node) {
      const phs = assembleBoundTextPlaceholders(node, this.bindings.size, this.id);
      phs.forEach((values, key) => updatePlaceholderMap(this.placeholders, key, ...values));
    }
    appendTemplate(node, index) {
      this.appendTag(TagType.TEMPLATE, node, index, false);
      this.appendTag(TagType.TEMPLATE, node, index, true);
      this._unresolvedCtxCount++;
    }
    appendBlock(node, index) {
      this.appendBlockPart(node, index, false);
      this.appendBlockPart(node, index, true);
      this._unresolvedCtxCount++;
    }
    appendElement(node, index, closed) {
      this.appendTag(TagType.ELEMENT, node, index, closed);
    }
    appendProjection(node, index) {
      this.appendTag(TagType.ELEMENT, node, index, false);
      this.appendTag(TagType.ELEMENT, node, index, true);
    }
    /**
     * Generates an instance of a child context based on the root one,
     * when we enter a nested template within I18n section.
     *
     * @param index Instruction index of corresponding i18nStart, which initiates this context
     * @param templateIndex Instruction index of a template which this context belongs to
     * @param meta Meta information (id, meaning, description, etc) associated with this context
     *
     * @returns I18nContext instance
     */
    forkChildContext(index, templateIndex, meta) {
      return new _I18nContext(index, this.ref, this.level + 1, templateIndex, meta, this._registry);
    }
    /**
     * Reconciles child context into parent one once the end of the i18n block is reached (i18nEnd).
     *
     * @param context Child I18nContext instance to be reconciled with parent context.
     */
    reconcileChildContext(context2) {
      ["start", "close"].forEach((op) => {
        const key = context2.meta[`${op}Name`];
        const phs = this.placeholders.get(key) || [];
        const tag = phs.find(findTemplateFn(this.id, context2.templateIndex));
        if (tag) {
          tag.ctx = context2.id;
        }
      });
      const childPhs = context2.placeholders;
      childPhs.forEach((values, key) => {
        const phs = this.placeholders.get(key);
        if (!phs) {
          this.placeholders.set(key, values);
          return;
        }
        const tmplIdx = phs.findIndex(findTemplateFn(context2.id, context2.templateIndex));
        if (tmplIdx >= 0) {
          const isCloseTag = key.startsWith("CLOSE");
          const isTemplateTag = key.endsWith("NG-TEMPLATE");
          if (isTemplateTag) {
            phs.splice(tmplIdx + (isCloseTag ? 0 : 1), 0, ...values);
          } else {
            const idx = isCloseTag ? values.length - 1 : 0;
            values[idx].tmpl = phs[tmplIdx];
            phs.splice(tmplIdx, 1, ...values);
          }
        } else {
          phs.push(...values);
        }
        this.placeholders.set(key, phs);
      });
      this._unresolvedCtxCount--;
    }
  };
  function wrap(symbol, index, contextId, closed) {
    const state = closed ? "/" : "";
    return wrapI18nPlaceholder(`${state}${symbol}${index}`, contextId);
  }
  function wrapTag(symbol, { index, ctx, isVoid }, closed) {
    return isVoid ? wrap(symbol, index, ctx) + wrap(symbol, index, ctx, true) : wrap(symbol, index, ctx, closed);
  }
  function findTemplateFn(ctx, templateIndex) {
    return (token) => typeof token === "object" && token.type === TagType.TEMPLATE && token.index === templateIndex && token.ctx === ctx;
  }
  function serializePlaceholderValue(value) {
    const element2 = (data, closed) => wrapTag("#", data, closed);
    const template2 = (data, closed) => wrapTag("*", data, closed);
    switch (value.type) {
      case TagType.ELEMENT:
        if (value.closed) {
          return element2(value, true) + (value.tmpl ? template2(value.tmpl, true) : "");
        }
        if (value.tmpl) {
          return template2(value.tmpl) + element2(value) + (value.isVoid ? template2(value.tmpl, true) : "");
        }
        return element2(value);
      case TagType.TEMPLATE:
        return template2(value, value.closed);
      default:
        return value;
    }
  }
  var IMPORTANT_FLAG = "!important";
  var MIN_STYLING_BINDING_SLOTS_REQUIRED = 2;
  var StylingBuilder = class {
    constructor(_directiveExpr) {
      this._directiveExpr = _directiveExpr;
      this._hasInitialValues = false;
      this.hasBindings = false;
      this.hasBindingsWithPipes = false;
      this._classMapInput = null;
      this._styleMapInput = null;
      this._singleStyleInputs = null;
      this._singleClassInputs = null;
      this._lastStylingInput = null;
      this._firstStylingInput = null;
      this._stylesIndex = /* @__PURE__ */ new Map();
      this._classesIndex = /* @__PURE__ */ new Map();
      this._initialStyleValues = [];
      this._initialClassValues = [];
    }
    /**
     * Registers a given input to the styling builder to be later used when producing AOT code.
     *
     * The code below will only accept the input if it is somehow tied to styling (whether it be
     * style/class bindings or static style/class attributes).
     */
    registerBoundInput(input2) {
      let binding = null;
      let name = input2.name;
      switch (input2.type) {
        case 0:
          binding = this.registerInputBasedOnName(name, input2.value, input2.sourceSpan);
          break;
        case 3:
          binding = this.registerStyleInput(name, false, input2.value, input2.sourceSpan, input2.unit);
          break;
        case 2:
          binding = this.registerClassInput(name, false, input2.value, input2.sourceSpan);
          break;
      }
      return binding ? true : false;
    }
    registerInputBasedOnName(name, expression, sourceSpan) {
      let binding = null;
      const prefix = name.substring(0, 6);
      const isStyle = name === "style" || prefix === "style." || prefix === "style!";
      const isClass = !isStyle && (name === "class" || prefix === "class." || prefix === "class!");
      if (isStyle || isClass) {
        const isMapBased = name.charAt(5) !== ".";
        const property2 = name.slice(isMapBased ? 5 : 6);
        if (isStyle) {
          binding = this.registerStyleInput(property2, isMapBased, expression, sourceSpan);
        } else {
          binding = this.registerClassInput(property2, isMapBased, expression, sourceSpan);
        }
      }
      return binding;
    }
    registerStyleInput(name, isMapBased, value, sourceSpan, suffix) {
      if (isEmptyExpression(value)) {
        return null;
      }
      if (!isCssCustomProperty(name)) {
        name = hyphenate(name);
      }
      const { property: property2, hasOverrideFlag, suffix: bindingSuffix } = parseProperty(name);
      suffix = typeof suffix === "string" && suffix.length !== 0 ? suffix : bindingSuffix;
      const entry = { name: property2, suffix, value, sourceSpan, hasOverrideFlag };
      if (isMapBased) {
        this._styleMapInput = entry;
      } else {
        (this._singleStyleInputs = this._singleStyleInputs || []).push(entry);
        registerIntoMap(this._stylesIndex, property2);
      }
      this._lastStylingInput = entry;
      this._firstStylingInput = this._firstStylingInput || entry;
      this._checkForPipes(value);
      this.hasBindings = true;
      return entry;
    }
    registerClassInput(name, isMapBased, value, sourceSpan) {
      if (isEmptyExpression(value)) {
        return null;
      }
      const { property: property2, hasOverrideFlag } = parseProperty(name);
      const entry = { name: property2, value, sourceSpan, hasOverrideFlag, suffix: null };
      if (isMapBased) {
        this._classMapInput = entry;
      } else {
        (this._singleClassInputs = this._singleClassInputs || []).push(entry);
        registerIntoMap(this._classesIndex, property2);
      }
      this._lastStylingInput = entry;
      this._firstStylingInput = this._firstStylingInput || entry;
      this._checkForPipes(value);
      this.hasBindings = true;
      return entry;
    }
    _checkForPipes(value) {
      if (value instanceof ASTWithSource && value.ast instanceof BindingPipe) {
        this.hasBindingsWithPipes = true;
      }
    }
    /**
     * Registers the element's static style string value to the builder.
     *
     * @param value the style string (e.g. `width:100px; height:200px;`)
     */
    registerStyleAttr(value) {
      this._initialStyleValues = parse(value);
      this._hasInitialValues = true;
    }
    /**
     * Registers the element's static class string value to the builder.
     *
     * @param value the className string (e.g. `disabled gold zoom`)
     */
    registerClassAttr(value) {
      this._initialClassValues = value.trim().split(/\s+/g);
      this._hasInitialValues = true;
    }
    /**
     * Appends all styling-related expressions to the provided attrs array.
     *
     * @param attrs an existing array where each of the styling expressions
     * will be inserted into.
     */
    populateInitialStylingAttrs(attrs) {
      if (this._initialClassValues.length) {
        attrs.push(literal(
          1
          /* AttributeMarker.Classes */
        ));
        for (let i = 0; i < this._initialClassValues.length; i++) {
          attrs.push(literal(this._initialClassValues[i]));
        }
      }
      if (this._initialStyleValues.length) {
        attrs.push(literal(
          2
          /* AttributeMarker.Styles */
        ));
        for (let i = 0; i < this._initialStyleValues.length; i += 2) {
          attrs.push(literal(this._initialStyleValues[i]), literal(this._initialStyleValues[i + 1]));
        }
      }
    }
    /**
     * Builds an instruction with all the expressions and parameters for `elementHostAttrs`.
     *
     * The instruction generation code below is used for producing the AOT statement code which is
     * responsible for registering initial styles (within a directive hostBindings' creation block),
     * as well as any of the provided attribute values, to the directive host element.
     */
    assignHostAttrs(attrs, definitionMap) {
      if (this._directiveExpr && (attrs.length || this._hasInitialValues)) {
        this.populateInitialStylingAttrs(attrs);
        definitionMap.set("hostAttrs", literalArr(attrs));
      }
    }
    /**
     * Builds an instruction with all the expressions and parameters for `classMap`.
     *
     * The instruction data will contain all expressions for `classMap` to function
     * which includes the `[class]` expression params.
     */
    buildClassMapInstruction(valueConverter) {
      if (this._classMapInput) {
        return this._buildMapBasedInstruction(valueConverter, true, this._classMapInput);
      }
      return null;
    }
    /**
     * Builds an instruction with all the expressions and parameters for `styleMap`.
     *
     * The instruction data will contain all expressions for `styleMap` to function
     * which includes the `[style]` expression params.
     */
    buildStyleMapInstruction(valueConverter) {
      if (this._styleMapInput) {
        return this._buildMapBasedInstruction(valueConverter, false, this._styleMapInput);
      }
      return null;
    }
    _buildMapBasedInstruction(valueConverter, isClassBased, stylingInput) {
      let totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;
      const mapValue = stylingInput.value.visit(valueConverter);
      let reference2;
      if (mapValue instanceof Interpolation$1) {
        totalBindingSlotsRequired += mapValue.expressions.length;
        reference2 = isClassBased ? getClassMapInterpolationExpression(mapValue) : getStyleMapInterpolationExpression(mapValue);
      } else {
        reference2 = isClassBased ? Identifiers.classMap : Identifiers.styleMap;
      }
      return {
        reference: reference2,
        calls: [{
          supportsInterpolation: true,
          sourceSpan: stylingInput.sourceSpan,
          allocateBindingSlots: totalBindingSlotsRequired,
          params: (convertFn) => {
            const convertResult = convertFn(mapValue);
            const params = Array.isArray(convertResult) ? convertResult : [convertResult];
            return params;
          }
        }]
      };
    }
    _buildSingleInputs(reference2, inputs, valueConverter, getInterpolationExpressionFn, isClassBased) {
      const instructions = [];
      inputs.forEach((input2) => {
        const previousInstruction = instructions[instructions.length - 1];
        const value = input2.value.visit(valueConverter);
        let referenceForCall = reference2;
        let totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;
        if (value instanceof Interpolation$1) {
          totalBindingSlotsRequired += value.expressions.length;
          if (getInterpolationExpressionFn) {
            referenceForCall = getInterpolationExpressionFn(value);
          }
        }
        const call2 = {
          sourceSpan: input2.sourceSpan,
          allocateBindingSlots: totalBindingSlotsRequired,
          supportsInterpolation: !!getInterpolationExpressionFn,
          params: (convertFn) => {
            const params = [];
            params.push(literal(input2.name));
            const convertResult = convertFn(value);
            if (Array.isArray(convertResult)) {
              params.push(...convertResult);
            } else {
              params.push(convertResult);
            }
            if (!isClassBased && input2.suffix !== null) {
              params.push(literal(input2.suffix));
            }
            return params;
          }
        };
        if (previousInstruction && previousInstruction.reference === referenceForCall) {
          previousInstruction.calls.push(call2);
        } else {
          instructions.push({ reference: referenceForCall, calls: [call2] });
        }
      });
      return instructions;
    }
    _buildClassInputs(valueConverter) {
      if (this._singleClassInputs) {
        return this._buildSingleInputs(Identifiers.classProp, this._singleClassInputs, valueConverter, null, true);
      }
      return [];
    }
    _buildStyleInputs(valueConverter) {
      if (this._singleStyleInputs) {
        return this._buildSingleInputs(Identifiers.styleProp, this._singleStyleInputs, valueConverter, getStylePropInterpolationExpression, false);
      }
      return [];
    }
    /**
     * Constructs all instructions which contain the expressions that will be placed
     * into the update block of a template function or a directive hostBindings function.
     */
    buildUpdateLevelInstructions(valueConverter) {
      const instructions = [];
      if (this.hasBindings) {
        const styleMapInstruction = this.buildStyleMapInstruction(valueConverter);
        if (styleMapInstruction) {
          instructions.push(styleMapInstruction);
        }
        const classMapInstruction = this.buildClassMapInstruction(valueConverter);
        if (classMapInstruction) {
          instructions.push(classMapInstruction);
        }
        instructions.push(...this._buildStyleInputs(valueConverter));
        instructions.push(...this._buildClassInputs(valueConverter));
      }
      return instructions;
    }
  };
  function registerIntoMap(map3, key) {
    if (!map3.has(key)) {
      map3.set(key, map3.size);
    }
  }
  function parseProperty(name) {
    let hasOverrideFlag = false;
    const overrideIndex = name.indexOf(IMPORTANT_FLAG);
    if (overrideIndex !== -1) {
      name = overrideIndex > 0 ? name.substring(0, overrideIndex) : "";
      hasOverrideFlag = true;
    }
    let suffix = null;
    let property2 = name;
    const unitIndex = name.lastIndexOf(".");
    if (unitIndex > 0) {
      suffix = name.slice(unitIndex + 1);
      property2 = name.substring(0, unitIndex);
    }
    return { property: property2, suffix, hasOverrideFlag };
  }
  function getClassMapInterpolationExpression(interpolation) {
    switch (getInterpolationArgsLength(interpolation)) {
      case 1:
        return Identifiers.classMap;
      case 3:
        return Identifiers.classMapInterpolate1;
      case 5:
        return Identifiers.classMapInterpolate2;
      case 7:
        return Identifiers.classMapInterpolate3;
      case 9:
        return Identifiers.classMapInterpolate4;
      case 11:
        return Identifiers.classMapInterpolate5;
      case 13:
        return Identifiers.classMapInterpolate6;
      case 15:
        return Identifiers.classMapInterpolate7;
      case 17:
        return Identifiers.classMapInterpolate8;
      default:
        return Identifiers.classMapInterpolateV;
    }
  }
  function getStyleMapInterpolationExpression(interpolation) {
    switch (getInterpolationArgsLength(interpolation)) {
      case 1:
        return Identifiers.styleMap;
      case 3:
        return Identifiers.styleMapInterpolate1;
      case 5:
        return Identifiers.styleMapInterpolate2;
      case 7:
        return Identifiers.styleMapInterpolate3;
      case 9:
        return Identifiers.styleMapInterpolate4;
      case 11:
        return Identifiers.styleMapInterpolate5;
      case 13:
        return Identifiers.styleMapInterpolate6;
      case 15:
        return Identifiers.styleMapInterpolate7;
      case 17:
        return Identifiers.styleMapInterpolate8;
      default:
        return Identifiers.styleMapInterpolateV;
    }
  }
  function getStylePropInterpolationExpression(interpolation) {
    switch (getInterpolationArgsLength(interpolation)) {
      case 1:
        return Identifiers.styleProp;
      case 3:
        return Identifiers.stylePropInterpolate1;
      case 5:
        return Identifiers.stylePropInterpolate2;
      case 7:
        return Identifiers.stylePropInterpolate3;
      case 9:
        return Identifiers.stylePropInterpolate4;
      case 11:
        return Identifiers.stylePropInterpolate5;
      case 13:
        return Identifiers.stylePropInterpolate6;
      case 15:
        return Identifiers.stylePropInterpolate7;
      case 17:
        return Identifiers.stylePropInterpolate8;
      default:
        return Identifiers.stylePropInterpolateV;
    }
  }
  function isCssCustomProperty(name) {
    return name.startsWith("--");
  }
  function isEmptyExpression(ast) {
    if (ast instanceof ASTWithSource) {
      ast = ast.ast;
    }
    return ast instanceof EmptyExpr$1;
  }
  var NG_CONTENT_SELECT_ATTR = "select";
  var NG_PROJECT_AS_ATTR_NAME = "ngProjectAs";
  var EVENT_BINDING_SCOPE_GLOBALS = /* @__PURE__ */ new Set(["$event"]);
  var NG_TEMPLATE_TAG_NAME = "ng-template";
  var GLOBAL_TARGET_RESOLVERS = /* @__PURE__ */ new Map([["window", Identifiers.resolveWindow], ["document", Identifiers.resolveDocument], ["body", Identifiers.resolveBody]]);
  var LEADING_TRIVIA_CHARS = [" ", "\n", "\r", "	"];
  function renderFlagCheckIfStmt(flags, statements) {
    return ifStmt(variable(RENDER_FLAGS).bitwiseAnd(literal(flags), null, false), statements);
  }
  function prepareEventListenerParameters(eventAst, handlerName = null, scope = null) {
    const { type, name, target, phase, handler } = eventAst;
    if (target && !GLOBAL_TARGET_RESOLVERS.has(target)) {
      throw new Error(`Unexpected global target '${target}' defined for '${name}' event.
        Supported list of global targets: ${Array.from(GLOBAL_TARGET_RESOLVERS.keys())}.`);
    }
    const eventArgumentName = "$event";
    const implicitReceiverAccesses = /* @__PURE__ */ new Set();
    const implicitReceiverExpr = scope === null || scope.bindingLevel === 0 ? variable(CONTEXT_NAME) : scope.getOrCreateSharedContextVar(0);
    const bindingStatements = eventAst.type === 2 ? convertAssignmentActionBinding(scope, implicitReceiverExpr, handler, "b", eventAst.handlerSpan, implicitReceiverAccesses, EVENT_BINDING_SCOPE_GLOBALS) : convertActionBinding(scope, implicitReceiverExpr, handler, "b", eventAst.handlerSpan, implicitReceiverAccesses, EVENT_BINDING_SCOPE_GLOBALS);
    const statements = [];
    const variableDeclarations = scope?.variableDeclarations();
    const restoreViewStatement = scope?.restoreViewStatement();
    if (variableDeclarations) {
      statements.push(...variableDeclarations);
    }
    statements.push(...bindingStatements);
    if (restoreViewStatement) {
      statements.unshift(restoreViewStatement);
      const lastStatement = statements[statements.length - 1];
      if (lastStatement instanceof ReturnStatement) {
        statements[statements.length - 1] = new ReturnStatement(invokeInstruction(lastStatement.value.sourceSpan, Identifiers.resetView, [lastStatement.value]));
      } else {
        statements.push(new ExpressionStatement(invokeInstruction(null, Identifiers.resetView, [])));
      }
    }
    const eventName = type === 1 ? prepareSyntheticListenerName(name, phase) : name;
    const fnName = handlerName && sanitizeIdentifier(handlerName);
    const fnArgs = [];
    if (implicitReceiverAccesses.has(eventArgumentName)) {
      fnArgs.push(new FnParam(eventArgumentName, DYNAMIC_TYPE));
    }
    const handlerFn = fn(fnArgs, statements, INFERRED_TYPE, null, fnName);
    const params = [literal(eventName), handlerFn];
    if (target) {
      params.push(
        literal(false),
        // `useCapture` flag, defaults to `false`
        importExpr(GLOBAL_TARGET_RESOLVERS.get(target))
      );
    }
    return params;
  }
  function createComponentDefConsts() {
    return {
      prepareStatements: [],
      constExpressions: [],
      i18nVarRefsCache: /* @__PURE__ */ new Map()
    };
  }
  var TemplateData = class {
    constructor(name, index, scope, visitor) {
      this.name = name;
      this.index = index;
      this.scope = scope;
      this.visitor = visitor;
    }
    getConstCount() {
      return this.visitor.getConstCount();
    }
    getVarCount() {
      return this.visitor.getVarCount();
    }
  };
  var TemplateDefinitionBuilder = class _TemplateDefinitionBuilder {
    constructor(constantPool, parentBindingScope, level = 0, contextName, i18nContext, templateIndex, templateName, _namespace, relativeContextFilePath, i18nUseExternalIds, deferBlocks, elementLocations, allDeferrableDepsFn, _constants = createComponentDefConsts()) {
      this.constantPool = constantPool;
      this.level = level;
      this.contextName = contextName;
      this.i18nContext = i18nContext;
      this.templateIndex = templateIndex;
      this.templateName = templateName;
      this._namespace = _namespace;
      this.i18nUseExternalIds = i18nUseExternalIds;
      this.deferBlocks = deferBlocks;
      this.elementLocations = elementLocations;
      this.allDeferrableDepsFn = allDeferrableDepsFn;
      this._constants = _constants;
      this._dataIndex = 0;
      this._bindingContext = 0;
      this._prefixCode = [];
      this._creationCodeFns = [];
      this._updateCodeFns = [];
      this._currentIndex = 0;
      this._tempVariables = [];
      this._controlFlowTempVariable = null;
      this._nestedTemplateFns = [];
      this.i18n = null;
      this._pureFunctionSlots = 0;
      this._bindingSlots = 0;
      this._ngContentReservedSlots = [];
      this._ngContentSelectorsOffset = 0;
      this._implicitReceiverExpr = null;
      this.visitReference = invalid;
      this.visitVariable = invalid;
      this.visitTextAttribute = invalid;
      this.visitBoundAttribute = invalid;
      this.visitBoundEvent = invalid;
      this.visitDeferredTrigger = invalid;
      this.visitDeferredBlockError = invalid;
      this.visitDeferredBlockLoading = invalid;
      this.visitDeferredBlockPlaceholder = invalid;
      this.visitIfBlockBranch = invalid;
      this.visitSwitchBlockCase = invalid;
      this.visitForLoopBlockEmpty = invalid;
      this.visitUnknownBlock = invalid;
      this._bindingScope = parentBindingScope.nestedScope(level);
      this.fileBasedI18nSuffix = relativeContextFilePath.replace(/[^A-Za-z0-9]/g, "_") + "_";
      this._valueConverter = new ValueConverter(constantPool, () => this.allocateDataSlot(), (numSlots) => this.allocatePureFunctionSlots(numSlots), (name, localName, slot, value) => {
        this._bindingScope.set(this.level, localName, value);
        this.creationInstruction(null, Identifiers.pipe, [literal(slot), literal(name)]);
      });
    }
    buildTemplateFunction(nodes, variables, ngContentSelectorsOffset = 0, i18n2, variableAliases) {
      this._ngContentSelectorsOffset = ngContentSelectorsOffset;
      if (this._namespace !== Identifiers.namespaceHTML) {
        this.creationInstruction(null, this._namespace);
      }
      variables.forEach((v) => {
        const alias = variableAliases?.[v.name];
        this.registerContextVariables(v.name, v.value);
        if (alias) {
          this.registerContextVariables(alias, v.value);
        }
      });
      const initI18nContext = this.i18nContext || isI18nRootNode(i18n2) && !isSingleI18nIcu(i18n2) && !(isSingleElementTemplate(nodes) && nodes[0].i18n === i18n2);
      const selfClosingI18nInstruction = hasTextChildrenOnly(nodes);
      if (initI18nContext) {
        this.i18nStart(null, i18n2, selfClosingI18nInstruction);
      }
      visitAll$1(this, nodes);
      this._pureFunctionSlots += this._bindingSlots;
      this._valueConverter.updatePipeSlotOffsets(this._bindingSlots);
      this._nestedTemplateFns.forEach((buildTemplateFn) => buildTemplateFn());
      if (this.level === 0 && this._ngContentReservedSlots.length) {
        const parameters = [];
        if (this._ngContentReservedSlots.length > 1 || this._ngContentReservedSlots[0] !== "*") {
          const r3ReservedSlots = this._ngContentReservedSlots.map((s) => s !== "*" ? parseSelectorToR3Selector(s) : s);
          parameters.push(this.constantPool.getConstLiteral(asLiteral(r3ReservedSlots), true));
        }
        this.creationInstruction(
          null,
          Identifiers.projectionDef,
          parameters,
          /* prepend */
          true
        );
      }
      if (initI18nContext) {
        this.i18nEnd(null, selfClosingI18nInstruction);
      }
      const creationStatements = getInstructionStatements(this._creationCodeFns);
      const updateStatements = getInstructionStatements(this._updateCodeFns);
      const creationVariables = this._bindingScope.viewSnapshotStatements();
      const updateVariables = this._bindingScope.variableDeclarations().concat(this._tempVariables);
      const creationBlock = creationStatements.length > 0 ? [renderFlagCheckIfStmt(1, creationVariables.concat(creationStatements))] : [];
      const updateBlock = updateStatements.length > 0 ? [renderFlagCheckIfStmt(2, updateVariables.concat(updateStatements))] : [];
      return fn(
        // i.e. (rf: RenderFlags, ctx: any)
        [new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)],
        [
          // Temporary variable declarations for query refresh (i.e. let _t: any;)
          ...this._prefixCode,
          // Creating mode (i.e. if (rf & RenderFlags.Create) { ... })
          ...creationBlock,
          // Binding and refresh mode (i.e. if (rf & RenderFlags.Update) {...})
          ...updateBlock
        ],
        INFERRED_TYPE,
        null,
        this.templateName
      );
    }
    // LocalResolver
    getLocal(name) {
      return this._bindingScope.get(name);
    }
    // LocalResolver
    notifyImplicitReceiverUse() {
      this._bindingScope.notifyImplicitReceiverUse();
    }
    // LocalResolver
    maybeRestoreView() {
      this._bindingScope.maybeRestoreView();
    }
    i18nTranslate(message, params = {}, ref, transformFn) {
      const _ref = ref || this.i18nGenerateMainBlockVar();
      const closureVar = this.i18nGenerateClosureVar(message.id);
      const statements = getTranslationDeclStmts(message, _ref, closureVar, params, transformFn);
      this._constants.prepareStatements.push(...statements);
      return _ref;
    }
    registerContextVariables(name, value) {
      const scopedName = this._bindingScope.freshReferenceName();
      const retrievalLevel = this.level;
      const isDirect = value === DIRECT_CONTEXT_REFERENCE;
      const lhs = variable(name + scopedName);
      this._bindingScope.set(retrievalLevel, name, (scope) => {
        return isDirect && scope.bindingLevel === retrievalLevel && !scope.isListenerScope() ? variable(CONTEXT_NAME) : lhs;
      }, 1, (scope, relativeLevel) => {
        let rhs;
        if (scope.bindingLevel === retrievalLevel) {
          if (scope.isListenerScope() && scope.hasRestoreViewVariable()) {
            rhs = variable(RESTORED_VIEW_CONTEXT_NAME);
            scope.notifyRestoredViewContextUse();
          } else if (isDirect) {
            return [];
          } else {
            rhs = variable(CONTEXT_NAME);
          }
        } else {
          const sharedCtxVar = scope.getSharedContextName(retrievalLevel);
          rhs = sharedCtxVar ? sharedCtxVar : generateNextContextExpr(relativeLevel);
        }
        return [
          // e.g. const $items$ = x(2) for direct context references and
          // const $item$ = x(2).$implicit for indirect ones.
          lhs.set(isDirect ? rhs : rhs.prop(value || IMPLICIT_REFERENCE)).toConstDecl()
        ];
      });
    }
    i18nAppendBindings(expressions) {
      if (expressions.length > 0) {
        expressions.forEach((expression) => this.i18n.appendBinding(expression));
      }
    }
    i18nBindProps(props) {
      const bound = {};
      Object.keys(props).forEach((key) => {
        const prop = props[key];
        if (prop instanceof Text$3) {
          bound[key] = literal(prop.value);
        } else {
          const value = prop.value.visit(this._valueConverter);
          this.allocateBindingSlots(value);
          if (value instanceof Interpolation$1) {
            const { strings, expressions } = value;
            const { id, bindings } = this.i18n;
            const label = assembleI18nBoundString(strings, bindings.size, id);
            this.i18nAppendBindings(expressions);
            bound[key] = literal(label);
          }
        }
      });
      return bound;
    }
    // Generates top level vars for i18n blocks (i.e. `i18n_N`).
    i18nGenerateMainBlockVar() {
      return variable(this.constantPool.uniqueName(TRANSLATION_VAR_PREFIX$1));
    }
    // Generates vars with Closure-specific names for i18n blocks (i.e. `MSG_XXX`).
    i18nGenerateClosureVar(messageId) {
      let name;
      const suffix = this.fileBasedI18nSuffix.toUpperCase();
      if (this.i18nUseExternalIds) {
        const prefix = getTranslationConstPrefix(`EXTERNAL_`);
        const uniqueSuffix = this.constantPool.uniqueName(suffix);
        name = `${prefix}${sanitizeIdentifier(messageId)}$$${uniqueSuffix}`;
      } else {
        const prefix = getTranslationConstPrefix(suffix);
        name = this.constantPool.uniqueName(prefix);
      }
      return variable(name);
    }
    i18nUpdateRef(context2) {
      const { icus, meta, isRoot, isResolved, isEmitted } = context2;
      if (isRoot && isResolved && !isEmitted && !isSingleI18nIcu(meta)) {
        context2.isEmitted = true;
        const placeholders = context2.getSerializedPlaceholders();
        let icuMapping = {};
        let params = placeholders.size ? placeholdersToParams(placeholders) : {};
        if (icus.size) {
          icus.forEach((refs, key) => {
            if (refs.length === 1) {
              params[key] = refs[0];
            } else {
              const placeholder = wrapI18nPlaceholder(`${I18N_ICU_MAPPING_PREFIX$1}${key}`);
              params[key] = literal(placeholder);
              icuMapping[key] = literalArr(refs);
            }
          });
        }
        const needsPostprocessing = Array.from(placeholders.values()).some((value) => value.length > 1) || Object.keys(icuMapping).length;
        let transformFn;
        if (needsPostprocessing) {
          transformFn = (raw) => {
            const args = [raw];
            if (Object.keys(icuMapping).length) {
              args.push(mapLiteral(icuMapping, true));
            }
            return invokeInstruction(null, Identifiers.i18nPostprocess, args);
          };
        }
        this.i18nTranslate(meta, params, context2.ref, transformFn);
      }
    }
    i18nStart(span = null, meta, selfClosing) {
      const index = this.allocateDataSlot();
      this.i18n = this.i18nContext ? this.i18nContext.forkChildContext(index, this.templateIndex, meta) : new I18nContext(index, this.i18nGenerateMainBlockVar(), 0, this.templateIndex, meta);
      const { id, ref } = this.i18n;
      const params = [literal(index), this.addToConsts(ref)];
      if (id > 0) {
        params.push(literal(id));
      }
      this.creationInstruction(span, selfClosing ? Identifiers.i18n : Identifiers.i18nStart, params);
    }
    i18nEnd(span = null, selfClosing) {
      if (!this.i18n) {
        throw new Error("i18nEnd is executed with no i18n context present");
      }
      if (this.i18nContext) {
        this.i18nContext.reconcileChildContext(this.i18n);
        this.i18nUpdateRef(this.i18nContext);
      } else {
        this.i18nUpdateRef(this.i18n);
      }
      const { index, bindings } = this.i18n;
      if (bindings.size) {
        for (const binding of bindings) {
          this.updateInstructionWithAdvance(this.getConstCount() - 1, span, Identifiers.i18nExp, () => this.convertPropertyBinding(binding));
        }
        this.updateInstruction(span, Identifiers.i18nApply, [literal(index)]);
      }
      if (!selfClosing) {
        this.creationInstruction(span, Identifiers.i18nEnd);
      }
      this.i18n = null;
    }
    i18nAttributesInstruction(nodeIndex, attrs, sourceSpan) {
      let hasBindings = false;
      const i18nAttrArgs = [];
      attrs.forEach((attr) => {
        const message = attr.i18n;
        const converted = attr.value.visit(this._valueConverter);
        this.allocateBindingSlots(converted);
        if (converted instanceof Interpolation$1) {
          const placeholders = assembleBoundTextPlaceholders(message);
          const params = placeholdersToParams(placeholders);
          i18nAttrArgs.push(literal(attr.name), this.i18nTranslate(message, params));
          converted.expressions.forEach((expression) => {
            hasBindings = true;
            this.updateInstructionWithAdvance(nodeIndex, sourceSpan, Identifiers.i18nExp, () => this.convertPropertyBinding(expression));
          });
        }
      });
      if (i18nAttrArgs.length > 0) {
        const index = literal(this.allocateDataSlot());
        const constIndex = this.addToConsts(literalArr(i18nAttrArgs));
        this.creationInstruction(sourceSpan, Identifiers.i18nAttributes, [index, constIndex]);
        if (hasBindings) {
          this.updateInstruction(sourceSpan, Identifiers.i18nApply, [index]);
        }
      }
    }
    getNamespaceInstruction(namespaceKey) {
      switch (namespaceKey) {
        case "math":
          return Identifiers.namespaceMathML;
        case "svg":
          return Identifiers.namespaceSVG;
        default:
          return Identifiers.namespaceHTML;
      }
    }
    addNamespaceInstruction(nsInstruction, element2) {
      this._namespace = nsInstruction;
      this.creationInstruction(element2.startSourceSpan, nsInstruction);
    }
    /**
     * Adds an update instruction for an interpolated property or attribute, such as
     * `prop="{{value}}"` or `attr.title="{{value}}"`
     */
    interpolatedUpdateInstruction(instruction, elementIndex, attrName, input2, value, params) {
      this.updateInstructionWithAdvance(elementIndex, input2.sourceSpan, instruction, () => [literal(attrName), ...this.getUpdateInstructionArguments(value), ...params]);
    }
    visitContent(ngContent) {
      const slot = this.allocateDataSlot();
      const projectionSlotIdx = this._ngContentSelectorsOffset + this._ngContentReservedSlots.length;
      const parameters = [literal(slot)];
      this._ngContentReservedSlots.push(ngContent.selector);
      const nonContentSelectAttributes = ngContent.attributes.filter((attr) => attr.name.toLowerCase() !== NG_CONTENT_SELECT_ATTR);
      const attributes = this.getAttributeExpressions(ngContent.name, nonContentSelectAttributes, [], []);
      if (attributes.length > 0) {
        parameters.push(literal(projectionSlotIdx), literalArr(attributes));
      } else if (projectionSlotIdx !== 0) {
        parameters.push(literal(projectionSlotIdx));
      }
      this.creationInstruction(ngContent.sourceSpan, Identifiers.projection, parameters);
      if (this.i18n) {
        this.i18n.appendProjection(ngContent.i18n, slot);
      }
    }
    visitElement(element2) {
      const elementIndex = this.allocateDataSlot();
      const stylingBuilder = new StylingBuilder(null);
      this.elementLocations.set(element2, { index: elementIndex, level: this.level });
      let isNonBindableMode = false;
      const isI18nRootElement = isI18nRootNode(element2.i18n) && !isSingleI18nIcu(element2.i18n);
      const outputAttrs = [];
      const [namespaceKey, elementName] = splitNsName(element2.name);
      const isNgContainer$1 = isNgContainer(element2.name);
      for (const attr of element2.attributes) {
        const { name, value } = attr;
        if (name === NON_BINDABLE_ATTR) {
          isNonBindableMode = true;
        } else if (name === "style") {
          stylingBuilder.registerStyleAttr(value);
        } else if (name === "class") {
          stylingBuilder.registerClassAttr(value);
        } else {
          outputAttrs.push(attr);
        }
      }
      const parameters = [literal(elementIndex)];
      if (!isNgContainer$1) {
        parameters.push(literal(elementName));
      }
      const allOtherInputs = [];
      const boundI18nAttrs = [];
      element2.inputs.forEach((input2) => {
        const stylingInputWasSet = stylingBuilder.registerBoundInput(input2);
        if (!stylingInputWasSet) {
          if ((input2.type === 0 || input2.type === 5) && input2.i18n) {
            boundI18nAttrs.push(input2);
          } else {
            allOtherInputs.push(input2);
          }
        }
      });
      const attributes = this.getAttributeExpressions(element2.name, outputAttrs, allOtherInputs, element2.outputs, stylingBuilder, [], boundI18nAttrs);
      parameters.push(this.addAttrsToConsts(attributes));
      const refs = this.prepareRefsArray(element2.references);
      parameters.push(this.addToConsts(refs));
      const wasInNamespace = this._namespace;
      const currentNamespace = this.getNamespaceInstruction(namespaceKey);
      if (currentNamespace !== wasInNamespace) {
        this.addNamespaceInstruction(currentNamespace, element2);
      }
      if (this.i18n) {
        this.i18n.appendElement(element2.i18n, elementIndex);
      }
      const hasChildren = !isI18nRootElement && this.i18n ? !hasTextChildrenOnly(element2.children) : element2.children.length > 0;
      const createSelfClosingInstruction = !stylingBuilder.hasBindingsWithPipes && element2.outputs.length === 0 && boundI18nAttrs.length === 0 && !hasChildren;
      const createSelfClosingI18nInstruction = !createSelfClosingInstruction && hasTextChildrenOnly(element2.children);
      if (createSelfClosingInstruction) {
        this.creationInstruction(element2.sourceSpan, isNgContainer$1 ? Identifiers.elementContainer : Identifiers.element, trimTrailingNulls(parameters));
      } else {
        this.creationInstruction(element2.startSourceSpan, isNgContainer$1 ? Identifiers.elementContainerStart : Identifiers.elementStart, trimTrailingNulls(parameters));
        if (isNonBindableMode) {
          this.creationInstruction(element2.startSourceSpan, Identifiers.disableBindings);
        }
        if (boundI18nAttrs.length > 0) {
          this.i18nAttributesInstruction(elementIndex, boundI18nAttrs, element2.startSourceSpan ?? element2.sourceSpan);
        }
        if (element2.outputs.length > 0) {
          for (const outputAst of element2.outputs) {
            this.creationInstruction(outputAst.sourceSpan, outputAst.type === 2 ? Identifiers.twoWayListener : Identifiers.listener, this.prepareListenerParameter(element2.name, outputAst, elementIndex));
          }
        }
        if (isI18nRootElement) {
          this.i18nStart(element2.startSourceSpan, element2.i18n, createSelfClosingI18nInstruction);
        }
      }
      const stylingInstructions = stylingBuilder.buildUpdateLevelInstructions(this._valueConverter);
      const limit = stylingInstructions.length - 1;
      for (let i = 0; i <= limit; i++) {
        const instruction = stylingInstructions[i];
        this._bindingSlots += this.processStylingUpdateInstruction(elementIndex, instruction);
      }
      const emptyValueBindInstruction = literal(void 0);
      const propertyBindings = [];
      const attributeBindings = [];
      allOtherInputs.forEach((input2) => {
        const inputType = input2.type;
        if (inputType === 4) {
          const value = input2.value.visit(this._valueConverter);
          const hasValue = value instanceof LiteralPrimitive ? !!value.value : true;
          this.allocateBindingSlots(value);
          propertyBindings.push({
            span: input2.sourceSpan,
            reference: Identifiers.property,
            paramsOrFn: getBindingFunctionParams(() => hasValue ? this.convertPropertyBinding(value) : emptyValueBindInstruction, prepareSyntheticPropertyName(input2.name))
          });
        } else {
          if (input2.i18n)
            return;
          const value = input2.value.visit(this._valueConverter);
          if (value !== void 0) {
            const params = [];
            const [attrNamespace, attrName] = splitNsName(input2.name);
            const isAttributeBinding = inputType === 1;
            let sanitizationRef = resolveSanitizationFn(input2.securityContext, isAttributeBinding);
            if (!sanitizationRef) {
              if (isIframeElement(element2.name) && isIframeSecuritySensitiveAttr(input2.name)) {
                sanitizationRef = importExpr(Identifiers.validateIframeAttribute);
              }
            }
            if (sanitizationRef) {
              params.push(sanitizationRef);
            }
            if (attrNamespace) {
              const namespaceLiteral = literal(attrNamespace);
              if (sanitizationRef) {
                params.push(namespaceLiteral);
              } else {
                params.push(literal(null), namespaceLiteral);
              }
            }
            this.allocateBindingSlots(value);
            if (inputType === 0 || inputType === 5) {
              if (value instanceof Interpolation$1) {
                this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value), elementIndex, attrName, input2, value, params);
              } else {
                propertyBindings.push({
                  span: input2.sourceSpan,
                  reference: inputType === 5 ? Identifiers.twoWayProperty : Identifiers.property,
                  paramsOrFn: getBindingFunctionParams(() => this.convertPropertyBinding(value), attrName, params)
                });
              }
            } else if (inputType === 1) {
              if (value instanceof Interpolation$1 && getInterpolationArgsLength(value) > 1) {
                this.interpolatedUpdateInstruction(getAttributeInterpolationExpression(value), elementIndex, attrName, input2, value, params);
              } else {
                const boundValue = value instanceof Interpolation$1 ? value.expressions[0] : value;
                attributeBindings.push({
                  span: input2.sourceSpan,
                  paramsOrFn: getBindingFunctionParams(() => this.convertPropertyBinding(boundValue), attrName, params)
                });
              }
            } else {
              this.updateInstructionWithAdvance(elementIndex, input2.sourceSpan, Identifiers.classProp, () => {
                return [
                  literal(elementIndex),
                  literal(attrName),
                  this.convertPropertyBinding(value),
                  ...params
                ];
              });
            }
          }
        }
      });
      for (const propertyBinding of propertyBindings) {
        this.updateInstructionWithAdvance(elementIndex, propertyBinding.span, propertyBinding.reference, propertyBinding.paramsOrFn);
      }
      for (const attributeBinding of attributeBindings) {
        this.updateInstructionWithAdvance(elementIndex, attributeBinding.span, Identifiers.attribute, attributeBinding.paramsOrFn);
      }
      visitAll$1(this, element2.children);
      if (!isI18nRootElement && this.i18n) {
        this.i18n.appendElement(element2.i18n, elementIndex, true);
      }
      if (!createSelfClosingInstruction) {
        const span = element2.endSourceSpan ?? element2.sourceSpan;
        if (isI18nRootElement) {
          this.i18nEnd(span, createSelfClosingI18nInstruction);
        }
        if (isNonBindableMode) {
          this.creationInstruction(span, Identifiers.enableBindings);
        }
        this.creationInstruction(span, isNgContainer$1 ? Identifiers.elementContainerEnd : Identifiers.elementEnd);
      }
    }
    prepareEmbeddedTemplateFn(children, contextNameSuffix, variables = [], i18nMeta, variableAliases) {
      const index = this.allocateDataSlot();
      if (this.i18n && i18nMeta) {
        if (i18nMeta instanceof BlockPlaceholder) {
          this.i18n.appendBlock(i18nMeta, index);
        } else {
          this.i18n.appendTemplate(i18nMeta, index);
        }
      }
      const contextName = `${this.contextName}${contextNameSuffix}_${index}`;
      const name = this.constantPool.uniqueName(
        `${contextName}_Template`,
        /** alwaysIncludeSuffix */
        false
      );
      const visitor = new _TemplateDefinitionBuilder(this.constantPool, this._bindingScope, this.level + 1, contextName, this.i18n, index, name, this._namespace, this.fileBasedI18nSuffix, this.i18nUseExternalIds, this.deferBlocks, this.elementLocations, this.allDeferrableDepsFn, this._constants);
      this._nestedTemplateFns.push(() => {
        const templateFunctionExpr = visitor.buildTemplateFunction(children, variables, this._ngContentReservedSlots.length + this._ngContentSelectorsOffset, i18nMeta, variableAliases);
        this.constantPool.statements.push(templateFunctionExpr.toDeclStmt(name));
        if (visitor._ngContentReservedSlots.length) {
          this._ngContentReservedSlots.push(...visitor._ngContentReservedSlots);
        }
      });
      return new TemplateData(name, index, visitor._bindingScope, visitor);
    }
    createEmbeddedTemplateFn(tagName, children, contextNameSuffix, sourceSpan, variables = [], attrsExprs, references, i18n2) {
      const data = this.prepareEmbeddedTemplateFn(children, contextNameSuffix, variables, i18n2);
      const parameters = [
        literal(data.index),
        variable(data.name),
        literal(tagName),
        this.addAttrsToConsts(attrsExprs || null)
      ];
      if (references && references.length > 0) {
        const refs = this.prepareRefsArray(references);
        parameters.push(this.addToConsts(refs));
        parameters.push(importExpr(Identifiers.templateRefExtractor));
      }
      this.creationInstruction(sourceSpan, Identifiers.templateCreate, () => {
        parameters.splice(2, 0, literal(data.getConstCount()), literal(data.getVarCount()));
        return trimTrailingNulls(parameters);
      });
      return data.index;
    }
    visitTemplate(template2) {
      const tagNameWithoutNamespace = template2.tagName ? splitNsName(template2.tagName)[1] : template2.tagName;
      const contextNameSuffix = template2.tagName ? "_" + sanitizeIdentifier(template2.tagName) : "";
      const attrsExprs = this.getAttributeExpressions(NG_TEMPLATE_TAG_NAME, template2.attributes, template2.inputs, template2.outputs, void 0, template2.templateAttrs);
      const templateIndex = this.createEmbeddedTemplateFn(tagNameWithoutNamespace, template2.children, contextNameSuffix, template2.sourceSpan, template2.variables, attrsExprs, template2.references, template2.i18n);
      this.templatePropertyBindings(templateIndex, template2.templateAttrs);
      if (tagNameWithoutNamespace === NG_TEMPLATE_TAG_NAME) {
        const [i18nInputs, inputs] = partitionArray(template2.inputs, hasI18nMeta);
        if (i18nInputs.length > 0) {
          this.i18nAttributesInstruction(templateIndex, i18nInputs, template2.startSourceSpan ?? template2.sourceSpan);
        }
        if (inputs.length > 0) {
          this.templatePropertyBindings(templateIndex, inputs);
        }
        for (const outputAst of template2.outputs) {
          this.creationInstruction(outputAst.sourceSpan, outputAst.type === 2 ? Identifiers.twoWayListener : Identifiers.listener, this.prepareListenerParameter("ng_template", outputAst, templateIndex));
        }
      }
    }
    visitBoundText(text2) {
      if (this.i18n) {
        const value2 = text2.value.visit(this._valueConverter);
        this.allocateBindingSlots(value2);
        if (value2 instanceof Interpolation$1) {
          this.i18n.appendBoundText(text2.i18n);
          this.i18nAppendBindings(value2.expressions);
        }
        return;
      }
      const nodeIndex = this.allocateDataSlot();
      this.creationInstruction(text2.sourceSpan, Identifiers.text, [literal(nodeIndex)]);
      const value = text2.value.visit(this._valueConverter);
      this.allocateBindingSlots(value);
      if (value instanceof Interpolation$1) {
        this.updateInstructionWithAdvance(nodeIndex, text2.sourceSpan, getTextInterpolationExpression(value), () => this.getUpdateInstructionArguments(value));
      } else {
        error("Text nodes should be interpolated and never bound directly.");
      }
    }
    visitText(text2) {
      if (!this.i18n) {
        this.creationInstruction(text2.sourceSpan, Identifiers.text, [literal(this.allocateDataSlot()), literal(text2.value)]);
      }
    }
    visitIcu(icu) {
      let initWasInvoked = false;
      if (!this.i18n) {
        initWasInvoked = true;
        this.i18nStart(null, icu.i18n, true);
      }
      const i18n2 = this.i18n;
      const vars = this.i18nBindProps(icu.vars);
      const placeholders = this.i18nBindProps(icu.placeholders);
      const message = icu.i18n;
      const transformFn = (raw) => {
        const params = Object.fromEntries(Object.entries({ ...vars, ...placeholders }).sort());
        const formatted = formatI18nPlaceholderNamesInMap(
          params,
          /* useCamelCase */
          false
        );
        return invokeInstruction(null, Identifiers.i18nPostprocess, [raw, mapLiteral(formatted, true)]);
      };
      if (isSingleI18nIcu(i18n2.meta)) {
        this.i18nTranslate(
          message,
          /* placeholders */
          {},
          i18n2.ref,
          transformFn
        );
      } else {
        const ref = this.i18nTranslate(
          message,
          /* placeholders */
          {},
          /* ref */
          void 0,
          transformFn
        );
        i18n2.appendIcu(icuFromI18nMessage(message).name, ref);
      }
      if (initWasInvoked) {
        this.i18nEnd(null, true);
      }
      return null;
    }
    visitIfBlock(block) {
      this.allocateBindingSlots(null);
      const branchData = block.branches.map((branch, branchIndex) => {
        const { expression, expressionAlias, children, sourceSpan } = branch;
        const variables = expressionAlias !== null ? [new Variable(expressionAlias.name, DIRECT_CONTEXT_REFERENCE, expressionAlias.sourceSpan, expressionAlias.keySpan)] : void 0;
        let tagName = null;
        let attrsExprs;
        if (branchIndex === 0) {
          const inferredData = this.inferProjectionDataFromInsertionPoint(branch);
          tagName = inferredData.tagName;
          attrsExprs = inferredData.attrsExprs;
        }
        const templateIndex = this.createEmbeddedTemplateFn(tagName, children, "_Conditional", sourceSpan, variables, attrsExprs, void 0, branch.i18n);
        const processedExpression = expression === null ? null : expression.visit(this._valueConverter);
        return { index: templateIndex, expression: processedExpression, alias: expressionAlias };
      });
      const containerIndex = branchData[0].index;
      const paramsCallback = () => {
        let contextVariable = null;
        const generateBranch = (branchIndex) => {
          if (branchIndex > branchData.length - 1) {
            return literal(-1);
          }
          const { index, expression, alias } = branchData[branchIndex];
          if (expression === null) {
            return literal(index);
          }
          let comparisonTarget;
          if (alias) {
            contextVariable = this.allocateControlFlowTempVariable();
            comparisonTarget = contextVariable.set(this.convertPropertyBinding(expression));
          } else {
            comparisonTarget = this.convertPropertyBinding(expression);
          }
          return comparisonTarget.conditional(literal(index), generateBranch(branchIndex + 1));
        };
        const params = [literal(containerIndex), generateBranch(0)];
        if (contextVariable !== null) {
          params.push(contextVariable);
        }
        return params;
      };
      this.updateInstructionWithAdvance(containerIndex, block.branches[0].sourceSpan, Identifiers.conditional, paramsCallback);
    }
    visitSwitchBlock(block) {
      if (block.cases.length === 0) {
        return;
      }
      const caseData = block.cases.map((currentCase) => {
        const index = this.createEmbeddedTemplateFn(null, currentCase.children, "_Case", currentCase.sourceSpan, void 0, void 0, void 0, currentCase.i18n);
        const expression = currentCase.expression === null ? null : currentCase.expression.visit(this._valueConverter);
        return { index, expression };
      });
      const containerIndex = caseData[0].index;
      const blockExpression = block.expression.visit(this._valueConverter);
      this.allocateBindingSlots(null);
      this.updateInstructionWithAdvance(containerIndex, block.sourceSpan, Identifiers.conditional, () => {
        const generateCases = (caseIndex) => {
          if (caseIndex > caseData.length - 1) {
            return literal(-1);
          }
          const { index, expression } = caseData[caseIndex];
          if (expression === null) {
            return literal(index);
          }
          const comparisonTarget = caseIndex === 0 ? this.allocateControlFlowTempVariable().set(this.convertPropertyBinding(blockExpression)) : this.allocateControlFlowTempVariable();
          return comparisonTarget.identical(this.convertPropertyBinding(expression)).conditional(literal(index), generateCases(caseIndex + 1));
        };
        return [literal(containerIndex), generateCases(0)];
      });
    }
    visitDeferredBlock(deferred) {
      const { loading, placeholder, error: error2, triggers, prefetchTriggers } = deferred;
      const metadata = this.deferBlocks.get(deferred);
      if (!metadata) {
        throw new Error("Could not resolve `defer` block metadata. Block may need to be analyzed.");
      }
      const primaryTemplateIndex = this.createEmbeddedTemplateFn(null, deferred.children, "_Defer", deferred.sourceSpan, void 0, void 0, void 0, deferred.i18n);
      const loadingIndex = loading ? this.createEmbeddedTemplateFn(null, loading.children, "_DeferLoading", loading.sourceSpan, void 0, void 0, void 0, loading.i18n) : null;
      const loadingConsts = loading ? trimTrailingNulls([literal(loading.minimumTime), literal(loading.afterTime)]) : null;
      const placeholderIndex = placeholder ? this.createEmbeddedTemplateFn(null, placeholder.children, "_DeferPlaceholder", placeholder.sourceSpan, void 0, void 0, void 0, placeholder.i18n) : null;
      const placeholderConsts = placeholder && placeholder.minimumTime !== null ? (
        // TODO(crisbeto): potentially pass the time directly instead of storing it in the `consts`
        // since the placeholder block can only have one parameter?
        literalArr([literal(placeholder.minimumTime)])
      ) : null;
      const errorIndex = error2 ? this.createEmbeddedTemplateFn(null, error2.children, "_DeferError", error2.sourceSpan, void 0, void 0, void 0, error2.i18n) : null;
      const deferredIndex = this.allocateDataSlot();
      const depsFnName = `${this.contextName}_Defer_${deferredIndex}_DepsFn`;
      this.creationInstruction(deferred.sourceSpan, Identifiers.defer, trimTrailingNulls([
        literal(deferredIndex),
        literal(primaryTemplateIndex),
        this.allDeferrableDepsFn ?? this.createDeferredDepsFunction(depsFnName, metadata),
        literal(loadingIndex),
        literal(placeholderIndex),
        literal(errorIndex),
        loadingConsts?.length ? this.addToConsts(literalArr(loadingConsts)) : TYPED_NULL_EXPR,
        placeholderConsts ? this.addToConsts(placeholderConsts) : TYPED_NULL_EXPR,
        loadingConsts?.length || placeholderConsts ? importExpr(Identifiers.deferEnableTimerScheduling) : TYPED_NULL_EXPR
      ]));
      this.allocateDataSlot();
      this.createDeferTriggerInstructions(deferredIndex, triggers, metadata, false);
      this.createDeferTriggerInstructions(deferredIndex, prefetchTriggers, metadata, true);
    }
    createDeferredDepsFunction(name, metadata) {
      if (metadata.deps.length === 0) {
        return TYPED_NULL_EXPR;
      }
      const dependencyExp = [];
      for (const deferredDep of metadata.deps) {
        if (deferredDep.isDeferrable) {
          const innerFn = arrowFn(
            [new FnParam("m", DYNAMIC_TYPE)],
            // Default imports are always accessed through the `default` property.
            variable("m").prop(deferredDep.isDefaultImport ? "default" : deferredDep.symbolName)
          );
          const importExpr2 = new DynamicImportExpr(deferredDep.importPath).prop("then").callFn([innerFn]);
          dependencyExp.push(importExpr2);
        } else {
          dependencyExp.push(deferredDep.type);
        }
      }
      const depsFnExpr = arrowFn([], literalArr(dependencyExp));
      this.constantPool.statements.push(depsFnExpr.toDeclStmt(name, StmtModifier.Final));
      return variable(name);
    }
    createDeferTriggerInstructions(deferredIndex, triggers, metadata, prefetch) {
      const { when, idle, immediate, timer, hover, interaction, viewport } = triggers;
      if (when) {
        const value = when.value.visit(this._valueConverter);
        this.allocateBindingSlots(value);
        this.updateInstructionWithAdvance(deferredIndex, when.sourceSpan, prefetch ? Identifiers.deferPrefetchWhen : Identifiers.deferWhen, () => this.convertPropertyBinding(value));
      }
      if (idle || !prefetch && Object.keys(triggers).length === 0) {
        this.creationInstruction(idle?.sourceSpan || null, prefetch ? Identifiers.deferPrefetchOnIdle : Identifiers.deferOnIdle);
      }
      if (immediate) {
        this.creationInstruction(immediate.sourceSpan, prefetch ? Identifiers.deferPrefetchOnImmediate : Identifiers.deferOnImmediate);
      }
      if (timer) {
        this.creationInstruction(timer.sourceSpan, prefetch ? Identifiers.deferPrefetchOnTimer : Identifiers.deferOnTimer, [literal(timer.delay)]);
      }
      if (hover) {
        this.domNodeBasedTrigger("hover", hover, metadata, prefetch ? Identifiers.deferPrefetchOnHover : Identifiers.deferOnHover);
      }
      if (interaction) {
        this.domNodeBasedTrigger("interaction", interaction, metadata, prefetch ? Identifiers.deferPrefetchOnInteraction : Identifiers.deferOnInteraction);
      }
      if (viewport) {
        this.domNodeBasedTrigger("viewport", viewport, metadata, prefetch ? Identifiers.deferPrefetchOnViewport : Identifiers.deferOnViewport);
      }
    }
    domNodeBasedTrigger(name, trigger, metadata, instructionRef) {
      const triggerEl = metadata.triggerElements.get(trigger);
      if (!triggerEl) {
        return;
      }
      this.creationInstruction(trigger.sourceSpan, instructionRef, () => {
        const location2 = this.elementLocations.get(triggerEl);
        if (!location2) {
          throw new Error(`Could not determine location of reference passed into '${name}' trigger. Template may not have been fully analyzed.`);
        }
        const depth = Math.max(this.level - location2.level, -1);
        const params = [literal(location2.index)];
        if (depth !== 0) {
          params.push(literal(depth));
        }
        return params;
      });
    }
    /**
     * Infers the data used for content projection (tag name and attributes) from the content of a
     * node.
     * @param node Node for which to infer the projection data.
     */
    inferProjectionDataFromInsertionPoint(node) {
      let root = null;
      let tagName = null;
      let attrsExprs;
      for (const child of node.children) {
        if (child instanceof Comment$1) {
          continue;
        }
        if (root !== null) {
          root = null;
          break;
        }
        if (child instanceof Element$1 || child instanceof Template && child.tagName !== null) {
          root = child;
        }
      }
      if (root !== null) {
        const name = root instanceof Element$1 ? root.name : root.tagName;
        tagName = name === NG_TEMPLATE_TAG_NAME ? null : name;
        attrsExprs = this.getAttributeExpressions(NG_TEMPLATE_TAG_NAME, root.attributes, root.inputs, []);
      }
      return { tagName, attrsExprs };
    }
    allocateDataSlot() {
      return this._dataIndex++;
    }
    visitForLoopBlock(block) {
      const blockIndex = this.allocateDataSlot();
      const { tagName, attrsExprs } = this.inferProjectionDataFromInsertionPoint(block);
      const primaryData = this.prepareEmbeddedTemplateFn(block.children, "_For", [block.item, block.contextVariables.$index, block.contextVariables.$count], block.i18n, {
        // We need to provide level-specific versions of `$index` and `$count`, because
        // they're used when deriving the remaining variables (`$odd`, `$even` etc.) while at the
        // same time being available implicitly. Without these aliases, we wouldn't be able to
        // access the `$index` of a parent loop from inside of a nested loop.
        [block.contextVariables.$index.name]: this.getLevelSpecificVariableName("$index", this.level + 1),
        [block.contextVariables.$count.name]: this.getLevelSpecificVariableName("$count", this.level + 1)
      });
      const { expression: trackByExpression, usesComponentInstance: trackByUsesComponentInstance } = this.createTrackByFunction(block);
      let emptyData = null;
      let emptyTagName = null;
      let emptyAttrsExprs;
      if (block.empty !== null) {
        const emptyInferred = this.inferProjectionDataFromInsertionPoint(block.empty);
        emptyTagName = emptyInferred.tagName;
        emptyAttrsExprs = emptyInferred.attrsExprs;
        emptyData = this.prepareEmbeddedTemplateFn(block.empty.children, "_ForEmpty", void 0, block.empty.i18n);
        this.allocateBindingSlots(null);
      }
      this.registerComputedLoopVariables(block, primaryData.scope);
      this.creationInstruction(block.sourceSpan, Identifiers.repeaterCreate, () => {
        const params = [
          literal(blockIndex),
          variable(primaryData.name),
          literal(primaryData.getConstCount()),
          literal(primaryData.getVarCount()),
          literal(tagName),
          this.addAttrsToConsts(attrsExprs || null),
          trackByExpression
        ];
        if (emptyData !== null) {
          params.push(literal(trackByUsesComponentInstance), variable(emptyData.name), literal(emptyData.getConstCount()), literal(emptyData.getVarCount()), literal(emptyTagName), this.addAttrsToConsts(emptyAttrsExprs || null));
        } else if (trackByUsesComponentInstance) {
          params.push(literal(trackByUsesComponentInstance));
        }
        return trimTrailingNulls(params);
      });
      const value = block.expression.visit(this._valueConverter);
      this.updateInstructionWithAdvance(blockIndex, block.sourceSpan, Identifiers.repeater, () => [this.convertPropertyBinding(value)]);
    }
    registerComputedLoopVariables(block, bindingScope) {
      const level = bindingScope.bindingLevel;
      bindingScope.set(level, block.contextVariables.$odd.name, (scope, retrievalLevel) => {
        return this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, "$index").modulo(literal(2)).notIdentical(literal(0));
      });
      bindingScope.set(level, block.contextVariables.$even.name, (scope, retrievalLevel) => {
        return this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, "$index").modulo(literal(2)).identical(literal(0));
      });
      bindingScope.set(level, block.contextVariables.$first.name, (scope, retrievalLevel) => {
        return this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, "$index").identical(literal(0));
      });
      bindingScope.set(level, block.contextVariables.$last.name, (scope, retrievalLevel) => {
        const index = this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, "$index");
        const count = this.getLevelSpecificForLoopVariable(block, scope, retrievalLevel, "$count");
        return index.identical(count.minus(literal(1)));
      });
    }
    getLevelSpecificVariableName(name, level) {
      return `\u0275${name}_${level}`;
    }
    /**
     * Gets the name of a for loop variable at a specific binding level. This allows us to look
     * up implicitly shadowed variables like `$index` and `$count` at a specific level.
     */
    getLevelSpecificForLoopVariable(block, scope, retrievalLevel, name) {
      const scopeName = scope.bindingLevel === retrievalLevel ? block.contextVariables[name].name : this.getLevelSpecificVariableName(name, retrievalLevel);
      return scope.get(scopeName);
    }
    optimizeTrackByFunction(block) {
      const indexLocalName = block.contextVariables.$index.name;
      const itemName = block.item.name;
      const ast = block.trackBy.ast;
      if (ast instanceof PropertyRead && ast.receiver instanceof ImplicitReceiver && ast.name === indexLocalName) {
        return { expression: importExpr(Identifiers.repeaterTrackByIndex), usesComponentInstance: false };
      }
      if (ast instanceof PropertyRead && ast.receiver instanceof ImplicitReceiver && ast.name === itemName) {
        return { expression: importExpr(Identifiers.repeaterTrackByIdentity), usesComponentInstance: false };
      }
      if (ast instanceof Call && ast.receiver instanceof PropertyRead && ast.receiver.receiver instanceof ImplicitReceiver && ast.args.length === 2) {
        const firstIsIndex = ast.args[0] instanceof PropertyRead && ast.args[0].receiver instanceof ImplicitReceiver && ast.args[0].name === indexLocalName;
        const secondIsItem = ast.args[1] instanceof PropertyRead && ast.args[1].receiver instanceof ImplicitReceiver && ast.args[1].name === itemName;
        if (firstIsIndex && secondIsItem) {
          const receiver = this.level === 0 ? variable(CONTEXT_NAME) : new ExternalExpr(Identifiers.componentInstance).callFn([]);
          return { expression: receiver.prop(ast.receiver.name), usesComponentInstance: false };
        }
      }
      return null;
    }
    createTrackByFunction(block) {
      const optimizedFn = this.optimizeTrackByFunction(block);
      if (optimizedFn !== null) {
        return optimizedFn;
      }
      const contextVars = block.contextVariables;
      const scope = new TrackByBindingScope(this._bindingScope, {
        // Alias `$index` and the item name to `$index` and `$item` respectively.
        // This allows us to reuse pure functions that may have different item names,
        // but are otherwise identical.
        [contextVars.$index.name]: "$index",
        [block.item.name]: "$item",
        // Accessing these variables in a tracking function will result in a template diagnostic.
        // We define them as globals so that their accesses are preserved verbatim instead of being
        // rewritten to the actual accesses.
        [contextVars.$count.name]: contextVars.$count.name,
        [contextVars.$first.name]: contextVars.$first.name,
        [contextVars.$last.name]: contextVars.$last.name,
        [contextVars.$even.name]: contextVars.$even.name,
        [contextVars.$odd.name]: contextVars.$odd.name
      });
      const params = [new FnParam("$index"), new FnParam("$item")];
      const stmts = convertPureComponentScopeFunction(block.trackBy.ast, scope, variable(CONTEXT_NAME), "track");
      const usesComponentInstance = scope.getComponentAccessCount() > 0;
      let fn$1;
      if (!usesComponentInstance && stmts.length === 1 && stmts[0] instanceof ExpressionStatement) {
        fn$1 = arrowFn(params, stmts[0].expr);
      } else {
        if (stmts.length > 0) {
          const lastStatement = stmts[stmts.length - 1];
          if (lastStatement instanceof ExpressionStatement) {
            stmts[stmts.length - 1] = new ReturnStatement(lastStatement.expr);
          }
        }
        fn$1 = fn(params, stmts);
      }
      return {
        expression: this.constantPool.getSharedFunctionReference(fn$1, "_forTrack"),
        usesComponentInstance
      };
    }
    getConstCount() {
      return this._dataIndex;
    }
    getVarCount() {
      return this._pureFunctionSlots;
    }
    getConsts() {
      return this._constants;
    }
    getNgContentSelectors() {
      return this._ngContentReservedSlots.length ? this.constantPool.getConstLiteral(asLiteral(this._ngContentReservedSlots), true) : null;
    }
    bindingContext() {
      return `${this._bindingContext++}`;
    }
    templatePropertyBindings(templateIndex, attrs) {
      const propertyBindings = [];
      for (const input2 of attrs) {
        if (!(input2 instanceof BoundAttribute)) {
          continue;
        }
        const value = input2.value.visit(this._valueConverter);
        if (value === void 0) {
          continue;
        }
        this.allocateBindingSlots(value);
        if (value instanceof Interpolation$1) {
          const params = [];
          this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value), templateIndex, input2.name, input2, value, params);
        } else {
          propertyBindings.push({
            span: input2.sourceSpan,
            paramsOrFn: getBindingFunctionParams(() => this.convertPropertyBinding(value), input2.name)
          });
        }
      }
      for (const propertyBinding of propertyBindings) {
        this.updateInstructionWithAdvance(templateIndex, propertyBinding.span, Identifiers.property, propertyBinding.paramsOrFn);
      }
    }
    // Bindings must only be resolved after all local refs have been visited, so all
    // instructions are queued in callbacks that execute once the initial pass has completed.
    // Otherwise, we wouldn't be able to support local refs that are defined after their
    // bindings. e.g. {{ foo }} <div #foo></div>
    instructionFn(fns, span, reference2, paramsOrFn, prepend = false) {
      fns[prepend ? "unshift" : "push"]({ span, reference: reference2, paramsOrFn });
    }
    processStylingUpdateInstruction(elementIndex, instruction) {
      let allocateBindingSlots = 0;
      if (instruction) {
        for (const call2 of instruction.calls) {
          allocateBindingSlots += call2.allocateBindingSlots;
          this.updateInstructionWithAdvance(elementIndex, call2.sourceSpan, instruction.reference, () => call2.params((value) => call2.supportsInterpolation && value instanceof Interpolation$1 ? this.getUpdateInstructionArguments(value) : this.convertPropertyBinding(value)));
        }
      }
      return allocateBindingSlots;
    }
    creationInstruction(span, reference2, paramsOrFn, prepend) {
      this.instructionFn(this._creationCodeFns, span, reference2, paramsOrFn || [], prepend);
    }
    updateInstructionWithAdvance(nodeIndex, span, reference2, paramsOrFn) {
      this.addAdvanceInstructionIfNecessary(nodeIndex, span);
      this.updateInstruction(span, reference2, paramsOrFn);
    }
    updateInstruction(span, reference2, paramsOrFn) {
      this.instructionFn(this._updateCodeFns, span, reference2, paramsOrFn || []);
    }
    addAdvanceInstructionIfNecessary(nodeIndex, span) {
      if (nodeIndex !== this._currentIndex) {
        const delta = nodeIndex - this._currentIndex;
        if (delta < 1) {
          throw new Error("advance instruction can only go forwards");
        }
        this.instructionFn(this._updateCodeFns, span, Identifiers.advance, delta > 1 ? [literal(delta)] : []);
        this._currentIndex = nodeIndex;
      }
    }
    allocatePureFunctionSlots(numSlots) {
      const originalSlots = this._pureFunctionSlots;
      this._pureFunctionSlots += numSlots;
      return originalSlots;
    }
    allocateBindingSlots(value) {
      this._bindingSlots += value instanceof Interpolation$1 ? value.expressions.length : 1;
    }
    /**
     * Gets an expression that refers to the implicit receiver. The implicit
     * receiver is always the root level context.
     */
    getImplicitReceiverExpr() {
      if (this._implicitReceiverExpr) {
        return this._implicitReceiverExpr;
      }
      return this._implicitReceiverExpr = this.level === 0 ? variable(CONTEXT_NAME) : this._bindingScope.getOrCreateSharedContextVar(0);
    }
    convertPropertyBinding(value) {
      const convertedPropertyBinding = convertPropertyBinding(this, this.getImplicitReceiverExpr(), value, this.bindingContext());
      const valExpr = convertedPropertyBinding.currValExpr;
      this._tempVariables.push(...convertedPropertyBinding.stmts);
      return valExpr;
    }
    /**
     * Gets a list of argument expressions to pass to an update instruction expression. Also updates
     * the temp variables state with temp variables that were identified as needing to be created
     * while visiting the arguments.
     * @param value The original expression we will be resolving an arguments list from.
     */
    getUpdateInstructionArguments(value) {
      const { args, stmts } = convertUpdateArguments(this, this.getImplicitReceiverExpr(), value, this.bindingContext());
      this._tempVariables.push(...stmts);
      return args;
    }
    /**
     * Creates and returns a variable that can be used to
     * store the state between control flow instructions.
     */
    allocateControlFlowTempVariable() {
      if (this._controlFlowTempVariable === null) {
        const name = `${this.contextName}_contFlowTmp`;
        this._tempVariables.push(new DeclareVarStmt(name));
        this._controlFlowTempVariable = variable(name);
      }
      return this._controlFlowTempVariable;
    }
    /**
     * Prepares all attribute expression values for the `TAttributes` array.
     *
     * The purpose of this function is to properly construct an attributes array that
     * is passed into the `elementStart` (or just `element`) functions. Because there
     * are many different types of attributes, the array needs to be constructed in a
     * special way so that `elementStart` can properly evaluate them.
     *
     * The format looks like this:
     *
     * ```
     * attrs = [prop, value, prop2, value2,
     *   PROJECT_AS, selector,
     *   CLASSES, class1, class2,
     *   STYLES, style1, value1, style2, value2,
     *   BINDINGS, name1, name2, name3,
     *   TEMPLATE, name4, name5, name6,
     *   I18N, name7, name8, ...]
     * ```
     *
     * Note that this function will fully ignore all synthetic (@foo) attribute values
     * because those values are intended to always be generated as property instructions.
     */
    getAttributeExpressions(elementName, renderAttributes, inputs, outputs, styles2, templateAttrs = [], boundI18nAttrs = []) {
      const alreadySeen = /* @__PURE__ */ new Set();
      const attrExprs = [];
      let ngProjectAsAttr;
      for (const attr of renderAttributes) {
        if (attr.name === NG_PROJECT_AS_ATTR_NAME) {
          ngProjectAsAttr = attr;
        }
        if (attr.i18n) {
          const { i18nVarRefsCache } = this._constants;
          let i18nVarRef;
          if (i18nVarRefsCache.has(attr.i18n)) {
            i18nVarRef = i18nVarRefsCache.get(attr.i18n);
          } else {
            i18nVarRef = this.i18nTranslate(attr.i18n);
            i18nVarRefsCache.set(attr.i18n, i18nVarRef);
          }
          attrExprs.push(literal(attr.name), i18nVarRef);
        } else {
          attrExprs.push(...getAttributeNameLiterals(attr.name), trustedConstAttribute(elementName, attr));
        }
      }
      if (ngProjectAsAttr) {
        attrExprs.push(...getNgProjectAsLiteral(ngProjectAsAttr));
      }
      function addAttrExpr(key, value) {
        if (typeof key === "string") {
          if (!alreadySeen.has(key)) {
            attrExprs.push(...getAttributeNameLiterals(key));
            value !== void 0 && attrExprs.push(value);
            alreadySeen.add(key);
          }
        } else {
          attrExprs.push(literal(key));
        }
      }
      if (styles2) {
        styles2.populateInitialStylingAttrs(attrExprs);
      }
      if (inputs.length || outputs.length) {
        const attrsLengthBeforeInputs = attrExprs.length;
        for (let i = 0; i < inputs.length; i++) {
          const input2 = inputs[i];
          if (input2.type !== 4 && input2.type !== 1) {
            addAttrExpr(input2.name);
          }
        }
        for (let i = 0; i < outputs.length; i++) {
          const output2 = outputs[i];
          if (output2.type !== 1) {
            addAttrExpr(output2.name);
          }
        }
        if (attrExprs.length !== attrsLengthBeforeInputs) {
          attrExprs.splice(attrsLengthBeforeInputs, 0, literal(
            3
            /* core.AttributeMarker.Bindings */
          ));
        }
      }
      if (templateAttrs.length) {
        attrExprs.push(literal(
          4
          /* core.AttributeMarker.Template */
        ));
        templateAttrs.forEach((attr) => addAttrExpr(attr.name));
      }
      if (boundI18nAttrs.length) {
        attrExprs.push(literal(
          6
          /* core.AttributeMarker.I18n */
        ));
        boundI18nAttrs.forEach((attr) => addAttrExpr(attr.name));
      }
      return attrExprs;
    }
    addToConsts(expression) {
      if (isNull(expression)) {
        return TYPED_NULL_EXPR;
      }
      const consts = this._constants.constExpressions;
      for (let i = 0; i < consts.length; i++) {
        if (consts[i].isEquivalent(expression)) {
          return literal(i);
        }
      }
      return literal(consts.push(expression) - 1);
    }
    addAttrsToConsts(attrs) {
      return attrs !== null && attrs.length > 0 ? this.addToConsts(literalArr(attrs)) : TYPED_NULL_EXPR;
    }
    prepareRefsArray(references) {
      if (!references || references.length === 0) {
        return TYPED_NULL_EXPR;
      }
      const refsParam = references.flatMap((reference2) => {
        const slot = this.allocateDataSlot();
        const variableName = this._bindingScope.freshReferenceName();
        const retrievalLevel = this.level;
        const lhs = variable(variableName);
        this._bindingScope.set(retrievalLevel, reference2.name, lhs, 0, (scope, relativeLevel) => {
          const nextContextStmt = relativeLevel > 0 ? [generateNextContextExpr(relativeLevel).toStmt()] : [];
          const refExpr = lhs.set(importExpr(Identifiers.reference).callFn([literal(slot)]));
          return nextContextStmt.concat(refExpr.toConstDecl());
        }, true);
        return [reference2.name, reference2.value];
      });
      return asLiteral(refsParam);
    }
    prepareListenerParameter(tagName, outputAst, index) {
      return () => {
        const eventName = outputAst.name;
        const bindingFnName = outputAst.type === 1 ? (
          // synthetic @listener.foo values are treated the exact same as are standard listeners
          prepareSyntheticListenerFunctionName(eventName, outputAst.phase)
        ) : sanitizeIdentifier(eventName);
        const handlerName = `${this.templateName}_${tagName}_${bindingFnName}_${index}_listener`;
        const scope = this._bindingScope.nestedScope(this._bindingScope.bindingLevel, EVENT_BINDING_SCOPE_GLOBALS);
        return prepareEventListenerParameters(outputAst, handlerName, scope);
      };
    }
  };
  var ValueConverter = class extends AstMemoryEfficientTransformer {
    constructor(constantPool, allocateSlot, allocatePureFunctionSlots, definePipe) {
      super();
      this.constantPool = constantPool;
      this.allocateSlot = allocateSlot;
      this.allocatePureFunctionSlots = allocatePureFunctionSlots;
      this.definePipe = definePipe;
      this._pipeBindExprs = [];
    }
    // AstMemoryEfficientTransformer
    visitPipe(pipe3, context2) {
      const slot = this.allocateSlot();
      const slotPseudoLocal = `PIPE:${slot}`;
      const pureFunctionSlot = this.allocatePureFunctionSlots(2 + pipe3.args.length);
      const target = new PropertyRead(pipe3.span, pipe3.sourceSpan, pipe3.nameSpan, new ImplicitReceiver(pipe3.span, pipe3.sourceSpan), slotPseudoLocal);
      const { identifier, isVarLength } = pipeBindingCallInfo(pipe3.args);
      this.definePipe(pipe3.name, slotPseudoLocal, slot, importExpr(identifier));
      const args = [pipe3.exp, ...pipe3.args];
      const convertedArgs = isVarLength ? this.visitAll([new LiteralArray(pipe3.span, pipe3.sourceSpan, args)]) : this.visitAll(args);
      const pipeBindExpr = new Call(pipe3.span, pipe3.sourceSpan, target, [
        new LiteralPrimitive(pipe3.span, pipe3.sourceSpan, slot),
        new LiteralPrimitive(pipe3.span, pipe3.sourceSpan, pureFunctionSlot),
        ...convertedArgs
      ], null);
      this._pipeBindExprs.push(pipeBindExpr);
      return pipeBindExpr;
    }
    updatePipeSlotOffsets(bindingSlots) {
      this._pipeBindExprs.forEach((pipe3) => {
        const slotOffset = pipe3.args[1];
        slotOffset.value += bindingSlots;
      });
    }
    visitLiteralArray(array, context2) {
      return new BuiltinFunctionCall(array.span, array.sourceSpan, this.visitAll(array.expressions), (values) => {
        const literal2 = literalArr(values);
        return getLiteralFactory(this.constantPool, literal2, this.allocatePureFunctionSlots);
      });
    }
    visitLiteralMap(map3, context2) {
      return new BuiltinFunctionCall(map3.span, map3.sourceSpan, this.visitAll(map3.values), (values) => {
        const literal2 = literalMap(values.map((value, index) => ({ key: map3.keys[index].key, value, quoted: map3.keys[index].quoted })));
        return getLiteralFactory(this.constantPool, literal2, this.allocatePureFunctionSlots);
      });
    }
  };
  var pipeBindingIdentifiers = [Identifiers.pipeBind1, Identifiers.pipeBind2, Identifiers.pipeBind3, Identifiers.pipeBind4];
  function pipeBindingCallInfo(args) {
    const identifier = pipeBindingIdentifiers[args.length];
    return {
      identifier: identifier || Identifiers.pipeBindV,
      isVarLength: !identifier
    };
  }
  var pureFunctionIdentifiers = [
    Identifiers.pureFunction0,
    Identifiers.pureFunction1,
    Identifiers.pureFunction2,
    Identifiers.pureFunction3,
    Identifiers.pureFunction4,
    Identifiers.pureFunction5,
    Identifiers.pureFunction6,
    Identifiers.pureFunction7,
    Identifiers.pureFunction8
  ];
  function pureFunctionCallInfo(args) {
    const identifier = pureFunctionIdentifiers[args.length];
    return {
      identifier: identifier || Identifiers.pureFunctionV,
      isVarLength: !identifier
    };
  }
  function generateNextContextExpr(relativeLevelDiff) {
    return importExpr(Identifiers.nextContext).callFn(relativeLevelDiff > 1 ? [literal(relativeLevelDiff)] : []);
  }
  function getLiteralFactory(constantPool, literal$1, allocateSlots2) {
    const { literalFactory, literalFactoryArguments } = constantPool.getLiteralFactory(literal$1);
    const startSlot = allocateSlots2(1 + literalFactoryArguments.length);
    const { identifier, isVarLength } = pureFunctionCallInfo(literalFactoryArguments);
    const args = [literal(startSlot), literalFactory];
    if (isVarLength) {
      args.push(literalArr(literalFactoryArguments));
    } else {
      args.push(...literalFactoryArguments);
    }
    return importExpr(identifier).callFn(args);
  }
  function getAttributeNameLiterals(name) {
    const [attributeNamespace, attributeName] = splitNsName(name);
    const nameLiteral = literal(attributeName);
    if (attributeNamespace) {
      return [
        literal(
          0
          /* core.AttributeMarker.NamespaceURI */
        ),
        literal(attributeNamespace),
        nameLiteral
      ];
    }
    return [nameLiteral];
  }
  var SHARED_CONTEXT_KEY = "$$shared_ctx$$";
  var BindingScope = class _BindingScope {
    static createRootScope() {
      return new _BindingScope();
    }
    constructor(bindingLevel = 0, parent = null, globals) {
      this.bindingLevel = bindingLevel;
      this.parent = parent;
      this.globals = globals;
      this.map = /* @__PURE__ */ new Map();
      this.referenceNameIndex = 0;
      this.restoreViewVariable = null;
      this.usesRestoredViewContext = false;
      if (globals !== void 0) {
        for (const name of globals) {
          this.set(0, name, variable(name));
        }
      }
    }
    get(name) {
      let current = this;
      while (current) {
        let value = current.map.get(name);
        if (value != null) {
          if (current !== this) {
            value = {
              retrievalLevel: value.retrievalLevel,
              lhs: value.lhs,
              declareLocalCallback: value.declareLocalCallback,
              declare: false,
              priority: value.priority
            };
            this.map.set(name, value);
            this.maybeGenerateSharedContextVar(value);
            this.maybeRestoreView();
          }
          if (value.declareLocalCallback && !value.declare) {
            value.declare = true;
          }
          return typeof value.lhs === "function" ? value.lhs(this, value.retrievalLevel) : value.lhs;
        }
        current = current.parent;
      }
      return this.bindingLevel === 0 ? null : this.getComponentProperty(name);
    }
    /** Checks whether a variable exists locally on the current scope. */
    hasLocal(name) {
      return this.map.has(name);
    }
    /**
     * Create a local variable for later reference.
     *
     * @param retrievalLevel The level from which this value can be retrieved
     * @param name Name of the variable.
     * @param lhs AST representing the left hand side of the `let lhs = rhs;`.
     * @param priority The sorting priority of this var
     * @param declareLocalCallback The callback to invoke when declaring this local var
     * @param localRef Whether or not this is a local ref
     */
    set(retrievalLevel, name, lhs, priority = 0, declareLocalCallback, localRef) {
      if (this.map.has(name)) {
        if (localRef) {
          return this;
        }
        error(`The name ${name} is already defined in scope to be ${this.map.get(name)}`);
      }
      this.map.set(name, {
        retrievalLevel,
        lhs,
        declare: false,
        declareLocalCallback,
        priority
      });
      return this;
    }
    // Implemented as part of LocalResolver.
    getLocal(name) {
      return this.get(name);
    }
    // Implemented as part of LocalResolver.
    notifyImplicitReceiverUse() {
      if (this.bindingLevel !== 0) {
        this.map.get(SHARED_CONTEXT_KEY + 0).declare = true;
      }
    }
    nestedScope(level, globals) {
      const newScope = new _BindingScope(level, this, globals);
      if (level > 0)
        newScope.generateSharedContextVar(0);
      return newScope;
    }
    /**
     * Gets or creates a shared context variable and returns its expression. Note that
     * this does not mean that the shared variable will be declared. Variables in the
     * binding scope will be only declared if they are used.
     */
    getOrCreateSharedContextVar(retrievalLevel) {
      const bindingKey = SHARED_CONTEXT_KEY + retrievalLevel;
      if (!this.map.has(bindingKey)) {
        this.generateSharedContextVar(retrievalLevel);
      }
      return this.map.get(bindingKey).lhs;
    }
    getSharedContextName(retrievalLevel) {
      const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + retrievalLevel);
      return sharedCtxObj && sharedCtxObj.declare ? sharedCtxObj.lhs : null;
    }
    maybeGenerateSharedContextVar(value) {
      if (value.priority === 1 && value.retrievalLevel < this.bindingLevel) {
        const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + value.retrievalLevel);
        if (sharedCtxObj) {
          sharedCtxObj.declare = true;
        } else {
          this.generateSharedContextVar(value.retrievalLevel);
        }
      }
    }
    generateSharedContextVar(retrievalLevel) {
      const lhs = variable(CONTEXT_NAME + this.freshReferenceName());
      this.map.set(SHARED_CONTEXT_KEY + retrievalLevel, {
        retrievalLevel,
        lhs,
        declareLocalCallback: (scope, relativeLevel) => {
          return [lhs.set(generateNextContextExpr(relativeLevel)).toConstDecl()];
        },
        declare: false,
        priority: 2
      });
    }
    getComponentProperty(name) {
      const componentValue = this.map.get(SHARED_CONTEXT_KEY + 0);
      componentValue.declare = true;
      this.maybeRestoreView();
      const lhs = typeof componentValue.lhs === "function" ? componentValue.lhs(this, componentValue.retrievalLevel) : componentValue.lhs;
      return name === DIRECT_CONTEXT_REFERENCE ? lhs : lhs.prop(name);
    }
    maybeRestoreView() {
      if (this.isListenerScope()) {
        if (!this.parent.restoreViewVariable) {
          this.parent.restoreViewVariable = variable(this.parent.freshReferenceName());
        }
        this.restoreViewVariable = this.parent.restoreViewVariable;
      }
    }
    restoreViewStatement() {
      if (this.restoreViewVariable) {
        const restoreCall = invokeInstruction(null, Identifiers.restoreView, [this.restoreViewVariable]);
        return this.usesRestoredViewContext ? variable(RESTORED_VIEW_CONTEXT_NAME).set(restoreCall).toConstDecl() : restoreCall.toStmt();
      }
      return null;
    }
    viewSnapshotStatements() {
      return this.restoreViewVariable ? [
        this.restoreViewVariable.set(invokeInstruction(null, Identifiers.getCurrentView, [])).toConstDecl()
      ] : [];
    }
    isListenerScope() {
      return this.parent && this.parent.bindingLevel === this.bindingLevel;
    }
    variableDeclarations() {
      let currentContextLevel = 0;
      return Array.from(this.map.values()).filter((value) => value.declare).sort((a, b) => b.retrievalLevel - a.retrievalLevel || b.priority - a.priority).reduce((stmts, value) => {
        const levelDiff = this.bindingLevel - value.retrievalLevel;
        const currStmts = value.declareLocalCallback(this, levelDiff - currentContextLevel);
        currentContextLevel = levelDiff;
        return stmts.concat(currStmts);
      }, []);
    }
    freshReferenceName() {
      let current = this;
      while (current.parent)
        current = current.parent;
      const ref = `${REFERENCE_PREFIX}${current.referenceNameIndex++}`;
      return ref;
    }
    hasRestoreViewVariable() {
      return !!this.restoreViewVariable;
    }
    notifyRestoredViewContextUse() {
      this.usesRestoredViewContext = true;
    }
  };
  var TrackByBindingScope = class extends BindingScope {
    constructor(parentScope, globalOverrides) {
      super(parentScope.bindingLevel + 1, parentScope);
      this.globalOverrides = globalOverrides;
      this.componentAccessCount = 0;
    }
    get(name) {
      if (this.globalOverrides.hasOwnProperty(name)) {
        return variable(this.globalOverrides[name]);
      }
      let current = this.parent;
      while (current) {
        if (current.hasLocal(name)) {
          return null;
        }
        current = current.parent;
      }
      this.componentAccessCount++;
      return variable("this").prop(name);
    }
    /** Gets the number of times the host component has been accessed through the scope. */
    getComponentAccessCount() {
      return this.componentAccessCount;
    }
  };
  function getNgProjectAsLiteral(attribute2) {
    const parsedR3Selector = parseSelectorToR3Selector(attribute2.value)[0];
    return [literal(
      5
      /* core.AttributeMarker.ProjectAs */
    ), asLiteral(parsedR3Selector)];
  }
  function getPropertyInterpolationExpression(interpolation) {
    switch (getInterpolationArgsLength(interpolation)) {
      case 1:
        return Identifiers.propertyInterpolate;
      case 3:
        return Identifiers.propertyInterpolate1;
      case 5:
        return Identifiers.propertyInterpolate2;
      case 7:
        return Identifiers.propertyInterpolate3;
      case 9:
        return Identifiers.propertyInterpolate4;
      case 11:
        return Identifiers.propertyInterpolate5;
      case 13:
        return Identifiers.propertyInterpolate6;
      case 15:
        return Identifiers.propertyInterpolate7;
      case 17:
        return Identifiers.propertyInterpolate8;
      default:
        return Identifiers.propertyInterpolateV;
    }
  }
  function getAttributeInterpolationExpression(interpolation) {
    switch (getInterpolationArgsLength(interpolation)) {
      case 3:
        return Identifiers.attributeInterpolate1;
      case 5:
        return Identifiers.attributeInterpolate2;
      case 7:
        return Identifiers.attributeInterpolate3;
      case 9:
        return Identifiers.attributeInterpolate4;
      case 11:
        return Identifiers.attributeInterpolate5;
      case 13:
        return Identifiers.attributeInterpolate6;
      case 15:
        return Identifiers.attributeInterpolate7;
      case 17:
        return Identifiers.attributeInterpolate8;
      default:
        return Identifiers.attributeInterpolateV;
    }
  }
  function getTextInterpolationExpression(interpolation) {
    switch (getInterpolationArgsLength(interpolation)) {
      case 1:
        return Identifiers.textInterpolate;
      case 3:
        return Identifiers.textInterpolate1;
      case 5:
        return Identifiers.textInterpolate2;
      case 7:
        return Identifiers.textInterpolate3;
      case 9:
        return Identifiers.textInterpolate4;
      case 11:
        return Identifiers.textInterpolate5;
      case 13:
        return Identifiers.textInterpolate6;
      case 15:
        return Identifiers.textInterpolate7;
      case 17:
        return Identifiers.textInterpolate8;
      default:
        return Identifiers.textInterpolateV;
    }
  }
  function parseTemplate(template2, templateUrl, options = {}) {
    const { interpolationConfig, preserveWhitespaces, enableI18nLegacyMessageIdFormat } = options;
    const bindingParser = makeBindingParser(interpolationConfig);
    const htmlParser = new HtmlParser();
    const parseResult = htmlParser.parse(template2, templateUrl, {
      leadingTriviaChars: LEADING_TRIVIA_CHARS,
      ...options,
      tokenizeExpansionForms: true,
      tokenizeBlocks: options.enableBlockSyntax ?? true
    });
    if (!options.alwaysAttemptHtmlToR3AstConversion && parseResult.errors && parseResult.errors.length > 0) {
      const parsedTemplate2 = {
        interpolationConfig,
        preserveWhitespaces,
        errors: parseResult.errors,
        nodes: [],
        styleUrls: [],
        styles: [],
        ngContentSelectors: []
      };
      if (options.collectCommentNodes) {
        parsedTemplate2.commentNodes = [];
      }
      return parsedTemplate2;
    }
    let rootNodes = parseResult.rootNodes;
    const i18nMetaVisitor = new I18nMetaVisitor(
      interpolationConfig,
      /* keepI18nAttrs */
      !preserveWhitespaces,
      enableI18nLegacyMessageIdFormat
    );
    const i18nMetaResult = i18nMetaVisitor.visitAllWithErrors(rootNodes);
    if (!options.alwaysAttemptHtmlToR3AstConversion && i18nMetaResult.errors && i18nMetaResult.errors.length > 0) {
      const parsedTemplate2 = {
        interpolationConfig,
        preserveWhitespaces,
        errors: i18nMetaResult.errors,
        nodes: [],
        styleUrls: [],
        styles: [],
        ngContentSelectors: []
      };
      if (options.collectCommentNodes) {
        parsedTemplate2.commentNodes = [];
      }
      return parsedTemplate2;
    }
    rootNodes = i18nMetaResult.rootNodes;
    if (!preserveWhitespaces) {
      rootNodes = visitAll(new WhitespaceVisitor(), rootNodes);
      if (i18nMetaVisitor.hasI18nMeta) {
        rootNodes = visitAll(new I18nMetaVisitor(
          interpolationConfig,
          /* keepI18nAttrs */
          false
        ), rootNodes);
      }
    }
    const { nodes, errors, styleUrls, styles: styles2, ngContentSelectors, commentNodes } = htmlAstToRender3Ast(rootNodes, bindingParser, { collectCommentNodes: !!options.collectCommentNodes });
    errors.push(...parseResult.errors, ...i18nMetaResult.errors);
    const parsedTemplate = {
      interpolationConfig,
      preserveWhitespaces,
      errors: errors.length > 0 ? errors : null,
      nodes,
      styleUrls,
      styles: styles2,
      ngContentSelectors
    };
    if (options.collectCommentNodes) {
      parsedTemplate.commentNodes = commentNodes;
    }
    return parsedTemplate;
  }
  var elementRegistry = new DomElementSchemaRegistry();
  function makeBindingParser(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
    return new BindingParser(new Parser$1(new Lexer()), interpolationConfig, elementRegistry, []);
  }
  function resolveSanitizationFn(context2, isAttribute) {
    switch (context2) {
      case SecurityContext2.HTML:
        return importExpr(Identifiers.sanitizeHtml);
      case SecurityContext2.SCRIPT:
        return importExpr(Identifiers.sanitizeScript);
      case SecurityContext2.STYLE:
        return isAttribute ? importExpr(Identifiers.sanitizeStyle) : null;
      case SecurityContext2.URL:
        return importExpr(Identifiers.sanitizeUrl);
      case SecurityContext2.RESOURCE_URL:
        return importExpr(Identifiers.sanitizeResourceUrl);
      default:
        return null;
    }
  }
  function trustedConstAttribute(tagName, attr) {
    const value = asLiteral(attr.value);
    if (isTrustedTypesSink(tagName, attr.name)) {
      switch (elementRegistry.securityContext(
        tagName,
        attr.name,
        /* isAttribute */
        true
      )) {
        case SecurityContext2.HTML:
          return taggedTemplate(importExpr(Identifiers.trustConstantHtml), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), void 0, attr.valueSpan);
        case SecurityContext2.RESOURCE_URL:
          return taggedTemplate(importExpr(Identifiers.trustConstantResourceUrl), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), void 0, attr.valueSpan);
        default:
          return value;
      }
    } else {
      return value;
    }
  }
  function isSingleElementTemplate(children) {
    return children.length === 1 && children[0] instanceof Element$1;
  }
  function isTextNode(node) {
    return node instanceof Text$3 || node instanceof BoundText || node instanceof Icu$1;
  }
  function isIframeElement(tagName) {
    return tagName.toLowerCase() === "iframe";
  }
  function hasTextChildrenOnly(children) {
    return children.every(isTextNode);
  }
  function getBindingFunctionParams(deferredParams, name, eagerParams) {
    return () => {
      const value = deferredParams();
      const fnParams = Array.isArray(value) ? value : [value];
      if (eagerParams) {
        fnParams.push(...eagerParams);
      }
      if (name) {
        fnParams.unshift(literal(name));
      }
      return fnParams;
    };
  }
  var NG_I18N_CLOSURE_MODE = "ngI18nClosureMode";
  function getTranslationDeclStmts(message, variable2, closureVar, params = {}, transformFn) {
    params = Object.fromEntries(Object.entries(params).sort());
    const statements = [
      declareI18nVariable(variable2),
      ifStmt(createClosureModeGuard(), createGoogleGetMsgStatements(variable2, message, closureVar, params), createLocalizeStatements(variable2, message, formatI18nPlaceholderNamesInMap(
        params,
        /* useCamelCase */
        false
      )))
    ];
    if (transformFn) {
      statements.push(new ExpressionStatement(variable2.set(transformFn(variable2))));
    }
    return statements;
  }
  function createClosureModeGuard() {
    return typeofExpr(variable(NG_I18N_CLOSURE_MODE)).notIdentical(literal("undefined", STRING_TYPE)).and(variable(NG_I18N_CLOSURE_MODE));
  }
  function toQueryFlags(query) {
    return (query.descendants ? 1 : 0) | (query.static ? 2 : 0) | (query.emitDistinctChangesOnly ? 4 : 0);
  }
  function getQueryPredicate(query, constantPool) {
    if (Array.isArray(query.predicate)) {
      let predicate = [];
      query.predicate.forEach((selector) => {
        const selectors = selector.split(",").map((token) => literal(token.trim()));
        predicate.push(...selectors);
      });
      return constantPool.getConstLiteral(literalArr(predicate), true);
    } else {
      switch (query.predicate.forwardRef) {
        case 0:
        case 2:
          return query.predicate.expression;
        case 1:
          return importExpr(Identifiers.resolveForwardRef).callFn([query.predicate.expression]);
      }
    }
  }
  function createQueryCreateCall(query, constantPool, queryTypeFns, prependParams) {
    const parameters = [];
    if (prependParams !== void 0) {
      parameters.push(...prependParams);
    }
    if (query.isSignal) {
      parameters.push(new ReadPropExpr(variable(CONTEXT_NAME), query.propertyName));
    }
    parameters.push(getQueryPredicate(query, constantPool), literal(toQueryFlags(query)));
    if (query.read) {
      parameters.push(query.read);
    }
    const queryCreateFn = query.isSignal ? queryTypeFns.signalBased : queryTypeFns.nonSignal;
    return importExpr(queryCreateFn).callFn(parameters);
  }
  var queryAdvancePlaceholder = Symbol("queryAdvancePlaceholder");
  function collapseAdvanceStatements(statements) {
    const result = [];
    let advanceCollapseCount = 0;
    const flushAdvanceCount = () => {
      if (advanceCollapseCount > 0) {
        result.unshift(importExpr(Identifiers.queryAdvance).callFn(advanceCollapseCount === 1 ? [] : [literal(advanceCollapseCount)]).toStmt());
        advanceCollapseCount = 0;
      }
    };
    for (let i = statements.length - 1; i >= 0; i--) {
      const st = statements[i];
      if (st === queryAdvancePlaceholder) {
        advanceCollapseCount++;
      } else {
        flushAdvanceCount();
        result.unshift(st);
      }
    }
    flushAdvanceCount();
    return result;
  }
  function createViewQueriesFunction(viewQueries, constantPool, name) {
    const createStatements = [];
    const updateStatements = [];
    const tempAllocator = temporaryAllocator((st) => updateStatements.push(st), TEMPORARY_NAME);
    viewQueries.forEach((query) => {
      const queryDefinitionCall = createQueryCreateCall(query, constantPool, {
        signalBased: Identifiers.viewQuerySignal,
        nonSignal: Identifiers.viewQuery
      });
      createStatements.push(queryDefinitionCall.toStmt());
      if (query.isSignal) {
        updateStatements.push(queryAdvancePlaceholder);
        return;
      }
      const temporary = tempAllocator();
      const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);
      const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);
      const updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop("first") : temporary);
      updateStatements.push(refresh.and(updateDirective).toStmt());
    });
    const viewQueryFnName = name ? `${name}_Query` : null;
    return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [
      renderFlagCheckIfStmt(1, createStatements),
      renderFlagCheckIfStmt(2, collapseAdvanceStatements(updateStatements))
    ], INFERRED_TYPE, null, viewQueryFnName);
  }
  function createContentQueriesFunction(queries, constantPool, name) {
    const createStatements = [];
    const updateStatements = [];
    const tempAllocator = temporaryAllocator((st) => updateStatements.push(st), TEMPORARY_NAME);
    for (const query of queries) {
      createStatements.push(createQueryCreateCall(
        query,
        constantPool,
        { nonSignal: Identifiers.contentQuery, signalBased: Identifiers.contentQuerySignal },
        /* prependParams */
        [variable("dirIndex")]
      ).toStmt());
      if (query.isSignal) {
        updateStatements.push(queryAdvancePlaceholder);
        continue;
      }
      const temporary = tempAllocator();
      const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);
      const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);
      const updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop("first") : temporary);
      updateStatements.push(refresh.and(updateDirective).toStmt());
    }
    const contentQueriesFnName = name ? `${name}_ContentQueries` : null;
    return fn([
      new FnParam(RENDER_FLAGS, NUMBER_TYPE),
      new FnParam(CONTEXT_NAME, null),
      new FnParam("dirIndex", null)
    ], [
      renderFlagCheckIfStmt(1, createStatements),
      renderFlagCheckIfStmt(2, collapseAdvanceStatements(updateStatements))
    ], INFERRED_TYPE, null, contentQueriesFnName);
  }
  var ATTR_REGEX = /attr\.([^\]]+)/;
  var COMPONENT_VARIABLE = "%COMP%";
  var HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;
  var CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;
  function baseDirectiveFields(meta, constantPool, bindingParser) {
    const definitionMap = new DefinitionMap();
    const selectors = parseSelectorToR3Selector(meta.selector);
    definitionMap.set("type", meta.type.value);
    if (selectors.length > 0) {
      definitionMap.set("selectors", asLiteral(selectors));
    }
    if (meta.queries.length > 0) {
      definitionMap.set("contentQueries", createContentQueriesFunction(meta.queries, constantPool, meta.name));
    }
    if (meta.viewQueries.length) {
      definitionMap.set("viewQuery", createViewQueriesFunction(meta.viewQueries, constantPool, meta.name));
    }
    definitionMap.set("hostBindings", createHostBindingsFunction(meta.host, meta.typeSourceSpan, bindingParser, constantPool, meta.selector || "", meta.name, definitionMap));
    definitionMap.set("inputs", conditionallyCreateDirectiveBindingLiteral(meta.inputs, true));
    definitionMap.set("outputs", conditionallyCreateDirectiveBindingLiteral(meta.outputs));
    if (meta.exportAs !== null) {
      definitionMap.set("exportAs", literalArr(meta.exportAs.map((e2) => literal(e2))));
    }
    if (meta.isStandalone) {
      definitionMap.set("standalone", literal(true));
    }
    if (meta.isSignal) {
      definitionMap.set("signals", literal(true));
    }
    return definitionMap;
  }
  function addFeatures(definitionMap, meta) {
    const features = [];
    const providers = meta.providers;
    const viewProviders = meta.viewProviders;
    const inputKeys = Object.keys(meta.inputs);
    if (providers || viewProviders) {
      const args = [providers || new LiteralArrayExpr([])];
      if (viewProviders) {
        args.push(viewProviders);
      }
      features.push(importExpr(Identifiers.ProvidersFeature).callFn(args));
    }
    for (const key of inputKeys) {
      if (meta.inputs[key].transformFunction !== null) {
        features.push(importExpr(Identifiers.InputTransformsFeatureFeature));
        break;
      }
    }
    if (meta.hostDirectives?.length) {
      features.push(importExpr(Identifiers.HostDirectivesFeature).callFn([createHostDirectivesFeatureArg(meta.hostDirectives)]));
    }
    if (meta.usesInheritance) {
      features.push(importExpr(Identifiers.InheritDefinitionFeature));
    }
    if (meta.fullInheritance) {
      features.push(importExpr(Identifiers.CopyDefinitionFeature));
    }
    if (meta.lifecycle.usesOnChanges) {
      features.push(importExpr(Identifiers.NgOnChangesFeature));
    }
    if (meta.hasOwnProperty("template") && meta.isStandalone) {
      features.push(importExpr(Identifiers.StandaloneFeature));
    }
    if (features.length) {
      definitionMap.set("features", literalArr(features));
    }
  }
  function compileDirectiveFromMetadata(meta, constantPool, bindingParser) {
    const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
    addFeatures(definitionMap, meta);
    const expression = importExpr(Identifiers.defineDirective).callFn([definitionMap.toLiteralMap()], void 0, true);
    const type = createDirectiveType(meta);
    return { expression, type, statements: [] };
  }
  function createDeferredDepsFunction(constantPool, name, deps) {
    const dependencyExp = [];
    for (const [symbolName, { importPath, isDefaultImport }] of deps) {
      const innerFn = arrowFn([new FnParam("m", DYNAMIC_TYPE)], variable("m").prop(isDefaultImport ? "default" : symbolName));
      const importExpr2 = new DynamicImportExpr(importPath).prop("then").callFn([innerFn]);
      dependencyExp.push(importExpr2);
    }
    const depsFnExpr = arrowFn([], literalArr(dependencyExp));
    constantPool.statements.push(depsFnExpr.toDeclStmt(name, StmtModifier.Final));
    return variable(name);
  }
  function compileComponentFromMetadata(meta, constantPool, bindingParser) {
    const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
    addFeatures(definitionMap, meta);
    const selector = meta.selector && CssSelector.parse(meta.selector);
    const firstSelector = selector && selector[0];
    if (firstSelector) {
      const selectorAttributes = firstSelector.getAttrs();
      if (selectorAttributes.length) {
        definitionMap.set("attrs", constantPool.getConstLiteral(
          literalArr(selectorAttributes.map((value) => value != null ? literal(value) : literal(void 0))),
          /* forceShared */
          true
        ));
      }
    }
    const templateTypeName = meta.name;
    const templateName = templateTypeName ? `${templateTypeName}_Template` : null;
    let allDeferrableDepsFn = null;
    if (meta.deferBlocks.size > 0 && meta.deferrableTypes.size > 0 && meta.deferBlockDepsEmitMode === 1) {
      const fnName = `${templateTypeName}_DeferFn`;
      allDeferrableDepsFn = createDeferredDepsFunction(constantPool, fnName, meta.deferrableTypes);
    }
    if (!USE_TEMPLATE_PIPELINE && !meta.useTemplatePipeline) {
      const template2 = meta.template;
      const templateBuilder = new TemplateDefinitionBuilder(constantPool, BindingScope.createRootScope(), 0, templateTypeName, null, null, templateName, Identifiers.namespaceHTML, meta.relativeContextFilePath, meta.i18nUseExternalIds, meta.deferBlocks, /* @__PURE__ */ new Map(), allDeferrableDepsFn);
      const templateFunctionExpression = templateBuilder.buildTemplateFunction(template2.nodes, []);
      const ngContentSelectors = templateBuilder.getNgContentSelectors();
      if (ngContentSelectors) {
        definitionMap.set("ngContentSelectors", ngContentSelectors);
      }
      definitionMap.set("decls", literal(templateBuilder.getConstCount()));
      definitionMap.set("vars", literal(templateBuilder.getVarCount()));
      const { constExpressions, prepareStatements } = templateBuilder.getConsts();
      if (constExpressions.length > 0) {
        let constsExpr = literalArr(constExpressions);
        if (prepareStatements.length > 0) {
          constsExpr = arrowFn([], [...prepareStatements, new ReturnStatement(constsExpr)]);
        }
        definitionMap.set("consts", constsExpr);
      }
      definitionMap.set("template", templateFunctionExpression);
    } else {
      const tpl = ingestComponent(meta.name, meta.template.nodes, constantPool, meta.relativeContextFilePath, meta.i18nUseExternalIds, meta.deferBlocks, allDeferrableDepsFn);
      transform(tpl, CompilationJobKind.Tmpl);
      const templateFn = emitTemplateFn(tpl, constantPool);
      if (tpl.contentSelectors !== null) {
        definitionMap.set("ngContentSelectors", tpl.contentSelectors);
      }
      definitionMap.set("decls", literal(tpl.root.decls));
      definitionMap.set("vars", literal(tpl.root.vars));
      if (tpl.consts.length > 0) {
        if (tpl.constsInitializers.length > 0) {
          definitionMap.set("consts", arrowFn([], [
            ...tpl.constsInitializers,
            new ReturnStatement(literalArr(tpl.consts))
          ]));
        } else {
          definitionMap.set("consts", literalArr(tpl.consts));
        }
      }
      definitionMap.set("template", templateFn);
    }
    if (meta.declarationListEmitMode !== 3 && meta.declarations.length > 0) {
      definitionMap.set("dependencies", compileDeclarationList(literalArr(meta.declarations.map((decl) => decl.type)), meta.declarationListEmitMode));
    } else if (meta.declarationListEmitMode === 3) {
      const args = [meta.type.value];
      if (meta.rawImports) {
        args.push(meta.rawImports);
      }
      definitionMap.set("dependencies", importExpr(Identifiers.getComponentDepsFactory).callFn(args));
    }
    if (meta.encapsulation === null) {
      meta.encapsulation = ViewEncapsulation2.Emulated;
    }
    if (meta.styles && meta.styles.length) {
      const styleValues = meta.encapsulation == ViewEncapsulation2.Emulated ? compileStyles(meta.styles, CONTENT_ATTR, HOST_ATTR) : meta.styles;
      const styleNodes = styleValues.reduce((result, style) => {
        if (style.trim().length > 0) {
          result.push(constantPool.getConstLiteral(literal(style)));
        }
        return result;
      }, []);
      if (styleNodes.length > 0) {
        definitionMap.set("styles", literalArr(styleNodes));
      }
    } else if (meta.encapsulation === ViewEncapsulation2.Emulated) {
      meta.encapsulation = ViewEncapsulation2.None;
    }
    if (meta.encapsulation !== ViewEncapsulation2.Emulated) {
      definitionMap.set("encapsulation", literal(meta.encapsulation));
    }
    if (meta.animations !== null) {
      definitionMap.set("data", literalMap([{ key: "animation", value: meta.animations, quoted: false }]));
    }
    if (meta.changeDetection !== null) {
      if (typeof meta.changeDetection === "number" && meta.changeDetection !== ChangeDetectionStrategy2.Default) {
        definitionMap.set("changeDetection", literal(meta.changeDetection));
      } else if (typeof meta.changeDetection === "object") {
        definitionMap.set("changeDetection", meta.changeDetection);
      }
    }
    const expression = importExpr(Identifiers.defineComponent).callFn([definitionMap.toLiteralMap()], void 0, true);
    const type = createComponentType(meta);
    return { expression, type, statements: [] };
  }
  function createComponentType(meta) {
    const typeParams = createBaseDirectiveTypeParams(meta);
    typeParams.push(stringArrayAsType(meta.template.ngContentSelectors));
    typeParams.push(expressionType(literal(meta.isStandalone)));
    typeParams.push(createHostDirectivesType(meta));
    if (meta.isSignal) {
      typeParams.push(expressionType(literal(meta.isSignal)));
    }
    return expressionType(importExpr(Identifiers.ComponentDeclaration, typeParams));
  }
  function compileDeclarationList(list, mode) {
    switch (mode) {
      case 0:
        return list;
      case 1:
        return arrowFn([], list);
      case 2:
        const resolvedList = list.prop("map").callFn([importExpr(Identifiers.resolveForwardRef)]);
        return arrowFn([], resolvedList);
      case 3:
        throw new Error(`Unsupported with an array of pre-resolved dependencies`);
    }
  }
  function convertAttributesToExpressions(attributes) {
    const values = [];
    for (let key of Object.getOwnPropertyNames(attributes)) {
      const value = attributes[key];
      values.push(literal(key), value);
    }
    return values;
  }
  function stringAsType(str) {
    return expressionType(literal(str));
  }
  function stringMapAsLiteralExpression(map3) {
    const mapValues = Object.keys(map3).map((key) => {
      const value = Array.isArray(map3[key]) ? map3[key][0] : map3[key];
      return {
        key,
        value: literal(value),
        quoted: true
      };
    });
    return literalMap(mapValues);
  }
  function stringArrayAsType(arr) {
    return arr.length > 0 ? expressionType(literalArr(arr.map((value) => literal(value)))) : NONE_TYPE;
  }
  function createBaseDirectiveTypeParams(meta) {
    const selectorForType = meta.selector !== null ? meta.selector.replace(/\n/g, "") : null;
    return [
      typeWithParameters(meta.type.type, meta.typeArgumentCount),
      selectorForType !== null ? stringAsType(selectorForType) : NONE_TYPE,
      meta.exportAs !== null ? stringArrayAsType(meta.exportAs) : NONE_TYPE,
      expressionType(getInputsTypeExpression(meta)),
      expressionType(stringMapAsLiteralExpression(meta.outputs)),
      stringArrayAsType(meta.queries.map((q) => q.propertyName))
    ];
  }
  function getInputsTypeExpression(meta) {
    return literalMap(Object.keys(meta.inputs).map((key) => {
      const value = meta.inputs[key];
      const values = [
        { key: "alias", value: literal(value.bindingPropertyName), quoted: true },
        { key: "required", value: literal(value.required), quoted: true }
      ];
      if (value.isSignal) {
        values.push({ key: "isSignal", value: literal(value.isSignal), quoted: true });
      }
      return { key, value: literalMap(values), quoted: true };
    }));
  }
  function createDirectiveType(meta) {
    const typeParams = createBaseDirectiveTypeParams(meta);
    typeParams.push(NONE_TYPE);
    typeParams.push(expressionType(literal(meta.isStandalone)));
    typeParams.push(createHostDirectivesType(meta));
    if (meta.isSignal) {
      typeParams.push(expressionType(literal(meta.isSignal)));
    }
    return expressionType(importExpr(Identifiers.DirectiveDeclaration, typeParams));
  }
  function createHostBindingsFunction(hostBindingsMetadata, typeSourceSpan, bindingParser, constantPool, selector, name, definitionMap) {
    const bindings = bindingParser.createBoundHostProperties(hostBindingsMetadata.properties, typeSourceSpan);
    const eventBindings = bindingParser.createDirectiveHostEventAsts(hostBindingsMetadata.listeners, typeSourceSpan);
    if (USE_TEMPLATE_PIPELINE || hostBindingsMetadata.useTemplatePipeline) {
      if (hostBindingsMetadata.specialAttributes.styleAttr) {
        hostBindingsMetadata.attributes["style"] = literal(hostBindingsMetadata.specialAttributes.styleAttr);
      }
      if (hostBindingsMetadata.specialAttributes.classAttr) {
        hostBindingsMetadata.attributes["class"] = literal(hostBindingsMetadata.specialAttributes.classAttr);
      }
      const hostJob = ingestHostBinding({
        componentName: name,
        componentSelector: selector,
        properties: bindings,
        events: eventBindings,
        attributes: hostBindingsMetadata.attributes
      }, bindingParser, constantPool);
      transform(hostJob, CompilationJobKind.Host);
      definitionMap.set("hostAttrs", hostJob.root.attributes);
      const varCount = hostJob.root.vars;
      if (varCount !== null && varCount > 0) {
        definitionMap.set("hostVars", literal(varCount));
      }
      return emitHostBindingFunction(hostJob);
    }
    let bindingId = 0;
    const getNextBindingId = () => `${bindingId++}`;
    const bindingContext = variable(CONTEXT_NAME);
    const styleBuilder = new StylingBuilder(bindingContext);
    const { styleAttr, classAttr } = hostBindingsMetadata.specialAttributes;
    if (styleAttr !== void 0) {
      styleBuilder.registerStyleAttr(styleAttr);
    }
    if (classAttr !== void 0) {
      styleBuilder.registerClassAttr(classAttr);
    }
    const createInstructions = [];
    const updateInstructions = [];
    const updateVariables = [];
    const hostBindingSourceSpan = typeSourceSpan;
    if (eventBindings && eventBindings.length) {
      createInstructions.push(...createHostListeners(eventBindings, name));
    }
    const allOtherBindings = [];
    let totalHostVarsCount = 0;
    bindings && bindings.forEach((binding) => {
      const stylingInputWasSet = styleBuilder.registerInputBasedOnName(binding.name, binding.expression, hostBindingSourceSpan);
      if (stylingInputWasSet) {
        totalHostVarsCount += MIN_STYLING_BINDING_SLOTS_REQUIRED;
      } else {
        allOtherBindings.push(binding);
        totalHostVarsCount++;
      }
    });
    let valueConverter;
    const getValueConverter = () => {
      if (!valueConverter) {
        const hostVarsCountFn = (numSlots) => {
          const originalVarsCount = totalHostVarsCount;
          totalHostVarsCount += numSlots;
          return originalVarsCount;
        };
        valueConverter = new ValueConverter(
          constantPool,
          () => error("Unexpected node"),
          // new nodes are illegal here
          hostVarsCountFn,
          () => error("Unexpected pipe")
        );
      }
      return valueConverter;
    };
    const propertyBindings = [];
    const attributeBindings = [];
    const syntheticHostBindings = [];
    for (const binding of allOtherBindings) {
      const value = binding.expression.visit(getValueConverter());
      const bindingExpr = bindingFn(bindingContext, value, getNextBindingId);
      const { bindingName, instruction, isAttribute } = getBindingNameAndInstruction(binding);
      const securityContexts = bindingParser.calcPossibleSecurityContexts(selector, bindingName, isAttribute).filter((context2) => context2 !== SecurityContext2.NONE);
      let sanitizerFn = null;
      if (securityContexts.length) {
        if (securityContexts.length === 2 && securityContexts.indexOf(SecurityContext2.URL) > -1 && securityContexts.indexOf(SecurityContext2.RESOURCE_URL) > -1) {
          sanitizerFn = importExpr(Identifiers.sanitizeUrlOrResourceUrl);
        } else {
          sanitizerFn = resolveSanitizationFn(securityContexts[0], isAttribute);
        }
      }
      const instructionParams = [literal(bindingName), bindingExpr.currValExpr];
      if (sanitizerFn) {
        instructionParams.push(sanitizerFn);
      } else {
        if (isIframeSecuritySensitiveAttr(bindingName)) {
          instructionParams.push(importExpr(Identifiers.validateIframeAttribute));
        }
      }
      updateVariables.push(...bindingExpr.stmts);
      if (instruction === Identifiers.hostProperty) {
        propertyBindings.push(instructionParams);
      } else if (instruction === Identifiers.attribute) {
        attributeBindings.push(instructionParams);
      } else if (instruction === Identifiers.syntheticHostProperty) {
        syntheticHostBindings.push(instructionParams);
      } else {
        updateInstructions.push({ reference: instruction, paramsOrFn: instructionParams, span: null });
      }
    }
    for (const bindingParams of propertyBindings) {
      updateInstructions.push({ reference: Identifiers.hostProperty, paramsOrFn: bindingParams, span: null });
    }
    for (const bindingParams of attributeBindings) {
      updateInstructions.push({ reference: Identifiers.attribute, paramsOrFn: bindingParams, span: null });
    }
    for (const bindingParams of syntheticHostBindings) {
      updateInstructions.push({ reference: Identifiers.syntheticHostProperty, paramsOrFn: bindingParams, span: null });
    }
    const hostAttrs = convertAttributesToExpressions(hostBindingsMetadata.attributes);
    styleBuilder.assignHostAttrs(hostAttrs, definitionMap);
    if (styleBuilder.hasBindings) {
      styleBuilder.buildUpdateLevelInstructions(getValueConverter()).forEach((instruction) => {
        for (const call2 of instruction.calls) {
          totalHostVarsCount += Math.max(call2.allocateBindingSlots - MIN_STYLING_BINDING_SLOTS_REQUIRED, 0);
          const { params, stmts } = convertStylingCall(call2, bindingContext, bindingFn, getNextBindingId);
          updateVariables.push(...stmts);
          updateInstructions.push({
            reference: instruction.reference,
            paramsOrFn: params,
            span: null
          });
        }
      });
    }
    if (totalHostVarsCount) {
      definitionMap.set("hostVars", literal(totalHostVarsCount));
    }
    if (createInstructions.length > 0 || updateInstructions.length > 0) {
      const hostBindingsFnName = name ? `${name}_HostBindings` : null;
      const statements = [];
      if (createInstructions.length > 0) {
        statements.push(renderFlagCheckIfStmt(1, getInstructionStatements(createInstructions)));
      }
      if (updateInstructions.length > 0) {
        statements.push(renderFlagCheckIfStmt(2, updateVariables.concat(getInstructionStatements(updateInstructions))));
      }
      return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], statements, INFERRED_TYPE, null, hostBindingsFnName);
    }
    return null;
  }
  function bindingFn(implicit, value, getNextBindingIdFn) {
    return convertPropertyBinding(null, implicit, value, getNextBindingIdFn());
  }
  function convertStylingCall(call2, bindingContext, bindingFn2, getNextBindingIdFn) {
    const stmts = [];
    const params = call2.params((value) => {
      const result = bindingFn2(bindingContext, value, getNextBindingIdFn);
      if (Array.isArray(result.stmts) && result.stmts.length > 0) {
        stmts.push(...result.stmts);
      }
      return result.currValExpr;
    });
    return { params, stmts };
  }
  function getBindingNameAndInstruction(binding) {
    let bindingName = binding.name;
    let instruction;
    const attrMatches = bindingName.match(ATTR_REGEX);
    if (attrMatches) {
      bindingName = attrMatches[1];
      instruction = Identifiers.attribute;
    } else {
      if (binding.isAnimation) {
        bindingName = prepareSyntheticPropertyName(bindingName);
        instruction = Identifiers.syntheticHostProperty;
      } else {
        instruction = Identifiers.hostProperty;
      }
    }
    return { bindingName, instruction, isAttribute: !!attrMatches };
  }
  function createHostListeners(eventBindings, name) {
    const listenerParams = [];
    const syntheticListenerParams = [];
    const instructions = [];
    for (const binding of eventBindings) {
      let bindingName = binding.name && sanitizeIdentifier(binding.name);
      const bindingFnName = binding.type === 1 ? prepareSyntheticListenerFunctionName(bindingName, binding.targetOrPhase) : bindingName;
      const handlerName = name && bindingName ? `${name}_${bindingFnName}_HostBindingHandler` : null;
      const params = prepareEventListenerParameters(BoundEvent.fromParsedEvent(binding), handlerName);
      if (binding.type == 1) {
        syntheticListenerParams.push(params);
      } else {
        listenerParams.push(params);
      }
    }
    for (const params of syntheticListenerParams) {
      instructions.push({ reference: Identifiers.syntheticHostListener, paramsOrFn: params, span: null });
    }
    for (const params of listenerParams) {
      instructions.push({ reference: Identifiers.listener, paramsOrFn: params, span: null });
    }
    return instructions;
  }
  var HOST_REG_EXP = /^(?:\[([^\]]+)\])|(?:\(([^\)]+)\))$/;
  function parseHostBindings(host) {
    const attributes = {};
    const listeners = {};
    const properties = {};
    const specialAttributes = {};
    for (const key of Object.keys(host)) {
      const value = host[key];
      const matches2 = key.match(HOST_REG_EXP);
      if (matches2 === null) {
        switch (key) {
          case "class":
            if (typeof value !== "string") {
              throw new Error(`Class binding must be string`);
            }
            specialAttributes.classAttr = value;
            break;
          case "style":
            if (typeof value !== "string") {
              throw new Error(`Style binding must be string`);
            }
            specialAttributes.styleAttr = value;
            break;
          default:
            if (typeof value === "string") {
              attributes[key] = literal(value);
            } else {
              attributes[key] = value;
            }
        }
      } else if (matches2[
        1
        /* HostBindingGroup.Binding */
      ] != null) {
        if (typeof value !== "string") {
          throw new Error(`Property binding must be string`);
        }
        properties[matches2[
          1
          /* HostBindingGroup.Binding */
        ]] = value;
      } else if (matches2[
        2
        /* HostBindingGroup.Event */
      ] != null) {
        if (typeof value !== "string") {
          throw new Error(`Event binding must be string`);
        }
        listeners[matches2[
          2
          /* HostBindingGroup.Event */
        ]] = value;
      }
    }
    return { attributes, listeners, properties, specialAttributes };
  }
  function verifyHostBindings(bindings, sourceSpan) {
    const bindingParser = makeBindingParser();
    bindingParser.createDirectiveHostEventAsts(bindings.listeners, sourceSpan);
    bindingParser.createBoundHostProperties(bindings.properties, sourceSpan);
    return bindingParser.errors;
  }
  function compileStyles(styles2, selector, hostSelector) {
    const shadowCss = new ShadowCss();
    return styles2.map((style) => {
      return shadowCss.shimCssText(style, selector, hostSelector);
    });
  }
  function createHostDirectivesType(meta) {
    if (!meta.hostDirectives?.length) {
      return NONE_TYPE;
    }
    return expressionType(literalArr(meta.hostDirectives.map((hostMeta) => literalMap([
      { key: "directive", value: typeofExpr(hostMeta.directive.type), quoted: false },
      { key: "inputs", value: stringMapAsLiteralExpression(hostMeta.inputs || {}), quoted: false },
      { key: "outputs", value: stringMapAsLiteralExpression(hostMeta.outputs || {}), quoted: false }
    ]))));
  }
  function createHostDirectivesFeatureArg(hostDirectives) {
    const expressions = [];
    let hasForwardRef = false;
    for (const current of hostDirectives) {
      if (!current.inputs && !current.outputs) {
        expressions.push(current.directive.type);
      } else {
        const keys = [{ key: "directive", value: current.directive.type, quoted: false }];
        if (current.inputs) {
          const inputsLiteral = createHostDirectivesMappingArray(current.inputs);
          if (inputsLiteral) {
            keys.push({ key: "inputs", value: inputsLiteral, quoted: false });
          }
        }
        if (current.outputs) {
          const outputsLiteral = createHostDirectivesMappingArray(current.outputs);
          if (outputsLiteral) {
            keys.push({ key: "outputs", value: outputsLiteral, quoted: false });
          }
        }
        expressions.push(literalMap(keys));
      }
      if (current.isForwardReference) {
        hasForwardRef = true;
      }
    }
    return hasForwardRef ? new FunctionExpr([], [new ReturnStatement(literalArr(expressions))]) : literalArr(expressions);
  }
  function createHostDirectivesMappingArray(mapping) {
    const elements = [];
    for (const publicName in mapping) {
      if (mapping.hasOwnProperty(publicName)) {
        elements.push(literal(publicName), literal(mapping[publicName]));
      }
    }
    return elements.length > 0 ? literalArr(elements) : null;
  }
  var R3TargetBinder = class {
    constructor(directiveMatcher) {
      this.directiveMatcher = directiveMatcher;
    }
    /**
     * Perform a binding operation on the given `Target` and return a `BoundTarget` which contains
     * metadata about the types referenced in the template.
     */
    bind(target) {
      if (!target.template) {
        throw new Error("Binding without a template not yet supported");
      }
      const scope = Scope.apply(target.template);
      const scopedNodeEntities = extractScopedNodeEntities(scope);
      const { directives, eagerDirectives, bindings, references } = DirectiveBinder.apply(target.template, this.directiveMatcher);
      const { expressions, symbols, nestingLevel, usedPipes, eagerPipes, deferBlocks } = TemplateBinder.applyWithScope(target.template, scope);
      return new R3BoundTarget(target, directives, eagerDirectives, bindings, references, expressions, symbols, nestingLevel, scopedNodeEntities, usedPipes, eagerPipes, deferBlocks);
    }
  };
  var Scope = class _Scope {
    constructor(parentScope, rootNode) {
      this.parentScope = parentScope;
      this.rootNode = rootNode;
      this.namedEntities = /* @__PURE__ */ new Map();
      this.elementsInScope = /* @__PURE__ */ new Set();
      this.childScopes = /* @__PURE__ */ new Map();
      this.isDeferred = parentScope !== null && parentScope.isDeferred ? true : rootNode instanceof DeferredBlock;
    }
    static newRootScope() {
      return new _Scope(null, null);
    }
    /**
     * Process a template (either as a `Template` sub-template with variables, or a plain array of
     * template `Node`s) and construct its `Scope`.
     */
    static apply(template2) {
      const scope = _Scope.newRootScope();
      scope.ingest(template2);
      return scope;
    }
    /**
     * Internal method to process the scoped node and populate the `Scope`.
     */
    ingest(nodeOrNodes) {
      if (nodeOrNodes instanceof Template) {
        nodeOrNodes.variables.forEach((node) => this.visitVariable(node));
        nodeOrNodes.children.forEach((node) => node.visit(this));
      } else if (nodeOrNodes instanceof IfBlockBranch) {
        if (nodeOrNodes.expressionAlias !== null) {
          this.visitVariable(nodeOrNodes.expressionAlias);
        }
        nodeOrNodes.children.forEach((node) => node.visit(this));
      } else if (nodeOrNodes instanceof ForLoopBlock) {
        this.visitVariable(nodeOrNodes.item);
        Object.values(nodeOrNodes.contextVariables).forEach((v) => this.visitVariable(v));
        nodeOrNodes.children.forEach((node) => node.visit(this));
      } else if (nodeOrNodes instanceof SwitchBlockCase || nodeOrNodes instanceof ForLoopBlockEmpty || nodeOrNodes instanceof DeferredBlock || nodeOrNodes instanceof DeferredBlockError || nodeOrNodes instanceof DeferredBlockPlaceholder || nodeOrNodes instanceof DeferredBlockLoading) {
        nodeOrNodes.children.forEach((node) => node.visit(this));
      } else {
        nodeOrNodes.forEach((node) => node.visit(this));
      }
    }
    visitElement(element2) {
      element2.references.forEach((node) => this.visitReference(node));
      element2.children.forEach((node) => node.visit(this));
      this.elementsInScope.add(element2);
    }
    visitTemplate(template2) {
      template2.references.forEach((node) => this.visitReference(node));
      this.ingestScopedNode(template2);
    }
    visitVariable(variable2) {
      this.maybeDeclare(variable2);
    }
    visitReference(reference2) {
      this.maybeDeclare(reference2);
    }
    visitDeferredBlock(deferred) {
      this.ingestScopedNode(deferred);
      deferred.placeholder?.visit(this);
      deferred.loading?.visit(this);
      deferred.error?.visit(this);
    }
    visitDeferredBlockPlaceholder(block) {
      this.ingestScopedNode(block);
    }
    visitDeferredBlockError(block) {
      this.ingestScopedNode(block);
    }
    visitDeferredBlockLoading(block) {
      this.ingestScopedNode(block);
    }
    visitSwitchBlock(block) {
      block.cases.forEach((node) => node.visit(this));
    }
    visitSwitchBlockCase(block) {
      this.ingestScopedNode(block);
    }
    visitForLoopBlock(block) {
      this.ingestScopedNode(block);
      block.empty?.visit(this);
    }
    visitForLoopBlockEmpty(block) {
      this.ingestScopedNode(block);
    }
    visitIfBlock(block) {
      block.branches.forEach((node) => node.visit(this));
    }
    visitIfBlockBranch(block) {
      this.ingestScopedNode(block);
    }
    // Unused visitors.
    visitContent(content) {
    }
    visitBoundAttribute(attr) {
    }
    visitBoundEvent(event) {
    }
    visitBoundText(text2) {
    }
    visitText(text2) {
    }
    visitTextAttribute(attr) {
    }
    visitIcu(icu) {
    }
    visitDeferredTrigger(trigger) {
    }
    visitUnknownBlock(block) {
    }
    maybeDeclare(thing) {
      if (!this.namedEntities.has(thing.name)) {
        this.namedEntities.set(thing.name, thing);
      }
    }
    /**
     * Look up a variable within this `Scope`.
     *
     * This can recurse into a parent `Scope` if it's available.
     */
    lookup(name) {
      if (this.namedEntities.has(name)) {
        return this.namedEntities.get(name);
      } else if (this.parentScope !== null) {
        return this.parentScope.lookup(name);
      } else {
        return null;
      }
    }
    /**
     * Get the child scope for a `ScopedNode`.
     *
     * This should always be defined.
     */
    getChildScope(node) {
      const res = this.childScopes.get(node);
      if (res === void 0) {
        throw new Error(`Assertion error: child scope for ${node} not found`);
      }
      return res;
    }
    ingestScopedNode(node) {
      const scope = new _Scope(this, node);
      scope.ingest(node);
      this.childScopes.set(node, scope);
    }
  };
  var DirectiveBinder = class _DirectiveBinder {
    constructor(matcher, directives, eagerDirectives, bindings, references) {
      this.matcher = matcher;
      this.directives = directives;
      this.eagerDirectives = eagerDirectives;
      this.bindings = bindings;
      this.references = references;
      this.isInDeferBlock = false;
    }
    /**
     * Process a template (list of `Node`s) and perform directive matching against each node.
     *
     * @param template the list of template `Node`s to match (recursively).
     * @param selectorMatcher a `SelectorMatcher` containing the directives that are in scope for
     * this template.
     * @returns three maps which contain information about directives in the template: the
     * `directives` map which lists directives matched on each node, the `bindings` map which
     * indicates which directives claimed which bindings (inputs, outputs, etc), and the `references`
     * map which resolves #references (`Reference`s) within the template to the named directive or
     * template node.
     */
    static apply(template2, selectorMatcher) {
      const directives = /* @__PURE__ */ new Map();
      const bindings = /* @__PURE__ */ new Map();
      const references = /* @__PURE__ */ new Map();
      const eagerDirectives = [];
      const matcher = new _DirectiveBinder(selectorMatcher, directives, eagerDirectives, bindings, references);
      matcher.ingest(template2);
      return { directives, eagerDirectives, bindings, references };
    }
    ingest(template2) {
      template2.forEach((node) => node.visit(this));
    }
    visitElement(element2) {
      this.visitElementOrTemplate(element2);
    }
    visitTemplate(template2) {
      this.visitElementOrTemplate(template2);
    }
    visitElementOrTemplate(node) {
      const cssSelector = createCssSelectorFromNode(node);
      const directives = [];
      this.matcher.match(cssSelector, (_selector, results) => directives.push(...results));
      if (directives.length > 0) {
        this.directives.set(node, directives);
        if (!this.isInDeferBlock) {
          this.eagerDirectives.push(...directives);
        }
      }
      node.references.forEach((ref) => {
        let dirTarget = null;
        if (ref.value.trim() === "") {
          dirTarget = directives.find((dir) => dir.isComponent) || null;
        } else {
          dirTarget = directives.find((dir) => dir.exportAs !== null && dir.exportAs.some((value) => value === ref.value)) || null;
          if (dirTarget === null) {
            return;
          }
        }
        if (dirTarget !== null) {
          this.references.set(ref, { directive: dirTarget, node });
        } else {
          this.references.set(ref, node);
        }
      });
      const setAttributeBinding = (attribute2, ioType) => {
        const dir = directives.find((dir2) => dir2[ioType].hasBindingPropertyName(attribute2.name));
        const binding = dir !== void 0 ? dir : node;
        this.bindings.set(attribute2, binding);
      };
      node.inputs.forEach((input2) => setAttributeBinding(input2, "inputs"));
      node.attributes.forEach((attr) => setAttributeBinding(attr, "inputs"));
      if (node instanceof Template) {
        node.templateAttrs.forEach((attr) => setAttributeBinding(attr, "inputs"));
      }
      node.outputs.forEach((output2) => setAttributeBinding(output2, "outputs"));
      node.children.forEach((child) => child.visit(this));
    }
    visitDeferredBlock(deferred) {
      const wasInDeferBlock = this.isInDeferBlock;
      this.isInDeferBlock = true;
      deferred.children.forEach((child) => child.visit(this));
      this.isInDeferBlock = wasInDeferBlock;
      deferred.placeholder?.visit(this);
      deferred.loading?.visit(this);
      deferred.error?.visit(this);
    }
    visitDeferredBlockPlaceholder(block) {
      block.children.forEach((child) => child.visit(this));
    }
    visitDeferredBlockError(block) {
      block.children.forEach((child) => child.visit(this));
    }
    visitDeferredBlockLoading(block) {
      block.children.forEach((child) => child.visit(this));
    }
    visitSwitchBlock(block) {
      block.cases.forEach((node) => node.visit(this));
    }
    visitSwitchBlockCase(block) {
      block.children.forEach((node) => node.visit(this));
    }
    visitForLoopBlock(block) {
      block.item.visit(this);
      Object.values(block.contextVariables).forEach((v) => v.visit(this));
      block.children.forEach((node) => node.visit(this));
      block.empty?.visit(this);
    }
    visitForLoopBlockEmpty(block) {
      block.children.forEach((node) => node.visit(this));
    }
    visitIfBlock(block) {
      block.branches.forEach((node) => node.visit(this));
    }
    visitIfBlockBranch(block) {
      block.expressionAlias?.visit(this);
      block.children.forEach((node) => node.visit(this));
    }
    // Unused visitors.
    visitContent(content) {
    }
    visitVariable(variable2) {
    }
    visitReference(reference2) {
    }
    visitTextAttribute(attribute2) {
    }
    visitBoundAttribute(attribute2) {
    }
    visitBoundEvent(attribute2) {
    }
    visitBoundAttributeOrEvent(node) {
    }
    visitText(text2) {
    }
    visitBoundText(text2) {
    }
    visitIcu(icu) {
    }
    visitDeferredTrigger(trigger) {
    }
    visitUnknownBlock(block) {
    }
  };
  var TemplateBinder = class _TemplateBinder extends RecursiveAstVisitor {
    constructor(bindings, symbols, usedPipes, eagerPipes, deferBlocks, nestingLevel, scope, rootNode, level) {
      super();
      this.bindings = bindings;
      this.symbols = symbols;
      this.usedPipes = usedPipes;
      this.eagerPipes = eagerPipes;
      this.deferBlocks = deferBlocks;
      this.nestingLevel = nestingLevel;
      this.scope = scope;
      this.rootNode = rootNode;
      this.level = level;
      this.visitNode = (node) => node.visit(this);
    }
    // This method is defined to reconcile the type of TemplateBinder since both
    // RecursiveAstVisitor and Visitor define the visit() method in their
    // interfaces.
    visit(node, context2) {
      if (node instanceof AST) {
        node.visit(this, context2);
      } else {
        node.visit(this);
      }
    }
    /**
     * Process a template and extract metadata about expressions and symbols within.
     *
     * @param nodes the nodes of the template to process
     * @param scope the `Scope` of the template being processed.
     * @returns three maps which contain metadata about the template: `expressions` which interprets
     * special `AST` nodes in expressions as pointing to references or variables declared within the
     * template, `symbols` which maps those variables and references to the nested `Template` which
     * declares them, if any, and `nestingLevel` which associates each `Template` with a integer
     * nesting level (how many levels deep within the template structure the `Template` is), starting
     * at 1.
     */
    static applyWithScope(nodes, scope) {
      const expressions = /* @__PURE__ */ new Map();
      const symbols = /* @__PURE__ */ new Map();
      const nestingLevel = /* @__PURE__ */ new Map();
      const usedPipes = /* @__PURE__ */ new Set();
      const eagerPipes = /* @__PURE__ */ new Set();
      const template2 = nodes instanceof Template ? nodes : null;
      const deferBlocks = /* @__PURE__ */ new Map();
      const binder = new _TemplateBinder(expressions, symbols, usedPipes, eagerPipes, deferBlocks, nestingLevel, scope, template2, 0);
      binder.ingest(nodes);
      return { expressions, symbols, nestingLevel, usedPipes, eagerPipes, deferBlocks };
    }
    ingest(nodeOrNodes) {
      if (nodeOrNodes instanceof Template) {
        nodeOrNodes.variables.forEach(this.visitNode);
        nodeOrNodes.children.forEach(this.visitNode);
        this.nestingLevel.set(nodeOrNodes, this.level);
      } else if (nodeOrNodes instanceof IfBlockBranch) {
        if (nodeOrNodes.expressionAlias !== null) {
          this.visitNode(nodeOrNodes.expressionAlias);
        }
        nodeOrNodes.children.forEach(this.visitNode);
        this.nestingLevel.set(nodeOrNodes, this.level);
      } else if (nodeOrNodes instanceof ForLoopBlock) {
        this.visitNode(nodeOrNodes.item);
        Object.values(nodeOrNodes.contextVariables).forEach((v) => this.visitNode(v));
        nodeOrNodes.trackBy.visit(this);
        nodeOrNodes.children.forEach(this.visitNode);
        this.nestingLevel.set(nodeOrNodes, this.level);
      } else if (nodeOrNodes instanceof DeferredBlock) {
        if (this.scope.rootNode !== nodeOrNodes) {
          throw new Error(`Assertion error: resolved incorrect scope for deferred block ${nodeOrNodes}`);
        }
        this.deferBlocks.set(nodeOrNodes, this.scope);
        nodeOrNodes.children.forEach((node) => node.visit(this));
        this.nestingLevel.set(nodeOrNodes, this.level);
      } else if (nodeOrNodes instanceof SwitchBlockCase || nodeOrNodes instanceof ForLoopBlockEmpty || nodeOrNodes instanceof DeferredBlockError || nodeOrNodes instanceof DeferredBlockPlaceholder || nodeOrNodes instanceof DeferredBlockLoading) {
        nodeOrNodes.children.forEach((node) => node.visit(this));
        this.nestingLevel.set(nodeOrNodes, this.level);
      } else {
        nodeOrNodes.forEach(this.visitNode);
      }
    }
    visitElement(element2) {
      element2.inputs.forEach(this.visitNode);
      element2.outputs.forEach(this.visitNode);
      element2.children.forEach(this.visitNode);
      element2.references.forEach(this.visitNode);
    }
    visitTemplate(template2) {
      template2.inputs.forEach(this.visitNode);
      template2.outputs.forEach(this.visitNode);
      template2.templateAttrs.forEach(this.visitNode);
      template2.references.forEach(this.visitNode);
      this.ingestScopedNode(template2);
    }
    visitVariable(variable2) {
      if (this.rootNode !== null) {
        this.symbols.set(variable2, this.rootNode);
      }
    }
    visitReference(reference2) {
      if (this.rootNode !== null) {
        this.symbols.set(reference2, this.rootNode);
      }
    }
    // Unused template visitors
    visitText(text2) {
    }
    visitContent(content) {
    }
    visitTextAttribute(attribute2) {
    }
    visitUnknownBlock(block) {
    }
    visitDeferredTrigger() {
    }
    visitIcu(icu) {
      Object.keys(icu.vars).forEach((key) => icu.vars[key].visit(this));
      Object.keys(icu.placeholders).forEach((key) => icu.placeholders[key].visit(this));
    }
    // The remaining visitors are concerned with processing AST expressions within template bindings
    visitBoundAttribute(attribute2) {
      attribute2.value.visit(this);
    }
    visitBoundEvent(event) {
      event.handler.visit(this);
    }
    visitDeferredBlock(deferred) {
      this.ingestScopedNode(deferred);
      deferred.triggers.when?.value.visit(this);
      deferred.prefetchTriggers.when?.value.visit(this);
      deferred.placeholder && this.visitNode(deferred.placeholder);
      deferred.loading && this.visitNode(deferred.loading);
      deferred.error && this.visitNode(deferred.error);
    }
    visitDeferredBlockPlaceholder(block) {
      this.ingestScopedNode(block);
    }
    visitDeferredBlockError(block) {
      this.ingestScopedNode(block);
    }
    visitDeferredBlockLoading(block) {
      this.ingestScopedNode(block);
    }
    visitSwitchBlock(block) {
      block.expression.visit(this);
      block.cases.forEach(this.visitNode);
    }
    visitSwitchBlockCase(block) {
      block.expression?.visit(this);
      this.ingestScopedNode(block);
    }
    visitForLoopBlock(block) {
      block.expression.visit(this);
      this.ingestScopedNode(block);
      block.empty?.visit(this);
    }
    visitForLoopBlockEmpty(block) {
      this.ingestScopedNode(block);
    }
    visitIfBlock(block) {
      block.branches.forEach((node) => node.visit(this));
    }
    visitIfBlockBranch(block) {
      block.expression?.visit(this);
      this.ingestScopedNode(block);
    }
    visitBoundText(text2) {
      text2.value.visit(this);
    }
    visitPipe(ast, context2) {
      this.usedPipes.add(ast.name);
      if (!this.scope.isDeferred) {
        this.eagerPipes.add(ast.name);
      }
      return super.visitPipe(ast, context2);
    }
    // These five types of AST expressions can refer to expression roots, which could be variables
    // or references in the current scope.
    visitPropertyRead(ast, context2) {
      this.maybeMap(ast, ast.name);
      return super.visitPropertyRead(ast, context2);
    }
    visitSafePropertyRead(ast, context2) {
      this.maybeMap(ast, ast.name);
      return super.visitSafePropertyRead(ast, context2);
    }
    visitPropertyWrite(ast, context2) {
      this.maybeMap(ast, ast.name);
      return super.visitPropertyWrite(ast, context2);
    }
    ingestScopedNode(node) {
      const childScope = this.scope.getChildScope(node);
      const binder = new _TemplateBinder(this.bindings, this.symbols, this.usedPipes, this.eagerPipes, this.deferBlocks, this.nestingLevel, childScope, node, this.level + 1);
      binder.ingest(node);
    }
    maybeMap(ast, name) {
      if (!(ast.receiver instanceof ImplicitReceiver)) {
        return;
      }
      let target = this.scope.lookup(name);
      if (target !== null) {
        this.bindings.set(ast, target);
      }
    }
  };
  var R3BoundTarget = class {
    constructor(target, directives, eagerDirectives, bindings, references, exprTargets, symbols, nestingLevel, scopedNodeEntities, usedPipes, eagerPipes, deferBlocks) {
      this.target = target;
      this.directives = directives;
      this.eagerDirectives = eagerDirectives;
      this.bindings = bindings;
      this.references = references;
      this.exprTargets = exprTargets;
      this.symbols = symbols;
      this.nestingLevel = nestingLevel;
      this.scopedNodeEntities = scopedNodeEntities;
      this.usedPipes = usedPipes;
      this.eagerPipes = eagerPipes;
      this.deferBlocks = deferBlocks;
    }
    getEntitiesInScope(node) {
      return this.scopedNodeEntities.get(node) ?? /* @__PURE__ */ new Set();
    }
    getDirectivesOfNode(node) {
      return this.directives.get(node) || null;
    }
    getReferenceTarget(ref) {
      return this.references.get(ref) || null;
    }
    getConsumerOfBinding(binding) {
      return this.bindings.get(binding) || null;
    }
    getExpressionTarget(expr) {
      return this.exprTargets.get(expr) || null;
    }
    getDefinitionNodeOfSymbol(symbol) {
      return this.symbols.get(symbol) || null;
    }
    getNestingLevel(node) {
      return this.nestingLevel.get(node) || 0;
    }
    getUsedDirectives() {
      const set = /* @__PURE__ */ new Set();
      this.directives.forEach((dirs) => dirs.forEach((dir) => set.add(dir)));
      return Array.from(set.values());
    }
    getEagerlyUsedDirectives() {
      const set = new Set(this.eagerDirectives);
      return Array.from(set.values());
    }
    getUsedPipes() {
      return Array.from(this.usedPipes);
    }
    getEagerlyUsedPipes() {
      return Array.from(this.eagerPipes);
    }
    getDeferBlocks() {
      return Array.from(this.deferBlocks.keys());
    }
    getDeferredTriggerTarget(block, trigger) {
      if (!(trigger instanceof InteractionDeferredTrigger) && !(trigger instanceof ViewportDeferredTrigger) && !(trigger instanceof HoverDeferredTrigger)) {
        return null;
      }
      const name = trigger.reference;
      if (name === null) {
        let trigger2 = null;
        if (block.placeholder !== null) {
          for (const child of block.placeholder.children) {
            if (child instanceof Comment$1) {
              continue;
            }
            if (trigger2 !== null) {
              return null;
            }
            if (child instanceof Element$1) {
              trigger2 = child;
            }
          }
        }
        return trigger2;
      }
      const outsideRef = this.findEntityInScope(block, name);
      if (outsideRef instanceof Reference && this.getDefinitionNodeOfSymbol(outsideRef) !== block) {
        const target = this.getReferenceTarget(outsideRef);
        if (target !== null) {
          return this.referenceTargetToElement(target);
        }
      }
      if (block.placeholder !== null) {
        const refInPlaceholder = this.findEntityInScope(block.placeholder, name);
        const targetInPlaceholder = refInPlaceholder instanceof Reference ? this.getReferenceTarget(refInPlaceholder) : null;
        if (targetInPlaceholder !== null) {
          return this.referenceTargetToElement(targetInPlaceholder);
        }
      }
      return null;
    }
    isDeferred(element2) {
      for (const deferredScope of this.deferBlocks.values()) {
        const stack = [deferredScope];
        while (stack.length > 0) {
          const current = stack.pop();
          if (current.elementsInScope.has(element2)) {
            return true;
          }
          stack.push(...current.childScopes.values());
        }
      }
      return false;
    }
    /**
     * Finds an entity with a specific name in a scope.
     * @param rootNode Root node of the scope.
     * @param name Name of the entity.
     */
    findEntityInScope(rootNode, name) {
      const entities = this.getEntitiesInScope(rootNode);
      for (const entitity of entities) {
        if (entitity.name === name) {
          return entitity;
        }
      }
      return null;
    }
    /** Coerces a `ReferenceTarget` to an `Element`, if possible. */
    referenceTargetToElement(target) {
      if (target instanceof Element$1) {
        return target;
      }
      if (target instanceof Template) {
        return null;
      }
      return this.referenceTargetToElement(target.node);
    }
  };
  function extractScopedNodeEntities(rootScope) {
    const entityMap = /* @__PURE__ */ new Map();
    function extractScopeEntities(scope) {
      if (entityMap.has(scope.rootNode)) {
        return entityMap.get(scope.rootNode);
      }
      const currentEntities = scope.namedEntities;
      let entities;
      if (scope.parentScope !== null) {
        entities = new Map([...extractScopeEntities(scope.parentScope), ...currentEntities]);
      } else {
        entities = new Map(currentEntities);
      }
      entityMap.set(scope.rootNode, entities);
      return entities;
    }
    const scopesToProcess = [rootScope];
    while (scopesToProcess.length > 0) {
      const scope = scopesToProcess.pop();
      for (const childScope of scope.childScopes.values()) {
        scopesToProcess.push(childScope);
      }
      extractScopeEntities(scope);
    }
    const templateEntities = /* @__PURE__ */ new Map();
    for (const [template2, entities] of entityMap) {
      templateEntities.set(template2, new Set(entities.values()));
    }
    return templateEntities;
  }
  var ResourceLoader = class {
  };
  var SHOULD_USE_TEMPLATE_PIPELINE_FOR_JIT = true;
  var CompilerFacadeImpl = class {
    constructor(jitEvaluator = new JitEvaluator()) {
      this.jitEvaluator = jitEvaluator;
      this.FactoryTarget = FactoryTarget$1;
      this.ResourceLoader = ResourceLoader;
      this.elementSchemaRegistry = new DomElementSchemaRegistry();
    }
    compilePipe(angularCoreEnv2, sourceMapUrl, facade) {
      const metadata = {
        name: facade.name,
        type: wrapReference(facade.type),
        typeArgumentCount: 0,
        deps: null,
        pipeName: facade.pipeName,
        pure: facade.pure,
        isStandalone: facade.isStandalone
      };
      const res = compilePipeFromMetadata(metadata);
      return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, []);
    }
    compilePipeDeclaration(angularCoreEnv2, sourceMapUrl, declaration) {
      const meta = convertDeclarePipeFacadeToMetadata(declaration);
      const res = compilePipeFromMetadata(meta);
      return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, []);
    }
    compileInjectable(angularCoreEnv2, sourceMapUrl, facade) {
      const { expression, statements } = compileInjectable2(
        {
          name: facade.name,
          type: wrapReference(facade.type),
          typeArgumentCount: facade.typeArgumentCount,
          providedIn: computeProvidedIn(facade.providedIn),
          useClass: convertToProviderExpression(facade, "useClass"),
          useFactory: wrapExpression(facade, "useFactory"),
          useValue: convertToProviderExpression(facade, "useValue"),
          useExisting: convertToProviderExpression(facade, "useExisting"),
          deps: facade.deps?.map(convertR3DependencyMetadata)
        },
        /* resolveForwardRefs */
        true
      );
      return this.jitExpression(expression, angularCoreEnv2, sourceMapUrl, statements);
    }
    compileInjectableDeclaration(angularCoreEnv2, sourceMapUrl, facade) {
      const { expression, statements } = compileInjectable2(
        {
          name: facade.type.name,
          type: wrapReference(facade.type),
          typeArgumentCount: 0,
          providedIn: computeProvidedIn(facade.providedIn),
          useClass: convertToProviderExpression(facade, "useClass"),
          useFactory: wrapExpression(facade, "useFactory"),
          useValue: convertToProviderExpression(facade, "useValue"),
          useExisting: convertToProviderExpression(facade, "useExisting"),
          deps: facade.deps?.map(convertR3DeclareDependencyMetadata)
        },
        /* resolveForwardRefs */
        true
      );
      return this.jitExpression(expression, angularCoreEnv2, sourceMapUrl, statements);
    }
    compileInjector(angularCoreEnv2, sourceMapUrl, facade) {
      const meta = {
        name: facade.name,
        type: wrapReference(facade.type),
        providers: facade.providers && facade.providers.length > 0 ? new WrappedNodeExpr(facade.providers) : null,
        imports: facade.imports.map((i) => new WrappedNodeExpr(i))
      };
      const res = compileInjector(meta);
      return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, []);
    }
    compileInjectorDeclaration(angularCoreEnv2, sourceMapUrl, declaration) {
      const meta = convertDeclareInjectorFacadeToMetadata(declaration);
      const res = compileInjector(meta);
      return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, []);
    }
    compileNgModule(angularCoreEnv2, sourceMapUrl, facade) {
      const meta = {
        kind: R3NgModuleMetadataKind.Global,
        type: wrapReference(facade.type),
        bootstrap: facade.bootstrap.map(wrapReference),
        declarations: facade.declarations.map(wrapReference),
        publicDeclarationTypes: null,
        // only needed for types in AOT
        imports: facade.imports.map(wrapReference),
        includeImportTypes: true,
        exports: facade.exports.map(wrapReference),
        selectorScopeMode: R3SelectorScopeMode.Inline,
        containsForwardDecls: false,
        schemas: facade.schemas ? facade.schemas.map(wrapReference) : null,
        id: facade.id ? new WrappedNodeExpr(facade.id) : null
      };
      const res = compileNgModule2(meta);
      return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, []);
    }
    compileNgModuleDeclaration(angularCoreEnv2, sourceMapUrl, declaration) {
      const expression = compileNgModuleDeclarationExpression(declaration);
      return this.jitExpression(expression, angularCoreEnv2, sourceMapUrl, []);
    }
    compileDirective(angularCoreEnv2, sourceMapUrl, facade) {
      const meta = convertDirectiveFacadeToMetadata(facade);
      return this.compileDirectiveFromMeta(angularCoreEnv2, sourceMapUrl, meta);
    }
    compileDirectiveDeclaration(angularCoreEnv2, sourceMapUrl, declaration) {
      const typeSourceSpan = this.createParseSourceSpan("Directive", declaration.type.name, sourceMapUrl);
      const meta = convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan);
      return this.compileDirectiveFromMeta(angularCoreEnv2, sourceMapUrl, meta);
    }
    compileDirectiveFromMeta(angularCoreEnv2, sourceMapUrl, meta) {
      const constantPool = new ConstantPool();
      const bindingParser = makeBindingParser();
      const res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);
      return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, constantPool.statements);
    }
    compileComponent(angularCoreEnv2, sourceMapUrl, facade) {
      const { template: template2, interpolation, deferBlocks } = parseJitTemplate(facade.template, facade.name, sourceMapUrl, facade.preserveWhitespaces, facade.interpolation);
      const meta = {
        ...facade,
        ...convertDirectiveFacadeToMetadata(facade),
        selector: facade.selector || this.elementSchemaRegistry.getDefaultComponentElementName(),
        template: template2,
        declarations: facade.declarations.map(convertDeclarationFacadeToMetadata),
        declarationListEmitMode: 0,
        deferBlocks,
        deferrableTypes: /* @__PURE__ */ new Map(),
        deferrableDeclToImportDecl: /* @__PURE__ */ new Map(),
        deferBlockDepsEmitMode: 0,
        styles: [...facade.styles, ...template2.styles],
        encapsulation: facade.encapsulation,
        interpolation,
        changeDetection: facade.changeDetection ?? null,
        animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null,
        viewProviders: facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) : null,
        relativeContextFilePath: "",
        i18nUseExternalIds: true,
        useTemplatePipeline: SHOULD_USE_TEMPLATE_PIPELINE_FOR_JIT
      };
      const jitExpressionSourceMap = `ng:///${facade.name}.js`;
      return this.compileComponentFromMeta(angularCoreEnv2, jitExpressionSourceMap, meta);
    }
    compileComponentDeclaration(angularCoreEnv2, sourceMapUrl, declaration) {
      const typeSourceSpan = this.createParseSourceSpan("Component", declaration.type.name, sourceMapUrl);
      const meta = convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl);
      return this.compileComponentFromMeta(angularCoreEnv2, sourceMapUrl, meta);
    }
    compileComponentFromMeta(angularCoreEnv2, sourceMapUrl, meta) {
      const constantPool = new ConstantPool();
      const bindingParser = makeBindingParser(meta.interpolation);
      const res = compileComponentFromMetadata(meta, constantPool, bindingParser);
      return this.jitExpression(res.expression, angularCoreEnv2, sourceMapUrl, constantPool.statements);
    }
    compileFactory(angularCoreEnv2, sourceMapUrl, meta) {
      const factoryRes = compileFactoryFunction({
        name: meta.name,
        type: wrapReference(meta.type),
        typeArgumentCount: meta.typeArgumentCount,
        deps: convertR3DependencyMetadataArray(meta.deps),
        target: meta.target
      });
      return this.jitExpression(factoryRes.expression, angularCoreEnv2, sourceMapUrl, factoryRes.statements);
    }
    compileFactoryDeclaration(angularCoreEnv2, sourceMapUrl, meta) {
      const factoryRes = compileFactoryFunction({
        name: meta.type.name,
        type: wrapReference(meta.type),
        typeArgumentCount: 0,
        deps: Array.isArray(meta.deps) ? meta.deps.map(convertR3DeclareDependencyMetadata) : meta.deps,
        target: meta.target
      });
      return this.jitExpression(factoryRes.expression, angularCoreEnv2, sourceMapUrl, factoryRes.statements);
    }
    createParseSourceSpan(kind, typeName, sourceUrl) {
      return r3JitTypeSourceSpan(kind, typeName, sourceUrl);
    }
    /**
     * JIT compiles an expression and returns the result of executing that expression.
     *
     * @param def the definition which will be compiled and executed to get the value to patch
     * @param context an object map of @angular/core symbol names to symbols which will be available
     * in the context of the compiled expression
     * @param sourceUrl a URL to use for the source map of the compiled expression
     * @param preStatements a collection of statements that should be evaluated before the expression.
     */
    jitExpression(def, context2, sourceUrl, preStatements) {
      const statements = [
        ...preStatements,
        new DeclareVarStmt("$def", def, void 0, StmtModifier.Exported)
      ];
      const res = this.jitEvaluator.evaluateStatements(
        sourceUrl,
        statements,
        new R3JitReflector(context2),
        /* enableSourceMaps */
        true
      );
      return res["$def"];
    }
  };
  function convertToR3QueryMetadata2(facade) {
    return {
      ...facade,
      isSignal: facade.isSignal,
      predicate: convertQueryPredicate(facade.predicate),
      read: facade.read ? new WrappedNodeExpr(facade.read) : null,
      static: facade.static,
      emitDistinctChangesOnly: facade.emitDistinctChangesOnly
    };
  }
  function convertQueryDeclarationToMetadata(declaration) {
    return {
      propertyName: declaration.propertyName,
      first: declaration.first ?? false,
      predicate: convertQueryPredicate(declaration.predicate),
      descendants: declaration.descendants ?? false,
      read: declaration.read ? new WrappedNodeExpr(declaration.read) : null,
      static: declaration.static ?? false,
      emitDistinctChangesOnly: declaration.emitDistinctChangesOnly ?? true,
      isSignal: !!declaration.isSignal
    };
  }
  function convertQueryPredicate(predicate) {
    return Array.isArray(predicate) ? (
      // The predicate is an array of strings so pass it through.
      predicate
    ) : (
      // The predicate is a type - assume that we will need to unwrap any `forwardRef()` calls.
      createMayBeForwardRefExpression(
        new WrappedNodeExpr(predicate),
        1
        /* ForwardRefHandling.Wrapped */
      )
    );
  }
  function convertDirectiveFacadeToMetadata(facade) {
    const inputsFromMetadata = parseInputsArray(facade.inputs || []);
    const outputsFromMetadata = parseMappingStringArray(facade.outputs || []);
    const propMetadata = facade.propMetadata;
    const inputsFromType = {};
    const outputsFromType = {};
    for (const field in propMetadata) {
      if (propMetadata.hasOwnProperty(field)) {
        propMetadata[field].forEach((ann) => {
          if (isInput(ann)) {
            inputsFromType[field] = {
              bindingPropertyName: ann.alias || field,
              classPropertyName: field,
              required: ann.required || false,
              // For JIT, decorators are used to declare signal inputs. That is because of
              // a technical limitation where it's not possible to statically reflect class
              // members of a directive/component at runtime before instantiating the class.
              isSignal: !!ann.isSignal,
              transformFunction: ann.transform != null ? new WrappedNodeExpr(ann.transform) : null
            };
          } else if (isOutput(ann)) {
            outputsFromType[field] = ann.alias || field;
          }
        });
      }
    }
    return {
      ...facade,
      typeArgumentCount: 0,
      typeSourceSpan: facade.typeSourceSpan,
      type: wrapReference(facade.type),
      deps: null,
      host: {
        ...extractHostBindings(facade.propMetadata, facade.typeSourceSpan, facade.host),
        useTemplatePipeline: SHOULD_USE_TEMPLATE_PIPELINE_FOR_JIT
      },
      inputs: { ...inputsFromMetadata, ...inputsFromType },
      outputs: { ...outputsFromMetadata, ...outputsFromType },
      queries: facade.queries.map(convertToR3QueryMetadata2),
      providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null,
      viewQueries: facade.viewQueries.map(convertToR3QueryMetadata2),
      fullInheritance: false,
      hostDirectives: convertHostDirectivesToMetadata(facade)
    };
  }
  function convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan) {
    return {
      name: declaration.type.name,
      type: wrapReference(declaration.type),
      typeSourceSpan,
      selector: declaration.selector ?? null,
      inputs: declaration.inputs ? inputsPartialMetadataToInputMetadata(declaration.inputs) : {},
      outputs: declaration.outputs ?? {},
      host: convertHostDeclarationToMetadata(declaration.host),
      queries: (declaration.queries ?? []).map(convertQueryDeclarationToMetadata),
      viewQueries: (declaration.viewQueries ?? []).map(convertQueryDeclarationToMetadata),
      providers: declaration.providers !== void 0 ? new WrappedNodeExpr(declaration.providers) : null,
      exportAs: declaration.exportAs ?? null,
      usesInheritance: declaration.usesInheritance ?? false,
      lifecycle: { usesOnChanges: declaration.usesOnChanges ?? false },
      deps: null,
      typeArgumentCount: 0,
      fullInheritance: false,
      isStandalone: declaration.isStandalone ?? false,
      isSignal: declaration.isSignal ?? false,
      hostDirectives: convertHostDirectivesToMetadata(declaration)
    };
  }
  function convertHostDeclarationToMetadata(host = {}) {
    return {
      attributes: convertOpaqueValuesToExpressions(host.attributes ?? {}),
      listeners: host.listeners ?? {},
      properties: host.properties ?? {},
      specialAttributes: {
        classAttr: host.classAttribute,
        styleAttr: host.styleAttribute
      },
      useTemplatePipeline: SHOULD_USE_TEMPLATE_PIPELINE_FOR_JIT
    };
  }
  function convertHostDirectivesToMetadata(metadata) {
    if (metadata.hostDirectives?.length) {
      return metadata.hostDirectives.map((hostDirective) => {
        return typeof hostDirective === "function" ? {
          directive: wrapReference(hostDirective),
          inputs: null,
          outputs: null,
          isForwardReference: false
        } : {
          directive: wrapReference(hostDirective.directive),
          isForwardReference: false,
          inputs: hostDirective.inputs ? parseMappingStringArray(hostDirective.inputs) : null,
          outputs: hostDirective.outputs ? parseMappingStringArray(hostDirective.outputs) : null
        };
      });
    }
    return null;
  }
  function convertOpaqueValuesToExpressions(obj) {
    const result = {};
    for (const key of Object.keys(obj)) {
      result[key] = new WrappedNodeExpr(obj[key]);
    }
    return result;
  }
  function convertDeclareComponentFacadeToMetadata(decl, typeSourceSpan, sourceMapUrl) {
    const { template: template2, interpolation, deferBlocks } = parseJitTemplate(decl.template, decl.type.name, sourceMapUrl, decl.preserveWhitespaces ?? false, decl.interpolation);
    const declarations = [];
    if (decl.dependencies) {
      for (const innerDep of decl.dependencies) {
        switch (innerDep.kind) {
          case "directive":
          case "component":
            declarations.push(convertDirectiveDeclarationToMetadata(innerDep));
            break;
          case "pipe":
            declarations.push(convertPipeDeclarationToMetadata(innerDep));
            break;
        }
      }
    } else if (decl.components || decl.directives || decl.pipes) {
      decl.components && declarations.push(...decl.components.map((dir) => convertDirectiveDeclarationToMetadata(
        dir,
        /* isComponent */
        true
      )));
      decl.directives && declarations.push(...decl.directives.map((dir) => convertDirectiveDeclarationToMetadata(dir)));
      decl.pipes && declarations.push(...convertPipeMapToMetadata(decl.pipes));
    }
    return {
      ...convertDeclareDirectiveFacadeToMetadata(decl, typeSourceSpan),
      template: template2,
      styles: decl.styles ?? [],
      declarations,
      viewProviders: decl.viewProviders !== void 0 ? new WrappedNodeExpr(decl.viewProviders) : null,
      animations: decl.animations !== void 0 ? new WrappedNodeExpr(decl.animations) : null,
      deferBlocks,
      deferrableTypes: /* @__PURE__ */ new Map(),
      deferrableDeclToImportDecl: /* @__PURE__ */ new Map(),
      deferBlockDepsEmitMode: 0,
      changeDetection: decl.changeDetection ?? ChangeDetectionStrategy2.Default,
      encapsulation: decl.encapsulation ?? ViewEncapsulation2.Emulated,
      interpolation,
      declarationListEmitMode: 2,
      relativeContextFilePath: "",
      i18nUseExternalIds: true,
      useTemplatePipeline: SHOULD_USE_TEMPLATE_PIPELINE_FOR_JIT
    };
  }
  function convertDeclarationFacadeToMetadata(declaration) {
    return {
      ...declaration,
      type: new WrappedNodeExpr(declaration.type)
    };
  }
  function convertDirectiveDeclarationToMetadata(declaration, isComponent2 = null) {
    return {
      kind: R3TemplateDependencyKind2.Directive,
      isComponent: isComponent2 || declaration.kind === "component",
      selector: declaration.selector,
      type: new WrappedNodeExpr(declaration.type),
      inputs: declaration.inputs ?? [],
      outputs: declaration.outputs ?? [],
      exportAs: declaration.exportAs ?? null
    };
  }
  function convertPipeMapToMetadata(pipes) {
    if (!pipes) {
      return [];
    }
    return Object.keys(pipes).map((name) => {
      return {
        kind: R3TemplateDependencyKind2.Pipe,
        name,
        type: new WrappedNodeExpr(pipes[name])
      };
    });
  }
  function convertPipeDeclarationToMetadata(pipe3) {
    return {
      kind: R3TemplateDependencyKind2.Pipe,
      name: pipe3.name,
      type: new WrappedNodeExpr(pipe3.type)
    };
  }
  function parseJitTemplate(template2, typeName, sourceMapUrl, preserveWhitespaces, interpolation) {
    const interpolationConfig = interpolation ? InterpolationConfig.fromArray(interpolation) : DEFAULT_INTERPOLATION_CONFIG;
    const parsed = parseTemplate(template2, sourceMapUrl, { preserveWhitespaces, interpolationConfig });
    if (parsed.errors !== null) {
      const errors = parsed.errors.map((err2) => err2.toString()).join(", ");
      throw new Error(`Errors during JIT compilation of template for ${typeName}: ${errors}`);
    }
    const binder = new R3TargetBinder(new SelectorMatcher());
    const boundTarget = binder.bind({ template: parsed.nodes });
    return {
      template: parsed,
      interpolation: interpolationConfig,
      deferBlocks: createR3DeferredMetadata(boundTarget)
    };
  }
  function convertToProviderExpression(obj, property2) {
    if (obj.hasOwnProperty(property2)) {
      return createMayBeForwardRefExpression(
        new WrappedNodeExpr(obj[property2]),
        0
        /* ForwardRefHandling.None */
      );
    } else {
      return void 0;
    }
  }
  function wrapExpression(obj, property2) {
    if (obj.hasOwnProperty(property2)) {
      return new WrappedNodeExpr(obj[property2]);
    } else {
      return void 0;
    }
  }
  function computeProvidedIn(providedIn) {
    const expression = typeof providedIn === "function" ? new WrappedNodeExpr(providedIn) : new LiteralExpr(providedIn ?? null);
    return createMayBeForwardRefExpression(
      expression,
      0
      /* ForwardRefHandling.None */
    );
  }
  function convertR3DependencyMetadataArray(facades) {
    return facades == null ? null : facades.map(convertR3DependencyMetadata);
  }
  function convertR3DependencyMetadata(facade) {
    const isAttributeDep = facade.attribute != null;
    const rawToken = facade.token === null ? null : new WrappedNodeExpr(facade.token);
    const token = isAttributeDep ? new WrappedNodeExpr(facade.attribute) : rawToken;
    return createR3DependencyMetadata(token, isAttributeDep, facade.host, facade.optional, facade.self, facade.skipSelf);
  }
  function convertR3DeclareDependencyMetadata(facade) {
    const isAttributeDep = facade.attribute ?? false;
    const token = facade.token === null ? null : new WrappedNodeExpr(facade.token);
    return createR3DependencyMetadata(token, isAttributeDep, facade.host ?? false, facade.optional ?? false, facade.self ?? false, facade.skipSelf ?? false);
  }
  function createR3DependencyMetadata(token, isAttributeDep, host, optional, self2, skipSelf) {
    const attributeNameType = isAttributeDep ? literal("unknown") : null;
    return { token, attributeNameType, host, optional, self: self2, skipSelf };
  }
  function createR3DeferredMetadata(boundTarget) {
    const deferredBlocks = boundTarget.getDeferBlocks();
    const meta = /* @__PURE__ */ new Map();
    for (const block of deferredBlocks) {
      const triggerElements = /* @__PURE__ */ new Map();
      resolveDeferTriggers(block, block.triggers, boundTarget, triggerElements);
      resolveDeferTriggers(block, block.prefetchTriggers, boundTarget, triggerElements);
      meta.set(block, { deps: [], triggerElements });
    }
    return meta;
  }
  function resolveDeferTriggers(block, triggers, boundTarget, triggerElements) {
    Object.keys(triggers).forEach((key) => {
      const trigger = triggers[key];
      triggerElements.set(trigger, boundTarget.getDeferredTriggerTarget(block, trigger));
    });
  }
  function extractHostBindings(propMetadata, sourceSpan, host) {
    const bindings = parseHostBindings(host || {});
    const errors = verifyHostBindings(bindings, sourceSpan);
    if (errors.length) {
      throw new Error(errors.map((error2) => error2.msg).join("\n"));
    }
    for (const field in propMetadata) {
      if (propMetadata.hasOwnProperty(field)) {
        propMetadata[field].forEach((ann) => {
          if (isHostBinding(ann)) {
            bindings.properties[ann.hostPropertyName || field] = getSafePropertyAccessString("this", field);
          } else if (isHostListener(ann)) {
            bindings.listeners[ann.eventName || field] = `${field}(${(ann.args || []).join(",")})`;
          }
        });
      }
    }
    return bindings;
  }
  function isHostBinding(value) {
    return value.ngMetadataName === "HostBinding";
  }
  function isHostListener(value) {
    return value.ngMetadataName === "HostListener";
  }
  function isInput(value) {
    return value.ngMetadataName === "Input";
  }
  function isOutput(value) {
    return value.ngMetadataName === "Output";
  }
  function inputsPartialMetadataToInputMetadata(inputs) {
    return Object.keys(inputs).reduce((result, minifiedClassName) => {
      const value = inputs[minifiedClassName];
      if (typeof value === "string" || Array.isArray(value)) {
        result[minifiedClassName] = parseLegacyInputPartialOutput(value);
      } else {
        result[minifiedClassName] = {
          bindingPropertyName: value.publicName,
          classPropertyName: minifiedClassName,
          transformFunction: value.transformFunction !== null ? new WrappedNodeExpr(value.transformFunction) : null,
          required: value.isRequired,
          isSignal: value.isSignal
        };
      }
      return result;
    }, {});
  }
  function parseLegacyInputPartialOutput(value) {
    if (typeof value === "string") {
      return {
        bindingPropertyName: value,
        classPropertyName: value,
        transformFunction: null,
        required: false,
        // legacy partial output does not capture signal inputs.
        isSignal: false
      };
    }
    return {
      bindingPropertyName: value[0],
      classPropertyName: value[1],
      transformFunction: value[2] ? new WrappedNodeExpr(value[2]) : null,
      required: false,
      // legacy partial output does not capture signal inputs.
      isSignal: false
    };
  }
  function parseInputsArray(values) {
    return values.reduce((results, value) => {
      if (typeof value === "string") {
        const [bindingPropertyName, classPropertyName] = parseMappingString(value);
        results[classPropertyName] = {
          bindingPropertyName,
          classPropertyName,
          required: false,
          // Signal inputs not supported for the inputs array.
          isSignal: false,
          transformFunction: null
        };
      } else {
        results[value.name] = {
          bindingPropertyName: value.alias || value.name,
          classPropertyName: value.name,
          required: value.required || false,
          // Signal inputs not supported for the inputs array.
          isSignal: false,
          transformFunction: value.transform != null ? new WrappedNodeExpr(value.transform) : null
        };
      }
      return results;
    }, {});
  }
  function parseMappingStringArray(values) {
    return values.reduce((results, value) => {
      const [alias, fieldName] = parseMappingString(value);
      results[fieldName] = alias;
      return results;
    }, {});
  }
  function parseMappingString(value) {
    const [fieldName, bindingPropertyName] = value.split(":", 2).map((str) => str.trim());
    return [bindingPropertyName ?? fieldName, fieldName];
  }
  function convertDeclarePipeFacadeToMetadata(declaration) {
    return {
      name: declaration.type.name,
      type: wrapReference(declaration.type),
      typeArgumentCount: 0,
      pipeName: declaration.name,
      deps: null,
      pure: declaration.pure ?? true,
      isStandalone: declaration.isStandalone ?? false
    };
  }
  function convertDeclareInjectorFacadeToMetadata(declaration) {
    return {
      name: declaration.type.name,
      type: wrapReference(declaration.type),
      providers: declaration.providers !== void 0 && declaration.providers.length > 0 ? new WrappedNodeExpr(declaration.providers) : null,
      imports: declaration.imports !== void 0 ? declaration.imports.map((i) => new WrappedNodeExpr(i)) : []
    };
  }
  function publishFacade(global2) {
    const ng = global2.ng || (global2.ng = {});
    ng.\u0275compilerFacade = new CompilerFacadeImpl();
  }
  var VERSION2 = new Version2("17.3.5");
  var CompilerConfig = class {
    constructor({ defaultEncapsulation = ViewEncapsulation2.Emulated, preserveWhitespaces, strictInjectionParameters } = {}) {
      this.defaultEncapsulation = defaultEncapsulation;
      this.preserveWhitespaces = preserveWhitespacesDefault(noUndefined(preserveWhitespaces));
      this.strictInjectionParameters = strictInjectionParameters === true;
    }
  };
  function preserveWhitespacesDefault(preserveWhitespacesOption, defaultSetting = false) {
    return preserveWhitespacesOption === null ? defaultSetting : preserveWhitespacesOption;
  }
  var _VisitorMode;
  (function(_VisitorMode2) {
    _VisitorMode2[_VisitorMode2["Extract"] = 0] = "Extract";
    _VisitorMode2[_VisitorMode2["Merge"] = 1] = "Merge";
  })(_VisitorMode || (_VisitorMode = {}));
  var XmlTagDefinition = class {
    constructor() {
      this.closedByParent = false;
      this.implicitNamespacePrefix = null;
      this.isVoid = false;
      this.ignoreFirstLf = false;
      this.canSelfClose = true;
      this.preventNamespaceInheritance = false;
    }
    requireExtraParent(currentParent) {
      return false;
    }
    isClosedByChild(name) {
      return false;
    }
    getContentType() {
      return TagContentType.PARSABLE_DATA;
    }
  };
  var _TAG_DEFINITION = new XmlTagDefinition();
  var FactoryTarget2;
  (function(FactoryTarget3) {
    FactoryTarget3[FactoryTarget3["Directive"] = 0] = "Directive";
    FactoryTarget3[FactoryTarget3["Component"] = 1] = "Component";
    FactoryTarget3[FactoryTarget3["Injectable"] = 2] = "Injectable";
    FactoryTarget3[FactoryTarget3["Pipe"] = 3] = "Pipe";
    FactoryTarget3[FactoryTarget3["NgModule"] = 4] = "NgModule";
  })(FactoryTarget2 || (FactoryTarget2 = {}));
  publishFacade(_global2);

  // node_modules/@angular/platform-browser-dynamic/fesm2022/platform-browser-dynamic.mjs
  init_core();
  init_core();
  init_common();
  init_platform_browser();
  var COMPILER_PROVIDERS = [{ provide: Compiler, useFactory: () => new Compiler() }];
  var JitCompilerFactory = class {
    /** @internal */
    constructor(defaultOptions) {
      const compilerOptions = {
        defaultEncapsulation: ViewEncapsulation$1.Emulated
      };
      this._defaultOptions = [compilerOptions, ...defaultOptions];
    }
    createCompiler(options = []) {
      const opts = _mergeOptions(this._defaultOptions.concat(options));
      const injector = Injector.create({
        providers: [
          COMPILER_PROVIDERS,
          {
            provide: CompilerConfig,
            useFactory: () => {
              return new CompilerConfig({
                defaultEncapsulation: opts.defaultEncapsulation,
                preserveWhitespaces: opts.preserveWhitespaces
              });
            },
            deps: []
          },
          opts.providers
        ]
      });
      return injector.get(Compiler);
    }
  };
  function _mergeOptions(optionsArr) {
    return {
      defaultEncapsulation: _lastDefined2(optionsArr.map((options) => options.defaultEncapsulation)),
      providers: _mergeArrays(optionsArr.map((options) => options.providers)),
      preserveWhitespaces: _lastDefined2(optionsArr.map((options) => options.preserveWhitespaces))
    };
  }
  function _lastDefined2(args) {
    for (let i = args.length - 1; i >= 0; i--) {
      if (args[i] !== void 0) {
        return args[i];
      }
    }
    return void 0;
  }
  function _mergeArrays(parts) {
    const result = [];
    parts.forEach((part) => part && result.push(...part));
    return result;
  }
  var platformCoreDynamic = createPlatformFactory(platformCore, "coreDynamic", [
    { provide: COMPILER_OPTIONS, useValue: {}, multi: true },
    { provide: CompilerFactory, useClass: JitCompilerFactory, deps: [COMPILER_OPTIONS] }
  ]);
  var ResourceLoaderImpl = class _ResourceLoaderImpl extends ResourceLoader {
    get(url) {
      let resolve;
      let reject;
      const promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
      });
      const xhr = new XMLHttpRequest();
      xhr.open("GET", url, true);
      xhr.responseType = "text";
      xhr.onload = function() {
        const response = xhr.response;
        let status = xhr.status;
        if (status === 0) {
          status = response ? 200 : 0;
        }
        if (200 <= status && status <= 300) {
          resolve(response);
        } else {
          reject(`Failed to load ${url}`);
        }
      };
      xhr.onerror = function() {
        reject(`Failed to load ${url}`);
      };
      xhr.send();
      return promise;
    }
    static {
      this.\u0275fac = \u0275\u0275ngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _ResourceLoaderImpl, deps: null, target: FactoryTarget.Injectable });
    }
    static {
      this.\u0275prov = \u0275\u0275ngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: _ResourceLoaderImpl });
    }
  };
  \u0275\u0275ngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: core_exports, type: ResourceLoaderImpl, decorators: [{
    type: Injectable
  }] });
  var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [
    INTERNAL_BROWSER_PLATFORM_PROVIDERS,
    {
      provide: COMPILER_OPTIONS,
      useValue: { providers: [{ provide: ResourceLoader, useClass: ResourceLoaderImpl, deps: [] }] },
      multi: true
    },
    { provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID }
  ];
  var VERSION5 = new Version("17.3.5");
  var platformBrowserDynamic = createPlatformFactory(platformCoreDynamic, "browserDynamic", INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);

  // src/app/app.module.ts
  init_core();
  init_platform_browser();
  init_router();
  init_ionic_angular();

  // src/app/app-routing.module.ts
  init_core();
  init_router();
  var routes5 = [
    {
      path: "",
      loadChildren: () => Promise.resolve().then(() => (init_tabs_module(), tabs_module_exports)).then((m) => m.TabsPageModule)
    }
  ];
  var AppRoutingModule = class {
  };
  AppRoutingModule = __decorateClass([
    NgModule({
      imports: [
        RouterModule.forRoot(routes5, { preloadingStrategy: PreloadAllModules })
      ],
      exports: [RouterModule]
    })
  ], AppRoutingModule);

  // src/app/app.component.ts
  init_core();
  var AppComponent = class {
    constructor() {
    }
  };
  AppComponent = __decorateClass([
    Component({
      selector: "app-root",
      templateUrl: "app.component.html",
      styleUrls: ["app.component.scss"]
    })
  ], AppComponent);

  // src/app/app.module.ts
  var AppModule = class {
  };
  AppModule = __decorateClass([
    NgModule({
      declarations: [AppComponent],
      imports: [BrowserModule, IonicModule.forRoot(), AppRoutingModule],
      providers: [{ provide: RouteReuseStrategy, useClass: IonicRouteStrategy }],
      bootstrap: [AppComponent]
    })
  ], AppModule);

  // src/environments/environment.ts
  var environment = {
    production: false
  };

  // src/main.ts
  if (environment.production) {
    enableProdMode();
  }
  platformBrowserDynamic().bootstrapModule(AppModule).catch((err2) => console.log(err2));
})();
/*! Bundled license information:

@angular/core/fesm2022/primitives/signals.mjs:
  (**
   * @license Angular v17.3.5
   * (c) 2010-2024 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/core/fesm2022/core.mjs:
  (**
   * @license Angular v17.3.5
   * (c) 2010-2024 Google LLC. https://angular.io/
   * License: MIT
   *)
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   *)

@angular/common/fesm2022/common.mjs:
  (**
   * @license Angular v17.3.5
   * (c) 2010-2024 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/platform-browser/fesm2022/platform-browser.mjs:
  (**
   * @license Angular v17.3.5
   * (c) 2010-2024 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/router/fesm2022/router.mjs:
  (**
   * @license Angular v17.3.5
   * (c) 2010-2024 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/forms/fesm2022/forms.mjs:
  (**
   * @license Angular v17.3.5
   * (c) 2010-2024 Google LLC. https://angular.io/
   * License: MIT
   *)

@ionic/core/components/helpers.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/components/index2.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/components/ionic-global.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/components/index.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/index-a5d50daf.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/animation-eab5a4ca.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/index-5dc2b88e.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)
  (*!
   Stencil Mock Doc v4.17.1 | MIT Licensed | https://stenciljs.com
   *)
  (*!__STENCIL_STATIC_IMPORT_SWITCH__*)

@ionic/core/dist/esm-es5/helpers-da915de8.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/index-f7fbe1fb.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/ios.transition-a0041e41.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/md.transition-0c0602d9.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/cubic-bezier-fe2083dc.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/gesture-controller-314a54f6.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/index-39782642.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/ionic-global-d2d8f882.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/config-49c88215.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/theme-01f3f29c.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/hardware-back-button-804f43bb.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/index-9b0d46f4.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/index-8dbae644.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/framework-delegate-63d1a679.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/overlays-696d25f5.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/index.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm/polyfills/dom.js:
  (*!
  Element.closest and Element.matches
  https://github.com/jonathantneal/closest
  Creative Commons Zero v1.0 Universal
  *)
  (*!
  Element.getRootNode()
  *)
  (*!
  Element.isConnected()
  *)
  (*!
  Element.remove()
  *)
  (*!
  Element.classList
  *)
  (*!
  DOMTokenList
  *)

@ionic/core/dist/esm/polyfills/core-js.js:
  (*!fetch 3.0.0, global "this" must be replaced with "window" *)

@ionic/core/dist/esm-es5/app-globals-3cbaf9d9.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/dist/esm-es5/loader.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@ionic/core/loader/index.js:
  (*!
   * (C) Ionic http://ionicframework.com - MIT License
   *)

@angular/compiler/fesm2022/compiler.mjs:
  (**
   * @license Angular v17.3.5
   * (c) 2010-2024 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/compiler/fesm2022/compiler.mjs:
  (**
   *
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   *)

@angular/platform-browser-dynamic/fesm2022/platform-browser-dynamic.mjs:
  (**
   * @license Angular v17.3.5
   * (c) 2010-2024 Google LLC. https://angular.io/
   * License: MIT
   *)
*/
